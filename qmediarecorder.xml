<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaRecorder Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> class is used for the recording of media content.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaRecorder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qmediabindableinterface.xml" xlink:role="class">QMediaBindableInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaudiorecorder.xml" xlink:role="class">QAudioRecorder</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaRecorder is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_recording</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> class is a high level media recording class. It's not intended to be used alone but for accessing the media recording functions of other media objects, like <db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link>, or <db:link xlink:href="qcamera.xml">QCamera</db:link>.</db:para>
<db:programlisting language="cpp">recorder = new QMediaRecorder(camera);

QAudioEncoderSettings audioSettings;
audioSettings.setCodec(&quot;audio/amr&quot;);
audioSettings.setQuality(QMultimedia::HighQuality);

recorder-&amp;gt;setAudioSettings(audioSettings);

recorder-&amp;gt;setOutputLocation(QUrl::fromLocalFile(fileName));
recorder-&amp;gt;record();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiorecorder.xml">QAudioRecorder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QMediaRecorder::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResourceError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FormatError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OutOfSpaceError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No Errors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Device is not ready or not available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::FormatError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Current format is not supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::OutOfSpaceError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>No space left on device.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QMediaRecorder::State</db:title>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>StoppedState</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RecordingState</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PausedState</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::StoppedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The recorder is not active. If this is the state after recording then the actual created recording has finished being written to the final location and is ready on all platforms except on Android. On Android, due to platform limitations, there is no way to be certain that the recording has finished writing to the final location.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::RecordingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The recording is requested.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::PausedState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The recorder is paused.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QMediaRecorder::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>UnavailableStatus</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnloadedStatus</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoadingStatus</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoadedStatus</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StartingStatus</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RecordingStatus</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PausedStatus</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FinalizingStatus</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::UnavailableStatus</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The recorder is not available or not supported by connected media object.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::UnloadedStatus</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The recorder is avilable but not loaded.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::LoadingStatus</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The recorder is initializing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::LoadedStatus</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The recorder is initialized and ready to record media.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::StartingStatus</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Recording is requested but not active yet.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::RecordingStatus</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Recording is active.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::PausedStatus</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Recording is paused.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::FinalizingStatus</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Recording is stopped with media being finalized.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="actualLocation-prop">
<db:title>[read-only] actualLocation : const QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>actualLocation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">actualLocation</db:synopsisinfo>
<db:synopsisinfo role="notifier">actualLocationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the actual location of the last media content.</db:para>
<db:para>The actual location is usually available after recording starts, and reset when new location is set or new recording starts.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">actualLocation</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#actualLocationChanged">actualLocationChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>location</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="duration-prop">
<db:title>[read-only] duration : const qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>duration</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">duration</db:synopsisinfo>
<db:synopsisinfo role="notifier">durationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the recorded media duration in milliseconds.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold">duration</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#durationChanged">durationChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis>duration</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="metaDataAvailable-prop">
<db:title>[read-only] metaDataAvailable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>metaDataAvailable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isMetaDataAvailable</db:synopsisinfo>
<db:synopsisinfo role="notifier">metaDataAvailableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether access to a media object's meta-data is available.</db:para>
<db:para>If this is true there is meta-data available, otherwise there is no meta-data available.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isMetaDataAvailable</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#metaDataAvailableChanged">metaDataAvailableChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>available</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="metaDataWritable-prop">
<db:title>[read-only] metaDataWritable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>metaDataWritable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isMetaDataWritable</db:synopsisinfo>
<db:synopsisinfo role="notifier">metaDataWritableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether a media object's meta-data is writable.</db:para>
<db:para>If this is true the meta-data is writable, otherwise the meta-data is read-only.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isMetaDataWritable</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#metaDataWritableChanged">metaDataWritableChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>writable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="muted-prop">
<db:title>muted : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>muted</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isMuted</db:synopsisinfo>
<db:synopsisinfo role="setter">setMuted</db:synopsisinfo>
<db:synopsisinfo role="notifier">mutedChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether a recording audio stream is muted.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isMuted</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMuted</db:emphasis>(<db:type>bool</db:type> <db:emphasis>muted</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#mutedChanged">mutedChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>muted</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="outputLocation-prop">
<db:title>outputLocation : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>outputLocation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">outputLocation</db:synopsisinfo>
<db:synopsisinfo role="setter">setOutputLocation</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the destination location of media content.</db:para>
<db:para>Setting the location can fail, for example when the service supports only local file system locations but a network URL was passed. If the service does not support media recording this setting the output location will always fail.</db:para>
<db:para>The <db:code role="parameter">location</db:code> can be relative or empty; in this case the recorder uses the system specific place and file naming scheme. After recording has stated, QMediaRecorder::outputLocation() returns the actual output location.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">outputLocation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setOutputLocation</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>location</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const QMediaRecorder::State</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaRecorder::State</db:type>
<db:varname>state</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">state</db:synopsisinfo>
<db:synopsisinfo role="notifier">stateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current state of the media recorder.</db:para>
<db:para>The state property represents the user request and is changed synchronously during <db:link xlink:href="qmediarecorder.xml#record">record</db:link>(), <db:link xlink:href="qmediarecorder.xml#pause">pause</db:link>() or <db:link xlink:href="qmediarecorder.xml#stop">stop</db:link>() calls. Recorder state may also change asynchronously when recording fails.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediarecorder.xml#State-enum">QMediaRecorder::State</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#state">state</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#stateChanged">stateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qmediarecorder.xml#State-enum">QMediaRecorder::State</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const QMediaRecorder::Status</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaRecorder::Status</db:type>
<db:varname>status</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">status</db:synopsisinfo>
<db:synopsisinfo role="notifier">statusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current status of the media recorder.</db:para>
<db:para>The status is changed asynchronously and represents the actual status of media recorder.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediarecorder.xml#Status-enum">QMediaRecorder::Status</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#status">status</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">statusChanged</db:emphasis>(<db:type><db:link xlink:href="qmediarecorder.xml#Status-enum">QMediaRecorder::Status</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="volume-prop">
<db:title>volume : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>volume</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">volume</db:synopsisinfo>
<db:synopsisinfo role="setter">setVolume</db:synopsisinfo>
<db:synopsisinfo role="notifier">volumeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current recording audio volume.</db:para>
<db:para>The volume is scaled linearly from <db:code>0.0</db:code> (silence) to <db:code>1.0</db:code> (full volume). Values outside this range will be clamped.</db:para>
<db:para>The default volume is <db:code>1.0</db:code>.</db:para>
<db:para>UI volume controls should usually be scaled nonlinearly. For example, using a logarithmic scale will produce linear changes in perceived loudness, which is what a user would normally expect from a volume control. See <db:link xlink:href="qaudio.xml#convertVolume">QAudio::convertVolume</db:link>() for more details.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">volume</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVolume</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">volumeChanged</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaRecorder">
<db:title>[explicit] QMediaRecorder::QMediaRecorder(QMediaObject *<db:emphasis>mediaObject</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaRecorder</db:methodname>
<db:methodparam>
<db:type>QMediaObject *</db:type>
<db:parameter>mediaObject</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorder(QMediaObject *mediaObject, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a media recorder which records the media produced by <db:code role="parameter">mediaObject</db:code>.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaRecorder">
<db:title>[virtual] QMediaRecorder::~QMediaRecorder()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMediaRecorder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaRecorder()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a media recorder object.</db:para>
</db:section>
<db:section xml:id="actualLocationChanged">
<db:title>void QMediaRecorder::actualLocationChanged(const QUrl &amp;<db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>actualLocationChanged</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">actualLocation</db:synopsisinfo>
<db:synopsisinfo role="signature">void actualLocationChanged(const QUrl &amp;location)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the actual <db:code role="parameter">location</db:code> of the recorded media has changed. This signal is usually emitted when recording starts.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#actualLocation-prop">actualLocation</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="audioCodecDescription">
<db:title>QString QMediaRecorder::audioCodecDescription(const QString &amp;<db:emphasis>codec</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>audioCodecDescription</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString audioCodecDescription(const QString &amp;codec) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a description of an audio <db:code role="parameter">codec</db:code>.</db:para>
</db:section>
<db:section xml:id="audioSettings">
<db:title>QAudioEncoderSettings QMediaRecorder::audioSettings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAudioEncoderSettings</db:type>
<db:methodname>audioSettings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioEncoderSettings audioSettings() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the audio encoder settings being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setAudioSettings">setAudioSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#setEncodingSettings">setEncodingSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availability">
<db:title>QMultimedia::AvailabilityStatus QMediaRecorder::availability() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultimedia::AvailabilityStatus</db:type>
<db:methodname>availability</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultimedia::AvailabilityStatus availability() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the availability of this functionality.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#availabilityChanged">availabilityChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availabilityChanged">
<db:title>void QMediaRecorder::availabilityChanged(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>availabilityChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>available</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void availabilityChanged(bool available)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the media recorder is now available (if <db:code role="parameter">available</db:code> is true), or not.</db:para>
</db:section>
<db:section xml:id="availabilityChanged-1">
<db:title>void QMediaRecorder::availabilityChanged(QMultimedia::AvailabilityStatus <db:emphasis>availability</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>availabilityChanged</db:methodname>
<db:methodparam>
<db:type>QMultimedia::AvailabilityStatus</db:type>
<db:parameter>availability</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void availabilityChanged(QMultimedia::AvailabilityStatus availability)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the service availability has changed to <db:code role="parameter">availability</db:code>.</db:para>
</db:section>
<db:section xml:id="availableMetaData">
<db:title>QStringList QMediaRecorder::availableMetaData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>availableMetaData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList availableMetaData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of keys there is meta-data available for.</db:para>
</db:section>
<db:section xml:id="containerDescription">
<db:title>QString QMediaRecorder::containerDescription(const QString &amp;<db:emphasis>format</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>containerDescription</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString containerDescription(const QString &amp;format) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a description of a container <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="containerFormat">
<db:title>QString QMediaRecorder::containerFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>containerFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString containerFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the selected container format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setContainerFormat">setContainerFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="durationChanged">
<db:title>void QMediaRecorder::durationChanged(qint64 <db:emphasis>duration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>durationChanged</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">duration</db:synopsisinfo>
<db:synopsisinfo role="signature">void durationChanged(qint64 duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">duration</db:code> of the recorded media has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#duration-prop">duration</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="error">
<db:title>QMediaRecorder::Error QMediaRecorder::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaRecorder::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorder::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current error state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QMediaRecorder::error(QMediaRecorder::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>QMediaRecorder::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(QMediaRecorder::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that an <db:code role="parameter">error</db:code> has occurred.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QMediaRecorder::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string describing the current error state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAvailable">
<db:title>bool QMediaRecorder::isAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if media recorder service ready to use.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#availabilityChanged">availabilityChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaObject">
<db:title>[override virtual] QMediaObject *QMediaRecorder::mediaObject() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMediaObject *</db:type>
<db:methodname>mediaObject</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaObject * mediaObject() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmediabindableinterface.xml#mediaObject" role="function">QMediaBindableInterface::mediaObject() const</db:link>.</db:para>
<db:para>Returns the <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> instance that this <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> is bound too, or 0 otherwise.</db:para>
</db:section>
<db:section xml:id="metaData">
<db:title>QVariant QMediaRecorder::metaData(const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>metaData</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant metaData(const QString &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value associated with a meta-data <db:code role="parameter">key</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setMetaData">setMetaData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metaDataAvailableChanged">
<db:title>void QMediaRecorder::metaDataAvailableChanged(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>metaDataAvailableChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>available</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">metaDataAvailable</db:synopsisinfo>
<db:synopsisinfo role="signature">void metaDataAvailableChanged(bool available)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">available</db:code> state of a media object's meta-data has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#metaDataAvailable-prop">metaDataAvailable</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="metaDataChanged">
<db:title>void QMediaRecorder::metaDataChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>metaDataChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void metaDataChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a media object's meta-data has changed.</db:para>
<db:para>If multiple meta-data elements are changed, metaDataChanged(const <db:link xlink:href="qstring.xml">QString</db:link> &amp;key, const <db:link xlink:href="qvariant.xml">QVariant</db:link> &amp;value) signal is emitted for each of them with metaDataChanged() changed emitted once.</db:para>
</db:section>
<db:section xml:id="metaDataChanged-1">
<db:title>void QMediaRecorder::metaDataChanged(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>metaDataChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void metaDataChanged(const QString &amp;key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the changes of one meta-data element <db:code role="parameter">value</db:code> with the given <db:code role="parameter">key</db:code>.</db:para>
</db:section>
<db:section xml:id="metaDataWritableChanged">
<db:title>void QMediaRecorder::metaDataWritableChanged(bool <db:emphasis>writable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>metaDataWritableChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>writable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">metaDataWritable</db:synopsisinfo>
<db:synopsisinfo role="signature">void metaDataWritableChanged(bool writable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">writable</db:code> state of a media object's meta-data has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#metaDataWritable-prop">metaDataWritable</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="mutedChanged">
<db:title>void QMediaRecorder::mutedChanged(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mutedChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>muted</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">muted</db:synopsisinfo>
<db:synopsisinfo role="signature">void mutedChanged(bool muted)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">muted</db:code> state has changed. If true the recording is being muted.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#muted-prop">muted</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pause">
<db:title>void QMediaRecorder::pause()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pause</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pause()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pause recording.</db:para>
<db:para>The recorder state is changed to <db:link xlink:href="qmediarecorder.xml#State-enum">QMediaRecorder::PausedState</db:link>.</db:para>
<db:para>Depending on platform recording pause may be not supported, in this case the recorder state stays unchanged.</db:para>
</db:section>
<db:section xml:id="record">
<db:title>void QMediaRecorder::record()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>record</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void record()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Start recording.</db:para>
<db:para>While the recorder state is changed immediately to <db:link xlink:href="qmediarecorder.xml#State-enum">QMediaRecorder::RecordingState</db:link>, recording may start asynchronously, with <db:link xlink:href="qmediarecorder.xml#status-prop">statusChanged</db:link>(<db:link xlink:href="qmediarecorder.xml#Status-enum">QMediaRecorder::RecordingStatus</db:link>) signal emitted when recording starts.</db:para>
<db:para>If recording fails <db:link xlink:href="qmediarecorder.xml#error">error</db:link>() signal is emitted with recorder state being reset back to <db:link xlink:href="qmediarecorder.xml#State-enum">QMediaRecorder::StoppedState</db:link>.</db:para>
</db:section>
<db:section xml:id="setAudioSettings">
<db:title>void QMediaRecorder::setAudioSettings(const QAudioEncoderSettings &amp;<db:emphasis>settings</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAudioSettings</db:methodname>
<db:methodparam>
<db:type>const QAudioEncoderSettings &amp;</db:type>
<db:parameter>settings</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAudioSettings(const QAudioEncoderSettings &amp;settings)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the audio encoder <db:code role="parameter">settings</db:code>.</db:para>
<db:para>If some parameters are not specified, or null settings are passed, the encoder will choose default encoding parameters, depending on media source properties.</db:para>
<db:para>It's only possible to change settings when the encoder is in the QMediaEncoder::StoppedState state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#audioSettings">audioSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#videoSettings">videoSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#containerFormat">containerFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContainerFormat">
<db:title>void QMediaRecorder::setContainerFormat(const QString &amp;<db:emphasis>container</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContainerFormat</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>container</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContainerFormat(const QString &amp;container)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the media <db:code role="parameter">container</db:code> format.</db:para>
<db:para>If the container format is not specified, the encoder will choose format, depending on media source properties and encoding settings selected.</db:para>
<db:para>It's only possible to change settings when the encoder is in the QMediaEncoder::StoppedState state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#audioSettings">audioSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#videoSettings">videoSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#containerFormat">containerFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncodingSettings">
<db:title>void QMediaRecorder::setEncodingSettings(const QAudioEncoderSettings &amp;<db:emphasis>audio</db:emphasis>, const QVideoEncoderSettings &amp;<db:emphasis>video</db:emphasis> = QVideoEncoderSettings(), const QString &amp;<db:emphasis>container</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEncodingSettings</db:methodname>
<db:methodparam>
<db:type>const QAudioEncoderSettings &amp;</db:type>
<db:parameter>audio</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVideoEncoderSettings &amp;</db:type>
<db:parameter>video</db:parameter>
<db:initializer>QVideoEncoderSettings()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>container</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEncodingSettings(const QAudioEncoderSettings &amp;audio, const QVideoEncoderSettings &amp;video, const QString &amp;container)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">audio</db:code> and <db:code role="parameter">video</db:code> encoder settings and <db:code role="parameter">container</db:code> format.</db:para>
<db:para>If some parameters are not specified, or null settings are passed, the encoder will choose default encoding parameters, depending on media source properties.</db:para>
<db:para>It's only possible to change settings when the encoder is in the QMediaEncoder::StoppedState state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#audioSettings">audioSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#videoSettings">videoSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#containerFormat">containerFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMetaData">
<db:title>void QMediaRecorder::setMetaData(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMetaData</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMetaData(const QString &amp;key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a <db:code role="parameter">value</db:code> for a meta-data <db:code role="parameter">key</db:code>.</db:para>
<db:note>
<db:para>To ensure that meta data is set corretly, it should be set before starting the recording. Once the recording is stopped, any meta data set will be attached to the next recording.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#metaData">metaData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVideoSettings">
<db:title>void QMediaRecorder::setVideoSettings(const QVideoEncoderSettings &amp;<db:emphasis>settings</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoSettings</db:methodname>
<db:methodparam>
<db:type>const QVideoEncoderSettings &amp;</db:type>
<db:parameter>settings</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoSettings(const QVideoEncoderSettings &amp;settings)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the video encoder <db:code role="parameter">settings</db:code>.</db:para>
<db:para>If some parameters are not specified, or null settings are passed, the encoder will choose default encoding parameters, depending on media source properties.</db:para>
<db:para>It's only possible to change settings when the encoder is in the QMediaEncoder::StoppedState state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#audioSettings">audioSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#videoSettings">videoSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#containerFormat">containerFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QMediaRecorder::State QMediaRecorder::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaRecorder::State</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">state</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorder::State state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current media recorder state.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediarecorder.xml#state-prop">state</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#State-enum">QMediaRecorder::State</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QMediaRecorder::stateChanged(QMediaRecorder::State <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QMediaRecorder::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">state</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QMediaRecorder::State state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a media recorder's <db:code role="parameter">state</db:code> has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#state-prop">state</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="status">
<db:title>QMediaRecorder::Status QMediaRecorder::status() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaRecorder::Status</db:type>
<db:methodname>status</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">status</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorder::Status status() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current media recorder status.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediarecorder.xml#status-prop">status</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#Status-enum">QMediaRecorder::Status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QMediaRecorder::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stop recording.</db:para>
<db:para>The recorder state is changed to <db:link xlink:href="qmediarecorder.xml#State-enum">QMediaRecorder::StoppedState</db:link>.</db:para>
</db:section>
<db:section xml:id="supportedAudioCodecs">
<db:title>QStringList QMediaRecorder::supportedAudioCodecs() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>supportedAudioCodecs</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList supportedAudioCodecs() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of supported audio codecs.</db:para>
</db:section>
<db:section xml:id="supportedAudioSampleRates">
<db:title>QList&lt;int&gt; QMediaRecorder::supportedAudioSampleRates(const QAudioEncoderSettings &amp;<db:emphasis>settings</db:emphasis> = QAudioEncoderSettings(), bool *<db:emphasis>continuous</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;int&gt;</db:type>
<db:methodname>supportedAudioSampleRates</db:methodname>
<db:methodparam>
<db:type>const QAudioEncoderSettings &amp;</db:type>
<db:parameter>settings</db:parameter>
<db:initializer>QAudioEncoderSettings()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>continuous</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;int&gt; supportedAudioSampleRates(const QAudioEncoderSettings &amp;settings, bool *continuous) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of supported audio sample rates.</db:para>
<db:para>If non null audio <db:code role="parameter">settings</db:code> parameter is passed, the returned list is reduced to sample rates supported with partial settings applied.</db:para>
<db:para>This can be used to query the list of sample rates, supported by specific audio codec.</db:para>
<db:para>If the encoder supports arbitrary sample rates within the supported rates range, *<db:code role="parameter">continuous</db:code> is set to true, otherwise *<db:code role="parameter">continuous</db:code> is set to false.</db:para>
</db:section>
<db:section xml:id="supportedContainers">
<db:title>QStringList QMediaRecorder::supportedContainers() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>supportedContainers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList supportedContainers() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of supported container formats.</db:para>
</db:section>
<db:section xml:id="supportedFrameRates">
<db:title>QList&lt;qreal&gt; QMediaRecorder::supportedFrameRates(const QVideoEncoderSettings &amp;<db:emphasis>settings</db:emphasis> = QVideoEncoderSettings(), bool *<db:emphasis>continuous</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;qreal&gt;</db:type>
<db:methodname>supportedFrameRates</db:methodname>
<db:methodparam>
<db:type>const QVideoEncoderSettings &amp;</db:type>
<db:parameter>settings</db:parameter>
<db:initializer>QVideoEncoderSettings()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>continuous</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;qreal&gt; supportedFrameRates(const QVideoEncoderSettings &amp;settings, bool *continuous) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of frame rates video can be encoded at.</db:para>
<db:para>If non null video <db:code role="parameter">settings</db:code> parameter is passed, the returned list is reduced to frame rates supported with partial settings like video codec or resolution applied.</db:para>
<db:para>If the encoder supports arbitrary frame rates within the supported range, *<db:code role="parameter">continuous</db:code> is set to true, otherwise *<db:code role="parameter">continuous</db:code> is set to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#frameRate">QVideoEncoderSettings::frameRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedResolutions">
<db:title>QList&lt;QSize&gt; QMediaRecorder::supportedResolutions(const QVideoEncoderSettings &amp;<db:emphasis>settings</db:emphasis> = QVideoEncoderSettings(), bool *<db:emphasis>continuous</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QSize&gt;</db:type>
<db:methodname>supportedResolutions</db:methodname>
<db:methodparam>
<db:type>const QVideoEncoderSettings &amp;</db:type>
<db:parameter>settings</db:parameter>
<db:initializer>QVideoEncoderSettings()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>continuous</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QSize&gt; supportedResolutions(const QVideoEncoderSettings &amp;settings, bool *continuous) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of resolutions video can be encoded at.</db:para>
<db:para>If non null video <db:code role="parameter">settings</db:code> parameter is passed, the returned list is reduced to resolution supported with partial settings like video codec or framerate applied.</db:para>
<db:para>If the encoder supports arbitrary resolutions within the supported range, *<db:code role="parameter">continuous</db:code> is set to true, otherwise *<db:code role="parameter">continuous</db:code> is set to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#resolution">QVideoEncoderSettings::resolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedVideoCodecs">
<db:title>QStringList QMediaRecorder::supportedVideoCodecs() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>supportedVideoCodecs</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList supportedVideoCodecs() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of supported video codecs.</db:para>
</db:section>
<db:section xml:id="videoCodecDescription">
<db:title>QString QMediaRecorder::videoCodecDescription(const QString &amp;<db:emphasis>codec</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>videoCodecDescription</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString videoCodecDescription(const QString &amp;codec) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a description of a video <db:code role="parameter">codec</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setEncodingSettings">setEncodingSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="videoSettings">
<db:title>QVideoEncoderSettings QMediaRecorder::videoSettings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoEncoderSettings</db:type>
<db:methodname>videoSettings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoEncoderSettings videoSettings() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the video encoder settings being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setVideoSettings">setVideoSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#setEncodingSettings">setEncodingSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
