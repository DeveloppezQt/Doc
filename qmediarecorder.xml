<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaRecorder Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> class is used for encoding and recording a capture session.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaRecorder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtmultimedia-mediarecorder.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaRecorder is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_recording</db:member><db:member>multimedia_video</db:member><db:member>multimedia_audio</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> class is a class for encoding and recording media generated in a <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link>.</db:para>
<db:programlisting language="cpp">QMediaCaptureSession session;
QAudioInput audioInput;
session.setAudioInput(&amp;amp;input);
QMediaRecorder recorder;
session.setRecorder(&amp;amp;recorder);
recorder.setQuality(QMediaRecorder::HighQuality);
recorder.setOutputLocation(QUrl::fromLocalFile(&quot;test.mp3&quot;));
recorder.record();
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="EncodingMode-enum">
<db:title>enum QMediaRecorder::EncodingMode</db:title>
<db:enumsynopsis>
<db:enumname>EncodingMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ConstantQualityEncoding</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConstantBitRateEncoding</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AverageBitRateEncoding</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TwoPassEncoding</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Enumerates encoding modes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::ConstantQualityEncoding</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Encoding will aim to have a constant quality, adjusting bitrate to fit.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::ConstantBitRateEncoding</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Encoding will use a constant bit rate, adjust quality to fit.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::AverageBitRateEncoding</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Encoding will try to keep an average bitrate setting, but will use more or less as needed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::TwoPassEncoding</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The media will first be processed to determine the characteristics, and then processed a second time allocating more bits to the areas that need it.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QMediaRecorder::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResourceError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FormatError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OutOfSpaceError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocationNotWritable</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No Errors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Device is not ready or not available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::FormatError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Current format is not supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::OutOfSpaceError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>No space left on device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::LocationNotWritable</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The output location is not writable.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Quality-enum">
<db:title>enum QMediaRecorder::Quality</db:title>
<db:enumsynopsis>
<db:enumname>Quality</db:enumname>
<db:enumitem>
<db:enumidentifier>VeryLowQuality</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LowQuality</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NormalQuality</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HighQuality</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VeryHighQuality</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Enumerates quality encoding levels.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::VeryLowQuality</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::LowQuality</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::NormalQuality</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::HighQuality</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::VeryHighQuality</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="RecorderState-enum">
<db:title>enum QMediaRecorder::RecorderState</db:title>
<db:enumsynopsis>
<db:enumname>RecorderState</db:enumname>
<db:enumitem>
<db:enumidentifier>StoppedState</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RecordingState</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PausedState</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::StoppedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The recorder is not active.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::RecordingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The recording is requested.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:emphasis>::PausedState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The recorder is paused.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="actualLocation-prop">
<db:title>[read-only] actualLocation : const QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>actualLocation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">actualLocation</db:synopsisinfo>
<db:synopsisinfo role="notifier">actualLocationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the actual location of the last media content.</db:para>
<db:para>The actual location is usually available after recording starts, and reset when new location is set or new recording starts.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">actualLocation</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#actualLocationChanged">actualLocationChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>location</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="duration-prop">
<db:title>[read-only] duration : const qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>duration</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">duration</db:synopsisinfo>
<db:synopsisinfo role="notifier">durationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the recorded media duration in milliseconds.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold">duration</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#durationChanged">durationChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis>duration</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : const QMediaRecorder::Error</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaRecorder::Error</db:type>
<db:varname>error</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">error</db:synopsisinfo>
<db:synopsisinfo role="notifier">errorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the current error state.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediarecorder.xml#Error-enum">QMediaRecorder::Error</db:link></db:type> <db:emphasis role="bold">error</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#errorChanged">errorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#errorString-prop">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>errorString</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">errorString</db:synopsisinfo>
<db:synopsisinfo role="notifier">errorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns a string describing the current error state.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">errorString</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#errorChanged">errorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#error-prop">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaFormat-prop">
<db:title>mediaFormat : QMediaFormat</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaFormat</db:type>
<db:varname>mediaFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">mediaFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setMediaFormat</db:synopsisinfo>
<db:synopsisinfo role="notifier">mediaFormatChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the recording media format.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:type> <db:emphasis role="bold">mediaFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMediaFormat</db:emphasis>(const <db:type><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">mediaFormatChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="metaData-prop">
<db:title>metaData : QMediaMetaData</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaMetaData</db:type>
<db:varname>metaData</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">metaData</db:synopsisinfo>
<db:synopsisinfo role="setter">setMetaData</db:synopsisinfo>
<db:synopsisinfo role="notifier">metaDataChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the metaData associated with the recording.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:type> <db:emphasis role="bold">metaData</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#setMetaData">setMetaData</db:link></db:emphasis>(const <db:type><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:type> &amp;<db:emphasis>metaData</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#metaDataChanged">metaDataChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="outputLocation-prop">
<db:title>outputLocation : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>outputLocation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">outputLocation</db:synopsisinfo>
<db:synopsisinfo role="setter">setOutputLocation</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the destination location of media content.</db:para>
<db:para>Setting the location can fail, for example when the service supports only local file system locations but a network URL was passed. If the operation fails an errorOccured() signal is emitted.</db:para>
<db:para>The output location can be relative or empty; in the latter case the recorder uses the system specific place and file naming scheme.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">outputLocation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOutputLocation</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>location</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="quality-prop">
<db:title>quality : Quality</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Quality</db:type>
<db:varname>quality</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">quality</db:synopsisinfo>
<db:synopsisinfo role="setter">setQuality</db:synopsisinfo>
<db:synopsisinfo role="notifier">qualityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the recording quality.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediarecorder.xml#Quality-enum">QMediaRecorder::Quality</db:link></db:type> <db:emphasis role="bold">quality</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setQuality</db:emphasis>(<db:type><db:link xlink:href="qmediarecorder.xml#Quality-enum">QMediaRecorder::Quality</db:link></db:type> <db:emphasis>quality</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#qualityChanged">qualityChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="recorderState-prop">
<db:title>[read-only] recorderState : const QMediaRecorder::RecorderState</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaRecorder::RecorderState</db:type>
<db:varname>recorderState</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">recorderState</db:synopsisinfo>
<db:synopsisinfo role="notifier">recorderStateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current state of the media recorder.</db:para>
<db:para>The state property represents the user request and is changed synchronously during <db:link xlink:href="qmediarecorder.xml#record">record</db:link>(), <db:link xlink:href="qmediarecorder.xml#pause">pause</db:link>() or <db:link xlink:href="qmediarecorder.xml#stop">stop</db:link>() calls. Recorder state may also change asynchronously when recording fails.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::RecorderState</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#recorderState">recorderState</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediarecorder.xml#recorderStateChanged">recorderStateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::RecorderState</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaRecorder">
<db:title>QMediaRecorder::QMediaRecorder(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaRecorder</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorder(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a media recorder which records the media produced by a microphone and camera. The media recorder is a child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaRecorder">
<db:title>[virtual] QMediaRecorder::~QMediaRecorder()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMediaRecorder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaRecorder()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a media recorder object.</db:para>
</db:section>
<db:section xml:id="actualLocationChanged">
<db:title>void QMediaRecorder::actualLocationChanged(const QUrl &amp;<db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>actualLocationChanged</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">actualLocation</db:synopsisinfo>
<db:synopsisinfo role="signature">void actualLocationChanged(const QUrl &amp;location)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the actual <db:code role="parameter">location</db:code> of the recorded media has changed. This signal is usually emitted when recording starts.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#actualLocation-prop">actualLocation</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="addMetaData">
<db:title>void QMediaRecorder::addMetaData(const QMediaMetaData &amp;<db:emphasis>metaData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addMetaData</db:methodname>
<db:methodparam>
<db:type>const QMediaMetaData &amp;</db:type>
<db:parameter>metaData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addMetaData(const QMediaMetaData &amp;metaData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">metaData</db:code> to the recorded media.</db:para>
</db:section>
<db:section xml:id="audioBitRate">
<db:title>int QMediaRecorder::audioBitRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>audioBitRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioBitRate</db:synopsisinfo>
<db:synopsisinfo role="signature">int audioBitRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bit rate of the compressed audio stream in bits per second.</db:para>
<db:note>
<db:para>Getter function for property audioBitRate. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setAudioBitRate">setAudioBitRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="audioBitRateChanged">
<db:title>void QMediaRecorder::audioBitRateChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>audioBitRateChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioBitRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void audioBitRateChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the recording audio bit rate changes.</db:para>
<db:note>
<db:para>Notifier signal for property audioBitRate. </db:para>
</db:note>
</db:section>
<db:section xml:id="audioChannelCount">
<db:title>int QMediaRecorder::audioChannelCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>audioChannelCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioChannelCount</db:synopsisinfo>
<db:synopsisinfo role="signature">int audioChannelCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of audio channels.</db:para>
<db:note>
<db:para>Getter function for property audioChannelCount. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setAudioChannelCount">setAudioChannelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="audioChannelCountChanged">
<db:title>void QMediaRecorder::audioChannelCountChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>audioChannelCountChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioChannelCount</db:synopsisinfo>
<db:synopsisinfo role="signature">void audioChannelCountChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the recording audio channel count changes.</db:para>
<db:note>
<db:para>Notifier signal for property audioChannelCount. </db:para>
</db:note>
</db:section>
<db:section xml:id="audioSampleRate">
<db:title>int QMediaRecorder::audioSampleRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>audioSampleRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioSampleRate</db:synopsisinfo>
<db:synopsisinfo role="signature">int audioSampleRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the audio sample rate in Hz.</db:para>
<db:note>
<db:para>Getter function for property audioSampleRate. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setAudioSampleRate">setAudioSampleRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="audioSampleRateChanged">
<db:title>void QMediaRecorder::audioSampleRateChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>audioSampleRateChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioSampleRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void audioSampleRateChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the recording audio sample rate changes.</db:para>
<db:note>
<db:para>Notifier signal for property audioSampleRate. </db:para>
</db:note>
</db:section>
<db:section xml:id="captureSession">
<db:title>QMediaCaptureSession *QMediaRecorder::captureSession() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaCaptureSession *</db:type>
<db:methodname>captureSession</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaCaptureSession * captureSession() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the media capture session.</db:para>
</db:section>
<db:section xml:id="durationChanged">
<db:title>void QMediaRecorder::durationChanged(qint64 <db:emphasis>duration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>durationChanged</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">duration</db:synopsisinfo>
<db:synopsisinfo role="signature">void durationChanged(qint64 duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">duration</db:code> of the recorded media has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#duration-prop">duration</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="encoderSettingsChanged">
<db:title>void QMediaRecorder::encoderSettingsChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>encoderSettingsChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void encoderSettingsChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the encoder settings change.</db:para>
</db:section>
<db:section xml:id="encodingMode">
<db:title>QMediaRecorder::EncodingMode QMediaRecorder::encodingMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaRecorder::EncodingMode</db:type>
<db:methodname>encodingMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">encodingMode</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorder::EncodingMode encodingMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the encoding mode.</db:para>
<db:note>
<db:para>Getter function for property encodingMode. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setEncodingMode">setEncodingMode</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#EncodingMode-enum">EncodingMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encodingModeChanged">
<db:title>void QMediaRecorder::encodingModeChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>encodingModeChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">encodingMode</db:synopsisinfo>
<db:synopsisinfo role="signature">void encodingModeChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the encoding mode changes.</db:para>
<db:note>
<db:para>Notifier signal for property encodingMode. </db:para>
</db:note>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QMediaRecorder::errorOccurred(QMediaRecorder::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QMediaRecorder::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QMediaRecorder::Error error, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that an <db:code role="parameter">error</db:code> has occurred, with <db:code role="parameter">errorString</db:code> containing a description of the error.</db:para>
</db:section>
<db:section xml:id="isAvailable">
<db:title>bool QMediaRecorder::isAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if media recorder service ready to use.</db:para>
</db:section>
<db:section xml:id="metaDataChanged">
<db:title>void QMediaRecorder::metaDataChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>metaDataChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">metaData</db:synopsisinfo>
<db:synopsisinfo role="signature">void metaDataChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a media object's meta-data has changed.</db:para>
<db:para>If multiple meta-data elements are changed metaDataChanged() is emitted once.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#metaData-prop">metaData</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pause">
<db:title>void QMediaRecorder::pause()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pause</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pause()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pauses recording.</db:para>
<db:para>The recorder state is changed to <db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::PausedState</db:link>.</db:para>
<db:para>Depending on the platform, pausing recording may be not supported. In this case the recorder state is unchanged.</db:para>
</db:section>
<db:section xml:id="qualityChanged">
<db:title>void QMediaRecorder::qualityChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qualityChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">quality</db:synopsisinfo>
<db:synopsisinfo role="signature">void qualityChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the recording quality changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#quality-prop">quality</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="record">
<db:title>void QMediaRecorder::record()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>record</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void record()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Start recording.</db:para>
<db:para>While the recorder state is changed immediately to c{<db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::RecordingState</db:link>}, recording may start asynchronously.</db:para>
<db:para>If recording fails <db:link xlink:href="qmediarecorder.xml#error-prop">error</db:link>() signal is emitted with recorder state being reset back to <db:code>QMediaRecorder::StoppedState</db:code>.</db:para>
<db:note>
<db:para>On mobile devices, recording will happen in the orientation the device had when calling record and is locked for the duration of the recording. To avoid artifacts on the user interface, we recommend to keep the user interface locked to the same orientation as long as the recording is ongoing using the contentOrientation property of <db:link xlink:href="qwindow.xml">QWindow</db:link> and unlock it again once the recording is finished.</db:para>
</db:note>
</db:section>
<db:section xml:id="recorderState">
<db:title>QMediaRecorder::RecorderState QMediaRecorder::recorderState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaRecorder::RecorderState</db:type>
<db:methodname>recorderState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">recorderState</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorder::RecorderState recorderState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current media recorder state.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediarecorder.xml#recorderState-prop">recorderState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::RecorderState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recorderStateChanged">
<db:title>void QMediaRecorder::recorderStateChanged(QMediaRecorder::RecorderState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>recorderStateChanged</db:methodname>
<db:methodparam>
<db:type>QMediaRecorder::RecorderState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">recorderState</db:synopsisinfo>
<db:synopsisinfo role="signature">void recorderStateChanged(QMediaRecorder::RecorderState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a media recorder's <db:code role="parameter">state</db:code> has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediarecorder.xml#recorderState-prop">recorderState</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="setAudioBitRate">
<db:title>void QMediaRecorder::setAudioBitRate(int <db:emphasis>bitRate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAudioBitRate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>bitRate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioBitRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAudioBitRate(int bitRate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the audio <db:code role="parameter">bitRate</db:code> in bits per second.</db:para>
<db:note>
<db:para>Setter function for property audioBitRate. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#audioBitRate">audioBitRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAudioChannelCount">
<db:title>void QMediaRecorder::setAudioChannelCount(int <db:emphasis>channels</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAudioChannelCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>channels</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioChannelCount</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAudioChannelCount(int channels)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of audio <db:code role="parameter">channels</db:code>.</db:para>
<db:para>A value of -1 indicates the recorder should make an optimal choice based on what is available from the audio source and the limitations of the codec.</db:para>
<db:note>
<db:para>Setter function for property audioChannelCount. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#audioChannelCount">audioChannelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAudioSampleRate">
<db:title>void QMediaRecorder::setAudioSampleRate(int <db:emphasis>sampleRate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAudioSampleRate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleRate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioSampleRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAudioSampleRate(int sampleRate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the audio <db:code role="parameter">sampleRate</db:code> in Hz.</db:para>
<db:para>A value of <db:code>-1</db:code> indicates the recorder should make an optimal choice based on what is available from the audio source, and the limitations of the codec.</db:para>
<db:note>
<db:para>Setter function for property audioSampleRate. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#audioSampleRate">audioSampleRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncodingMode">
<db:title>void QMediaRecorder::setEncodingMode(QMediaRecorder::EncodingMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEncodingMode</db:methodname>
<db:methodparam>
<db:type>QMediaRecorder::EncodingMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">encodingMode</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEncodingMode(QMediaRecorder::EncodingMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the encoding <db:code role="parameter">mode</db:code> setting.</db:para>
<db:para>If <db:link xlink:href="qmediarecorder.xml#EncodingMode-enum">ConstantQualityEncoding</db:link> is set, the quality encoding parameter is used and bit rates are ignored, otherwise the bitrates are used.</db:para>
<db:note>
<db:para>Setter function for property encodingMode. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#encodingMode">encodingMode</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml#EncodingMode-enum">EncodingMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMetaData">
<db:title>void QMediaRecorder::setMetaData(const QMediaMetaData &amp;<db:emphasis>metaData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMetaData</db:methodname>
<db:methodparam>
<db:type>const QMediaMetaData &amp;</db:type>
<db:parameter>metaData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">metaData</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMetaData(const QMediaMetaData &amp;metaData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the meta data to <db:code role="parameter">metaData</db:code>.</db:para>
<db:note>
<db:para>To ensure that meta-data is set correctly, it should be set before starting the recording. Once the recording is started, any meta-data set will be attached to the next recording.</db:para>
</db:note>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qmediarecorder.xml#metaData-prop">metaData</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#metaData-prop">metaData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVideoBitRate">
<db:title>void QMediaRecorder::setVideoBitRate(int <db:emphasis>bitRate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoBitRate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>bitRate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoBitRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoBitRate(int bitRate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the video <db:code role="parameter">bitRate</db:code> in bits per second.</db:para>
<db:note>
<db:para>Setter function for property videoBitRate. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#videoBitRate">videoBitRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVideoFrameRate">
<db:title>void QMediaRecorder::setVideoFrameRate(qreal <db:emphasis>frameRate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoFrameRate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>frameRate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoFrameRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoFrameRate(qreal frameRate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the video <db:code role="parameter">frameRate</db:code>.</db:para>
<db:para>A value of 0 indicates the recorder should make an optimal choice based on what is available from the video source and the limitations of the codec.</db:para>
<db:note>
<db:para>Setter function for property videoFrameRate. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#videoFrameRate">videoFrameRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVideoResolution">
<db:title>void QMediaRecorder::setVideoResolution(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoResolution</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoResolution</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoResolution(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the resolution of the encoded video to <db:code role="parameter">size</db:code>.</db:para>
<db:para>Pass an empty <db:link xlink:href="qsize.xml">QSize</db:link> to make the recorder choose an optimal resolution based on what is available from the video source and the limitations of the codec.</db:para>
<db:note>
<db:para>Setter function for property videoResolution. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#videoResolution">videoResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVideoResolution-1">
<db:title>void QMediaRecorder::setVideoResolution(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoResolution</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoResolution</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoResolution(int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> of the resolution of the encoded video.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:note>
<db:para>Setter function for property videoResolution. </db:para>
</db:note>
</db:section>
<db:section xml:id="stop">
<db:title>void QMediaRecorder::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The recorder will stop the recording. Processing pending video and audio data might however still take some time. The recording is finished, once the state of the media recorder changes to <db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::StoppedState</db:link>.</db:para>
</db:section>
<db:section xml:id="videoBitRate">
<db:title>int QMediaRecorder::videoBitRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>videoBitRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoBitRate</db:synopsisinfo>
<db:synopsisinfo role="signature">int videoBitRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bit rate of the compressed video stream in bits per second.</db:para>
<db:note>
<db:para>Getter function for property videoBitRate. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setVideoBitRate">setVideoBitRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="videoBitRateChanged">
<db:title>void QMediaRecorder::videoBitRateChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>videoBitRateChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoBitRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void videoBitRateChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the recording video bit rate changes.</db:para>
<db:note>
<db:para>Notifier signal for property videoBitRate. </db:para>
</db:note>
</db:section>
<db:section xml:id="videoFrameRate">
<db:title>qreal QMediaRecorder::videoFrameRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>videoFrameRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoFrameRate</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal videoFrameRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the video frame rate.</db:para>
<db:note>
<db:para>Getter function for property videoFrameRate. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setVideoFrameRate">setVideoFrameRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="videoFrameRateChanged">
<db:title>void QMediaRecorder::videoFrameRateChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>videoFrameRateChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoFrameRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void videoFrameRateChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the recording video frame rate changes.</db:para>
<db:note>
<db:para>Notifier signal for property videoFrameRate. </db:para>
</db:note>
</db:section>
<db:section xml:id="videoResolution">
<db:title>QSize QMediaRecorder::videoResolution() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>videoResolution</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoResolution</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize videoResolution() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the resolution of the encoded video.</db:para>
<db:note>
<db:para>Getter function for property videoResolution. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#setVideoResolution">setVideoResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="videoResolutionChanged">
<db:title>void QMediaRecorder::videoResolutionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>videoResolutionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoResolution</db:synopsisinfo>
<db:synopsisinfo role="signature">void videoResolutionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the video recording resolution changes.</db:para>
<db:note>
<db:para>Notifier signal for property videoResolution. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
