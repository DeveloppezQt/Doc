<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for WinRT</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides insight into Qt's WinRT port and how to use it.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt for WinRT allows you to run Qt applications on devices supporting the Windows Store App APIs. This includes Modern UI applications in Windows 8.1 and up, as well as devices running Windows RT 8.1 and Windows Phone 8.1 and up.</db:para>
<db:para>Microsoft introduced a new design paradigm with the Windows 8 Modern UI. A core part of this new approach is Windows Runtime (WinRT) that supports development using different programming languages, such as C++/CX (component extensions), C# VB.NET, or JavaScript. The Qt port uses the C++ capabilities. While WinRT supports the component extensions internally, they are not used inside Qt and you do not need to use them. WinRT applications run in a sandboxed environment for security reasons and support different architectures, such as ARM and x86.</db:para>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:para>Development for Windows Runtime requires a Microsoft Windows development host. The minimum version supported is Windows 8.1.</db:para>
<db:para>Depending on your device target you will need the following tools provided by Microsoft to be installed:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Device Target</db:para>
</db:th>
<db:th>
<db:para>Environment</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Windows 8.1 Modern UI</db:para>
</db:td>
<db:td>
<db:para>Visual Studio 2013 for Windows</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows RT</db:para>
</db:td>
<db:td>
<db:para>Visual Studio 2013 for Windows</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows Phone 8.1</db:para>
</db:td>
<db:td>
<db:para>Visual Studio 2013 for Windows Phone</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows 10</db:para>
</db:td>
<db:td>
<db:para>Visual Studio 2015</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If you are targeting a remote device, please follow all instructions by Visual Studio to set it up correctly.</db:para>
<db:para>If you are targeting an emulator for Windows Phone, Windows 8.1 Pro is required by Microsoft to launch the emulator itself.</db:para>
</db:section>
<db:section xml:id="getting-started">
<db:title>Getting Started</db:title>
<db:section xml:id="notes-to-desktop-users">
<db:title>Notes to Desktop Users</db:title>
<db:para>As WinRT applications run in a sandboxed environment, some restrictions should be taken into account when considering porting or writing cross-platform applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The class <db:link xlink:href="qprocess.xml">QProcess</db:link> is not implemented (indicated by the macro QT_NO_PROCESS being defined) as no subprocesses can be launched.</db:para>
</db:listitem>
<db:listitem>
<db:para>Some paths returned by <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>() may be empty.</db:para>
</db:listitem>
<db:listitem>
<db:para>A WinRT application may not do socket-based communication with another application running on the same host (as this would violate the sandboxing).</db:para>
</db:listitem>
<db:listitem>
<db:para>Applications run in fullscreen mode only (see <db:link xlink:href="qstylehints.xml">QStyleHints</db:link>). On desktop, the screen size varies as the application is resized.</db:para>
</db:listitem>
<db:listitem>
<db:para>There are no environment variables. Qt emulates the functionality by maintaining the values locally, so that <db:link xlink:href="qtglobal.xml#qputenv">qputenv</db:link>() and related functions continue to work. All known variables influencing Qt can be set in source code.</db:para>
</db:listitem>
<db:listitem>
<db:para>WinRT applications are UI applications by nature. This implies that console type applications will have a window created internally, which is always visible.</db:para>
</db:listitem>
<db:listitem>
<db:para>Applications should not exit programmatically. In particular, calling exit() before the UI is shown causes a crash.</db:para>
</db:listitem>
<db:listitem>
<db:para>The WinRT clipboard is local to the application; it cannot be retrieved by a desktop application.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="building-applications">
<db:title>Building Applications</db:title>
<db:para>You can develop applications for WinRT just as any other Qt applications. Use your favorite editor or IDE (such as Qt Creator) and create your application or load a Qt example. Then run qmake and nmake/jom to build your application.</db:para>
<db:section xml:id="building-applications-with-visual-studio">
<db:title>Building Applications with Visual Studio</db:title>
<db:para>To launch your project with Visual Studio a corresponding project needs to be created. qmake supports converting a .pro project into Visual Studio format by passing the parameters -tp vc.</db:para>
<db:programlisting language="cpp">qmake -tp vc &lt;your project&gt;.pro
</db:programlisting>
<db:para>Be aware of using the correct match of qmake and Visual Studio. As the Visual Studio format is generic, it does not return an immediate error if for instance you open a Windows Phone project inside Visual Studio for Windows.</db:para>
<db:para>This creates a project which supports building applications and running them with Visual Studio. It does not embed Qt libraries into the package and requires you to add them manually. For this purpose, the command line tool <db:link xlink:href="windows-deployment.xml#the-windows-deployment-tool">windeployqt</db:link> has been included in the installed package. To enable automatic parsing of dependencies and adding the libraries and dependencies into the application package, create the project with the following options:</db:para>
<db:programlisting language="cpp">qmake -tp vc &lt;your project&gt;.pro &quot;CONFIG+=windeployqt&quot;
</db:programlisting>
</db:section>
<db:section xml:id="building-applications-with-qt-creator">
<db:title>Building Applications with Qt Creator</db:title>
<db:para>You will not need to do any conversion to open your project in Qt Creator. Please follow the generic instructions on how to open and build a project.</db:para>
<db:para>Qt Creator deploys your application on the WinRT device, if the device is detected by the PC.</db:para>
<db:note>
<db:para>Remote PCs, such as the Surface, are not yet supported for deployment by Creator.</db:para>
</db:note>
</db:section>
</db:section>
</db:section>
<db:section xml:id="building-from-source">
<db:title>Building from Source</db:title>
<db:para>We assume that you have cloned the Qt 5 repositories (or obtained the Qt sources elsewhere) and followed the platform-independent requirements for building Qt. The process of building Qt is found in the <db:link xlink:href="build-sources.xml">Building Qt Sources</db:link> page.</db:para>
<db:para>Qt for WinRT is always built as a cross-build, because tools, such as qmake, are built as desktop applications. For compiling those, a desktop development environment is required. If you have installed Visual Studio 2013 for Windows, this will only create binaries for WinRT. You will need Visual Studio for Windows Desktop as well to create those desktop tools.</db:para>
<db:para>Please make sure to use an x86 command prompt (either use the <db:emphasis>VS x86 Native Tools Command Prompt</db:emphasis> or call <db:emphasis>vcvarsall.bat</db:emphasis> without any parameter or with x86) for every WinRT/Windows Phone build. While the toolchain which is used for the target is set automatically, the command prompt decides what will be used for the host tools like <db:emphasis>qmake</db:emphasis> or <db:emphasis>moc</db:emphasis>. Building these tools might fail if another command prompt is used.</db:para>
<db:para>The WinRT mkspec format is &lt;platform&gt;-&lt;architecture&gt;-&lt;toolchain&gt; where <db:emphasis>platform</db:emphasis> can be winrt or winphone and architecture can be arm, x86, or x64. The following is an example of building qtbase for WinRT:</db:para>
<db:programlisting language="cpp">&gt; ./configure -xplatform winrt-x64-msvc2013 -release
&gt; nmake/jom
</db:programlisting>
</db:section>
<db:section xml:id="running-applications-from-command-line">
<db:title>Running Applications from Command Line</db:title>
<db:para>WinRT applications must be packaged (including all dependencies) and installed or registered with the application service in order to be launched. <db:link xlink:href="winrt-support.xml#winrtrunner">The WinRT Runner Tool</db:link> can be used to launch these applications from the command line.</db:para>
<db:section xml:id="package-content">
<db:title>Package Content</db:title>
<db:para>Package content consists of the application executable and its dependencies, as for every Windows application. The dependencies are the needed (Qt) libraries and plugins. Note that Qt plugins have to be put into a folder named after their category (platforms, imageformats, and so on) without using a plugins folder as root. For more information, see <db:link xlink:href="windows-deployment.xml">Qt for Windows - Deployment</db:link>.</db:para>
<db:para>As WinRT applications are run in a sandboxed environment, setting the path variable to point to the files required will not work.</db:para>
<db:para>The <db:link xlink:href="windows-deployment.xml#the-windows-deployment-tool">windeployqt</db:link> convenience tool looks up the application's dependencies and copies Qt libraries and plugins to the appropriate directories, as necessary.</db:para>
<db:para>Because all resources are placed to one directory, you can register the directory using an XML file (AppxManifest.xml) and Windows Powershell. The reference for these manifest files can be found <db:link xlink:href="http://msdn.microsoft.com/en-us/library/windows/apps/br211473.aspx">here</db:link>. The target processor architecture must be specified (as opposed to the default, 'neutral'). As soon as these requirements are met, change into your <db:emphasis>packaged</db:emphasis> directory in PowerShell and call:</db:para>
<db:programlisting language="cpp">&gt; Add-AppxPackage -Register AppxManifest.xml
</db:programlisting>
<db:note>
<db:para><db:link xlink:href="winrt-support.xml#winrtrunner">The WinRT Runner Tool</db:link> can perform the same operation with the –install option.</db:para>
</db:note>
<db:para>If that worked, you should be able to find your application in Windows 8.1's start screen. To remove your application, use Windows' built-in way to uninstall applications (right-click or tap and hold the application and choose Uninstall).</db:para>
<db:note>
<db:para><db:link xlink:href="winrt-support.xml#winrtrunner">The WinRT Runner Tool</db:link> can perform the same operation with the –remove option.</db:para>
</db:note>
</db:section>
<db:section xml:id="winrt-runner-tool">
<db:title>WinRT Runner Tool</db:title>
<db:anchor xml:id="winrtrunner"/>
<db:para>The WinRT Runner Tool can be found in QTDIR/bin/winrtrunner. It is intended to aid in the deployment, launching, and debugging of Qt for WinRT applications. It can be used from the command line, or invoked by the IDE.</db:para>
<db:programlisting language="cpp" role="bad">Usage: winrtrunner.exe [options] package [arguments]
winrtrunner installs, runs, and collects test results for packages made with Qt.

Options:
  --test                            Installs, starts, collects output, stops (if
                                    needed), and uninstalls the package. This is
                                    the default action of winrtrunner.
  --start                           Starts the package. The package is installed
                                    if it is not already installed. Pass
                                    --install to force reinstallation.
  --debug &lt;debugger&gt;                Starts the package with the debugger
                                    attached. The package is installed if it is
                                    not already installed. Pass --install to
                                    force reinstallation.
  --debugger-arguments &lt;arguments&gt;  Sets the arguments to be passed to the
                                    debugger when --debug is used. If no
                                    debugger was provided, this option is ignored.
  --suspend                         Suspends a running package. When combined
                                    with --stop or --test, the app will be
                                    suspended before being terminated.
  --stop                            Terminates a running package. Can be be
                                    combined with --start and --suspend.
  --wait &lt;seconds&gt;                  If the package is running, waits the given
                                    number of seconds before continuing to the
                                    next task. Passing 0 causes the runner to
                                    wait indefinitely.
  --install                         (Re)installs the package.
  --remove                          Uninstalls the package.
  --device &lt;name|index&gt;             Specifies the device to target as a device
                                    name or index. Use --list-devices to find
                                    available devices. The default device is the
                                    first device found for the active run
                                    profile.
  --profile &lt;name&gt;                  Forces a particular run profile.
  --list-devices                    Lists the available devices (for use with
                                    --device).
  --verbose &lt;level&gt;                 Sets the verbosity level of the message output
                                    (0 - silent, 1 - info, 2 - debug). Defaults
                                    to 1.
  --ignore-errors                   Always exits with code 0, regardless of the
                                    error state.
  -?, -h, --help                    Displays this help.

Arguments:
  package [arguments]               The executable or package manifest to act
                                    upon. Arguments after the package name will
                                    be passed to the application when it starts.
</db:programlisting>
</db:section>
</db:section>
</db:article>
