<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScriptString Class</db:title>
<db:productname>QtScript</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>QtScript Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> class acts as a handle to &quot;interned&quot; strings in a <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScriptString</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += script</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScriptString is part of <db:simplelist><db:member><db:link xlink:href="script.xml">Scripting Classes and Overviews</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qscriptstring.xml">QScriptString</db:link> can be used to achieve faster (repeated) property getting/setting, and comparison of property names, of script objects.</db:para>
<db:para>To get a <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> representation of a string, pass the string to <db:link xlink:href="qscriptengine.xml#toStringHandle">QScriptEngine::toStringHandle</db:link>(). The typical usage pattern is to register one or more pre-defined strings when setting up your script environment, then subsequently use the relevant <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> as argument to e.g. <db:link xlink:href="qscriptvalue.xml#property">QScriptValue::property</db:link>().</db:para>
<db:para>Call the <db:link xlink:href="qscriptstring.xml#toString">toString</db:link>() function to obtain the string that a <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> represents.</db:para>
<db:para>Call the <db:link xlink:href="qscriptstring.xml#toArrayIndex">toArrayIndex</db:link>() function to convert a <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> to an array index. This is useful when using <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> to implement array-like objects.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScriptString">
<db:title>QScriptString::QScriptString()</db:title>
<db:para>Constructs an invalid <db:link xlink:href="qscriptstring.xml">QScriptString</db:link>.</db:para>
</db:section>
<db:section xml:id="QScriptString-1">
<db:title>QScriptString::QScriptString(const QScriptString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QScriptString">
<db:title>[noexcept] QScriptString::~QScriptString()</db:title>
<db:para>Destroys this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link>.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QScriptString::isValid() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> is valid; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="toArrayIndex">
<db:title>[since 4.6] quint32 QScriptString::toArrayIndex(bool *<db:emphasis>ok</db:emphasis> = Q_NULLPTR) const</db:title>
<db:para>Attempts to convert this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> to a Qt Script array index, and returns the result.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QScriptString::toString() const</db:title>
<db:para>Returns the string that this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> represents, or a null string if this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> is not valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptstring.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QString">
<db:title>QString QScriptString::operator QString() const</db:title>
<db:para>Returns the string that this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> represents, or a null string if this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> is not valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptstring.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QScriptString::operator!=(const QScriptString &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> is not equal to <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QScriptString &amp;QScriptString::operator=(const QScriptString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> value to this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QScriptString::operator==(const QScriptString &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptstring.xml">QScriptString</db:link> is equal to <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
