<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFontMetrics Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> class provides font metrics information.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFontMetrics</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFontMetrics is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> functions calculate the size of characters and strings for a given font. There are three ways you can create a <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> object:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Calling the <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> constructor with a <db:link xlink:href="qfont.xml">QFont</db:link> creates a font metrics object for a screen-compatible font, i.e. the font cannot be a printer font. If the font is changed later, the font metrics object is <db:emphasis>not</db:emphasis> updated.</db:para>
<db:para>(Note: If you use a printer font the values returned may be inaccurate. Printer fonts are not always accessible so the nearest screen font is used if a printer font is supplied.)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#fontMetrics">QWidget::fontMetrics</db:link>() returns the font metrics for a widget's font. This is equivalent to <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link>(widget-&gt;font()). If the widget's font is changed later, the font metrics object is <db:emphasis>not</db:emphasis> updated.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#fontMetrics">QPainter::fontMetrics</db:link>() returns the font metrics for a painter's current font. If the painter's font is changed later, the font metrics object is <db:emphasis>not</db:emphasis> updated.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Once created, the object provides functions to access the individual metrics of the font, its characters, and for strings rendered in the font.</db:para>
<db:para>There are several functions that operate on the font: <db:link xlink:href="qfontmetrics.xml#ascent">ascent</db:link>(), <db:link xlink:href="qfontmetrics.xml#descent">descent</db:link>(), <db:link xlink:href="qfontmetrics.xml#height">height</db:link>(), <db:link xlink:href="qfontmetrics.xml#leading">leading</db:link>() and <db:link xlink:href="qfontmetrics.xml#lineSpacing">lineSpacing</db:link>() return the basic size properties of the font. The <db:link xlink:href="qfontmetrics.xml#underlinePos">underlinePos</db:link>(), <db:link xlink:href="qfontmetrics.xml#overlinePos">overlinePos</db:link>(), <db:link xlink:href="qfontmetrics.xml#strikeOutPos">strikeOutPos</db:link>() and <db:link xlink:href="qfontmetrics.xml#lineWidth">lineWidth</db:link>() functions, return the properties of the line that underlines, overlines or strikes out the characters. These functions are all fast.</db:para>
<db:para>There are also some functions that operate on the set of glyphs in the font: <db:link xlink:href="qfontmetrics.xml#minLeftBearing">minLeftBearing</db:link>(), <db:link xlink:href="qfontmetrics.xml#minRightBearing">minRightBearing</db:link>() and <db:link xlink:href="qfontmetrics.xml#maxWidth">maxWidth</db:link>(). These are by necessity slow, and we recommend avoiding them if possible.</db:para>
<db:para>For each character, you can get its <db:link xlink:href="qfontmetrics.xml#width">width</db:link>(), <db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>() and <db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>() and find out whether it is in the font using <db:link xlink:href="qfontmetrics.xml#inFont">inFont</db:link>(). You can also treat the character as a string, and use the string functions on it.</db:para>
<db:para>The string functions include <db:link xlink:href="qfontmetrics.xml#width">width</db:link>(), to return the width of a string in pixels (or points, for a printer), <db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>(), to return a rectangle large enough to contain the rendered string, and <db:link xlink:href="qfontmetrics.xml#size">size</db:link>(), to return the size of that rectangle.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFont font(&quot;times&quot;, 24);
QFontMetrics fm(font);
int pixelsWide = fm.width(&quot;What's the width of this text?&quot;);
int pixelsHigh = fm.height();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml">QFont</db:link></db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
<db:member><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-charactermap-example.xml">Character Map Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFontMetrics">
<db:title>[explicit] QFontMetrics::QFontMetrics(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Constructs a font metrics object for <db:code role="parameter">font</db:code>.</db:para>
<db:para>The font metrics will be compatible with the paintdevice used to create <db:code role="parameter">font</db:code>.</db:para>
<db:para>The font metrics object holds the information for the font that is passed in the constructor at the time it is created, and is not updated if the font's attributes are changed later.</db:para>
<db:para>Use <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link>(const <db:link xlink:href="qfont.xml">QFont</db:link> &amp;, <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> *) to get the font metrics that are compatible with a certain paint device.</db:para>
</db:section>
<db:section xml:id="QFontMetrics-2">
<db:title>QFontMetrics::QFontMetrics(const QFont &amp;<db:emphasis>font</db:emphasis>, QPaintDevice *<db:emphasis>paintdevice</db:emphasis>)</db:title>
<db:para>Constructs a font metrics object for <db:code role="parameter">font</db:code> and <db:code role="parameter">paintdevice</db:code>.</db:para>
<db:para>The font metrics will be compatible with the paintdevice passed. If the <db:code role="parameter">paintdevice</db:code> is 0, the metrics will be screen-compatible, ie. the metrics you get if you use the font for drawing text on a <db:link xlink:href="qwidget.xml">widgets</db:link> or <db:link xlink:href="qpixmap.xml">pixmaps</db:link>, not on a <db:link xlink:href="qpicture.xml">QPicture</db:link> or <db:link xlink:href="qprinter.xml">QPrinter</db:link>.</db:para>
<db:para>The font metrics object holds the information for the font that is passed in the constructor at the time it is created, and is not updated if the font's attributes are changed later.</db:para>
</db:section>
<db:section xml:id="QFontMetrics-1">
<db:title>QFontMetrics::QFontMetrics(const QFontMetrics &amp;<db:emphasis>fm</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">fm</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFontMetrics">
<db:title>[noexcept] QFontMetrics::~QFontMetrics()</db:title>
<db:para>Destroys the font metrics object and frees all allocated resources.</db:para>
</db:section>
<db:section xml:id="ascent">
<db:title>int QFontMetrics::ascent() const</db:title>
<db:para>Returns the ascent of the font.</db:para>
<db:para>The ascent of a font is the distance from the baseline to the highest position characters extend to. In practice, some font designers break this rule, e.g. when they put more than one accent on top of a character, or to accommodate an unusual character in an exotic language, so it is possible (though rare) that this value will be too small.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#descent">descent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="averageCharWidth">
<db:title>[since 4.2] int QFontMetrics::averageCharWidth() const</db:title>
<db:para>Returns the average width of glyphs in the font.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRect QFontMetrics::boundingRect(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:para>Returns the rectangle that is covered by ink if character <db:code role="parameter">ch</db:code> were to be drawn at the origin of the coordinate system.</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0) (e.g., for italicized fonts), and that the text output may cover <db:emphasis>all</db:emphasis> pixels in the bounding rectangle. For a space character the rectangle will usually be empty.</db:para>
<db:para>Note that the rectangle usually extends both above and below the base line.</db:para>
<db:warning>
<db:para>The width of the returned rectangle is not the advance width of the character. Use boundingRect(const <db:link xlink:href="qstring.xml">QString</db:link> &amp;) or <db:link xlink:href="qfontmetrics.xml#width">width</db:link>() instead.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect-1">
<db:title>QRect QFontMetrics::boundingRect(const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:para>Returns the bounding rectangle of the characters in the string specified by <db:code role="parameter">text</db:code>. The bounding rectangle always covers at least the set of pixels the text would cover if drawn at (0, 0).</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the width of the returned rectangle might be different than what the <db:link xlink:href="qfontmetrics.xml#width">width</db:link>() method returns.</db:para>
<db:para>If you want to know the advance width of the string (to lay out a set of strings next to each other), use <db:link xlink:href="qfontmetrics.xml#width">width</db:link>() instead.</db:para>
<db:para>Newline characters are processed as normal characters, <db:emphasis>not</db:emphasis> as linebreaks.</db:para>
<db:para>The height of the bounding rectangle is at least as large as the value returned by <db:link xlink:href="qfontmetrics.xml#height">height</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#boundingRect">QPainter::boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#tightBoundingRect">tightBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect-2">
<db:title>QRect QFontMetrics::boundingRect(const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>tabStops</db:emphasis> = 0, int *<db:emphasis>tabArray</db:emphasis> = Q_NULLPTR) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the bounding rectangle of the characters in the string specified by <db:code role="parameter">text</db:code>, which is the set of pixels the text would cover if drawn at (0, 0). The drawing, and hence the bounding rectangle, is constrained to the rectangle <db:code role="parameter">rect</db:code>.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument is the bitwise OR of the following flags:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link> aligns to the left border, except for Arabic and Hebrew where it aligns to the right.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link> aligns to the right border, except for Arabic and Hebrew where it aligns to the left.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignJustify</db:link> produces justified text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignHCenter</db:link> aligns horizontally centered.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link> aligns to the top border.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link> aligns to the bottom border.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignVCenter</db:link> aligns vertically centered</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignCenter</db:link> (== <db:code>Qt::AlignHCenter | Qt::AlignVCenter</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextSingleLine</db:link> ignores newline characters in the text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> expands tabs (see below)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextShowMnemonic</db:link> interprets &quot;&amp;x&quot; as <db:emphasis role="underline">x</db:emphasis>; i.e., underlined.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextWordWrap</db:link> breaks the text to fit the rectangle.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> alignment defaults to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link> and vertical alignment defaults to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link>.</db:para>
<db:para>If several of the horizontal or several of the vertical alignment flags are set, the resulting alignment is undefined.</db:para>
<db:para>If <db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> is set in <db:code role="parameter">flags</db:code>, then: if <db:code role="parameter">tabArray</db:code> is non-null, it specifies a 0-terminated sequence of pixel-positions for tabs; otherwise if <db:code role="parameter">tabStops</db:code> is non-zero, it is used as the tab spacing (in pixels).</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the text output may cover <db:emphasis>all</db:emphasis> pixels in the bounding rectangle.</db:para>
<db:para>Newline characters are processed as linebreaks.</db:para>
<db:para>Despite the different actual character heights, the heights of the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the same.</db:para>
<db:para>The bounding rectangle returned by this function is somewhat larger than that calculated by the simpler <db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>() function. This function uses the <db:link xlink:href="qfontmetrics.xml#minLeftBearing">maximum left</db:link> and <db:link xlink:href="qfontmetrics.xml#minRightBearing">right</db:link> font bearings as is necessary for multi-line text to align correctly. Also, fontHeight() and <db:link xlink:href="qfontmetrics.xml#lineSpacing">lineSpacing</db:link>() are used to calculate the height, rather than individual character heights.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#boundingRect">QPainter::boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect-3">
<db:title>QRect QFontMetrics::boundingRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>tabStops</db:emphasis> = 0, int *<db:emphasis>tabArray</db:emphasis> = Q_NULLPTR) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the bounding rectangle for the given <db:code role="parameter">text</db:code> within the rectangle specified by the <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> coordinates, <db:code role="parameter">width</db:code>, and <db:code role="parameter">height</db:code>.</db:para>
<db:para>If <db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> is set in <db:code role="parameter">flags</db:code> and <db:code role="parameter">tabArray</db:code> is non-null, it specifies a 0-terminated sequence of pixel-positions for tabs; otherwise, if <db:code role="parameter">tabStops</db:code> is non-zero, it is used as the tab spacing (in pixels).</db:para>
</db:section>
<db:section xml:id="descent">
<db:title>int QFontMetrics::descent() const</db:title>
<db:para>Returns the descent of the font.</db:para>
<db:para>The descent is the distance from the base line to the lowest point characters extend to. In practice, some font designers break this rule, e.g. to accommodate an unusual character in an exotic language, so it is possible (though rare) that this value will be too small.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#ascent">ascent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elidedText">
<db:title>[since 4.2] QString QFontMetrics::elidedText(const QString &amp;<db:emphasis>text</db:emphasis>, Qt::TextElideMode <db:emphasis>mode</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>flags</db:emphasis> = 0) const</db:title>
<db:para>If the string <db:code role="parameter">text</db:code> is wider than <db:code role="parameter">width</db:code>, returns an elided version of the string (i.e., a string with &quot;...&quot; in it). Otherwise, returns the original string.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> parameter specifies whether the text is elided on the left (e.g., &quot;...tech&quot;), in the middle (e.g., &quot;Tr...ch&quot;), or on the right (e.g., &quot;Trol...&quot;).</db:para>
<db:para>The <db:code role="parameter">width</db:code> is specified in pixels, not characters.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument is optional and currently only supports <db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextShowMnemonic</db:link> as value.</db:para>
<db:para>The elide mark follows the <db:link xlink:href="qt.xml#LayoutDirection-enum">layoutdirection</db:link>. For example, it will be on the right side of the text for right-to-left layouts if the <db:code role="parameter">mode</db:code> is <db:code>Qt::ElideLeft</db:code>, and on the left side of the text if the <db:code role="parameter">mode</db:code> is <db:code>Qt::ElideRight</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="height">
<db:title>int QFontMetrics::height() const</db:title>
<db:para>Returns the height of the font.</db:para>
<db:para>This is always equal to <db:link xlink:href="qfontmetrics.xml#ascent">ascent</db:link>()+<db:link xlink:href="qfontmetrics.xml#descent">descent</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#leading">leading</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineSpacing">lineSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inFont">
<db:title>bool QFontMetrics::inFont(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if character <db:code role="parameter">ch</db:code> is a valid character in the font; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="inFontUcs4">
<db:title>bool QFontMetrics::inFontUcs4(uint <db:emphasis>ucs4</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the character <db:code role="parameter">ucs4</db:code> encoded in UCS-4/UTF-32 is a valid character in the font; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="leading">
<db:title>int QFontMetrics::leading() const</db:title>
<db:para>Returns the leading of the font.</db:para>
<db:para>This is the natural inter-line spacing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineSpacing">lineSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="leftBearing">
<db:title>int QFontMetrics::leftBearing(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:para>Returns the left bearing of character <db:code role="parameter">ch</db:code> in the font.</db:para>
<db:para>The left bearing is the right-ward distance of the left-most pixel of the character from the logical origin of the character. This value is negative if the pixels of the character extend to the left of the logical origin.</db:para>
<db:para>See width(<db:link xlink:href="qchar.xml">QChar</db:link>) for a graphical description of this metric.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#minLeftBearing">minLeftBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineSpacing">
<db:title>int QFontMetrics::lineSpacing() const</db:title>
<db:para>Returns the distance from one base line to the next.</db:para>
<db:para>This value is always equal to <db:link xlink:href="qfontmetrics.xml#leading">leading</db:link>()+<db:link xlink:href="qfontmetrics.xml#height">height</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#leading">leading</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineWidth">
<db:title>int QFontMetrics::lineWidth() const</db:title>
<db:para>Returns the width of the underline and strikeout lines, adjusted for the point size of the font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#underlinePos">underlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#overlinePos">overlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#strikeOutPos">strikeOutPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxWidth">
<db:title>int QFontMetrics::maxWidth() const</db:title>
<db:para>Returns the width of the widest character in the font.</db:para>
</db:section>
<db:section xml:id="minLeftBearing">
<db:title>int QFontMetrics::minLeftBearing() const</db:title>
<db:para>Returns the minimum left bearing of the font.</db:para>
<db:para>This is the smallest <db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>(char) of all characters in the font.</db:para>
<db:para>Note that this function can be very slow if the font is large.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#minRightBearing">minRightBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minRightBearing">
<db:title>int QFontMetrics::minRightBearing() const</db:title>
<db:para>Returns the minimum right bearing of the font.</db:para>
<db:para>This is the smallest <db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>(char) of all characters in the font.</db:para>
<db:para>Note that this function can be very slow if the font is large.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#minLeftBearing">minLeftBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="overlinePos">
<db:title>int QFontMetrics::overlinePos() const</db:title>
<db:para>Returns the distance from the base line to where an overline should be drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#underlinePos">underlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#strikeOutPos">strikeOutPos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineWidth">lineWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rightBearing">
<db:title>int QFontMetrics::rightBearing(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:para>Returns the right bearing of character <db:code role="parameter">ch</db:code> in the font.</db:para>
<db:para>The right bearing is the left-ward distance of the right-most pixel of the character from the logical origin of a subsequent character. This value is negative if the pixels of the character extend to the right of the <db:link xlink:href="qfontmetrics.xml#width">width</db:link>() of the character.</db:para>
<db:para>See <db:link xlink:href="qfontmetrics.xml#width">width</db:link>() for a graphical description of this metric.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#minRightBearing">minRightBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>QSize QFontMetrics::size(int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>tabStops</db:emphasis> = 0, int *<db:emphasis>tabArray</db:emphasis> = Q_NULLPTR) const</db:title>
<db:para>Returns the size in pixels of <db:code role="parameter">text</db:code>.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument is the bitwise OR of the following flags:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextSingleLine</db:link> ignores newline characters.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> expands tabs (see below)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextShowMnemonic</db:link> interprets &quot;&amp;x&quot; as <db:emphasis role="underline">x</db:emphasis>; i.e., underlined.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextWordWrap</db:link> breaks the text to fit the rectangle.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If <db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> is set in <db:code role="parameter">flags</db:code>, then: if <db:code role="parameter">tabArray</db:code> is non-null, it specifies a 0-terminated sequence of pixel-positions for tabs; otherwise if <db:code role="parameter">tabStops</db:code> is non-zero, it is used as the tab spacing (in pixels).</db:para>
<db:para>Newline characters are processed as linebreaks.</db:para>
<db:para>Despite the different actual character heights, the heights of the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the same.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strikeOutPos">
<db:title>int QFontMetrics::strikeOutPos() const</db:title>
<db:para>Returns the distance from the base line to where the strikeout line should be drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#underlinePos">underlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#overlinePos">overlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineWidth">lineWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QFontMetrics::swap(QFontMetrics &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this font metrics instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="tightBoundingRect">
<db:title>[since 4.3] QRect QFontMetrics::tightBoundingRect(const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:para>Returns a tight bounding rectangle around the characters in the string specified by <db:code role="parameter">text</db:code>. The bounding rectangle always covers at least the set of pixels the text would cover if drawn at (0, 0).</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the width of the returned rectangle might be different than what the <db:link xlink:href="qfontmetrics.xml#width">width</db:link>() method returns.</db:para>
<db:para>If you want to know the advance width of the string (to lay out a set of strings next to each other), use <db:link xlink:href="qfontmetrics.xml#width">width</db:link>() instead.</db:para>
<db:para>Newline characters are processed as normal characters, <db:emphasis>not</db:emphasis> as linebreaks.</db:para>
<db:warning>
<db:para>Calling this method is very slow on Windows.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="underlinePos">
<db:title>int QFontMetrics::underlinePos() const</db:title>
<db:para>Returns the distance from the base line to where an underscore should be drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#overlinePos">overlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#strikeOutPos">strikeOutPos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineWidth">lineWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>int QFontMetrics::width(const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>len</db:emphasis> = -1) const</db:title>
<db:para>Returns the width in pixels of the first <db:code role="parameter">len</db:code> characters of <db:code role="parameter">text</db:code>. If <db:code role="parameter">len</db:code> is negative (the default), the entire string is used.</db:para>
<db:para>Note that this value is <db:emphasis>not</db:emphasis> equal to <db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>().width(); <db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>() returns a rectangle describing the pixels this string will cover whereas width() returns the distance to where the next string should be drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width-1">
<db:title>int QFontMetrics::width(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:mediaobject>
<db:alt>Bearings</db:alt>
<db:imageobject>
<db:imagedata fileref="images/bearings.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Returns the logical width of character <db:code role="parameter">ch</db:code> in pixels. This is a distance appropriate for drawing a subsequent character after <db:code role="parameter">ch</db:code>.</db:para>
<db:para>Some of the metrics are described in the image to the right. The central dark rectangles cover the logical <db:link xlink:href="qfontmetrics.xml#width">width</db:link>() of each character. The outer pale rectangles cover the <db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>() and <db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>() of each character. Notice that the bearings of &quot;f&quot; in this particular font are both negative, while the bearings of &quot;o&quot; are both positive.</db:para>
<db:warning>
<db:para>This function will produce incorrect results for Arabic characters or non-spacing marks in the middle of a string, as the glyph shaping and positioning of marks that happens when processing strings cannot be taken into account. When implementing an interactive text control, use <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> instead.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="xHeight">
<db:title>int QFontMetrics::xHeight() const</db:title>
<db:para>Returns the 'x' height of the font. This is often but not always the same as the height of the character 'x'.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QFontMetrics::operator!=(const QFontMetrics &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> is not equal to this object; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Two font metrics are considered equal if they were constructed from the same <db:link xlink:href="qfont.xml">QFont</db:link> and the paint devices they were constructed for are considered compatible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept, since 5.2] QFontMetrics &amp;QFontMetrics::operator=(QFontMetrics &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QFontMetrics &amp;QFontMetrics::operator=(const QFontMetrics &amp;<db:emphasis>fm</db:emphasis>)</db:title>
<db:para>Assigns the font metrics <db:code role="parameter">fm</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QFontMetrics::operator==(const QFontMetrics &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> is equal to this object; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Two font metrics are considered equal if they were constructed from the same <db:link xlink:href="qfont.xml">QFont</db:link> and the paint devices they were constructed for are considered compatible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QFontMetrics</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="charWidth">
<db:title>[deprecated] int QFontMetrics::charWidth(const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the width of the character at position <db:code role="parameter">pos</db:code> in the string <db:code role="parameter">text</db:code>.</db:para>
<db:para>The whole string is needed, as the glyph drawn may change depending on the context (the letter before and after the current one) for some languages (e.g. Arabic).</db:para>
<db:para>This function also takes non spacing marks and ligatures into account.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
