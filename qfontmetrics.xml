<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFontMetrics Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> class provides font metrics information.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFontMetrics</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFontMetrics is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> functions calculate the size of characters and strings for a given font. There are three ways you can create a <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> object:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Calling the <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> constructor with a <db:link xlink:href="qfont.xml">QFont</db:link> creates a font metrics object for a screen-compatible font, i.e. the font cannot be a printer font. If the font is changed later, the font metrics object is <db:emphasis>not</db:emphasis> updated.</db:para>
<db:para>(Note: If you use a printer font the values returned may be inaccurate. Printer fonts are not always accessible so the nearest screen font is used if a printer font is supplied.)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#fontMetrics">QWidget::fontMetrics</db:link>() returns the font metrics for a widget's font. This is equivalent to <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link>(widget-&gt;font()). If the widget's font is changed later, the font metrics object is <db:emphasis>not</db:emphasis> updated.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#fontMetrics">QPainter::fontMetrics</db:link>() returns the font metrics for a painter's current font. If the painter's font is changed later, the font metrics object is <db:emphasis>not</db:emphasis> updated.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Once created, the object provides functions to access the individual metrics of the font, its characters, and for strings rendered in the font.</db:para>
<db:para>There are several functions that operate on the font: <db:link xlink:href="qfontmetrics.xml#ascent">ascent</db:link>(), <db:link xlink:href="qfontmetrics.xml#descent">descent</db:link>(), <db:link xlink:href="qfontmetrics.xml#height">height</db:link>(), <db:link xlink:href="qfontmetrics.xml#leading">leading</db:link>() and <db:link xlink:href="qfontmetrics.xml#lineSpacing">lineSpacing</db:link>() return the basic size properties of the font. The <db:link xlink:href="qfontmetrics.xml#underlinePos">underlinePos</db:link>(), <db:link xlink:href="qfontmetrics.xml#overlinePos">overlinePos</db:link>(), <db:link xlink:href="qfontmetrics.xml#strikeOutPos">strikeOutPos</db:link>() and <db:link xlink:href="qfontmetrics.xml#lineWidth">lineWidth</db:link>() functions, return the properties of the line that underlines, overlines or strikes out the characters. These functions are all fast.</db:para>
<db:para>There are also some functions that operate on the set of glyphs in the font: <db:link xlink:href="qfontmetrics.xml#minLeftBearing">minLeftBearing</db:link>(), <db:link xlink:href="qfontmetrics.xml#minRightBearing">minRightBearing</db:link>() and <db:link xlink:href="qfontmetrics.xml#maxWidth">maxWidth</db:link>(). These are by necessity slow, and we recommend avoiding them if possible.</db:para>
<db:para>For each character, you can get its <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>(), <db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>(), and <db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>(), and find out whether it is in the font using <db:link xlink:href="qfontmetrics.xml#inFont">inFont</db:link>(). You can also treat the character as a string, and use the string functions on it.</db:para>
<db:para>The string functions include <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>(), to return the width of a string in pixels (or points, for a printer), <db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>(), to return a rectangle large enough to contain the rendered string, and <db:link xlink:href="qfontmetrics.xml#size">size</db:link>(), to return the size of that rectangle.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFont font(&quot;times&quot;, 24);
QFontMetrics fm(font);
int pixelsWide = fm.horizontalAdvance(&quot;What's the width of this text?&quot;);
int pixelsHigh = fm.height();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml">QFont</db:link></db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
<db:member><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-charactermap-example.xml">Character Map Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFontMetrics">
<db:title>[explicit] QFontMetrics::QFontMetrics(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFontMetrics</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontMetrics(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a font metrics object for <db:code role="parameter">font</db:code>.</db:para>
<db:para>The font metrics will be compatible with the paintdevice used to create <db:code role="parameter">font</db:code>.</db:para>
<db:para>The font metrics object holds the information for the font that is passed in the constructor at the time it is created, and is not updated if the font's attributes are changed later.</db:para>
<db:para>Use <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link>(const <db:link xlink:href="qfont.xml">QFont</db:link> &amp;, <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> *) to get the font metrics that are compatible with a certain paint device.</db:para>
</db:section>
<db:section xml:id="QFontMetrics-1">
<db:title>[since 5.13] QFontMetrics::QFontMetrics(const QFont &amp;<db:emphasis>font</db:emphasis>, const QPaintDevice *<db:emphasis>paintdevice</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFontMetrics</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPaintDevice *</db:type>
<db:parameter>paintdevice</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontMetrics(const QFont &amp;font, const QPaintDevice *paintdevice)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a font metrics object for <db:code role="parameter">font</db:code> and <db:code role="parameter">paintdevice</db:code>.</db:para>
<db:para>The font metrics will be compatible with the paintdevice passed. If the <db:code role="parameter">paintdevice</db:code> is <db:code>nullptr</db:code>, the metrics will be screen-compatible, ie. the metrics you get if you use the font for drawing text on a <db:link xlink:href="qwidget.xml">widgets</db:link> or <db:link xlink:href="qpixmap.xml">pixmaps</db:link>, not on a <db:link xlink:href="qpicture.xml">QPicture</db:link> or <db:link xlink:href="qprinter.xml">QPrinter</db:link>.</db:para>
<db:para>The font metrics object holds the information for the font that is passed in the constructor at the time it is created, and is not updated if the font's attributes are changed later.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
</db:section>
<db:section xml:id="QFontMetrics-2">
<db:title>QFontMetrics::QFontMetrics(const QFontMetrics &amp;<db:emphasis>fm</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFontMetrics</db:methodname>
<db:methodparam>
<db:type>const QFontMetrics &amp;</db:type>
<db:parameter>fm</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontMetrics(const QFontMetrics &amp;fm)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">fm</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFontMetrics">
<db:title>QFontMetrics::~QFontMetrics()</db:title>
<db:destructorsynopsis>
<db:methodname>~QFontMetrics</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QFontMetrics()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the font metrics object and frees all allocated resources.</db:para>
</db:section>
<db:section xml:id="ascent">
<db:title>int QFontMetrics::ascent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>ascent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int ascent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ascent of the font.</db:para>
<db:para>The ascent of a font is the distance from the baseline to the highest position characters extend to. In practice, some font designers break this rule, e.g. when they put more than one accent on top of a character, or to accommodate a certain character, so it is possible (though rare) that this value will be too small.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#descent">descent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="averageCharWidth">
<db:title>int QFontMetrics::averageCharWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>averageCharWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int averageCharWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the average width of glyphs in the font.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRect QFontMetrics::boundingRect(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect boundingRect(QChar ch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the rectangle that is covered by ink if character <db:code role="parameter">ch</db:code> were to be drawn at the origin of the coordinate system.</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0) (e.g., for italicized fonts), and that the text output may cover <db:emphasis>all</db:emphasis> pixels in the bounding rectangle. For a space character the rectangle will usually be empty.</db:para>
<db:para>Note that the rectangle usually extends both above and below the base line.</db:para>
<db:warning>
<db:para>The width of the returned rectangle is not the advance width of the character. Use boundingRect(const <db:link xlink:href="qstring.xml">QString</db:link> &amp;) or <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() instead.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect-1">
<db:title>QRect QFontMetrics::boundingRect(const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect boundingRect(const QString &amp;text) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of the characters in the string specified by <db:code role="parameter">text</db:code>. The bounding rectangle always covers at least the set of pixels the text would cover if drawn at (0, 0).</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the width of the returned rectangle might be different than what the <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() method returns.</db:para>
<db:para>If you want to know the advance width of the string (to lay out a set of strings next to each other), use <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() instead.</db:para>
<db:para>Newline characters are processed as normal characters, <db:emphasis>not</db:emphasis> as linebreaks.</db:para>
<db:para>The height of the bounding rectangle is at least as large as the value returned by <db:link xlink:href="qfontmetrics.xml#height">height</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#boundingRect">QPainter::boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#tightBoundingRect">tightBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect-2">
<db:title>[since 6.3] QRect QFontMetrics::boundingRect(const QString &amp;<db:emphasis>text</db:emphasis>, const QTextOption &amp;<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextOption &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect boundingRect(const QString &amp;text, const QTextOption &amp;option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of the characters in the string specified by <db:code role="parameter">text</db:code> laid out using <db:code role="parameter">option</db:code>. The bounding rectangle always covers at least the set of pixels the text would cover if drawn at (0, 0).</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the width of the returned rectangle might be different than what the <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() method returns.</db:para>
<db:para>If you want to know the advance width of the string (to lay out a set of strings next to each other), use <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() instead.</db:para>
<db:para>Newline characters are processed as normal characters, <db:emphasis>not</db:emphasis> as linebreaks.</db:para>
<db:para>The height of the bounding rectangle is at least as large as the value returned by <db:link xlink:href="qfontmetrics.xml#height">height</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#boundingRect">QPainter::boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#tightBoundingRect">tightBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect-3">
<db:title>QRect QFontMetrics::boundingRect(const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>tabStops</db:emphasis> = 0, int *<db:emphasis>tabArray</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tabStops</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>tabArray</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect boundingRect(const QRect &amp;rect, int flags, const QString &amp;text, int tabStops, int *tabArray) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the bounding rectangle of the characters in the string specified by <db:code role="parameter">text</db:code>, which is the set of pixels the text would cover if drawn at (0, 0). The drawing, and hence the bounding rectangle, is constrained to the rectangle <db:code role="parameter">rect</db:code>.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument is the bitwise OR of the following flags:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link> aligns to the left border, except for Arabic and Hebrew where it aligns to the right.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link> aligns to the right border, except for Arabic and Hebrew where it aligns to the left.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignJustify</db:link> produces justified text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignHCenter</db:link> aligns horizontally centered.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link> aligns to the top border.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link> aligns to the bottom border.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignVCenter</db:link> aligns vertically centered</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignCenter</db:link> (== <db:code>Qt::AlignHCenter | Qt::AlignVCenter</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextSingleLine</db:link> ignores newline characters in the text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> expands tabs (see below)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextShowMnemonic</db:link> interprets &quot;&amp;x&quot; as <db:emphasis role="underline">x</db:emphasis>; i.e., underlined.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextWordWrap</db:link> breaks the text to fit the rectangle.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> alignment defaults to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link> and vertical alignment defaults to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link>.</db:para>
<db:para>If several of the horizontal or several of the vertical alignment flags are set, the resulting alignment is undefined.</db:para>
<db:para>If <db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> is set in <db:code role="parameter">flags</db:code>, then: if <db:code role="parameter">tabArray</db:code> is non-null, it specifies a 0-terminated sequence of pixel-positions for tabs; otherwise if <db:code role="parameter">tabStops</db:code> is non-zero, it is used as the tab spacing (in pixels).</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the text output may cover <db:emphasis>all</db:emphasis> pixels in the bounding rectangle.</db:para>
<db:para>Newline characters are processed as linebreaks.</db:para>
<db:para>Despite the different actual character heights, the heights of the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the same.</db:para>
<db:para>The bounding rectangle returned by this function is somewhat larger than that calculated by the simpler <db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>() function. This function uses the <db:link xlink:href="qfontmetrics.xml#minLeftBearing">maximum left</db:link> and <db:link xlink:href="qfontmetrics.xml#minRightBearing">right</db:link> font bearings as is necessary for multi-line text to align correctly. Also, fontHeight() and <db:link xlink:href="qfontmetrics.xml#lineSpacing">lineSpacing</db:link>() are used to calculate the height, rather than individual character heights.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#boundingRect">QPainter::boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect-4">
<db:title>QRect QFontMetrics::boundingRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>tabStops</db:emphasis> = 0, int *<db:emphasis>tabArray</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tabStops</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>tabArray</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect boundingRect(int x, int y, int width, int height, int flags, const QString &amp;text, int tabStops, int *tabArray) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the bounding rectangle for the given <db:code role="parameter">text</db:code> within the rectangle specified by the <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> coordinates, <db:code role="parameter">width</db:code>, and <db:code role="parameter">height</db:code>.</db:para>
<db:para>If <db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> is set in <db:code role="parameter">flags</db:code> and <db:code role="parameter">tabArray</db:code> is non-null, it specifies a 0-terminated sequence of pixel-positions for tabs; otherwise, if <db:code role="parameter">tabStops</db:code> is non-zero, it is used as the tab spacing (in pixels).</db:para>
</db:section>
<db:section xml:id="capHeight">
<db:title>[since 5.8] int QFontMetrics::capHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>capHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int capHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cap height of the font.</db:para>
<db:para>The cap height of a font is the height of a capital letter above the baseline. It specifically is the height of capital letters that are flat - such as H or I - as opposed to round letters such as O, or pointed letters like A, both of which may display overshoot.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#ascent">ascent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="descent">
<db:title>int QFontMetrics::descent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>descent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int descent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the descent of the font.</db:para>
<db:para>The descent is the distance from the base line to the lowest point characters extend to. In practice, some font designers break this rule, e.g. to accommodate a certain character, so it is possible (though rare) that this value will be too small.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#ascent">ascent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elidedText">
<db:title>QString QFontMetrics::elidedText(const QString &amp;<db:emphasis>text</db:emphasis>, Qt::TextElideMode <db:emphasis>mode</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>flags</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>elidedText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TextElideMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString elidedText(const QString &amp;text, Qt::TextElideMode mode, int width, int flags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the string <db:code role="parameter">text</db:code> is wider than <db:code role="parameter">width</db:code>, returns an elided version of the string (i.e., a string with &quot;...&quot; in it). Otherwise, returns the original string.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> parameter specifies whether the text is elided on the left (e.g., &quot;...tech&quot;), in the middle (e.g., &quot;Tr...ch&quot;), or on the right (e.g., &quot;Trol...&quot;).</db:para>
<db:para>The <db:code role="parameter">width</db:code> is specified in pixels, not characters.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument is optional and currently only supports <db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextShowMnemonic</db:link> as value.</db:para>
<db:para>The elide mark follows the <db:link xlink:href="qt.xml#LayoutDirection-enum">layoutdirection</db:link>. For example, it will be on the right side of the text for right-to-left layouts if the <db:code role="parameter">mode</db:code> is <db:code>Qt::ElideLeft</db:code>, and on the left side of the text if the <db:code role="parameter">mode</db:code> is <db:code>Qt::ElideRight</db:code>.</db:para>
</db:section>
<db:section xml:id="fontDpi">
<db:title>[since 5.14] qreal QFontMetrics::fontDpi() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>fontDpi</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal fontDpi() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font DPI.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="height">
<db:title>int QFontMetrics::height() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>height</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int height() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of the font.</db:para>
<db:para>This is always equal to <db:link xlink:href="qfontmetrics.xml#ascent">ascent</db:link>()+<db:link xlink:href="qfontmetrics.xml#descent">descent</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#leading">leading</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineSpacing">lineSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalAdvance">
<db:title>[since 5.11] int QFontMetrics::horizontalAdvance(const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>len</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>horizontalAdvance</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>len</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int horizontalAdvance(const QString &amp;text, int len) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal advance in pixels of the first <db:code role="parameter">len</db:code> characters of <db:code role="parameter">text</db:code>. If <db:code role="parameter">len</db:code> is negative (the default), the entire string is used.</db:para>
<db:para>This is the distance appropriate for drawing a subsequent character after <db:code role="parameter">text</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalAdvance-1">
<db:title>[since 6.3] int QFontMetrics::horizontalAdvance(const QString &amp;<db:emphasis>text</db:emphasis>, const QTextOption &amp;<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>horizontalAdvance</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextOption &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int horizontalAdvance(const QString &amp;text, const QTextOption &amp;option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal advance in pixels of <db:code role="parameter">text</db:code> laid out using <db:code role="parameter">option</db:code>.</db:para>
<db:para>The advance is the distance appropriate for drawing a subsequent character after <db:code role="parameter">text</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalAdvance-2">
<db:title>[since 5.11] int QFontMetrics::horizontalAdvance(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>horizontalAdvance</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int horizontalAdvance(QChar ch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:mediaobject>
<db:alt>Bearings</db:alt>
<db:imageobject>
<db:imagedata fileref="images/bearings.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Returns the horizontal advance of character <db:code role="parameter">ch</db:code> in pixels. This is a distance appropriate for drawing a subsequent character after <db:code role="parameter">ch</db:code>.</db:para>
<db:para>Some of the metrics are described in the image. The central dark rectangles cover the logical <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() of each character. The outer pale rectangles cover the <db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>() and <db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>() of each character. Notice that the bearings of &quot;f&quot; in this particular font are both negative, while the bearings of &quot;o&quot; are both positive.</db:para>
<db:warning>
<db:para>This function will produce incorrect results for Arabic characters or non-spacing marks in the middle of a string, as the glyph shaping and positioning of marks that happens when processing strings cannot be taken into account. When implementing an interactive text control, use <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> instead.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inFont">
<db:title>bool QFontMetrics::inFont(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>inFont</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool inFont(QChar ch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if character <db:code role="parameter">ch</db:code> is a valid character in the font; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="inFontUcs4">
<db:title>bool QFontMetrics::inFontUcs4(uint <db:emphasis>ucs4</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>inFontUcs4</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>ucs4</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool inFontUcs4(uint ucs4) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the character <db:code role="parameter">ucs4</db:code> encoded in UCS-4/UTF-32 is a valid character in the font; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="leading">
<db:title>int QFontMetrics::leading() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>leading</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int leading() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the leading of the font.</db:para>
<db:para>This is the natural inter-line spacing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineSpacing">lineSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="leftBearing">
<db:title>int QFontMetrics::leftBearing(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>leftBearing</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int leftBearing(QChar ch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the left bearing of character <db:code role="parameter">ch</db:code> in the font.</db:para>
<db:para>The left bearing is the right-ward distance of the left-most pixel of the character from the logical origin of the character. This value is negative if the pixels of the character extend to the left of the logical origin.</db:para>
<db:para>See <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() for a graphical description of this metric.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#minLeftBearing">minLeftBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineSpacing">
<db:title>int QFontMetrics::lineSpacing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lineSpacing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lineSpacing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the distance from one base line to the next.</db:para>
<db:para>This value is always equal to <db:link xlink:href="qfontmetrics.xml#leading">leading</db:link>()+<db:link xlink:href="qfontmetrics.xml#height">height</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#leading">leading</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineWidth">
<db:title>int QFontMetrics::lineWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lineWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lineWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the underline and strikeout lines, adjusted for the point size of the font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#underlinePos">underlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#overlinePos">overlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#strikeOutPos">strikeOutPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxWidth">
<db:title>int QFontMetrics::maxWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maxWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maxWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the widest character in the font.</db:para>
</db:section>
<db:section xml:id="minLeftBearing">
<db:title>int QFontMetrics::minLeftBearing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minLeftBearing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minLeftBearing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum left bearing of the font.</db:para>
<db:para>This is the smallest <db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>(char) of all characters in the font.</db:para>
<db:para>Note that this function can be very slow if the font is large.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#minRightBearing">minRightBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minRightBearing">
<db:title>int QFontMetrics::minRightBearing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minRightBearing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minRightBearing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum right bearing of the font.</db:para>
<db:para>This is the smallest <db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>(char) of all characters in the font.</db:para>
<db:para>Note that this function can be very slow if the font is large.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#minLeftBearing">minLeftBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#rightBearing">rightBearing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="overlinePos">
<db:title>int QFontMetrics::overlinePos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>overlinePos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int overlinePos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the distance from the base line to where an overline should be drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#underlinePos">underlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#strikeOutPos">strikeOutPos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineWidth">lineWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rightBearing">
<db:title>int QFontMetrics::rightBearing(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rightBearing</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rightBearing(QChar ch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the right bearing of character <db:code role="parameter">ch</db:code> in the font.</db:para>
<db:para>The right bearing is the left-ward distance of the right-most pixel of the character from the logical origin of a subsequent character. This value is negative if the pixels of the character extend to the right of the <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() of the character.</db:para>
<db:para>See <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() for a graphical description of this metric.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#leftBearing">leftBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#minRightBearing">minRightBearing</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>QSize QFontMetrics::size(int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>tabStops</db:emphasis> = 0, int *<db:emphasis>tabArray</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>size</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tabStops</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>tabArray</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize size(int flags, const QString &amp;text, int tabStops, int *tabArray) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size in pixels of <db:code role="parameter">text</db:code>.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument is the bitwise OR of the following flags:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextSingleLine</db:link> ignores newline characters.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> expands tabs (see below)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextShowMnemonic</db:link> interprets &quot;&amp;x&quot; as <db:emphasis role="underline">x</db:emphasis>; i.e., underlined.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextWordWrap</db:link> breaks the text to fit the rectangle.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If <db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link> is set in <db:code role="parameter">flags</db:code>, then: if <db:code role="parameter">tabArray</db:code> is non-null, it specifies a 0-terminated sequence of pixel-positions for tabs; otherwise if <db:code role="parameter">tabStops</db:code> is non-zero, it is used as the tab spacing (in pixels).</db:para>
<db:para>Newline characters are processed as linebreaks.</db:para>
<db:para>Despite the different actual character heights, the heights of the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the same.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strikeOutPos">
<db:title>int QFontMetrics::strikeOutPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>strikeOutPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int strikeOutPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the distance from the base line to where the strikeout line should be drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#underlinePos">underlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#overlinePos">overlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineWidth">lineWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QFontMetrics::swap(QFontMetrics &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QFontMetrics &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QFontMetrics &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this font metrics instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="tightBoundingRect">
<db:title>QRect QFontMetrics::tightBoundingRect(const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>tightBoundingRect</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect tightBoundingRect(const QString &amp;text) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a tight bounding rectangle around the characters in the string specified by <db:code role="parameter">text</db:code>. The bounding rectangle always covers at least the set of pixels the text would cover if drawn at (0, 0).</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the width of the returned rectangle might be different than what the <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() method returns.</db:para>
<db:para>If you want to know the advance width of the string (to lay out a set of strings next to each other), use <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() instead.</db:para>
<db:para>Newline characters are processed as normal characters, <db:emphasis>not</db:emphasis> as linebreaks.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tightBoundingRect-1">
<db:title>[since 6.3] QRect QFontMetrics::tightBoundingRect(const QString &amp;<db:emphasis>text</db:emphasis>, const QTextOption &amp;<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>tightBoundingRect</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextOption &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect tightBoundingRect(const QString &amp;text, const QTextOption &amp;option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a tight bounding rectangle around the characters in the string specified by <db:code role="parameter">text</db:code> laid out using <db:code role="parameter">option</db:code>. The bounding rectangle always covers at least the set of pixels the text would cover if drawn at (0, 0).</db:para>
<db:para>Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the width of the returned rectangle might be different than what the <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() method returns.</db:para>
<db:para>If you want to know the advance width of the string (to lay out a set of strings next to each other), use <db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>() instead.</db:para>
<db:para>Newline characters are processed as normal characters, <db:emphasis>not</db:emphasis> as linebreaks.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#horizontalAdvance">horizontalAdvance</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="underlinePos">
<db:title>int QFontMetrics::underlinePos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>underlinePos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int underlinePos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the distance from the base line to where an underscore should be drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#overlinePos">overlinePos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#strikeOutPos">strikeOutPos</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml#lineWidth">lineWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="xHeight">
<db:title>int QFontMetrics::xHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>xHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int xHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the 'x' height of the font. This is often but not always the same as the height of the character 'x'.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QFontMetrics::operator!=(const QFontMetrics &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QFontMetrics &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QFontMetrics &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> is not equal to this object; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Two font metrics are considered equal if they were constructed from the same <db:link xlink:href="qfont.xml">QFont</db:link> and the paint devices they were constructed for are considered compatible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QFontMetrics &amp;QFontMetrics::operator=(const QFontMetrics &amp;<db:emphasis>fm</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFontMetrics &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QFontMetrics &amp;</db:type>
<db:parameter>fm</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontMetrics &amp; operator=(const QFontMetrics &amp;fm)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the font metrics <db:code role="parameter">fm</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.2] QFontMetrics &amp;QFontMetrics::operator=(QFontMetrics &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFontMetrics &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QFontMetrics &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontMetrics &amp; operator=(QFontMetrics &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QFontMetrics::operator==(const QFontMetrics &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QFontMetrics &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QFontMetrics &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> is equal to this object; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Two font metrics are considered equal if they were constructed from the same <db:link xlink:href="qfont.xml">QFont</db:link> and the paint devices they were constructed for are considered compatible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
