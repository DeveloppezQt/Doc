<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHostInfo Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> class provides static functions for host name lookups.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHostInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QHostInfo is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> finds the IP address(es) associated with a host name, or the host name associated with an IP address. The class provides two static convenience functions: one that works asynchronously and emits a signal once the host is found, and one that blocks and returns a <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> object.</db:para>
<db:para>To look up a host's IP addresses asynchronously, call <db:link xlink:href="qhostinfo.xml#lookupHost">lookupHost</db:link>(), which takes the host name or IP address, a receiver object, and a slot signature as arguments and returns an ID. You can abort the lookup by calling <db:link xlink:href="qhostinfo.xml#abortHostLookup">abortHostLookup</db:link>() with the lookup ID.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// To find the IP address of qt-project.org
QHostInfo::lookupHost(&quot;qt-project.org&quot;, this, &amp;amp;MyWidget::printResults);

// To find the host name for 4.2.2.1
QHostInfo::lookupHost(&quot;4.2.2.1&quot;, this, &amp;amp;MyWidget::printResults);
</db:programlisting>
<db:para>The slot is invoked when the results are ready. The results are stored in a <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> object. Call <db:link xlink:href="qhostinfo.xml#addresses">addresses</db:link>() to get the list of IP addresses for the host, and <db:link xlink:href="qhostinfo.xml#hostName">hostName</db:link>() to get the host name that was looked up.</db:para>
<db:para>If the lookup failed, <db:link xlink:href="qhostinfo.xml#error">error</db:link>() returns the type of error that occurred. <db:link xlink:href="qhostinfo.xml#errorString">errorString</db:link>() gives a human-readable description of the lookup error.</db:para>
<db:para>If you want a blocking lookup, use the <db:link xlink:href="qhostinfo.xml#fromName">QHostInfo::fromName</db:link>() function:</db:para>
<db:programlisting language="cpp">QHostInfo info = QHostInfo::fromName(&quot;qt-project.org&quot;);
</db:programlisting>
<db:para><db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> supports Internationalized Domain Names (IDNs) through the IDNA and Punycode standards.</db:para>
<db:para>To retrieve the name of the local host, use the static <db:link xlink:href="qhostinfo.xml#localHostName">QHostInfo::localHostName</db:link>() function.</db:para>
<db:para><db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> uses the mechanisms provided by the operating system to perform the lookup. As per <db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc6724">RFC 6724</db:link> there is no guarantee that all IP addresses registered for a domain or host will be returned.</db:para>
<db:note>
<db:para>Since Qt 4.6.1 <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> is using multiple threads for DNS lookup instead of one dedicated DNS thread. This improves performance, but also changes the order of signal emissions when using <db:link xlink:href="qhostinfo.xml#lookupHost">lookupHost</db:link>() compared to previous versions of Qt.</db:para>
</db:note>
<db:note>
<db:para>Since Qt 4.6.3 <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> is using a small internal 60 second DNS cache for performance improvements.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractsocket.xml">QAbstractSocket</db:link></db:member>
<db:member><db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc3492">RFC 3492</db:link></db:member>
<db:member><db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc6724">RFC 6724</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HostInfoError-enum">
<db:title>enum QHostInfo::HostInfoError</db:title>
<db:enumsynopsis>
<db:enumname>HostInfoError</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HostNotFound</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the various errors that can occur when trying to resolve a host name.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostinfo.xml">QHostInfo</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The lookup was successful.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostinfo.xml">QHostInfo</db:link></db:emphasis>::HostNotFound</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>No IP addresses were found for the host.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostinfo.xml">QHostInfo</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An unknown error occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#setError">setError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHostInfo">
<db:title>[explicit] QHostInfo::QHostInfo(int <db:emphasis>id</db:emphasis> = -1)</db:title>
<db:constructorsynopsis>
<db:methodname>QHostInfo</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostInfo(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty host info object with lookup ID <db:code role="parameter">id</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#lookupId">lookupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QHostInfo-1">
<db:title>QHostInfo::QHostInfo(const QHostInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QHostInfo</db:methodname>
<db:methodparam>
<db:type>const QHostInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostInfo(const QHostInfo &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QHostInfo-2">
<db:title>QHostInfo::QHostInfo(QHostInfo &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QHostInfo</db:methodname>
<db:methodparam>
<db:type>QHostInfo &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostInfo(QHostInfo &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a new <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> from <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QHostInfo">
<db:title>QHostInfo::~QHostInfo()</db:title>
<db:destructorsynopsis>
<db:methodname>~QHostInfo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHostInfo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the host info object.</db:para>
</db:section>
<db:section xml:id="abortHostLookup">
<db:title>[static] void QHostInfo::abortHostLookup(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>abortHostLookup</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void abortHostLookup(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Aborts the host lookup with the ID <db:code role="parameter">id</db:code>, as returned by <db:link xlink:href="qhostinfo.xml#lookupHost">lookupHost</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#lookupHost">lookupHost</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#lookupId">lookupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addresses">
<db:title>QList&lt;QHostAddress&gt; QHostInfo::addresses() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QHostAddress&gt;</db:type>
<db:methodname>addresses</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QHostAddress&gt; addresses() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of IP addresses associated with <db:link xlink:href="qhostinfo.xml#hostName">hostName</db:link>(). This list may be empty.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QHostInfo info;
...
if (!info.addresses().isEmpty()) {
    QHostAddress address = info.addresses().first();
    // use the first IP address
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#setAddresses">setAddresses</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#hostName">hostName</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QHostInfo::HostInfoError QHostInfo::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHostInfo::HostInfoError</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostInfo::HostInfoError error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of error that occurred if the host name lookup failed; otherwise returns <db:link xlink:href="qhostinfo.xml#HostInfoError-enum">NoError</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#setError">setError</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QHostInfo::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the lookup failed, this function returns a human readable description of the error; otherwise &quot;Unknown error&quot; is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#setErrorString">setErrorString</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromName">
<db:title>[static] QHostInfo QHostInfo::fromName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QHostInfo</db:type>
<db:methodname>fromName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostInfo fromName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Looks up the IP address(es) for the given host <db:code role="parameter">name</db:code>. The function blocks during the lookup which means that execution of the program is suspended until the results of the lookup are ready. Returns the result of the lookup in a <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> object.</db:para>
<db:para>If you pass a literal IP address to <db:code role="parameter">name</db:code> instead of a host name, <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> will search for the domain name for the IP (i.e., <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> will perform a <db:emphasis>reverse</db:emphasis> lookup). On success, the returned <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> will contain both the resolved domain name and IP addresses for the host name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#lookupHost">lookupHost</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hostName">
<db:title>QString QHostInfo::hostName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>hostName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString hostName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the host whose IP addresses were looked up.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#setHostName">setHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#localHostName">localHostName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localDomainName">
<db:title>[static] QString QHostInfo::localDomainName()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>localDomainName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString localDomainName()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the DNS domain of this machine.</db:para>
<db:note>
<db:para>DNS domains are not related to domain names found in Windows networks.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#hostName">hostName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localHostName">
<db:title>[static] QString QHostInfo::localHostName()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>localHostName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString localHostName()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this machine's host name, if one is configured. Note that hostnames are not guaranteed to be globally unique, especially if they were configured automatically.</db:para>
<db:para>This function does not guarantee the returned host name is a Fully Qualified Domain Name (FQDN). For that, use <db:link xlink:href="qhostinfo.xml#fromName">fromName</db:link>() to resolve the returned name to an FQDN.</db:para>
<db:para>This function returns the same as <db:link xlink:href="qsysinfo.xml#machineHostName">QSysInfo::machineHostName</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#hostName">hostName</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#localDomainName">localDomainName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lookupHost">
<db:title>[static] int QHostInfo::lookupHost(const QString &amp;<db:emphasis>name</db:emphasis>, QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>lookupHost</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lookupHost(const QString &amp;name, QObject *receiver, const char *member)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Looks up the IP address(es) associated with host name <db:code role="parameter">name</db:code>, and returns an ID for the lookup. When the result of the lookup is ready, the slot or signal <db:code role="parameter">member</db:code> in <db:code role="parameter">receiver</db:code> is called with a <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> argument. The <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> object can then be inspected to get the results of the lookup.</db:para>
<db:para>The lookup is performed by a single function call, for example:</db:para>
<db:programlisting language="cpp">QHostInfo::lookupHost(&quot;www.kde.org&quot;, this, &amp;amp;MyWidget::lookedUp);
</db:programlisting>
<db:para>The implementation of the slot prints basic information about the addresses returned by the lookup, or reports an error if it failed:</db:para>
<db:programlisting language="cpp">void MyWidget::lookedUp(const QHostInfo &amp;amp;host)
{
    if (host.error() != QHostInfo::NoError) {
        qDebug() &amp;lt;&amp;lt; &quot;Lookup failed:&quot; &amp;lt;&amp;lt; host.errorString();
        return;
    }

    const auto addresses = host.addresses();
    for (const QHostAddress &amp;amp;address : addresses)
        qDebug() &amp;lt;&amp;lt; &quot;Found address:&quot; &amp;lt;&amp;lt; address.toString();
}
</db:programlisting>
<db:para>If you pass a literal IP address to <db:code role="parameter">name</db:code> instead of a host name, <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> will search for the domain name for the IP (i.e., <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> will perform a <db:emphasis>reverse</db:emphasis> lookup). On success, the resulting <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> will contain both the resolved domain name and IP addresses for the host name. Example:</db:para>
<db:programlisting language="cpp">QHostInfo::lookupHost(&quot;4.2.2.1&quot;, this, &amp;amp;MyWidget::lookedUp);
</db:programlisting>
<db:note>
<db:para>There is no guarantee on the order the signals will be emitted if you start multiple requests with lookupHost().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#abortHostLookup">abortHostLookup</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#addresses">addresses</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#fromName">fromName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lookupHost-1">
<db:title>[static] int QHostInfo::lookupHost(const QString &amp;<db:emphasis>name</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>lookupHost</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int lookupHost(const QString &amp;name, const QObject *context, Functor functor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Looks up the IP address(es) associated with host name <db:code role="parameter">name</db:code>, and returns an ID for the lookup. When the result of the lookup is ready, the <db:code role="parameter">functor</db:code> is called with a <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> argument. The <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> object can then be inspected to get the results of the lookup.</db:para>
<db:para>If <db:code role="parameter">context</db:code> is destroyed before the lookup completes, the <db:code role="parameter">functor</db:code> will not be called. The <db:code role="parameter">functor</db:code> will be run in the thread of <db:code role="parameter">context</db:code>. The context's thread must have a running Qt event loop.</db:para>
<db:para>Here is an alternative signature for the function:</db:para>
<db:programlisting language="cpp">lookupHost(const QString &amp;amp;name, const QObject *receiver, PointerToMemberFunction function)
</db:programlisting>
<db:para>In this case, when the result of the lookup is ready, the slot or signal function in receiver is called with a <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> argument. The <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> object can then be inspected to get the results of the lookup.</db:para>
<db:note>
<db:para>There is no guarantee on the order the signals will be emitted if you start multiple requests with <db:link xlink:href="qhostinfo.xml#lookupHost">lookupHost</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#abortHostLookup">abortHostLookup</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#addresses">addresses</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#fromName">fromName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lookupHost-2">
<db:title>[static] int QHostInfo::lookupHost(const QString &amp;<db:emphasis>name</db:emphasis>, Functor &amp;&amp;<db:emphasis>functor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>lookupHost</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor &amp;&amp;</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int lookupHost(const QString &amp;name, Functor &amp;&amp;functor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Looks up the IP address(es) associated with host name <db:code role="parameter">name</db:code>, and returns an ID for the lookup. When the result of the lookup is ready, the <db:code role="parameter">functor</db:code> is called with a <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> argument. The <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> object can then be inspected to get the results of the lookup.</db:para>
<db:para>The <db:code role="parameter">functor</db:code> will be run in the thread that makes the call to <db:link xlink:href="qhostinfo.xml#lookupHost">lookupHost</db:link>; that thread must have a running Qt event loop.</db:para>
<db:note>
<db:para>There is no guarantee on the order the signals will be emitted if you start multiple requests with <db:link xlink:href="qhostinfo.xml#lookupHost">lookupHost</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#abortHostLookup">abortHostLookup</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#addresses">addresses</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#fromName">fromName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lookupId">
<db:title>int QHostInfo::lookupId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lookupId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lookupId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ID of this lookup.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#setLookupId">setLookupId</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#abortHostLookup">abortHostLookup</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#hostName">hostName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAddresses">
<db:title>void QHostInfo::setAddresses(const QList&lt;QHostAddress&gt; &amp;<db:emphasis>addresses</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAddresses</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QHostAddress&gt; &amp;</db:type>
<db:parameter>addresses</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAddresses(const QList&lt;QHostAddress&gt; &amp;addresses)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the list of addresses in this <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> to <db:code role="parameter">addresses</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#addresses">addresses</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setError">
<db:title>void QHostInfo::setError(QHostInfo::HostInfoError <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setError</db:methodname>
<db:methodparam>
<db:type>QHostInfo::HostInfoError</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setError(QHostInfo::HostInfoError error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the error type of this <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> to <db:code role="parameter">error</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setErrorString">
<db:title>void QHostInfo::setErrorString(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setErrorString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setErrorString(const QString &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the human readable description of the error that occurred to <db:code role="parameter">str</db:code> if the lookup failed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#setError">setError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHostName">
<db:title>void QHostInfo::setHostName(const QString &amp;<db:emphasis>hostName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHostName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>hostName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHostName(const QString &amp;hostName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the host name of this <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> to <db:code role="parameter">hostName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#hostName">hostName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLookupId">
<db:title>void QHostInfo::setLookupId(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLookupId</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLookupId(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the ID of this lookup to <db:code role="parameter">id</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml#lookupId">lookupId</db:link>()</db:member>
<db:member><db:link xlink:href="qhostinfo.xml#lookupHost">lookupHost</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QHostInfo::swap(QHostInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QHostInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QHostInfo &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps host-info <db:code role="parameter">other</db:code> with this host-info. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QHostInfo &amp;QHostInfo::operator=(const QHostInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QHostInfo &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QHostInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostInfo &amp; operator=(const QHostInfo &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the data of the <db:code role="parameter">other</db:code> object to this host info object, and returns a reference to it.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QHostInfo &amp;QHostInfo::operator=(QHostInfo &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QHostInfo &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QHostInfo &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostInfo &amp; operator=(QHostInfo &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> instance.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
