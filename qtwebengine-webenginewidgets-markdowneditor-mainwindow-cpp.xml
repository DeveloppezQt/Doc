<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Markdown Editor Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to integrate a web engine in a hybrid desktop application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &quot;previewpage.h&quot;
#include &quot;ui_mainwindow.h&quot;

#include &lt;QFile&gt;
#include &lt;QFileDialog&gt;
#include &lt;QFontDatabase&gt;
#include &lt;QMessageBox&gt;
#include &lt;QTextStream&gt;
#include &lt;QWebChannel&gt;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui-&gt;setupUi(this);
    ui-&gt;editor-&gt;setFont(QFontDatabase::systemFont(QFontDatabase::FixedFont));
    ui-&gt;preview-&gt;setContextMenuPolicy(Qt::NoContextMenu);

    PreviewPage *page = new PreviewPage(this);
    ui-&gt;preview-&gt;setPage(page);

    connect(ui-&gt;editor, &amp;QPlainTextEdit::textChanged,
            [this]() { m_content.setText(ui-&gt;editor-&gt;toPlainText()); });

    QWebChannel *channel = new QWebChannel(this);
    channel-&gt;registerObject(QStringLiteral(&quot;content&quot;), &amp;m_content);
    page-&gt;setWebChannel(channel);

    ui-&gt;preview-&gt;setUrl(QUrl(&quot;qrc:/index.html&quot;));

    connect(ui-&gt;actionNew, &amp;QAction::triggered, this, &amp;MainWindow::onFileNew);
    connect(ui-&gt;actionOpen, &amp;QAction::triggered, this, &amp;MainWindow::onFileOpen);
    connect(ui-&gt;actionSave, &amp;QAction::triggered, this, &amp;MainWindow::onFileSave);
    connect(ui-&gt;actionSaveAs, &amp;QAction::triggered, this, &amp;MainWindow::onFileSaveAs);
    connect(ui-&gt;actionExit, &amp;QAction::triggered, this, &amp;MainWindow::onExit);

    connect(ui-&gt;editor-&gt;document(), &amp;QTextDocument::modificationChanged,
            ui-&gt;actionSave, &amp;QAction::setEnabled);

    QFile defaultTextFile(&quot;:/default.md&quot;);
    defaultTextFile.open(QIODevice::ReadOnly);
    ui-&gt;editor-&gt;setPlainText(defaultTextFile.readAll());
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::openFile(const QString &amp;path)
{
    QFile f(path);
    if (!f.open(QIODevice::ReadOnly)) {
        QMessageBox::warning(this, windowTitle(),
                             tr(&quot;Could not open file %1: %2&quot;).arg(
                                 QDir::toNativeSeparators(path), f.errorString()));
        return;
    }
    m_filePath = path;
    ui-&gt;editor-&gt;setPlainText(f.readAll());
}

bool MainWindow::isModified() const
{
    return ui-&gt;editor-&gt;document()-&gt;isModified();
}

void MainWindow::onFileNew()
{
    if (isModified()) {
        QMessageBox::StandardButton button = QMessageBox::question(this, windowTitle(),
                             tr(&quot;You have unsaved changes. Do you want to create a new document anyway?&quot;));
        if (button != QMessageBox::Yes)
            return;
    }

    m_filePath.clear();
    ui-&gt;editor-&gt;setPlainText(tr(&quot;## New document&quot;));
    ui-&gt;editor-&gt;document()-&gt;setModified(false);
}

void MainWindow::onFileOpen()
{
    if (isModified()) {
        QMessageBox::StandardButton button = QMessageBox::question(this, windowTitle(),
                             tr(&quot;You have unsaved changes. Do you want to open a new document anyway?&quot;));
        if (button != QMessageBox::Yes)
            return;
    }

    QString path = QFileDialog::getOpenFileName(this,
        tr(&quot;Open MarkDown File&quot;), &quot;&quot;, tr(&quot;MarkDown File (*.md)&quot;));
    if (path.isEmpty())
        return;

    openFile(path);
}

void MainWindow::onFileSave()
{
    if (m_filePath.isEmpty()) {
        onFileSaveAs();
        return;
    }

    QFile f(m_filePath);
    if (!f.open(QIODevice::WriteOnly | QIODevice::Text))  {
        QMessageBox::warning(this, windowTitle(),
                             tr(&quot;Could not write to file %1: %2&quot;).arg(
                                 QDir::toNativeSeparators(m_filePath), f.errorString()));
        return;
    }
    QTextStream str(&amp;f);
    str &lt;&lt; ui-&gt;editor-&gt;toPlainText();

    ui-&gt;editor-&gt;document()-&gt;setModified(false);
}

void MainWindow::onFileSaveAs()
{
    QString path = QFileDialog::getSaveFileName(this,
        tr(&quot;Save MarkDown File&quot;), &quot;&quot;, tr(&quot;MarkDown File (*.md, *.markdown)&quot;));
    if (path.isEmpty())
        return;
    m_filePath = path;
    onFileSave();
}

void MainWindow::onExit()
{
    if (isModified()) {
        QMessageBox::StandardButton button = QMessageBox::question(this, windowTitle(),
                             tr(&quot;You have unsaved changes. Do you want to exit anyway?&quot;));
        if (button != QMessageBox::Yes)
            return;
    }
    close();
}

</db:programlisting>
</db:article>
