<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chapter 3: Simulating GUI Events</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial2-example.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Chapter 2"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial4-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Chapter 4"/></db:extendedlink>
<db:abstract>
<db:para>How to simulate GUI events.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Test features some mechanisms to test graphical user interfaces. Instead of simulating native window system events, Qt Test sends internal Qt events. That means there are no side-effects on the machine the tests are running on.</db:para>
<db:para>This chapter demonstrates how to write a simple GUI test.</db:para>
<db:section xml:id="writing-a-gui-test">
<db:title>Writing a GUI Test</db:title>
<db:para>This time, let's assume you want to test the behavior of our <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> class. As before, you will need a class that contains your test function:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtWidgets&amp;gt;
#include &amp;lt;QTest&amp;gt;

class TestGui: public QObject
{
    Q_OBJECT

private slots:
    void testGui();

};
</db:programlisting>
<db:para>The only difference is that you need to include the Qt GUI class definitions in addition to the <db:link xlink:href="qtest.xml">QTest</db:link> namespace.</db:para>
<db:programlisting language="cpp">void TestGui::testGui()
{
    QLineEdit lineEdit;

    QTest::keyClicks(&amp;amp;lineEdit, &quot;hello world&quot;);

    QCOMPARE(lineEdit.text(), QString(&quot;hello world&quot;));
}
</db:programlisting>
<db:para>In the implementation of the test function, we first create a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>. Then, we simulate writing &quot;hello world&quot; in the line edit using the <db:link xlink:href="qtest.xml#keyClicks">QTest::keyClicks</db:link>() function.</db:para>
<db:note>
<db:para>The widget must also be shown in order to correctly test keyboard shortcuts.</db:para>
</db:note>
<db:para><db:link xlink:href="qtest.xml#keyClicks">QTest::keyClicks</db:link>() simulates clicking a sequence of keys on a widget. Optionally, a keyboard modifier can be specified as well as a delay (in milliseconds) of the test after each key click. In a similar way, you can use the <db:link xlink:href="qtest.xml#keyClick">QTest::keyClick</db:link>(), <db:link xlink:href="qtest.xml#keyPress">QTest::keyPress</db:link>(), <db:link xlink:href="qtest.xml#keyRelease">QTest::keyRelease</db:link>(), <db:link xlink:href="qtest.xml#mouseClick">QTest::mouseClick</db:link>(), <db:link xlink:href="qtest.xml#mouseDClick">QTest::mouseDClick</db:link>(), <db:link xlink:href="qtest.xml#mouseMove">QTest::mouseMove</db:link>(), <db:link xlink:href="qtest.xml#mousePress">QTest::mousePress</db:link>() and <db:link xlink:href="qtest.xml#mouseRelease">QTest::mouseRelease</db:link>() functions to simulate the associated GUI events.</db:para>
<db:para>Finally, we use the <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() macro to check if the line edit's text is as expected.</db:para>
</db:section>
<db:section xml:id="preparing-the-stand-alone-executable">
<db:title>Preparing the Stand-Alone Executable</db:title>
<db:para>As before, to make our test case a stand-alone executable, the following two lines are needed:</db:para>
<db:programlisting language="cpp">QTEST_MAIN(TestGui)
#include &quot;testgui.moc&quot;
</db:programlisting>
<db:para>The <db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>() macro expands to a simple main() method that runs all the test functions, and since both the declaration and the implementation of our test class are in a .cpp file, we also need to include the generated moc file to make Qt's introspection work.</db:para>
</db:section>
<db:section xml:id="building-the-executable">
<db:title>Building the Executable</db:title>
<db:para>You can build the test case executable using CMake or qmake.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Configure your build settings in your CMakeLists.txt file:</db:para>
<db:programlisting language="cpp"># Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: BSD-3-Clause

cmake_minimum_required(VERSION 3.16)
project(tutorial3 LANGUAGES CXX)

if(NOT DEFINED INSTALL_EXAMPLESDIR)
    set(INSTALL_EXAMPLESDIR &quot;examples&quot;)
endif()

set(INSTALL_EXAMPLEDIR &quot;${INSTALL_EXAMPLESDIR}/qtestlib/tutorial3&quot;)

find_package(Qt6 REQUIRED COMPONENTS Core Gui Test Widgets)

qt_standard_project_setup()

qt_add_executable(tutorial3
    testgui.cpp
)

set_target_properties(tutorial3 PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
)

target_link_libraries(tutorial3 PRIVATE
    Qt6::Core
    Qt6::Gui
    Qt6::Test
    Qt6::Widgets
)

install(TARGETS tutorial3
    RUNTIME DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    BUNDLE DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    LIBRARY DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
)
</db:programlisting>
<db:para>Next, from the command line, run either <db:code>cmake</db:code> or use the <db:code>qt-cmake</db:code> convenience script located in <db:code>Qt-prefix/&lt;version&gt;/&lt;platform&gt;/bin/qt-cmake</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;Qt-prefix&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;platform&amp;gt;/bin/qt-cmake &amp;lt;source-dir&amp;gt; &amp;lt;build-dir&amp;gt; -G Ninja
</db:programlisting>
<db:para>Then, run your preferred generator tool to build the executable. Here, we're using Ninja:</db:para>
<db:programlisting language="cpp" role="bad">ninja
</db:programlisting>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>Configure your build settings in your <db:code>.pro</db:code> file:</db:para>
<db:programlisting language="cpp">QT += widgets testlib

SOURCES = testgui.cpp

# install
target.path = $$[QT_INSTALL_EXAMPLES]/qtestlib/tutorial3
INSTALLS += target
</db:programlisting>
<db:para>Next, run <db:code>qmake</db:code>, and, finally, run <db:code>make</db:code> to build your executable:</db:para>
<db:programlisting language="cpp" role="bad">qmake
make
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="running-the-executable">
<db:title>Running the Executable</db:title>
<db:para>Running the resulting executable should give you the following output:</db:para>
<db:programlisting language="cpp">********* Start testing of TestGui *********
Config: Using QtTest library %VERSION%, Qt %VERSION%
PASS   : TestGui::initTestCase()
PASS   : TestGui::testGui()
PASS   : TestGui::cleanupTestCase()
Totals: 3 passed, 0 failed, 0 skipped, 0 blacklisted, 20ms
********* Finished testing of TestGui **
</db:programlisting>
</db:section>
</db:article>
