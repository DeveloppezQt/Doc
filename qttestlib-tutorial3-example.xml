<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chapter 3: Simulating GUI Events</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial2-example.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Chapter 2"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial4-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Chapter 4"/></db:extendedlink>
<db:abstract>
<db:para>Howe to simulate GUI events.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{Qt Test Tutorial}{Contents}</db:para>
<db:para>Qt Test features some mechanisms to test graphical user interfaces. Instead of simulating native window system events, Qt Test sends internal Qt events. That means there are no side-effects on the machine the tests are running on.</db:para>
<db:para>In this chapter we will see how to write a simple GUI test.</db:para>
<db:section xml:id="writing-a-gui-test">
<db:title>Writing a GUI Test</db:title>
<db:para>This time, let's assume you want to test the behavior of our QLineEdit class. As before, you will need a class that contains your test function:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtWidgets&amp;gt;
#include &amp;lt;QtTest/QtTest&amp;gt;

class TestGui: public QObject
{
    Q_OBJECT

private slots:
    void testGui();

};
</db:programlisting>
<db:para>The only difference is that you need to include the Qt GUI class definitions in addition to the <db:link xlink:href="qtest.xml">QTest</db:link> namespace.</db:para>
<db:programlisting language="cpp">void TestGui::testGui()
{
    QLineEdit lineEdit;

    QTest::keyClicks(&amp;amp;lineEdit, &quot;hello world&quot;);

    QCOMPARE(lineEdit.text(), QString(&quot;hello world&quot;));
}
</db:programlisting>
<db:para>In the implementation of the test function we first create a QLineEdit. Then we simulate writing &quot;hello world&quot; in the line edit using the <db:link xlink:href="qtest.xml#keyClicks">QTest::keyClicks</db:link>() function.</db:para>
<db:note>
<db:para>The widget must also be shown in order to correctly test keyboard shortcuts.</db:para>
</db:note>
<db:para><db:link xlink:href="qtest.xml#keyClicks">QTest::keyClicks</db:link>() simulates clicking a sequence of keys on a widget. Optionally, a keyboard modifier can be specified as well as a delay (in milliseconds) of the test after each key click. In a similar way, you can use the <db:link xlink:href="qtest.xml#keyClick">QTest::keyClick</db:link>(), <db:link xlink:href="qtest.xml#keyPress">QTest::keyPress</db:link>(), <db:link xlink:href="qtest.xml#keyRelease">QTest::keyRelease</db:link>(), <db:link xlink:href="qtest.xml#mouseClick">QTest::mouseClick</db:link>(), <db:link xlink:href="qtest.xml#mouseDClick">QTest::mouseDClick</db:link>(), <db:link xlink:href="qtest.xml#mouseMove">QTest::mouseMove</db:link>(), <db:link xlink:href="qtest.xml#mousePress">QTest::mousePress</db:link>() and <db:link xlink:href="qtest.xml#mouseRelease">QTest::mouseRelease</db:link>() functions to simulate the associated GUI events.</db:para>
<db:para>Finally, we use the <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() macro to check if the line edit's text is as expected.</db:para>
<db:para>As before, to make our test case a stand-alone executable, the following two lines are needed:</db:para>
<db:programlisting language="cpp">QTEST_MAIN(TestGui)
#include &quot;testgui.moc&quot;
</db:programlisting>
<db:para>The <db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>() macro expands to a simple main() method that runs all the test functions, and since both the declaration and the implementation of our test class are in a .cpp file, we also need to include the generated moc file to make Qt's introspection work.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/qtestlib/tutorial3?h=5.14">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
