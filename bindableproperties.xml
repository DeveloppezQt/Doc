<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Bindable Properties</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's bindable properties.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides bindable properties. Bindable properties are properties which either have a value or are specified using any C++ function, typically a C++ lambda expression. In case they are specified using a C++ function, they are updated automatically whenever their dependencies change.</db:para>
<db:para>Bindable properties are implemented in the class <db:link xlink:href="qproperty.xml">QProperty</db:link>, which consists the data object and a pointer to a management data structure, and in class <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link>, which consists only of the data object and uses the encapsulating <db:link xlink:href="qobject.xml">QObject</db:link> to store the pointer to the management data structure.</db:para>
<db:section xml:id="introductory-example">
<db:title>Introductory Example</db:title>
<db:para>The binding expression computes the value by reading other <db:link xlink:href="qproperty.xml">QProperty</db:link> values. Behind the scenes this dependency is tracked. Whenever a change in any property's dependency is detected, the binding expression is re-evaluated and the new result is applied to the property. This happens lazily, by marking the binding as dirty and evaluating it only when the property's value is requested. For example:</db:para>
<db:programlisting language="cpp">QProperty&amp;lt;QString&amp;gt; firstname(&quot;John&quot;);
QProperty&amp;lt;QString&amp;gt; lastname(&quot;Smith&quot;);
QProperty&amp;lt;int&amp;gt; age(41);

QProperty&amp;lt;QString&amp;gt; fullname;
fullname.setBinding([&amp;amp;]() { return firstname.value() + &quot; &quot; + lastname.value() + &quot; age: &quot; + QString::number(age.value()); });

qDebug() &amp;lt;&amp;lt; fullname.value(); // Prints &quot;John Smith age: 41&quot;

firstname = &quot;Emma&quot;; // Marks binding expression as dirty

qDebug() &amp;lt;&amp;lt; fullname.value(); // Re-evaluates the binding expression and prints &quot;Emma Smith age: 41&quot;

// Birthday is coming up
age.setValue(age.value() + 1);

qDebug() &amp;lt;&amp;lt; fullname.value(); // Re-evaluates the binding expression and prints &quot;Emma Smith age: 42&quot;
</db:programlisting>
<db:para>When a new value is assigned to the firstname property, the binding expression for fullname is marked as dirty. So when the last qDebug() statement tries to read the name value of the fullname property, the expression is evaluated again, firstname() will be called again and return the new value.</db:para>
<db:para>Since bindings are C++ functions, they may do anything that's possible in C++. This includes calling other functions. If those functions access values held by <db:link xlink:href="qproperty.xml">QProperty</db:link>, they automatically become dependencies to the binding.</db:para>
<db:para>Binding expressions may use properties of any type, so in the above example the age is an integer and folded into the string value using conversion to integer, but the dependency is fully tracked.</db:para>
</db:section>
<db:section xml:id="tracking-bindable-properties">
<db:title>Tracking Bindable Properties</db:title>
<db:para>Sometimes the relationships between properties cannot be expressed using bindings. Instead you may need to run custom code whenever the value of a property changes and instead of assigning the value to another property, pass it to other parts of your application. For example writing data into a network socket or printing debug output. <db:link xlink:href="qproperty.xml">QProperty</db:link> provides two mechanisms for tracking.</db:para>
<db:para>You can register for a callback function to be called whenever the value of a property changes, by using onValueChanged(). If you want the callback to also be called for the current value of the property, register your callback using subscribe() instead.</db:para>
</db:section>
</db:article>
