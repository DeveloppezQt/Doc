<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Q3DScene Class</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="q3dscene.xml">Q3DScene</db:link> class provides description of the 3D scene being visualized.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.0.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Q3DScene</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DataVisualization)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DataVisualization)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += datavisualization</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtdatavisualization-scene3d.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The 3D scene contains a single active camera and a single active light source. Visualized data is assumed to be at a fixed location.</db:para>
<db:para>The 3D scene also keeps track of the viewport in which visualization rendering is done, the primary subviewport inside the viewport where the main 3D data visualization view resides and the secondary subviewport where the 2D sliced view of the data resides. The subviewports are by default resized by the <db:code role="parameter">Q3DScene</db:code>. To override the resize behavior you need to listen to both <db:link xlink:href="q3dscene.xml#viewport-prop">viewportChanged</db:link>() and <db:link xlink:href="q3dscene.xml#slicingActive-prop">slicingActiveChanged</db:link>() signals and recalculate the subviewports accordingly.</db:para>
<db:para>Also the scene has flag for tracking if the secondary 2D slicing view is currently active or not.</db:para>
<db:note>
<db:para>Not all visualizations support the secondary 2D slicing view.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activeCamera-prop">
<db:title>activeCamera : Q3DCamera*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Q3DCamera*</db:type>
<db:varname>activeCamera</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activeCamera</db:synopsisinfo>
<db:synopsisinfo role="setter">setActiveCamera</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeCameraChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the currently active camera in the 3D scene.</db:para>
<db:para>When a new <db:link xlink:href="q3dcamera.xml">Q3DCamera</db:link> object is set, it is automatically added as child of the scene.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="q3dcamera.xml">Q3DCamera</db:link></db:type> *<db:emphasis role="bold">activeCamera</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setActiveCamera</db:emphasis>(<db:type><db:link xlink:href="q3dcamera.xml">Q3DCamera</db:link></db:type> *<db:emphasis>camera</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">activeCameraChanged</db:emphasis>(<db:type><db:link xlink:href="q3dcamera.xml">Q3DCamera</db:link></db:type> *<db:emphasis>camera</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="activeLight-prop">
<db:title>activeLight : Q3DLight*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Q3DLight*</db:type>
<db:varname>activeLight</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activeLight</db:synopsisinfo>
<db:synopsisinfo role="setter">setActiveLight</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeLightChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the currently active light in the 3D scene.</db:para>
<db:para>When a new <db:link xlink:href="q3dlight.xml">Q3DLight</db:link> objects is set, it is automatically added as child of the scene.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="q3dlight.xml">Q3DLight</db:link></db:type> *<db:emphasis role="bold">activeLight</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setActiveLight</db:emphasis>(<db:type><db:link xlink:href="q3dlight.xml">Q3DLight</db:link></db:type> *<db:emphasis>light</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">activeLightChanged</db:emphasis>(<db:type><db:link xlink:href="q3dlight.xml">Q3DLight</db:link></db:type> *<db:emphasis>light</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="devicePixelRatio-prop">
<db:title>devicePixelRatio : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>devicePixelRatio</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">devicePixelRatio</db:synopsisinfo>
<db:synopsisinfo role="setter">setDevicePixelRatio</db:synopsisinfo>
<db:synopsisinfo role="notifier">devicePixelRatioChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the device pixel ratio that is used when mapping input coordinates to pixel coordinates.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">devicePixelRatio</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDevicePixelRatio</db:emphasis>(<db:type>float</db:type> <db:emphasis>pixelRatio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">devicePixelRatioChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>pixelRatio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="graphPositionQuery-prop">
<db:title>graphPositionQuery : QPoint</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPoint</db:type>
<db:varname>graphPositionQuery</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">graphPositionQuery</db:synopsisinfo>
<db:synopsisinfo role="setter">setGraphPositionQuery</db:synopsisinfo>
<db:synopsisinfo role="notifier">graphPositionQueryChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the coordinates for the user input that should be processed by the scene as a graph position query.</db:para>
<db:para>If this property is set to a value other than <db:link xlink:href="q3dscene.xml#invalidSelectionPoint">invalidSelectionPoint</db:link>(), the graph tries to match a graph position to the specified coordinates within the primary viewport. After the rendering pass, this property is returned to its default state of <db:link xlink:href="q3dscene.xml#invalidSelectionPoint">invalidSelectionPoint</db:link>(). The queried graph position can be read from the <db:link xlink:href="qabstract3dgraph.xml#queriedGraphPosition-prop">QAbstract3DGraph::queriedGraphPosition</db:link> property after the next render pass.</db:para>
<db:para>There is no single correct 3D coordinate to match a particular screen position, so to be consistent, the queries are always done against the inner sides of an invisible box surrounding the graph.</db:para>
<db:note>
<db:para>Bar graphs allow graph position queries only at the graph floor level.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpoint.xml">QPoint</db:link></db:type> <db:emphasis role="bold">graphPositionQuery</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setGraphPositionQuery</db:emphasis>(const <db:type><db:link xlink:href="qpoint.xml">QPoint</db:link></db:type> &amp;<db:emphasis>point</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">graphPositionQueryChanged</db:emphasis>(const <db:type><db:link xlink:href="qpoint.xml">QPoint</db:link></db:type> &amp;<db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#queriedGraphPosition-prop">QAbstract3DGraph::queriedGraphPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="primarySubViewport-prop">
<db:title>primarySubViewport : QRect</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRect</db:type>
<db:varname>primarySubViewport</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">primarySubViewport</db:synopsisinfo>
<db:synopsisinfo role="setter">setPrimarySubViewport</db:synopsisinfo>
<db:synopsisinfo role="notifier">primarySubViewportChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current subviewport rectangle inside the viewport where the primary view of the data visualization is targeted.</db:para>
<db:para>If <db:link xlink:href="q3dscene.xml#slicingActive-prop">isSlicingActive</db:link>() is <db:code>false</db:code>, the primary sub viewport is equal to <db:link xlink:href="q3dscene.xml#viewport-prop">viewport</db:link>(). If <db:link xlink:href="q3dscene.xml#slicingActive-prop">isSlicingActive</db:link>() is <db:code>true</db:code> and the primary sub viewport has not been explicitly set, it will be one fifth of <db:link xlink:href="q3dscene.xml#viewport-prop">viewport</db:link>().</db:para>
<db:note>
<db:para>Setting primarySubViewport larger than or outside of the viewport resizes the viewport accordingly.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> <db:emphasis role="bold">primarySubViewport</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPrimarySubViewport</db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>primarySubViewport</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">primarySubViewportChanged</db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>subViewport</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="secondarySubViewport-prop">
<db:title>secondarySubViewport : QRect</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRect</db:type>
<db:varname>secondarySubViewport</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">secondarySubViewport</db:synopsisinfo>
<db:synopsisinfo role="setter">setSecondarySubViewport</db:synopsisinfo>
<db:synopsisinfo role="notifier">secondarySubViewportChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the secondary viewport rectangle inside the viewport.</db:para>
<db:para>The secondary viewport is used for drawing the 2D slice view in some visualizations. If it has not been explicitly set, it will be equal to <db:link xlink:href="qrect.xml">QRect</db:link>. If <db:link xlink:href="q3dscene.xml#slicingActive-prop">isSlicingActive</db:link>() is <db:code>true</db:code>, it will be equal to <db:link xlink:href="q3dscene.xml#viewport-prop">viewport</db:link>.</db:para>
<db:note>
<db:para>If the secondary sub viewport is larger than or outside of the viewport, the viewport is resized accordingly.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> <db:emphasis role="bold">secondarySubViewport</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSecondarySubViewport</db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>secondarySubViewport</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">secondarySubViewportChanged</db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>subViewport</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="secondarySubviewOnTop-prop">
<db:title>secondarySubviewOnTop : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>secondarySubviewOnTop</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSecondarySubviewOnTop</db:synopsisinfo>
<db:synopsisinfo role="setter">setSecondarySubviewOnTop</db:synopsisinfo>
<db:synopsisinfo role="notifier">secondarySubviewOnTopChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the 2D slicing view or the 3D view is drawn on top.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSecondarySubviewOnTop</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSecondarySubviewOnTop</db:emphasis>(<db:type>bool</db:type> <db:emphasis>isSecondaryOnTop</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">secondarySubviewOnTopChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>isSecondaryOnTop</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectionQueryPosition-prop">
<db:title>selectionQueryPosition : QPoint</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPoint</db:type>
<db:varname>selectionQueryPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectionQueryPosition</db:synopsisinfo>
<db:synopsisinfo role="setter">setSelectionQueryPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">selectionQueryPositionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the coordinates for the user input that should be processed by the scene as a selection.</db:para>
<db:para>If this property is set to a value other than <db:link xlink:href="q3dscene.xml#invalidSelectionPoint">invalidSelectionPoint</db:link>(), the graph tries to select a data item, axis label, or a custom item at the specified coordinates within the primary viewport. After the rendering pass, the property is returned to its default state of <db:link xlink:href="q3dscene.xml#invalidSelectionPoint">invalidSelectionPoint</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpoint.xml">QPoint</db:link></db:type> <db:emphasis role="bold">selectionQueryPosition</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSelectionQueryPosition</db:emphasis>(const <db:type><db:link xlink:href="qpoint.xml">QPoint</db:link></db:type> &amp;<db:emphasis>point</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">selectionQueryPositionChanged</db:emphasis>(const <db:type><db:link xlink:href="qpoint.xml">QPoint</db:link></db:type> &amp;<db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#selectedElement-prop">QAbstract3DGraph::selectedElement</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="slicingActive-prop">
<db:title>slicingActive : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>slicingActive</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSlicingActive</db:synopsisinfo>
<db:synopsisinfo role="setter">setSlicingActive</db:synopsisinfo>
<db:synopsisinfo role="notifier">slicingActiveChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the 2D slicing view is currently active.</db:para>
<db:para>If <db:code>true</db:code>, <db:link xlink:href="qabstract3dgraph.xml#selectionMode-prop">QAbstract3DGraph::selectionMode</db:link> must have either <db:link xlink:href="qabstract3dgraph.xml#SelectionFlag-enum">QAbstract3DGraph::SelectionRow</db:link> or <db:link xlink:href="qabstract3dgraph.xml#SelectionFlag-enum">QAbstract3DGraph::SelectionColumn</db:link> set to a valid selection.</db:para>
<db:note>
<db:para>Not all visualizations support the 2D slicing view.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSlicingActive</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSlicingActive</db:emphasis>(<db:type>bool</db:type> <db:emphasis>isSlicing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">slicingActiveChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>isSlicingActive</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewport-prop">
<db:title>[read-only] viewport : const QRect</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRect</db:type>
<db:varname>viewport</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">viewport</db:synopsisinfo>
<db:synopsisinfo role="notifier">viewportChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a read only property that contains the current viewport rectangle where all the 3D rendering is targeted.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> <db:emphasis role="bold">viewport</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">viewportChanged</db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>viewport</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="Q3DScene">
<db:title>[explicit] Q3DScene::Q3DScene(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>Q3DScene</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">Q3DScene(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a basic scene with one light and one camera in it. An optional <db:code role="parameter">parent</db:code> parameter can be given and is then passed to <db:link xlink:href="qobject.xml">QObject</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="dtor.Q3DScene">
<db:title>[virtual] Q3DScene::~Q3DScene()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~Q3DScene</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~Q3DScene()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the 3D scene and all the objects contained within it.</db:para>
</db:section>
<db:section xml:id="invalidSelectionPoint">
<db:title>[static] QPoint Q3DScene::invalidSelectionPoint()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>invalidSelectionPoint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint invalidSelectionPoint()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qpoint.xml">QPoint</db:link> signifying an invalid selection position.</db:para>
</db:section>
<db:section xml:id="isPointInPrimarySubView">
<db:title>bool Q3DScene::isPointInPrimarySubView(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isPointInPrimarySubView</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isPointInPrimarySubView(const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the given <db:code role="parameter">point</db:code> resides inside the primary subview or not. Returns <db:code>true</db:code> if the point is inside the primary subview.</db:para>
<db:note>
<db:para>If subviews are superimposed, and the given <db:code role="parameter">point</db:code> resides inside both, result is <db:code>true</db:code> only when the primary subview is on top.</db:para>
</db:note>
</db:section>
<db:section xml:id="isPointInSecondarySubView">
<db:title>bool Q3DScene::isPointInSecondarySubView(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isPointInSecondarySubView</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isPointInSecondarySubView(const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the given <db:code role="parameter">point</db:code> resides inside the secondary subview or not. Returns <db:code>true</db:code> if the point is inside the secondary subview.</db:para>
<db:note>
<db:para>If subviews are superimposed, and the given <db:code role="parameter">point</db:code> resides inside both, result is <db:code>true</db:code> only when the secondary subview is on top.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
