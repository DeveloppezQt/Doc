<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUntypedBindable Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> is a uniform interface over bindable properties like QProperty\&lt;T\&gt; and QObjectBindableProperty of any type T.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUntypedBindable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qbindable.xml" xlink:role="class">QBindable</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QUntypedBindable is part of <db:simplelist><db:member>tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> is a fully type-erased generic interface to wrap bindable properties. You can use it to interact with properties without knowing their type nor caring what kind of bindable property they are (e.g. <db:link xlink:href="qproperty.xml">QProperty</db:link> or <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link>). For most use cases, using <db:link xlink:href="qbindable.xml">QBindable</db:link>&lt;T&gt; (which is generic over the property implementation but has a fixed type) should be preferred.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUntypedBindable-3">
<db:title>[constexpr] QUntypedBindable::QUntypedBindable()</db:title>
<db:constructorsynopsis>
<db:methodname>QUntypedBindable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QUntypedBindable()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Default-constructs a <db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link>. It is in an invalid state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quntypedbindable.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUntypedBindable-4">
<db:title>QUntypedBindable::QUntypedBindable(Property *<db:emphasis>property</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUntypedBindable</db:methodname>
<db:methodparam>
<db:type>Property *</db:type>
<db:parameter>property</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QUntypedBindable(Property *property)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> from the property <db:code role="parameter">property</db:code>. If Property is const, the <db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> will be read only. If <db:code role="parameter">property</db:code> is null, the <db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> will be invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quntypedbindable.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#isReadOnly">isReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addNotifier">
<db:title>QPropertyNotifier QUntypedBindable::addNotifier(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyNotifier</db:type>
<db:methodname>addNotifier</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyNotifier addNotifier(Functor f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Installs <db:code role="parameter">f</db:code> as a change handler. Whenever the underlying property changes, <db:code role="parameter">f</db:code> will be called, as long as the returned QPropertyNotifier and the property are kept alive.</db:para>
<db:para>This method is in some cases easier to use than <db:link xlink:href="quntypedbindable.xml#onValueChanged">onValueChanged</db:link>(), as the returned object is not a template. It can therefore more easily be stored, e.g. as a member in a class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quntypedbindable.xml#onValueChanged">onValueChanged</db:link>()</db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#subscribe">subscribe</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="binding">
<db:title>QUntypedPropertyBinding QUntypedBindable::binding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUntypedPropertyBinding</db:type>
<db:methodname>binding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUntypedPropertyBinding binding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the underlying property's binding if there is any, or a default constructed QUntypedPropertyBinding otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quntypedbindable.xml#setBinding">setBinding</db:link>()</db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#hasBinding">hasBinding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasBinding">
<db:title>bool QUntypedBindable::hasBinding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasBinding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasBinding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the underlying property has a binding.</db:para>
</db:section>
<db:section xml:id="isReadOnly">
<db:title>[since 6.1] bool QUntypedBindable::isReadOnly() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReadOnly</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReadOnly() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> is read-only.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QUntypedBindable::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> is valid. Methods called on an invalid <db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> generally have no effect, unless otherwise noted.</db:para>
</db:section>
<db:section xml:id="makeBinding">
<db:title>QUntypedPropertyBinding QUntypedBindable::makeBinding(const QPropertyBindingSourceLocation &amp;<db:emphasis>location</db:emphasis> = QT_PROPERTY_DEFAULT_BINDING_LOCATION) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUntypedPropertyBinding</db:type>
<db:methodname>makeBinding</db:methodname>
<db:methodparam>
<db:type>const QPropertyBindingSourceLocation &amp;</db:type>
<db:parameter>location</db:parameter>
<db:initializer>QT_PROPERTY_DEFAULT_BINDING_LOCATION</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUntypedPropertyBinding makeBinding(const QPropertyBindingSourceLocation &amp;location) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a binding returning the underlying properties' value, using a specified source <db:code role="parameter">location</db:code>.</db:para>
</db:section>
<db:section xml:id="metaType">
<db:title>[since 6.2] QMetaType QUntypedBindable::metaType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaType</db:type>
<db:methodname>metaType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaType metaType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the metatype of the property from which the <db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> was created. If the bindable is invalid, an invalid metatype will be returned.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quntypedbindable.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onValueChanged">
<db:title>QPropertyChangeHandler&lt;Functor&gt; QUntypedBindable::onValueChanged(Functor <db:emphasis>f</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPropertyChangeHandler&lt;Functor&gt;</db:type>
<db:methodname>onValueChanged</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyChangeHandler&lt;Functor&gt; onValueChanged(Functor f) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Installs <db:code role="parameter">f</db:code> as a change handler. Whenever the underlying property changes, <db:code role="parameter">f</db:code> will be called, as long as the returned QPropertyChangeHandler and the property are kept alive. On each value change, the handler is either called immediately, or deferred, depending on the context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>onValueChanged()</db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#subscribe">subscribe</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBinding">
<db:title>bool QUntypedBindable::setBinding(const QUntypedPropertyBinding &amp;<db:emphasis>binding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setBinding</db:methodname>
<db:methodparam>
<db:type>const QUntypedPropertyBinding &amp;</db:type>
<db:parameter>binding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setBinding(const QUntypedPropertyBinding &amp;binding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the underlying property's binding to <db:code role="parameter">binding</db:code>. This does not have any effect if the <db:link xlink:href="quntypedbindable.xml">QUntypedBindable</db:link> is read-only, null or if <db:code role="parameter">binding</db:code>'s type does match the underlying property's type.</db:para>
<db:para>Returns true when the binding was successfully set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quntypedbindable.xml#binding">binding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subscribe">
<db:title>QPropertyChangeHandler&lt;Functor&gt; QUntypedBindable::subscribe(Functor <db:emphasis>f</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPropertyChangeHandler&lt;Functor&gt;</db:type>
<db:methodname>subscribe</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyChangeHandler&lt;Functor&gt; subscribe(Functor f) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Behaves like a call to <db:code role="parameter">f</db:code> followed by onValueChanged(f),</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quntypedbindable.xml#onValueChanged">onValueChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeBinding">
<db:title>[since 6.1] QUntypedPropertyBinding QUntypedBindable::takeBinding()</db:title>
<db:methodsynopsis>
<db:type>QUntypedPropertyBinding</db:type>
<db:methodname>takeBinding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUntypedPropertyBinding takeBinding()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the currently set binding from the property and returns it. Returns a default-constructed QUntypedPropertyBinding if no binding is set.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
</db:section>
</db:article>
