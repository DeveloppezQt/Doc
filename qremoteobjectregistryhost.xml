<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRemoteObjectRegistryHost Class</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A (Host/Registry) node on a Qt Remote Objects network.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRemoteObjectRegistryHost</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS RemoteObjects)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::RemoteObjects)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += remoteobjects</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qremoteobjecthostbase.xml" xlink:role="class">QRemoteObjectHostBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link> class provides an entry point to a <db:link xlink:href="qml-qtremoteobjects-qtremoteobjects.xml">QtRemoteObjects</db:link> network. A network can be as simple as two Nodes, or an arbitrarily complex set of processes and devices.</db:para>
<db:para>A <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link> has the same capability that a <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> has (which includes everything a <db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link> supports), and in addition is the owner of the Registry. Any <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> node that connects to this Node will have all of their Source objects made available by the Registry.</db:para>
<db:para>Nodes only support connection to one <db:link xlink:href="qtremoteobjects-registry.xml#registry">registry</db:link>, calling <db:link xlink:href="qremoteobjectnode.xml#registryUrl-prop">QRemoteObjectNode::setRegistryUrl</db:link> when a Registry is already set is considered an error. For something like a secure and insecure network (where different Registries would be applicable), the recommendation is to create separate Nodes to connect to each, in effect creating two independent Qt Remote Objects networks.</db:para>
<db:para>Nodes may connect to each other directly using <db:link xlink:href="qremoteobjectnode.xml#connectToNode">connectToNode</db:link>, or they can use the <db:link xlink:href="qremoteobjectregistry.xml">QRemoteObjectRegistry</db:link> to simplify connections.</db:para>
<db:para>The <db:link xlink:href="qremoteobjectregistry.xml">QRemoteObjectRegistry</db:link> is a special Replica available to every Node that connects to the Registry Url. It knows how to connect to every QRemoteObjectSource object on the network.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link></db:member>
<db:member><db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRemoteObjectRegistryHost">
<db:title>QRemoteObjectRegistryHost::QRemoteObjectRegistryHost(const QUrl &amp;<db:emphasis>registryAddress</db:emphasis> = QUrl(), QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QRemoteObjectRegistryHost</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>registryAddress</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QRemoteObjectRegistryHost(const QUrl &amp;registryAddress, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link> Node with the given <db:code role="parameter">parent</db:code>. RegistryHost Nodes have the same functionality as <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> Nodes, except rather than being able to connect to a <db:link xlink:href="qremoteobjectregistry.xml">QRemoteObjectRegistry</db:link>, the provided Host <db:link xlink:href="qurl.xml">QUrl</db:link> (<db:code role="parameter">registryAddress</db:code>) becomes the address of the registry for other Nodes to connect to.</db:para>
</db:section>
<db:section xml:id="setRegistryUrl">
<db:title>[override virtual] bool QRemoteObjectRegistryHost::setRegistryUrl(const QUrl &amp;<db:emphasis>registryUrl</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setRegistryUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>registryUrl</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setRegistryUrl(const QUrl &amp;registryUrl) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qremoteobjectnode.xml#registryUrl-prop" role="property">QRemoteObjectNode::registryUrl</db:link>.</db:para>
<db:para>This method can be used to set the address of this Node to <db:code role="parameter">registryUrl</db:code> (used for other Nodes to connect to this one), if the <db:link xlink:href="qurl.xml">QUrl</db:link> isn't set in the constructor. Since this Node becomes the Registry, calling this setter method causes this Node to use the url as the host address. All other Node's use the <db:link xlink:href="qremoteobjectnode.xml#registryUrl-prop">QRemoteObjectNode::setRegistryUrl</db:link> method initiate a connection to the Registry.</db:para>
<db:para>Returns <db:code>true</db:code> if the registry address is set, otherwise <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectregistryhost.xml#QRemoteObjectRegistryHost">QRemoteObjectRegistryHost</db:link>()</db:member>
<db:member><db:link xlink:href="qremoteobjectnode.xml#registryUrl-prop">QRemoteObjectNode::setRegistryUrl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
