<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRhiVertexInputBinding Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes a vertex input binding.</db:para>
<db:para>This class was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Specifies the stride (in bytes, must be a multiple of 4), the classification and optionally the instance step rate.</db:para>
<db:para>As an example, assume a vertex shader with the following inputs:</db:para>
<db:programlisting language="cpp" role="bad">layout(location = 0) in vec4 position;
layout(location = 1) in vec2 texcoord;
</db:programlisting>
<db:para>Now let's assume also that 3 component vertex positions <db:code>(x, y, z)</db:code> and 2 component texture coordinates <db:code>(u, v)</db:code> are provided in a non-interleaved format in a buffer (or separate buffers even). Defining two bindings could then be done like this:</db:para>
<db:programlisting language="cpp">QRhiVertexInputLayout inputLayout;
inputLayout.setBindings({
    { 3 * sizeof(float) },
    { 2 * sizeof(float) }
});
</db:programlisting>
<db:para>Only the stride is interesting here since instancing is not used. The binding number is given by the index of the <db:link xlink:href="qrhivertexinputbinding.xml">QRhiVertexInputBinding</db:link> element in the bindings vector of the <db:link xlink:href="qrhivertexinputlayout.xml">QRhiVertexInputLayout</db:link>.</db:para>
<db:para>Once a graphics pipeline with this vertex input layout is bound, the vertex inputs could be set up like the following for drawing a cube with 36 vertices, assuming we have a single buffer with first the positions and then the texture coordinates:</db:para>
<db:programlisting language="cpp">const QRhiCommandBuffer::VertexInput vbufBindings[] = {
    { cubeBuf, 0 },
    { cubeBuf, 36 * 3 * sizeof(float) }
};
cb-&gt;setVertexInput(0, 2, vbufBindings);
</db:programlisting>
<db:para>Note how the index defined by <db:code>startBinding + i</db:code>, where <db:code>i</db:code> is the index in the second argument of <db:link xlink:href="qrhicommandbuffer.xml#setVertexInput">setVertexInput</db:link>(), matches the index of the corresponding entry in the <db:code>bindings</db:code> vector of the <db:link xlink:href="qrhivertexinputlayout.xml">QRhiVertexInputLayout</db:link>.</db:para>
<db:note>
<db:para>the stride must always be a multiple of 4.</db:para>
</db:note>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhicommandbuffer.xml#setVertexInput">QRhiCommandBuffer::setVertexInput</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Classification-enum">
<db:title>enum QRhiVertexInputBinding::Classification</db:title>
<db:para>Describes the input data classification.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhivertexinputbinding.xml">QRhiVertexInputBinding</db:link></db:emphasis>::PerVertex</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Data is per-vertex</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhivertexinputbinding.xml">QRhiVertexInputBinding</db:link></db:emphasis>::PerInstance</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Data is per-instance</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRhiVertexInputBinding">
<db:title>QRhiVertexInputBinding::QRhiVertexInputBinding(quint32 <db:emphasis>stride</db:emphasis>, QRhiVertexInputBinding::Classification <db:emphasis>cls</db:emphasis> = PerVertex, quint32 <db:emphasis>stepRate</db:emphasis> = 1)</db:title>
<db:para>Constructs a vertex input binding description with the specified <db:code role="parameter">stride</db:code>, classification <db:code role="parameter">cls</db:code>, and instance step rate <db:code role="parameter">stepRate</db:code>.</db:para>
<db:note>
<db:para><db:code role="parameter">stepRate</db:code> other than 1 is only supported when <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::CustomInstanceStepRate</db:link> is reported to be supported.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
