<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Debugging Techniques</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Here we present some useful hints to help you with debugging your Qt-based software.</db:para>
<db:section xml:id="configuring-qt-for-debugging">
<db:title>Configuring Qt for Debugging</db:title>
<db:para>When <db:link xlink:href="configure-options.xml">configuring</db:link> Qt for installation, it is possible to ensure that it is built to include debug symbols that can make it easier to track bugs in applications and libraries. However, on some platforms, building Qt in debug mode will cause applications to be larger than desirable.</db:para>
<db:section xml:id="debugging-in-macos-and-xcode">
<db:title>Debugging in macOS and Xcode</db:title>
<db:section xml:id="debugging-with-without-frameworks">
<db:title>Debugging With/Without Frameworks</db:title>
<db:para>The basic stuff you need to know about debug libraries and frameworks is found at developer.apple.com in: <db:link xlink:href="http://developer.apple.com/technotes/tn2004/tn2124.html#SECDEBUGLIB">Apple Technical Note TN2124</db:link>.</db:para>
<db:para>When you build Qt, frameworks are built by default, and inside the framework you will find both a release and a debug version (e.g., <db:link xlink:href="qtcore-module.xml">QtCore</db:link> and QtCore_debug). If you pass the <db:code>-no-framework</db:code> flag when you build Qt, two dylibs are built for each Qt library (e.g., libQtCore.4.dylib and libQtCore_debug.4.dylib).</db:para>
<db:para>What happens when you link depends on whether you use frameworks or not. We don't see a compelling reason to recommend one over the other.</db:para>
<db:section xml:id="with-frameworks">
<db:title>With Frameworks:</db:title>
<db:para>Since the release and debug libraries are inside the framework, the app is simply linked against the framework. Then when you run in the debugger, you will get either the release version or the debug version, depending on whether you set <db:code>DYLD_IMAGE_SUFFIX</db:code>. If you don't set it, you get the release version by default (i.e., non _debug). If you set <db:code>DYLD_IMAGE_SUFFIX=_debug</db:code>, you get the debug version.</db:para>
</db:section>
<db:section xml:id="without-frameworks">
<db:title>Without Frameworks:</db:title>
<db:para>When you tell <db:emphasis>qmake</db:emphasis> to generate a Makefile with the debug config, it will link against the _debug version of the libraries and generate debug symbols for the app. Running this program in GDB will then work like running GDB on other platforms, and you will be able to trace inside Qt.</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
<db:section xml:id="command-line-options-recognized-by-qt">
<db:title>Command Line Options Recognized by Qt</db:title>
<db:para>When you run a Qt application, you can specify several command-line options that can help with debugging. These are recognized by <db:link xlink:href="qapplication.xml">QApplication</db:link>.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>-nograb</db:code></db:para>
</db:td>
<db:td>
<db:para>The application should never grab <db:link xlink:href="qwidget.xml#grabMouse">the mouse</db:link> or <db:link xlink:href="qwidget.xml#grabKeyboard">the keyboard</db:link>. This option is set by default when the program is running in the <db:code>gdb</db:code> debugger under Linux.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-dograb</db:code></db:para>
</db:td>
<db:td>
<db:para>Ignore any implicit or explicit <db:code>-nograb</db:code>. <db:code>-dograb</db:code> wins over <db:code>-nograb</db:code> even when <db:code>-nograb</db:code> is last on the command line.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="environment-variables-recognized-by-qt">
<db:title>Environment Variables Recognized by Qt</db:title>
<db:para>At runtime, a Qt application recognizes many environment variables, some of which can be helpful for debugging:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Variable</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>QT_DEBUG_PLUGINS</db:code></db:para>
</db:td>
<db:td>
<db:para>Set to a non-zero value to make Qt print out diagnostic information about the each (C++) plugin it tries to load.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>QML_IMPORT_TRACE</db:code></db:para>
</db:td>
<db:td>
<db:para>Set to a non-zero value to make QML print out diagnostic information from the import loading mechanism.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>QT_HASH_SEED</db:code></db:para>
</db:td>
<db:td>
<db:para>Set to an integer value to disable <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> and <db:link xlink:href="qset.xml">QSet</db:link> using a new random ordering for each application run, which in some cases might make testing and debugging difficult.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="warning-and-debugging-messages">
<db:title>Warning and Debugging Messages</db:title>
<db:para>Qt includes global macros for writing out warning and debug text. You can use them for the following purposes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>() is used for writing custom debug output.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>() is used for informational messages.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>() is used to report warnings and recoverable errors in your application.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>() is used for writing critical error messages and reporting system errors.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>() is used for writing fatal error messages shortly before exiting.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you include the &lt;QtDebug&gt; header file, the <db:code>qDebug()</db:code> macro can also be used as an output stream. For example:</db:para>
<db:programlisting language="cpp">qDebug() &lt;&lt; &quot;Widget&quot; &lt;&lt; widget &lt;&lt; &quot;at position&quot; &lt;&lt; widget-&gt;pos();
</db:programlisting>
<db:para>The Qt implementation of these macros prints to the <db:code>stderr</db:code> output under Unix/X11 and macOS. With Windows, if it is a console application, the text is sent to console; otherwise, it is sent to the debugger.</db:para>
<db:para>By default, only the message is printed. You can include additional information by setting the <db:code>QT_MESSAGE_PATTERN</db:code> environment variable. For example:</db:para>
<db:programlisting language="cpp">QT_MESSAGE_PATTERN=&quot;[%{type}] %{appname} (%{file}:%{line}) - %{message}&quot;
</db:programlisting>
<db:para>The format is documented in <db:link xlink:href="qtglobal.xml#qSetMessagePattern">qSetMessagePattern</db:link>(). You can also install your own message handler using <db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
<db:para>If the <db:code>QT_FATAL_WARNINGS</db:code> environment variable is set, <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>() exits after printing the warning message. This makes it easy to obtain a backtrace in the debugger.</db:para>
<db:para><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>(), and <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>() are debugging tools. They can be compiled away by defining <db:code>QT_NO_DEBUG_OUTPUT</db:code>, <db:code>QT_NO_INFO_OUTPUT</db:code>, or <db:code>QT_NO_WARNING_OUTPUT</db:code> during compilation.</db:para>
<db:para>The debugging functions <db:link xlink:href="qobject.xml#dumpObjectTree">QObject::dumpObjectTree</db:link>() and <db:link xlink:href="qobject.xml#dumpObjectInfo">QObject::dumpObjectInfo</db:link>() are often useful when an application looks or acts strangely. More useful if you use <db:link xlink:href="qobject.xml#objectName-prop">object names</db:link> than not, but often useful even without names.</db:para>
</db:section>
<db:section xml:id="providing-support-for-the-qdebug-stream-operator">
<db:title>Providing Support for the qDebug() Stream Operator</db:title>
<db:para>You can implement the stream operator used by <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>() to provide debugging support for your classes. The class that implements the stream is <db:code>QDebug</db:code>. Use <db:code>QDebugStateSaver</db:code> to temporarily save the formatting options of the stream. Use <db:link xlink:href="qdebug.xml#nospace">nospace</db:link>() and <db:link xlink:href="qtextstream.xml#qtextstream-manipulators">QTextStream manipulators</db:link> to further customize the formatting.</db:para>
<db:para>Here is an example for a class that represents a 2D coordinate.</db:para>
<db:programlisting language="cpp">QDebug operator&lt;&lt;(QDebug dbg, const Coordinate &amp;c)
{
    QDebugStateSaver saver(dbg);
    dbg.nospace() &lt;&lt; &quot;(&quot; &lt;&lt; c.x() &lt;&lt; &quot;, &quot; &lt;&lt; c.y() &lt;&lt; &quot;)&quot;;

    return dbg;
}
</db:programlisting>
<db:para>Integration of custom types with Qt's meta-object system is covered in more depth in the <db:link xlink:href="custom-types.xml">Creating Custom Qt Types</db:link> document.</db:para>
</db:section>
<db:section xml:id="debugging-macros">
<db:title>Debugging Macros</db:title>
<db:para>The header file <db:code>&lt;QtGlobal&gt;</db:code> contains some debugging macros and <db:code>#define</db:code>s.</db:para>
<db:para>Three important macros are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>(cond), where <db:code>cond</db:code> is a boolean expression, writes the warning &quot;ASSERT: '<db:emphasis>cond</db:emphasis>' in file xyz.cpp, line 234&quot; and exits if <db:code>cond</db:code> is false.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtglobal.xml#Q_ASSERT_X">Q_ASSERT_X</db:link>(cond, where, what), where <db:code>cond</db:code> is a boolean expression, <db:code>where</db:code> a location, and <db:code>what</db:code> a message, writes the warning: &quot;ASSERT failure in <db:code>where</db:code>: '<db:code>what</db:code>', file xyz.cpp, line 234&quot; and exits if <db:code>cond</db:code> is false.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtglobal.xml#Q_CHECK_PTR">Q_CHECK_PTR</db:link>(ptr), where <db:code>ptr</db:code> is a pointer. Writes the warning &quot;In file xyz.cpp, line 234: Out of memory&quot; and exits if <db:code>ptr</db:code> is 0.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These macros are useful for detecting program errors, e.g. like this:</db:para>
<db:programlisting language="cpp">char *alloc(int size)
{
    Q_ASSERT(size &gt; 0);
    char *ptr = new char[size];
    Q_CHECK_PTR(ptr);
    return ptr;
}
</db:programlisting>
<db:para><db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>(), <db:link xlink:href="qtglobal.xml#Q_ASSERT_X">Q_ASSERT_X</db:link>(), and <db:link xlink:href="qtglobal.xml#Q_CHECK_PTR">Q_CHECK_PTR</db:link>() expand to nothing if <db:code>QT_NO_DEBUG</db:code> is defined during compilation. For this reason, the arguments to these macro should not have any side-effects. Here is an incorrect usage of <db:link xlink:href="qtglobal.xml#Q_CHECK_PTR">Q_CHECK_PTR</db:link>():</db:para>
<db:programlisting language="cpp">char *alloc(int size)
{
    char *ptr;
    Q_CHECK_PTR(ptr = new char[size]);  // WRONG
    return ptr;
}
</db:programlisting>
<db:para>If this code is compiled with <db:code>QT_NO_DEBUG</db:code> defined, the code in the <db:link xlink:href="qtglobal.xml#Q_CHECK_PTR">Q_CHECK_PTR</db:link>() expression is not executed and <db:emphasis>alloc</db:emphasis> returns an uninitialized pointer.</db:para>
<db:para>The Qt library contains hundreds of internal checks that will print warning messages when a programming error is detected. We therefore recommend that you use a debug version of Qt when developing Qt-based software.</db:para>
</db:section>
<db:section xml:id="common-bugs">
<db:title>Common Bugs</db:title>
<db:para>There is one bug that is so common that it deserves mention here: If you include the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro in a class declaration and run <db:link xlink:href="moc.xml">the meta-object compiler</db:link> (<db:code>moc</db:code>), but forget to link the <db:code>moc</db:code>-generated object code into your executable, you will get very confusing error messages. Any link error complaining about a lack of <db:code>vtbl</db:code>, <db:code>_vtbl</db:code>, <db:code>__vtbl</db:code> or similar is likely to be a result of this problem.</db:para>
</db:section>
</db:article>
