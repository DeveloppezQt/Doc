<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCollator Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcollator.xml">QCollator</db:link> class compares strings according to a localized collation algorithm.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCollator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCollator is part of <db:simplelist><db:member>i18n</db:member><db:member>string-processing</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcollator.xml">QCollator</db:link> is initialized with a <db:link xlink:href="qlocale.xml">QLocale</db:link>. It can then be used to compare and sort strings by using the ordering appropriate for that locale.</db:para>
<db:para>A <db:link xlink:href="qcollator.xml">QCollator</db:link> object can be used together with template-based sorting algorithms, such as std::sort(), to sort a list with <db:link xlink:href="qstring.xml">QString</db:link> entries.</db:para>
<db:programlisting language="cpp">QStringList sortedStrings(QStringList seq)
{
    QCollator order;
    std::sort(seq.begin(), seq.end(), order);
    return seq;
}
</db:programlisting>
<db:para>In addition to the locale, several optional flags can be set that influence the result of the collation.</db:para>
<db:section xml:id="posix-fallback-implementation">
<db:title>POSIX fallback implementation</db:title>
<db:para>On Unix systems, Qt is normally compiled to use ICU (except for macOS, where Qt defaults to using an equivalent Apple API). However, if ICU was not available at compile time or explicitly disabled, Qt will use a fallback backend that uses the POSIX API only. This backend has several limitations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Only the <db:link xlink:href="qlocale.xml#c">QLocale::c</db:link>() and <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>() locales are supported. Consult the POSIX and C Standard Library manuals for the &lt;locale.h&gt; header for more information on the system locale.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcollator.xml#caseSensitivity">caseSensitivity</db:link>() is not supported: only case-sensitive collation can be performed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcollator.xml#numericMode">numericMode</db:link>() and <db:link xlink:href="qcollator.xml#ignorePunctuation">ignorePunctuation</db:link>() are not supported.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The use of any of the unsupported options will cause a warning to be printed to the application's output.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCollator">
<db:title>QCollator::QCollator()</db:title>
<db:para>Constructs a <db:link xlink:href="qcollator.xml">QCollator</db:link> using the default locale's collation locale.</db:para>
<db:para>The system locale, when used as default locale, may have a collation locale other than itself (e.g. on Unix, if LC_COLLATE is set differently to LANG in the environment). All other locales are their own collation locales.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#setLocale">setLocale</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#collation">QLocale::collation</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QCollator-3">
<db:title>[explicit] QCollator::QCollator(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qcollator.xml">QCollator</db:link> using the given <db:code role="parameter">locale</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QCollator-2">
<db:title>QCollator::QCollator(const QCollator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QCollator-1">
<db:title>[noexcept] QCollator::QCollator(QCollator &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move constructor. Moves from <db:code role="parameter">other</db:code> into this collator.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QCollator">
<db:title>[noexcept] QCollator::~QCollator()</db:title>
<db:para>Destroys this collator.</db:para>
</db:section>
<db:section xml:id="caseSensitivity">
<db:title>Qt::CaseSensitivity QCollator::caseSensitivity() const</db:title>
<db:para>Returns case sensitivity of the collator.</db:para>
<db:para>This defaults to case-sensitive until set.</db:para>
<db:note>
<db:para>In the C locale, when case-sensitive, all lower-case letters sort after all upper-case letters, where most locales sort each lower-case letter either immediately before or immediately after its upper-case partner. Thus &quot;Zap&quot; sorts before &quot;ape&quot; in the C locale but after in most others.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#setCaseSensitivity">setCaseSensitivity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare">
<db:title>int QCollator::compare(QStringView <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>) const</db:title>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code>.</db:para>
<db:para>Returns a negative integer if <db:code role="parameter">s1</db:code> is less than <db:code role="parameter">s2</db:code>, a positive integer if it is greater than <db:code role="parameter">s2</db:code>, and zero if they are equal.</db:para>
</db:section>
<db:section xml:id="compare-1">
<db:title>int QCollator::compare(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="compare-2">
<db:title>int QCollator::compare(const QChar *<db:emphasis>s1</db:emphasis>, qsizetype <db:emphasis>len1</db:emphasis>, const QChar *<db:emphasis>s2</db:emphasis>, qsizetype <db:emphasis>len2</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code>. <db:code role="parameter">len1</db:code> and <db:code role="parameter">len2</db:code> specify the lengths of the <db:link xlink:href="qchar.xml">QChar</db:link> arrays pointed to by <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code>.</db:para>
<db:para>Returns a negative integer if <db:code role="parameter">s1</db:code> is less than <db:code role="parameter">s2</db:code>, a positive integer if it is greater than <db:code role="parameter">s2</db:code>, and zero if they are equal.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.4, the length arguments were of type int, not qsizetype.</db:para>
</db:note>
</db:section>
<db:section xml:id="defaultCompare">
<db:title>[static, since 6.3] int QCollator::defaultCompare(QStringView <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Compares the strings <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code>, returning their sorting order. This function performs the same operation as <db:link xlink:href="qcollator.xml#compare">compare</db:link>() on a default-constructed <db:link xlink:href="qcollator.xml">QCollator</db:link> object.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#compare">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qcollator.xml#defaultSortKey">defaultSortKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultSortKey">
<db:title>[static, since 6.3] QCollatorSortKey QCollator::defaultSortKey(QStringView <db:emphasis>key</db:emphasis>)</db:title>
<db:para>Returns the sort key for the string <db:code role="parameter">key</db:code>. This function performs the same operation as <db:link xlink:href="qcollator.xml#sortKey">sortKey</db:link>() on a default-constructed <db:link xlink:href="qcollator.xml">QCollator</db:link> object.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#sortKey">sortKey</db:link>()</db:member>
<db:member><db:link xlink:href="qcollator.xml#defaultCompare">defaultCompare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ignorePunctuation">
<db:title>bool QCollator::ignorePunctuation() const</db:title>
<db:para>Returns whether punctuation and symbols are ignored when collating.</db:para>
<db:para>When true, strings are compared as if all punctuation and symbols were removed from each string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#setIgnorePunctuation">setIgnorePunctuation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="locale">
<db:title>QLocale QCollator::locale() const</db:title>
<db:para>Returns the locale of the collator.</db:para>
<db:para>Unless supplied to the constructor or by calling <db:link xlink:href="qcollator.xml#setLocale">setLocale</db:link>(), the system's default collation locale is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#setLocale">setLocale</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#collation">QLocale::collation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="numericMode">
<db:title>bool QCollator::numericMode() const</db:title>
<db:para>Returns true if numeric sorting is enabled, false otherwise.</db:para>
<db:para>When true, numerals are recognized as numbers and sorted in arithmetic order; for example, 100 sortes after 99. When false, numbers are sorted in lexical order, so that 100 sorts before 99 (because 1 is before 9). By default, this option is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#setNumericMode">setNumericMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCaseSensitivity">
<db:title>void QCollator::setCaseSensitivity(Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>)</db:title>
<db:para>Sets the case-sensitivity of the collator to <db:code role="parameter">cs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#caseSensitivity">caseSensitivity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIgnorePunctuation">
<db:title>void QCollator::setIgnorePunctuation(bool <db:emphasis>on</db:emphasis>)</db:title>
<db:para>Ignores punctuation and symbols if <db:code role="parameter">on</db:code> is true, attends to them if false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#ignorePunctuation">ignorePunctuation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QCollator::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:para>Sets the locale of the collator to <db:code role="parameter">locale</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#locale">locale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNumericMode">
<db:title>void QCollator::setNumericMode(bool <db:emphasis>on</db:emphasis>)</db:title>
<db:para>Enables numeric sorting mode when <db:code role="parameter">on</db:code> is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#numericMode">numericMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortKey">
<db:title>QCollatorSortKey QCollator::sortKey(const QString &amp;<db:emphasis>string</db:emphasis>) const</db:title>
<db:para>Returns a sortKey for <db:code role="parameter">string</db:code>.</db:para>
<db:para>Creating the sort key is usually somewhat slower, than using the <db:link xlink:href="qcollator.xml#compare">compare</db:link>() methods directly. But if the string is compared repeatedly (e.g. when sorting a whole list of strings), it's usually faster to create the sort keys for each string and then sort using the keys.</db:para>
<db:note>
<db:para>Not supported with the C (a.k.a. POSIX) locale on Darwin.</db:para>
</db:note>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QCollator::swap(QCollator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this collator with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-28-29">
<db:title>bool QCollator::operator()(QStringView <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>) const</db:title>
<db:para>A <db:link xlink:href="qcollator.xml">QCollator</db:link> can be used as the comparison function of a sorting algorithm. It returns true if <db:code role="parameter">s1</db:code> sorts before <db:code role="parameter">s2</db:code>, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml#compare">compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-28-29-1">
<db:title>bool QCollator::operator()(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QCollator &amp;QCollator::operator=(QCollator &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qcollator.xml">QCollator</db:link> instance.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QCollator &amp;QCollator::operator=(const QCollator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this collator.</db:para>
</db:section>
</db:section>
</db:article>
