<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGrpcOperation Class</db:title>
<db:productname>QtGrpc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GRPC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgrpcoperation.xml">QGrpcOperation</db:link> class implements common logic to handle communication in Grpc channel.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGrpcOperation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Grpc)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Grpc)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgrpccallreply.xml" xlink:role="class">QGrpcCallReply</db:link> and <db:link xlink:href="qgrpcstream.xml" xlink:role="class">QGrpcStream</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="errorOccurred">
<db:title>void QGrpcOperation::errorOccurred(const QGrpcStatus &amp;<db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>const QGrpcStatus &amp;</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(const QGrpcStatus &amp;status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal indicates the error occurred during serialization.</db:para>
<db:para>This signal is emitted when error with <db:code role="parameter">status</db:code> occurs in channel or during serialization.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractgrpcclient.xml#errorOccurred">QAbstractGrpcClient::errorOccurred</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QGrpcOperation::finished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal indicates the end of communication for this call.</db:para>
<db:para>If signal emitted by stream this means that stream is successfully closed either by client or server.</db:para>
</db:section>
<db:section xml:id="metadata">
<db:title>QGrpcMetadata QGrpcOperation::metadata() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGrpcMetadata</db:type>
<db:methodname>metadata</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGrpcMetadata metadata() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Getter of the metadata received from the channel. For the HTTP2 channels it usually contains the HTTP headers received from the server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgrpcoperation.xml#setMetadata">setMetadata</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>T QGrpcOperation::read() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>read</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T read() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads message from raw byte array stored in <db:link xlink:href="qgrpccallreply.xml">QGrpcCallReply</db:link>.</db:para>
<db:para>Returns a copy of the deserialized message or, on failure, a default-constructed message.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>void QGrpcOperation::setData(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Interface for implementation of <db:link xlink:href="qabstractgrpcchannel.xml">QAbstractGrpcChannel</db:link>.</db:para>
<db:para>Should be used to write raw data from channel to reply <db:code role="parameter">data</db:code> raw data received from channel.</db:para>
</db:section>
<db:section xml:id="setData-1">
<db:title>void QGrpcOperation::setData(QByteArray &amp;&amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(QByteArray &amp;&amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Interface for implementation of <db:link xlink:href="qabstractgrpcchannel.xml">QAbstractGrpcChannel</db:link>.</db:para>
<db:para>Should be used to write raw data from channel to reply <db:code role="parameter">data</db:code> raw data received from channel.</db:para>
</db:section>
<db:section xml:id="setMetadata">
<db:title>void QGrpcOperation::setMetadata(const QGrpcMetadata &amp;<db:emphasis>metadata</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMetadata</db:methodname>
<db:methodparam>
<db:type>const QGrpcMetadata &amp;</db:type>
<db:parameter>metadata</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMetadata(const QGrpcMetadata &amp;metadata)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Interface for implementation of <db:link xlink:href="qabstractgrpcchannel.xml">QAbstractGrpcChannel</db:link>.</db:para>
<db:para>Should be used to write metadata from channel to reply <db:code role="parameter">metadata</db:code> received from channel. For the HTTP2 channels it usually contains the HTTP headers received from the server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgrpcoperation.xml#metadata">metadata</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMetadata-1">
<db:title>void QGrpcOperation::setMetadata(QGrpcMetadata &amp;&amp;<db:emphasis>metadata</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMetadata</db:methodname>
<db:methodparam>
<db:type>QGrpcMetadata &amp;&amp;</db:type>
<db:parameter>metadata</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMetadata(QGrpcMetadata &amp;&amp;metadata)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Interface for implementation of <db:link xlink:href="qabstractgrpcchannel.xml">QAbstractGrpcChannel</db:link>.</db:para>
<db:para>Should be used to write metadata from channel to reply <db:code role="parameter">metadata</db:code> received from channel. For the HTTP2 channels it usually contains the HTTP headers received from the server.</db:para>
</db:section>
</db:section>
</db:article>
