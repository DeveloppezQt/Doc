<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Items Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Adding custom items to a surface graph.</db:para>
<db:para>This documentation was introduced in QtDataVisualization 1.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;customitemgraph.h&quot;

#include &amp;lt;QtDataVisualization/Q3DTheme&amp;gt;
#include &amp;lt;QtDataVisualization/QCustom3DItem&amp;gt;
#include &amp;lt;QtDataVisualization/QCustom3DLabel&amp;gt;
#include &amp;lt;QtGui/QImage&amp;gt;

using namespace QtDataVisualization;

CustomItemGraph::CustomItemGraph(Q3DSurface *surface, QLabel *label)
    : m_graph(surface),
      m_textField(label),
      m_previouslyAnimatedItem(0)
{
    QImage layerOneHMap(&quot;:/maps/layer_1.png&quot;);
    QHeightMapSurfaceDataProxy *layerOneProxy = new QHeightMapSurfaceDataProxy(layerOneHMap);
    QSurface3DSeries *layerOneSeries = new QSurface3DSeries(layerOneProxy);
    layerOneSeries-&amp;gt;setItemLabelFormat(QStringLiteral(&quot;(@xLabel, @zLabel): @yLabel&quot;));
    layerOneProxy-&amp;gt;setValueRanges(34.0f, 40.0f, 18.0f, 24.0f);
    layerOneSeries-&amp;gt;setDrawMode(QSurface3DSeries::DrawSurface);
    layerOneSeries-&amp;gt;setFlatShadingEnabled(false);

    QImage layerTwoHMap(&quot;:/maps/layer_2.png&quot;);
    QHeightMapSurfaceDataProxy *layerTwoProxy = new QHeightMapSurfaceDataProxy(layerTwoHMap);
    QSurface3DSeries *layerTwoSeries = new QSurface3DSeries(layerTwoProxy);
    layerTwoSeries-&amp;gt;setItemLabelFormat(QStringLiteral(&quot;(@xLabel, @zLabel): @yLabel&quot;));
    layerTwoProxy-&amp;gt;setValueRanges(34.0f, 40.0f, 18.0f, 24.0f);
    layerTwoSeries-&amp;gt;setDrawMode(QSurface3DSeries::DrawSurface);
    layerTwoSeries-&amp;gt;setFlatShadingEnabled(false);

    QImage layerThreeHMap(&quot;:/maps/layer_3.png&quot;);
    QHeightMapSurfaceDataProxy *layerThreeProxy = new QHeightMapSurfaceDataProxy(layerThreeHMap);
    QSurface3DSeries *layerThreeSeries = new QSurface3DSeries(layerThreeProxy);
    layerThreeSeries-&amp;gt;setItemLabelFormat(QStringLiteral(&quot;(@xLabel, @zLabel): @yLabel&quot;));
    layerThreeProxy-&amp;gt;setValueRanges(34.0f, 40.0f, 18.0f, 24.0f);
    layerThreeSeries-&amp;gt;setDrawMode(QSurface3DSeries::DrawSurface);
    layerThreeSeries-&amp;gt;setFlatShadingEnabled(false);

    m_graph-&amp;gt;axisX()-&amp;gt;setLabelFormat(&quot;%.1f N&quot;);
    m_graph-&amp;gt;axisZ()-&amp;gt;setLabelFormat(&quot;%.1f E&quot;);
    m_graph-&amp;gt;axisX()-&amp;gt;setRange(34.0f, 40.0f);
    m_graph-&amp;gt;axisY()-&amp;gt;setRange(0.0f, 200.0f);
    m_graph-&amp;gt;axisZ()-&amp;gt;setRange(18.0f, 24.0f);

    m_graph-&amp;gt;axisX()-&amp;gt;setTitle(QStringLiteral(&quot;Latitude&quot;));
    m_graph-&amp;gt;axisY()-&amp;gt;setTitle(QStringLiteral(&quot;Height&quot;));
    m_graph-&amp;gt;axisZ()-&amp;gt;setTitle(QStringLiteral(&quot;Longitude&quot;));

    m_graph-&amp;gt;addSeries(layerOneSeries);
    m_graph-&amp;gt;addSeries(layerTwoSeries);
    m_graph-&amp;gt;addSeries(layerThreeSeries);

    QLinearGradient grOne;
    grOne.setColorAt(0.0, Qt::black);
    grOne.setColorAt(0.38, Qt::darkYellow);
    grOne.setColorAt(0.39, Qt::darkGreen);
    grOne.setColorAt(0.5, Qt::darkGray);
    grOne.setColorAt(1.0, Qt::gray);
    m_graph-&amp;gt;seriesList().at(0)-&amp;gt;setBaseGradient(grOne);
    m_graph-&amp;gt;seriesList().at(0)-&amp;gt;setColorStyle(Q3DTheme::ColorStyleRangeGradient);

    QLinearGradient grTwo;
    grTwo.setColorAt(0.385, Qt::blue);
    grTwo.setColorAt(0.395, Qt::white);
    m_graph-&amp;gt;seriesList().at(1)-&amp;gt;setBaseGradient(grTwo);
    m_graph-&amp;gt;seriesList().at(1)-&amp;gt;setColorStyle(Q3DTheme::ColorStyleRangeGradient);

    QLinearGradient grThree;
    grThree.setColorAt(0.0, Qt::white);
    grThree.setColorAt(0.05, Qt::black);
    m_graph-&amp;gt;seriesList().at(2)-&amp;gt;setBaseGradient(grThree);
    m_graph-&amp;gt;seriesList().at(2)-&amp;gt;setColorStyle(Q3DTheme::ColorStyleRangeGradient);

    m_graph-&amp;gt;scene()-&amp;gt;activeCamera()-&amp;gt;setCameraPreset(Q3DCamera::CameraPresetFront);

    connect(m_graph, &amp;amp;QAbstract3DGraph::selectedElementChanged,
            this, &amp;amp;CustomItemGraph::handleElementSelected);

    m_selectionAnimation = new QPropertyAnimation(this);
    m_selectionAnimation-&amp;gt;setPropertyName(&quot;scaling&quot;);
    m_selectionAnimation-&amp;gt;setDuration(500);
    m_selectionAnimation-&amp;gt;setLoopCount(-1);

    QFont titleFont = QFont(&quot;Century Gothic&quot;, 30);
    titleFont.setBold(true);
    QCustom3DLabel *titleLabel = new QCustom3DLabel(&quot;Oil Rigs on Imaginary Sea&quot;, titleFont,
                                                    QVector3D(0.0f, 1.2f, 0.0f),
                                                    QVector3D(1.0f, 1.0f, 0.0f),
                                                    QQuaternion());
    titleLabel-&amp;gt;setPositionAbsolute(true);
    titleLabel-&amp;gt;setFacingCamera(true);
    titleLabel-&amp;gt;setBackgroundColor(QColor(0x66cdaa));
    m_graph-&amp;gt;addCustomItem(titleLabel);

    toggleItemOne(true);
    toggleItemTwo(true);
}

CustomItemGraph::~CustomItemGraph()
{
    delete m_graph;
}

void CustomItemGraph::toggleItemOne(bool show)
{
    QVector3D positionOne = QVector3D(39.0f, 77.0f, 19.2f);
    QVector3D positionOnePipe = QVector3D(39.0f, 45.0f, 19.2f);
    QVector3D positionOneLabel = QVector3D(39.0f, 107.0f, 19.2f);
    if (show) {
        QImage color = QImage(2, 2, QImage::Format_RGB32);
        color.fill(Qt::red);
        QCustom3DItem *item = new QCustom3DItem(&quot;:/items/oilrig.obj&quot;, positionOne,
                                                QVector3D(0.025f, 0.025f, 0.025f),
                                                QQuaternion::fromAxisAndAngle(0.0f, 1.0f, 0.0f, 45.0f),
                                                color);
        m_graph-&amp;gt;addCustomItem(item);
        item = new QCustom3DItem(&quot;:/items/pipe.obj&quot;, positionOnePipe,
                                 QVector3D(0.005f, 0.5f, 0.005f),
                                 QQuaternion(),
                                 color);
        item-&amp;gt;setShadowCasting(false);
        m_graph-&amp;gt;addCustomItem(item);

        QCustom3DLabel *label = new QCustom3DLabel();
        label-&amp;gt;setText(&quot;Oil Rig One&quot;);
        label-&amp;gt;setPosition(positionOneLabel);
        label-&amp;gt;setScaling(QVector3D(1.0f, 1.0f, 1.0f));
        m_graph-&amp;gt;addCustomItem(label);
    } else {
        resetSelection();
        m_graph-&amp;gt;removeCustomItemAt(positionOne);
        m_graph-&amp;gt;removeCustomItemAt(positionOnePipe);
        m_graph-&amp;gt;removeCustomItemAt(positionOneLabel);
    }
}

void CustomItemGraph::toggleItemTwo(bool show)
{
    QVector3D positionTwo = QVector3D(34.5f, 77.0f, 23.4f);
    QVector3D positionTwoPipe = QVector3D(34.5f, 45.0f, 23.4f);
    QVector3D positionTwoLabel = QVector3D(34.5f, 107.0f, 23.4f);
    if (show) {
        QImage color = QImage(2, 2, QImage::Format_RGB32);
        color.fill(Qt::red);
        QCustom3DItem *item = new QCustom3DItem();
        item-&amp;gt;setMeshFile(&quot;:/items/oilrig.obj&quot;);
        item-&amp;gt;setPosition(positionTwo);
        item-&amp;gt;setScaling(QVector3D(0.025f, 0.025f, 0.025f));
        item-&amp;gt;setRotation(QQuaternion::fromAxisAndAngle(0.0f, 1.0f, 0.0f, 25.0f));
        item-&amp;gt;setTextureImage(color);
        m_graph-&amp;gt;addCustomItem(item);
        item = new QCustom3DItem(&quot;:/items/pipe.obj&quot;, positionTwoPipe,
                                 QVector3D(0.005f, 0.5f, 0.005f),
                                 QQuaternion(),
                                 color);
        item-&amp;gt;setShadowCasting(false);
        m_graph-&amp;gt;addCustomItem(item);

        QCustom3DLabel *label = new QCustom3DLabel();
        label-&amp;gt;setText(&quot;Oil Rig Two&quot;);
        label-&amp;gt;setPosition(positionTwoLabel);
        label-&amp;gt;setScaling(QVector3D(1.0f, 1.0f, 1.0f));
        m_graph-&amp;gt;addCustomItem(label);
    } else {
        resetSelection();
        m_graph-&amp;gt;removeCustomItemAt(positionTwo);
        m_graph-&amp;gt;removeCustomItemAt(positionTwoPipe);
        m_graph-&amp;gt;removeCustomItemAt(positionTwoLabel);
    }
}

void CustomItemGraph::toggleItemThree(bool show)
{
    QVector3D positionThree = QVector3D(34.5f, 86.0f, 19.1f);
    QVector3D positionThreeLabel = QVector3D(34.5f, 116.0f, 19.1f);
    if (show) {
        QImage color = QImage(2, 2, QImage::Format_RGB32);
        color.fill(Qt::darkMagenta);
        QCustom3DItem *item = new QCustom3DItem();
        item-&amp;gt;setMeshFile(&quot;:/items/refinery.obj&quot;);
        item-&amp;gt;setPosition(positionThree);
        item-&amp;gt;setScaling(QVector3D(0.04f, 0.04f, 0.04f));
        item-&amp;gt;setRotation(QQuaternion::fromAxisAndAngle(0.0f, 1.0f, 0.0f, 75.0f));
        item-&amp;gt;setTextureImage(color);
        m_graph-&amp;gt;addCustomItem(item);

        QCustom3DLabel *label = new QCustom3DLabel();
        label-&amp;gt;setText(&quot;Refinery&quot;);
        label-&amp;gt;setPosition(positionThreeLabel);
        label-&amp;gt;setScaling(QVector3D(1.0f, 1.0f, 1.0f));
        m_graph-&amp;gt;addCustomItem(label);
    } else {
        resetSelection();
        m_graph-&amp;gt;removeCustomItemAt(positionThree);
        m_graph-&amp;gt;removeCustomItemAt(positionThreeLabel);
    }
}

void CustomItemGraph::toggleSeeThrough(bool seethrough)
{
    if (seethrough) {
        m_graph-&amp;gt;seriesList().at(0)-&amp;gt;setDrawMode(QSurface3DSeries::DrawWireframe);
        m_graph-&amp;gt;seriesList().at(1)-&amp;gt;setDrawMode(QSurface3DSeries::DrawWireframe);
    } else {
        m_graph-&amp;gt;seriesList().at(0)-&amp;gt;setDrawMode(QSurface3DSeries::DrawSurface);
        m_graph-&amp;gt;seriesList().at(1)-&amp;gt;setDrawMode(QSurface3DSeries::DrawSurface);
    }
}

void CustomItemGraph::toggleOilHighlight(bool highlight)
{
    if (highlight) {
        QLinearGradient grThree;
        grThree.setColorAt(0.0, Qt::black);
        grThree.setColorAt(0.05, Qt::red);
        m_graph-&amp;gt;seriesList().at(2)-&amp;gt;setBaseGradient(grThree);
    } else {
        QLinearGradient grThree;
        grThree.setColorAt(0.0, Qt::white);
        grThree.setColorAt(0.05, Qt::black);
        m_graph-&amp;gt;seriesList().at(2)-&amp;gt;setBaseGradient(grThree);
    }
}

void CustomItemGraph::toggleShadows(bool shadows)
{
    if (shadows)
        m_graph-&amp;gt;setShadowQuality(QAbstract3DGraph::ShadowQualityMedium);
    else
        m_graph-&amp;gt;setShadowQuality(QAbstract3DGraph::ShadowQualityNone);
}

void CustomItemGraph::handleElementSelected(QAbstract3DGraph::ElementType type)
{
    resetSelection();
    if (type == QAbstract3DGraph::ElementCustomItem) {
        QCustom3DItem *item = m_graph-&amp;gt;selectedCustomItem();
        QString text;
        if (qobject_cast&amp;lt;QCustom3DLabel *&amp;gt;(item) != 0) {
            text.append(&quot;Custom label: &quot;);
        } else {
            QStringList split = item-&amp;gt;meshFile().split(&quot;/&quot;);
            text.append(split.last());
            text.append(&quot;: &quot;);
        }
        int index = m_graph-&amp;gt;selectedCustomItemIndex();
        text.append(QString::number(index));
        m_textField-&amp;gt;setText(text);
        m_previouslyAnimatedItem = item;
        m_previousScaling = item-&amp;gt;scaling();
        m_selectionAnimation-&amp;gt;setTargetObject(item);
        m_selectionAnimation-&amp;gt;setStartValue(item-&amp;gt;scaling());
        m_selectionAnimation-&amp;gt;setEndValue(item-&amp;gt;scaling() * 1.5f);
        m_selectionAnimation-&amp;gt;start();
    } else if (type == QAbstract3DGraph::ElementSeries) {
        QString text = &quot;Surface (&quot;;
        QSurface3DSeries *series = m_graph-&amp;gt;selectedSeries();
        if (series) {
            QPoint point = series-&amp;gt;selectedPoint();
            QString posStr;
            posStr.setNum(point.x());
            text.append(posStr);
            text.append(&quot;, &quot;);
            posStr.setNum(point.y());
            text.append(posStr);
        }
        text.append(&quot;)&quot;);
        m_textField-&amp;gt;setText(text);
    } else if (type &amp;gt; QAbstract3DGraph::ElementSeries
               &amp;amp;&amp;amp; type &amp;lt; QAbstract3DGraph::ElementCustomItem) {
        int index = m_graph-&amp;gt;selectedLabelIndex();
        QString text;
        if (type == QAbstract3DGraph::ElementAxisXLabel)
            text.append(&quot;Axis X label: &quot;);
        else if (type == QAbstract3DGraph::ElementAxisYLabel)
            text.append(&quot;Axis Y label: &quot;);
        else
            text.append(&quot;Axis Z label: &quot;);
        text.append(QString::number(index));
        m_textField-&amp;gt;setText(text);
    } else {
        m_textField-&amp;gt;setText(&quot;Nothing&quot;);
    }
}

void CustomItemGraph::resetSelection()
{
    m_selectionAnimation-&amp;gt;stop();
    if (m_previouslyAnimatedItem)
        m_previouslyAnimatedItem-&amp;gt;setScaling(m_previousScaling);
    m_previouslyAnimatedItem = 0;
}

</db:programlisting>
</db:article>
