<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Signal and Handler Event System</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>the event system in QML.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Application and user interface components need to communicate with each other. For example, a button needs to know that the user has clicked on it. The button may change colors to indicate its state or perform some logic. As well, application needs to know whether the user is clicking the button. The application may need to relay this clicking event to other applications.</db:para>
<db:para>QML has a signal and handler mechanism, where the <db:emphasis>signal</db:emphasis> is the event and the signal is responded to through a <db:emphasis>signal handler</db:emphasis>. When a signal is emitted, the corresponding signal handler is invoked. Placing logic such as a script or other operations in the handler allows the component to respond to the event.</db:para>
<db:anchor xml:id="qml-signals-and-handlers"/>
<db:section xml:id="receiving-signals-with-signal-handlers">
<db:title>Receiving signals with signal handlers</db:title>
<db:para>To receive a notification when a particular signal is emitted for a particular object, the object definition should declare a signal handler named <db:emphasis>on&lt;Signal&gt;</db:emphasis>, where <db:emphasis>&lt;Signal&gt;</db:emphasis> is the name of the signal, with the first letter capitalized. The signal handler should contain the JavaScript code to be executed when the signal handler is invoked.</db:para>
<db:para>For example, the <db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link> type from the <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> module has a clicked signal, which is emitted whenever the button is clicked. In this case, the signal handler for receiving this signal should be onClicked. In the example below, whenever the button is clicked, the onClicked handler is invoked, applying a random color to the parent <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls

Rectangle {
    id: rect
    width: 250; height: 250

    Button {
        anchors.bottom: parent.bottom
        anchors.horizontalCenter: parent.horizontalCenter
        text: &quot;Change color!&quot;
        onClicked: {
            rect.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        }
    }
}
</db:programlisting>
<db:section xml:id="property-change-signal-handlers">
<db:title>Property change signal handlers</db:title>
<db:para>A signal is automatically emitted when the value of a QML property changes. This type of signal is a <db:emphasis>property change signal</db:emphasis> and signal handlers for these signals are written in the form <db:emphasis>on&lt;Property&gt;Changed</db:emphasis>, where <db:emphasis>&lt;Property&gt;</db:emphasis> is the name of the property, with the first letter capitalized.</db:para>
<db:para>For example, the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type has a <db:link xlink:href="qml-qtquick-mousearea.xml#pressed-signal">pressed</db:link> property. To receive a notification whenever this property changes, write a signal handler named onPressedChanged:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    id: rect
    width: 100; height: 100

    TapHandler {
        onPressedChanged: console.log(&quot;taphandler pressed?&quot;, pressed)
    }
}
</db:programlisting>
<db:para>Even though the <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> documentation does not document a signal handler named onPressedChanged, the signal is implicitly provided by the fact that the pressed property exists.</db:para>
</db:section>
<db:section xml:id="using-the-connections-type">
<db:title>Using the Connections type</db:title>
<db:para>In some cases it may be desirable to access a signal outside of the object that emits it. For these purposes, the QtQuick module provides the <db:link xlink:href="qml-qtqml-connections.xml">Connections</db:link> type for connecting to signals of arbitrary objects. A <db:link xlink:href="qml-qtqml-connections.xml">Connections</db:link> object can receive any signal from its specified <db:link xlink:href="qml-qtqml-connections.xml#target-prop">target</db:link>.</db:para>
<db:para>For example, the onClicked handler in the earlier example could have been received by the root <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> instead, by placing the onClicked handler in a <db:link xlink:href="qml-qtqml-connections.xml">Connections</db:link> object that has its <db:link xlink:href="qml-qtqml-connections.xml#target-prop">target</db:link> set to the button:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls

Rectangle {
    id: rect
    width: 250; height: 250

    Button {
        id: button
        anchors.bottom: parent.bottom
        anchors.horizontalCenter: parent.horizontalCenter
        text: &quot;Change color!&quot;
    }

    Connections {
        target: button
        function onClicked() {
            rect.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="attached-signal-handlers">
<db:title>Attached signal handlers</db:title>
<db:para>An <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers">attached signal handler</db:link> receives a signal from an <db:emphasis>attaching type</db:emphasis> rather than the object within which the handler is declared.</db:para>
<db:para>For example, <db:link xlink:href="qml-qtqml-component.xml#completed-signal">Component.onCompleted</db:link> is an attached signal handler. It is often used to execute some JavaScript code when its creation process is complete. Here is an example:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    width: 200; height: 200
    color: Qt.rgba(Qt.random(), Qt.random(), Qt.random(), 1)

    Component.onCompleted: {
        console.log(&quot;The rectangle's color is&quot;, color)
    }
}
</db:programlisting>
<db:para>The onCompleted handler is not responding to a completed signal from the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type. Instead, an object of the Component <db:emphasis>attaching type</db:emphasis> with a completed signal has automatically been <db:emphasis>attached</db:emphasis> to the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object by the QML engine. The engine emits this signal when the Rectangle object is created, thus triggering the Component.onCompleted signal handler.</db:para>
<db:para>Attached signal handlers allow objects to be notified of particular signals that are significant to each individual object. If there was no Component.onCompleted attached signal handler, for example, an object could not receive this notification without registering for some special signal from some special object. The <db:emphasis>attached signal handler</db:emphasis> mechanism enables objects to receive particular signals without extra code.</db:para>
<db:para>See <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers">Attached properties and attached signal handlers</db:link> for more information on attached signal handlers.</db:para>
</db:section>
</db:section>
<db:section xml:id="adding-signals-to-custom-qml-types">
<db:title>Adding signals to custom QML types</db:title>
<db:para>Signals can be added to custom QML types through the signal keyword.</db:para>
<db:para>The syntax for defining a new signal is:</db:para>
<db:para><db:code>signal &lt;name&gt;[([&lt;type&gt; &lt;parameter name&gt;[, ...]])]</db:code></db:para>
<db:para>A signal is emitted by invoking the signal as a method.</db:para>
<db:para>For example, the code below is defined in a file named SquareButton.qml. The root <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object has an activated signal, which is emitted whenever the child <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> is tapped. In this particular example the activated signal is emitted with the x and y coordinates of the mouse click:</db:para>
<db:programlisting language="qml">// SquareButton.qml
import QtQuick

Rectangle {
    id: root

    signal activated(real xPosition, real yPosition)
    property point mouseXY
    property int side: 100
    width: side; height: side

    TapHandler {
        id: handler
        onTapped: root.activated(mouseXY.x, mouseXY.y)
        onPressedChanged: mouseXY = handler.point.position
    }
}
</db:programlisting>
<db:para>Now any objects of the SquareButton can connect to the activated signal using an onActivated signal handler:</db:para>
<db:programlisting language="qml">// myapplication.qml
SquareButton {
    onActivated: console.log(&quot;Activated at &quot; + xPosition + &quot;,&quot; + yPosition)
}
</db:programlisting>
<db:para>See <db:link xlink:href="qtqml-syntax-objectattributes.xml#signal-attributes">Signal Attributes</db:link> for more details on writing signals for custom QML types.</db:para>
<db:anchor xml:id="qml-connect-signals-to-method"/>
</db:section>
<db:section xml:id="connecting-signals-to-methods-and-signals">
<db:title>Connecting signals to methods and signals</db:title>
<db:para>Signal objects have a connect() method to a connect a signal either to a method or another signal. When a signal is connected to a method, the method is automatically invoked whenever the signal is emitted. This mechanism enables a signal to be received by a method instead of a signal handler.</db:para>
<db:para>Below, the messageReceived signal is connected to three methods using the connect() method:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    id: relay

    signal messageReceived(string person, string notice)

    Component.onCompleted: {
        relay.messageReceived.connect(sendToPost)
        relay.messageReceived.connect(sendToTelegraph)
        relay.messageReceived.connect(sendToEmail)
        relay.messageReceived(&quot;Tom&quot;, &quot;Happy Birthday&quot;)
    }

    function sendToPost(person, notice) {
        console.log(&quot;Sending to post: &quot; + person + &quot;, &quot; + notice)
    }
    function sendToTelegraph(person, notice) {
        console.log(&quot;Sending to telegraph: &quot; + person + &quot;, &quot; + notice)
    }
    function sendToEmail(person, notice) {
        console.log(&quot;Sending to email: &quot; + person + &quot;, &quot; + notice)
    }
}
</db:programlisting>
<db:para>In many cases it is sufficient to receive signals through signal handlers rather than using the connect() function. However, using the connect method allows a signal to be received by multiple methods as shown earlier, which would not be possible with signal handlers as they must be uniquely named. Also, the connect method is useful when connecting signals to <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">dynamically created objects</db:link>.</db:para>
<db:para>There is a corresponding disconnect() method for removing connected signals:</db:para>
<db:programlisting language="qml">Rectangle {
    id: relay
    //...

    function removeTelegraphSignal() {
        relay.messageReceived.disconnect(sendToTelegraph)
    }
}
</db:programlisting>
<db:section xml:id="signal-to-signal-connect">
<db:title>Signal to signal connect</db:title>
<db:para>By connecting signals to other signals, the connect() method can form different signal chains.</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    id: forwarder
    width: 100; height: 100

    signal send()
    onSend: console.log(&quot;Send clicked&quot;)

    TapHandler {
        id: mousearea
        anchors.fill: parent
        onTapped: console.log(&quot;Mouse clicked&quot;)
    }

    Component.onCompleted: {
        mousearea.tapped.connect(send)
    }
}
</db:programlisting>
<db:para>Whenever the <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link>'s tapped signal is emitted, the send signal will automatically be emitted as well.</db:para>
<db:programlisting language="cpp">output:
    MouseArea clicked
    Send clicked
</db:programlisting>
</db:section>
</db:section>
</db:article>
