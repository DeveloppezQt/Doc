<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Signal and Handler Event System</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>the event system in QML.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Application and user interface components need to communicate with each other. For example, a button needs to know that the user has clicked on it. The button may change colors to indicate its state or perform some logic. As well, application needs to know whether the user is clicking the button. The application may need to relay this clicking event to other applications.</db:para>
<db:para>QML has a signal and handler mechanism, where the <db:emphasis>signal</db:emphasis> is the event and the signal is responded to through a <db:emphasis>signal handler</db:emphasis>. When a signal is emitted, the corresponding signal handler is invoked. Placing logic such as scripts or other operations in the handler allows the component to respond to the event.</db:para>
<db:section xml:id="receiving-signals-with-signal-handlers">
<db:title>Receiving Signals with Signal Handlers</db:title>
<db:para>To receive a notification when a particular signal is emitted for a particular object, the object definition should declare a signal handler named <db:emphasis>on&lt;Signal&gt;</db:emphasis> where <db:emphasis>&lt;Signal&gt;</db:emphasis> is the name of the signal, with the first letter capitalized. The signal handler should contain the JavaScript code to be executed when the signal handler is invoked.</db:para>
<db:para>For example, the MouseArea type from the QtQuick module has a clicked signal that is emitted whenever the mouse is clicked within the area. Since the signal name is clicked, the signal handler for receiving this signal should be named onClicked. In the example below, whenever the mouse area is clicked, the onClicked handler is invoked, applying a random color to the Rectangle:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: rect
    width: 100; height: 100

    MouseArea {
        anchors.fill: parent
        onClicked: {
            rect.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        }
    }
}
</db:programlisting>
<db:para>Looking at the MouseArea documentation, you can see the clicked signal is emitted with a parameter named mouse which is a MouseEvent object that contains further details about the mouse click event. This name can be referred to in our onClicked handler to access this parameter. For example, the MouseEvent type has x and y coordinates that allows us to print out the exact location where the mouse was clicked:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: rect
    width: 100; height: 100

    MouseArea {
        anchors.fill: parent
        onClicked: {
            rect.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);

            // access 'mouse' parameter
            console.log(&quot;Clicked mouse at&quot;, mouse.x, mouse.y)
        }
    }
}
</db:programlisting>
<db:section xml:id="property-change-signal-handlers">
<db:title>Property Change Signal Handlers</db:title>
<db:para>A signal is automatically emitted when the value of a QML property changes. This type of signal is a <db:emphasis>property change signal</db:emphasis> and signal handlers for these signals are written in the form <db:emphasis>on&lt;Property&gt;Changed</db:emphasis> where <db:emphasis>&lt;Property&gt;</db:emphasis> is the name of the property, with the first letter capitalized.</db:para>
<db:para>For example, the MouseArea type has a pressed property. To receive a notification whenever this property changes, write a signal handler named onPressedChanged:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: rect
    width: 100; height: 100

    MouseArea {
        anchors.fill: parent
        onPressedChanged: {
            console.log(&quot;Mouse area is pressed?&quot;, pressed)
        }
    }
}
</db:programlisting>
<db:para>Even though the MouseArea documentation does not document a signal handler named onPressedChanged, the signal is implicitly provided by the fact that the pressed property exists.</db:para>
</db:section>
<db:section xml:id="using-the-connections-type">
<db:title>Using the Connections Type</db:title>
<db:para>In some cases it may be desirable to access a signal outside of the object that emits it. For these purposes, the QtQuick module provides the <db:link xlink:href="qml-qtqml-connections.xml">Connections</db:link> type for connecting to signals of arbitrary objects. A <db:link xlink:href="qml-qtqml-connections.xml">Connections</db:link> object can receive any signal from its specified <db:link xlink:href="qml-qtqml-connections.xml#target-prop">target</db:link>.</db:para>
<db:para>For example, the onClicked handler in the earlier example could have been received by the root Rectangle instead, by placing the onClicked handler in a <db:link xlink:href="qml-qtqml-connections.xml">Connections</db:link> object that has its <db:link xlink:href="qml-qtqml-connections.xml#target-prop">target</db:link> set to the MouseArea:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: rect
    width: 100; height: 100

    MouseArea {
        id: mouseArea
        anchors.fill: parent
    }

    Connections {
        target: mouseArea
        onClicked: {
            rect.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="attached-signal-handlers">
<db:title>Attached Signal Handlers</db:title>
<db:para>An <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers">attached signal handler</db:link> is a signal handler that receives a signal from an <db:emphasis>attaching type</db:emphasis> rather than the object within which the handler is declared.</db:para>
<db:para>For example, <db:link xlink:href="qml-qtqml-component.xml#completed-signal">Component.onCompleted</db:link> is an attached signal handler. This handler is often used to execute some JavaScript code when its creation process has been completed, as in the example below:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200; height: 200
    color: Qt.rgba(Qt.random(), Qt.random(), Qt.random(), 1)

    Component.onCompleted: {
        console.log(&quot;The rectangle's color is&quot;, color)
    }
}
</db:programlisting>
<db:para>The onCompleted handler is not responding to some completed signal from the Rectangle type. Instead, an object of the Component <db:emphasis>attaching type</db:emphasis> with a completed signal has automatically been <db:emphasis>attached</db:emphasis> to the Rectangle object by the QML engine, and the engine emits this signal when the object is fully created, thus triggering the Component.onCompleted signal handler.</db:para>
<db:para>Attached signal handlers allow objects to be notified of particular signals that are significant to each individual object. If there was no Component.onCompleted attached signal handler, for example, then an object could not receive this notification without registering for some special signal from some special object. The <db:emphasis>attached signal handler</db:emphasis> mechanism enables objects to receive particular signals without these extra processes.</db:para>
<db:para>See <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers">Attached properties and attached signal handlers</db:link> for more information on attached signal handlers.</db:para>
</db:section>
</db:section>
<db:section xml:id="adding-signals-to-custom-qml-types">
<db:title>Adding Signals to Custom QML Types</db:title>
<db:para>Signals can be added to custom QML types through the signal keyword.</db:para>
<db:para>The syntax for defining a new signal is:</db:para>
<db:para><db:code>signal &lt;name&gt;[([&lt;type&gt; &lt;parameter name&gt;[, ...]])]</db:code></db:para>
<db:para>A signal is emitted by invoking the signal as a method.</db:para>
<db:para>For example, say the code below is defined in a file named SquareButton.qml. The root Rectangle object has an activated signal. When the child MouseArea is clicked, it emits the parent's activated signal with the coordinates of the mouse click:</db:para>
<db:programlisting language="qml">// SquareButton.qml
Rectangle {
    id: root

    signal activated(real xPosition, real yPosition)

    width: 100; height: 100

    MouseArea {
        anchors.fill: parent
        onPressed: root.activated(mouse.x, mouse.y)
    }
}
</db:programlisting>
<db:para>Now any objects of the SquareButton can connect to the activated signal using an onActivated signal handler:</db:para>
<db:programlisting language="qml">// myapplication.qml
SquareButton {
    onActivated: console.log(&quot;Activated at &quot; + xPosition + &quot;,&quot; + yPosition)
}
</db:programlisting>
<db:para>See <db:link xlink:href="qtqml-syntax-objectattributes.xml#signal-attributes">Signal Attributes</db:link> for more details on writing signals for custom QML types.</db:para>
</db:section>
<db:section xml:id="connecting-signals-to-methods-and-signals">
<db:title>Connecting Signals to Methods and Signals</db:title>
<db:para>Signal objects have a connect() method to a connect a signal either to a method or another signal. When a signal is connected to a method, the method is automatically invoked whenever the signal is emitted. This mechanism enables a signal to be received by a method instead of a signal handler.</db:para>
<db:para>Below, the messageReceived signal is connected to three methods using the connect() method:</db:para>
<db:programlisting language="qml">Rectangle {
    id: relay

    signal messageReceived(string person, string notice)

    Component.onCompleted: {
        relay.messageReceived.connect(sendToPost)
        relay.messageReceived.connect(sendToTelegraph)
        relay.messageReceived.connect(sendToEmail)
        relay.messageReceived(&quot;Tom&quot;, &quot;Happy Birthday&quot;)
    }

    function sendToPost(person, notice) {
        console.log(&quot;Sending to post: &quot; + person + &quot;, &quot; + notice)
    }
    function sendToTelegraph(person, notice) {
        console.log(&quot;Sending to telegraph: &quot; + person + &quot;, &quot; + notice)
    }
    function sendToEmail(person, notice) {
        console.log(&quot;Sending to email: &quot; + person + &quot;, &quot; + notice)
    }
}
</db:programlisting>
<db:para>In many cases it is sufficient to receive signals through signal handlers rather than using the connect() function. However, using the connect method allows a signal to be received by multiple methods as shown above, which would not be possible with signal handlers as they must be uniquely named. Also, the connect method is useful when connecting signals to <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">dynamically created objects</db:link>.</db:para>
<db:para>There is a corresponding disconnect() method for removing connected signals:</db:para>
<db:programlisting language="qml">Rectangle {
    id: relay
    //...

    function removeTelegraphSignal() {
        relay.messageReceived.disconnect(sendToTelegraph)
    }
}
</db:programlisting>
<db:section xml:id="signal-to-signal-connect">
<db:title>Signal to Signal Connect</db:title>
<db:para>By connecting signals to other signals, the connect() method can form different signal chains.</db:para>
<db:programlisting language="qml">Rectangle {
    id: forwarder
    width: 100; height: 100

    signal send()
    onSend: console.log(&quot;Send clicked&quot;)

    MouseArea {
        id: mousearea
        anchors.fill: parent
        onClicked: console.log(&quot;MouseArea clicked&quot;)
    }

    Component.onCompleted: {
        mousearea.clicked.connect(send)
    }
}
</db:programlisting>
<db:para>Whenever the MouseArea clicked signal is emitted, the send signal will automatically be emitted as well.</db:para>
<db:programlisting language="cpp">output:
    MouseArea clicked
    Send clicked
</db:programlisting>
</db:section>
</db:section>
</db:article>
