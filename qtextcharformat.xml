<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextCharFormat Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> class provides formatting information for characters in a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextCharFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextformat.xml" xlink:role="class">QTextFormat</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextimageformat.xml" xlink:role="class">QTextImageFormat</db:link> and <db:link xlink:href="qtexttablecellformat.xml" xlink:role="class">QTextTableCellFormat</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextCharFormat is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The character format of text in a document specifies the visual properties of the text, as well as information about its role in a hypertext document.</db:para>
<db:para>The font used can be set by supplying a font to the <db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>() function, and each aspect of its appearance can be adjusted to give the desired effect. <db:link xlink:href="qtextcharformat.xml#setFontFamily">setFontFamily</db:link>() and <db:link xlink:href="qtextcharformat.xml#setFontPointSize">setFontPointSize</db:link>() define the font's family (e.g. Times) and printed size; <db:link xlink:href="qtextcharformat.xml#setFontWeight">setFontWeight</db:link>() and <db:link xlink:href="qtextcharformat.xml#setFontItalic">setFontItalic</db:link>() provide control over the style of the font. <db:link xlink:href="qtextcharformat.xml#setFontUnderline">setFontUnderline</db:link>(), <db:link xlink:href="qtextcharformat.xml#setFontOverline">setFontOverline</db:link>(), <db:link xlink:href="qtextcharformat.xml#setFontStrikeOut">setFontStrikeOut</db:link>(), and <db:link xlink:href="qtextcharformat.xml#setFontFixedPitch">setFontFixedPitch</db:link>() provide additional effects for text.</db:para>
<db:para>The color is set with <db:link xlink:href="qtextformat.xml#setForeground">setForeground</db:link>(). If the text is intended to be used as an anchor (for hyperlinks), this can be enabled with <db:link xlink:href="qtextcharformat.xml#setAnchor">setAnchor</db:link>(). The <db:link xlink:href="qtextcharformat.xml#setAnchorHref">setAnchorHref</db:link>() and <db:link xlink:href="qtextcharformat.xml#setAnchorNames">setAnchorNames</db:link>() functions are used to specify the information about the hyperlink's destination and the anchor's name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:member>
<db:member><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:member>
<db:member><db:link xlink:href="qtexttableformat.xml">QTextTableFormat</db:link></db:member>
<db:member><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FontPropertiesInheritanceBehavior-enum">
<db:title>[since 5.3] enum QTextCharFormat::FontPropertiesInheritanceBehavior</db:title>
<db:enumsynopsis>
<db:enumname>FontPropertiesInheritanceBehavior</db:enumname>
<db:enumitem>
<db:enumidentifier>FontPropertiesSpecifiedOnly</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontPropertiesAll</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies how the <db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>() function should behave with respect to unset font properties.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::FontPropertiesSpecifiedOnly</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>If a property is not explicitly set, do not change the text format's property value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::FontPropertiesAll</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>If a property is not explicitly set, override the text format's property with a default value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="UnderlineStyle-enum">
<db:title>enum QTextCharFormat::UnderlineStyle</db:title>
<db:enumsynopsis>
<db:enumname>UnderlineStyle</db:enumname>
<db:enumitem>
<db:enumidentifier>NoUnderline</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SingleUnderline</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DashUnderline</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DotLine</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DashDotLine</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DashDotDotLine</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WaveUnderline</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SpellCheckUnderline</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the different ways drawing underlined text.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::NoUnderline</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Text is draw without any underlining decoration.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::SingleUnderline</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A line is drawn using <db:link xlink:href="qt.xml#PenStyle-enum">Qt::SolidLine</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::DashUnderline</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Dashes are drawn using <db:link xlink:href="qt.xml#PenStyle-enum">Qt::DashLine</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::DotLine</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Dots are drawn using <db:link xlink:href="qt.xml#PenStyle-enum">Qt::DotLine</db:link>;</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::DashDotLine</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Dashs and dots are drawn using <db:link xlink:href="qt.xml#PenStyle-enum">Qt::DashDotLine</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::DashDotDotLine</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Underlines draw drawn using <db:link xlink:href="qt.xml#PenStyle-enum">Qt::DashDotDotLine</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::WaveUnderline</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The text is underlined using a wave shaped line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::SpellCheckUnderline</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The underline is drawn depending on the SpellCheckUnderlineStyle theme hint of QPlatformTheme. By default this is mapped to WaveUnderline, on macOS it is mapped to DotLine.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#PenStyle-enum">Qt::PenStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="VerticalAlignment-enum">
<db:title>enum QTextCharFormat::VerticalAlignment</db:title>
<db:enumsynopsis>
<db:enumname>VerticalAlignment</db:enumname>
<db:enumitem>
<db:enumidentifier>AlignNormal</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignSuperScript</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignSubScript</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignMiddle</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignTop</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignBottom</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignBaseline</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the ways that adjacent characters can be vertically aligned.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::AlignNormal</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Adjacent characters are positioned in the standard way for text in the writing system in use.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::AlignSuperScript</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Characters are placed above the base line for normal text.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::AlignSubScript</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Characters are placed below the base line for normal text.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::AlignMiddle</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The center of the object is vertically aligned with the base line. Currently, this is only implemented for inline objects.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::AlignBottom</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The bottom edge of the object is vertically aligned with the base line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::AlignTop</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The top edge of the object is vertically aligned with the base line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:emphasis>::AlignBaseline</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The base lines of the characters are aligned.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextCharFormat">
<db:title>QTextCharFormat::QTextCharFormat()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextCharFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCharFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new character format object.</db:para>
</db:section>
<db:section xml:id="anchorHref">
<db:title>QString QTextCharFormat::anchorHref() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>anchorHref</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString anchorHref() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text format's hypertext link, or an empty string if none has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setAnchorHref">setAnchorHref</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="anchorNames">
<db:title>QStringList QTextCharFormat::anchorNames() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>anchorNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList anchorNames() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the anchor names associated with this text format, or an empty string list if none has been set. If the anchor names are set, text with this format can be the destination of a hypertext link.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setAnchorNames">setAnchorNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="baselineOffset">
<db:title>[since 6.0] qreal QTextCharFormat::baselineOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>baselineOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal baselineOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the the baseline offset in %.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setBaselineOffset">setBaselineOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setSubScriptBaseline">setSubScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#subScriptBaseline">subScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setSuperScriptBaseline">setSuperScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#superScriptBaseline">superScriptBaseline</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>QFont QTextCharFormat::font() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont</db:type>
<db:methodname>font</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont font() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font for this character format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontCapitalization">
<db:title>QFont::Capitalization QTextCharFormat::fontCapitalization() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont::Capitalization</db:type>
<db:methodname>fontCapitalization</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont::Capitalization fontCapitalization() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current capitalization type of the font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontCapitalization">setFontCapitalization</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontFamilies">
<db:title>[since 5.13] QVariant QTextCharFormat::fontFamilies() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>fontFamilies</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant fontFamilies() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text format's font families.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontFamilies">setFontFamilies</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontFamily">
<db:title>QString QTextCharFormat::fontFamily() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fontFamily</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fontFamily() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text format's font family.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontFamily">setFontFamily</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontFixedPitch">
<db:title>bool QTextCharFormat::fontFixedPitch() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>fontFixedPitch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool fontFixedPitch() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the text format's font is fixed pitch; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontFixedPitch">setFontFixedPitch</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontHintingPreference">
<db:title>QFont::HintingPreference QTextCharFormat::fontHintingPreference() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont::HintingPreference</db:type>
<db:methodname>fontHintingPreference</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont::HintingPreference fontHintingPreference() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hinting preference set for this text format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontHintingPreference">setFontHintingPreference</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#hintingPreference">QFont::hintingPreference</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontItalic">
<db:title>bool QTextCharFormat::fontItalic() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>fontItalic</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool fontItalic() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the text format's font is italic; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontItalic">setFontItalic</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontKerning">
<db:title>bool QTextCharFormat::fontKerning() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>fontKerning</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool fontKerning() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the font kerning is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontKerning">setFontKerning</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontLetterSpacing">
<db:title>qreal QTextCharFormat::fontLetterSpacing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>fontLetterSpacing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal fontLetterSpacing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current letter spacing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontLetterSpacing">setFontLetterSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFontLetterSpacingType">setFontLetterSpacingType</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#fontLetterSpacingType">fontLetterSpacingType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontLetterSpacingType">
<db:title>[since 5.0] QFont::SpacingType QTextCharFormat::fontLetterSpacingType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont::SpacingType</db:type>
<db:methodname>fontLetterSpacingType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont::SpacingType fontLetterSpacingType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the letter spacing type of this format..</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontLetterSpacingType">setFontLetterSpacingType</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFontLetterSpacing">setFontLetterSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#fontLetterSpacing">fontLetterSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontOverline">
<db:title>bool QTextCharFormat::fontOverline() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>fontOverline</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool fontOverline() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the text format's font is overlined; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontOverline">setFontOverline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontPointSize">
<db:title>qreal QTextCharFormat::fontPointSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>fontPointSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal fontPointSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font size used to display text in this format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontPointSize">setFontPointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontStretch">
<db:title>[since 5.0] int QTextCharFormat::fontStretch() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>fontStretch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int fontStretch() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current font stretching.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontStretch">setFontStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontStrikeOut">
<db:title>bool QTextCharFormat::fontStrikeOut() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>fontStrikeOut</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool fontStrikeOut() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the text format's font is struck out (has a horizontal line drawn through it); otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontStrikeOut">setFontStrikeOut</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontStyleHint">
<db:title>QFont::StyleHint QTextCharFormat::fontStyleHint() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont::StyleHint</db:type>
<db:methodname>fontStyleHint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont::StyleHint fontStyleHint() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font style hint.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontStyleHint">setFontStyleHint</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontStyleName">
<db:title>[since 5.13] QVariant QTextCharFormat::fontStyleName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>fontStyleName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant fontStyleName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text format's font style name.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontStyleName">setFontStyleName</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#styleName">QFont::styleName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontStyleStrategy">
<db:title>QFont::StyleStrategy QTextCharFormat::fontStyleStrategy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont::StyleStrategy</db:type>
<db:methodname>fontStyleStrategy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont::StyleStrategy fontStyleStrategy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current font style strategy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontStyleStrategy">setFontStyleStrategy</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontUnderline">
<db:title>bool QTextCharFormat::fontUnderline() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>fontUnderline</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool fontUnderline() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the text format's font is underlined; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontUnderline">setFontUnderline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontWeight">
<db:title>int QTextCharFormat::fontWeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>fontWeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int fontWeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text format's font weight.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontWeight">setFontWeight</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#Weight-enum">QFont::Weight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontWordSpacing">
<db:title>qreal QTextCharFormat::fontWordSpacing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>fontWordSpacing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal fontWordSpacing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current word spacing value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setFontWordSpacing">setFontWordSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAnchor">
<db:title>bool QTextCharFormat::isAnchor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAnchor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAnchor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the text is formatted as an anchor; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setAnchor">setAnchor</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setAnchorHref">setAnchorHref</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setAnchorNames">setAnchorNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTextCharFormat::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this character format is valid; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="setAnchor">
<db:title>void QTextCharFormat::setAnchor(bool <db:emphasis>anchor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAnchor</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>anchor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAnchor(bool anchor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">anchor</db:code> is true, text with this format represents an anchor, and is formatted in the appropriate way; otherwise the text is formatted normally. (Anchors are hyperlinks which are often shown underlined and in a different color from plain text.)</db:para>
<db:para>The way the text is rendered is independent of whether or not the format has a valid anchor defined. Use <db:link xlink:href="qtextcharformat.xml#setAnchorHref">setAnchorHref</db:link>(), and optionally <db:link xlink:href="qtextcharformat.xml#setAnchorNames">setAnchorNames</db:link>() to create a hypertext link.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#isAnchor">isAnchor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAnchorHref">
<db:title>void QTextCharFormat::setAnchorHref(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAnchorHref</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAnchorHref(const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the hypertext link for the text format to the given <db:code role="parameter">value</db:code>. This is typically a URL like &quot;http://example.com/index.html&quot;.</db:para>
<db:para>The anchor will be displayed with the <db:code role="parameter">value</db:code> as its display text; if you want to display different text call <db:link xlink:href="qtextcharformat.xml#setAnchorNames">setAnchorNames</db:link>().</db:para>
<db:para>To format the text as a hypertext link use <db:link xlink:href="qtextcharformat.xml#setAnchor">setAnchor</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#anchorHref">anchorHref</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAnchorNames">
<db:title>void QTextCharFormat::setAnchorNames(const QStringList &amp;<db:emphasis>names</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAnchorNames</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>names</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAnchorNames(const QStringList &amp;names)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text format's anchor <db:code role="parameter">names</db:code>. For the anchor to work as a hyperlink, the destination must be set with <db:link xlink:href="qtextcharformat.xml#setAnchorHref">setAnchorHref</db:link>() and the anchor must be enabled with <db:link xlink:href="qtextcharformat.xml#setAnchor">setAnchor</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#anchorNames">anchorNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBaselineOffset">
<db:title>[since 6.0] void QTextCharFormat::setBaselineOffset(qreal <db:emphasis>baseline</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBaselineOffset</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>baseline</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBaselineOffset(qreal baseline)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the base line (in % of height) of text to <db:code role="parameter">baseline</db:code>. A positive value moves the text up, by the corresponding %; a negative value moves it down. The default value is 0.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#baselineOffset">baselineOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setSubScriptBaseline">setSubScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#subScriptBaseline">subScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setSuperScriptBaseline">setSuperScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#superScriptBaseline">superScriptBaseline</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFont">
<db:title>[since 5.3] void QTextCharFormat::setFont(const QFont &amp;<db:emphasis>font</db:emphasis>, QTextCharFormat::FontPropertiesInheritanceBehavior <db:emphasis>behavior</db:emphasis> = FontPropertiesAll)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFont</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCharFormat::FontPropertiesInheritanceBehavior</db:type>
<db:parameter>behavior</db:parameter>
<db:initializer>FontPropertiesAll</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFont(const QFont &amp;font, QTextCharFormat::FontPropertiesInheritanceBehavior behavior)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text format's <db:code role="parameter">font</db:code>.</db:para>
<db:para>If <db:code role="parameter">behavior</db:code> is <db:link xlink:href="qtextcharformat.xml#FontPropertiesInheritanceBehavior-enum">QTextCharFormat::FontPropertiesAll</db:link>, the font property that has not been explicitly set is treated like as it were set with default value; If <db:code role="parameter">behavior</db:code> is <db:link xlink:href="qtextcharformat.xml#FontPropertiesInheritanceBehavior-enum">QTextCharFormat::FontPropertiesSpecifiedOnly</db:link>, the font property that has not been explicitly set is ignored and the respective property value remains unchanged.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontCapitalization">
<db:title>void QTextCharFormat::setFontCapitalization(QFont::Capitalization <db:emphasis>capitalization</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontCapitalization</db:methodname>
<db:methodparam>
<db:type>QFont::Capitalization</db:type>
<db:parameter>capitalization</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontCapitalization(QFont::Capitalization capitalization)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the capitalization of the text that apppears in this font to <db:code role="parameter">capitalization</db:code>.</db:para>
<db:para>A font's capitalization makes the text appear in the selected capitalization mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontCapitalization">fontCapitalization</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontFamilies">
<db:title>[since 5.13] void QTextCharFormat::setFontFamilies(const QStringList &amp;<db:emphasis>families</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontFamilies</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>families</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontFamilies(const QStringList &amp;families)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text format's font <db:code role="parameter">families</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontFamilies">fontFamilies</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontFamily">
<db:title>void QTextCharFormat::setFontFamily(const QString &amp;<db:emphasis>family</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontFamily</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontFamily(const QString &amp;family)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text format's font <db:code role="parameter">family</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontFamily">fontFamily</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontFixedPitch">
<db:title>void QTextCharFormat::setFontFixedPitch(bool <db:emphasis>fixedPitch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontFixedPitch</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>fixedPitch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontFixedPitch(bool fixedPitch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">fixedPitch</db:code> is true, sets the text format's font to be fixed pitch; otherwise a non-fixed pitch font is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontFixedPitch">fontFixedPitch</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontHintingPreference">
<db:title>void QTextCharFormat::setFontHintingPreference(QFont::HintingPreference <db:emphasis>hintingPreference</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontHintingPreference</db:methodname>
<db:methodparam>
<db:type>QFont::HintingPreference</db:type>
<db:parameter>hintingPreference</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontHintingPreference(QFont::HintingPreference hintingPreference)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the hinting preference of the text format's font to be <db:code role="parameter">hintingPreference</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontHintingPreference">fontHintingPreference</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setHintingPreference">QFont::setHintingPreference</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontItalic">
<db:title>void QTextCharFormat::setFontItalic(bool <db:emphasis>italic</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontItalic</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>italic</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontItalic(bool italic)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">italic</db:code> is true, sets the text format's font to be italic; otherwise the font will be non-italic.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontItalic">fontItalic</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontKerning">
<db:title>void QTextCharFormat::setFontKerning(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontKerning</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontKerning(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables kerning for this font if <db:code role="parameter">enable</db:code> is true; otherwise disables it.</db:para>
<db:para>When kerning is enabled, glyph metrics do not add up anymore, even for Latin text. In other words, the assumption that width('a') + width('b') is equal to width(&quot;ab&quot;) is not neccesairly true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontKerning">fontKerning</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontLetterSpacing">
<db:title>void QTextCharFormat::setFontLetterSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontLetterSpacing</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontLetterSpacing(qreal spacing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the letter spacing of this format to the given <db:code role="parameter">spacing</db:code>. The meaning of the value depends on the font letter spacing type.</db:para>
<db:para>For percentage spacing a value of 100 indicates default spacing; a value of 200 doubles the amount of space a letter takes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontLetterSpacing">fontLetterSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFontLetterSpacingType">setFontLetterSpacingType</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#fontLetterSpacingType">fontLetterSpacingType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontLetterSpacingType">
<db:title>[since 5.0] void QTextCharFormat::setFontLetterSpacingType(QFont::SpacingType <db:emphasis>letterSpacingType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontLetterSpacingType</db:methodname>
<db:methodparam>
<db:type>QFont::SpacingType</db:type>
<db:parameter>letterSpacingType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontLetterSpacingType(QFont::SpacingType letterSpacingType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the letter spacing type of this format to <db:code role="parameter">letterSpacingType</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontLetterSpacingType">fontLetterSpacingType</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFontLetterSpacing">setFontLetterSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#fontLetterSpacing">fontLetterSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontOverline">
<db:title>void QTextCharFormat::setFontOverline(bool <db:emphasis>overline</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontOverline</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>overline</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontOverline(bool overline)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">overline</db:code> is true, sets the text format's font to be overlined; otherwise the font is displayed non-overlined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontOverline">fontOverline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontPointSize">
<db:title>void QTextCharFormat::setFontPointSize(qreal <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontPointSize</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontPointSize(qreal size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text format's font <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontPointSize">fontPointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontStretch">
<db:title>[since 5.0] void QTextCharFormat::setFontStretch(int <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontStretch(int factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the stretch factor for the font to <db:code role="parameter">factor</db:code>.</db:para>
<db:para>The stretch factor changes the width of all characters in the font by factor percent. For example, setting <db:code role="parameter">factor</db:code> to 150 results in all characters in the font being 1.5 times (ie. 150%) wider. The default stretch factor is 100. The minimum stretch factor is 1, and the maximum stretch factor is 4000.</db:para>
<db:para>The stretch factor is only applied to outline fonts. The stretch factor is ignored for bitmap fonts.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontStretch">fontStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontStrikeOut">
<db:title>void QTextCharFormat::setFontStrikeOut(bool <db:emphasis>strikeOut</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontStrikeOut</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>strikeOut</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontStrikeOut(bool strikeOut)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">strikeOut</db:code> is true, sets the text format's font with strike-out enabled (with a horizontal line through it); otherwise it is displayed without strikeout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontStrikeOut">fontStrikeOut</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontStyleHint">
<db:title>void QTextCharFormat::setFontStyleHint(QFont::StyleHint <db:emphasis>hint</db:emphasis>, QFont::StyleStrategy <db:emphasis>strategy</db:emphasis> = QFont::PreferDefault)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontStyleHint</db:methodname>
<db:methodparam>
<db:type>QFont::StyleHint</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFont::StyleStrategy</db:type>
<db:parameter>strategy</db:parameter>
<db:initializer>QFont::PreferDefault</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontStyleHint(QFont::StyleHint hint, QFont::StyleStrategy strategy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the font style <db:code role="parameter">hint</db:code> and <db:code role="parameter">strategy</db:code>.</db:para>
<db:para>Qt does not support style hints on X11 since this information is not provided by the window system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontStyleHint">fontStyleHint</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setStyleHint">QFont::setStyleHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontStyleName">
<db:title>[since 5.13] void QTextCharFormat::setFontStyleName(const QString &amp;<db:emphasis>styleName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontStyleName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>styleName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontStyleName(const QString &amp;styleName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text format's font <db:code role="parameter">styleName</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontStyleName">fontStyleName</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setStyleName">QFont::setStyleName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontStyleStrategy">
<db:title>void QTextCharFormat::setFontStyleStrategy(QFont::StyleStrategy <db:emphasis>strategy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontStyleStrategy</db:methodname>
<db:methodparam>
<db:type>QFont::StyleStrategy</db:type>
<db:parameter>strategy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontStyleStrategy(QFont::StyleStrategy strategy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the font style <db:code role="parameter">strategy</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontStyleStrategy">fontStyleStrategy</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setStyleStrategy">QFont::setStyleStrategy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontUnderline">
<db:title>void QTextCharFormat::setFontUnderline(bool <db:emphasis>underline</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontUnderline</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>underline</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontUnderline(bool underline)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">underline</db:code> is true, sets the text format's font to be underlined; otherwise it is displayed non-underlined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontUnderline">fontUnderline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontWeight">
<db:title>void QTextCharFormat::setFontWeight(int <db:emphasis>weight</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontWeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>weight</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontWeight(int weight)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text format's font weight to <db:code role="parameter">weight</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontWeight">fontWeight</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#Weight-enum">QFont::Weight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontWordSpacing">
<db:title>void QTextCharFormat::setFontWordSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontWordSpacing</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontWordSpacing(qreal spacing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the word spacing of this format to the given <db:code role="parameter">spacing</db:code>, in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#fontWordSpacing">fontWordSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSubScriptBaseline">
<db:title>[since 6.0] void QTextCharFormat::setSubScriptBaseline(qreal <db:emphasis>baseline</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSubScriptBaseline</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>baseline</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSubScriptBaseline(qreal baseline)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the subscript's base line as a % of font height to <db:code role="parameter">baseline</db:code>. The default value is 16.67% (1/6 of height)</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#subScriptBaseline">subScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setSuperScriptBaseline">setSuperScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#superScriptBaseline">superScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setBaselineOffset">setBaselineOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#baselineOffset">baselineOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSuperScriptBaseline">
<db:title>[since 6.0] void QTextCharFormat::setSuperScriptBaseline(qreal <db:emphasis>baseline</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSuperScriptBaseline</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>baseline</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSuperScriptBaseline(qreal baseline)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the superscript's base line as a % of font height to <db:code role="parameter">baseline</db:code>. The default value is 50% (1/2 of height).</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#superScriptBaseline">superScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setSubScriptBaseline">setSubScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#subScriptBaseline">subScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setBaselineOffset">setBaselineOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#baselineOffset">baselineOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextOutline">
<db:title>void QTextCharFormat::setTextOutline(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextOutline</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextOutline(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen used to draw the outlines of characters to the given <db:code role="parameter">pen</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#textOutline">textOutline</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToolTip">
<db:title>void QTextCharFormat::setToolTip(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setToolTip</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setToolTip(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the tool tip for a fragment of text to the given <db:code role="parameter">text</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#toolTip">toolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUnderlineColor">
<db:title>void QTextCharFormat::setUnderlineColor(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUnderlineColor</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUnderlineColor(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the underline color used for the characters with this format to the <db:code role="parameter">color</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#underlineColor">underlineColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUnderlineStyle">
<db:title>void QTextCharFormat::setUnderlineStyle(QTextCharFormat::UnderlineStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUnderlineStyle</db:methodname>
<db:methodparam>
<db:type>QTextCharFormat::UnderlineStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUnderlineStyle(QTextCharFormat::UnderlineStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the style of underlining the text to <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#underlineStyle">underlineStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalAlignment">
<db:title>void QTextCharFormat::setVerticalAlignment(QTextCharFormat::VerticalAlignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVerticalAlignment</db:methodname>
<db:methodparam>
<db:type>QTextCharFormat::VerticalAlignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVerticalAlignment(QTextCharFormat::VerticalAlignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the vertical alignment used for the characters with this format to the <db:code role="parameter">alignment</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#verticalAlignment">verticalAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subScriptBaseline">
<db:title>[since 6.0] qreal QTextCharFormat::subScriptBaseline() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>subScriptBaseline</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal subScriptBaseline() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the subscript's base line as a % of font height.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setSubScriptBaseline">setSubScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setSuperScriptBaseline">setSuperScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#superScriptBaseline">superScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setBaselineOffset">setBaselineOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#baselineOffset">baselineOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="superScriptBaseline">
<db:title>[since 6.0] qreal QTextCharFormat::superScriptBaseline() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>superScriptBaseline</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal superScriptBaseline() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the superscript's base line as a % of font height.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setSuperScriptBaseline">setSuperScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setSubScriptBaseline">setSubScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#subScriptBaseline">subScriptBaseline</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#setBaselineOffset">setBaselineOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcharformat.xml#baselineOffset">baselineOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textOutline">
<db:title>QPen QTextCharFormat::textOutline() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPen</db:type>
<db:methodname>textOutline</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen textOutline() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen used to draw the outlines of characters in this format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setTextOutline">setTextOutline</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolTip">
<db:title>QString QTextCharFormat::toolTip() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toolTip</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toolTip() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the tool tip that is displayed for a fragment of text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setToolTip">setToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="underlineColor">
<db:title>QColor QTextCharFormat::underlineColor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>underlineColor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor underlineColor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the color used to underline the characters with this format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setUnderlineColor">setUnderlineColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="underlineStyle">
<db:title>QTextCharFormat::UnderlineStyle QTextCharFormat::underlineStyle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCharFormat::UnderlineStyle</db:type>
<db:methodname>underlineStyle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCharFormat::UnderlineStyle underlineStyle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the style of underlining the text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setUnderlineStyle">setUnderlineStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalAlignment">
<db:title>QTextCharFormat::VerticalAlignment QTextCharFormat::verticalAlignment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCharFormat::VerticalAlignment</db:type>
<db:methodname>verticalAlignment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCharFormat::VerticalAlignment verticalAlignment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical alignment used for characters with this format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml#setVerticalAlignment">setVerticalAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
