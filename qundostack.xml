<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUndoStack Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qundostack.xml">QUndoStack</db:link> class is a stack of <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> objects.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUndoStack</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>For an overview of Qt's Undo Framework, see the <db:link xlink:href="qundo.xml">overview document</db:link>.</db:para>
<db:para>An undo stack maintains a stack of commands that have been applied to a document.</db:para>
<db:para>New commands are pushed on the stack using <db:link xlink:href="qundostack.xml#push">push</db:link>(). Commands can be undone and redone using <db:link xlink:href="qundostack.xml#undo">undo</db:link>() and <db:link xlink:href="qundostack.xml#redo">redo</db:link>(), or by triggering the actions returned by <db:link xlink:href="qundostack.xml#createUndoAction">createUndoAction</db:link>() and <db:link xlink:href="qundostack.xml#createRedoAction">createRedoAction</db:link>().</db:para>
<db:para><db:link xlink:href="qundostack.xml">QUndoStack</db:link> keeps track of the <db:code role="parameter">current</db:code> command. This is the command which will be executed by the next call to <db:link xlink:href="qundostack.xml#redo">redo</db:link>(). The index of this command is returned by <db:link xlink:href="qundostack.xml#index">index</db:link>(). The state of the edited object can be rolled forward or back using <db:link xlink:href="qundostack.xml#setIndex">setIndex</db:link>(). If the top-most command on the stack has already been redone, <db:link xlink:href="qundostack.xml#index">index</db:link>() is equal to <db:link xlink:href="qundostack.xml#count">count</db:link>().</db:para>
<db:para><db:link xlink:href="qundostack.xml">QUndoStack</db:link> provides support for undo and redo actions, command compression, command macros, and supports the concept of a <db:emphasis>clean state</db:emphasis>.</db:para>
<db:section xml:id="undo-and-redo-actions">
<db:title>Undo and Redo Actions</db:title>
<db:para><db:link xlink:href="qundostack.xml">QUndoStack</db:link> provides convenient undo and redo <db:link xlink:href="qaction.xml">QAction</db:link> objects, which can be inserted into a menu or a toolbar. When commands are undone or redone, <db:link xlink:href="qundostack.xml">QUndoStack</db:link> updates the text properties of these actions to reflect what change they will trigger. The actions are also disabled when no command is available for undo or redo. These actions are returned by <db:link xlink:href="qundostack.xml#createUndoAction">QUndoStack::createUndoAction</db:link>() and <db:link xlink:href="qundostack.xml#createRedoAction">QUndoStack::createRedoAction</db:link>().</db:para>
</db:section>
<db:section xml:id="command-compression-and-macros">
<db:title>Command Compression and Macros</db:title>
<db:para>Command compression is useful when several commands can be compressed into a single command that can be undone and redone in a single operation. For example, when a user types a character in a text editor, a new command is created. This command inserts the character into the document at the cursor position. However, it is more convenient for the user to be able to undo or redo typing of whole words, sentences, or paragraphs. Command compression allows these single-character commands to be merged into a single command which inserts or deletes sections of text. For more information, see <db:link xlink:href="qundocommand.xml#mergeWith">QUndoCommand::mergeWith</db:link>() and <db:link xlink:href="qundostack.xml#push">push</db:link>().</db:para>
<db:para>A command macro is a sequence of commands, all of which are undone and redone in one go. Command macros are created by giving a command a list of child commands. Undoing or redoing the parent command will cause the child commands to be undone or redone. Command macros may be created explicitly by specifying a parent in the <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> constructor, or by using the convenience functions <db:link xlink:href="qundostack.xml#beginMacro">beginMacro</db:link>() and <db:link xlink:href="qundostack.xml#endMacro">endMacro</db:link>().</db:para>
<db:para>Although command compression and macros appear to have the same effect to the user, they often have different uses in an application. Commands that perform small changes to a document may be usefully compressed if there is no need to individually record them, and if only larger changes are relevant to the user. However, for commands that need to be recorded individually, or those that cannot be compressed, it is useful to use macros to provide a more convenient user experience while maintaining a record of each command.</db:para>
</db:section>
<db:section xml:id="clean-state">
<db:title>Clean State</db:title>
<db:para><db:link xlink:href="qundostack.xml">QUndoStack</db:link> supports the concept of a clean state. When the document is saved to disk, the stack can be marked as clean using <db:link xlink:href="qundostack.xml#setClean">setClean</db:link>(). Whenever the stack returns to this state through undoing and redoing commands, it emits the signal <db:link xlink:href="qundostack.xml#cleanChanged">cleanChanged</db:link>(). This signal is also emitted when the stack leaves the clean state. This signal is usually used to enable and disable the save actions in the application, and to update the document's title to reflect that it contains unsaved changes.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml">QUndoCommand</db:link></db:member>
<db:member><db:link xlink:href="qundoview.xml">QUndoView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>active : bool</db:title>
<db:para>This property holds the active status of this stack.</db:para>
<db:para>An application often has multiple undo stacks, one for each opened document. The active stack is the one associated with the currently active document. If the stack belongs to a <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link>, calls to <db:link xlink:href="qundogroup.xml#undo">QUndoGroup::undo</db:link>() or <db:link xlink:href="qundogroup.xml#redo">QUndoGroup::redo</db:link>() will be forwarded to this stack when it is active. If the <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link> is watched by a <db:link xlink:href="qundoview.xml">QUndoView</db:link>, the view will display the contents of this stack when it is active. If the stack does not belong to a <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link>, making it active has no effect.</db:para>
<db:para>It is the programmer's responsibility to specify which stack is active by calling setActive(), usually when the associated document window receives focus.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isActive</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setActive</db:emphasis>(<db:type>bool</db:type> <db:emphasis>active</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml">QUndoGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoLimit-prop">
<db:title>[since 4.3] undoLimit : int</db:title>
<db:para>This property holds the maximum number of commands on this stack.</db:para>
<db:para>When the number of commands on a stack exceedes the stack's undoLimit, commands are deleted from the bottom of the stack. Macro commands (commands with child commands) are treated as one command. The default value is 0, which means that there is no limit.</db:para>
<db:para>This property may only be set when the undo stack is empty, since setting it on a non-empty stack might delete the command at the current index. Calling setUndoLimit() on a non-empty stack prints a warning and does nothing.</db:para>
<db:para>This property was introduced in Qt 4.3.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">undoLimit</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUndoLimit</db:emphasis>(<db:type>int</db:type> <db:emphasis>limit</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUndoStack">
<db:title>[explicit] QUndoStack::QUndoStack(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs an empty undo stack with the parent <db:code role="parameter">parent</db:code>. The stack will initially be in the clean state. If <db:code role="parameter">parent</db:code> is a <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link> object, the stack is automatically added to the group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#push">push</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QUndoStack">
<db:title>[virtual noexcept] QUndoStack::~QUndoStack()</db:title>
<db:para>Destroys the undo stack, deleting any commands that are on it. If the stack is in a <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link>, the stack is automatically removed from the group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#QUndoStack">QUndoStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginMacro">
<db:title>void QUndoStack::beginMacro(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Begins composition of a macro command with the given <db:code role="parameter">text</db:code> description.</db:para>
<db:para>An empty command described by the specified <db:code role="parameter">text</db:code> is pushed on the stack. Any subsequent commands pushed on the stack will be appended to the empty command's children until <db:link xlink:href="qundostack.xml#endMacro">endMacro</db:link>() is called.</db:para>
<db:para>Calls to beginMacro() and <db:link xlink:href="qundostack.xml#endMacro">endMacro</db:link>() may be nested, but every call to beginMacro() must have a matching call to <db:link xlink:href="qundostack.xml#endMacro">endMacro</db:link>().</db:para>
<db:para>While a macro is being composed, the stack is disabled. This means that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qundostack.xml#indexChanged">indexChanged</db:link>() and <db:link xlink:href="qundostack.xml#cleanChanged">cleanChanged</db:link>() are not emitted,</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qundostack.xml#canUndo">canUndo</db:link>() and <db:link xlink:href="qundostack.xml#canRedo">canRedo</db:link>() return false,</db:para>
</db:listitem>
<db:listitem>
<db:para>calling <db:link xlink:href="qundostack.xml#undo">undo</db:link>() or <db:link xlink:href="qundostack.xml#redo">redo</db:link>() has no effect,</db:para>
</db:listitem>
<db:listitem>
<db:para>the undo/redo actions are disabled.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The stack becomes enabled and appropriate signals are emitted when <db:link xlink:href="qundostack.xml#endMacro">endMacro</db:link>() is called for the outermost macro.</db:para>
<db:programlisting language="cpp">stack.beginMacro(&quot;insert red text&quot;);
stack.push(new InsertText(document, idx, text));
stack.push(new SetColor(document, idx, text.length(), Qt::red));
stack.endMacro(); // indexChanged() is emitted
</db:programlisting>
<db:para>This code is equivalent to:</db:para>
<db:programlisting language="cpp">QUndoCommand *insertRed = new QUndoCommand(); // an empty command
insertRed-&gt;setText(&quot;insert red text&quot;);

new InsertText(document, idx, text, insertRed); // becomes child of insertRed
new SetColor(document, idx, text.length(), Qt::red, insertRed);

stack.push(insertRed);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#endMacro">endMacro</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canRedo">
<db:title>bool QUndoStack::canRedo() const</db:title>
<db:para>Returns true if there is a command available for redo; otherwise returns false.</db:para>
<db:para>This function returns false if the stack is empty or if the top command on the stack has already been redone.</db:para>
<db:para>Synonymous with <db:link xlink:href="qundostack.xml#index">index</db:link>() == <db:link xlink:href="qundostack.xml#count">count</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#index">index</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#canUndo">canUndo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canRedoChanged">
<db:title>void QUndoStack::canRedoChanged(bool <db:emphasis>canRedo</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the value of <db:link xlink:href="qundostack.xml#canRedo">canRedo</db:link>() changes. It is used to enable or disable the redo action returned by <db:link xlink:href="qundostack.xml#createRedoAction">createRedoAction</db:link>(). <db:code role="parameter">canRedo</db:code> specifies the new value.</db:para>
</db:section>
<db:section xml:id="canUndo">
<db:title>bool QUndoStack::canUndo() const</db:title>
<db:para>Returns true if there is a command available for undo; otherwise returns false.</db:para>
<db:para>This function returns false if the stack is empty, or if the bottom command on the stack has already been undone.</db:para>
<db:para>Synonymous with <db:link xlink:href="qundostack.xml#index">index</db:link>() == 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#index">index</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#canRedo">canRedo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canUndoChanged">
<db:title>void QUndoStack::canUndoChanged(bool <db:emphasis>canUndo</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the value of <db:link xlink:href="qundostack.xml#canUndo">canUndo</db:link>() changes. It is used to enable or disable the undo action returned by <db:link xlink:href="qundostack.xml#createUndoAction">createUndoAction</db:link>(). <db:code role="parameter">canUndo</db:code> specifies the new value.</db:para>
</db:section>
<db:section xml:id="cleanChanged">
<db:title>void QUndoStack::cleanChanged(bool <db:emphasis>clean</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the stack enters or leaves the clean state. If <db:code role="parameter">clean</db:code> is true, the stack is in a clean state; otherwise this signal indicates that it has left the clean state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#isClean">isClean</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#setClean">setClean</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cleanIndex">
<db:title>int QUndoStack::cleanIndex() const</db:title>
<db:para>Returns the clean index. This is the index at which <db:link xlink:href="qundostack.xml#setClean">setClean</db:link>() was called.</db:para>
<db:para>A stack may not have a clean index. This happens if a document is saved, some commands are undone, then a new command is pushed. Since <db:link xlink:href="qundostack.xml#push">push</db:link>() deletes all the undone commands before pushing the new command, the stack can't return to the clean state again. In this case, this function returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#isClean">isClean</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#setClean">setClean</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QUndoStack::clear()</db:title>
<db:para>Clears the command stack by deleting all commands on it, and returns the stack to the clean state.</db:para>
<db:para>Commands are not undone or redone; the state of the edited object remains unchanged.</db:para>
<db:para>This function is usually used when the contents of the document are abandoned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#QUndoStack">QUndoStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="command">
<db:title>[since 4.4] const QUndoCommand *QUndoStack::command(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns a const pointer to the command at <db:code role="parameter">index</db:code>.</db:para>
<db:para>This function returns a const pointer, because modifying a command, once it has been pushed onto the stack and executed, almost always causes corruption of the state of the document, if the command is later undone or redone.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#child">QUndoCommand::child</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>int QUndoStack::count() const</db:title>
<db:para>Returns the number of commands on the stack. Macro commands are counted as one command.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#index">index</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#setIndex">setIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#command">command</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createRedoAction">
<db:title>QAction *QUndoStack::createRedoAction(QObject *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>prefix</db:emphasis> = QString()) const</db:title>
<db:para>Creates an redo <db:link xlink:href="qaction.xml">QAction</db:link> object with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Triggering this action will cause a call to <db:link xlink:href="qundostack.xml#redo">redo</db:link>(). The text of this action is the text of the command which will be redone in the next call to <db:link xlink:href="qundostack.xml#redo">redo</db:link>(), prefixed by the specified <db:code role="parameter">prefix</db:code>. If there is no command available for redo, this action will be disabled.</db:para>
<db:para>If <db:code role="parameter">prefix</db:code> is empty, the default template &quot;Redo %1&quot; is used instead of prefix. Before Qt 4.8, the prefix &quot;Redo&quot; was used by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#createUndoAction">createUndoAction</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#canRedo">canRedo</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#text">QUndoCommand::text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUndoAction">
<db:title>QAction *QUndoStack::createUndoAction(QObject *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>prefix</db:emphasis> = QString()) const</db:title>
<db:para>Creates an undo <db:link xlink:href="qaction.xml">QAction</db:link> object with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Triggering this action will cause a call to <db:link xlink:href="qundostack.xml#undo">undo</db:link>(). The text of this action is the text of the command which will be undone in the next call to <db:link xlink:href="qundostack.xml#undo">undo</db:link>(), prefixed by the specified <db:code role="parameter">prefix</db:code>. If there is no command available for undo, this action will be disabled.</db:para>
<db:para>If <db:code role="parameter">prefix</db:code> is empty, the default template &quot;Undo %1&quot; is used instead of prefix. Before Qt 4.8, the prefix &quot;Undo&quot; was used by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#createRedoAction">createRedoAction</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#canUndo">canUndo</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#text">QUndoCommand::text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endMacro">
<db:title>void QUndoStack::endMacro()</db:title>
<db:para>Ends composition of a macro command.</db:para>
<db:para>If this is the outermost macro in a set nested macros, this function emits <db:link xlink:href="qundostack.xml#indexChanged">indexChanged</db:link>() once for the entire macro command.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#beginMacro">beginMacro</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>int QUndoStack::index() const</db:title>
<db:para>Returns the index of the current command. This is the command that will be executed on the next call to <db:link xlink:href="qundostack.xml#redo">redo</db:link>(). It is not always the top-most command on the stack, since a number of commands may have been undone.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#setIndex">setIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#undo">undo</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#redo">redo</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexChanged">
<db:title>void QUndoStack::indexChanged(int <db:emphasis>idx</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a command modifies the state of the document. This happens when a command is undone or redone. When a macro command is undone or redone, or <db:link xlink:href="qundostack.xml#setIndex">setIndex</db:link>() is called, this signal is emitted only once.</db:para>
<db:para><db:code role="parameter">idx</db:code> specifies the index of the current command, ie. the command which will be executed on the next call to <db:link xlink:href="qundostack.xml#redo">redo</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#index">index</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#setIndex">setIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isClean">
<db:title>bool QUndoStack::isClean() const</db:title>
<db:para>If the stack is in the clean state, returns true; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#setClean">setClean</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#cleanIndex">cleanIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="push">
<db:title>void QUndoStack::push(QUndoCommand *<db:emphasis>cmd</db:emphasis>)</db:title>
<db:para>Pushes <db:code role="parameter">cmd</db:code> on the stack or merges it with the most recently executed command. In either case, executes <db:code role="parameter">cmd</db:code> by calling its <db:link xlink:href="qundostack.xml#redo">redo</db:link>() function.</db:para>
<db:para>If <db:code role="parameter">cmd</db:code>'s id is not -1, and if the id is the same as that of the most recently executed command, <db:link xlink:href="qundostack.xml">QUndoStack</db:link> will attempt to merge the two commands by calling <db:link xlink:href="qundocommand.xml#mergeWith">QUndoCommand::mergeWith</db:link>() on the most recently executed command. If <db:link xlink:href="qundocommand.xml#mergeWith">QUndoCommand::mergeWith</db:link>() returns true, <db:code role="parameter">cmd</db:code> is deleted.</db:para>
<db:para>In all other cases <db:code role="parameter">cmd</db:code> is simply pushed on the stack.</db:para>
<db:para>If commands were undone before <db:code role="parameter">cmd</db:code> was pushed, the current command and all commands above it are deleted. Hence <db:code role="parameter">cmd</db:code> always ends up being the top-most on the stack.</db:para>
<db:para>Once a command is pushed, the stack takes ownership of it. There are no getters to return the command, since modifying it after it has been executed will almost always lead to corruption of the document's state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#id">QUndoCommand::id</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#mergeWith">QUndoCommand::mergeWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redo">
<db:title>void QUndoStack::redo()</db:title>
<db:para>Redoes the current command by calling <db:link xlink:href="qundocommand.xml#redo">QUndoCommand::redo</db:link>(). Increments the current command index.</db:para>
<db:para>If the stack is empty, or if the top command on the stack has already been redone, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#undo">undo</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#index">index</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redoText">
<db:title>QString QUndoStack::redoText() const</db:title>
<db:para>Returns the text of the command which will be redone in the next call to <db:link xlink:href="qundostack.xml#redo">redo</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#actionText">QUndoCommand::actionText</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#undoText">undoText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redoTextChanged">
<db:title>void QUndoStack::redoTextChanged(const QString &amp;<db:emphasis>redoText</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the value of <db:link xlink:href="qundostack.xml#redoText">redoText</db:link>() changes. It is used to update the text property of the redo action returned by <db:link xlink:href="qundostack.xml#createRedoAction">createRedoAction</db:link>(). <db:code role="parameter">redoText</db:code> specifies the new text.</db:para>
</db:section>
<db:section xml:id="setClean">
<db:title>void QUndoStack::setClean()</db:title>
<db:para>Marks the stack as clean and emits <db:link xlink:href="qundostack.xml#cleanChanged">cleanChanged</db:link>() if the stack was not already clean.</db:para>
<db:para>This is typically called when a document is saved, for example.</db:para>
<db:para>Whenever the stack returns to this state through the use of undo/redo commands, it emits the signal <db:link xlink:href="qundostack.xml#cleanChanged">cleanChanged</db:link>(). This signal is also emitted when the stack leaves the clean state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#isClean">isClean</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#cleanIndex">cleanIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIndex">
<db:title>void QUndoStack::setIndex(int <db:emphasis>idx</db:emphasis>)</db:title>
<db:para>Repeatedly calls <db:link xlink:href="qundostack.xml#undo">undo</db:link>() or <db:link xlink:href="qundostack.xml#redo">redo</db:link>() until the current command index reaches <db:code role="parameter">idx</db:code>. This function can be used to roll the state of the document forwards of backwards. <db:link xlink:href="qundostack.xml#indexChanged">indexChanged</db:link>() is emitted only once.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#index">index</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#undo">undo</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#redo">redo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text">
<db:title>QString QUndoStack::text(int <db:emphasis>idx</db:emphasis>) const</db:title>
<db:para>Returns the text of the command at index <db:code role="parameter">idx</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#beginMacro">beginMacro</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undo">
<db:title>void QUndoStack::undo()</db:title>
<db:para>Undoes the command below the current command by calling <db:link xlink:href="qundocommand.xml#undo">QUndoCommand::undo</db:link>(). Decrements the current command index.</db:para>
<db:para>If the stack is empty, or if the bottom command on the stack has already been undone, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#redo">redo</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#index">index</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoText">
<db:title>QString QUndoStack::undoText() const</db:title>
<db:para>Returns the text of the command which will be undone in the next call to <db:link xlink:href="qundostack.xml#undo">undo</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#actionText">QUndoCommand::actionText</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#redoText">redoText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoTextChanged">
<db:title>void QUndoStack::undoTextChanged(const QString &amp;<db:emphasis>undoText</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the value of <db:link xlink:href="qundostack.xml#undoText">undoText</db:link>() changes. It is used to update the text property of the undo action returned by <db:link xlink:href="qundostack.xml#createUndoAction">createUndoAction</db:link>(). <db:code role="parameter">undoText</db:code> specifies the new text.</db:para>
</db:section>
</db:section>
</db:article>
