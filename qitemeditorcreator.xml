<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QItemEditorCreator Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qitemeditorcreator.xml">QItemEditorCreator</db:link> class makes it possible to create item editor creator bases without subclassing QItemEditorCreatorBase.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QItemEditorCreator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QItemEditorCreator is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qitemeditorcreator.xml">QItemEditorCreator</db:link> is a convenience template class. It uses the template class to create editors for QItemEditorFactory. This way, it is not necessary to subclass QItemEditorCreatorBase.</db:para>
<db:programlisting language="cpp">QItemEditorCreator&amp;lt;MyEditor&amp;gt; *itemCreator =
    new QItemEditorCreator&amp;lt;MyEditor&amp;gt;(&quot;myProperty&quot;);

QItemEditorFactory *factory = new QItemEditorFactory;
</db:programlisting>
<db:para>The constructor takes the name of the property that contains the editing data. QStyledItemDelegate can then access the property by name when it sets and retrieves editing data. Only use this class if your editor does not define a user property (using the USER keyword in the <db:link xlink:href="qobject-proxy.xml#Q_PROPERTY">Q_PROPERTY</db:link> macro). If the widget has a user property, you should use <db:link xlink:href="qstandarditemeditorcreator.xml">QStandardItemEditorCreator</db:link> instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QItemEditorCreatorBase</db:member>
<db:member><db:link xlink:href="qstandarditemeditorcreator.xml">QStandardItemEditorCreator</db:link></db:member>
<db:member>QItemEditorFactory</db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-coloreditorfactory-example.xml">Color Editor Factory Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QItemEditorCreator-1">
<db:title>[default] QItemEditorCreator::QItemEditorCreator(const QByteArray &amp;<db:emphasis>valuePropertyName</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QItemEditorCreator</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>valuePropertyName</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemEditorCreator(const QByteArray &amp;valuePropertyName) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an editor creator object using <db:code role="parameter">valuePropertyName</db:code> as the name of the property to be used for editing. The property name is used by QStyledItemDelegate when setting and getting editor data.</db:para>
<db:para>Note that the <db:code role="parameter">valuePropertyName</db:code> is only used if the editor widget does not have a user property defined.</db:para>
</db:section>
<db:section xml:id="createWidget">
<db:title>QWidget *QItemEditorCreator::createWidget(QWidget *<db:emphasis>parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>createWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * createWidget(QWidget *parent) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
</db:section>
<db:section xml:id="valuePropertyName">
<db:title>int QItemEditorCreator::valuePropertyName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>valuePropertyName</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int valuePropertyName() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
</db:section>
</db:section>
</db:article>
