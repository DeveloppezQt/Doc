<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPaintEngineState Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpaintenginestate.xml">QPaintEngineState</db:link> class provides information about the active paint engine's current state.</db:para>
<db:para>This class was introduced in Qt 4.1.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPaintEngineState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpaintenginestate.xml">QPaintEngineState</db:link> records which properties that have changed since the last time the paint engine was updated, as well as their current value.</db:para>
<db:para>Which properties that have changed can at any time be retrieved using the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() function. This function returns an instance of the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyFlags</db:link> type which stores an OR combination of <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyFlag</db:link> values. The <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyFlag</db:link> enum defines whether a property has changed since the last update or not.</db:para>
<db:para>If a property is marked with a dirty flag, its current value can be retrieved using the corresponding get function:</db:para>
<db:anchor xml:id="getfunction"/>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Property Flag</db:para>
</db:th>
<db:th>
<db:para>Current Property Value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyBackground</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#backgroundBrush">backgroundBrush</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyBackgroundMode</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#backgroundMode">backgroundMode</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyBrush</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#brush">brush</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyBrushOrigin</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#brushOrigin">brushOrigin</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipRegion</db:link> <db:emphasis>or</db:emphasis> <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipPath</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#clipOperation">clipOperation</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipPath</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#clipPath">clipPath</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipRegion</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#clipRegion">clipRegion</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyCompositionMode</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#compositionMode">compositionMode</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyFont</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#font">font</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyTransform</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#transform">transform</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipEnabled</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#isClipEnabled">isClipEnabled</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyPen</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#pen">pen</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyHints</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpaintenginestate.xml#renderHints">renderHints</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qpaintenginestate.xml">QPaintEngineState</db:link> class also provide the <db:link xlink:href="qpaintenginestate.xml#painter">painter</db:link>() function which returns a pointer to the painter that is currently updating the paint engine.</db:para>
<db:para>An instance of this class, representing the current state of the active paint engine, is passed as argument to the <db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>() function. The only situation in which you will have to use this class directly is when implementing your own paint engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="backgroundBrush">
<db:title>QBrush QPaintEngineState::backgroundBrush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>backgroundBrush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush backgroundBrush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the background brush in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyBackground</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backgroundMode">
<db:title>Qt::BGMode QPaintEngineState::backgroundMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::BGMode</db:type>
<db:methodname>backgroundMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::BGMode backgroundMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the background mode in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyBackgroundMode</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brush">
<db:title>QBrush QPaintEngineState::brush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>brush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush brush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyBrush</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brushNeedsResolving">
<db:title>[since 4.3] bool QPaintEngineState::brushNeedsResolving() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>brushNeedsResolving</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool brushNeedsResolving() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the coordinate of the fill have been specified as bounded by the current rendering operation and have to be resolved (about the currently rendered primitive).</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="brushOrigin">
<db:title>QPointF QPaintEngineState::brushOrigin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>brushOrigin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF brushOrigin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush origin in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyBrushOrigin</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clipOperation">
<db:title>Qt::ClipOperation QPaintEngineState::clipOperation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::ClipOperation</db:type>
<db:methodname>clipOperation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::ClipOperation clipOperation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the clip operation in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes either the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipPath</db:link> or the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipRegion</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clipPath">
<db:title>QPainterPath QPaintEngineState::clipPath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>clipPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath clipPath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the clip path in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipPath</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clipRegion">
<db:title>QRegion QPaintEngineState::clipRegion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>clipRegion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion clipRegion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the clip region in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipRegion</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compositionMode">
<db:title>QPainter::CompositionMode QPaintEngineState::compositionMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainter::CompositionMode</db:type>
<db:methodname>compositionMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainter::CompositionMode compositionMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the composition mode in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyCompositionMode</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>QFont QPaintEngineState::font() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont</db:type>
<db:methodname>font</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont font() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyFont</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isClipEnabled">
<db:title>bool QPaintEngineState::isClipEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isClipEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isClipEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether clipping is enabled or not in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyClipEnabled</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opacity">
<db:title>[since 4.2] qreal QPaintEngineState::opacity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>opacity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal opacity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the opacity in the current paint engine state.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="painter">
<db:title>QPainter *QPaintEngineState::painter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainter *</db:type>
<db:methodname>painter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainter * painter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the painter currently updating the paint engine.</db:para>
</db:section>
<db:section xml:id="pen">
<db:title>QPen QPaintEngineState::pen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPen</db:type>
<db:methodname>pen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen pen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyPen</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="penNeedsResolving">
<db:title>[since 4.3] bool QPaintEngineState::penNeedsResolving() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>penNeedsResolving</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool penNeedsResolving() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the coordinate of the stroke have been specified as bounded by the current rendering operation and have to be resolved (about the currently rendered primitive).</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="renderHints">
<db:title>QPainter::RenderHints QPaintEngineState::renderHints() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainter::RenderHints</db:type>
<db:methodname>renderHints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainter::RenderHints renderHints() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the render hints in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyHints</db:link> flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QPaintEngine::DirtyFlags QPaintEngineState::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPaintEngine::DirtyFlags</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintEngine::DirtyFlags state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a combination of flags identifying the set of properties that need to be updated when updating the paint engine's state (i.e. during a call to the <db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>() function).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transform">
<db:title>[since 4.3] QTransform QPaintEngineState::transform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>transform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform transform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the matrix in the current paint engine state.</db:para>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyTransform</db:link> flag.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QPaintEngineState</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qpaintenginestate.xml">QPaintEngineState</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="matrix">
<db:title>[since 4.2] QMatrix QPaintEngineState::matrix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMatrix</db:type>
<db:methodname>matrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix matrix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qpaintenginestate.xml#transform">transform</db:link>() instead.</db:para>
<db:para>Returns the matrix in the current paint engine state.</db:para>
<db:note>
<db:para>It is advisable to use <db:link xlink:href="qpaintenginestate.xml#transform">transform</db:link>() instead of this function to preserve the properties of perspective transformations.</db:para>
</db:note>
<db:para>This variable should only be used when the <db:link xlink:href="qpaintenginestate.xml#state">state</db:link>() returns a combination which includes the <db:link xlink:href="qpaintengine.xml#DirtyFlag-enum">QPaintEngine::DirtyTransform</db:link> flag.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
