<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXYSeries Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxyseries.xml">QXYSeries</db:link> class is a base class for line, spline, and scatter series.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXYSeries</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlineseries.xml" xlink:role="class">QLineSeries</db:link> and <db:link xlink:href="qscatterseries.xml" xlink:role="class">QScatterSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtcharts-xyseries.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractseries.xml" xlink:role="class">QAbstractSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlineseries.xml" xlink:role="class">QLineSeries</db:link> and <db:link xlink:href="qscatterseries.xml" xlink:role="class">QScatterSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qxyseries.xml">QXYSeries</db:link> supports displaying best fit line on a chart. Best fit line is a line through a chart that expresses the relationship between points.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PointConfiguration-enum">
<db:title>enum QXYSeries::PointConfiguration</db:title>
<db:enumsynopsis>
<db:enumname>PointConfiguration</db:enumname>
<db:enumitem>
<db:enumidentifier>Color</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Size</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Visibility</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LabelVisibility</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LabelFormat</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum value describes the particular configuration of a point.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxyseries.xml">QXYSeries</db:link></db:emphasis>::<db:emphasis role="bold">PointConfiguration</db:emphasis>::Color</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This enum value can be used to change a point's color. If used together with <db:link xlink:href="qxyseries.xml#setPointConfiguration">QXYSeries::setPointConfiguration</db:link>, the configuration's value should be a valid <db:link xlink:href="qcolor.xml">QColor</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxyseries.xml">QXYSeries</db:link></db:emphasis>::<db:emphasis role="bold">PointConfiguration</db:emphasis>::Size</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This enum value can be used to change a point's size. If used together with <db:link xlink:href="qxyseries.xml#setPointConfiguration">QXYSeries::setPointConfiguration</db:link>, the configuration's value should be a number, such as <db:code>qreal</db:code> or <db:code>int</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxyseries.xml">QXYSeries</db:link></db:emphasis>::<db:emphasis role="bold">PointConfiguration</db:emphasis>::Visibility</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This enum value can be used to hide or show the point. If used together with <db:link xlink:href="qxyseries.xml#setPointConfiguration">QXYSeries::setPointConfiguration</db:link>, the configuration's value should be boolean.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxyseries.xml">QXYSeries</db:link></db:emphasis>::<db:emphasis role="bold">PointConfiguration</db:emphasis>::LabelVisibility</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This enum value can be used to hide or show the label of the point. If used together with <db:link xlink:href="qxyseries.xml#setPointConfiguration">QXYSeries::setPointConfiguration</db:link>, the configuration's value should be boolean.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointConfiguration">setPointConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="bestFitLineColor-prop">
<db:title>[since 6.2] bestFitLineColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>bestFitLineColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">bestFitLineColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setBestFitLineColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">bestFitLineColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color of best fit line.</db:para>
<db:para>This property was introduced in Qt 6.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">bestFitLineColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBestFitLineColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#bestFitLineColorChanged">bestFitLineColorChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#bestFitLineEquation">bestFitLineEquation</db:link></db:member>
<db:member><db:link xlink:href="qxyseries.xml#bestFitLineVisible-prop">bestFitLineVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bestFitLineVisible-prop">
<db:title>[since 6.2] bestFitLineVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>bestFitLineVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">bestFitLineVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setBestFitLineVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">bestFitLineVisibilityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visibility of the best fit line.</db:para>
<db:para>This property is <db:code>false</db:code> by default.</db:para>
<db:para>This property was introduced in Qt 6.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">bestFitLineVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBestFitLineVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#bestFitLineVisibilityChanged">bestFitLineVisibilityChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#bestFitLineEquation">bestFitLineEquation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="color-prop">
<db:title>color : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>color</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">color</db:synopsisinfo>
<db:synopsisinfo role="setter">setColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">colorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color of the series.</db:para>
<db:para>This is the line (pen) color in case of <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> or <db:link xlink:href="qsplineseries.xml">QSplineSeries</db:link> and the fill (brush) color in case of <db:link xlink:href="qscatterseries.xml">QScatterSeries</db:link> or <db:link xlink:href="qareaseries.xml">QAreaSeries</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#color">color</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para>virtual <db:type>void</db:type> <db:emphasis role="bold">setColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#colorChanged">colorChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pen">pen</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsClipping-prop">
<db:title>pointLabelsClipping : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>pointLabelsClipping</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsClipping</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsClipping</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsClippingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the clipping for data point labels.</db:para>
<db:para>This property is <db:code>true</db:code> by default. The labels on the edge of the plot area are cut when clipping is enabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">pointLabelsClipping</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsClipping</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsClippingChanged">pointLabelsClippingChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>clipping</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsVisible-prop">pointLabelsVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsColor-prop">
<db:title>pointLabelsColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>pointLabelsColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color used for data point labels. By default, the color is the color of the brush defined in theme for labels.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">pointLabelsColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsColorChanged">pointLabelsColorChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsFormat-prop">pointLabelsFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsFont-prop">
<db:title>pointLabelsFont : QFont</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QFont</db:type>
<db:varname>pointLabelsFont</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsFont</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsFont</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsFontChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the font used for data point labels.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> <db:emphasis role="bold">pointLabelsFont</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsFont</db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsFontChanged">pointLabelsFontChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsFormat-prop">pointLabelsFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsFormat-prop">
<db:title>pointLabelsFormat : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>pointLabelsFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsFormat</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsFormatChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the format used for showing labels with data points.</db:para>
<db:para><db:link xlink:href="qxyseries.xml">QXYSeries</db:link> supports the following format tags:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>@xPoint</db:para>
</db:td>
<db:td>
<db:para>The x-coordinate of the data point.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>@yPoint</db:para>
</db:td>
<db:td>
<db:para>The y-coordinate of the data point.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, the following usage of the format tags would produce labels that display the data point shown inside brackets separated by a comma (x, y):</db:para>
<db:programlisting language="cpp">series-&amp;gt;setPointLabelsFormat(&quot;(@xPoint, @yPoint)&quot;);
</db:programlisting>
<db:para>By default, the labels' format is set to <db:code>@xPoint, @yPoint</db:code>. The labels are shown on the plot area, and the labels on the edge of the plot area are cut. If the points are close to each other, the labels may overlap.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">pointLabelsFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsFormat</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsFormatChanged">pointLabelsFormatChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsVisible-prop">pointLabelsVisible</db:link></db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsFont-prop">pointLabelsFont</db:link></db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsColor-prop">pointLabelsColor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsVisible-prop">
<db:title>pointLabelsVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>pointLabelsVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsVisibilityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visibility of data point labels.</db:para>
<db:para>This property is <db:code>false</db:code> by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">pointLabelsVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsVisibilityChanged">pointLabelsVisibilityChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsFormat-prop">pointLabelsFormat</db:link></db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsClipping-prop">pointLabelsClipping</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointsVisible-prop">
<db:title>pointsVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>pointsVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointsVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointsVisible</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the data points are visible and should be drawn.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">pointsVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointsVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectedColor-prop">
<db:title>[since 6.2] selectedColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>selectedColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">color</db:synopsisinfo>
<db:synopsisinfo role="setter">setSelectedColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">selectedColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color of the selected points.</db:para>
<db:para>This is the fill (brush) color of points marked as selected. If not specified, value of <db:link xlink:href="qxyseries.xml#color">QXYSeries::color</db:link> is used as default.</db:para>
<db:para>This property was introduced in Qt 6.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#color">color</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSelectedColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">selectedColorChanged</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#color">color</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QXYSeries">
<db:title>[virtual] QXYSeries::~QXYSeries()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QXYSeries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QXYSeries()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the series. Series added to <db:link xlink:href="qchart.xml">QChart</db:link> instances are owned by them, and are deleted when the <db:link xlink:href="qchart.xml">QChart</db:link> instances are deleted.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>void QXYSeries::append(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(qreal x, qreal y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the data point with the coordinates <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> to the series.</db:para>
</db:section>
<db:section xml:id="append-1">
<db:title>void QXYSeries::append(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the data point <db:code role="parameter">point</db:code> to the series.</db:para>
</db:section>
<db:section xml:id="append-2">
<db:title>void QXYSeries::append(const QList&lt;QPointF&gt; &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPointF&gt; &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(const QList&lt;QPointF&gt; &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the list of data points specified by <db:code role="parameter">points</db:code> to the series.</db:para>
</db:section>
<db:section xml:id="at">
<db:title>const QPointF &amp;QXYSeries::at(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QPointF &amp;</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QPointF &amp; at(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data point at the position specified by <db:code role="parameter">index</db:code> in the internal series of points.</db:para>
</db:section>
<db:section xml:id="bestFitLineColorChanged">
<db:title>void QXYSeries::bestFitLineColorChanged(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bestFitLineColorChanged</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">bestFitLineColor</db:synopsisinfo>
<db:synopsisinfo role="signature">void bestFitLineColorChanged(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the color used for the best fit line changes to <db:code role="parameter">color</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#bestFitLineColor-prop">bestFitLineColor</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="bestFitLineEquation">
<db:title>[since 6.2] QPair&lt;qreal, qreal&gt; QXYSeries::bestFitLineEquation(bool &amp;<db:emphasis>ok</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPair&lt;qreal, qreal&gt;</db:type>
<db:methodname>bestFitLineEquation</db:methodname>
<db:methodparam>
<db:type>bool &amp;</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;qreal, qreal&gt; bestFitLineEquation(bool &amp;ok) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pair of numbers where the first number is a slope factor and the second number is intercept of a linear function for a best fit line.</db:para>
<db:para>Those factors are calculated using Least Squares Method based on points passed to the series.</db:para>
<db:para>Parameter <db:code role="parameter">ok</db:code> is used to report a failure by setting its value to <db:code>false</db:code> and to report a success by setting its value to <db:code>true</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#bestFitLineVisible-prop">QXYSeries::bestFitLineVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bestFitLineVisibilityChanged">
<db:title>void QXYSeries::bestFitLineVisibilityChanged(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bestFitLineVisibilityChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">bestFitLineVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void bestFitLineVisibilityChanged(bool visible)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the visibility of the best fit line changes to <db:code role="parameter">visible</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#bestFitLineVisible-prop">bestFitLineVisible</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="brush">
<db:title>QBrush QXYSeries::brush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>brush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush brush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to fill the data points for the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setBrush">setBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QXYSeries::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all points from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointsRemoved">pointsRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearPointConfiguration">
<db:title>[since 6.2] void QXYSeries::clearPointConfiguration(const int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearPointConfiguration</db:methodname>
<db:methodparam>
<db:type>const int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearPointConfiguration(const int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the configuration of a point located at <db:code role="parameter">index</db:code> and restores the default look derived from the series' settings.</db:para>
<db:note>
<db:para>It doesn't affect the configuration of other points.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#clearPointsConfiguration">clearPointsConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#setPointConfiguration">setPointConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearPointConfiguration-1">
<db:title>[since 6.2] void QXYSeries::clearPointConfiguration(const int <db:emphasis>index</db:emphasis>, const QXYSeries::PointConfiguration <db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearPointConfiguration</db:methodname>
<db:methodparam>
<db:type>const int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QXYSeries::PointConfiguration</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearPointConfiguration(const int index, const QXYSeries::PointConfiguration key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the configuration property identified by <db:code role="parameter">key</db:code> from the point at <db:code role="parameter">index</db:code> and restores the default look derived from the series' settings.</db:para>
<db:para>Removes the configuration type, such as color or size, specified by <db:code role="parameter">key</db:code> from the point at <db:code role="parameter">index</db:code> with configuration customizations, allowing that configuration property to be rendered as the default specified in the series' properties.</db:para>
<db:note>
<db:para>It doesn't affect the configuration of other points.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#clearPointsConfiguration">clearPointsConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#setPointConfiguration">setPointConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearPointsConfiguration">
<db:title>[since 6.2] void QXYSeries::clearPointsConfiguration()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearPointsConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearPointsConfiguration()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the configuration of all points in the series and restores the default look derived from the series' settings.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointConfiguration">setPointConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearPointsConfiguration-1">
<db:title>[since 6.2] void QXYSeries::clearPointsConfiguration(const QXYSeries::PointConfiguration <db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearPointsConfiguration</db:methodname>
<db:methodparam>
<db:type>const QXYSeries::PointConfiguration</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearPointsConfiguration(const QXYSeries::PointConfiguration key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the configuration property identified by <db:code role="parameter">key</db:code> from all points and restores the default look derived from the series' settings.</db:para>
<db:para>Removes the configuration type, such as color or size, specified by <db:code role="parameter">key</db:code> from all points with configuration customizations, allowing that configuration property to be rendered as the default specified in the series properties.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#clearPointsConfiguration">clearPointsConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#setPointConfiguration">setPointConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clicked">
<db:title>void QXYSeries::clicked(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clicked</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clicked(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user triggers a mouse event by clicking the point <db:code role="parameter">point</db:code> in the chart.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#doubleClicked">doubleClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorBy">
<db:title>[since 6.2] void QXYSeries::colorBy(const QList&lt;qreal&gt; &amp;<db:emphasis>sourceData</db:emphasis>, const QLinearGradient &amp;<db:emphasis>gradient</db:emphasis> = QLinearGradient())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>colorBy</db:methodname>
<db:methodparam>
<db:type>const QList&lt;qreal&gt; &amp;</db:type>
<db:parameter>sourceData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QLinearGradient &amp;</db:type>
<db:parameter>gradient</db:parameter>
<db:initializer>QLinearGradient()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void colorBy(const QList&lt;qreal&gt; &amp;sourceData, const QLinearGradient &amp;gradient)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the points' color according to a passed list of values. Values from <db:code role="parameter">sourceData</db:code> are sorted and mapped to the <db:code role="parameter">gradient</db:code>.</db:para>
<db:para>If the series has a <db:link xlink:href="qcoloraxis.xml">QColorAxis</db:link> attached, then a gradient from the axis is going to be used.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointConfiguration">setPointConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointConfiguration">pointConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qcoloraxis.xml">QColorAxis</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorChanged">
<db:title>void QXYSeries::colorChanged(QColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>colorChanged</db:methodname>
<db:methodparam>
<db:type>QColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">color</db:synopsisinfo>
<db:synopsisinfo role="signature">void colorChanged(QColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the line (pen) color changes to <db:code role="parameter">color</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#color-prop">color</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="count">
<db:title>int QXYSeries::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of data points in a series.</db:para>
</db:section>
<db:section xml:id="deselectAllPoints">
<db:title>[since 6.2] void QXYSeries::deselectAllPoints()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deselectAllPoints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deselectAllPoints()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deselects all points in the series.</db:para>
<db:note>
<db:para>Emits QXYSeries::selectedPointsChanged</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deselectPoint">
<db:title>[since 6.2] void QXYSeries::deselectPoint(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deselectPoint</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deselectPoint(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deselects point at given <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>Emits QXYSeries::selectedPointsChanged</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deselectPoints">
<db:title>[since 6.2] void QXYSeries::deselectPoints(const QList&lt;int&gt; &amp;<db:emphasis>indexes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deselectPoints</db:methodname>
<db:methodparam>
<db:type>const QList&lt;int&gt; &amp;</db:type>
<db:parameter>indexes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deselectPoints(const QList&lt;int&gt; &amp;indexes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks multiple points passed in a <db:code role="parameter">indexes</db:code> list as deselected.</db:para>
<db:note>
<db:para>Emits QXYSeries::selectedPointsChanged</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="doubleClicked">
<db:title>void QXYSeries::doubleClicked(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>doubleClicked</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void doubleClicked(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user double-clicks the data point <db:code role="parameter">point</db:code> in the chart. The <db:code role="parameter">point</db:code> is the point where the first press was triggered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#clicked">clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hovered">
<db:title>void QXYSeries::hovered(const QPointF &amp;<db:emphasis>point</db:emphasis>, bool <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hovered</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hovered(const QPointF &amp;point, bool state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a mouse is hovered over the point <db:code role="parameter">point</db:code> in the chart. When the mouse moves over the point, <db:code role="parameter">state</db:code> turns <db:code>true</db:code>, and when the mouse moves away again, it turns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>void QXYSeries::insert(int <db:emphasis>index</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(int index, const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the data point <db:code role="parameter">point</db:code> in the series at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointAdded">pointAdded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isPointSelected">
<db:title>[since 6.2] bool QXYSeries::isPointSelected(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isPointSelected</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isPointSelected(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if point at given <db:code role="parameter">index</db:code> is among selected points and false otherwise.</db:para>
<db:note>
<db:para>Selected points are drawn using the selected color if it was specified.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#selectedPoints">selectedPoints</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#selectedColor-prop">setSelectedColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lightMarker">
<db:title>[since 6.2] const QImage &amp;QXYSeries::lightMarker() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QImage &amp;</db:type>
<db:methodname>lightMarker</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QImage &amp; lightMarker() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gets the image used for drawing markers on each point of the series.</db:para>
<db:para>The default value is QImage(), meaning no light marker will be painted.</db:para>
<db:para>The light markers visualize the data points of this series and as such are an alternative to <db:link xlink:href="qxyseries.xml#pointsVisible-prop">setPointsVisible</db:link>(true). Both features can be enabled independently from each other.</db:para>
<db:para>Unlike the elements of <db:link xlink:href="qscatterseries.xml">QScatterSeries</db:link> the light markers are not represented by <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, but are just painted (no objects created). However, the mouse-event-signals of <db:link xlink:href="qxyseries.xml">QXYSeries</db:link> behave the same way, meaning that you'll get the exact domain value of the point if you click/press/hover the light marker. You'll still get the in between domain value if you click on the line. The light markers are above the line in terms of painting as well as events.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setLightMarker">QXYSeries::setLightMarker</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lightMarkerChanged">
<db:title>[since 6.2] void QXYSeries::lightMarkerChanged(const QImage &amp;<db:emphasis>lightMarker</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>lightMarkerChanged</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>lightMarker</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void lightMarkerChanged(const QImage &amp;lightMarker)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the light marker image changes to <db:code role="parameter">lightMarker</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setLightMarker">QXYSeries::setLightMarker</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="markerSize">
<db:title>[since 6.2] qreal QXYSeries::markerSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>markerSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal markerSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gets the size of the marker used to render points in the series.</db:para>
<db:para>The default size depends on the specific <db:link xlink:href="qxyseries.xml">QXYSeries</db:link> type. <db:link xlink:href="qscatterseries.xml">QScatterSeries</db:link> has a default of 15.0 <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> has a default of the series pen size * 1.5</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setMarkerSize">setMarkerSize</db:link>()</db:member>
<db:member><db:link xlink:href="qscatterseries.xml#markerSize-prop">QScatterSeries::markerSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="markerSizeChanged">
<db:title>void QXYSeries::markerSizeChanged(qreal <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>markerSizeChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void markerSizeChanged(qreal size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the marker size changes to <db:code role="parameter">size</db:code>.</db:para>
</db:section>
<db:section xml:id="pen">
<db:title>QPen QXYSeries::pen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPen</db:type>
<db:methodname>pen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen pen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen used to draw the outline of the data points for the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="penChanged">
<db:title>void QXYSeries::penChanged(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>penChanged</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void penChanged(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the pen changes to <db:code role="parameter">pen</db:code>.</db:para>
</db:section>
<db:section xml:id="pointAdded">
<db:title>void QXYSeries::pointAdded(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointAdded</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointAdded(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a point is added at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointConfiguration">
<db:title>[since 6.2] QHash&lt;QXYSeries::PointConfiguration, QVariant&gt; QXYSeries::pointConfiguration(const int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHash&lt;QXYSeries::PointConfiguration, QVariant&gt;</db:type>
<db:methodname>pointConfiguration</db:methodname>
<db:methodparam>
<db:type>const int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHash&lt;QXYSeries::PointConfiguration, QVariant&gt; pointConfiguration(const int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a map representing the configuration of a point at <db:code role="parameter">index</db:code>.</db:para>
<db:para>With points configuration you can change various aspects of each point's look.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointConfiguration">setPointConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsClippingChanged">
<db:title>void QXYSeries::pointLabelsClippingChanged(bool <db:emphasis>clipping</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsClippingChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>clipping</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsClipping</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsClippingChanged(bool clipping)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the clipping of the data point labels changes to <db:code role="parameter">clipping</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsClipping-prop">pointLabelsClipping</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointLabelsColorChanged">
<db:title>void QXYSeries::pointLabelsColorChanged(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsColorChanged</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsColor</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsColorChanged(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the color used for data point labels changes to <db:code role="parameter">color</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsColor-prop">pointLabelsColor</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointLabelsFontChanged">
<db:title>void QXYSeries::pointLabelsFontChanged(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsFontChanged</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsFont</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsFontChanged(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the font used for data point labels changes to <db:code role="parameter">font</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsFont-prop">pointLabelsFont</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointLabelsFormatChanged">
<db:title>void QXYSeries::pointLabelsFormatChanged(const QString &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsFormatChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsFormat</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsFormatChanged(const QString &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the format of data point labels changes to <db:code role="parameter">format</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsFormat-prop">pointLabelsFormat</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointLabelsVisibilityChanged">
<db:title>void QXYSeries::pointLabelsVisibilityChanged(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsVisibilityChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsVisibilityChanged(bool visible)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the visibility of the data point labels changes to <db:code role="parameter">visible</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsVisible-prop">pointLabelsVisible</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointRemoved">
<db:title>void QXYSeries::pointRemoved(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointRemoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointRemoved(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a point is removed from the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointReplaced">
<db:title>void QXYSeries::pointReplaced(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointReplaced</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointReplaced(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a point is replaced at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="points">
<db:title>QList&lt;QPointF&gt; QXYSeries::points() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPointF&gt;</db:type>
<db:methodname>points</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPointF&gt; points() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the points in the series.</db:para>
</db:section>
<db:section xml:id="pointsConfiguration">
<db:title>[since 6.2] QHash&lt;int, QHash&lt;QXYSeries::PointConfiguration, QVariant&gt;&gt; QXYSeries::pointsConfiguration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHash&lt;int, QHash&lt;QXYSeries::PointConfiguration, QVariant&gt;&gt;</db:type>
<db:methodname>pointsConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHash&lt;int, QHash&lt;QXYSeries::PointConfiguration, QVariant&gt;&gt; pointsConfiguration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a map with points' indexes as keys and points' configuration as values.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointsConfiguration">setPointsConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#setPointConfiguration">setPointConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointConfiguration">pointConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointsRemoved">
<db:title>void QXYSeries::pointsRemoved(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointsRemoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointsRemoved(int index, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of points specified by <db:code role="parameter">count</db:code> is removed starting at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#removePoints">removePoints</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointsReplaced">
<db:title>void QXYSeries::pointsReplaced()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointsReplaced</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointsReplaced()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when all points are replaced with other points.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressed">
<db:title>void QXYSeries::pressed(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pressed</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pressed(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user presses the data point <db:code role="parameter">point</db:code> in the chart and holds down the mouse button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#doubleClicked">doubleClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="released">
<db:title>void QXYSeries::released(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>released</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void released(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user releases the mouse press on the data point specified by <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#doubleClicked">doubleClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>void QXYSeries::remove(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(qreal x, qreal y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the point that has the coordinates <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointRemoved">pointRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-1">
<db:title>void QXYSeries::remove(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the data point <db:code role="parameter">point</db:code> from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointRemoved">pointRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-2">
<db:title>void QXYSeries::remove(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the point at the position specified by <db:code role="parameter">index</db:code> from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointRemoved">pointRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removePoints">
<db:title>void QXYSeries::removePoints(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removePoints</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removePoints(int index, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the number of points specified by <db:code role="parameter">count</db:code> from the series starting at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointsRemoved">pointsRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace">
<db:title>void QXYSeries::replace(qreal <db:emphasis>oldX</db:emphasis>, qreal <db:emphasis>oldY</db:emphasis>, qreal <db:emphasis>newX</db:emphasis>, qreal <db:emphasis>newY</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>oldX</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>oldY</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>newX</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>newY</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(qreal oldX, qreal oldY, qreal newX, qreal newY)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the point with the coordinates <db:code role="parameter">oldX</db:code> and <db:code role="parameter">oldY</db:code> with the point with the coordinates <db:code role="parameter">newX</db:code> and <db:code role="parameter">newY</db:code>. Does nothing if the old point does not exist.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointReplaced">pointReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-1">
<db:title>void QXYSeries::replace(const QPointF &amp;<db:emphasis>oldPoint</db:emphasis>, const QPointF &amp;<db:emphasis>newPoint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>oldPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>newPoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(const QPointF &amp;oldPoint, const QPointF &amp;newPoint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the point specified by <db:code role="parameter">oldPoint</db:code> with the one specified by <db:code role="parameter">newPoint</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointReplaced">pointReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-2">
<db:title>void QXYSeries::replace(int <db:emphasis>index</db:emphasis>, qreal <db:emphasis>newX</db:emphasis>, qreal <db:emphasis>newY</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>newX</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>newY</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(int index, qreal newX, qreal newY)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the point at the position specified by <db:code role="parameter">index</db:code> with the point that has the coordinates <db:code role="parameter">newX</db:code> and <db:code role="parameter">newY</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointReplaced">pointReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-3">
<db:title>void QXYSeries::replace(int <db:emphasis>index</db:emphasis>, const QPointF &amp;<db:emphasis>newPoint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>newPoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(int index, const QPointF &amp;newPoint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the point at the position specified by <db:code role="parameter">index</db:code> with the point specified by <db:code role="parameter">newPoint</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointReplaced">pointReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-4">
<db:title>void QXYSeries::replace(const QList&lt;QPointF&gt; &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPointF&gt; &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(const QList&lt;QPointF&gt; &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the current points with the points specified by <db:code role="parameter">points</db:code>.</db:para>
<db:note>
<db:para>This is much faster than replacing data points one by one, or first clearing all data, and then appending the new data. Emits <db:link xlink:href="qxyseries.xml#pointsReplaced">QXYSeries::pointsReplaced</db:link>() when the points have been replaced.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointsReplaced">pointsReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectAllPoints">
<db:title>[since 6.2] void QXYSeries::selectAllPoints()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectAllPoints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectAllPoints()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks all points in the series as selected,</db:para>
<db:note>
<db:para>Emits QXYSeries::selectedPointsChanged</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectPoint">
<db:title>[since 6.2] void QXYSeries::selectPoint(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectPoint</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectPoint(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks point at <db:code role="parameter">index</db:code> as selected.</db:para>
<db:note>
<db:para>Emits QXYSeries::selectedPointsChanged</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectPoints">
<db:title>[since 6.2] void QXYSeries::selectPoints(const QList&lt;int&gt; &amp;<db:emphasis>indexes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectPoints</db:methodname>
<db:methodparam>
<db:type>const QList&lt;int&gt; &amp;</db:type>
<db:parameter>indexes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectPoints(const QList&lt;int&gt; &amp;indexes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks multiple points passed in a <db:code role="parameter">indexes</db:code> list as selected.</db:para>
<db:note>
<db:para>Emits QXYSeries::selectedPointsChanged</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedLightMarker">
<db:title>[since 6.2] const QImage &amp;QXYSeries::selectedLightMarker() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QImage &amp;</db:type>
<db:methodname>selectedLightMarker</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QImage &amp; selectedLightMarker() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the image used for drawing markers on selected series' points.</db:para>
<db:para>The default value is QImage(), meaning usual <db:link xlink:href="qxyseries.xml#lightMarker">lightMarker</db:link>() will be painted.</db:para>
<db:para>This is equivalent to <db:link xlink:href="qxyseries.xml#selectedColor-prop">selectedColor</db:link> if you prefer light markers over normal points, but still want to distinguish selected points.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setSelectedLightMarker">setSelectedLightMarker</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#lightMarker">lightMarker</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#selectedColor-prop">selectedColor</db:link></db:member>
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedPoints">
<db:title>[since 6.2] QList&lt;int&gt; QXYSeries::selectedPoints() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;int&gt;</db:type>
<db:methodname>selectedPoints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;int&gt; selectedPoints() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of points indexes marked as selected. Selected points are visible regardless of points visibility.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointsVisible-prop">pointsVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBrush">
<db:title>[virtual] void QXYSeries::setBrush(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrush(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush used for drawing points on the chart to <db:code role="parameter">brush</db:code>. If the brush is not defined, the brush from the chart theme setting is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#theme-prop">QChart::setTheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLightMarker">
<db:title>[since 6.2] void QXYSeries::setLightMarker(const QImage &amp;<db:emphasis>lightMarker</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLightMarker</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>lightMarker</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLightMarker(const QImage &amp;lightMarker)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the image used for drawing markers on each point of the series as the value of <db:code role="parameter">lightMarker</db:code>.</db:para>
<db:para>The default value is a default-QImage() (<db:link xlink:href="qimage.xml#isNull">QImage::isNull</db:link>() == true), meaning no light marker will be painted. You can reset back to default (disabled) by calling this function with a null <db:link xlink:href="qimage.xml">QImage</db:link> (QImage()).</db:para>
<db:para>The light markers visualize the data points of this series and as such are an alternative to <db:code>setPointsVisible(true)</db:code>. If a light marker is set with this method, visible points as set with <db:code>setPointsVisible(true)</db:code> are not displayed.</db:para>
<db:para>Unlike the elements of <db:link xlink:href="qscatterseries.xml">QScatterSeries</db:link> the light markers are not represented by <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, but are just painted (no objects created). However, the mouse-event-signals of <db:link xlink:href="qxyseries.xml">QXYSeries</db:link> behave the same way, meaning that you'll get the exact domain value of the point if you click/press/hover the light marker. You'll still get the in between domain value if you click on the line. The light markers are above the line in terms of painting as well as events.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#lightMarker">QXYSeries::lightMarker</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMarkerSize">
<db:title>[since 6.2] void QXYSeries::setMarkerSize(qreal <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMarkerSize</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMarkerSize(qreal size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">size</db:code> of the marker used to render points in the series.</db:para>
<db:para>The default size is 15.0.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscatterseries.xml#markerSize-prop">QScatterSeries::markerSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPen">
<db:title>[virtual] void QXYSeries::setPen(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setPen</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPen(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen used for drawing points on the chart to <db:code role="parameter">pen</db:code>. If the pen is not defined, the pen from the chart theme is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pen">pen</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#theme-prop">QChart::setTheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPointConfiguration">
<db:title>[since 6.2] void QXYSeries::setPointConfiguration(const int <db:emphasis>index</db:emphasis>, const QHash&lt;QXYSeries::PointConfiguration, QVariant&gt; &amp;<db:emphasis>configuration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPointConfiguration</db:methodname>
<db:methodparam>
<db:type>const int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHash&lt;QXYSeries::PointConfiguration, QVariant&gt; &amp;</db:type>
<db:parameter>configuration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPointConfiguration(const int index, const QHash&lt;QXYSeries::PointConfiguration, QVariant&gt; &amp;configuration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables customizing the appearance of a point located at <db:code role="parameter">index</db:code> with desired <db:code role="parameter">configuration</db:code>.</db:para>
<db:para>With points configuration you can change various aspects of every point's appearance.</db:para>
<db:para>A point's configuration is represented as a hash map with <db:link xlink:href="qxyseries.xml#pointConfiguration">QXYSeries::pointConfiguration</db:link> keys and <db:link xlink:href="qvariant.xml">QVariant</db:link> values. For example:</db:para>
<db:programlisting language="cpp">QLineSeries *series = new QLineSeries();
series-&amp;gt;setName(&quot;Customized serie&quot;);
series-&amp;gt;setPointsVisible(true);

*series &amp;lt;&amp;lt; QPointF(0, 6) &amp;lt;&amp;lt; QPointF(2, 4) &amp;lt;&amp;lt; QPointF(3, 6) &amp;lt;&amp;lt; QPointF(7, 4) &amp;lt;&amp;lt; QPointF(10, 5)
        &amp;lt;&amp;lt; QPointF(11, 1) &amp;lt;&amp;lt; QPointF(13, 3) &amp;lt;&amp;lt; QPointF(17, 6) &amp;lt;&amp;lt; QPointF(18, 3)
        &amp;lt;&amp;lt; QPointF(20, 2);

QChart *chart = new QChart();
chart-&amp;gt;addSeries(series);
chart-&amp;gt;createDefaultAxes();

QHash&amp;lt;QXYSeries::PointConfiguration, QVariant&amp;gt; conf;
conf[QXYSeries::PointConfiguration::Color] = QColor(Qt::red);
conf[QXYSeries::PointConfiguration::Size] = 8;
conf[QXYSeries::PointConfiguration::LabelVisibility] = true;

series-&amp;gt;setPointConfiguration(4, conf);

conf.remove(QXYSeries::PointConfiguration::LabelVisibility);
series-&amp;gt;setPointConfiguration(6, conf);
</db:programlisting>
<db:para>In this example, you can see a default <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> with 10 points and with changed configuration of two points. Both changed points are red and visibly bigger than the others with a look derived from series. By default, points don't have labels, but the point at index 4 has the label thanks to the <db:link xlink:href="qxyseries.xml#PointConfiguration-enum">QXYSeries::PointConfiguration::LabelVisibility</db:link> configuration value. Below is an example of a chart created in this way:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/xyseries_point_configuration.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointConfiguration">pointConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointsConfiguration">pointsConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#clearPointsConfiguration">clearPointsConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPointConfiguration-1">
<db:title>[since 6.2] void QXYSeries::setPointConfiguration(const int <db:emphasis>index</db:emphasis>, const QXYSeries::PointConfiguration <db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPointConfiguration</db:methodname>
<db:methodparam>
<db:type>const int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QXYSeries::PointConfiguration</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPointConfiguration(const int index, const QXYSeries::PointConfiguration key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables customizing a particular aspect of a point's configuration.</db:para>
<db:note>
<db:para>Points configuration concept provides a flexible way to configure various aspects of a point's appearance. Thus, values need to have an elastic type such as <db:link xlink:href="qvariant.xml">QVariant</db:link>. See <db:link xlink:href="qxyseries.xml#PointConfiguration-enum">QXYSeries::PointConfiguration</db:link> to see what <db:code role="parameter">value</db:code> should be passed for certain <db:code role="parameter">key</db:code>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointsConfiguration">pointsConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPointSelected">
<db:title>[since 6.2] void QXYSeries::setPointSelected(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>selected</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPointSelected</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>selected</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPointSelected(int index, bool selected)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks point at given <db:code role="parameter">index</db:code> as either selected or deselected as specified by <db:code role="parameter">selected</db:code>.</db:para>
<db:note>
<db:para>Selected points are drawn using the selected color if it was specified. Emits QXYSeries::selectedPointsChanged</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#isPointSelected">isPointSelected</db:link>()</db:member>
<db:member>setPointSelected()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#selectedColor-prop">setSelectedColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPointsConfiguration">
<db:title>[since 6.2] void QXYSeries::setPointsConfiguration(const QHash&lt;int, QHash&lt;QXYSeries::PointConfiguration, QVariant&gt;&gt; &amp;<db:emphasis>pointsConfiguration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPointsConfiguration</db:methodname>
<db:methodparam>
<db:type>const QHash&lt;int, QHash&lt;QXYSeries::PointConfiguration, QVariant&gt;&gt; &amp;</db:type>
<db:parameter>pointsConfiguration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPointsConfiguration(const QHash&lt;int, QHash&lt;QXYSeries::PointConfiguration, QVariant&gt;&gt; &amp;pointsConfiguration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables customizing the configuration of multiple points as specified by <db:code role="parameter">pointsConfiguration</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointsConfiguration">pointsConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectedLightMarker">
<db:title>[since 6.2] void QXYSeries::setSelectedLightMarker(const QImage &amp;<db:emphasis>selectedLightMarker</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSelectedLightMarker</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>selectedLightMarker</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSelectedLightMarker(const QImage &amp;selectedLightMarker)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the image used for drawing markers on selected series's points to <db:code role="parameter">selectedLightMarker</db:code>.</db:para>
<db:para>The default value is QImage(), meaning usual <db:link xlink:href="qxyseries.xml#lightMarker">lightMarker</db:link>() will be painted.</db:para>
<db:para>This is an equivalent for <db:link xlink:href="qxyseries.xml#selectedColor-prop">selectedColor</db:link> if you prefer light markers over normal points, but still want to distinguish selected points.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#selectedLightMarker">selectedLightMarker</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#lightMarker">lightMarker</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#selectedColor-prop">selectedColor</db:link></db:member>
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeBy">
<db:title>[since 6.2] void QXYSeries::sizeBy(const QList&lt;qreal&gt; &amp;<db:emphasis>sourceData</db:emphasis>, const qreal <db:emphasis>minSize</db:emphasis>, const qreal <db:emphasis>maxSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sizeBy</db:methodname>
<db:methodparam>
<db:type>const QList&lt;qreal&gt; &amp;</db:type>
<db:parameter>sourceData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const qreal</db:type>
<db:parameter>minSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const qreal</db:type>
<db:parameter>maxSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sizeBy(const QList&lt;qreal&gt; &amp;sourceData, const qreal minSize, const qreal maxSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the points' sizes according to a passed list of values. Values from <db:code role="parameter">sourceData</db:code> are sorted and mapped to a point size which is between <db:code role="parameter">minSize</db:code> and <db:code role="parameter">maxSize</db:code>.</db:para>
<db:note>
<db:para>If <db:code role="parameter">sourceData</db:code> length is smaller than number of points in the series, then size of the points at the end of the series will stay the same.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointConfiguration">setPointConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointConfiguration">pointConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toggleSelection">
<db:title>[since 6.2] void QXYSeries::toggleSelection(const QList&lt;int&gt; &amp;<db:emphasis>indexes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>toggleSelection</db:methodname>
<db:methodparam>
<db:type>const QList&lt;int&gt; &amp;</db:type>
<db:parameter>indexes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void toggleSelection(const QList&lt;int&gt; &amp;indexes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes selection state of points at given <db:code role="parameter">indexes</db:code> to the opposite one. Makes</db:para>
<db:note>
<db:para>Emits QXYSeries::selectedPointsChanged</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPointSelected">setPointSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QXYSeries &amp;QXYSeries::operator&lt;&lt;(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QXYSeries &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXYSeries &amp; operator&lt;&lt;(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stream operator for adding the data point <db:code role="parameter">point</db:code> to the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QXYSeries &amp;QXYSeries::operator&lt;&lt;(const QList&lt;QPointF&gt; &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QXYSeries &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPointF&gt; &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXYSeries &amp; operator&lt;&lt;(const QList&lt;QPointF&gt; &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stream operator for adding the list of data points specified by <db:code role="parameter">points</db:code> to the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QXYSeries</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qxyseries.xml">QXYSeries</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="pointsVector">
<db:title>QList&lt;QPointF&gt; QXYSeries::pointsVector() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPointF&gt;</db:type>
<db:methodname>pointsVector</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPointF&gt; pointsVector() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qxyseries.xml#points">points</db:link>() instead. Returns the points in the series.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
