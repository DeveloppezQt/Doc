<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXYSeries Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxyseries.xml">QXYSeries</db:link> class is a base class for line, spline, and scatter series.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXYSeries</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlineseries.xml" xlink:role="class">QLineSeries</db:link> and <db:link xlink:href="qscatterseries.xml" xlink:role="class">QScatterSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtcharts-xyseries.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractseries.xml" xlink:role="class">QAbstractSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlineseries.xml" xlink:role="class">QLineSeries</db:link> and <db:link xlink:href="qscatterseries.xml" xlink:role="class">QScatterSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="color-prop">
<db:title>color : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>color</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">color</db:synopsisinfo>
<db:synopsisinfo role="setter">setColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">colorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color of the series.</db:para>
<db:para>This is the line (pen) color in case of <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> or <db:link xlink:href="qsplineseries.xml">QSplineSeries</db:link> and the fill (brush) color in case of <db:link xlink:href="qscatterseries.xml">QScatterSeries</db:link> or <db:link xlink:href="qareaseries.xml">QAreaSeries</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">color</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para>virtual <db:type>void</db:type> <db:emphasis role="bold">setColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#colorChanged">colorChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pen">pen</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsClipping-prop">
<db:title>pointLabelsClipping : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>pointLabelsClipping</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsClipping</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsClipping</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsClippingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the clipping for data point labels.</db:para>
<db:para>This property is <db:code>true</db:code> by default. The labels on the edge of the plot area are cut when clipping is enabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">pointLabelsClipping</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsClipping</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsClippingChanged">pointLabelsClippingChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>clipping</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsVisible-prop">pointLabelsVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsColor-prop">
<db:title>pointLabelsColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>pointLabelsColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color used for data point labels. By default, the color is the color of the brush defined in theme for labels.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">pointLabelsColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsColorChanged">pointLabelsColorChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsFormat-prop">pointLabelsFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsFont-prop">
<db:title>pointLabelsFont : QFont</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QFont</db:type>
<db:varname>pointLabelsFont</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsFont</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsFont</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsFontChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the font used for data point labels.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> <db:emphasis role="bold">pointLabelsFont</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsFont</db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsFontChanged">pointLabelsFontChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsFormat-prop">pointLabelsFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsFormat-prop">
<db:title>pointLabelsFormat : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>pointLabelsFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsFormat</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsFormatChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the format used for showing labels with data points.</db:para>
<db:para><db:link xlink:href="qxyseries.xml">QXYSeries</db:link> supports the following format tags:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>@xPoint</db:para>
</db:td>
<db:td>
<db:para>The x-coordinate of the data point.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>@yPoint</db:para>
</db:td>
<db:td>
<db:para>The y-coordinate of the data point.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, the following usage of the format tags would produce labels that display the data point shown inside brackets separated by a comma (x, y):</db:para>
<db:programlisting language="cpp">series-&amp;gt;setPointLabelsFormat(&quot;(@xPoint, @yPoint)&quot;);
</db:programlisting>
<db:para>By default, the labels' format is set to <db:code>@xPoint, @yPoint</db:code>. The labels are shown on the plot area, and the labels on the edge of the plot area are cut. If the points are close to each other, the labels may overlap.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">pointLabelsFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsFormat</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsFormatChanged">pointLabelsFormatChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsVisible-prop">pointLabelsVisible</db:link></db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsFont-prop">pointLabelsFont</db:link></db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsColor-prop">pointLabelsColor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsVisible-prop">
<db:title>pointLabelsVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>pointLabelsVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointLabelsVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointLabelsVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">pointLabelsVisibilityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visibility of data point labels.</db:para>
<db:para>This property is <db:code>false</db:code> by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">pointLabelsVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointLabelsVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxyseries.xml#pointLabelsVisibilityChanged">pointLabelsVisibilityChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsFormat-prop">pointLabelsFormat</db:link></db:member>
<db:member><db:link xlink:href="qxyseries.xml#pointLabelsClipping-prop">pointLabelsClipping</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointsVisible-prop">
<db:title>pointsVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>pointsVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pointsVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setPointsVisible</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the data points are visible and should be drawn.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">pointsVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPointsVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QXYSeries">
<db:title>[virtual] QXYSeries::~QXYSeries()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QXYSeries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QXYSeries()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the series. Series added to <db:link xlink:href="qchart.xml">QChart</db:link> instances are owned by them, and are deleted when the <db:link xlink:href="qchart.xml">QChart</db:link> instances are deleted.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>void QXYSeries::append(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(qreal x, qreal y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the data point with the coordinates <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> to the series.</db:para>
</db:section>
<db:section xml:id="append-1">
<db:title>void QXYSeries::append(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the data point <db:code role="parameter">point</db:code> to the series.</db:para>
</db:section>
<db:section xml:id="append-2">
<db:title>void QXYSeries::append(const QList&lt;QPointF&gt; &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPointF&gt; &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(const QList&lt;QPointF&gt; &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the list of data points specified by <db:code role="parameter">points</db:code> to the series.</db:para>
</db:section>
<db:section xml:id="at">
<db:title>const QPointF &amp;QXYSeries::at(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QPointF &amp;</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QPointF &amp; at(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data point at the position specified by <db:code role="parameter">index</db:code> in the internal series of points.</db:para>
</db:section>
<db:section xml:id="brush">
<db:title>QBrush QXYSeries::brush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>brush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush brush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to fill the data points for the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setBrush">setBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QXYSeries::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all points from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointsRemoved">pointsRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clicked">
<db:title>void QXYSeries::clicked(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clicked</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clicked(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user triggers a mouse event by clicking the point <db:code role="parameter">point</db:code> in the chart.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#doubleClicked">doubleClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorChanged">
<db:title>void QXYSeries::colorChanged(QColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>colorChanged</db:methodname>
<db:methodparam>
<db:type>QColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">color</db:synopsisinfo>
<db:synopsisinfo role="signature">void colorChanged(QColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the line (pen) color changes to <db:code role="parameter">color</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#color-prop">color</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="count">
<db:title>int QXYSeries::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of data points in a series.</db:para>
</db:section>
<db:section xml:id="doubleClicked">
<db:title>void QXYSeries::doubleClicked(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>doubleClicked</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void doubleClicked(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user double-clicks the data point <db:code role="parameter">point</db:code> in the chart. The <db:code role="parameter">point</db:code> is the point where the first press was triggered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#clicked">clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hovered">
<db:title>void QXYSeries::hovered(const QPointF &amp;<db:emphasis>point</db:emphasis>, bool <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hovered</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hovered(const QPointF &amp;point, bool state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a mouse is hovered over the point <db:code role="parameter">point</db:code> in the chart. When the mouse moves over the point, <db:code role="parameter">state</db:code> turns <db:code>true</db:code>, and when the mouse moves away again, it turns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>void QXYSeries::insert(int <db:emphasis>index</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(int index, const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the data point <db:code role="parameter">point</db:code> in the series at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointAdded">pointAdded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pen">
<db:title>QPen QXYSeries::pen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPen</db:type>
<db:methodname>pen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen pen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen used to draw the outline of the data points for the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="penChanged">
<db:title>void QXYSeries::penChanged(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>penChanged</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void penChanged(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the pen changes to <db:code role="parameter">pen</db:code>.</db:para>
</db:section>
<db:section xml:id="pointAdded">
<db:title>void QXYSeries::pointAdded(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointAdded</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointAdded(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a point is added at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointLabelsClippingChanged">
<db:title>void QXYSeries::pointLabelsClippingChanged(bool <db:emphasis>clipping</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsClippingChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>clipping</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsClipping</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsClippingChanged(bool clipping)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the clipping of the data point labels changes to <db:code role="parameter">clipping</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsClipping-prop">pointLabelsClipping</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointLabelsColorChanged">
<db:title>void QXYSeries::pointLabelsColorChanged(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsColorChanged</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsColor</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsColorChanged(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the color used for data point labels changes to <db:code role="parameter">color</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsColor-prop">pointLabelsColor</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointLabelsFontChanged">
<db:title>void QXYSeries::pointLabelsFontChanged(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsFontChanged</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsFont</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsFontChanged(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the font used for data point labels changes to <db:code role="parameter">font</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsFont-prop">pointLabelsFont</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointLabelsFormatChanged">
<db:title>void QXYSeries::pointLabelsFormatChanged(const QString &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsFormatChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsFormat</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsFormatChanged(const QString &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the format of data point labels changes to <db:code role="parameter">format</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsFormat-prop">pointLabelsFormat</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointLabelsVisibilityChanged">
<db:title>void QXYSeries::pointLabelsVisibilityChanged(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointLabelsVisibilityChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointLabelsVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointLabelsVisibilityChanged(bool visible)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the visibility of the data point labels changes to <db:code role="parameter">visible</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qxyseries.xml#pointLabelsVisible-prop">pointLabelsVisible</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointRemoved">
<db:title>void QXYSeries::pointRemoved(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointRemoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointRemoved(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a point is removed from the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointReplaced">
<db:title>void QXYSeries::pointReplaced(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointReplaced</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointReplaced(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a point is replaced at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="points">
<db:title>QList&lt;QPointF&gt; QXYSeries::points() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPointF&gt;</db:type>
<db:methodname>points</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPointF&gt; points() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the points in the series.</db:para>
</db:section>
<db:section xml:id="pointsRemoved">
<db:title>void QXYSeries::pointsRemoved(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointsRemoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointsRemoved(int index, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of points specified by <db:code role="parameter">count</db:code> is removed starting at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#removePoints">removePoints</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointsReplaced">
<db:title>void QXYSeries::pointsReplaced()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pointsReplaced</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pointsReplaced()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when all points are replaced with other points.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressed">
<db:title>void QXYSeries::pressed(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pressed</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pressed(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user presses the data point <db:code role="parameter">point</db:code> in the chart and holds down the mouse button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#doubleClicked">doubleClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="released">
<db:title>void QXYSeries::released(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>released</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void released(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user releases the mouse press on the data point specified by <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qxyseries.xml#doubleClicked">doubleClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>void QXYSeries::remove(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(qreal x, qreal y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the point that has the coordinates <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointRemoved">pointRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-1">
<db:title>void QXYSeries::remove(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the data point <db:code role="parameter">point</db:code> from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointRemoved">pointRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-2">
<db:title>void QXYSeries::remove(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the point at the position specified by <db:code role="parameter">index</db:code> from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointRemoved">pointRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removePoints">
<db:title>void QXYSeries::removePoints(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removePoints</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removePoints(int index, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the number of points specified by <db:code role="parameter">count</db:code> from the series starting at the position specified by <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointsRemoved">pointsRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace">
<db:title>void QXYSeries::replace(qreal <db:emphasis>oldX</db:emphasis>, qreal <db:emphasis>oldY</db:emphasis>, qreal <db:emphasis>newX</db:emphasis>, qreal <db:emphasis>newY</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>oldX</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>oldY</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>newX</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>newY</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(qreal oldX, qreal oldY, qreal newX, qreal newY)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the point with the coordinates <db:code role="parameter">oldX</db:code> and <db:code role="parameter">oldY</db:code> with the point with the coordinates <db:code role="parameter">newX</db:code> and <db:code role="parameter">newY</db:code>. Does nothing if the old point does not exist.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointReplaced">pointReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-1">
<db:title>void QXYSeries::replace(const QPointF &amp;<db:emphasis>oldPoint</db:emphasis>, const QPointF &amp;<db:emphasis>newPoint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>oldPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>newPoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(const QPointF &amp;oldPoint, const QPointF &amp;newPoint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the point specified by <db:code role="parameter">oldPoint</db:code> with the one specified by <db:code role="parameter">newPoint</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointReplaced">pointReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-2">
<db:title>void QXYSeries::replace(int <db:emphasis>index</db:emphasis>, qreal <db:emphasis>newX</db:emphasis>, qreal <db:emphasis>newY</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>newX</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>newY</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(int index, qreal newX, qreal newY)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the point at the position specified by <db:code role="parameter">index</db:code> with the point that has the coordinates <db:code role="parameter">newX</db:code> and <db:code role="parameter">newY</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointReplaced">pointReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-3">
<db:title>void QXYSeries::replace(int <db:emphasis>index</db:emphasis>, const QPointF &amp;<db:emphasis>newPoint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>newPoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(int index, const QPointF &amp;newPoint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the point at the position specified by <db:code role="parameter">index</db:code> with the point specified by <db:code role="parameter">newPoint</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointReplaced">pointReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-4">
<db:title>void QXYSeries::replace(const QList&lt;QPointF&gt; &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPointF&gt; &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(const QList&lt;QPointF&gt; &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the current points with the points specified by <db:code role="parameter">points</db:code>.</db:para>
<db:note>
<db:para>This is much faster than replacing data points one by one, or first clearing all data, and then appending the new data. Emits <db:link xlink:href="qxyseries.xml#pointsReplaced">QXYSeries::pointsReplaced</db:link>() when the points have been replaced.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pointsReplaced">pointsReplaced</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBrush">
<db:title>[virtual] void QXYSeries::setBrush(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrush(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush used for drawing points on the chart to <db:code role="parameter">brush</db:code>. If the brush is not defined, the brush from the chart theme setting is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#theme-prop">QChart::setTheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPen">
<db:title>[virtual] void QXYSeries::setPen(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setPen</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPen(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen used for drawing points on the chart to <db:code role="parameter">pen</db:code>. If the pen is not defined, the pen from the chart theme is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#pen">pen</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#theme-prop">QChart::setTheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QXYSeries &amp;QXYSeries::operator&lt;&lt;(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QXYSeries &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXYSeries &amp; operator&lt;&lt;(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stream operator for adding the data point <db:code role="parameter">point</db:code> to the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QXYSeries &amp;QXYSeries::operator&lt;&lt;(const QList&lt;QPointF&gt; &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QXYSeries &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPointF&gt; &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXYSeries &amp; operator&lt;&lt;(const QList&lt;QPointF&gt; &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stream operator for adding the list of data points specified by <db:code role="parameter">points</db:code> to the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxyseries.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QXYSeries</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qxyseries.xml">QXYSeries</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="pointsVector">
<db:title>QList&lt;QPointF&gt; QXYSeries::pointsVector() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPointF&gt;</db:type>
<db:methodname>pointsVector</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPointF&gt; pointsVector() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qxyseries.xml#points">points</db:link>() instead. Returns the points in the series.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
