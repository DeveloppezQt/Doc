<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Widgets Minimal Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Displays a web page using Qt WebEngine Widgets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/minimal-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis><db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> Widgets Minimal Example</db:emphasis> demonstrates how to use <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> to render a web page. It shows the minimum amount of code needed to load and display an HTML page, and can be used as a basis for further experimentation.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="the-code">
<db:title>The Code</db:title>
<db:para>We first define a <db:code>commandLineUrlArgument</db:code> function that returns the URL to open. This is either the first positional argument given on the command line, or <db:code>https://www.qt.io</db:code> as a fallback.</db:para>
<db:programlisting language="cpp">#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QWebEngineView&amp;gt;

QUrl commandLineUrlArgument()
{
    const QStringList args = QCoreApplication::arguments();
    for (const QString &amp;amp;arg : args.mid(1)) {
        if (!arg.startsWith(QLatin1Char('-')))
            return QUrl::fromUserInput(arg);
    }
    return QUrl(QStringLiteral(&quot;https://www.qt.io&quot;));
}
</db:programlisting>
<db:para>In the <db:code>main</db:code> function we first set the <db:link xlink:href="qcoreapplication.xml#organizationName-prop">QCoreApplication::organizationName</db:link> property. This affects the locations where Qt WebEngine stores persistent and cached data (see also <db:link xlink:href="qwebengineprofile.xml#cachePath">QWebEngineProfile::cachePath</db:link> and <db:link xlink:href="qwebengineprofile.xml#persistentStoragePath">QWebEngineProfile::persistentStoragePath</db:link>).</db:para>
<db:para>We also set the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_EnableHighDpiScaling</db:link> attribute. This lets the web view automatically scale on high-dpi displays.</db:para>
<db:para>Next, we instantiate a <db:link xlink:href="qapplication.xml">QApplication</db:link> and a <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>. The URL to load is taken from <db:code>commandLineUrlArgument</db:code> and loaded by calling <db:link xlink:href="qwebengineview.xml#url-prop">QWebEngineView::setUrl</db:link>. The view widget is given a reasonable default size, and shown. Finally, <db:link xlink:href="qapplication.xml#exec">QApplication::exec</db:link>() launches the main event loop.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication::setOrganizationName(&quot;QtExamples&quot;);
    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
    QApplication app(argc, argv);

    QWebEngineView view;
    view.setUrl(commandLineUrlArgument());
    view.resize(1024, 750);
    view.show();

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:para>The example requires a working internet connection to render the <db:link xlink:href="http://qt.io/">Qt Homepage</db:link>. An optional system proxy should be picked up automatically. However, for proxies that require a username or password, you need to connect to <db:link xlink:href="qwebenginepage.xml#proxyAuthenticationRequired">QWebEnginePage::proxyAuthenticationRequired</db:link>.</db:para>
<db:para><db:link xlink:href="qtwebenginewidgets-index.xml">Qt WebEngine Widgets</db:link> uses the <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link> to compose the page. Therefore, OpenGL support is required.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/minimal/main.cpp">webenginewidgets/minimal/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/minimal/minimal.pro">webenginewidgets/minimal/minimal.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
