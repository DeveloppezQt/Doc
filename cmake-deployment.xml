<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Deployment</db:title>
<db:productname>QtCMake</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Using Qt with CMake</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-build-on-cmdline.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Building projects on the command line"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-imported-targets.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Imported targets"/></db:extendedlink>
<db:abstract>
<db:para>Provides an overview of how to deploy Qt projects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Use Qt's CMake deployment API to deploy Qt projects for desktop platforms. The API supports various target platforms, which you can find in the <db:link xlink:href="qt-generate-deploy-app-script.xml">qt_generate_deploy_app_script()</db:link> documentation.</db:para>
<db:para>The deployment process depends on whether your project is a Qt Widgets application or a Qt Quick application. Even if you are planning to deploy only Qt Quick applications, read about deploying Qt Widgets applications first to understand the process.</db:para>
<db:section xml:id="deploying-a-qt-widgets-application">
<db:title>Deploying a Qt Widgets application</db:title>
<db:para>This section shows how to deploy a Qt Widgets application with an example of a simple C++ Qt project.</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16)

project(MyApp VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt6 REQUIRED COMPONENTS Core)
qt_standard_project_setup()

qt_add_executable(MyApp main.cpp)
target_link_libraries(MyApp PRIVATE Qt6::Core)
</db:programlisting>
<db:para>You need to instruct CMake to install the application target into the appropriate location. On macOS, bundles are installed directly into <db:code>${CMAKE_INSTALL_PREFIX}</db:code>, on other platforms into the <db:code>&quot;bin&quot;</db:code> directory underneath.</db:para>
<db:programlisting language="cpp">install(TARGETS MyApp
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)
</db:programlisting>
<db:para>Note that <db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup()</db:link> pulls in CMake's <db:code>GNUInstallDirs.cmake</db:code>. This is what defines the <db:code>CMAKE_INSTALL_BINDIR</db:code> variable.</db:para>
<db:para>You also need to generate a <db:emphasis>deployment script</db:emphasis>. A deployment script is CMake code that is executed at installation time. This code takes care of collecting runtime dependencies and copies them to the installation directory.</db:para>
<db:programlisting language="cpp">qt_generate_deploy_app_script(
    TARGET MyApp
    OUTPUT_SCRIPT deploy_script
    NO_UNSUPPORTED_PLATFORM_ERROR
)
install(SCRIPT ${deploy_script})
</db:programlisting>
<db:para>The <db:link xlink:href="qt-generate-deploy-app-script.xml">qt_generate_deploy_app_script()</db:link> command generates the deployment script in the build directory. The file name of the generated script file is stored in the <db:code>deploy_script</db:code> variable. The <db:code>install(SCRIPT)</db:code> call instructs CMake to run the script on installation.</db:para>
<db:para>The project can be installed with <db:code>cmake --install .</db:code> or <db:code>ninja install</db:code> like any other CMake-based project. After installation, the installation directory contains the shared libraries and assets that are necessary to run the application. In other words, the installation produces a self-contained directory, ready to be packaged - for example by <db:code>cpack</db:code>.</db:para>
</db:section>
<db:section xml:id="deploying-a-qt-quick-application">
<db:title>Deploying a Qt Quick application</db:title>
<db:para>Deploying a Qt Quick project requires a different command to generate the deployment script. The rest of the steps are similar to deploying a Qt Widgets application.</db:para>
<db:para>First, you create the Qt Quick application.</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16)

project(MyApp VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt6 REQUIRED COMPONENTS Core)
qt_standard_project_setup()

qt_add_executable(MyApp main.cpp)
qt_add_qml_module(MyApp
    URI Application
    VERSION 1.0
    QML_FILES main.qml MyThing.qml
)
</db:programlisting>
<db:para>You install the application as before.</db:para>
<db:programlisting language="cpp">install(TARGETS MyApp
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)
</db:programlisting>
<db:para>To generate the deployment script, you call <db:link xlink:href="qt-generate-deploy-qml-app-script.xml">qt_generate_deploy_qml_app_script()</db:link> instead of <db:link xlink:href="qt-generate-deploy-app-script.xml">qt_generate_deploy_app_script()</db:link>.</db:para>
<db:programlisting language="cpp">qt_generate_deploy_qml_app_script(
    TARGET MyApp
    OUTPUT_SCRIPT deploy_script
)
install(SCRIPT ${deploy_script})
</db:programlisting>
<db:para>On installation, the application binary will be deployed, including the QML files and the shared libraries and assets of Qt that are used by the project. Again, the resulting directory is self-contained and can be packaged by tools like <db:code>cpack</db:code>.</db:para>
</db:section>
</db:article>
