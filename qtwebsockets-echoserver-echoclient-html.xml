<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Echo Server Example</db:title>
<db:productname>QtWebSockets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebSockets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to create a simple server application that sends back the messages it receives.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;WebSocket Echo Client&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;WebSocket Echo Client&lt;/h1&gt;
        &lt;p&gt;
            &lt;button onClick=&quot;initWebSocket();&quot;&gt;Connect&lt;/button&gt;
            &lt;button onClick=&quot;stopWebSocket();&quot;&gt;Disconnect&lt;/button&gt;
            &lt;button onClick=&quot;checkSocket();&quot;&gt;State&lt;/button&gt;
        &lt;/p&gt;
        &lt;p&gt;
            &lt;textarea id=&quot;debugTextArea&quot; style=&quot;width:400px;height:200px;&quot;&gt;&lt;/textarea&gt;
        &lt;/p&gt;
        &lt;p&gt;
            &lt;input type=&quot;text&quot; id=&quot;inputText&quot; onkeydown=&quot;if(event.keyCode==13)sendMessage();&quot;/&gt;
            &lt;button onClick=&quot;sendMessage();&quot;&gt;Send&lt;/button&gt;
        &lt;/p&gt;

        &lt;script type=&quot;text/javascript&quot;&gt;
            var debugTextArea = document.getElementById(&quot;debugTextArea&quot;);
            function debug(message) {
                debugTextArea.value += message + &quot;\n&quot;;
                debugTextArea.scrollTop = debugTextArea.scrollHeight;
            }

            function sendMessage() {
                var msg = document.getElementById(&quot;inputText&quot;).value;
                if ( websocket != null )
                {
                    document.getElementById(&quot;inputText&quot;).value = &quot;&quot;;
                    websocket.send( msg );
                    console.log( &quot;string sent :&quot;, '&quot;'+msg+'&quot;' );
                }
            }

            var wsUri = &quot;ws://localhost:1234&quot;;
            var websocket = null;

            function initWebSocket() {
                try {
                    if (typeof MozWebSocket == 'function')
                        WebSocket = MozWebSocket;
                    if ( websocket &amp;&amp; websocket.readyState == 1 )
                        websocket.close();
                    websocket = new WebSocket( wsUri );
                    websocket.onopen = function (evt) {
                        debug(&quot;CONNECTED&quot;);
                    };
                    websocket.onclose = function (evt) {
                        debug(&quot;DISCONNECTED&quot;);
                    };
                    websocket.onmessage = function (evt) {
                        console.log( &quot;Message received :&quot;, evt.data );
                        debug( evt.data );
                    };
                    websocket.onerror = function (evt) {
                        debug('ERROR: ' + evt.data);
                    };
                } catch (exception) {
                    debug('ERROR: ' + exception);
                }
            }

            function stopWebSocket() {
                if (websocket)
                    websocket.close();
            }

            function checkSocket() {
                if (websocket != null) {
                    var stateStr;
                    switch (websocket.readyState) {
                        case 0: {
                            stateStr = &quot;CONNECTING&quot;;
                            break;
                        }
                        case 1: {
                            stateStr = &quot;OPEN&quot;;
                            break;
                        }
                        case 2: {
                            stateStr = &quot;CLOSING&quot;;
                            break;
                        }
                        case 3: {
                            stateStr = &quot;CLOSED&quot;;
                            break;
                        }
                        default: {
                            stateStr = &quot;UNKNOW&quot;;
                            break;
                        }
                    }
                    debug(&quot;WebSocket state = &quot; + websocket.readyState + &quot; ( &quot; + stateStr + &quot; )&quot;);
                } else {
                    debug(&quot;WebSocket is null&quot;);
                }
            }
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;

</db:programlisting>
</db:article>
