<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGesture Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgesture.xml">QGesture</db:link> class represents a gesture, containing properties that describe the corresponding user input.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGesture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpangesture.xml" xlink:role="class">QPanGesture</db:link>, <db:link xlink:href="qpinchgesture.xml" xlink:role="class">QPinchGesture</db:link>, <db:link xlink:href="qswipegesture.xml" xlink:role="class">QSwipeGesture</db:link>, <db:link xlink:href="qtapandholdgesture.xml" xlink:role="class">QTapAndHoldGesture</db:link>, and <db:link xlink:href="qtapgesture.xml" xlink:role="class">QTapGesture</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGesture is part of <db:simplelist><db:member>gestures</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Gesture objects are not constructed directly by developers. They are created by the <db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link> object that is registered with the application; see <db:link xlink:href="qgesturerecognizer.xml#registerRecognizer">QGestureRecognizer::registerRecognizer</db:link>().</db:para>
<db:para>For an overview of gesture handling in Qt and information on using gestures in your applications, see the <db:link xlink:href="gestures-overview.xml">Gestures in Widgets and Graphics View</db:link> document.</db:para>
<db:section xml:id="gesture-properties">
<db:title>Gesture Properties</db:title>
<db:para>The class has a list of properties that can be queried by the user to get some gesture-specific arguments. For example, the pinch gesture has a scale factor that is exposed as a property.</db:para>
<db:para>Developers of custom gesture recognizers can add additional properties in order to provide additional information about a gesture. This can be done by adding new dynamic properties to a <db:link xlink:href="qgesture.xml">QGesture</db:link> object, or by subclassing the <db:link xlink:href="qgesture.xml">QGesture</db:link> class (or one of its subclasses).</db:para>
</db:section>
<db:section xml:id="lifecycle-of-a-gesture-object">
<db:title>Lifecycle of a Gesture Object</db:title>
<db:para>A <db:link xlink:href="qgesture.xml">QGesture</db:link> instance is implicitly created when needed and is owned by Qt. Developers should never destroy them or store them for later use as Qt may destroy particular instances of them and create new ones to replace them.</db:para>
<db:para>The registered gesture recognizer monitors the input events for the target object via its <db:link xlink:href="qgesturerecognizer.xml#recognize">recognize</db:link>() function, updating the properties of the gesture object as required.</db:para>
<db:para>The gesture object may be delivered to the target object in a <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link> if the corresponding gesture is active or has just been canceled. Each event that is delivered contains a list of gesture objects, since support for more than one gesture may be enabled for the target object. Due to the way events are handled in Qt, gesture events may be filtered by other objects.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link></db:member>
<db:member><db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="GestureCancelPolicy-enum">
<db:title>enum QGesture::GestureCancelPolicy</db:title>
<db:enumsynopsis>
<db:enumname>GestureCancelPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>CancelNone</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CancelAllInContext</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes how accepting a gesture can cancel other gestures automatically.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgesture.xml">QGesture</db:link></db:emphasis>::CancelNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>On accepting this gesture no other gestures will be affected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgesture.xml">QGesture</db:link></db:emphasis>::CancelAllInContext</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>On accepting this gesture all gestures that are active in the context (respecting the <db:link xlink:href="qt.xml#GestureFlag-enum">Qt::GestureFlag</db:link> that were specified when subscribed to the gesture) will be cancelled.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="gestureCancelPolicy-prop">
<db:title>gestureCancelPolicy : QGesture::GestureCancelPolicy</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QGesture::GestureCancelPolicy</db:type>
<db:varname>gestureCancelPolicy</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">gestureCancelPolicy</db:synopsisinfo>
<db:synopsisinfo role="setter">setGestureCancelPolicy</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the policy for deciding what happens on accepting a gesture</db:para>
<db:para>On accepting one gesture Qt can automatically cancel other gestures that belong to other targets. The policy is normally set to not cancel any other gestures and can be set to cancel all active gestures in the context. For example for all child widgets.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgesture.xml#GestureCancelPolicy-enum">QGesture::GestureCancelPolicy</db:link></db:type> <db:emphasis role="bold">gestureCancelPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setGestureCancelPolicy</db:emphasis>(<db:type><db:link xlink:href="qgesture.xml#GestureCancelPolicy-enum">QGesture::GestureCancelPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="gestureType-prop">
<db:title>[read-only] gestureType : const Qt::GestureType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::GestureType</db:type>
<db:varname>gestureType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">gestureType</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the type of the gesture</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#GestureType-enum">Qt::GestureType</db:link></db:type> <db:emphasis role="bold">gestureType</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hasHotSpot-prop">
<db:title>[read-only] hasHotSpot : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>hasHotSpot</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasHotSpot</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the gesture has a hot-spot</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasHotSpot</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hotSpot-prop">
<db:title>hotSpot : QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>hotSpot</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hotSpot</db:synopsisinfo>
<db:synopsisinfo role="setter">setHotSpot</db:synopsisinfo>
<db:synopsisinfo role="resetter">unsetHotSpot</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the point that is used to find the receiver for the gesture event.</db:para>
<db:para>The hot-spot is a point in the global coordinate system, use <db:link xlink:href="qwidget.xml#mapFromGlobal">QWidget::mapFromGlobal</db:link>() or <db:link xlink:href="qgestureevent.xml#mapToGraphicsScene">QGestureEvent::mapToGraphicsScene</db:link>() to get a local hot-spot.</db:para>
<db:para>The hot-spot should be set by the gesture recognizer to allow gesture event delivery to a <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">hotSpot</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHotSpot</db:emphasis>(const <db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> &amp;<db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">unsetHotSpot</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const Qt::GestureState</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::GestureState</db:type>
<db:varname>state</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">state</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current state of the gesture</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#GestureState-enum">Qt::GestureState</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGesture">
<db:title>[explicit] QGesture::QGesture(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGesture</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGesture(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new gesture object with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para><db:link xlink:href="qgesture.xml">QGesture</db:link> objects are created by gesture recognizers in the <db:link xlink:href="qgesturerecognizer.xml#create">QGestureRecognizer::create</db:link>() function.</db:para>
</db:section>
<db:section xml:id="dtor.QGesture">
<db:title>[virtual] QGesture::~QGesture()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGesture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGesture()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the gesture object.</db:para>
</db:section>
</db:section>
</db:article>
