<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SignalSpy QML Type</db:title>
<db:productname>QtQmlTest</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Enables introspection of signal emission.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtTest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>SignalSpy is part of <db:simplelist><db:member>qtquicktest</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In the following example, a <db:link xlink:href="qml-qttest-signalspy.xml">SignalSpy</db:link> is installed to watch the &quot;clicked&quot; signal on a user-defined Button type. When the signal is emitted, the <db:link xlink:href="qml-qttest-signalspy.xml#count-prop">count</db:link> property on the spy will be increased.</db:para>
<db:programlisting language="cpp">Button {
    id: button
    SignalSpy {
        id: spy
        target: button
        signalName: &quot;clicked&quot;
    }
    TestCase {
        name: &quot;ButtonClick&quot;
        function test_click() {
            compare(spy.count, 0)
            button.clicked();
            compare(spy.count, 1)
        }
    }
}
</db:programlisting>
<db:para>The above style of test is suitable for signals that are emitted synchronously. For asynchronous signals, the <db:link xlink:href="qml-qttest-signalspy.xml#wait-method">wait</db:link>() method can be used to block the test until the signal occurs (or a timeout expires).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link></db:member>
<db:member><db:link xlink:href="qtquicktest-index.xml">Qt Quick Test</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:para>This property defines the number of times that <db:link xlink:href="qml-qttest-signalspy.xml#signalName-prop">signalName</db:link> has been emitted from <db:link xlink:href="qml-qttest-signalspy.xml#target-prop">target</db:link> since the last call to <db:link xlink:href="qml-qttest-signalspy.xml#clear-method">clear</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#target-prop">target</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#signalName-prop">signalName</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#clear-method">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signalArguments-prop">
<db:title>[read-only] signalArguments : list</db:title>
<db:para>This property holds a list of emitted signal arguments. Each emission of the signal will append one item to the list, containing the arguments of the signal. When connecting to a new <db:link xlink:href="qml-qttest-signalspy.xml#target-prop">target</db:link> or new <db:link xlink:href="qml-qttest-signalspy.xml#signalName-prop">signalName</db:link> or calling the <db:link xlink:href="qml-qttest-signalspy.xml#clear-method">clear</db:link>() method, the signalArguments will be reset to empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#signalName-prop">signalName</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#clear-method">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signalName-prop">
<db:title>signalName : string</db:title>
<db:para>This property defines the name of the signal on <db:link xlink:href="qml-qttest-signalspy.xml#target-prop">target</db:link> to listen for.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#target-prop">target</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#count-prop">count</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : object</db:title>
<db:para>This property defines the target object that will be used to listen for emissions of the <db:link xlink:href="qml-qttest-signalspy.xml#signalName-prop">signalName</db:link> signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#signalName-prop">signalName</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#count-prop">count</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valid-prop">
<db:title>[read-only] valid : bool</db:title>
<db:para>This property defines the current signal connection status. It will be true when the <db:link xlink:href="qml-qttest-signalspy.xml#signalName-prop">signalName</db:link> of the <db:link xlink:href="qml-qttest-signalspy.xml#target-prop">target</db:link> is connected successfully, otherwise it will be false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#count-prop">count</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#target-prop">target</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#signalName-prop">signalName</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#clear-method">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="clear-method">
<db:title>clear()</db:title>
<db:para>Clears <db:link xlink:href="qml-qttest-signalspy.xml#count-prop">count</db:link> to 0, resets <db:link xlink:href="qml-qttest-signalspy.xml#valid-prop">valid</db:link> to false and clears the <db:link xlink:href="qml-qttest-signalspy.xml#signalArguments-prop">signalArguments</db:link> to empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#count-prop">count</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#wait-method">wait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wait-method">
<db:title>wait(<db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:para>Waits for the signal <db:link xlink:href="qml-qttest-signalspy.xml#signalName-prop">signalName</db:link> on <db:link xlink:href="qml-qttest-signalspy.xml#target-prop">target</db:link> to be emitted, for up to <db:code role="parameter">timeout</db:code> milliseconds. The test case will fail if the signal is not emitted.</db:para>
<db:programlisting language="cpp">SignalSpy {
    id: spy
    target: button
    signalName: &quot;clicked&quot;
}

function test_async_click() {
    ...
    // do something that will cause clicked() to be emitted
    ...
    spy.wait()
    compare(spy.count, 1)
}
</db:programlisting>
<db:para>There are two possible scenarios: the signal has already been emitted when wait() is called, or the signal has not yet been emitted. The wait() function handles the first scenario by immediately returning if the signal has already occurred.</db:para>
<db:para>The <db:link xlink:href="qml-qttest-signalspy.xml#clear-method">clear</db:link>() method can be used to discard information about signals that have already occurred to synchronize wait() with future signal emissions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#clear-method">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">TestCase::tryCompare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
