<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QOpenGLBuffer Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link> class provides functions for creating and managing OpenGL buffer objects.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLBuffer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLBuffer is part of <db:simplelist><db:member><db:link xlink:href="painting-3d.xml">Rendering in 3D</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Buffer objects are created in the OpenGL server so that the client application can avoid uploading vertices, indices, texture image data, etc every time they are needed.</db:para>
<db:para><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link> objects can be copied around as a reference to the underlying OpenGL buffer object:</db:para>
<db:programlisting language="cpp">QOpenGLBuffer buffer1(QOpenGLBuffer::IndexBuffer);
buffer1.create();

QOpenGLBuffer buffer2 = buffer1;
</db:programlisting>
<db:para><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link> performs a shallow copy when objects are copied in this manner, but does not implement copy-on-write semantics. The original object will be affected whenever the copy is modified.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Access-enum">
<db:title>enum QOpenGLBuffer::Access</db:title>
<db:para>This enum defines the access mode for <db:link xlink:href="qopenglbuffer.xml#map">QOpenGLBuffer::map</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x88B8</db:code></db:td>
<db:td>
<db:para>The buffer will be mapped for reading only.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::WriteOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x88B9</db:code></db:td>
<db:td>
<db:para>The buffer will be mapped for writing only.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::ReadWrite</db:code></db:para>
</db:td>
<db:td><db:code>0x88BA</db:code></db:td>
<db:td>
<db:para>The buffer will be mapped for reading and writing.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QOpenGLBuffer::Type</db:title>
<db:para>This enum defines the type of OpenGL buffer object to create with <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::VertexBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x8892</db:code></db:td>
<db:td>
<db:para>Vertex buffer object for use when specifying vertex arrays.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::IndexBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x8893</db:code></db:td>
<db:td>
<db:para>Index buffer object for use with <db:code>glDrawElements()</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::PixelPackBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x88EB</db:code></db:td>
<db:td>
<db:para>Pixel pack buffer object for reading pixel data from the OpenGL server (for example, with <db:code>glReadPixels()</db:code>). Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::PixelUnpackBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x88EC</db:code></db:td>
<db:td>
<db:para>Pixel unpack buffer object for writing pixel data to the OpenGL server (for example, with <db:code>glTexImage2D()</db:code>). Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="UsagePattern-enum">
<db:title>enum QOpenGLBuffer::UsagePattern</db:title>
<db:para>This enum defines the usage pattern of a <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link> object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::StreamDraw</db:code></db:para>
</db:td>
<db:td><db:code>0x88E0</db:code></db:td>
<db:td>
<db:para>The data will be set once and used a few times for drawing operations. Under OpenGL/ES 1.1 this is identical to StaticDraw.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::StreamRead</db:code></db:para>
</db:td>
<db:td><db:code>0x88E1</db:code></db:td>
<db:td>
<db:para>The data will be set once and used a few times for reading data back from the OpenGL server. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::StreamCopy</db:code></db:para>
</db:td>
<db:td><db:code>0x88E2</db:code></db:td>
<db:td>
<db:para>The data will be set once and used a few times for reading data back from the OpenGL server for use in further drawing operations. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::StaticDraw</db:code></db:para>
</db:td>
<db:td><db:code>0x88E4</db:code></db:td>
<db:td>
<db:para>The data will be set once and used many times for drawing operations.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::StaticRead</db:code></db:para>
</db:td>
<db:td><db:code>0x88E5</db:code></db:td>
<db:td>
<db:para>The data will be set once and used many times for reading data back from the OpenGL server. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::StaticCopy</db:code></db:para>
</db:td>
<db:td><db:code>0x88E6</db:code></db:td>
<db:td>
<db:para>The data will be set once and used many times for reading data back from the OpenGL server for use in further drawing operations. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::DynamicDraw</db:code></db:para>
</db:td>
<db:td><db:code>0x88E8</db:code></db:td>
<db:td>
<db:para>The data will be modified repeatedly and used many times for drawing operations.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::DynamicRead</db:code></db:para>
</db:td>
<db:td><db:code>0x88E9</db:code></db:td>
<db:td>
<db:para>The data will be modified repeatedly and used many times for reading data back from the OpenGL server. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:emphasis>::DynamicCopy</db:code></db:para>
</db:td>
<db:td><db:code>0x88EA</db:code></db:td>
<db:td>
<db:para>The data will be modified repeatedly and used many times for reading data back from the OpenGL server for use in further drawing operations. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLBuffer">
<db:title>QOpenGLBuffer::QOpenGLBuffer()</db:title>
<db:para>Constructs a new buffer object of type <db:link xlink:href="qopenglbuffer.xml#Type-enum">QOpenGLBuffer::VertexBuffer</db:link>.</db:para>
<db:para>Note: this constructor just creates the <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link> instance. The actual buffer object in the OpenGL server is not created until <db:link xlink:href="qopenglbuffer.xml#create">create</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QOpenGLBuffer-1">
<db:title>[explicit] QOpenGLBuffer::QOpenGLBuffer(QOpenGLBuffer::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Constructs a new buffer object of <db:code role="parameter">type</db:code>.</db:para>
<db:para>Note: this constructor just creates the <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link> instance. The actual buffer object in the OpenGL server is not created until <db:link xlink:href="qopenglbuffer.xml#create">create</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QOpenGLBuffer-2">
<db:title>QOpenGLBuffer::QOpenGLBuffer(const QOpenGLBuffer &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a shallow copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>Note: <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link> does not implement copy-on-write semantics, so <db:code role="parameter">other</db:code> will be affected whenever the copy is modified.</db:para>
</db:section>
<db:section xml:id="dtor.QOpenGLBuffer">
<db:title>[noexcept] QOpenGLBuffer::~QOpenGLBuffer()</db:title>
<db:para>Destroys this buffer object, including the storage being used in the OpenGL server.</db:para>
</db:section>
<db:section xml:id="allocate">
<db:title>void QOpenGLBuffer::allocate(const void *<db:emphasis>data</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Allocates <db:code role="parameter">count</db:code> bytes of space to the buffer, initialized to the contents of <db:code role="parameter">data</db:code>. Any previous contents will be removed.</db:para>
<db:para>It is assumed that <db:link xlink:href="qopenglbuffer.xml#create">create</db:link>() has been called on this buffer and that it has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="allocate-1">
<db:title>void QOpenGLBuffer::allocate(int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Allocates <db:code role="parameter">count</db:code> bytes of space to the buffer. Any previous contents will be removed.</db:para>
<db:para>It is assumed that <db:link xlink:href="qopenglbuffer.xml#create">create</db:link>() has been called on this buffer and that it has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bind">
<db:title>bool QOpenGLBuffer::bind()</db:title>
<db:para>Binds the buffer associated with this object to the current OpenGL context. Returns false if binding was not possible, usually because <db:link xlink:href="qopenglbuffer.xml#type">type</db:link>() is not supported on this OpenGL implementation.</db:para>
<db:para>The buffer must be bound to the same <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> current when <db:link xlink:href="qopenglbuffer.xml#create">create</db:link>() was called, or to another <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> that is sharing with it. Otherwise, false will be returned from this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#release">release</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bufferId">
<db:title>GLuint QOpenGLBuffer::bufferId() const</db:title>
<db:para>Returns the OpenGL identifier associated with this buffer; zero if the buffer has not been created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#isCreated">isCreated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>bool QOpenGLBuffer::create()</db:title>
<db:para>Creates the buffer object in the OpenGL server. Returns true if the object was created; false otherwise.</db:para>
<db:para>This function must be called with a current <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. The buffer will be bound to and can only be used in that context (or any other context that is shared with it).</db:para>
<db:para>This function will return false if the OpenGL implementation does not support buffers, or there is no current <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#isCreated">isCreated</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#allocate">allocate</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroy">
<db:title>void QOpenGLBuffer::destroy()</db:title>
<db:para>Destroys this buffer object, including the storage being used in the OpenGL server. All references to the buffer will become invalid.</db:para>
</db:section>
<db:section xml:id="isCreated">
<db:title>bool QOpenGLBuffer::isCreated() const</db:title>
<db:para>Returns true if this buffer has been created; false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="map">
<db:title>void *QOpenGLBuffer::map(QOpenGLBuffer::Access <db:emphasis>access</db:emphasis>)</db:title>
<db:para>Maps the contents of this buffer into the application's memory space and returns a pointer to it. Returns null if memory mapping is not possible. The <db:code role="parameter">access</db:code> parameter indicates the type of access to be performed.</db:para>
<db:para>It is assumed that <db:link xlink:href="qopenglbuffer.xml#create">create</db:link>() has been called on this buffer and that it has been bound to the current context.</db:para>
<db:para>This function is only supported under OpenGL/ES if the <db:code>GL_OES_mapbuffer</db:code> extension is present.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#unmap">unmap</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>bool QOpenGLBuffer::read(int <db:emphasis>offset</db:emphasis>, void *<db:emphasis>data</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Reads the <db:code role="parameter">count</db:code> bytes in this buffer starting at <db:code role="parameter">offset</db:code> into <db:code role="parameter">data</db:code>. Returns true on success; false if reading from the buffer is not supported. Buffer reading is not supported under OpenGL/ES.</db:para>
<db:para>It is assumed that this buffer has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release">
<db:title>void QOpenGLBuffer::release()</db:title>
<db:para>Releases the buffer associated with this object from the current OpenGL context.</db:para>
<db:para>This function must be called with the same <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> current as when <db:link xlink:href="qopenglbuffer.xml#bind">bind</db:link>() was called on the buffer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release-1">
<db:title>[static] void QOpenGLBuffer::release(QOpenGLBuffer::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Releases the buffer associated with <db:code role="parameter">type</db:code> in the current <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>.</db:para>
<db:para>This function is a direct call to <db:code>glBindBuffer(type, 0)</db:code> for use when the caller does not know which <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link> has been bound to the context but wants to make sure that it is released.</db:para>
<db:programlisting language="cpp">QOpenGLBuffer::release(QOpenGLBuffer::VertexBuffer);
</db:programlisting>
</db:section>
<db:section xml:id="setUsagePattern">
<db:title>void QOpenGLBuffer::setUsagePattern(QOpenGLBuffer::UsagePattern <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the usage pattern for this buffer object to <db:code role="parameter">value</db:code>. This function must be called before <db:link xlink:href="qopenglbuffer.xml#allocate">allocate</db:link>() or <db:link xlink:href="qopenglbuffer.xml#write">write</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#usagePattern">usagePattern</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#allocate">allocate</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>int QOpenGLBuffer::size() const</db:title>
<db:para>Returns the size of the data in this buffer, for reading operations. Returns -1 if fetching the buffer size is not supported, or the buffer has not been created.</db:para>
<db:para>It is assumed that this buffer has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#isCreated">isCreated</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QOpenGLBuffer::Type QOpenGLBuffer::type() const</db:title>
<db:para>Returns the type of buffer represented by this object.</db:para>
</db:section>
<db:section xml:id="unmap">
<db:title>bool QOpenGLBuffer::unmap()</db:title>
<db:para>Unmaps the buffer after it was mapped into the application's memory space with a previous call to <db:link xlink:href="qopenglbuffer.xml#map">map</db:link>(). Returns true if the unmap succeeded; false otherwise.</db:para>
<db:para>It is assumed that this buffer has been bound to the current context, and that it was previously mapped with <db:link xlink:href="qopenglbuffer.xml#map">map</db:link>().</db:para>
<db:para>This function is only supported under OpenGL/ES if the <db:code>GL_OES_mapbuffer</db:code> extension is present.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="usagePattern">
<db:title>QOpenGLBuffer::UsagePattern QOpenGLBuffer::usagePattern() const</db:title>
<db:para>Returns the usage pattern for this buffer object. The default value is <db:link xlink:href="qopenglbuffer.xml#UsagePattern-enum">StaticDraw</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#setUsagePattern">setUsagePattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>void QOpenGLBuffer::write(int <db:emphasis>offset</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Replaces the <db:code role="parameter">count</db:code> bytes of this buffer starting at <db:code role="parameter">offset</db:code> with the contents of <db:code role="parameter">data</db:code>. Any other bytes in the buffer will be left unmodified.</db:para>
<db:para>It is assumed that <db:link xlink:href="qopenglbuffer.xml#create">create</db:link>() has been called on this buffer and that it has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml#allocate">allocate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QOpenGLBuffer &amp;QOpenGLBuffer::operator=(const QOpenGLBuffer &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns a shallow copy of <db:code role="parameter">other</db:code> to this object.</db:para>
<db:para>Note: <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link> does not implement copy-on-write semantics, so <db:code role="parameter">other</db:code> will be affected whenever the copy is modified.</db:para>
</db:section>
</db:section>
</db:article>
