<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QTabWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> class provides a stack of tabbed widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTabWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTabWidget is part of <db:simplelist><db:member>organizers</db:member><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A tab widget provides a tab bar (see <db:link xlink:href="qtabbar.xml">QTabBar</db:link>) and a &quot;page area&quot; that is used to display pages related to each tab. By default, the tab bar is shown above the page area, but different configurations are available (see <db:link xlink:href="qtabwidget.xml#TabPosition-enum">TabPosition</db:link>). Each tab is associated with a different widget (called a page). Only the current page is shown in the page area; all the other pages are hidden. The user can show a different page by clicking on its tab or by pressing its Alt+<db:emphasis>letter</db:emphasis> shortcut if it has one.</db:para>
<db:para>The normal way to use <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> is to do the following:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Create a <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Create a <db:link xlink:href="qwidget.xml">QWidget</db:link> for each of the pages in the tab dialog, but do not specify parent widgets for them.</db:para>
</db:listitem>
<db:listitem>
<db:para>Insert child widgets into the page widget, using layouts to position them as normal.</db:para>
</db:listitem>
<db:listitem>
<db:para>Call <db:link xlink:href="qtabwidget.xml#addTab">addTab</db:link>() or <db:link xlink:href="qtabwidget.xml#insertTab">insertTab</db:link>() to put the page widgets into the tab widget, giving each tab a suitable label with an optional keyboard shortcut.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The position of the tabs is defined by tabPosition, their shape by tabShape.</db:para>
<db:para>The signal <db:link xlink:href="qtabwidget.xml#currentChanged">currentChanged</db:link>() is emitted when the user selects a page.</db:para>
<db:para>The current page index is available as currentIndex(), the current page widget with <db:link xlink:href="qtabwidget.xml#currentWidget">currentWidget</db:link>(). You can retrieve a pointer to a page widget with a given index using <db:link xlink:href="qtabwidget.xml#widget">widget</db:link>(), and can find the index position of a widget with <db:link xlink:href="qtabwidget.xml#indexOf">indexOf</db:link>(). Use <db:link xlink:href="qtabwidget.xml#setCurrentWidget">setCurrentWidget</db:link>() or setCurrentIndex() to show a particular page.</db:para>
<db:para>You can change a tab's text and icon using <db:link xlink:href="qtabwidget.xml#setTabText">setTabText</db:link>() or <db:link xlink:href="qtabwidget.xml#setTabIcon">setTabIcon</db:link>(). A tab and its associated page can be removed with <db:link xlink:href="qtabwidget.xml#removeTab">removeTab</db:link>().</db:para>
<db:para>Each tab is either enabled or disabled at any given time (see <db:link xlink:href="qtabwidget.xml#setTabEnabled">setTabEnabled</db:link>()). If a tab is enabled, the tab text is drawn normally and the user can select that tab. If it is disabled, the tab is drawn in a different way and the user cannot select that tab. Note that even if a tab is disabled, the page can still be visible, for example if all of the tabs happen to be disabled.</db:para>
<db:para>Tab widgets can be a very good way to split up a complex dialog. An alternative is to use a <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> for which you provide some means of navigating between pages, for example, a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> or a <db:link xlink:href="qlistwidget.xml">QListWidget</db:link>.</db:para>
<db:para>Most of the functionality in <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> is provided by a <db:link xlink:href="qtabbar.xml">QTabBar</db:link> (at the top, providing the tabs) and a <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> (most of the area, organizing the individual pages).</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-tabwidget.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista style tab widget</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-tabwidget.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh style tab widget</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-tabwidget.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style tab widget</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A Windows Vista style tab widget.</db:para>
</db:td>
<db:td>
<db:para>A Macintosh style tab widget.</db:para>
</db:td>
<db:td>
<db:para>A Fusion style tab widget.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:member>
<db:member><db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link></db:member>
<db:member><db:link xlink:href="qtoolbox.xml">QToolBox</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-tabdialog-example.xml">Tab Dialog Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="TabPosition-enum">
<db:title>enum QTabWidget::TabPosition</db:title>
<db:para>This enum type defines where <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> draws the tab row:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:emphasis>::North</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The tabs are drawn above the pages.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:emphasis>::South</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The tabs are drawn below the pages.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:emphasis>::West</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The tabs are drawn to the left of the pages.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:emphasis>::East</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The tabs are drawn to the right of the pages.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TabShape-enum">
<db:title>enum QTabWidget::TabShape</db:title>
<db:para>This enum type defines the shape of the tabs:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:emphasis>::Rounded</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The tabs are drawn with a rounded look. This is the default shape.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:emphasis>::Triangular</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The tabs are drawn with a triangular look.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTabWidget">
<db:title>[explicit] QTabWidget::QTabWidget(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a tabbed widget with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTabWidget">
<db:title>[virtual noexcept] QTabWidget::~QTabWidget()</db:title>
<db:para>Destroys the tabbed widget.</db:para>
</db:section>
<db:section xml:id="addTab">
<db:title>int QTabWidget::addTab(QWidget *<db:emphasis>page</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>)</db:title>
<db:para>Adds a tab with the given <db:code role="parameter">page</db:code> and <db:code role="parameter">label</db:code> to the tab widget, and returns the index of the tab in the tab bar.</db:para>
<db:para>If the tab's <db:code role="parameter">label</db:code> contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is &quot;Bro&amp;wse&quot; then Alt+W becomes a shortcut which will move the focus to this tab.</db:para>
<db:note>
<db:para>If you call addTab() after <db:link xlink:href="qwidget.xml#show">show</db:link>(), the layout system will try to adjust to the changes in its widgets hierarchy and may cause flicker. To prevent this, you can set the QWidget::updatesEnabled property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#insertTab">insertTab</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addTab-1">
<db:title>int QTabWidget::addTab(QWidget *<db:emphasis>page</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a tab with the given <db:code role="parameter">page</db:code>, <db:code role="parameter">icon</db:code>, and <db:code role="parameter">label</db:code> to the tab widget, and returns the index of the tab in the tab bar.</db:para>
<db:para>This function is the same as <db:link xlink:href="qtabwidget.xml#addTab">addTab</db:link>(), but with an additional <db:code role="parameter">icon</db:code>.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QTabWidget::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QTabWidget::clear()</db:title>
<db:para>Removes all the pages, but does not delete them. Calling this function is equivalent to calling <db:link xlink:href="qtabwidget.xml#removeTab">removeTab</db:link>() until the tab widget is empty.</db:para>
</db:section>
<db:section xml:id="cornerWidget">
<db:title>QWidget *QTabWidget::cornerWidget(Qt::Corner <db:emphasis>corner</db:emphasis> = Qt::TopRightCorner) const</db:title>
<db:para>Returns the widget shown in the <db:code role="parameter">corner</db:code> of the tab widget or 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#setCornerWidget">setCornerWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentChanged">
<db:title>void QTabWidget::currentChanged(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the current page index changes. The parameter is the new current page <db:code role="parameter">index</db:code> position, or -1 if there isn't a new one (for example, if there are no widgets in the <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#currentWidget">currentWidget</db:link>()</db:member>
<db:member>currentIndex</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentWidget">
<db:title>QWidget *QTabWidget::currentWidget() const</db:title>
<db:para>Returns a pointer to the page currently being displayed by the tab dialog. The tab dialog does its best to make sure that this value is never 0 (but if you try hard enough, it can be).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">currentIndex()</db:link></db:member>
<db:member><db:link xlink:href="qtabwidget.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QTabWidget::event(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hasHeightForWidth">
<db:title>[override virtual] bool QTabWidget::hasHeightForWidth() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hasHeightForWidth" role="function">QWidget::hasHeightForWidth() const</db:link>.</db:para>
</db:section>
<db:section xml:id="heightForWidth">
<db:title>[override virtual] int QTabWidget::heightForWidth(int <db:emphasis>width</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#heightForWidth" role="function">QWidget::heightForWidth(int w) const</db:link>.</db:para>
</db:section>
<db:section xml:id="indexOf">
<db:title>int QTabWidget::indexOf(QWidget *<db:emphasis>w</db:emphasis>) const</db:title>
<db:para>Returns the index position of the page occupied by the widget <db:code role="parameter">w</db:code>, or -1 if the widget cannot be found.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QTabWidget::initStyleOption(QStyleOptionTabWidgetFrame *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptiontabwidgetframe.xml">QStyleOptionTabWidgetFrame</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
<db:member><db:link xlink:href="qtabbar.xml#initStyleOption">QTabBar::initStyleOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertTab">
<db:title>int QTabWidget::insertTab(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>page</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>)</db:title>
<db:para>Inserts a tab with the given <db:code role="parameter">label</db:code> and <db:code role="parameter">page</db:code> into the tab widget at the specified <db:code role="parameter">index</db:code>, and returns the index of the inserted tab in the tab bar.</db:para>
<db:para>The label is displayed in the tab and may vary in appearance depending on the configuration of the tab widget.</db:para>
<db:para>If the tab's <db:code role="parameter">label</db:code> contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is &quot;Bro&amp;wse&quot; then Alt+W becomes a shortcut which will move the focus to this tab.</db:para>
<db:para>If <db:code role="parameter">index</db:code> is out of range, the tab is simply appended. Otherwise it is inserted at the specified position.</db:para>
<db:para>If the <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> was empty before this function is called, the new page becomes the current page. Inserting a new tab at an index less than or equal to the current index will increment the current index, but keep the current page.</db:para>
<db:note>
<db:para>If you call insertTab() after <db:link xlink:href="qwidget.xml#show">show</db:link>(), the layout system will try to adjust to the changes in its widgets hierarchy and may cause flicker. To prevent this, you can set the QWidget::updatesEnabled property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#addTab">addTab</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertTab-1">
<db:title>int QTabWidget::insertTab(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>page</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts a tab with the given <db:code role="parameter">label</db:code>, <db:code role="parameter">page</db:code>, and <db:code role="parameter">icon</db:code> into the tab widget at the specified <db:code role="parameter">index</db:code>, and returns the index of the inserted tab in the tab bar.</db:para>
<db:para>This function is the same as <db:link xlink:href="qtabwidget.xml#insertTab">insertTab</db:link>(), but with an additional <db:code role="parameter">icon</db:code>.</db:para>
</db:section>
<db:section xml:id="isTabEnabled">
<db:title>bool QTabWidget::isTabEnabled(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the page at position <db:code role="parameter">index</db:code> is enabled; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#setTabEnabled">setTabEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="">QWidget::isEnabled()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QTabWidget::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QTabWidget::minimumSizeHint() const</db:title>
<db:para>Returns a suitable minimum size for the tab widget.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QTabWidget::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
<db:para>Paints the tab widget's tab bar in response to the paint <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="removeTab">
<db:title>void QTabWidget::removeTab(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the tab at position <db:code role="parameter">index</db:code> from this stack of widgets. The page widget itself is not deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#addTab">addTab</db:link>()</db:member>
<db:member><db:link xlink:href="qtabwidget.xml#insertTab">insertTab</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QTabWidget::resizeEvent(QResizeEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="setCornerWidget">
<db:title>void QTabWidget::setCornerWidget(QWidget *<db:emphasis>widget</db:emphasis>, Qt::Corner <db:emphasis>corner</db:emphasis> = Qt::TopRightCorner)</db:title>
<db:para>Sets the given <db:code role="parameter">widget</db:code> to be shown in the specified <db:code role="parameter">corner</db:code> of the tab widget. The geometry of the widget is determined based on the widget's <db:link xlink:href="qtabwidget.xml#sizeHint">sizeHint</db:link>() and the <db:link xlink:href="qwidget.xml#style">style</db:link>().</db:para>
<db:para>Only the horizontal element of the <db:code role="parameter">corner</db:code> will be used.</db:para>
<db:para>Passing 0 shows no widget in the corner.</db:para>
<db:para>Any previously set corner widget is hidden.</db:para>
<db:para>All widgets set here will be deleted by the tab widget when it is destroyed unless you separately reparent the widget after setting some other corner widget (or 0).</db:para>
<db:para>Note: Corner widgets are designed for <db:link xlink:href="qtabwidget.xml#TabPosition-enum">North</db:link> and <db:link xlink:href="qtabwidget.xml#TabPosition-enum">South</db:link> tab positions; other orientations are known to not work properly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#cornerWidget">cornerWidget</db:link>()</db:member>
<db:member><db:link xlink:href="">setTabPosition()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentWidget">
<db:title>void QTabWidget::setCurrentWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Makes <db:code role="parameter">widget</db:code> the current widget. The <db:code role="parameter">widget</db:code> used must be a page in this tab widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#addTab">addTab</db:link>()</db:member>
<db:member><db:link xlink:href="">setCurrentIndex()</db:link></db:member>
<db:member><db:link xlink:href="qtabwidget.xml#currentWidget">currentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabBar">
<db:title>[protected] void QTabWidget::setTabBar(QTabBar *<db:emphasis>tb</db:emphasis>)</db:title>
<db:para>Replaces the dialog's <db:link xlink:href="qtabbar.xml">QTabBar</db:link> heading with the tab bar <db:code role="parameter">tb</db:code>. Note that this must be called <db:emphasis>before</db:emphasis> any tabs have been added, or the behavior is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#tabBar">tabBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabEnabled">
<db:title>void QTabWidget::setTabEnabled(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, the page at position <db:code role="parameter">index</db:code> is enabled; otherwise the page at position <db:code role="parameter">index</db:code> is disabled. The page's tab is redrawn appropriately.</db:para>
<db:para><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> uses QWidget::setEnabled() internally, rather than keeping a separate flag.</db:para>
<db:para>Note that even a disabled tab/page may be visible. If the page is visible already, <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> will not hide it; if all the pages are disabled, <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> will show one of them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#isTabEnabled">isTabEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="">QWidget::setEnabled()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabIcon">
<db:title>void QTabWidget::setTabIcon(int <db:emphasis>index</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the <db:code role="parameter">icon</db:code> for the tab at position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#tabIcon">tabIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabText">
<db:title>void QTabWidget::setTabText(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>)</db:title>
<db:para>Defines a new <db:code role="parameter">label</db:code> for the page at position <db:code role="parameter">index</db:code>'s tab.</db:para>
<db:para>If the provided text contains an ampersand character ('&amp;'), a shortcut is automatically created for it. The character that follows the '&amp;' will be used as the shortcut key. Any previous shortcut will be overwritten, or cleared if no shortcut is defined by the text. See the <db:link xlink:href="qshortcut.xml#mnemonic">QShortcut</db:link> documentation for details (to display an actual ampersand, use '&amp;&amp;').</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#tabText">tabText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabToolTip">
<db:title>void QTabWidget::setTabToolTip(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>tip</db:emphasis>)</db:title>
<db:para>Sets the tab tool tip for the page at position <db:code role="parameter">index</db:code> to <db:code role="parameter">tip</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#tabToolTip">tabToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabWhatsThis">
<db:title>[since 4.1] void QTabWidget::setTabWhatsThis(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the What's This help text for the page at position <db:code role="parameter">index</db:code> to <db:code role="parameter">text</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#tabWhatsThis">tabWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QTabWidget::showEvent(<db:emphasis>QShowEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QTabWidget::sizeHint() const</db:title>
</db:section>
<db:section xml:id="tabBar">
<db:title>QTabBar *QTabWidget::tabBar() const</db:title>
<db:para>Returns the current <db:link xlink:href="qtabbar.xml">QTabBar</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#setTabBar">setTabBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabBarClicked">
<db:title>[since 5.2] void QTabWidget::tabBarClicked(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when user clicks on a tab at an <db:code role="parameter">index</db:code>.</db:para>
<db:para><db:code role="parameter">index</db:code> refers to the tab clicked, or -1 if no tab is under the cursor.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="tabBarDoubleClicked">
<db:title>[since 5.2] void QTabWidget::tabBarDoubleClicked(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user double clicks on a tab at an <db:code role="parameter">index</db:code>.</db:para>
<db:para><db:code role="parameter">index</db:code> is the index of a clicked tab, or -1 if no tab is under the cursor.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="tabCloseRequested">
<db:title>[since 4.5] void QTabWidget::tabCloseRequested(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the close button on a tab is clicked. The <db:code role="parameter">index</db:code> is the index that should be removed.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setTabsClosable()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabIcon">
<db:title>QIcon QTabWidget::tabIcon(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the icon for the tab on the page at position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#setTabIcon">setTabIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabInserted">
<db:title>[virtual protected] void QTabWidget::tabInserted(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This virtual handler is called after a new tab was added or inserted at position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#tabRemoved">tabRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabRemoved">
<db:title>[virtual protected] void QTabWidget::tabRemoved(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This virtual handler is called after a tab was removed from position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#tabInserted">tabInserted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabText">
<db:title>QString QTabWidget::tabText(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the label text for the tab on the page at position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#setTabText">setTabText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabToolTip">
<db:title>QString QTabWidget::tabToolTip(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the tab tool tip for the page at position <db:code role="parameter">index</db:code> or an empty string if no tool tip has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#setTabToolTip">setTabToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabWhatsThis">
<db:title>[since 4.1] QString QTabWidget::tabWhatsThis(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the What's This help text for the page at position <db:code role="parameter">index</db:code>, or an empty string if no help text has been set.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#setTabWhatsThis">setTabWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QTabWidget::widget(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the tab page at index position <db:code role="parameter">index</db:code> or 0 if the <db:code role="parameter">index</db:code> is out of range.</db:para>
</db:section>
</db:section>
</db:article>
