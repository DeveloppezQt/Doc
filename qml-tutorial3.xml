<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Tutorial 3 - States and Transitions</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qml-tutorial2.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="QML Tutorial 2 - QML Components"/></db:extendedlink>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In this chapter, we make this example a little bit more dynamic by introducing states and transitions.</db:para>
<db:para>We want our text to move to the bottom of the screen, rotate and become red when clicked.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-tutorial3_animation.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here is the QML code:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    id: page
    width: 320; height: 480
    color: &quot;lightgray&quot;

    Text {
        id: helloText
        text: &quot;Hello world!&quot;
        y: 30
        anchors.horizontalCenter: page.horizontalCenter
        font.pointSize: 24; font.bold: true

        MouseArea { id: mouseArea; anchors.fill: parent }

        states: State {
            name: &quot;down&quot;; when: mouseArea.pressed == true
            PropertyChanges {
                helloText {
                    y: 160
                    rotation: 180
                    color: &quot;red&quot;
                }
            }
        }

        transitions: Transition {
            from: &quot;&quot;; to: &quot;down&quot;; reversible: true
            ParallelAnimation {
                NumberAnimation { properties: &quot;y,rotation&quot;; duration: 500; easing.type: Easing.InOutQuad }
                ColorAnimation { duration: 500 }
            }
        }
    }

    Grid {
        id: colorPicker
        x: 4; anchors.bottom: page.bottom; anchors.bottomMargin: 4
        rows: 2; columns: 3; spacing: 3

        Cell { cellColor: &quot;red&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;green&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;blue&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;yellow&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;steelblue&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;black&quot;; onClicked: helloText.color = cellColor }
    }
}
</db:programlisting>
<db:section xml:id="walkthrough">
<db:title>Walkthrough</db:title>
<db:programlisting language="qml">        states: State {
            name: &quot;down&quot;; when: mouseArea.pressed == true
            PropertyChanges {
                helloText {
                    y: 160
                    rotation: 180
                    color: &quot;red&quot;
                }
            }
        }
</db:programlisting>
<db:para>First, we create a new <db:emphasis>down</db:emphasis> state for our text type. This state will be activated when the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is pressed, and deactivated when it is released.</db:para>
<db:para>The <db:emphasis>down</db:emphasis> state includes a set of property changes from our implicit <db:emphasis>default state</db:emphasis> (the items as they were initially defined in the QML). Specifically, we set the <db:code>y</db:code> property of the text to <db:code>160</db:code>, the rotation to <db:code>180</db:code> and the <db:code>color</db:code> to red.</db:para>
<db:programlisting language="qml">        transitions: Transition {
            from: &quot;&quot;; to: &quot;down&quot;; reversible: true
            ParallelAnimation {
                NumberAnimation { properties: &quot;y,rotation&quot;; duration: 500; easing.type: Easing.InOutQuad }
                ColorAnimation { duration: 500 }
            }
        }
</db:programlisting>
<db:para>Because we don't want the text to appear at the bottom instantly but rather move smoothly, we add a transition between our two states.</db:para>
<db:para><db:code>from</db:code> and <db:code>to</db:code> define the states between which the transition will run. In this case, we want a transition from the default state to our <db:emphasis>down</db:emphasis> state.</db:para>
<db:para>Because we want the same transition to be run in reverse when changing back from the <db:emphasis>down</db:emphasis> state to the default state, we set <db:code>reversible</db:code> to <db:code>true</db:code>. This is equivalent to writing the two transitions separately.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-parallelanimation.xml">ParallelAnimation</db:link> type makes sure that the two types of animations (number and color) start at the same time. We could also run them one after the other by using <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> instead.</db:para>
<db:para>For more details on states and transitions, see <db:link xlink:href="qtquick-statesanimations-states.xml">Qt Quick States</db:link> and the <db:link xlink:href="qtquick-animation-example.xml#states">states and transitions example</db:link>.</db:para>
</db:section>
</db:article>
