<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QClipboard Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qclipboard.xml">QClipboard</db:link> class provides access to the window system clipboard.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QClipboard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The clipboard offers a simple mechanism to copy and paste data between applications.</db:para>
<db:para><db:link xlink:href="qclipboard.xml">QClipboard</db:link> supports the same data types that <db:link xlink:href="qdrag.xml">QDrag</db:link> does, and uses similar mechanisms. For advanced clipboard usage read <db:link xlink:href="dnd.xml">Drag and Drop</db:link>.</db:para>
<db:para>There is a single <db:link xlink:href="qclipboard.xml">QClipboard</db:link> object in an application, accessible as QGuiApplication::clipboard().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QClipboard *clipboard = QGuiApplication::clipboard();
QString originalText = clipboard-&amp;gt;text();
// etc.
clipboard-&amp;gt;setText(newText);
</db:programlisting>
<db:para><db:link xlink:href="qclipboard.xml">QClipboard</db:link> features some convenience functions to access common data types: <db:link xlink:href="qclipboard.xml#setText">setText</db:link>() allows the exchange of Unicode text and <db:link xlink:href="qclipboard.xml#setPixmap">setPixmap</db:link>() and <db:link xlink:href="qclipboard.xml#setImage">setImage</db:link>() allows the exchange of QPixmaps and QImages between applications. The <db:link xlink:href="qclipboard.xml#setMimeData">setMimeData</db:link>() function is the ultimate in flexibility: it allows you to add any <db:link xlink:href="qmimedata.xml">QMimeData</db:link> into the clipboard. There are corresponding getters for each of these, e.g. <db:link xlink:href="qclipboard.xml#text">text</db:link>(), <db:link xlink:href="qclipboard.xml#image">image</db:link>() and <db:link xlink:href="qclipboard.xml#pixmap">pixmap</db:link>(). You can clear the clipboard by calling <db:link xlink:href="qclipboard.xml#clear">clear</db:link>().</db:para>
<db:para>A typical example of the use of these functions follows:</db:para>
<db:programlisting language="cpp">void DropArea::paste()
{
    const QClipboard *clipboard = QApplication::clipboard();
    const QMimeData *mimeData = clipboard-&amp;gt;mimeData();

    if (mimeData-&amp;gt;hasImage()) {
        setPixmap(qvariant_cast&amp;lt;QPixmap&amp;gt;(mimeData-&amp;gt;imageData()));
    } else if (mimeData-&amp;gt;hasHtml()) {
        setText(mimeData-&amp;gt;html());
        setTextFormat(Qt::RichText);
    } else if (mimeData-&amp;gt;hasText()) {
        setText(mimeData-&amp;gt;text());
        setTextFormat(Qt::PlainText);
    } else {
        setText(tr(&quot;Cannot display data&quot;));
    }
}
</db:programlisting>
<db:section xml:id="notes-for-x11-users">
<db:title>Notes for X11 Users</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The X11 Window System has the concept of a separate selection and clipboard. When text is selected, it is immediately available as the global mouse selection. The global mouse selection may later be copied to the clipboard. By convention, the middle mouse button is used to paste the global mouse selection.</db:para>
</db:listitem>
<db:listitem>
<db:para>X11 also has the concept of ownership; if you change the selection within a window, X11 will only notify the owner and the previous owner of the change, i.e. it will not notify all applications that the selection or clipboard data changed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Lastly, the X11 clipboard is event driven, i.e. the clipboard will not function properly if the event loop is not running. Similarly, it is recommended that the contents of the clipboard are stored or retrieved in direct response to user-input events, e.g. mouse button or key presses and releases. You should not store or retrieve the clipboard contents in response to timer or non-user-input events.</db:para>
</db:listitem>
<db:listitem>
<db:para>Since there is no standard way to copy and paste files between applications on X11, various MIME types and conventions are currently in use. For instance, Nautilus expects files to be supplied with a <db:code>x-special/gnome-copied-files</db:code> MIME type with data beginning with the cut/copy action, a newline character, and the URL of the file.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="notes-for-macos-users">
<db:title>Notes for macOS Users</db:title>
<db:para>macOS supports a separate find buffer that holds the current search string in Find operations. This find clipboard can be accessed by specifying the <db:link xlink:href="qclipboard.xml#Mode-enum">FindBuffer</db:link> mode.</db:para>
</db:section>
<db:section xml:id="notes-for-windows-and-macos-users">
<db:title>Notes for Windows and macOS Users</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Windows and macOS do not support the global mouse selection; they only supports the global clipboard, i.e. they only add text to the clipboard when an explicit copy or cut is made.</db:para>
</db:listitem>
<db:listitem>
<db:para>Windows and macOS does not have the concept of ownership; the clipboard is a fully global resource so all applications are notified of changes.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="notes-for-android-users">
<db:title>Notes for Android Users</db:title>
<db:para>On Android only these mime types are supported: text/plain, text/html, and text/uri-list.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Mode-enum">
<db:title>enum QClipboard::Mode</db:title>
<db:enumsynopsis>
<db:enumname>Mode</db:enumname>
<db:enumitem>
<db:enumidentifier>Clipboard</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Selection</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FindBuffer</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastMode</db:enumidentifier>
<db:enumvalue>FindBuffer</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type is used to control which part of the system clipboard is used by <db:link xlink:href="qclipboard.xml#mimeData">QClipboard::mimeData</db:link>(), <db:link xlink:href="qclipboard.xml#setMimeData">QClipboard::setMimeData</db:link>() and related functions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qclipboard.xml">QClipboard</db:link></db:emphasis>::Clipboard</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>indicates that data should be stored and retrieved from the global clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qclipboard.xml">QClipboard</db:link></db:emphasis>::Selection</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>indicates that data should be stored and retrieved from the global mouse selection. Support for <db:code>Selection</db:code> is provided only on systems with a global mouse selection (e.g. X11).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qclipboard.xml">QClipboard</db:link></db:emphasis>::FindBuffer</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>indicates that data should be stored and retrieved from the Find buffer. This mode is used for holding search strings on macOS.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#supportsSelection">QClipboard::supportsSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="changed">
<db:title>void QClipboard::changed(QClipboard::Mode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>changed</db:methodname>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changed(QClipboard::Mode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the data for the given clipboard <db:code role="parameter">mode</db:code> is changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#dataChanged">dataChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#selectionChanged">selectionChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#findBufferChanged">findBufferChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QClipboard::clear(QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear(QClipboard::Mode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clear the clipboard contents.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, this function clears the global clipboard contents. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, this function clears the global mouse selection contents. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::FindBuffer</db:link>, this function clears the search string buffer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Mode</db:link></db:member>
<db:member><db:link xlink:href="qclipboard.xml#supportsSelection">supportsSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dataChanged">
<db:title>void QClipboard::dataChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dataChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dataChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the clipboard data is changed.</db:para>
<db:para>On macOS and with Qt version 4.3 or higher, clipboard changes made by other applications will only be detected when the application is activated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#findBufferChanged">findBufferChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#selectionChanged">selectionChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#changed">changed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findBufferChanged">
<db:title>void QClipboard::findBufferChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>findBufferChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void findBufferChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the find buffer is changed. This only applies to macOS.</db:para>
<db:para>With Qt version 4.3 or higher, clipboard changes made by other applications will only be detected when the application is activated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#dataChanged">dataChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#selectionChanged">selectionChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#changed">changed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="image">
<db:title>QImage QClipboard::image(QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImage</db:type>
<db:methodname>image</db:methodname>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage image(QClipboard::Mode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the clipboard image, or returns a null image if the clipboard does not contain an image or if it contains an image in an unsupported image format.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, the image is retrieved from the global clipboard. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, the image is retrieved from the global mouse selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#setImage">setImage</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#pixmap">pixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#mimeData">mimeData</db:link>()</db:member>
<db:member><db:link xlink:href="qimage.xml#isNull">QImage::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeData">
<db:title>const QMimeData *QClipboard::mimeData(QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QMimeData *</db:type>
<db:methodname>mimeData</db:methodname>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QMimeData * mimeData(QClipboard::Mode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a <db:link xlink:href="qmimedata.xml">QMimeData</db:link> representation of the current clipboard data (can be <db:code>nullptr</db:code> if the given <db:code role="parameter">mode</db:code> is not supported by the platform).</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, the data is retrieved from the global clipboard. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, the data is retrieved from the global mouse selection. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::FindBuffer</db:link>, the data is retrieved from the search string buffer.</db:para>
<db:para>The <db:link xlink:href="qclipboard.xml#text">text</db:link>(), <db:link xlink:href="qclipboard.xml#image">image</db:link>(), and <db:link xlink:href="qclipboard.xml#pixmap">pixmap</db:link>() functions are simpler wrappers for retrieving text, image, and pixmap data.</db:para>
<db:note>
<db:para>The pointer returned might become invalidated when the contents of the clipboard changes; either by calling one of the setter functions or externally by the system clipboard changing.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#setMimeData">setMimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ownsClipboard">
<db:title>bool QClipboard::ownsClipboard() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>ownsClipboard</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool ownsClipboard() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this clipboard object owns the clipboard data; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="ownsFindBuffer">
<db:title>bool QClipboard::ownsFindBuffer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>ownsFindBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool ownsFindBuffer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this clipboard object owns the find buffer data; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="ownsSelection">
<db:title>bool QClipboard::ownsSelection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>ownsSelection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool ownsSelection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this clipboard object owns the mouse selection data; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="pixmap">
<db:title>QPixmap QClipboard::pixmap(QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>pixmap</db:methodname>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap pixmap(QClipboard::Mode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the clipboard pixmap, or null if the clipboard does not contain a pixmap. Note that this can lose information. For example, if the image is 24-bit and the display is 8-bit, the result is converted to 8 bits, and if the image has an alpha channel, the result just has a mask.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, the pixmap is retrieved from the global clipboard. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, the pixmap is retrieved from the global mouse selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#setPixmap">setPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#image">image</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#mimeData">mimeData</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#convertFromImage">QPixmap::convertFromImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>void QClipboard::selectionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the selection is changed. This only applies to windowing systems that support selections, e.g. X11. Windows and macOS don't support selections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#dataChanged">dataChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#findBufferChanged">findBufferChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#changed">changed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setImage">
<db:title>void QClipboard::setImage(const QImage &amp;<db:emphasis>image</db:emphasis>, QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setImage</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setImage(const QImage &amp;image, QClipboard::Mode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the <db:code role="parameter">image</db:code> into the clipboard.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, the image is stored in the global clipboard. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, the data is stored in the global mouse selection.</db:para>
<db:para>This is shorthand for:</db:para>
<db:programlisting language="cpp">QMimeData *data = new QMimeData;
data-&amp;gt;setImageData(image);
clipboard-&amp;gt;setMimeData(data, mode);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#image">image</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#setPixmap">setPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#setMimeData">setMimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMimeData">
<db:title>void QClipboard::setMimeData(QMimeData *<db:emphasis>src</db:emphasis>, QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMimeData</db:methodname>
<db:methodparam>
<db:type>QMimeData *</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMimeData(QMimeData *src, QClipboard::Mode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the clipboard data to <db:code role="parameter">src</db:code>. Ownership of the data is transferred to the clipboard. If you want to remove the data either call <db:link xlink:href="qclipboard.xml#clear">clear</db:link>() or call setMimeData() again with new data.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, the data is stored in the global clipboard. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, the data is stored in the global mouse selection. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::FindBuffer</db:link>, the data is stored in the search string buffer.</db:para>
<db:para>The <db:link xlink:href="qclipboard.xml#setText">setText</db:link>(), <db:link xlink:href="qclipboard.xml#setImage">setImage</db:link>() and <db:link xlink:href="qclipboard.xml#setPixmap">setPixmap</db:link>() functions are simpler wrappers for setting text, image and pixmap data respectively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#mimeData">mimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixmap">
<db:title>void QClipboard::setPixmap(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPixmap</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPixmap(const QPixmap &amp;pixmap, QClipboard::Mode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies <db:code role="parameter">pixmap</db:code> into the clipboard. Note that this is slower than <db:link xlink:href="qclipboard.xml#setImage">setImage</db:link>() because it needs to convert the <db:link xlink:href="qpixmap.xml">QPixmap</db:link> to a <db:link xlink:href="qimage.xml">QImage</db:link> first.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, the pixmap is stored in the global clipboard. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, the pixmap is stored in the global mouse selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#pixmap">pixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#setImage">setImage</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#setMimeData">setMimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QClipboard::setText(const QString &amp;<db:emphasis>text</db:emphasis>, QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setText(const QString &amp;text, QClipboard::Mode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies <db:code role="parameter">text</db:code> into the clipboard as plain text.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, the text is stored in the global clipboard. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, the text is stored in the global mouse selection. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::FindBuffer</db:link>, the text is stored in the search string buffer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#text">text</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#setMimeData">setMimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsFindBuffer">
<db:title>bool QClipboard::supportsFindBuffer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>supportsFindBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool supportsFindBuffer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the clipboard supports a separate search buffer; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="supportsSelection">
<db:title>bool QClipboard::supportsSelection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>supportsSelection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool supportsSelection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the clipboard supports mouse selection; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="text">
<db:title>QString QClipboard::text(QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>text</db:methodname>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString text(QClipboard::Mode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the clipboard text as plain text, or an empty string if the clipboard does not contain any text.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, the text is retrieved from the global clipboard. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, the text is retrieved from the global mouse selection. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::FindBuffer</db:link>, the text is retrieved from the search string buffer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#mimeData">mimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-1">
<db:title>QString QClipboard::text(QString &amp;<db:emphasis>subtype</db:emphasis>, QClipboard::Mode <db:emphasis>mode</db:emphasis> = Clipboard) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>text</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>subtype</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QClipboard::Mode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Clipboard</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString text(QString &amp;subtype, QClipboard::Mode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the clipboard text in subtype <db:code role="parameter">subtype</db:code>, or an empty string if the clipboard does not contain any text. If <db:code role="parameter">subtype</db:code> is null, any subtype is acceptable, and <db:code role="parameter">subtype</db:code> is set to the chosen subtype.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> argument is used to control which part of the system clipboard is used. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Clipboard</db:link>, the text is retrieved from the global clipboard. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qclipboard.xml#Mode-enum">QClipboard::Selection</db:link>, the text is retrieved from the global mouse selection.</db:para>
<db:para>Common values for <db:code role="parameter">subtype</db:code> are &quot;plain&quot; and &quot;html&quot;.</db:para>
<db:para>Note that calling this function repeatedly, for instance from a key event handler, may be slow. In such cases, you should use the <db:code>dataChanged()</db:code> signal instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qclipboard.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qclipboard.xml#mimeData">mimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
