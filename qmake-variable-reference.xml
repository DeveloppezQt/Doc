<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Variables</db:title>
<db:productname>QMake</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>QMake Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-reference.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Reference"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-function-reference.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Replace Functions"/></db:extendedlink>
<db:abstract>
<db:para>QMake Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{qmake Manual}{Contents}</db:para>
<db:para>The fundamental behavior of qmake is influenced by variable declarations that define the build process of each project. Some of these declare resources, such as headers and source files, that are common to each platform. Others are used to customize the behavior of compilers and linkers on specific platforms.</db:para>
<db:para>Platform-specific variables follow the naming pattern of the variables which they extend or modify, but include the name of the relevant platform in their name. For example, <db:code>QMAKE_LIBS</db:code> can be used to specify a list of libraries that a project needs to link against, and <db:code>QMAKE_LIBS_X11</db:code> can be used to extend or override this list.</db:para>
<db:section xml:id="config">
<db:title>CONFIG</db:title>
<db:para>Specifies project configuration and compiler options. The values are recognized internally by qmake and have special meaning.</db:para>
<db:para>The following <db:code>CONFIG</db:code> values control compilation flags:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>release</db:para>
</db:td>
<db:td>
<db:para>The project is to be built in release mode. If <db:code>debug</db:code> is also specified, the last one takes effect.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>debug</db:para>
</db:td>
<db:td>
<db:para>The project is to be built in debug mode.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>debug_and_release</db:para>
</db:td>
<db:td>
<db:para>The project is prepared to be built in <db:emphasis>both</db:emphasis> debug and release modes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>debug_and_release_target</db:para>
</db:td>
<db:td>
<db:para>This option is set by default. If <db:code>debug_and_release</db:code> is also set, the debug and release builds end up in separate debug and release directories.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>build_all</db:para>
</db:td>
<db:td>
<db:para>If <db:code>debug_and_release</db:code> is specified, the project is built in both debug and release modes by default.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>autogen_precompile_source</db:para>
</db:td>
<db:td>
<db:para>Automatically generates a <db:code>.cpp</db:code> file that includes the precompiled header file specified in the .pro file.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ordered</db:para>
</db:td>
<db:td>
<db:para>When using the <db:code>subdirs</db:code> template, this option specifies that the directories listed should be processed in the order in which they are given.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>precompile_header</db:para>
</db:td>
<db:td>
<db:para>Enables support for the use of <db:link xlink:href="qmake-precompiledheaders.xml">precompiled headers</db:link> in projects.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>warn_on</db:para>
</db:td>
<db:td>
<db:para>The compiler should output as many warnings as possible. If <db:code>warn_off</db:code> is also specified, the last one takes effect.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>warn_off</db:para>
</db:td>
<db:td>
<db:para>The compiler should output as few warnings as possible.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>exceptions</db:para>
</db:td>
<db:td>
<db:para>Exception support is enabled. Set by default.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>exceptions_off</db:para>
</db:td>
<db:td>
<db:para>Exception support is disabled.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>rtti</db:para>
</db:td>
<db:td>
<db:para>RTTI support is enabled. By default, the compiler default is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>rtti_off</db:para>
</db:td>
<db:td>
<db:para>RTTI support is disabled. By default, the compiler default is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>stl</db:para>
</db:td>
<db:td>
<db:para>STL support is enabled. By default, the compiler default is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>stl_off</db:para>
</db:td>
<db:td>
<db:para>STL support is disabled. By default, the compiler default is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>thread</db:para>
</db:td>
<db:td>
<db:para>Thread support is enabled. This is enabled when CONFIG includes <db:code>qt</db:code>, which is the default.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>c++11</db:para>
</db:td>
<db:td>
<db:para>C++11 support is enabled. This option has no effect if the compiler does not support C++11. By default, support is disabled.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>c++14</db:para>
</db:td>
<db:td>
<db:para>C++14 support is enabled. This option has no effect if the compiler does not support C++14. By default, support is disabled.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When you use the <db:code>debug_and_release</db:code> option (which is the default under Windows), the project will be processed three times: one time to produce a &quot;meta&quot; Makefile, and two more times to produce a Makefile.Debug and a Makefile.Release.</db:para>
<db:para>During the latter passes, <db:code>build_pass</db:code> and the respective <db:code>debug</db:code> or <db:code>release</db:code> option is appended to <db:code>CONFIG</db:code>. This makes it possible to perform build-specific tasks. For example:</db:para>
<db:programlisting language="cpp">build_pass:CONFIG(debug, debug|release) {
    unix: TARGET = $$join(TARGET,,,_debug)
    else: TARGET = $$join(TARGET,,,d)
}
</db:programlisting>
<db:para>As an alternative to manually writing build type conditionals, some variables offer build-specific variants, for example <db:link xlink:href="qmake-variable-reference.xml#qmake-lflags-release">QMAKE_LFLAGS_RELEASE</db:link> in addition to the general <db:link xlink:href="qmake-variable-reference.xml#qmake-lflags">QMAKE_LFLAGS</db:link>. These should be used when available.</db:para>
<db:para>The meta Makefile makes the sub-builds invokable via the <db:code>debug</db:code> and <db:code>release</db:code> targets, and a combined build via the <db:code>all</db:code> target. When the <db:code>build_all</db:code> <db:code>CONFIG</db:code> option is used, the combined build is the default. Otherwise, the last specified <db:code>CONFIG</db:code> option from the set (<db:code>debug</db:code>, <db:code>release</db:code>) determines the default. In this case, you can explicitly invoke the <db:code>all</db:code> target to build both configurations at once:</db:para>
<db:programlisting language="cpp">make all
</db:programlisting>
<db:note>
<db:para>The details are slightly different when producing Visual Studio and Xcode projects.</db:para>
</db:note>
<db:para>When linking a library, qmake relies on the underlying platform to know what other libraries this library links against. However, if linking statically, qmake will not get this information unless we use the following <db:code>CONFIG</db:code> options:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>create_prl</db:para>
</db:td>
<db:td>
<db:para>This option enables qmake to track these dependencies. When this option is enabled, qmake will create a file with the extension <db:code>.prl</db:code> which will save meta-information about the library (see <db:link xlink:href="qmake-advanced-usage.xml#library-dependencies">Library Dependencies</db:link> for more info).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>link_prl</db:para>
</db:td>
<db:td>
<db:para>When this option is enabled, qmake will process all libraries linked to by the application and find their meta-information (see <db:link xlink:href="qmake-advanced-usage.xml#library-dependencies">Library Dependencies</db:link> for more info).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>The <db:code>create_prl</db:code> option is required when <db:emphasis>building</db:emphasis> a static library, while <db:code>link_prl</db:code> is required when <db:emphasis>using</db:emphasis> a static library.</db:para>
</db:note>
<db:para>The following options define the application or library type:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qt</db:para>
</db:td>
<db:td>
<db:para>The target is a Qt application or library and requires the Qt library and header files. The proper include and library paths for the Qt library will automatically be added to the project. This is defined by default, and can be fine-tuned with the <db:code>\l{#qt}{QT}</db:code> variable.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>x11</db:para>
</db:td>
<db:td>
<db:para>The target is a X11 application or library. The proper include paths and libraries will automatically be added to the project.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>testcase</db:para>
</db:td>
<db:td>
<db:para>The target is an automated test. <db:link xlink:href="qmake-common-projects.xml#building-a-testcase">A check target</db:link> will be added to the generated Makefile to run the test. Only relevant when generating Makefiles.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>insignificant_test</db:para>
</db:td>
<db:td>
<db:para>The exit code of the automated test will be ignored. Only relevant if <db:code>testcase</db:code> is also set.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>windows</db:para>
</db:td>
<db:td>
<db:para>The target is a Win32 window application (app only). The proper include paths, compiler flags and libraries will automatically be added to the project.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>console</db:para>
</db:td>
<db:td>
<db:para>The target is a Win32 console application (app only). The proper include paths, compiler flags and libraries will automatically be added to the project.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>shared</db:para>
</db:td>
<db:td rowspan="2">
<db:para>The target is a shared object/DLL. The proper include paths, compiler flags and libraries will automatically be added to the project. Note that <db:code>dll</db:code> can also be used on all platforms; a shared library file with the appropriate suffix for the target platform (.dll or .so) will be created.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dll</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>static</db:para>
</db:td>
<db:td rowspan="2">
<db:para>The target is a static library (lib only). The proper compiler flags will automatically be added to the project.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>staticlib</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>plugin</db:para>
</db:td>
<db:td>
<db:para>The target is a plugin (lib only). This enables dll as well.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>designer</db:para>
</db:td>
<db:td>
<db:para>The target is a plugin for <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>no_lflags_merge</db:para>
</db:td>
<db:td>
<db:para>Ensures that the list of libraries stored in the <db:code>LIBS</db:code> variable is not reduced to a list of unique values before it is used.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>These options define specific features on Windows only:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>flat</db:para>
</db:td>
<db:td>
<db:para>When using the vcapp template this will put all the source files into the source group and the header files into the header group regardless of what directory they reside in. Turning this option off will group the files within the source/header group depending on the directory they reside. This is turned on by default.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>embed_manifest_dll</db:para>
</db:td>
<db:td>
<db:para>Embeds a manifest file in the DLL created as part of a library project.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>embed_manifest_exe</db:para>
</db:td>
<db:td>
<db:para>Embeds a manifest file in the EXE created as part of an application project.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>See <db:link xlink:href="qmake-platform-notes.xml#visual-studio-manifest-files">Platform Notes</db:link> for more information about the options for embedding manifest files.</db:para>
<db:para>The following options take an effect only on OS X:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>app_bundle</db:para>
</db:td>
<db:td>
<db:para>Puts the executable into a bundle (this is the default).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>lib_bundle</db:para>
</db:td>
<db:td>
<db:para>Puts the library into a library bundle.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The build process for bundles is also influenced by the contents of the <db:link xlink:href="qmake-variable-reference.xml#qmake-bundle-data">QMAKE_BUNDLE_DATA</db:link> variable.</db:para>
<db:para>The following options take an effect only on Linux/Unix platforms:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>largefile</db:para>
</db:td>
<db:td>
<db:para>Includes support for large files.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>separate_debug_info</db:para>
</db:td>
<db:td>
<db:para>Puts debugging information for libraries in separate files.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>CONFIG</db:code> variable will also be checked when resolving scopes. You may assign anything to this variable.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">CONFIG += console newstuff
...
newstuff {
    SOURCES += new.cpp
    HEADERS += new.h
}
</db:programlisting>
</db:section>
<db:section xml:id="defines">
<db:title>DEFINES</db:title>
<db:para>qmake adds the values of this variable as compiler C preprocessor macros (-D option).</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">DEFINES += USE_MY_STUFF
</db:programlisting>
</db:section>
<db:section xml:id="def-file">
<db:title>DEF_FILE</db:title>
<db:note>
<db:para>This variable is used only on Windows when using the <db:code>app</db:code> template.</db:para>
</db:note>
<db:para>Specifies a <db:code>.def</db:code> file to be included in the project.</db:para>
</db:section>
<db:section xml:id="dependpath">
<db:title>DEPENDPATH</db:title>
<db:para>Specifies a list of all directories to look in to resolve dependencies. This variable is used when crawling through <db:code>included</db:code> files.</db:para>
</db:section>
<db:section xml:id="deployment">
<db:title>DEPLOYMENT</db:title>
<db:note>
<db:para>This variable is used only on the Windows CE platform.</db:para>
</db:note>
<db:para>Specifies which additional files will be deployed. Deployment means the transfer of files from the development system to the target device or emulator.</db:para>
<db:para>Files can be deployed by either creating a Visual Studio project or using the <db:link xlink:href="qtest-overview.xml#using-qt-test-remotely-on-windows-ce">cetest</db:link> executable.</db:para>
<db:para>For example, the following definition uploads all PNG images in <db:code>path</db:code> to the directory where the build target is deployed:</db:para>
<db:programlisting language="cpp">myFiles.files = path\*.png
DEPLOYMENT += myFiles
</db:programlisting>
<db:para>The default deployment target path for Windows CE is <db:code>%CSIDL_PROGRAM_FILES%\target</db:code>, which usually gets expanded to <db:code>\Program Files\target</db:code>.</db:para>
<db:para>It is also possible to specify multiple <db:code>sources</db:code> to be deployed on target <db:code>paths</db:code>. In addition, different variables can be used for deployment to different directories.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">myFiles.files = path\file1.ext1 path2\file2.ext1 path3\*
myFiles.path = \some\path\on\device
someother.files = C:\additional\files\*
someother.path = \myFiles\path2
DEPLOYMENT += myFiles someother
</db:programlisting>
<db:note>
<db:para>In Windows CE all linked Qt libraries will be deployed to the path specified by <db:code>myFiles.path</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="deployment-plugin">
<db:title>DEPLOYMENT_PLUGIN</db:title>
<db:note>
<db:para>This variable is used only on the Windows CE platform.</db:para>
</db:note>
<db:para>Specifies the Qt plugins that will be deployed. All plugins available in Qt can be explicitly deployed to the device. See <db:link xlink:href="">Static Plugins</db:link> for a complete list.</db:para>
<db:note>
<db:para>No plugins will be deployed automatically to Windows CE devices. If the application depends on plugins, these plugins have to be specified manually.</db:para>
</db:note>
<db:para>For example, the following definition uploads the jpeg imageformat plugin to the plugins directory on the Windows CE device:</db:para>
<db:programlisting language="cpp">DEPLOYMENT_PLUGIN += qjpeg
</db:programlisting>
</db:section>
<db:section xml:id="destdir">
<db:title>DESTDIR</db:title>
<db:para>Specifies where to put the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> file.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">DESTDIR = ../../lib
</db:programlisting>
</db:section>
<db:section xml:id="distfiles">
<db:title>DISTFILES</db:title>
<db:para>Specifies a list of files to be included in the dist target. This feature is supported by UnixMake specs only.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">DISTFILES += ../program.txt
</db:programlisting>
</db:section>
<db:section xml:id="dlldestdir">
<db:title>DLLDESTDIR</db:title>
<db:note>
<db:para>This variable applies only to Windows targets.</db:para>
</db:note>
<db:para>Specifies where to copy the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> dll.</db:para>
</db:section>
<db:section xml:id="forms">
<db:title>FORMS</db:title>
<db:para>Specifies the UI files (see <db:link xlink:href="">Qt Designer Manual</db:link>) to be processed by <db:code>uic</db:code> before compiling. All dependencies, headers and source files required to build these UI files will automatically be added to the project.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">FORMS = mydialog.ui \
    mywidget.ui \
        myconfig.ui
</db:programlisting>
</db:section>
<db:section xml:id="guid">
<db:title>GUID</db:title>
<db:para>Specifies the GUID that is set inside a <db:code>.vcproj</db:code> file. The GUID is usually randomly determined. However, should you require a fixed GUID, it can be set using this variable.</db:para>
<db:para>This variable is specific to <db:code>.vcproj</db:code> files only; it is ignored otherwise.</db:para>
</db:section>
<db:section xml:id="headers">
<db:title>HEADERS</db:title>
<db:para>Defines the header files for the project.</db:para>
<db:para>qmake automatically detects whether moc is required by the classes in the headers, and adds the appropriate dependencies and files to the project for generating and linking the moc files.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">HEADERS = myclass.h \
          login.h \
          mainwindow.h
</db:programlisting>
<db:para>See also <db:link xlink:href="qmake-variable-reference.xml#sources">SOURCES</db:link>.</db:para>
</db:section>
<db:section xml:id="icon">
<db:title>ICON</db:title>
<db:para>This variable is used only on Mac OS to set the application icon. Please see <db:link xlink:href="">the application icon documentation</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="idlsources">
<db:title>IDLSOURCES</db:title>
<db:para>This variable is used only on Windows for the Visual Studio project generation to put the specified files in the Generated Files folder.</db:para>
</db:section>
<db:section xml:id="includepath">
<db:title>INCLUDEPATH</db:title>
<db:para>Specifies the #include directories which should be searched when compiling the project.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">INCLUDEPATH = c:/msdev/include d:/stl/include
</db:programlisting>
<db:para>To specify a path containing spaces, quote the path using the technique described in <db:link xlink:href="qmake-project-files.xml#whitespace">Whitespace</db:link>.</db:para>
<db:programlisting language="cpp">win32:INCLUDEPATH += &quot;C:/mylibs/extra headers&quot;
unix:INCLUDEPATH += &quot;/home/user/extra headers&quot;
</db:programlisting>
</db:section>
<db:section xml:id="installs">
<db:title>INSTALLS</db:title>
<db:para>Specifies a list of resources that will be installed when <db:code>make install</db:code> or a similar installation procedure is executed. Each item in the list is typically defined with attributes that provide information about where it will be installed.</db:para>
<db:para>For example, the following <db:code>target.path</db:code> definition describes where the build target will be installed, and the <db:code>INSTALLS</db:code> assignment adds the build target to the list of existing resources to be installed:</db:para>
<db:programlisting language="cpp">target.path += $$[QT_INSTALL_PLUGINS]/imageformats
INSTALLS += target
</db:programlisting>
<db:para>For more information, see <db:link xlink:href="qmake-advanced-usage.xml#installing-files">Installing Files</db:link>.</db:para>
</db:section>
<db:section xml:id="leximpls">
<db:title>LEXIMPLS</db:title>
<db:para>Specifies a list of Lex implementation files. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="lexobjects">
<db:title>LEXOBJECTS</db:title>
<db:para>Specifies the names of intermediate Lex object files.The value of this variable is typically handled by qmake and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="lexsources">
<db:title>LEXSOURCES</db:title>
<db:para>Specifies a list of Lex source files. All dependencies, headers and source files will automatically be added to the project for building these lex files.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">LEXSOURCES = lexer.l
</db:programlisting>
</db:section>
<db:section xml:id="libs">
<db:title>LIBS</db:title>
<db:para>Specifies a list of libraries to be linked into the project. If you use the Unix <db:code>-l</db:code> (library) and -L (library path) flags, qmake handles the libraries correctly on Windows (that is, passes the full path of the library to the linker). The library must exist for qmake to find the directory where a <db:code>-l</db:code> lib is located.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">unix:LIBS += -L/usr/local/lib -lmath
win32:LIBS += c:/mylibs/math.lib
</db:programlisting>
<db:para>To specify a path containing spaces, quote the path using the technique described in <db:link xlink:href="qmake-project-files.xml#whitespace">Whitespace</db:link>.</db:para>
<db:programlisting language="cpp">win32:LIBS += &quot;C:/mylibs/extra libs/extra.lib&quot;
unix:LIBS += &quot;-L/home/user/extra libs&quot; -lextra
</db:programlisting>
<db:para>By default, the list of libraries stored in <db:code>LIBS</db:code> is reduced to a list of unique names before it is used. To change this behavior, add the <db:code>no_lflags_merge</db:code> option to the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable:</db:para>
<db:programlisting language="cpp">CONFIG += no_lflags_merge
</db:programlisting>
</db:section>
<db:section xml:id="literal-hash">
<db:title>LITERAL_HASH</db:title>
<db:para>This variable is used whenever a literal hash character (<db:code>#</db:code>) is needed in a variable declaration, perhaps as part of a file name or in a string passed to some external application.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp"># To include a literal hash character, use the $$LITERAL_HASH variable:
urlPieces = http://doc.qt.io/qt-5/qtextdocument.html pageCount
message($$join(urlPieces, $$LITERAL_HASH))
</db:programlisting>
<db:para>By using <db:code>LITERAL_HASH</db:code> in this way, the <db:code>#</db:code> character can be used to construct a URL for the <db:code>message()</db:code> function to print to the console.</db:para>
</db:section>
<db:section xml:id="makefile">
<db:title>MAKEFILE</db:title>
<db:para>Specifies the name of the generated Makefile. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="makefile-generator">
<db:title>MAKEFILE_GENERATOR</db:title>
<db:para>Specifies the name of the Makefile generator to use when generating a Makefile. The value of this variable is typically handled internally by qmake and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="msvcproj">
<db:title>MSVCPROJ_*</db:title>
<db:para>These variables are handled internally by qmake and should not be modified or utilized.</db:para>
</db:section>
<db:section xml:id="moc-dir">
<db:title>MOC_DIR</db:title>
<db:para>Specifies the directory where all intermediate moc files should be placed.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">unix:MOC_DIR = ../myproject/tmp
win32:MOC_DIR = c:/myproject/tmp
</db:programlisting>
</db:section>
<db:section xml:id="objects">
<db:title>OBJECTS</db:title>
<db:para>This variable is automatically populated from the <db:link xlink:href="qmake-variable-reference.xml#sources">SOURCES</db:link> variable. The extension of each source file is replaced by .o (Unix) or .obj (Win32). You can add objects to the list.</db:para>
</db:section>
<db:section xml:id="objects-dir">
<db:title>OBJECTS_DIR</db:title>
<db:para>Specifies the directory where all intermediate objects should be placed.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">unix:OBJECTS_DIR = ../myproject/tmp
win32:OBJECTS_DIR = c:/myproject/tmp
</db:programlisting>
</db:section>
<db:section xml:id="post-targetdeps">
<db:title>POST_TARGETDEPS</db:title>
<db:para>Lists the libraries that the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> depends on. Some backends, such as the generators for Visual Studio and Xcode project files, do not support this variable. Generally, this variable is supported internally by these build tools, and it is useful for explicitly listing dependent static libraries.</db:para>
<db:para>This list is placed after all builtin (and <db:link xlink:href="qmake-variable-reference.xml#pre-targetdeps">$$PRE_TARGETDEPS</db:link>) dependencies.</db:para>
</db:section>
<db:section xml:id="pre-targetdeps">
<db:title>PRE_TARGETDEPS</db:title>
<db:para>Lists libraries that the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> depends on. Some backends, such as the generators for Visual Studio and Xcode project files, do not support this variable. Generally, this variable is supported internally by these build tools, and it is useful for explicitly listing dependent static libraries.</db:para>
<db:para>This list is placed before all builtin dependencies.</db:para>
</db:section>
<db:section xml:id="precompiled-header">
<db:title>PRECOMPILED_HEADER</db:title>
<db:para>Indicates the header file for creating a precompiled header file, to increase the compilation speed of a project. Precompiled headers are currently only supported on some platforms (Windows - all MSVC project types, Apple - Xcode, Makefile, Unix - gcc 3.3 and up).</db:para>
</db:section>
<db:section xml:id="pwd">
<db:title>PWD</db:title>
<db:para>Specifies the full path leading to the directory containing the current file being parsed. This can be useful to refer to files within the source tree when writing project files to support shadow builds.</db:para>
<db:para>See also <db:link xlink:href="qmake-variable-reference.xml#pro-file-pwd">_PRO_FILE_PWD_</db:link>.</db:para>
<db:note>
<db:para>Do not attempt to overwrite the value of this variable.</db:para>
</db:note>
</db:section>
<db:section xml:id="out-pwd">
<db:title>OUT_PWD</db:title>
<db:para>Specifies the full path leading to the directory where qmake places the generated Makefile.</db:para>
<db:note>
<db:para>Do not attempt to overwrite the value of this variable.</db:para>
</db:note>
<db:anchor xml:id="qmake-systemvariable"/>
</db:section>
<db:section xml:id="qmake">
<db:title>QMAKE</db:title>
<db:para>Specifies the name of the qmake program itself and is placed in generated Makefiles. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
<db:anchor xml:id="qmakespec-systemvariable"/>
</db:section>
<db:section xml:id="qmakespec">
<db:title>QMAKESPEC</db:title>
<db:para>A system variable that contains the full path of the qmake configuration that is used when generating Makefiles. The value of this variable is automatically computed.</db:para>
<db:note>
<db:para>Do not attempt to overwrite the value of this variable.</db:para>
</db:note>
</db:section>
<db:section xml:id="qmake-ar-cmd">
<db:title>QMAKE_AR_CMD</db:title>
<db:note>
<db:para>This variable is used on Unix platforms only.</db:para>
</db:note>
<db:para>Specifies the command to execute when creating a shared library. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-bundle-data">
<db:title>QMAKE_BUNDLE_DATA</db:title>
<db:note>
<db:para>This variable is used on OS X and iOS only.</db:para>
</db:note>
<db:para>Specifies the data that will be installed with a library bundle, and is often used to specify a collection of header files.</db:para>
<db:para>For example, the following lines add <db:code>path/to/header_one.h</db:code> and <db:code>path/to/header_two.h</db:code> to a group containing information about the headers supplied with the framework:</db:para>
<db:programlisting language="cpp">FRAMEWORK_HEADERS.version = Versions
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h
FRAMEWORK_HEADERS.path = Headers
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS
</db:programlisting>
<db:para>The last line adds the information about the headers to the collection of resources that will be installed with the library bundle.</db:para>
<db:para>Library bundles are created when the <db:code>lib_bundle</db:code> option is added to the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable.</db:para>
<db:para>See <db:link xlink:href="qmake-platform-notes.xml#creating-frameworks">Platform Notes</db:link> for more information about creating library bundles.</db:para>
</db:section>
<db:section xml:id="qmake-bundle-extension">
<db:title>QMAKE_BUNDLE_EXTENSION</db:title>
<db:note>
<db:para>This variable is used on OS X and iOS only.</db:para>
</db:note>
<db:para>Specifies the extension to be used for library bundles. This allows frameworks to be created with custom extensions instead of the standard <db:code>.framework</db:code> directory name extension.</db:para>
<db:para>For example, the following definition will result in a framework with the <db:code>.myframework</db:code> extension:</db:para>
<db:programlisting language="cpp">QMAKE_BUNDLE_EXTENSION = .myframework
</db:programlisting>
</db:section>
<db:section xml:id="qmake-cc">
<db:title>QMAKE_CC</db:title>
<db:para>Specifies the C compiler that will be used when building projects containing C source code. Only the file name of the compiler executable needs to be specified as long as it is on a path contained in the <db:code>PATH</db:code> variable when the Makefile is processed.</db:para>
</db:section>
<db:section xml:id="qmake-cflags">
<db:title>QMAKE_CFLAGS</db:title>
<db:para>Specifies the C compiler flags for building a project. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified. The flags specific to debug and release modes can be adjusted by modifying the <db:code>QMAKE_CFLAGS_DEBUG</db:code> and <db:code>QMAKE_CFLAGS_RELEASE</db:code> variables, respectively.</db:para>
</db:section>
<db:section xml:id="qmake-cflags-debug">
<db:title>QMAKE_CFLAGS_DEBUG</db:title>
<db:para>Specifies the C compiler flags for debug builds. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cflags-release">
<db:title>QMAKE_CFLAGS_RELEASE</db:title>
<db:para>Specifies the C compiler flags for release builds. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cflags-shlib">
<db:title>QMAKE_CFLAGS_SHLIB</db:title>
<db:note>
<db:para>This variable is used on Unix platforms only.</db:para>
</db:note>
<db:para>Specifies the compiler flags for creating a shared library. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cflags-thread">
<db:title>QMAKE_CFLAGS_THREAD</db:title>
<db:para>Specifies the compiler flags for creating a multi-threaded application. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cflags-warn-off">
<db:title>QMAKE_CFLAGS_WARN_OFF</db:title>
<db:para>This variable is used only when the <db:code>warn_off</db:code> <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> option is set. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cflags-warn-on">
<db:title>QMAKE_CFLAGS_WARN_ON</db:title>
<db:para>This variable is used only when the <db:code>warn_on</db:code> <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> option is set. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-clean">
<db:title>QMAKE_CLEAN</db:title>
<db:para>Specifies a list of generated files (by moc and uic, for example) and object files to be removed by <db:code>make clean</db:code>.</db:para>
</db:section>
<db:section xml:id="qmake-cxx">
<db:title>QMAKE_CXX</db:title>
<db:para>Specifies the C++ compiler that will be used when building projects containing C++ source code. Only the file name of the compiler executable needs to be specified as long as it is on a path contained in the <db:code>PATH</db:code> variable when the Makefile is processed.</db:para>
</db:section>
<db:section xml:id="qmake-cxxflags">
<db:title>QMAKE_CXXFLAGS</db:title>
<db:para>Specifies the C++ compiler flags for building a project. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified. The flags specific to debug and release modes can be adjusted by modifying the <db:code>QMAKE_CXXFLAGS_DEBUG</db:code> and <db:code>QMAKE_CXXFLAGS_RELEASE</db:code> variables, respectively.</db:para>
</db:section>
<db:section xml:id="qmake-cxxflags-debug">
<db:title>QMAKE_CXXFLAGS_DEBUG</db:title>
<db:para>Specifies the C++ compiler flags for debug builds. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cxxflags-release">
<db:title>QMAKE_CXXFLAGS_RELEASE</db:title>
<db:para>Specifies the C++ compiler flags for release builds. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cxxflags-shlib">
<db:title>QMAKE_CXXFLAGS_SHLIB</db:title>
<db:para>Specifies the C++ compiler flags for creating a shared library. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cxxflags-thread">
<db:title>QMAKE_CXXFLAGS_THREAD</db:title>
<db:para>Specifies the C++ compiler flags for creating a multi-threaded application. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cxxflags-warn-off">
<db:title>QMAKE_CXXFLAGS_WARN_OFF</db:title>
<db:para>Specifies the C++ compiler flags for suppressing compiler warnings. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-cxxflags-warn-on">
<db:title>QMAKE_CXXFLAGS_WARN_ON</db:title>
<db:para>Specifies C++ compiler flags for generating compiler warnings. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-distclean">
<db:title>QMAKE_DISTCLEAN</db:title>
<db:para>Specifies a list of files to be removed by <db:code>make distclean</db:code>.</db:para>
</db:section>
<db:section xml:id="qmake-extension-shlib">
<db:title>QMAKE_EXTENSION_SHLIB</db:title>
<db:para>Contains the extension for shared libraries. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
<db:note>
<db:para>Platform-specific variables that change the extension override the contents of this variable.</db:para>
</db:note>
</db:section>
<db:section xml:id="qmake-ext-moc">
<db:title>QMAKE_EXT_MOC</db:title>
<db:para>Contains the extension used on included moc files.</db:para>
<db:para>See also <db:link xlink:href="qmake-environment-reference.xml#file-extensions">File Extensions</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-ext-ui">
<db:title>QMAKE_EXT_UI</db:title>
<db:para>Contains the extension used on <db:emphasis>Qt Designer</db:emphasis> UI files.</db:para>
<db:para>See also <db:link xlink:href="qmake-environment-reference.xml#file-extensions">File Extensions</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-ext-prl">
<db:title>QMAKE_EXT_PRL</db:title>
<db:para>Contains the extension used on created PRL files.</db:para>
<db:para>See also <db:link xlink:href="qmake-environment-reference.xml#file-extensions">File Extensions</db:link>, <db:link xlink:href="qmake-advanced-usage.xml#library-dependencies">Library Dependencies</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-ext-lex">
<db:title>QMAKE_EXT_LEX</db:title>
<db:para>Contains the extension used on files given to Lex.</db:para>
<db:para>See also <db:link xlink:href="qmake-environment-reference.xml#file-extensions">File Extensions</db:link>, <db:link xlink:href="qmake-variable-reference.xml#lexsources">LEXSOURCES</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-ext-yacc">
<db:title>QMAKE_EXT_YACC</db:title>
<db:para>Contains the extension used on files given to Yacc.</db:para>
<db:para>See also <db:link xlink:href="qmake-environment-reference.xml#file-extensions">File Extensions</db:link>, <db:link xlink:href="qmake-variable-reference.xml#yaccsources">YACCSOURCES</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-ext-obj">
<db:title>QMAKE_EXT_OBJ</db:title>
<db:para>Contains the extension used on generated object files.</db:para>
<db:para>See also <db:link xlink:href="qmake-environment-reference.xml#file-extensions">File Extensions</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-ext-cpp">
<db:title>QMAKE_EXT_CPP</db:title>
<db:para>Contains suffixes for files that should be interpreted as C++ source code.</db:para>
<db:para>See also <db:link xlink:href="qmake-environment-reference.xml#file-extensions">File Extensions</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-ext-h">
<db:title>QMAKE_EXT_H</db:title>
<db:para>Contains suffixes for files which should be interpreted as C header files.</db:para>
<db:para>See also <db:link xlink:href="qmake-environment-reference.xml#file-extensions">File Extensions</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-extra-compilers">
<db:title>QMAKE_EXTRA_COMPILERS</db:title>
<db:para>Specifies a list of additional compilers or preprocessors.</db:para>
<db:para>See also <db:link xlink:href="qmake-advanced-usage.xml#adding-compilers">Adding Compilers</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-extra-targets">
<db:title>QMAKE_EXTRA_TARGETS</db:title>
<db:para>Specifies a list of additional qmake targets.</db:para>
<db:para>See also <db:link xlink:href="qmake-advanced-usage.xml#adding-custom-targets">Adding Custom Targets</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-failed-requirements">
<db:title>QMAKE_FAILED_REQUIREMENTS</db:title>
<db:para>Contains the list of failed requirements. The value of this variable is set by qmake and cannot be modified.</db:para>
<db:para>See also <db:link xlink:href="qmake-test-function-reference.xml#requires-condition">requires()</db:link> and <db:link xlink:href="qmake-variable-reference.xml#requires">REQUIRES</db:link>.</db:para>
</db:section>
<db:section xml:id="qmake-framework-bundle-name">
<db:title>QMAKE_FRAMEWORK_BUNDLE_NAME</db:title>
<db:note>
<db:para>This variable is used on OS X and iOS only.</db:para>
</db:note>
<db:para>In a framework project, this variable contains the name to be used for the framework that is built.</db:para>
<db:para>By default, this variable contains the same value as the <db:link xlink:href="qmake-variable-reference.xml#target">TARGET</db:link> variable.</db:para>
<db:para>See <db:link xlink:href="qmake-platform-notes.xml#creating-frameworks">Creating Frameworks</db:link> for more information about creating frameworks and library bundles.</db:para>
</db:section>
<db:section xml:id="qmake-framework-version">
<db:title>QMAKE_FRAMEWORK_VERSION</db:title>
<db:note>
<db:para>This variable is used on OS X and iOS only.</db:para>
</db:note>
<db:para>For projects where the build target is an OS X or iOS framework, this variable is used to specify the version number that will be applied to the framework that is built.</db:para>
<db:para>By default, this variable contains the same value as the <db:link xlink:href="qmake-variable-reference.xml#version">VERSION</db:link> variable.</db:para>
<db:para>See <db:link xlink:href="qmake-platform-notes.xml#creating-frameworks">Creating Frameworks</db:link> for more information about creating frameworks.</db:para>
</db:section>
<db:section xml:id="qmake-incdir">
<db:title>QMAKE_INCDIR</db:title>
<db:para>Specifies the list of system header paths that are appended to <db:link xlink:href="qmake-variable-reference.xml#includepath">INCLUDEPATH</db:link>. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-incdir-egl">
<db:title>QMAKE_INCDIR_EGL</db:title>
<db:para>Specifies the location of EGL header files to be added to <db:link xlink:href="qmake-variable-reference.xml#includepath">INCLUDEPATH</db:link> when building a target with OpenGL/ES or OpenVG support. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-incdir-opengl">
<db:title>QMAKE_INCDIR_OPENGL</db:title>
<db:para>Specifies the location of OpenGL header files to be added to <db:link xlink:href="qmake-variable-reference.xml#includepath">INCLUDEPATH</db:link> when building a target with OpenGL support. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
<db:para>If the OpenGL implementation uses EGL (most OpenGL/ES systems), then QMAKE_INCDIR_EGL may also need to be set.</db:para>
</db:section>
<db:section xml:id="qmake-incdir-opengl-es2">
<db:title>QMAKE_INCDIR_OPENGL_ES2</db:title>
<db:para>This variable specifies the location of OpenGL header files to be added to <db:link xlink:href="qmake-variable-reference.xml#includepath">INCLUDEPATH</db:link> when building a target with OpenGL ES 2 support.</db:para>
<db:para>The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
<db:para>If the OpenGL implementation uses EGL (most OpenGL/ES systems), then QMAKE_INCDIR_EGL may also need to be set.</db:para>
</db:section>
<db:section xml:id="qmake-incdir-openvg">
<db:title>QMAKE_INCDIR_OPENVG</db:title>
<db:para>Specifies the location of OpenVG header files to be added to <db:link xlink:href="qmake-variable-reference.xml#includepath">INCLUDEPATH</db:link> when building a target with OpenVG support. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
<db:para>If the OpenVG implementation uses EGL then QMAKE_INCDIR_EGL may also need to be set.</db:para>
</db:section>
<db:section xml:id="qmake-incdir-x11">
<db:title>QMAKE_INCDIR_X11</db:title>
<db:note>
<db:para>This variable is used on Unix platforms only.</db:para>
</db:note>
<db:para>Specifies the location of X11 header file paths to be added to <db:link xlink:href="qmake-variable-reference.xml#includepath">INCLUDEPATH</db:link> when building a X11 target. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-info-plist">
<db:title>QMAKE_INFO_PLIST</db:title>
<db:note>
<db:para>This variable is used on OS X and iOS platforms only.</db:para>
</db:note>
<db:para>Specifies the name of the property list file, <db:code>.plist</db:code>, you would like to include in your OS X and iOS application bundle.</db:para>
<db:para>In the <db:code>.plist</db:code> file, you can define some variables, e.g., @EXECUTABLE@, which qmake will replace with the actual executable name. Other variables include @ICON@, @TYPEINFO@, @LIBRARY@, and @SHORT_VERSION@.</db:para>
<db:note>
<db:para>Most of the time, the default <db:code>Info.plist</db:code> is good enough.</db:para>
</db:note>
</db:section>
<db:section xml:id="qmake-lflags">
<db:title>QMAKE_LFLAGS</db:title>
<db:para>Specifies a general set of flags that are passed to the linker. If you need to change the flags used for a particular platform or type of project, use one of the specialized variables for that purpose instead of this variable.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-console">
<db:title>QMAKE_LFLAGS_CONSOLE</db:title>
<db:note>
<db:para>This variable is used on Windows only.</db:para>
</db:note>
<db:para>Specifies the linker flags for building console programs. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-debug">
<db:title>QMAKE_LFLAGS_DEBUG</db:title>
<db:para>Specifies the linker flags for debug builds. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-plugin">
<db:title>QMAKE_LFLAGS_PLUGIN</db:title>
<db:para>Specifies the linker flags for building plugins. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-rpath">
<db:title>QMAKE_LFLAGS_RPATH</db:title>
<db:note>
<db:para>This variable is used on Unix platforms only.</db:para>
</db:note>
<db:para>Specifies the linker flags needed to use the values from <db:link xlink:href="qmake-variable-reference.xml#qmake-rpathdir">QMAKE_RPATHDIR</db:link>.</db:para>
<db:para>The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-rpathlink">
<db:title>QMAKE_LFLAGS_RPATHLINK</db:title>
<db:para>Specifies the linker flags needed to use the values from <db:link xlink:href="qmake-variable-reference.xml#qmake-rpathlinkdir">QMAKE_RPATHLINKDIR</db:link>.</db:para>
<db:para>The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-release">
<db:title>QMAKE_LFLAGS_RELEASE</db:title>
<db:para>Specifies the linker flags for release builds. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-app">
<db:title>QMAKE_LFLAGS_APP</db:title>
<db:para>Specifies the linker flags for building applications. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-shlib">
<db:title>QMAKE_LFLAGS_SHLIB</db:title>
<db:para>Specifies the linker flags used for building shared libraries. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-soname">
<db:title>QMAKE_LFLAGS_SONAME</db:title>
<db:para>Specifies the linker flags for setting the name of shared objects, such as .so or .dll. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-thread">
<db:title>QMAKE_LFLAGS_THREAD</db:title>
<db:para>Specifies the linker flags for building multi-threaded projects. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lflags-windows">
<db:title>QMAKE_LFLAGS_WINDOWS</db:title>
<db:note>
<db:para>This variable is used on Windows only.</db:para>
</db:note>
<db:para>Specifies the linker flags for building Windows GUI projects (that is, non-console applications). The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-libdir">
<db:title>QMAKE_LIBDIR</db:title>
<db:para>Specifies a list of system library paths. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-libdir-flags">
<db:title>QMAKE_LIBDIR_FLAGS</db:title>
<db:note>
<db:para>This variable is used on Unix platforms only.</db:para>
</db:note>
<db:para>Specifies the location of all library directories with -L prefixed. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-libdir-egl">
<db:title>QMAKE_LIBDIR_EGL</db:title>
<db:para>Specifies the location of the EGL library directory, when EGL is used with OpenGL/ES or OpenVG. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-libdir-opengl">
<db:title>QMAKE_LIBDIR_OPENGL</db:title>
<db:para>Specifies the location of the OpenGL library directory. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
<db:para>If the OpenGL implementation uses EGL (most OpenGL/ES systems), then QMAKE_LIBDIR_EGL may also need to be set.</db:para>
</db:section>
<db:section xml:id="qmake-libdir-openvg">
<db:title>QMAKE_LIBDIR_OPENVG</db:title>
<db:para>Specifies the location of the OpenVG library directory. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
<db:para>If the OpenVG implementation uses EGL, then QMAKE_LIBDIR_EGL may also need to be set.</db:para>
</db:section>
<db:section xml:id="qmake-libdir-x11">
<db:title>QMAKE_LIBDIR_X11</db:title>
<db:note>
<db:para>This variable is used on Unix platforms only.</db:para>
</db:note>
<db:para>Specifies the location of the X11 library directory. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-libs">
<db:title>QMAKE_LIBS</db:title>
<db:para>Specifies all project libraries. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-libs-egl">
<db:title>QMAKE_LIBS_EGL</db:title>
<db:para>Specifies all EGL libraries when building Qt with OpenGL/ES or OpenVG. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified. The usual value is <db:code>-lEGL</db:code>.</db:para>
</db:section>
<db:section xml:id="qmake-libs-opengl">
<db:title>QMAKE_LIBS_OPENGL</db:title>
<db:para>Specifies all OpenGL libraries. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
<db:para>If the OpenGL implementation uses EGL (most OpenGL/ES systems), then QMAKE_LIBS_EGL may also need to be set.</db:para>
</db:section>
<db:section xml:id="qmake-libs-opengl-es1-qmake-libs-opengl-es2">
<db:title>QMAKE_LIBS_OPENGL_ES1, QMAKE_LIBS_OPENGL_ES2</db:title>
<db:para>These variables specify all the OpenGL libraries for OpenGL ES 1 and OpenGL ES 2.</db:para>
<db:para>The value of these variables is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
<db:para>If the OpenGL implementation uses EGL (most OpenGL/ES systems), then QMAKE_LIBS_EGL may also need to be set.</db:para>
</db:section>
<db:section xml:id="qmake-libs-openvg">
<db:title>QMAKE_LIBS_OPENVG</db:title>
<db:para>Specifies all OpenVG libraries. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified. The usual value is <db:code>-lOpenVG</db:code>.</db:para>
<db:para>Some OpenVG engines are implemented on top of OpenGL. This will be detected at configure time and QMAKE_LIBS_OPENGL will be implicitly added to QMAKE_LIBS_OPENVG wherever the OpenVG libraries are linked.</db:para>
<db:para>If the OpenVG implementation uses EGL, then QMAKE_LIBS_EGL may also need to be set.</db:para>
</db:section>
<db:section xml:id="qmake-libs-thread">
<db:title>QMAKE_LIBS_THREAD</db:title>
<db:note>
<db:para>This variable is used on Unix platforms only.</db:para>
</db:note>
<db:para>Specifies all libraries that need to be linked against when building a multi-threaded target. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-libs-x11">
<db:title>QMAKE_LIBS_X11</db:title>
<db:note>
<db:para>This variable is used on Unix platforms only.</db:para>
</db:note>
<db:para>Specifies all X11 libraries. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-lib-flag">
<db:title>QMAKE_LIB_FLAG</db:title>
<db:para>This variable is not empty if the <db:code>lib</db:code> template is specified. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-link-shlib-cmd">
<db:title>QMAKE_LINK_SHLIB_CMD</db:title>
<db:para>Specifies the command to execute when creating a shared library. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-ln-shlib">
<db:title>QMAKE_LN_SHLIB</db:title>
<db:para>Specifies the command to execute when creating a link to a shared library. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-post-link">
<db:title>QMAKE_POST_LINK</db:title>
<db:para>Specifies the command to execute after linking the <db:link xlink:href="qmake-variable-reference.xml#target">TARGET</db:link> together. This variable is normally empty and therefore nothing is executed.</db:para>
<db:note>
<db:para>This variable takes no effect on Xcode projects.</db:para>
</db:note>
</db:section>
<db:section xml:id="qmake-pre-link">
<db:title>QMAKE_PRE_LINK</db:title>
<db:para>Specifies the command to execute before linking the <db:link xlink:href="qmake-variable-reference.xml#target">TARGET</db:link> together. This variable is normally empty and therefore nothing is executed.</db:para>
<db:note>
<db:para>This variable takes no effect on Xcode projects.</db:para>
</db:note>
</db:section>
<db:section xml:id="qmake-project-name">
<db:title>QMAKE_PROJECT_NAME</db:title>
<db:note>
<db:para>This variable is used for Visual Studio project files only.</db:para>
</db:note>
<db:para>Determines the name of the project when generating project files for IDEs. The default value is the target name. The value of this variable is typically handled by qmake and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-mac-sdk">
<db:title>QMAKE_MAC_SDK</db:title>
<db:para>This variable is used on OS X when building universal binaries.</db:para>
</db:section>
<db:section xml:id="qmake-macosx-deployment-target">
<db:title>QMAKE_MACOSX_DEPLOYMENT_TARGET</db:title>
<db:para>This variable only takes effect when building on OS X. On that platform, the variable will be forwarded to the MACOSX_DEPLOYMENT_TARGET environment variable, which is interpreted by the compiler or linker. For more information, see the <db:link xlink:href="">Deploying an Application on OS X</db:link> document.</db:para>
</db:section>
<db:section xml:id="qmake-makefile">
<db:title>QMAKE_MAKEFILE</db:title>
<db:para>Specifies the name of the Makefile to create. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-qmake">
<db:title>QMAKE_QMAKE</db:title>
<db:para>Contains the abosolute path of the qmake executable.</db:para>
<db:note>
<db:para>Do not attempt to overwrite the value of this variable.</db:para>
</db:note>
</db:section>
<db:section xml:id="qmake-resource-flags">
<db:title>QMAKE_RESOURCE_FLAGS</db:title>
<db:para>This variable is used to customize the list of options passed to the <db:link xlink:href="">Resource Compiler</db:link> in each of the build rules where it is used. For example, the following line ensures that the <db:code>-threshold</db:code> and <db:code>-compress</db:code> options are used with particular values each time that <db:code>rcc</db:code> is invoked:</db:para>
<db:programlisting language="cpp">QMAKE_RESOURCE_FLAGS += -threshold 0 -compress 9
</db:programlisting>
</db:section>
<db:section xml:id="qmake-rpathdir">
<db:title>QMAKE_RPATHDIR</db:title>
<db:note>
<db:para>This variable is used on Unix platforms only.</db:para>
</db:note>
<db:para>Specifies a list of library paths that are added to the executable at link time so that the paths will be preferentially searched at runtime.</db:para>
</db:section>
<db:section xml:id="qmake-rpathlinkdir">
<db:title>QMAKE_RPATHLINKDIR</db:title>
<db:para>Specifies a list of library paths for the static linker to search for implicit dependencies of shared libraries. For more information, see the manual page for <db:code>ld(1)</db:code>.</db:para>
</db:section>
<db:section xml:id="qmake-run-cc">
<db:title>QMAKE_RUN_CC</db:title>
<db:para>Specifies the individual rule needed to build an object. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-run-cc-imp">
<db:title>QMAKE_RUN_CC_IMP</db:title>
<db:para>Specifies the individual rule needed to build an object. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-run-cxx">
<db:title>QMAKE_RUN_CXX</db:title>
<db:para>Specifies the individual rule needed to build an object. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-run-cxx-imp">
<db:title>QMAKE_RUN_CXX_IMP</db:title>
<db:para>Specifies the individual rule needed to build an object. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-soname-prefix">
<db:title>QMAKE_SONAME_PREFIX</db:title>
<db:para>If defined, the value of this variable is used as a path to be prepended to the built shared library's <db:code>SONAME</db:code> identifier. The <db:code>SONAME</db:code> is the identifier that the dynamic linker will later use to reference the library. In general this reference may be a library name or full library path. On OS X and iOS, the path may be specified relatively using the following placeholders:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Placeholder</db:para>
</db:th>
<db:th>
<db:para>Effect</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>@rpath</db:para>
</db:td>
<db:td>
<db:para>Expands to paths defined by LC_RPATH mach-o commands in the current process executable or the referring libraries.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>@executable_path</db:para>
</db:td>
<db:td>
<db:para>Expands to the current process executable location.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>@loader_path</db:para>
</db:td>
<db:td>
<db:para>Expands to the referring executable or library location.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In most cases, using <db:code>@rpath</db:code> is sufficient and recommended:</db:para>
<db:programlisting language="cpp"># &lt;project root&gt;/project.pro
QMAKE_SONAME_PREFIX = @rpath
</db:programlisting>
<db:para>However, the prefix may be also specified using different placeholders, or an absolute path, such as one of the following:</db:para>
<db:programlisting language="cpp"># &lt;project root&gt;/project.pro
QMAKE_SONAME_PREFIX = @executable_path/../Frameworks
QMAKE_SONAME_PREFIX = @loader_path/Frameworks
QMAKE_SONAME_PREFIX = /Library/Frameworks
</db:programlisting>
<db:para>For more information, see <db:link xlink:href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html">dyld</db:link> documentation on dynamic library install names.</db:para>
</db:section>
<db:section xml:id="qmake-target">
<db:title>QMAKE_TARGET</db:title>
<db:para>Specifies the name of the project target. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="qmake-target-company">
<db:title>QMAKE_TARGET_COMPANY</db:title>
<db:para>Windows only. Specifies the company for the project target, this is used where applicable for putting the company name in the application's properties. This is only utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables are not set.</db:para>
</db:section>
<db:section xml:id="qmake-target-description">
<db:title>QMAKE_TARGET_DESCRIPTION</db:title>
<db:para>Windows only. Specifies the description for the project target, this is used where applicable for putting the description in the application's properties. This is only utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables are not set.</db:para>
</db:section>
<db:section xml:id="qmake-target-copyright">
<db:title>QMAKE_TARGET_COPYRIGHT</db:title>
<db:para>Windows only. Specifies the copyright information for the project target, this is used where applicable for putting the copyright information in the application's properties. This is only utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables are not set.</db:para>
</db:section>
<db:section xml:id="qmake-target-product">
<db:title>QMAKE_TARGET_PRODUCT</db:title>
<db:para>Windows only. Specifies the product for the project target, this is used where applicable for putting the product in the application's properties. This is only utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables are not set.</db:para>
</db:section>
<db:section xml:id="qt">
<db:title>QT</db:title>
<db:para>Specifies the Qt modules that are used by your project.</db:para>
<db:para>The table below shows the options that can be used with the <db:code>QT</db:code> variable and the Qt modules that are associated with each of them:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Module Enabled</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>axcontainer</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="activeqt-container.xml">QAxContainer</db:link>, which is part of the <db:link xlink:href="activeqt-index.xml">Active Qt</db:link> framework</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>axserver</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="activeqt-server.xml">QAxServer</db:link>, which is part of the <db:link xlink:href="activeqt-index.xml">Active Qt</db:link> framework</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>concurrent</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>core (included by default)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtcore-index.xml">Qt Core</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dbus</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtdbus-index.xml">Qt D-Bus</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>declarative</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Quick 1</db:link> (deprecated)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>designer</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Designer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>gui (included by default)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtgui-index.xml">Qt GUI</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>help</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Help</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>multimedia</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Multimedia</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>multimediawidgets</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Multimedia Widgets</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>network</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>opengl</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> (deprecated)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>printsupport</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtprintsupport-index.xml">Qt Print Support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qml</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt QML</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qmltest</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt QML Test</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>x11extras</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt X11 Extras</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>quick</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Quick</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>script</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Script</db:link> (deprecated)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>scripttools</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Script Tools</db:link> (deprecated)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>sensors</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Sensors</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>serialport</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Serial Port</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>sql</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtsql-index.xml">Qt SQL</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>svg</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt SVG</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>testlib</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qttest-index.xml">Qt Test</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uitools</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt UI Tools</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>webkit</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt WebKit</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>webkitwidgets</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt WebKit Widgets</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>widgets</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>winextras</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt Windows Extras</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>xml</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtxml-index.xml">Qt XML</db:link> (deprecated)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>xmlpatterns</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="">Qt XML Patterns</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>By default, <db:code>QT</db:code> contains both <db:code>core</db:code> and <db:code>gui</db:code>, ensuring that standard GUI applications can be built without further configuration.</db:para>
<db:para>If you want to build a project <db:emphasis>without</db:emphasis> the <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> module, you need to exclude the <db:code>gui</db:code> value with the &quot;-=&quot; operator. The following line will result in a minimal Qt project being built:</db:para>
<db:programlisting language="cpp">QT -= gui # Only the core module is used.
</db:programlisting>
</db:section>
<db:section xml:id="qtplugin">
<db:title>QTPLUGIN</db:title>
<db:para>Specifies a list of names of static Qt plugins that are to be linked with an application so that they are available as built-in resources.</db:para>
<db:para>qmake automatically adds the plugins that are typically needed by the used Qt modules (see <db:code>QT</db:code>). The defaults are tuned towards an optimal out-of-the-box experience. See <db:link xlink:href="">Static Plugins</db:link> for a list of available plugins, and ways to override the automatic linking.</db:para>
<db:para>This variable currently has no effect when linking against a shared/dynamic build of Qt, or when linking libraries. It may be used for deployment of dynamic plugins at a later time.</db:para>
<db:anchor xml:id="qt-version-variable"/>
</db:section>
<db:section xml:id="qt-version">
<db:title>QT_VERSION</db:title>
<db:para>Contains the current version of Qt.</db:para>
</db:section>
<db:section xml:id="qt-major-version">
<db:title>QT_MAJOR_VERSION</db:title>
<db:para>Contains the current major version of Qt.</db:para>
</db:section>
<db:section xml:id="qt-minor-version">
<db:title>QT_MINOR_VERSION</db:title>
<db:para>Contains the current minor version of Qt.</db:para>
</db:section>
<db:section xml:id="qt-patch-version">
<db:title>QT_PATCH_VERSION</db:title>
<db:para>Contains the current patch version of Qt.</db:para>
</db:section>
<db:section xml:id="rc-file">
<db:title>RC_FILE</db:title>
<db:para>Specifies the name of the resource file for the application. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="rc-codepage">
<db:title>RC_CODEPAGE</db:title>
<db:para>Windows only. Specifies the codepage that should be specified in a generated rc file. This is only utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables are not set.</db:para>
</db:section>
<db:section xml:id="rc-icons">
<db:title>RC_ICONS</db:title>
<db:para>Windows only. Specifies the icons that should be included into a generated rc file, this is only utilized if the RC_FILE and RES_FILE variable are not set.</db:para>
</db:section>
<db:section xml:id="rc-lang">
<db:title>RC_LANG</db:title>
<db:para>Windows only. Specifies the language that should be specified in a generated rc file. This is only utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables are not set.</db:para>
</db:section>
<db:section xml:id="rc-includepath">
<db:title>RC_INCLUDEPATH</db:title>
<db:para>Specifies include paths that are passed to the Windows Resource Compiler.</db:para>
</db:section>
<db:section xml:id="rcc-dir">
<db:title>RCC_DIR</db:title>
<db:para>Specifies the directory for Qt Resource Compiler output files.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">unix:RCC_DIR = ../myproject/resources
win32:RCC_DIR = c:/myproject/resources
</db:programlisting>
</db:section>
<db:section xml:id="requires">
<db:title>REQUIRES</db:title>
<db:para>Specifies a list of values that are evaluated as conditions. If any of the conditions is false, qmake skips this project (and its <db:link xlink:href="qmake-variable-reference.xml#subdirs">SUBDIRS</db:link>) when building.</db:para>
<db:note>
<db:para>We recommend using the <db:link xlink:href="qmake-test-function-reference.xml#requires-condition">requires()</db:link> function instead if you want to skip projects or subprojects when building.</db:para>
</db:note>
</db:section>
<db:section xml:id="resources">
<db:title>RESOURCES</db:title>
<db:para>Specifies the name of the resource collection files (qrc) for the target. For more information about the resource collection file, see <db:link xlink:href="resources.xml">The Qt Resource System</db:link>.</db:para>
</db:section>
<db:section xml:id="res-file">
<db:title>RES_FILE</db:title>
<db:para>Specifies the name of the compiled Windows resource file for the target. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="signature-file">
<db:title>SIGNATURE_FILE</db:title>
<db:note>
<db:para>This variable is only used on Windows CE.</db:para>
</db:note>
<db:para>Specifies which signature file should be used to sign the project target.</db:para>
<db:note>
<db:para>This variable will overwrite the setting you have specified in configure, with the <db:code>-signature</db:code> option.</db:para>
</db:note>
</db:section>
<db:section xml:id="sources">
<db:title>SOURCES</db:title>
<db:para>Specifies the names of all source files in the project.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">SOURCES = myclass.cpp \
      login.cpp \
      mainwindow.cpp
</db:programlisting>
<db:para>See also <db:link xlink:href="qmake-variable-reference.xml#headers">HEADERS</db:link>.</db:para>
</db:section>
<db:section xml:id="subdirs">
<db:title>SUBDIRS</db:title>
<db:para>This variable, when used with the <db:code>subdirs</db:code> <db:link xlink:href="qmake-variable-reference.xml#template">template</db:link> specifies the names of all subdirectories or project files that contain parts of the project that need to be built. Each subdirectory specified using this variable must contain its own project file.</db:para>
<db:para>It is recommended that the project file in each subdirectory has the same base name as the subdirectory itself, because that makes it possible to omit the file name. For example, if the subdirectory is called <db:code>myapp</db:code>, the project file in that directory should be called <db:code>myapp.pro</db:code>.</db:para>
<db:para>Alternatively, you can specify a relative path to a .pro file in any directory. It is strongly recommended that you specify only paths in the current project's parent directory or its subdirectories.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">SUBDIRS = kernel \
          tools \
          myapp
</db:programlisting>
<db:para>If you need to ensure that the subdirectories are built in the order in which they are specified, update the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable to include the <db:code>ordered</db:code> option:</db:para>
<db:programlisting language="cpp">CONFIG += ordered
</db:programlisting>
<db:para>It is possible to modify this default behavior of <db:code>SUBDIRS</db:code> by giving additional modifiers to <db:code>SUBDIRS</db:code> elements. Supported modifiers are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Modifier</db:para>
</db:th>
<db:th>
<db:para>Effect</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>.subdir</db:para>
</db:td>
<db:td>
<db:para>Use the specified subdirectory instead of <db:code>SUBDIRS</db:code> value.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>.file</db:para>
</db:td>
<db:td>
<db:para>Specify the subproject <db:code>pro</db:code> file explicitly. Cannot be used in conjunction with <db:code>.subdir</db:code> modifier.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>.depends</db:para>
</db:td>
<db:td>
<db:para>This subproject depends on specified subproject. Available only on platforms that use makefiles.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>.makefile</db:para>
</db:td>
<db:td>
<db:para>The makefile of subproject. Available only on platforms that use makefiles.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>.target</db:para>
</db:td>
<db:td>
<db:para>Base string used for makefile targets related to this subproject. Available only on platforms that use makefiles.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, define two subdirectories, both of which reside in a different directory than the <db:code>SUBDIRS</db:code> value, and one of the subdirectories must be built before the other:</db:para>
<db:programlisting language="cpp">SUBDIRS += my_executable my_library
my_executable.subdir = app
my_executable.depends = my_library
my_library.subdir = lib
</db:programlisting>
</db:section>
<db:section xml:id="target">
<db:title>TARGET</db:title>
<db:para>Specifies the name of the target file. Contains the base name of the project file by default.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">TEMPLATE = app
TARGET = myapp
SOURCES = main.cpp
</db:programlisting>
<db:para>The project file above would produce an executable named <db:code>myapp</db:code> on unix and <db:code>myapp.exe</db:code> on Windows.</db:para>
</db:section>
<db:section xml:id="target-ext">
<db:title>TARGET_EXT</db:title>
<db:para>Specifies the extension of <db:code>TARGET</db:code>. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="target-x">
<db:title>TARGET_x</db:title>
<db:para>Specifies the extension of <db:code>TARGET</db:code> with a major version number. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="target-x-y-z">
<db:title>TARGET_x.y.z</db:title>
<db:para>Specifies the extension of <db:code>TARGET</db:code> with version number. The value of this variable is typically handled by qmake or <db:link xlink:href="qmake-variable-reference.xml#qmakespec">qmake.conf</db:link> and rarely needs to be modified.</db:para>
</db:section>
<db:section xml:id="template">
<db:title>TEMPLATE</db:title>
<db:para>Specifies the name of the template to use when generating the project. The allowed values are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>app</db:para>
</db:td>
<db:td>
<db:para>Creates a Makefile for building applications (the default). See <db:link xlink:href="qmake-common-projects.xml#building-an-application">Building an Application</db:link> for more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>lib</db:para>
</db:td>
<db:td>
<db:para>Creates a Makefile for building libraries. See <db:link xlink:href="qmake-common-projects.xml#building-a-library">Building a Library</db:link> for more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>subdirs</db:para>
</db:td>
<db:td>
<db:para>Creates a Makefile for building targets in subdirectories. The subdirectories are specified using the <db:link xlink:href="qmake-variable-reference.xml#subdirs">SUBDIRS</db:link> variable.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>aux</db:para>
</db:td>
<db:td>
<db:para>Creates a Makefile for not building anything. Use this if no compiler needs to be invoked to create the target, for instance because your project is written in an interpreted language.</db:para>
<db:note>
<db:para>This template type is only available for Makefile-based generators. In particular, it will not work with the vcxproj and Xcode generators.</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vcapp</db:para>
</db:td>
<db:td>
<db:para>Windows only. Creates an application project for Visual Studio. See <db:link xlink:href="qmake-platform-notes.xml#creating-visual-studio-project-files">Creating Visual Studio Project Files</db:link> for more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vclib</db:para>
</db:td>
<db:td>
<db:para>Windows only. Creates a library project for Visual Studio.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example:</db:para>
<db:programlisting language="cpp">TEMPLATE = lib
SOURCES = main.cpp
TARGET = mylib
</db:programlisting>
<db:para>The template can be overridden by specifying a new template type with the <db:code>-t</db:code> command line option. This overrides the template type <db:emphasis>after</db:emphasis> the .pro file has been processed. With .pro files that use the template type to determine how the project is built, it is necessary to declare TEMPLATE on the command line rather than use the <db:code>-t</db:code> option.</db:para>
</db:section>
<db:section xml:id="translations">
<db:title>TRANSLATIONS</db:title>
<db:para>Specifies a list of translation (.ts) files that contain translations of the user interface text into non-native languages.</db:para>
<db:para>See the <db:link xlink:href="">Qt Linguist Manual</db:link> for more information about internationalization (i18n) and localization (l10n) with Qt.</db:para>
</db:section>
<db:section xml:id="ui-dir">
<db:title>UI_DIR</db:title>
<db:para>Specifies the directory where all intermediate files from uic should be placed.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">unix:UI_DIR = ../myproject/ui
win32:UI_DIR = c:/myproject/ui
</db:programlisting>
</db:section>
<db:section xml:id="version">
<db:title>VERSION</db:title>
<db:para>Specifies the version number of the application if the <db:code>app</db:code> <db:link xlink:href="qmake-variable-reference.xml#template">template</db:link> is specified or the version number of the library if the <db:code>lib</db:code> template is specified.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">VERSION = 1.2.3
</db:programlisting>
</db:section>
<db:section xml:id="ver-maj">
<db:title>VER_MAJ</db:title>
<db:para>Specifies the major version number of the library if the <db:code>lib</db:code> <db:link xlink:href="qmake-variable-reference.xml#template">template</db:link> is specified.</db:para>
</db:section>
<db:section xml:id="ver-min">
<db:title>VER_MIN</db:title>
<db:para>Specifies the minor version number of the library if the <db:code>lib</db:code> <db:link xlink:href="qmake-variable-reference.xml#template">template</db:link> is specified.</db:para>
</db:section>
<db:section xml:id="ver-pat">
<db:title>VER_PAT</db:title>
<db:para>Specifies the patch version number of the library if the <db:code>lib</db:code> <db:link xlink:href="qmake-variable-reference.xml#template">template</db:link> is specified.</db:para>
</db:section>
<db:section xml:id="vpath">
<db:title>VPATH</db:title>
<db:para>Tells qmake where to search for files it cannot open. For example, if qmake looks for <db:code>SOURCES</db:code> and finds an entry that it cannot open, it looks through the entire VPATH list to see if it can find the file on its own.</db:para>
<db:para>See also <db:link xlink:href="qmake-variable-reference.xml#dependpath">DEPENDPATH</db:link>.</db:para>
</db:section>
<db:section xml:id="winrt-manifest">
<db:title>WINRT_MANIFEST</db:title>
<db:para>Specifies parameters to be passed to the application manifest on <db:link xlink:href="">Windows Runtime</db:link>. The allowed values are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Member</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>architecture</db:para>
</db:td>
<db:td>
<db:para>The target architecture. Defaults to <db:code>VCPROJ_ARCH</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>background</db:para>
</db:td>
<db:td>
<db:para>Tile background color. Defaults to <db:code>green</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>capabilities</db:para>
</db:td>
<db:td>
<db:para>Specifies capabilities to add to the capability list.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>capabilities_device</db:para>
</db:td>
<db:td>
<db:para>Specifies device capabilities to add to the capability list (location, webcam, and so on).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>default_language</db:para>
</db:td>
<db:td>
<db:para>The default language code of the application. Defaults to &quot;en&quot;.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dependencies</db:para>
</db:td>
<db:td>
<db:para>Specifies dependencies required by the package.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>description</db:para>
</db:td>
<db:td>
<db:para>Package description. Defaults to <db:code>Default package description</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>foreground</db:para>
</db:td>
<db:td>
<db:para>Tile foreground (text) color. Defaults to <db:code>light</db:code>. This option is only available for Windows Store apps on Windows 8 and Windows RT.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iconic_tile_icon</db:para>
</db:td>
<db:td>
<db:para>Image file for the <db:code>iconic</db:code> tile template icon. Default provided by the mkspec.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iconic_tile_small</db:para>
</db:td>
<db:td>
<db:para>Image file for the small <db:code>iconic</db:code> tile template logo. Default provided by the mkspec.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>identity</db:para>
</db:td>
<db:td>
<db:para>The unique ID of the app. Defaults to reusing the existing generated manifest's UUID, or generates a new UUID if none is present.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>logo_large</db:para>
</db:td>
<db:td>
<db:para>Large logo image file. Default provided by the mkspec.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>logo_medium</db:para>
</db:td>
<db:td>
<db:para>Medium logo image file. Default provided by the mkspec.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>logo_small</db:para>
</db:td>
<db:td>
<db:para>Small logo image file. Default provided by the mkspec.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>logo_store</db:para>
</db:td>
<db:td>
<db:para>Logo image file for Windows Store. Default provided by the mkspec.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>name</db:para>
</db:td>
<db:td>
<db:para>The name of the package as displayed to the user. Defaults to TARGET.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>phone_product_id</db:para>
</db:td>
<db:td>
<db:para>The GUID of the product. Defaults to the value of WINRT_MANIFEST.identity. (Windows Phone only)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>phone_publisher_id</db:para>
</db:td>
<db:td>
<db:para>The GUID of the publisher. Defaults to an invalid GUID. (Windows Phone only)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>publisher</db:para>
</db:td>
<db:td>
<db:para>Display name of the publisher. Defaults to <db:code>Default publisher display name</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>publisher_id</db:para>
</db:td>
<db:td>
<db:para>The publisher's distinguished name (default: <db:code>CN=MyCN</db:code>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>splash_screen</db:para>
</db:td>
<db:td>
<db:para>Splash screen image file. Default provided by the mkspec.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>target</db:para>
</db:td>
<db:td>
<db:para>The name of the target (.exe). Defaults to TARGET.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>version</db:para>
</db:td>
<db:td>
<db:para>The version number of the package. Defaults to <db:code>1.0.0.0</db:code>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can use any combination of those values.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">WINRT_MANIFEST.publisher = MyCompany
WINRT_MANIFEST.logo_store = someImage.png
WINRT_MANIFEST.capabilities += internetClient
WINRT_MANIFEST.capabilities_device += location
</db:programlisting>
<db:para>Additionally, an input manifest file can be specified by using WINRT_MANIFEST.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">WINRT_MANIFEST = someManifest.xml.in
</db:programlisting>
</db:section>
<db:section xml:id="yaccsources">
<db:title>YACCSOURCES</db:title>
<db:para>Specifies a list of Yacc source files to be included in the project. All dependencies, headers and source files will automatically be included in the project.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">YACCSOURCES = moc.y
</db:programlisting>
</db:section>
<db:section xml:id="pro-file">
<db:title>_PRO_FILE_</db:title>
<db:para>Contains the path to the project file in use.</db:para>
<db:para>For example, the following line causes the location of the project file to be written to the console:</db:para>
<db:programlisting language="cpp">message($$_PRO_FILE_)
</db:programlisting>
<db:note>
<db:para>Do not attempt to overwrite the value of this variable.</db:para>
</db:note>
</db:section>
<db:section xml:id="pro-file-pwd">
<db:title>_PRO_FILE_PWD_</db:title>
<db:para>Contains the path to the directory containing the project file in use.</db:para>
<db:para>For example, the following line causes the location of the directory containing the project file to be written to the console:</db:para>
<db:programlisting language="cpp">message($$_PRO_FILE_PWD_)
</db:programlisting>
<db:note>
<db:para>Do not attempt to overwrite the value of this variable.</db:para>
</db:note>
</db:section>
</db:article>
