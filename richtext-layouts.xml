<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Document Layouts</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="richtext-cursor.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="The QTextCursor Interface"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="richtext-common-tasks.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Common Rich Text Editing Tasks"/></db:extendedlink>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The layout of a document is only relevant when it is to be displayed on a device, or when some information is requested that requires a visual representation of the document. Until this occurs, the document does not need to be formatted and prepared for a device.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>Each document's layout is managed by a subclass of the <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> class. This class provides a common interface for layout and rendering engines. The default rendering behavior is currently implemented in a private class. This approach makes it possible to create custom layouts, and provides the mechanism used when preparing pages for printing or exporting to Portable Document Format (PDF) files.</db:para>
</db:section>
<db:section xml:id="example-shaped-text-layout">
<db:title>Example - Shaped Text Layout</db:title>
<db:para>Sometimes it is important to be able to format plain text within an irregularly-shaped region, perhaps when rendering a custom widget, for example. Scribe provides generic features, such as those provided by the <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> class, to help developers perform word-wrapping and layout tasks without the need to create a document first.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/plaintext-layout.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Formatting and drawing a paragraph of plain text is straightforward. The example below will lay out a paragraph of text, using a single font, around the right hand edge of a circle.</db:para>
<db:programlisting language="cpp">QTextLayout textLayout(text, font);
qreal margin = 10;
qreal radius = qMin(width()/2.0, height()/2.0) - margin;
QFontMetrics fm(font);

qreal lineHeight = fm.height();
qreal y = 0;

textLayout.beginLayout();

while (1) {
    // create a new line
    QTextLine line = textLayout.createLine();
    if (!line.isValid())
        break;

    qreal x1 = qMax(0.0, pow(pow(radius,2)-pow(radius-y,2), 0.5));
    qreal x2 = qMax(0.0, pow(pow(radius,2)-pow(radius-(y+lineHeight),2), 0.5));
    qreal x = qMax(x1, x2) + margin;
    qreal lineWidth = (width() - margin) - x;

    line.setLineWidth(lineWidth);
    line.setPosition(QPointF(x, margin+y));
    y += line.height();
}

textLayout.endLayout();

QPainter painter;
painter.begin(this);
painter.setRenderHint(QPainter::Antialiasing);
painter.fillRect(rect(), Qt::white);
painter.setBrush(QBrush(Qt::black));
painter.setPen(QPen(Qt::black));
textLayout.draw(&amp;amp;painter, QPoint(0,0));

painter.setBrush(QBrush(QColor(&quot;#a6ce39&quot;)));
painter.setPen(QPen(Qt::black));
painter.drawEllipse(QRectF(-radius, margin, 2*radius, 2*radius));
painter.end();
</db:programlisting>
<db:para>We create a text layout, specifying the text string we want to display and the font to use. We ensure that the text we supplied is formatted correctly by obtaining text lines from the text format, and wrapping the remaining text using the available space. The lines are positioned as we move down the page.</db:para>
<db:para>The formatted text can be drawn onto a paint device; in the above code, the text is drawn directly onto a widget.</db:para>
</db:section>
</db:article>
