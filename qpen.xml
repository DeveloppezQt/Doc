<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPen Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpen.xml">QPen</db:link> class defines how a <db:link xlink:href="qpainter.xml">QPainter</db:link> should draw lines and outlines of shapes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPen</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPen is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A pen has a <db:link xlink:href="qpen.xml#style">style</db:link>(), <db:link xlink:href="qpen.xml#width">width</db:link>(), <db:link xlink:href="qpen.xml#brush">brush</db:link>(), <db:link xlink:href="qpen.xml#capStyle">capStyle</db:link>() and <db:link xlink:href="qpen.xml#joinStyle">joinStyle</db:link>().</db:para>
<db:para>The pen style defines the line type. The brush is used to fill strokes generated with the pen. Use the <db:link xlink:href="qbrush.xml">QBrush</db:link> class to specify fill styles. The cap style determines the line end caps that can be drawn using <db:link xlink:href="qpainter.xml">QPainter</db:link>, while the join style describes how joins between two lines are drawn. The pen width can be specified in both integer (<db:link xlink:href="qpen.xml#width">width</db:link>()) and floating point (<db:link xlink:href="qpen.xml#widthF">widthF</db:link>()) precision. A line width of zero indicates a cosmetic pen. This means that the pen width is always drawn one pixel wide, independent of the <db:link xlink:href="qpainter.xml#coordinate-transformations">transformation</db:link> set on the painter.</db:para>
<db:para>The various settings can easily be modified using the corresponding <db:link xlink:href="qpen.xml#setStyle">setStyle</db:link>(), <db:link xlink:href="qpen.xml#setWidth">setWidth</db:link>(), <db:link xlink:href="qpen.xml#setBrush">setBrush</db:link>(), <db:link xlink:href="qpen.xml#setCapStyle">setCapStyle</db:link>() and <db:link xlink:href="qpen.xml#setJoinStyle">setJoinStyle</db:link>() functions (note that the painter's pen must be reset when altering the pen's properties).</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QPainter painter(this);
QPen pen(Qt::green, 3, Qt::DashDotLine, Qt::RoundCap, Qt::RoundJoin);
painter.setPen(pen);
</db:programlisting>
<db:para>which is equivalent to</db:para>
<db:programlisting language="cpp">QPainter painter(this);
QPen pen;  // creates a default pen

pen.setStyle(Qt::DashDotLine);
pen.setWidth(3);
pen.setBrush(Qt::green);
pen.setCapStyle(Qt::RoundCap);
pen.setJoinStyle(Qt::RoundJoin);

painter.setPen(pen);
</db:programlisting>
<db:para>The default pen is a solid black brush with 1 width, square cap style (<db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::SquareCap</db:link>), and bevel join style (<db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::BevelJoin</db:link>).</db:para>
<db:para>In addition <db:link xlink:href="qpen.xml">QPen</db:link> provides the <db:link xlink:href="qpen.xml#color">color</db:link>() and <db:link xlink:href="qpen.xml#setColor">setColor</db:link>() convenience functions to extract and set the color of the pen's brush, respectively. Pens may also be compared and streamed.</db:para>
<db:para>For more information about painting in general, see the <db:link xlink:href="paintsystem.xml">Paint System</db:link> documentation.</db:para>
<db:section xml:id="pen-style">
<db:title>Pen Style</db:title>
<db:para>Qt provides several built-in styles represented by the <db:link xlink:href="qt.xml#PenStyle-enum">Qt::PenStyle</db:link> enum:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-solid.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-dash.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-dot.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#PenStyle-enum">Qt::SolidLine</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#PenStyle-enum">Qt::DashLine</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#PenStyle-enum">Qt::DotLine</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-dashdot.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-dashdotdot.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-custom.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#PenStyle-enum">Qt::DashDotLine</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#PenStyle-enum">Qt::DashDotDotLine</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#PenStyle-enum">Qt::CustomDashLine</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Simply use the <db:link xlink:href="qpen.xml#setStyle">setStyle</db:link>() function to convert the pen style to either of the built-in styles, except the <db:link xlink:href="qt.xml#PenStyle-enum">Qt::CustomDashLine</db:link> style which we will come back to shortly. Setting the style to <db:link xlink:href="qt.xml#PenStyle-enum">Qt::NoPen</db:link> tells the painter to not draw lines or outlines. The default pen style is <db:link xlink:href="qt.xml#PenStyle-enum">Qt::SolidLine</db:link>.</db:para>
<db:para>Since Qt 4.1 it is also possible to specify a custom dash pattern using the <db:link xlink:href="qpen.xml#setDashPattern">setDashPattern</db:link>() function which implicitly converts the style of the pen to <db:link xlink:href="qt.xml#PenStyle-enum">Qt::CustomDashLine</db:link>. The pattern argument, a <db:link xlink:href="qlist.xml">QList</db:link>, must be specified as an even number of <db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link> entries where the entries 1, 3, 5... are the dashes and 2, 4, 6... are the spaces. For example, the custom pattern shown above is created using the following code:</db:para>
<db:programlisting language="cpp">QPen pen;
QList&amp;lt;qreal&amp;gt; dashes;
qreal space = 4;

dashes &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; space &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; space &amp;lt;&amp;lt; 9 &amp;lt;&amp;lt; space
           &amp;lt;&amp;lt; 27 &amp;lt;&amp;lt; space &amp;lt;&amp;lt; 9 &amp;lt;&amp;lt; space;

pen.setDashPattern(dashes);
</db:programlisting>
<db:para>Note that the dash pattern is specified in units of the pens width, e.g. a dash of length 5 in width 10 is 50 pixels long.</db:para>
<db:para>The currently set dash pattern can be retrieved using the <db:link xlink:href="qpen.xml#dashPattern">dashPattern</db:link>() function. Use the <db:link xlink:href="qpen.xml#isSolid">isSolid</db:link>() function to determine whether the pen has a solid fill, or not.</db:para>
</db:section>
<db:section xml:id="cap-style">
<db:title>Cap Style</db:title>
<db:para>The cap style defines how the end points of lines are drawn using <db:link xlink:href="qpainter.xml">QPainter</db:link>. The cap style only apply to wide lines, i.e. when the width is 1 or greater. The <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::PenCapStyle</db:link> enum provides the following styles:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-square.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-flat.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-roundcap.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::SquareCap</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::FlatCap</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::RoundCap</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::SquareCap</db:link> style is a square line end that covers the end point and extends beyond it by half the line width. The <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::FlatCap</db:link> style is a square line end that does not cover the end point of the line. And the <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::RoundCap</db:link> style is a rounded line end covering the end point.</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::SquareCap</db:link>.</db:para>
<db:para>Whether or not end points are drawn when the pen width is 0 or 1 depends on the cap style. Using <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::SquareCap</db:link> or <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::RoundCap</db:link> they are drawn, using <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::FlatCap</db:link> they are not drawn.</db:para>
</db:section>
<db:section xml:id="join-style">
<db:title>Join Style</db:title>
<db:para>The join style defines how joins between two connected lines can be drawn using <db:link xlink:href="qpainter.xml">QPainter</db:link>. The join style only apply to wide lines, i.e. when the width is 1 or greater. The <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::PenJoinStyle</db:link> enum provides the following styles:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-bevel.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-miter.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-roundjoin.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::BevelJoin</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::MiterJoin</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::RoundJoin</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::BevelJoin</db:link> style fills the triangular notch between the two lines. The <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::MiterJoin</db:link> style extends the lines to meet at an angle. And the <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::RoundJoin</db:link> style fills a circular arc between the two lines.</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::BevelJoin</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-miterlimit.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>When the <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::MiterJoin</db:link> style is applied, it is possible to use the <db:link xlink:href="qpen.xml#setMiterLimit">setMiterLimit</db:link>() function to specify how far the miter join can extend from the join point. The <db:link xlink:href="qpen.xml#miterLimit">miterLimit</db:link>() is used to reduce artifacts between line joins where the lines are close to parallel.</db:para>
<db:para>The <db:link xlink:href="qpen.xml#miterLimit">miterLimit</db:link>() must be specified in units of the pens width, e.g. a miter limit of 5 in width 10 is 50 pixels long. The default miter limit is 2, i.e. twice the pen width in pixels.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-demo.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold"><db:link xlink:href="qtwidgets-painting-pathstroke-example.xml">The Path Stroking Example</db:link></db:emphasis></db:para>
<db:para>The Path Stroking example shows Qt's built-in dash patterns and shows how custom patterns can be used to extend the range of available patterns.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml">QPainter</db:link></db:member>
<db:member><db:link xlink:href="qbrush.xml">QBrush</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-painting-pathstroke-example.xml">Path Stroking Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-scribble-example.xml">Scribble Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPen">
<db:title>QPen::QPen()</db:title>
<db:constructorsynopsis>
<db:methodname>QPen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a default black solid line pen with 1 width.</db:para>
</db:section>
<db:section xml:id="QPen-1">
<db:title>QPen::QPen(Qt::PenStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPen</db:methodname>
<db:methodparam>
<db:type>Qt::PenStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen(Qt::PenStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a black pen with 1 width and the given <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setStyle">setStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPen-2">
<db:title>QPen::QPen(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPen</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a solid line pen with 1 width and the given <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setBrush">setBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setColor">setColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPen-3">
<db:title>QPen::QPen(const QBrush &amp;<db:emphasis>brush</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, Qt::PenStyle <db:emphasis>style</db:emphasis> = Qt::SolidLine, Qt::PenCapStyle <db:emphasis>cap</db:emphasis> = Qt::SquareCap, Qt::PenJoinStyle <db:emphasis>join</db:emphasis> = Qt::BevelJoin)</db:title>
<db:constructorsynopsis>
<db:methodname>QPen</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::PenStyle</db:type>
<db:parameter>style</db:parameter>
<db:initializer>Qt::SolidLine</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::PenCapStyle</db:type>
<db:parameter>cap</db:parameter>
<db:initializer>Qt::SquareCap</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::PenJoinStyle</db:type>
<db:parameter>join</db:parameter>
<db:initializer>Qt::BevelJoin</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen(const QBrush &amp;brush, qreal width, Qt::PenStyle style, Qt::PenCapStyle cap, Qt::PenJoinStyle join)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a pen with the specified <db:code role="parameter">brush</db:code>, <db:code role="parameter">width</db:code>, pen <db:code role="parameter">style</db:code>, <db:code role="parameter">cap</db:code> style and <db:code role="parameter">join</db:code> style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setBrush">setBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setWidth">setWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setStyle">setStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setCapStyle">setCapStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setJoinStyle">setJoinStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPen-4">
<db:title>QPen::QPen(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPen</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a pen that is a copy of the given <db:code role="parameter">pen</db:code>.</db:para>
</db:section>
<db:section xml:id="QPen-5">
<db:title>[since 5.4] QPen::QPen(QPen &amp;&amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPen</db:methodname>
<db:methodparam>
<db:type>QPen &amp;&amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen(QPen &amp;&amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a pen that is moved from the given <db:code role="parameter">pen</db:code>.</db:para>
<db:para>The moved-from pen can only be assigned to, copied, or destroyed. Any other operation (prior to assignment) leads to undefined behavior.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="dtor.QPen">
<db:title>QPen::~QPen()</db:title>
<db:destructorsynopsis>
<db:methodname>~QPen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPen()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the pen.</db:para>
</db:section>
<db:section xml:id="brush">
<db:title>QBrush QPen::brush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>brush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush brush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to fill strokes generated with this pen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setBrush">setBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capStyle">
<db:title>Qt::PenCapStyle QPen::capStyle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::PenCapStyle</db:type>
<db:methodname>capStyle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::PenCapStyle capStyle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen's cap style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setCapStyle">setCapStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#cap-style">Cap Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="color">
<db:title>QColor QPen::color() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>color</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor color() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the color of this pen's brush.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setColor">setColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dashOffset">
<db:title>qreal QPen::dashOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>dashOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal dashOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the dash offset for the pen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setDashOffset">setDashOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dashPattern">
<db:title>QList&lt;qreal&gt; QPen::dashPattern() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;qreal&gt;</db:type>
<db:methodname>dashPattern</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;qreal&gt; dashPattern() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the dash pattern of this pen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setDashPattern">setDashPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#style">style</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#isSolid">isSolid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCosmetic">
<db:title>bool QPen::isCosmetic() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCosmetic</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCosmetic() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the pen is cosmetic; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Cosmetic pens are used to draw strokes that have a constant width regardless of any transformations applied to the <db:link xlink:href="qpainter.xml">QPainter</db:link> they are used with. Drawing a shape with a cosmetic pen ensures that its outline will have the same thickness at different scale factors.</db:para>
<db:para>A zero width pen is cosmetic by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setCosmetic">setCosmetic</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#widthF">widthF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSolid">
<db:title>bool QPen::isSolid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSolid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSolid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the pen has a solid fill, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#style">style</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#dashPattern">dashPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="joinStyle">
<db:title>Qt::PenJoinStyle QPen::joinStyle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::PenJoinStyle</db:type>
<db:methodname>joinStyle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::PenJoinStyle joinStyle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen's join style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setJoinStyle">setJoinStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#join-style">Join Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="miterLimit">
<db:title>qreal QPen::miterLimit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>miterLimit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal miterLimit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the miter limit of the pen. The miter limit is only relevant when the join style is set to <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::MiterJoin</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setMiterLimit">setMiterLimit</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#join-style">Join Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBrush">
<db:title>void QPen::setBrush(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrush(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush used to fill strokes generated with this pen to the given <db:code role="parameter">brush</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setColor">setColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCapStyle">
<db:title>void QPen::setCapStyle(Qt::PenCapStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCapStyle</db:methodname>
<db:methodparam>
<db:type>Qt::PenCapStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCapStyle(Qt::PenCapStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen's cap style to the given <db:code role="parameter">style</db:code>. The default value is <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::SquareCap</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#capStyle">capStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#cap-style">Cap Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColor">
<db:title>void QPen::setColor(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColor</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColor(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the color of this pen's brush to the given <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setBrush">setBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#color">color</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCosmetic">
<db:title>void QPen::setCosmetic(bool <db:emphasis>cosmetic</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCosmetic</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>cosmetic</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCosmetic(bool cosmetic)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this pen to cosmetic or non-cosmetic, depending on the value of <db:code role="parameter">cosmetic</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#isCosmetic">isCosmetic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDashOffset">
<db:title>void QPen::setDashOffset(qreal <db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDashOffset</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDashOffset(qreal offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the dash offset (the starting point on the dash pattern) for this pen to the <db:code role="parameter">offset</db:code> specified. The offset is measured in terms of the units used to specify the dash pattern.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-dashpattern.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>For example, a pattern where each stroke is four units long, followed by a gap of two units, will begin with the stroke when drawn as a line.</db:para>
<db:para>However, if the dash offset is set to 4.0, any line drawn will begin with the gap. Values of the offset up to 4.0 will cause part of the stroke to be drawn first, and values of the offset between 4.0 and 6.0 will cause the line to begin with part of the gap.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This implicitly converts the style of the pen to <db:link xlink:href="qt.xml#PenStyle-enum">Qt::CustomDashLine</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#dashOffset">dashOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDashPattern">
<db:title>void QPen::setDashPattern(const QList&lt;qreal&gt; &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDashPattern</db:methodname>
<db:methodparam>
<db:type>const QList&lt;qreal&gt; &amp;</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDashPattern(const QList&lt;qreal&gt; &amp;pattern)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the dash pattern for this pen to the given <db:code role="parameter">pattern</db:code>. This implicitly converts the style of the pen to <db:link xlink:href="qt.xml#PenStyle-enum">Qt::CustomDashLine</db:link>.</db:para>
<db:para>The pattern must be specified as an even number of positive entries where the entries 1, 3, 5... are the dashes and 2, 4, 6... are the spaces. For example:</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-custom.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QPen pen;
QList&amp;lt;qreal&amp;gt; dashes;
qreal space = 4;
dashes &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; space &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; space &amp;lt;&amp;lt; 9 &amp;lt;&amp;lt; space
           &amp;lt;&amp;lt; 27 &amp;lt;&amp;lt; space &amp;lt;&amp;lt; 9 &amp;lt;&amp;lt; space;
pen.setDashPattern(dashes);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The dash pattern is specified in units of the pens width; e.g. a dash of length 5 in width 10 is 50 pixels long. Note that a pen with zero width is equivalent to a cosmetic pen with a width of 1 pixel.</db:para>
<db:para>Each dash is also subject to cap styles so a dash of 1 with square cap set will extend 0.5 pixels out in each direction resulting in a total width of 2.</db:para>
<db:para>Note that the default cap style is <db:link xlink:href="qt.xml#PenCapStyle-enum">Qt::SquareCap</db:link>, meaning that a square line end covers the end point and extends beyond it by half the line width.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setStyle">setStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#dashPattern">dashPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setCapStyle">setCapStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setCosmetic">setCosmetic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setJoinStyle">
<db:title>void QPen::setJoinStyle(Qt::PenJoinStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setJoinStyle</db:methodname>
<db:methodparam>
<db:type>Qt::PenJoinStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setJoinStyle(Qt::PenJoinStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen's join style to the given <db:code role="parameter">style</db:code>. The default value is <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::BevelJoin</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#joinStyle">joinStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#join-style">Join Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMiterLimit">
<db:title>void QPen::setMiterLimit(qreal <db:emphasis>limit</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMiterLimit</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>limit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMiterLimit(qreal limit)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the miter limit of this pen to the given <db:code role="parameter">limit</db:code>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpen-miterlimit.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The miter limit describes how far a miter join can extend from the join point. This is used to reduce artifacts between line joins where the lines are close to parallel.</db:para>
<db:para>This value does only have effect when the pen style is set to <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::MiterJoin</db:link>. The value is specified in units of the pen's width, e.g. a miter limit of 5 in width 10 is 50 pixels long. The default miter limit is 2, i.e. twice the pen width in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#miterLimit">miterLimit</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#setJoinStyle">setJoinStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#join-style">Join Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyle">
<db:title>void QPen::setStyle(Qt::PenStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStyle</db:methodname>
<db:methodparam>
<db:type>Qt::PenStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStyle(Qt::PenStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen style to the given <db:code role="parameter">style</db:code>.</db:para>
<db:para>See the <db:link xlink:href="qt.xml#PenStyle-enum">Qt::PenStyle</db:link> documentation for a list of the available styles. Since Qt 4.1 it is also possible to specify a custom dash pattern using the <db:link xlink:href="qpen.xml#setDashPattern">setDashPattern</db:link>() function which implicitly converts the style of the pen to <db:link xlink:href="qt.xml#PenStyle-enum">Qt::CustomDashLine</db:link>.</db:para>
<db:note>
<db:para>This function resets the dash offset to zero.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#style">style</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#pen-style">Pen Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidth">
<db:title>void QPen::setWidth(int <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWidth(int width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen width to the given <db:code role="parameter">width</db:code> in pixels with integer precision.</db:para>
<db:para>A line width of zero indicates a cosmetic pen. This means that the pen width is always drawn one pixel wide, independent of the <db:link xlink:href="qpainter.xml#coordinate-transformations">transformation</db:link> set on the painter.</db:para>
<db:para>Setting a pen width with a negative value is not supported.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setWidthF">setWidthF</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidthF">
<db:title>void QPen::setWidthF(qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWidthF</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWidthF(qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen width to the given <db:code role="parameter">width</db:code> in pixels with floating point precision.</db:para>
<db:para>A line width of zero indicates a cosmetic pen. This means that the pen width is always drawn one pixel wide, independent of the <db:link xlink:href="qpainter.xml#coordinate-transformations">transformation</db:link> on the painter.</db:para>
<db:para>Setting a pen width with a negative value is not supported.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setWidth">setWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#widthF">widthF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="style">
<db:title>Qt::PenStyle QPen::style() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::PenStyle</db:type>
<db:methodname>style</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::PenStyle style() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setStyle">setStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#pen-style">Pen Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QPen::swap(QPen &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QPen &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QPen &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps pen <db:code role="parameter">other</db:code> with this pen. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="width">
<db:title>int QPen::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen width with integer precision.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setWidth">setWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#widthF">widthF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widthF">
<db:title>qreal QPen::widthF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>widthF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal widthF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen width with floating point precision.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setWidthF">setWidthF</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QPen::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QPen::operator!=(const QPen &amp;<db:emphasis>pen</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QPen &amp;pen) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the pen is different from the given <db:code role="parameter">pen</db:code>; otherwise false. Two pens are different if they have different styles, widths or colors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QPen &amp;QPen::operator=(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPen &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen &amp; operator=(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the given <db:code role="parameter">pen</db:code> to this pen and returns a reference to this pen.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.2] QPen &amp;QPen::operator=(QPen &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPen &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QPen &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen &amp; operator=(QPen &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qpen.xml">QPen</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QPen::operator==(const QPen &amp;<db:emphasis>pen</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QPen &amp;pen) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the pen is equal to the given <db:code role="parameter">pen</db:code>; otherwise false. Two pens are equal if they have equal styles, widths and colors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">pen</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a pen from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">pen</db:code> and returns a reference to the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
