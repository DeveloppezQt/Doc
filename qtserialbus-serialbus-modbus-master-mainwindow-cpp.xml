<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Modbus Master example</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example implements a Modbus master application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the QtSerialBus module.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &quot;ui_mainwindow.h&quot;
#include &quot;settingsdialog.h&quot;
#include &quot;writeregistermodel.h&quot;

#include &amp;lt;QModbusTcpClient&amp;gt;
#include &amp;lt;QModbusRtuSerialMaster&amp;gt;
#include &amp;lt;QStandardItemModel&amp;gt;
#include &amp;lt;QStatusBar&amp;gt;
#include &amp;lt;QUrl&amp;gt;

enum ModbusConnection {
    Serial,
    Tcp
};

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
    , lastRequest(nullptr)
    , modbusDevice(nullptr)
{
    ui-&amp;gt;setupUi(this);

    m_settingsDialog = new SettingsDialog(this);

    initActions();

    writeModel = new WriteRegisterModel(this);
    writeModel-&amp;gt;setStartAddress(ui-&amp;gt;writeAddress-&amp;gt;value());
    writeModel-&amp;gt;setNumberOfValues(ui-&amp;gt;writeSize-&amp;gt;currentText());

    ui-&amp;gt;writeValueTable-&amp;gt;setModel(writeModel);
    ui-&amp;gt;writeValueTable-&amp;gt;hideColumn(2);
    connect(writeModel, &amp;amp;WriteRegisterModel::updateViewport, ui-&amp;gt;writeValueTable-&amp;gt;viewport(),
        static_cast&amp;lt;void (QWidget::*)()&amp;gt;(&amp;amp;QWidget::update));

    ui-&amp;gt;writeTable-&amp;gt;addItem(tr(&quot;Coils&quot;), QModbusDataUnit::Coils);
    ui-&amp;gt;writeTable-&amp;gt;addItem(tr(&quot;Discrete Inputs&quot;), QModbusDataUnit::DiscreteInputs);
    ui-&amp;gt;writeTable-&amp;gt;addItem(tr(&quot;Input Registers&quot;), QModbusDataUnit::InputRegisters);
    ui-&amp;gt;writeTable-&amp;gt;addItem(tr(&quot;Holding Registers&quot;), QModbusDataUnit::HoldingRegisters);

    ui-&amp;gt;connectType-&amp;gt;setCurrentIndex(0);
    on_connectType_currentIndexChanged(0);

    auto model = new QStandardItemModel(10, 1, this);
    for (int i = 0; i &amp;lt; 10; ++i)
        model-&amp;gt;setItem(i, new QStandardItem(QStringLiteral(&quot;%1&quot;).arg(i + 1)));
    ui-&amp;gt;writeSize-&amp;gt;setModel(model);
    ui-&amp;gt;writeSize-&amp;gt;setCurrentText(&quot;10&quot;);
    connect(ui-&amp;gt;writeSize,&amp;amp;QComboBox::currentTextChanged, writeModel,
        &amp;amp;WriteRegisterModel::setNumberOfValues);

    auto valueChanged = static_cast&amp;lt;void (QSpinBox::*)(int)&amp;gt; (&amp;amp;QSpinBox::valueChanged);
    connect(ui-&amp;gt;writeAddress, valueChanged, writeModel, &amp;amp;WriteRegisterModel::setStartAddress);
    connect(ui-&amp;gt;writeAddress, valueChanged, this, [this, model](int i) {
        int lastPossibleIndex = 0;
        const int currentIndex = ui-&amp;gt;writeSize-&amp;gt;currentIndex();
        for (int ii = 0; ii &amp;lt; 10; ++ii) {
            if (ii &amp;lt; (10 - i)) {
                lastPossibleIndex = ii;
                model-&amp;gt;item(ii)-&amp;gt;setEnabled(true);
            } else {
                model-&amp;gt;item(ii)-&amp;gt;setEnabled(false);
            }
        }
        if (currentIndex &amp;gt; lastPossibleIndex)
            ui-&amp;gt;writeSize-&amp;gt;setCurrentIndex(lastPossibleIndex);
    });
}

MainWindow::~MainWindow()
{
    if (modbusDevice)
        modbusDevice-&amp;gt;disconnectDevice();
    delete modbusDevice;

    delete ui;
}

void MainWindow::initActions()
{
    ui-&amp;gt;actionConnect-&amp;gt;setEnabled(true);
    ui-&amp;gt;actionDisconnect-&amp;gt;setEnabled(false);
    ui-&amp;gt;actionExit-&amp;gt;setEnabled(true);
    ui-&amp;gt;actionOptions-&amp;gt;setEnabled(true);

    connect(ui-&amp;gt;actionConnect, &amp;amp;QAction::triggered,
            this, &amp;amp;MainWindow::on_connectButton_clicked);
    connect(ui-&amp;gt;actionDisconnect, &amp;amp;QAction::triggered,
            this, &amp;amp;MainWindow::on_connectButton_clicked);

    connect(ui-&amp;gt;actionExit, &amp;amp;QAction::triggered, this, &amp;amp;QMainWindow::close);
    connect(ui-&amp;gt;actionOptions, &amp;amp;QAction::triggered, m_settingsDialog, &amp;amp;QDialog::show);
}

void MainWindow::on_connectType_currentIndexChanged(int index)
{
    if (modbusDevice) {
        modbusDevice-&amp;gt;disconnectDevice();
        delete modbusDevice;
        modbusDevice = nullptr;
    }

    auto type = static_cast&amp;lt;ModbusConnection&amp;gt; (index);
    if (type == Serial) {
        modbusDevice = new QModbusRtuSerialMaster(this);
    } else if (type == Tcp) {
        modbusDevice = new QModbusTcpClient(this);
        if (ui-&amp;gt;portEdit-&amp;gt;text().isEmpty())
            ui-&amp;gt;portEdit-&amp;gt;setText(QLatin1Literal(&quot;127.0.0.1:502&quot;));
    }

    connect(modbusDevice, &amp;amp;QModbusClient::errorOccurred, [this](QModbusDevice::Error) {
        statusBar()-&amp;gt;showMessage(modbusDevice-&amp;gt;errorString(), 5000);
    });

    if (!modbusDevice) {
        ui-&amp;gt;connectButton-&amp;gt;setDisabled(true);
        if (type == Serial)
            statusBar()-&amp;gt;showMessage(tr(&quot;Could not create Modbus master.&quot;), 5000);
        else
            statusBar()-&amp;gt;showMessage(tr(&quot;Could not create Modbus client.&quot;), 5000);
    } else {
        connect(modbusDevice, &amp;amp;QModbusClient::stateChanged,
                this, &amp;amp;MainWindow::onStateChanged);
    }
}

void MainWindow::on_connectButton_clicked()
{
    if (!modbusDevice)
        return;

    statusBar()-&amp;gt;clearMessage();
    if (modbusDevice-&amp;gt;state() != QModbusDevice::ConnectedState) {
        if (static_cast&amp;lt;ModbusConnection&amp;gt; (ui-&amp;gt;connectType-&amp;gt;currentIndex()) == Serial) {
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialPortNameParameter,
                ui-&amp;gt;portEdit-&amp;gt;text());
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialParityParameter,
                m_settingsDialog-&amp;gt;settings().parity);
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialBaudRateParameter,
                m_settingsDialog-&amp;gt;settings().baud);
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialDataBitsParameter,
                m_settingsDialog-&amp;gt;settings().dataBits);
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialStopBitsParameter,
                m_settingsDialog-&amp;gt;settings().stopBits);
        } else {
            const QUrl url = QUrl::fromUserInput(ui-&amp;gt;portEdit-&amp;gt;text());
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::NetworkPortParameter, url.port());
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::NetworkAddressParameter, url.host());
        }
        modbusDevice-&amp;gt;setTimeout(m_settingsDialog-&amp;gt;settings().responseTime);
        modbusDevice-&amp;gt;setNumberOfRetries(m_settingsDialog-&amp;gt;settings().numberOfRetries);
        if (!modbusDevice-&amp;gt;connectDevice()) {
            statusBar()-&amp;gt;showMessage(tr(&quot;Connect failed: &quot;) + modbusDevice-&amp;gt;errorString(), 5000);
        } else {
            ui-&amp;gt;actionConnect-&amp;gt;setEnabled(false);
            ui-&amp;gt;actionDisconnect-&amp;gt;setEnabled(true);
        }
    } else {
        modbusDevice-&amp;gt;disconnectDevice();
        ui-&amp;gt;actionConnect-&amp;gt;setEnabled(true);
        ui-&amp;gt;actionDisconnect-&amp;gt;setEnabled(false);
    }
}

void MainWindow::onStateChanged(int state)
{
    bool connected = (state != QModbusDevice::UnconnectedState);
    ui-&amp;gt;actionConnect-&amp;gt;setEnabled(!connected);
    ui-&amp;gt;actionDisconnect-&amp;gt;setEnabled(connected);

    if (state == QModbusDevice::UnconnectedState)
        ui-&amp;gt;connectButton-&amp;gt;setText(tr(&quot;Connect&quot;));
    else if (state == QModbusDevice::ConnectedState)
        ui-&amp;gt;connectButton-&amp;gt;setText(tr(&quot;Disconnect&quot;));
}

void MainWindow::on_readButton_clicked()
{
    if (!modbusDevice)
        return;
    ui-&amp;gt;readValue-&amp;gt;clear();
    statusBar()-&amp;gt;clearMessage();

    if (auto *reply = modbusDevice-&amp;gt;sendReadRequest(readRequest(), ui-&amp;gt;serverEdit-&amp;gt;value())) {
        if (!reply-&amp;gt;isFinished())
            connect(reply, &amp;amp;QModbusReply::finished, this, &amp;amp;MainWindow::readReady);
        else
            delete reply; // broadcast replies return immediately
    } else {
        statusBar()-&amp;gt;showMessage(tr(&quot;Read error: &quot;) + modbusDevice-&amp;gt;errorString(), 5000);
    }
}

void MainWindow::readReady()
{
    auto reply = qobject_cast&amp;lt;QModbusReply *&amp;gt;(sender());
    if (!reply)
        return;

    if (reply-&amp;gt;error() == QModbusDevice::NoError) {
        const QModbusDataUnit unit = reply-&amp;gt;result();
        for (uint i = 0; i &amp;lt; unit.valueCount(); i++) {
            const QString entry = tr(&quot;Address: %1, Value: %2&quot;).arg(unit.startAddress() + i)
                                     .arg(QString::number(unit.value(i),
                                          unit.registerType() &amp;lt;= QModbusDataUnit::Coils ? 10 : 16));
            ui-&amp;gt;readValue-&amp;gt;addItem(entry);
        }
    } else if (reply-&amp;gt;error() == QModbusDevice::ProtocolError) {
        statusBar()-&amp;gt;showMessage(tr(&quot;Read response error: %1 (Mobus exception: 0x%2)&quot;).
                                    arg(reply-&amp;gt;errorString()).
                                    arg(reply-&amp;gt;rawResult().exceptionCode(), -1, 16), 5000);
    } else {
        statusBar()-&amp;gt;showMessage(tr(&quot;Read response error: %1 (code: 0x%2)&quot;).
                                    arg(reply-&amp;gt;errorString()).
                                    arg(reply-&amp;gt;error(), -1, 16), 5000);
    }

    reply-&amp;gt;deleteLater();
}

void MainWindow::on_writeButton_clicked()
{
    if (!modbusDevice)
        return;
    statusBar()-&amp;gt;clearMessage();

    QModbusDataUnit writeUnit = writeRequest();
    QModbusDataUnit::RegisterType table = writeUnit.registerType();
    for (uint i = 0; i &amp;lt; writeUnit.valueCount(); i++) {
        if (table == QModbusDataUnit::Coils)
            writeUnit.setValue(i, writeModel-&amp;gt;m_coils[i + writeUnit.startAddress()]);
        else
            writeUnit.setValue(i, writeModel-&amp;gt;m_holdingRegisters[i + writeUnit.startAddress()]);
    }

    if (auto *reply = modbusDevice-&amp;gt;sendWriteRequest(writeUnit, ui-&amp;gt;serverEdit-&amp;gt;value())) {
        if (!reply-&amp;gt;isFinished()) {
            connect(reply, &amp;amp;QModbusReply::finished, this, [this, reply]() {
                if (reply-&amp;gt;error() == QModbusDevice::ProtocolError) {
                    statusBar()-&amp;gt;showMessage(tr(&quot;Write response error: %1 (Mobus exception: 0x%2)&quot;)
                        .arg(reply-&amp;gt;errorString()).arg(reply-&amp;gt;rawResult().exceptionCode(), -1, 16),
                        5000);
                } else if (reply-&amp;gt;error() != QModbusDevice::NoError) {
                    statusBar()-&amp;gt;showMessage(tr(&quot;Write response error: %1 (code: 0x%2)&quot;).
                        arg(reply-&amp;gt;errorString()).arg(reply-&amp;gt;error(), -1, 16), 5000);
                }
                reply-&amp;gt;deleteLater();
            });
        } else {
            // broadcast replies return immediately
            reply-&amp;gt;deleteLater();
        }
    } else {
        statusBar()-&amp;gt;showMessage(tr(&quot;Write error: &quot;) + modbusDevice-&amp;gt;errorString(), 5000);
    }
}

void MainWindow::on_readWriteButton_clicked()
{
    if (!modbusDevice)
        return;
    ui-&amp;gt;readValue-&amp;gt;clear();
    statusBar()-&amp;gt;clearMessage();

    QModbusDataUnit writeUnit = writeRequest();
    QModbusDataUnit::RegisterType table = writeUnit.registerType();
    for (uint i = 0; i &amp;lt; writeUnit.valueCount(); i++) {
        if (table == QModbusDataUnit::Coils)
            writeUnit.setValue(i, writeModel-&amp;gt;m_coils[i + writeUnit.startAddress()]);
        else
            writeUnit.setValue(i, writeModel-&amp;gt;m_holdingRegisters[i + writeUnit.startAddress()]);
    }

    if (auto *reply = modbusDevice-&amp;gt;sendReadWriteRequest(readRequest(), writeUnit,
        ui-&amp;gt;serverEdit-&amp;gt;value())) {
        if (!reply-&amp;gt;isFinished())
            connect(reply, &amp;amp;QModbusReply::finished, this, &amp;amp;MainWindow::readReady);
        else
            delete reply; // broadcast replies return immediately
    } else {
        statusBar()-&amp;gt;showMessage(tr(&quot;Read error: &quot;) + modbusDevice-&amp;gt;errorString(), 5000);
    }
}

void MainWindow::on_writeTable_currentIndexChanged(int index)
{
    const bool coilsOrHolding = index == 0 || index == 3;
    if (coilsOrHolding) {
        ui-&amp;gt;writeValueTable-&amp;gt;setColumnHidden(1, index != 0);
        ui-&amp;gt;writeValueTable-&amp;gt;setColumnHidden(2, index != 3);
        ui-&amp;gt;writeValueTable-&amp;gt;resizeColumnToContents(0);
    }

    ui-&amp;gt;readWriteButton-&amp;gt;setEnabled(index == 3);
    ui-&amp;gt;writeButton-&amp;gt;setEnabled(coilsOrHolding);
    ui-&amp;gt;writeGroupBox-&amp;gt;setEnabled(coilsOrHolding);
}

QModbusDataUnit MainWindow::readRequest() const
{
    const auto table =
        static_cast&amp;lt;QModbusDataUnit::RegisterType&amp;gt; (ui-&amp;gt;writeTable-&amp;gt;currentData().toInt());

    int startAddress = ui-&amp;gt;readAddress-&amp;gt;value();
    Q_ASSERT(startAddress &amp;gt;= 0 &amp;amp;&amp;amp; startAddress &amp;lt; 10);

    // do not go beyond 10 entries
    int numberOfEntries = qMin(ui-&amp;gt;readSize-&amp;gt;currentText().toInt(), 10 - startAddress);
    return QModbusDataUnit(table, startAddress, numberOfEntries);
}

QModbusDataUnit MainWindow::writeRequest() const
{
    const auto table =
        static_cast&amp;lt;QModbusDataUnit::RegisterType&amp;gt; (ui-&amp;gt;writeTable-&amp;gt;currentData().toInt());

    int startAddress = ui-&amp;gt;writeAddress-&amp;gt;value();
    Q_ASSERT(startAddress &amp;gt;= 0 &amp;amp;&amp;amp; startAddress &amp;lt; 10);

    // do not go beyond 10 entries
    int numberOfEntries = qMin(ui-&amp;gt;writeSize-&amp;gt;currentText().toInt(), 10 - startAddress);
    return QModbusDataUnit(table, startAddress, numberOfEntries);
}

</db:programlisting>
</db:article>
