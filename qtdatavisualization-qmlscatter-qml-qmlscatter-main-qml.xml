<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 2 Scatter Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="qml-qtdatavisualization-scatter3d.xml">Scatter3D</db:link> in a QML application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.1
import QtQuick.Layouts 1.0
import QtDataVisualization 1.0
import &quot;.&quot;

Rectangle {
    id: mainView
    width: 500
    height: 500

    Data {
        id: seriesData
    }

    Theme3D {
        id: themeIsabelle
        type: Theme3D.ThemeIsabelle
        font.family: &quot;Lucida Handwriting&quot;
        font.pointSize: 40
    }

    Theme3D {
        id: themeArmyBlue
        type: Theme3D.ThemeArmyBlue
    }

    Item {
        id: dataView
        anchors.bottom: parent.bottom
        width: parent.width
        height: parent.height - buttonLayout.height

        Scatter3D {
            id: scatterGraph
            width: dataView.width
            height: dataView.height
            theme: themeIsabelle
            shadowQuality: AbstractGraph3D.ShadowQualitySoftLow
            axisX.segmentCount: 3
            axisX.subSegmentCount: 2
            axisX.labelFormat: &quot;%.2f&quot;
            axisZ.segmentCount: 2
            axisZ.subSegmentCount: 2
            axisZ.labelFormat: &quot;%.2f&quot;
            axisY.segmentCount: 2
            axisY.subSegmentCount: 2
            axisY.labelFormat: &quot;%.2f&quot;
            Scatter3DSeries {
                id: scatterSeries
                itemLabelFormat: &quot;Series 1: X:@xLabel Y:@yLabel Z:@zLabel&quot;

                ItemModelScatterDataProxy {
                    itemModel: seriesData.model
                    xPosRole: &quot;xPos&quot;
                    yPosRole: &quot;yPos&quot;
                    zPosRole: &quot;zPos&quot;
                }
            }

            Scatter3DSeries {
                id: scatterSeriesTwo
                itemLabelFormat: &quot;Series 2: X:@xLabel Y:@yLabel Z:@zLabel&quot;
                itemSize: 0.1
                mesh: Abstract3DSeries.MeshCube

                ItemModelScatterDataProxy {
                    itemModel: seriesData.modelTwo
                    xPosRole: &quot;xPos&quot;
                    yPosRole: &quot;yPos&quot;
                    zPosRole: &quot;zPos&quot;
                }
            }
            Scatter3DSeries {
                id: scatterSeriesThree
                itemLabelFormat: &quot;Series 3: X:@xLabel Y:@yLabel Z:@zLabel&quot;
                itemSize: 0.2
                mesh: Abstract3DSeries.MeshMinimal

                ItemModelScatterDataProxy {
                    itemModel: seriesData.modelThree
                    xPosRole: &quot;xPos&quot;
                    yPosRole: &quot;yPos&quot;
                    zPosRole: &quot;zPos&quot;
                }
            }
        }
    }

    RowLayout {
        id: buttonLayout
        Layout.minimumHeight: cameraToggle.height
        width: parent.width
        anchors.left: parent.left
        spacing: 0
        NewButton {
            id: shadowToggle
            Layout.fillHeight: true
            Layout.fillWidth: true
            text: scatterGraph.shadowsSupported ? &quot;Hide Shadows&quot; : &quot;Shadows not supported&quot;
            enabled: scatterGraph.shadowsSupported
            onClicked: {
                if (scatterGraph.shadowQuality === AbstractGraph3D.ShadowQualityNone) {
                    scatterGraph.shadowQuality = AbstractGraph3D.ShadowQualitySoftLow;
                    text = &quot;Hide Shadows&quot;;
                } else {
                    scatterGraph.shadowQuality = AbstractGraph3D.ShadowQualityNone;
                    text = &quot;Show Shadows&quot;;
                }
            }
        }

        NewButton {
            id: smoothToggle
            Layout.fillHeight: true
            Layout.fillWidth: true
            text: &quot;Use Smooth for Series One&quot;
            onClicked: {
                if (scatterSeries.meshSmooth === false) {
                    text = &quot;Use Flat for Series One&quot;;
                    scatterSeries.meshSmooth = true;
                } else {
                    text = &quot;Use Smooth for Series One&quot;
                    scatterSeries.meshSmooth = false;
                }
            }
        }

        NewButton {
            id: cameraToggle
            Layout.fillHeight: true
            Layout.fillWidth: true
            text: &quot;Change Camera Placement&quot;
            onClicked: {
                if (scatterGraph.scene.activeCamera.cameraPreset === Camera3D.CameraPresetFront) {
                    scatterGraph.scene.activeCamera.cameraPreset =
                            Camera3D.CameraPresetIsometricRightHigh;
                } else {
                    scatterGraph.scene.activeCamera.cameraPreset = Camera3D.CameraPresetFront;
                }
            }
        }

        NewButton {
            id: themeToggle
            Layout.fillHeight: true
            Layout.fillWidth: true
            text: &quot;Change Theme&quot;
            onClicked: {
                if (scatterGraph.theme.type === Theme3D.ThemeArmyBlue) {
                    scatterGraph.theme = themeIsabelle
                } else {
                    scatterGraph.theme = themeArmyBlue
                }
                if (scatterGraph.theme.backgroundEnabled === true) {
                    backgroundToggle.text = &quot;Hide Background&quot;;
                } else {
                    backgroundToggle.text = &quot;Show Background&quot;;
                }
            }
        }

        NewButton {
            id: backgroundToggle
            Layout.fillHeight: true
            Layout.fillWidth: true
            text: &quot;Hide Background&quot;
            onClicked: {
                if (scatterGraph.theme.backgroundEnabled === true) {
                    scatterGraph.theme.backgroundEnabled = false;
                    text = &quot;Show Background&quot;;
                } else {
                    scatterGraph.theme.backgroundEnabled = true;
                    text = &quot;Hide Background&quot;;
                }
            }
        }

        NewButton {
            id: exitButton
            Layout.fillHeight: true
            Layout.fillWidth: true
            text: &quot;Quit&quot;
            onClicked: Qt.quit(0);
        }
    }
}

</db:programlisting>
</db:article>
