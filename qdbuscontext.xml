<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusContext Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbuscontext.xml">QDBusContext</db:link> class allows slots to determine the D-Bus context of the calls.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusContext</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When a slot is called in an object due to a signal delivery or due to a remote method call, it is sometimes necessary to know the context in which that happened. In particular, if the slot determines that it wants to send the reply at a later opportunity or if it wants to reply with an error, the context is needed.</db:para>
<db:para>The <db:link xlink:href="qdbuscontext.xml">QDBusContext</db:link> class is an alternative to accessing the context that doesn't involve modifying the code generated by the <db:link xlink:href="qdbusxml2cpp.xml">Qt D-Bus XML compiler (qdbusxml2cpp)</db:link>.</db:para>
<db:para><db:link xlink:href="qdbuscontext.xml">QDBusContext</db:link> is used by subclassing it from the objects being exported using <db:link xlink:href="qdbusconnection.xml#registerObject">QDBusConnection::registerObject</db:link>(). The following example illustrates the usage:</db:para>
<db:programlisting language="cpp">class MyObject: public QObject,
                protected QDBusContext
{
    Q_OBJECT
    QDBusConnection conn;
    QDBusMessage msg;

...

protected slots:
    void process();
public slots:
    void methodWithError();
    QString methodWithDelayedReply();
};

void MyObject::methodWithError()
{
    sendErrorReply(QDBusError::NotSupported,
                   &quot;The method call 'methodWithError()' is not supported&quot;);
}

QString MyObject::methodWithDelayedReply()
{
    conn = connection();
    msg = message();
    setDelayedReply(true);
    QMetaObject::invokeMethod(this, &quot;process&quot;, Qt::QueuedConnection);
    return QString();
}
</db:programlisting>
<db:para>The example illustrates the two typical uses, that of sending error replies and that of delayed replies.</db:para>
<db:para>Note: do not subclass <db:link xlink:href="qdbuscontext.xml">QDBusContext</db:link> and <db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link> at the same time. <db:link xlink:href="qdbuscontext.xml">QDBusContext</db:link> should appear in the real object, not the adaptor. If it's necessary from the adaptor code to determine the context, use a public inheritance and access the functions via <db:link xlink:href="qobject.xml#parent">QObject::parent</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusContext">
<db:title>QDBusContext::QDBusContext()</db:title>
<db:para>Constructs an empty <db:link xlink:href="qdbuscontext.xml">QDBusContext</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QDBusContext">
<db:title>[noexcept] QDBusContext::~QDBusContext()</db:title>
<db:para>An empty destructor.</db:para>
</db:section>
<db:section xml:id="calledFromDBus">
<db:title>bool QDBusContext::calledFromDBus() const</db:title>
<db:para>Returns <db:code>true</db:code> if we are processing a D-Bus call. If this function returns <db:code>true</db:code>, the rest of the functions in this class are available.</db:para>
<db:para>Accessing those functions when this function returns <db:code>false</db:code> is undefined and may lead to crashes.</db:para>
</db:section>
<db:section xml:id="connection">
<db:title>QDBusConnection QDBusContext::connection() const</db:title>
<db:para>Returns the connection from which this call was received.</db:para>
</db:section>
<db:section xml:id="isDelayedReply">
<db:title>bool QDBusContext::isDelayedReply() const</db:title>
<db:para>Returns <db:code>true</db:code> if this call will have a delayed reply.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuscontext.xml#setDelayedReply">setDelayedReply</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="message">
<db:title>const QDBusMessage &amp;QDBusContext::message() const</db:title>
<db:para>Returns the message that generated this call.</db:para>
</db:section>
<db:section xml:id="sendErrorReply">
<db:title>void QDBusContext::sendErrorReply(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>msg</db:emphasis> = QString()) const</db:title>
<db:para>Sends an error <db:code role="parameter">name</db:code> as a reply to the caller. The optional <db:code role="parameter">msg</db:code> parameter is a human-readable text explaining the failure.</db:para>
<db:para>If an error is sent, the return value and any output parameters from the called slot will be ignored by Qt D-Bus.</db:para>
</db:section>
<db:section xml:id="sendErrorReply-1">
<db:title>void QDBusContext::sendErrorReply(QDBusError::ErrorType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>msg</db:emphasis> = QString()) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends an error <db:code role="parameter">type</db:code> as a reply to the caller. The optional <db:code role="parameter">msg</db:code> parameter is a human-readable text explaining the failure.</db:para>
<db:para>If an error is sent, the return value and any output parameters from the called slot will be ignored by Qt D-Bus.</db:para>
</db:section>
<db:section xml:id="setDelayedReply">
<db:title>void QDBusContext::setDelayedReply(bool <db:emphasis>enable</db:emphasis>) const</db:title>
<db:para>Sets whether this call will have a delayed reply or not.</db:para>
<db:para>If <db:code role="parameter">enable</db:code> is false, Qt D-Bus will automatically generate a reply back to the caller, if needed, as soon as the called slot returns.</db:para>
<db:para>If <db:code role="parameter">enable</db:code> is true, Qt D-Bus will not generate automatic replies. It will also ignore the return value from the slot and any output parameters. Instead, the called object is responsible for storing the incoming message and send a reply or error at a later time.</db:para>
<db:para>Failing to send a reply will result in an automatic timeout error being generated by D-Bus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuscontext.xml#isDelayedReply">isDelayedReply</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
