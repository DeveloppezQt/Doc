<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Undo Framework Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to implement undo/redo functionality with the Qt undo framework.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;mainwindow.h&quot;
#include &quot;diagramscene.h&quot;
#include &quot;diagramitem.h&quot;
#include &quot;commands.h&quot;

MainWindow::MainWindow()
{
    undoStack = new QUndoStack(this);

    createActions();
    createMenus();

    createUndoView();

    diagramScene = new DiagramScene();
    QBrush pixmapBrush(QPixmap(&quot;:/images/cross.png&quot;).scaled(30, 30));
    diagramScene-&gt;setBackgroundBrush(pixmapBrush);
    diagramScene-&gt;setSceneRect(QRect(0, 0, 500, 500));

    connect(diagramScene, SIGNAL(itemMoved(DiagramItem*,QPointF)),
            this, SLOT(itemMoved(DiagramItem*,QPointF)));

    setWindowTitle(&quot;Undo Framework&quot;);
    QGraphicsView *view = new QGraphicsView(diagramScene);
    setCentralWidget(view);
    resize(700, 500);
}

void MainWindow::createUndoView()
{
    undoView = new QUndoView(undoStack);
    undoView-&gt;setWindowTitle(tr(&quot;Command List&quot;));
    undoView-&gt;show();
    undoView-&gt;setAttribute(Qt::WA_QuitOnClose, false);
}

void MainWindow::createActions()
{
    deleteAction = new QAction(tr(&quot;&amp;Delete Item&quot;), this);
    deleteAction-&gt;setShortcut(tr(&quot;Del&quot;));
    connect(deleteAction, SIGNAL(triggered()), this, SLOT(deleteItem()));

    addBoxAction = new QAction(tr(&quot;Add &amp;Box&quot;), this);
    addBoxAction-&gt;setShortcut(tr(&quot;Ctrl+O&quot;));
    connect(addBoxAction, SIGNAL(triggered()), this, SLOT(addBox()));

    addTriangleAction = new QAction(tr(&quot;Add &amp;Triangle&quot;), this);
    addTriangleAction-&gt;setShortcut(tr(&quot;Ctrl+T&quot;));
    connect(addTriangleAction, SIGNAL(triggered()), this, SLOT(addTriangle()));

    undoAction = undoStack-&gt;createUndoAction(this, tr(&quot;&amp;Undo&quot;));
    undoAction-&gt;setShortcuts(QKeySequence::Undo);

    redoAction = undoStack-&gt;createRedoAction(this, tr(&quot;&amp;Redo&quot;));
    redoAction-&gt;setShortcuts(QKeySequence::Redo);

    exitAction = new QAction(tr(&quot;E&amp;xit&quot;), this);
    exitAction-&gt;setShortcuts(QKeySequence::Quit);
    connect(exitAction, SIGNAL(triggered()), this, SLOT(close()));

    aboutAction = new QAction(tr(&quot;&amp;About&quot;), this);
    QList&lt;QKeySequence&gt; aboutShortcuts;
    aboutShortcuts &lt;&lt; tr(&quot;Ctrl+A&quot;) &lt;&lt; tr(&quot;Ctrl+B&quot;);
    aboutAction-&gt;setShortcuts(aboutShortcuts);
    connect(aboutAction, SIGNAL(triggered()), this, SLOT(about()));
}

void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(exitAction);

    editMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Edit&quot;));
    editMenu-&gt;addAction(undoAction);
    editMenu-&gt;addAction(redoAction);
    editMenu-&gt;addSeparator();
    editMenu-&gt;addAction(deleteAction);
    connect(editMenu, SIGNAL(aboutToShow()),
            this, SLOT(itemMenuAboutToShow()));
    connect(editMenu, SIGNAL(aboutToHide()),
            this, SLOT(itemMenuAboutToHide()));

    itemMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Item&quot;));
    itemMenu-&gt;addAction(addBoxAction);
    itemMenu-&gt;addAction(addTriangleAction);

    helpMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;About&quot;));
    helpMenu-&gt;addAction(aboutAction);
}

void MainWindow::itemMoved(DiagramItem *movedItem,
                           const QPointF &amp;oldPosition)
{
    undoStack-&gt;push(new MoveCommand(movedItem, oldPosition));
}

void MainWindow::deleteItem()
{
    if (diagramScene-&gt;selectedItems().isEmpty())
        return;

    QUndoCommand *deleteCommand = new DeleteCommand(diagramScene);
    undoStack-&gt;push(deleteCommand);
}

void MainWindow::itemMenuAboutToHide()
{
    deleteAction-&gt;setEnabled(true);
}

void MainWindow::itemMenuAboutToShow()
{
    deleteAction-&gt;setEnabled(!diagramScene-&gt;selectedItems().isEmpty());
}

void MainWindow::addBox()
{
    QUndoCommand *addCommand = new AddCommand(DiagramItem::Box, diagramScene);
    undoStack-&gt;push(addCommand);
}

void MainWindow::addTriangle()
{
    QUndoCommand *addCommand = new AddCommand(DiagramItem::Triangle,
                                              diagramScene);
    undoStack-&gt;push(addCommand);
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Undo&quot;),
                       tr(&quot;The &lt;b&gt;Undo&lt;/b&gt; example demonstrates how to &quot;
                          &quot;use Qt's undo framework.&quot;));
}

</db:programlisting>
</db:article>
