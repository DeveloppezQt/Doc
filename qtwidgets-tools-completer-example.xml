<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Completer Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Completer example shows how to provide string-completion facilities for an input widget based on data provided by a model.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/completer-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example uses a custom item model, FileSystemModel, and a <db:link xlink:href="qcompleter.xml">QCompleter</db:link> object. <db:link xlink:href="qcompleter.xml">QCompleter</db:link> is a class that provides completions based on an item model. The type of model, the completion mode, and the case sensitivity can be selected using combo boxes.</db:para>
<db:section xml:id="the-resource-file">
<db:title>The Resource File</db:title>
<db:para>The Completer example requires a resource file in order to store the <db:emphasis>countries.txt</db:emphasis> and <db:emphasis>words.txt</db:emphasis>. The resource file contains the following code:</db:para>
<db:programlisting language="cpp">&amp;lt;!DOCTYPE RCC&amp;gt;&amp;lt;RCC version=&quot;1.0&quot;&amp;gt;
&amp;lt;qresource prefix=&quot;/&quot;&amp;gt;
   &amp;lt;file&amp;gt;resources/countries.txt&amp;lt;/file&amp;gt;
   &amp;lt;file&amp;gt;resources/wordlist.txt&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;
&amp;lt;/RCC&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="filesystemmodel-class-definition">
<db:title>FileSystemModel Class Definition</db:title>
<db:para>The FileSystemModel class is a subclass of <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>, which provides a data model for the local filesystem.</db:para>
<db:programlisting language="cpp">class FileSystemModel : public QFileSystemModel
{
public:
    FileSystemModel(QObject *parent = nullptr);
    QVariant data(const QModelIndex &amp;amp;index, int role = Qt::DisplayRole) const override;
};
</db:programlisting>
<db:para>This class only has a constructor and a data() function as it is only created to enable data() to return the entire file path for the display role, unlike <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>'s data() function that only returns the folder and not the drive label. This is further explained in FileSystemModel's implementation.</db:para>
</db:section>
<db:section xml:id="filesystemmodel-class-implementation">
<db:title>FileSystemModel Class Implementation</db:title>
<db:para>The constructor for the FileSystemModel class is used to pass <db:code role="parameter">parent</db:code> to <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>.</db:para>
<db:programlisting language="cpp">FileSystemModel::FileSystemModel(QObject *parent)
    : QFileSystemModel(parent)
{
}
</db:programlisting>
<db:para>As mentioned earlier, the data() function is reimplemented in order to get it to return the entire file parth for the display role. For example, with a <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>, you will see &quot;Program Files&quot; in the view. However, with FileSystemModel, you will see &quot;C:\Program Files&quot;.</db:para>
<db:programlisting language="cpp">QVariant FileSystemModel::data(const QModelIndex &amp;amp;index, int role) const
{
    if (role == Qt::DisplayRole &amp;amp;&amp;amp; index.column() == 0) {
        QString path  = QDir::toNativeSeparators(filePath(index));
        if (path.endsWith(QDir::separator()))
            path.chop(1);
        return path;
    }

    return QFileSystemModel::data(index, role);
}
</db:programlisting>
<db:para>The <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link>, which <db:link xlink:href="qcompleter.xml">QCompleter</db:link> uses to look for matches, is left unchanged.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para>The MainWindow class is a subclass of <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> and implements five private slots - about(), changeCase(), changeMode(), changeModel(), and changeMaxVisible().</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);

private slots:
    void about();
    void changeCase(int);
    void changeMode(int);
    void changeModel();
    void changeMaxVisible(int);
</db:programlisting>
<db:para>Within the MainWindow class, we have two private functions: createMenu() and modelFromFile(). We also declare the private widgets needed - three <db:link xlink:href="qcombobox.xml">QComboBox</db:link> objects, a <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>, a <db:link xlink:href="qcompleter.xml">QCompleter</db:link>, a <db:link xlink:href="qlabel.xml">QLabel</db:link>, and a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>.</db:para>
<db:programlisting language="cpp">private:
    void createMenu();
    QAbstractItemModel *modelFromFile(const QString &amp;amp;fileName);

    QComboBox *caseCombo = nullptr;
    QComboBox *modeCombo = nullptr;
    QComboBox *modelCombo = nullptr;
    QSpinBox *maxVisibleSpinBox = nullptr;
    QCheckBox *wrapCheckBox = nullptr;
    QCompleter *completer = nullptr;
    QLabel *contentsLabel = nullptr;
    QLineEdit *lineEdit = nullptr;
};
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:para>The constructor of MainWindow constructs a MainWindow with a parent widget and initializes the private members. The createMenu() function is then invoked.</db:para>
<db:para>We set up three <db:link xlink:href="qcombobox.xml">QComboBox</db:link> objects, modelComb, modeCombo and caseCombo. By default, the modelCombo is set to <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>, the modeCombo is set to &quot;Filtered Popup&quot; and the caseCombo is set to &quot;Case Insensitive&quot;.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    createMenu();

    QWidget *centralWidget = new QWidget;

    QLabel *modelLabel = new QLabel;
    modelLabel-&amp;gt;setText(tr(&quot;Model&quot;));

    modelCombo = new QComboBox;
    modelCombo-&amp;gt;addItem(tr(&quot;QFileSystemModel&quot;));
    modelCombo-&amp;gt;addItem(tr(&quot;QFileSystemModel that shows full path&quot;));
    modelCombo-&amp;gt;addItem(tr(&quot;Country list&quot;));
    modelCombo-&amp;gt;addItem(tr(&quot;Word list&quot;));
    modelCombo-&amp;gt;setCurrentIndex(0);

    QLabel *modeLabel = new QLabel;
    modeLabel-&amp;gt;setText(tr(&quot;Completion Mode&quot;));
    modeCombo = new QComboBox;
    modeCombo-&amp;gt;addItem(tr(&quot;Inline&quot;));
    modeCombo-&amp;gt;addItem(tr(&quot;Filtered Popup&quot;));
    modeCombo-&amp;gt;addItem(tr(&quot;Unfiltered Popup&quot;));
    modeCombo-&amp;gt;setCurrentIndex(1);

    QLabel *caseLabel = new QLabel;
    caseLabel-&amp;gt;setText(tr(&quot;Case Sensitivity&quot;));
    caseCombo = new QComboBox;
    caseCombo-&amp;gt;addItem(tr(&quot;Case Insensitive&quot;));
    caseCombo-&amp;gt;addItem(tr(&quot;Case Sensitive&quot;));
    caseCombo-&amp;gt;setCurrentIndex(0);
</db:programlisting>
<db:para>The maxVisibleSpinBox is created and determines the number of visible item in the completer</db:para>
<db:para>The wrapCheckBox is then set up. This checkBox determines if the completer's <db:link xlink:href="qcompleter.xml#wrapAround-prop">setWrapAround</db:link>() property is enabled or disabled.</db:para>
<db:programlisting language="cpp">    QLabel *maxVisibleLabel = new QLabel;
    maxVisibleLabel-&amp;gt;setText(tr(&quot;Max Visible Items&quot;));
    maxVisibleSpinBox = new QSpinBox;
    maxVisibleSpinBox-&amp;gt;setRange(3,25);
    maxVisibleSpinBox-&amp;gt;setValue(10);

    wrapCheckBox = new QCheckBox;
    wrapCheckBox-&amp;gt;setText(tr(&quot;Wrap around completions&quot;));
    wrapCheckBox-&amp;gt;setChecked(true);
</db:programlisting>
<db:para>We instantiate contentsLabel and set its size policy to <db:link xlink:href="qsizepolicy.xml#Policy-enum">fixed</db:link>. The combo boxes' <db:link xlink:href="qcombobox.xml#activated">activated</db:link>() signals are then connected to their respective slots.</db:para>
<db:programlisting language="cpp">    contentsLabel = new QLabel;
    contentsLabel-&amp;gt;setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);

    connect(modelCombo, &amp;amp;QComboBox::activated,
            this, &amp;amp;MainWindow::changeModel);
    connect(modeCombo, &amp;amp;QComboBox::activated,
            this, &amp;amp;MainWindow::changeMode);
    connect(caseCombo, &amp;amp;QComboBox::activated,
            this, &amp;amp;MainWindow::changeCase);
    connect(maxVisibleSpinBox, &amp;amp;QSpinBox::valueChanged,
            this, &amp;amp;MainWindow::changeMaxVisible);
</db:programlisting>
<db:para>The lineEdit is set up and then we arrange all the widgets using a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>. The changeModel() function is called, to initialize the completer.</db:para>
<db:programlisting language="cpp">    lineEdit = new QLineEdit;

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(modelLabel, 0, 0); layout-&amp;gt;addWidget(modelCombo, 0, 1);
    layout-&amp;gt;addWidget(modeLabel, 1, 0);  layout-&amp;gt;addWidget(modeCombo, 1, 1);
    layout-&amp;gt;addWidget(caseLabel, 2, 0);  layout-&amp;gt;addWidget(caseCombo, 2, 1);
    layout-&amp;gt;addWidget(maxVisibleLabel, 3, 0); layout-&amp;gt;addWidget(maxVisibleSpinBox, 3, 1);
    layout-&amp;gt;addWidget(wrapCheckBox, 4, 0);
    layout-&amp;gt;addWidget(contentsLabel, 5, 0, 1, 2);
    layout-&amp;gt;addWidget(lineEdit, 6, 0, 1, 2);
    centralWidget-&amp;gt;setLayout(layout);
    setCentralWidget(centralWidget);

    changeModel();

    setWindowTitle(tr(&quot;Completer&quot;));
    lineEdit-&amp;gt;setFocus();
}
</db:programlisting>
<db:para>The createMenu() function is used to instantiate the <db:link xlink:href="qaction.xml">QAction</db:link> objects needed to fill the fileMenu and helpMenu. The actions' <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signals are connected to their respective slots.</db:para>
<db:programlisting language="cpp">void MainWindow::createMenu()
{
    QAction *exitAction = new QAction(tr(&quot;Exit&quot;), this);
    QAction *aboutAct = new QAction(tr(&quot;About&quot;), this);
    QAction *aboutQtAct = new QAction(tr(&quot;About Qt&quot;), this);

    connect(exitAction, &amp;amp;QAction::triggered, qApp, &amp;amp;QApplication::quit);
    connect(aboutAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::about);
    connect(aboutQtAct, &amp;amp;QAction::triggered, qApp, &amp;amp;QApplication::aboutQt);

    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;File&quot;));
    fileMenu-&amp;gt;addAction(exitAction);

    QMenu *helpMenu = menuBar()-&amp;gt;addMenu(tr(&quot;About&quot;));
    helpMenu-&amp;gt;addAction(aboutAct);
    helpMenu-&amp;gt;addAction(aboutQtAct);
}
</db:programlisting>
<db:para>The modelFromFile() function accepts the <db:code role="parameter">fileName</db:code> of a file and processes it depending on its contents.</db:para>
<db:para>We first validate the file to ensure that it can be opened in QFile::ReadOnly mode. If this is unsuccessful, the function returns an empty <db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link>.</db:para>
<db:programlisting language="cpp">QAbstractItemModel *MainWindow::modelFromFile(const QString &amp;amp;fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly))
        return new QStringListModel(completer);
</db:programlisting>
<db:para>The mouse cursor is then overridden with <db:link xlink:href="qt.xml#CursorShape-enum">Qt::WaitCursor</db:link> before we fill a <db:link xlink:href="qstringlist.xml">QStringList</db:link> object, words, with the contents of file. Once this is done, we restore the mouse cursor.</db:para>
<db:programlisting language="cpp">#ifndef QT_NO_CURSOR
    QGuiApplication::setOverrideCursor(QCursor(Qt::WaitCursor));
#endif
    QStringList words;

    while (!file.atEnd()) {
        QByteArray line = file.readLine();
        if (!line.isEmpty())
            words &amp;lt;&amp;lt; QString::fromUtf8(line.trimmed());
    }

#ifndef QT_NO_CURSOR
    QGuiApplication::restoreOverrideCursor();
#endif
</db:programlisting>
<db:para>As mentioned earlier, the resources file contains two files - <db:emphasis>countries.txt</db:emphasis> and <db:emphasis>words.txt</db:emphasis>. If the file read is <db:emphasis>words.txt</db:emphasis>, we return a <db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link> with words as its <db:link xlink:href="qstringlist.xml">QStringList</db:link> and completer as its parent.</db:para>
<db:programlisting language="cpp">    if (!fileName.contains(QLatin1String(&quot;countries.txt&quot;)))
        return new QStringListModel(words, completer);
</db:programlisting>
<db:para>If the file read is <db:emphasis>countries.txt</db:emphasis>, then we require a <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> with words.count() rows, 2 columns, and completer as its parent.</db:para>
<db:programlisting language="cpp">    QStandardItemModel *m = new QStandardItemModel(words.count(), 2, completer);
</db:programlisting>
<db:para>A standard line in <db:emphasis>countries.txt</db:emphasis> is:</db:para>
<db:blockquote><db:para>Norway NO</db:para>
</db:blockquote>
<db:para>Hence, to populate the <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> object, m, we have to split the country name and its symbol. Once this is done, we return m.</db:para>
<db:programlisting language="cpp">    for (int i = 0; i &amp;lt; words.count(); ++i) {
        QModelIndex countryIdx = m-&amp;gt;index(i, 0);
        QModelIndex symbolIdx = m-&amp;gt;index(i, 1);
        QString country = words.at(i).mid(0, words[i].length() - 2).trimmed();
        QString symbol = words.at(i).right(2);
        m-&amp;gt;setData(countryIdx, country);
        m-&amp;gt;setData(symbolIdx, symbol);
    }

    return m;
}
</db:programlisting>
<db:para>The changeMode() function sets the completer's mode, depending on the value of index.</db:para>
<db:programlisting language="cpp">void MainWindow::changeMode(int index)
{
    QCompleter::CompletionMode mode;
    if (index == 0)
        mode = QCompleter::InlineCompletion;
    else if (index == 1)
        mode = QCompleter::PopupCompletion;
    else
        mode = QCompleter::UnfilteredPopupCompletion;

    completer-&amp;gt;setCompletionMode(mode);
}
</db:programlisting>
<db:para>The changeModel() function changes the item model used based on the model selected by the user.</db:para>
<db:para>A switch statement is used to change the item model based on the index of modelCombo. If case is 0, we use an unsorted <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>, providing us with a file path excluding the drive label.</db:para>
<db:programlisting language="cpp">void MainWindow::changeModel()
{
    delete completer;
    completer = new QCompleter(this);
    completer-&amp;gt;setMaxVisibleItems(maxVisibleSpinBox-&amp;gt;value());

    switch (modelCombo-&amp;gt;currentIndex()) {
    default:
    case 0:
        { // Unsorted QFileSystemModel
            QFileSystemModel *fsModel = new QFileSystemModel(completer);
            fsModel-&amp;gt;setRootPath(QString());
            completer-&amp;gt;setModel(fsModel);
            contentsLabel-&amp;gt;setText(tr(&quot;Enter file path&quot;));
        }
        break;
</db:programlisting>
<db:para>Note that we create the model with completer as the parent as this allows us to replace the model with a new model. The completer will ensure that the old one is deleted the moment a new model is assigned to it.</db:para>
<db:para>If case is 1, we use the DirModel we defined earlier, resulting in full paths for the files.</db:para>
<db:programlisting language="cpp">    case 1:
        {   // FileSystemModel that shows full paths
            FileSystemModel *fsModel = new FileSystemModel(completer);
            completer-&amp;gt;setModel(fsModel);
            fsModel-&amp;gt;setRootPath(QString());
            contentsLabel-&amp;gt;setText(tr(&quot;Enter file path&quot;));
        }
        break;
</db:programlisting>
<db:para>When case is 2, we attempt to complete names of countries. This requires a <db:link xlink:href="qtreeview.xml">QTreeView</db:link> object, treeView. The country names are extracted from <db:emphasis>countries.txt</db:emphasis> and set the popup used to display completions to treeView.</db:para>
<db:programlisting language="cpp">    case 2:
        { // Country List
            completer-&amp;gt;setModel(modelFromFile(&quot;:/resources/countries.txt&quot;));
            QTreeView *treeView = new QTreeView;
            completer-&amp;gt;setPopup(treeView);
            treeView-&amp;gt;setRootIsDecorated(false);
            treeView-&amp;gt;header()-&amp;gt;hide();
            treeView-&amp;gt;header()-&amp;gt;setStretchLastSection(false);
            treeView-&amp;gt;header()-&amp;gt;setSectionResizeMode(0, QHeaderView::Stretch);
            treeView-&amp;gt;header()-&amp;gt;setSectionResizeMode(1, QHeaderView::ResizeToContents);
            contentsLabel-&amp;gt;setText(tr(&quot;Enter name of your country&quot;));
        }
        break;
</db:programlisting>
<db:para>The screenshot below shows the Completer with the country list model.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/completer-example-country.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If case is 3, we attempt to complete words. This is done using a <db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link> that contains data extracted from <db:emphasis>words.txt</db:emphasis>. The model is sorted <db:link xlink:href="qcompleter.xml#ModelSorting-enum">case insensitively</db:link>.</db:para>
<db:para>The screenshot below shows the Completer with the word list model.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/completer-example-word.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Once the model type is selected, we call the changeMode() function and the changeCase() function and set the wrap option accordingly. The wrapCheckBox's <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signal is connected to the completer's <db:link xlink:href="qcompleter.xml#wrapAround-prop">setWrapAround</db:link>() slot.</db:para>
<db:programlisting language="cpp">    case 3:
        { // Word list
            completer-&amp;gt;setModel(modelFromFile(&quot;:/resources/wordlist.txt&quot;));
            completer-&amp;gt;setModelSorting(QCompleter::CaseInsensitivelySortedModel);
            contentsLabel-&amp;gt;setText(tr(&quot;Enter a word&quot;));
        }
        break;
    }

    changeMode(modeCombo-&amp;gt;currentIndex());
    changeCase(caseCombo-&amp;gt;currentIndex());
    completer-&amp;gt;setWrapAround(wrapCheckBox-&amp;gt;isChecked());
    lineEdit-&amp;gt;setCompleter(completer);
    connect(wrapCheckBox, &amp;amp;QAbstractButton::clicked, completer, &amp;amp;QCompleter::setWrapAround);
}
</db:programlisting>
<db:para>The changeMaxVisible() update the maximum number of visible items in the completer.</db:para>
<db:programlisting language="cpp">void MainWindow::changeMaxVisible(int max)
{
    completer-&amp;gt;setMaxVisibleItems(max);
}
</db:programlisting>
<db:para>The about() function provides a brief description about the example.</db:para>
<db:programlisting language="cpp">void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About&quot;), tr(&quot;This example demonstrates the &quot;
        &quot;different features of the QCompleter class.&quot;));
}
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title>main() Function</db:title>
<db:para>The main() function instantiates <db:link xlink:href="qapplication.xml">QApplication</db:link> and MainWindow and invokes the <db:link xlink:href="qwidget.xml#show">show</db:link>() function.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    Q_INIT_RESOURCE(completer);

    QApplication app(argc, argv);
    MainWindow window;
    window.show();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/tools/completer?h=6.0">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
