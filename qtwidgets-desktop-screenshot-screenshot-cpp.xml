<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Screenshot Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Screenshot example shows how to take a screenshot of the desktop.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;screenshot.h&quot;

Screenshot::Screenshot()
{
    screenshotLabel = new QLabel;
    screenshotLabel-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    screenshotLabel-&gt;setAlignment(Qt::AlignCenter);
    screenshotLabel-&gt;setMinimumSize(240, 160);

    createOptionsGroupBox();
    createButtonsLayout();

    mainLayout = new QVBoxLayout;
    mainLayout-&gt;addWidget(screenshotLabel);
    mainLayout-&gt;addWidget(optionsGroupBox);
    mainLayout-&gt;addLayout(buttonsLayout);
    setLayout(mainLayout);

    shootScreen();
    delaySpinBox-&gt;setValue(5);

    setWindowTitle(tr(&quot;Screenshot&quot;));
    resize(300, 200);
}

void Screenshot::resizeEvent(QResizeEvent * /* event */)
{
    QSize scaledSize = originalPixmap.size();
    scaledSize.scale(screenshotLabel-&gt;size(), Qt::KeepAspectRatio);
    if (!screenshotLabel-&gt;pixmap() || scaledSize != screenshotLabel-&gt;pixmap()-&gt;size())
        updateScreenshotLabel();
}

void Screenshot::newScreenshot()
{
    if (hideThisWindowCheckBox-&gt;isChecked())
        hide();
    newScreenshotButton-&gt;setDisabled(true);

    QTimer::singleShot(delaySpinBox-&gt;value() * 1000, this, SLOT(shootScreen()));
}

void Screenshot::saveScreenshot()
{
    QString format = &quot;png&quot;;
    QString initialPath = QDir::currentPath() + tr(&quot;/untitled.&quot;) + format;

    QString fileName = QFileDialog::getSaveFileName(this, tr(&quot;Save As&quot;), initialPath,
                                                    tr(&quot;%1 Files (*.%2);;All Files (*)&quot;)
                                                    .arg(format.toUpper())
                                                    .arg(format));
    if (!fileName.isEmpty())
        originalPixmap.save(fileName, format.toLatin1().constData());
}

void Screenshot::shootScreen()
{
    if (delaySpinBox-&gt;value() != 0)
        qApp-&gt;beep();
    originalPixmap = QPixmap(); // clear image for low memory situations
                                // on embedded devices.
    QScreen *screen = QGuiApplication::primaryScreen();
    if (screen)
        originalPixmap = screen-&gt;grabWindow(0);
    updateScreenshotLabel();

    newScreenshotButton-&gt;setDisabled(false);
    if (hideThisWindowCheckBox-&gt;isChecked())
        show();
}

void Screenshot::updateCheckBox()
{
    if (delaySpinBox-&gt;value() == 0) {
        hideThisWindowCheckBox-&gt;setDisabled(true);
        hideThisWindowCheckBox-&gt;setChecked(false);
    } else {
        hideThisWindowCheckBox-&gt;setDisabled(false);
    }
}

void Screenshot::createOptionsGroupBox()
{
    optionsGroupBox = new QGroupBox(tr(&quot;Options&quot;));

    delaySpinBox = new QSpinBox;
    delaySpinBox-&gt;setSuffix(tr(&quot; s&quot;));
    delaySpinBox-&gt;setMaximum(60);
    connect(delaySpinBox, SIGNAL(valueChanged(int)), this, SLOT(updateCheckBox()));

    delaySpinBoxLabel = new QLabel(tr(&quot;Screenshot Delay:&quot;));

    hideThisWindowCheckBox = new QCheckBox(tr(&quot;Hide This Window&quot;));

    optionsGroupBoxLayout = new QGridLayout;
    optionsGroupBoxLayout-&gt;addWidget(delaySpinBoxLabel, 0, 0);
    optionsGroupBoxLayout-&gt;addWidget(delaySpinBox, 0, 1);
    optionsGroupBoxLayout-&gt;addWidget(hideThisWindowCheckBox, 1, 0, 1, 2);
    optionsGroupBox-&gt;setLayout(optionsGroupBoxLayout);
}

void Screenshot::createButtonsLayout()
{
    newScreenshotButton = createButton(tr(&quot;New Screenshot&quot;), this, SLOT(newScreenshot()));
    saveScreenshotButton = createButton(tr(&quot;Save Screenshot&quot;), this, SLOT(saveScreenshot()));
    quitScreenshotButton = createButton(tr(&quot;Quit&quot;), this, SLOT(close()));

    buttonsLayout = new QHBoxLayout;
    buttonsLayout-&gt;addStretch();
    buttonsLayout-&gt;addWidget(newScreenshotButton);
    buttonsLayout-&gt;addWidget(saveScreenshotButton);
    buttonsLayout-&gt;addWidget(quitScreenshotButton);
}

QPushButton *Screenshot::createButton(const QString &amp;text, QWidget *receiver,
                                      const char *member)
{
    QPushButton *button = new QPushButton(text);
    button-&gt;connect(button, SIGNAL(clicked()), receiver, member);
    return button;
}

void Screenshot::updateScreenshotLabel()
{
    screenshotLabel-&gt;setPixmap(originalPixmap.scaled(screenshotLabel-&gt;size(),
                                                     Qt::KeepAspectRatio,
                                                     Qt::SmoothTransformation));
}

</db:programlisting>
</db:article>
