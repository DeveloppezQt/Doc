<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Callout Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to draw an additional element (a callout) on top of the chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;view.h&quot;
#include &lt;QtGui/QResizeEvent&gt;
#include &lt;QtWidgets/QGraphicsScene&gt;
#include &lt;QtCharts/QChart&gt;
#include &lt;QtCharts/QLineSeries&gt;
#include &lt;QtCharts/QSplineSeries&gt;
#include &lt;QtWidgets/QGraphicsTextItem&gt;
#include &quot;callout.h&quot;
#include &lt;QtGui/QMouseEvent&gt;

View::View(QWidget *parent)
    : QGraphicsView(new QGraphicsScene, parent),
      m_coordX(0),
      m_coordY(0),
      m_chart(0),
      m_tooltip(0)
{
    setDragMode(QGraphicsView::NoDrag);
    setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);

    // chart
    m_chart = new QChart;
    m_chart-&gt;setMinimumSize(640, 480);
    m_chart-&gt;setTitle(&quot;Hover the line to show callout. Click the line to make it stay&quot;);
    m_chart-&gt;legend()-&gt;hide();
    QLineSeries *series = new QLineSeries;
    series-&gt;append(1, 3);
    series-&gt;append(4, 5);
    series-&gt;append(5, 4.5);
    series-&gt;append(7, 1);
    series-&gt;append(11, 2);
    m_chart-&gt;addSeries(series);

    QSplineSeries *series2 = new QSplineSeries;
    series2-&gt;append(1.6, 1.4);
    series2-&gt;append(2.4, 3.5);
    series2-&gt;append(3.7, 2.5);
    series2-&gt;append(7, 4);
    series2-&gt;append(10, 2);
    m_chart-&gt;addSeries(series2);

    m_chart-&gt;createDefaultAxes();
    m_chart-&gt;setAcceptHoverEvents(true);

    setRenderHint(QPainter::Antialiasing);
    scene()-&gt;addItem(m_chart);

    m_coordX = new QGraphicsSimpleTextItem(m_chart);
    m_coordX-&gt;setPos(m_chart-&gt;size().width()/2 - 50, m_chart-&gt;size().height());
    m_coordX-&gt;setText(&quot;X: &quot;);
    m_coordY = new QGraphicsSimpleTextItem(m_chart);
    m_coordY-&gt;setPos(m_chart-&gt;size().width()/2 + 50, m_chart-&gt;size().height());
    m_coordY-&gt;setText(&quot;Y: &quot;);

    connect(series, SIGNAL(clicked(QPointF)), this, SLOT(keepCallout()));
    connect(series, SIGNAL(hovered(QPointF, bool)), this, SLOT(tooltip(QPointF,bool)));

    connect(series2, SIGNAL(clicked(QPointF)), this, SLOT(keepCallout()));
    connect(series2, SIGNAL(hovered(QPointF, bool)), this, SLOT(tooltip(QPointF,bool)));

    this-&gt;setMouseTracking(true);
}

void View::resizeEvent(QResizeEvent *event)
{
    if (scene()) {
        scene()-&gt;setSceneRect(QRect(QPoint(0, 0), event-&gt;size()));
         m_chart-&gt;resize(event-&gt;size());
         m_coordX-&gt;setPos(m_chart-&gt;size().width()/2 - 50, m_chart-&gt;size().height() - 20);
         m_coordY-&gt;setPos(m_chart-&gt;size().width()/2 + 50, m_chart-&gt;size().height() - 20);
         foreach (Callout *callout, m_callouts)
             callout-&gt;updateGeometry();
    }
    QGraphicsView::resizeEvent(event);
}

void View::mouseMoveEvent(QMouseEvent *event)
{
    m_coordX-&gt;setText(QString(&quot;X: %1&quot;).arg(m_chart-&gt;mapToValue(event-&gt;pos()).x()));
    m_coordY-&gt;setText(QString(&quot;Y: %1&quot;).arg(m_chart-&gt;mapToValue(event-&gt;pos()).y()));
    QGraphicsView::mouseMoveEvent(event);
}

void View::keepCallout()
{
    m_callouts.append(m_tooltip);
    m_tooltip = new Callout(m_chart);
}

void View::tooltip(QPointF point, bool state)
{
    if (m_tooltip == 0)
        m_tooltip = new Callout(m_chart);

    if (state) {
        m_tooltip-&gt;setText(QString(&quot;X: %1 \nY: %2 &quot;).arg(point.x()).arg(point.y()));
        m_tooltip-&gt;setAnchor(point);
        m_tooltip-&gt;setZValue(11);
        m_tooltip-&gt;updateGeometry();
        m_tooltip-&gt;show();
    } else {
        m_tooltip-&gt;hide();
    }
}

</db:programlisting>
</db:article>
