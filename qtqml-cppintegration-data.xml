<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Data Type Conversion Between QML and C++</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of how data types are exchanged between QML and C++.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>When data values are exchanged between QML and C++, they are converted by the QML engine to have the correct data types as appropriate for use in QML or C++. This requires the exchanged data to be of a type that is recognizable by the engine.</db:para>
<db:para>The QML engine provides built-in support for a large number of Qt C++ data types. Additionally, custom C++ types may be registered with the QML type system to make them available to the engine.</db:para>
<db:para>For more information about C++ and the different QML integration methods, see the <db:link xlink:href="qtqml-cppintegration-overview.xml">C++ and QML integration overview</db:link> page.</db:para>
<db:para>This page discusses the data types supported by the QML engine and how they are converted between QML and C++.</db:para>
<db:section xml:id="data-ownership">
<db:title>Data Ownership</db:title>
<db:para>When data is transferred from C++ to QML, the ownership of the data always remains with C++. The exception to this rule is when a <db:link xlink:href="qobject.xml">QObject</db:link> is returned from an explicit C++ method call: in this case, the QML engine assumes ownership of the object, unless the ownership of the object has explicitly been set to remain with C++ by invoking <db:link xlink:href="qjsengine.xml#setObjectOwnership">QQmlEngine::setObjectOwnership</db:link>() with QQmlEngine::CppOwnership specified.</db:para>
<db:para>Additionally, the QML engine respects the normal <db:link xlink:href="qobject.xml">QObject</db:link> parent ownership semantics of Qt C++ objects, and will never delete a <db:link xlink:href="qobject.xml">QObject</db:link> instance which has a parent.</db:para>
</db:section>
<db:section xml:id="basic-qt-data-types">
<db:title>Basic Qt Data Types</db:title>
<db:para>By default, QML recognizes the following Qt data types, which are automatically converted to a corresponding <db:link xlink:href="qtqml-typesystem-valuetypes.xml">QML value type</db:link> when passed from C++ to QML and vice-versa:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Qt Type</db:para>
</db:td>
<db:td>
<db:para>QML Value Type</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>bool</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-bool.xml">bool</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>unsigned int, int</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-int.xml">int</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>double</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-double.xml">double</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>float, qreal</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-real.xml">real</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-string.xml">string</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-url.xml">url</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="stylesheet-reference.xml#color">color</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qfont.xml">QFont</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="stylesheet-reference.xml#font">font</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-date.xml">date</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpoint.xml">QPoint</db:link>, <db:link xlink:href="qpointf.xml">QPointF</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-point.xml">point</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsize.xml">QSize</db:link>, <db:link xlink:href="qsizef.xml">QSizeF</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-size.xml">size</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link>, <db:link xlink:href="qrectf.xml">QRectF</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-rect.xml">rect</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link></db:para>
</db:td>
<db:td>
<db:para>matrix4x4</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qquaternion.xml">QQuaternion</db:link></db:para>
</db:td>
<db:td>
<db:para>quaternion</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qvector2d.xml">QVector2D</db:link>, <db:link xlink:href="qvector3d.xml">QVector3D</db:link>, <db:link xlink:href="qvector4d.xml">QVector4D</db:link></db:para>
</db:td>
<db:td>
<db:para>vector2d, vector3d, vector4d</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Classes provided by the <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> module, such as <db:link xlink:href="qcolor.xml">QColor</db:link>, <db:link xlink:href="qfont.xml">QFont</db:link>, <db:link xlink:href="qquaternion.xml">QQuaternion</db:link> and <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link>, are only available from QML when the <db:link xlink:href="">Qt Quick</db:link> module is included.</db:para>
</db:note>
<db:para>As a convenience, many of these types can be specified in QML by string values, or by a related method provided by the <db:link xlink:href="qml-qtqml-qt.xml">QtQml::Qt</db:link> object. For example, the <db:link xlink:href="">Image::sourceSize</db:link> property is of type <db:link xlink:href="qml-size.xml">size</db:link> (which automatically translates to the <db:link xlink:href="qsize.xml">QSize</db:link> type) and can be specified by a string value formatted as &quot;widthxheight&quot;, or by the Qt.size() function:</db:para>
<db:programlisting language="qml">Item {
    Image { sourceSize: &quot;100x200&quot; }
    Image { sourceSize: Qt.size(100, 200) }
}
</db:programlisting>
<db:para>See documentation for each individual type under <db:link xlink:href="qtqml-typesystem-valuetypes.xml">QML Value Types</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="qobject-derived-types">
<db:title>QObject-derived Types</db:title>
<db:para>Any <db:link xlink:href="qobject.xml">QObject</db:link>-derived class may be used as a type for the exchange of data between QML and C++, providing the class has been registered with the QML type system.</db:para>
<db:para>The engine allows the registration of both instantiable and non-instantiable types. Once a class is registered as a QML type, it can be used as a data type for exchanging data between QML and C++. See <db:link xlink:href="qtqml-cppintegration-definetypes.xml#registering-c-types-with-the-qml-type-system">Registering C++ types with the QML type system</db:link> for further details on type registration.</db:para>
</db:section>
<db:section xml:id="conversion-between-qt-and-javascript-types">
<db:title>Conversion Between Qt and JavaScript Types</db:title>
<db:para>The QML engine has built-in support for converting a number of Qt types to related JavaScript types, and vice-versa, when transferring data between QML and C++. This makes it possible to use these types and receive them in C++ or JavaScript without needing to implement custom types that provide access to the data values and their attributes.</db:para>
<db:para>(Note that the JavaScript environment in QML modifies native JavaScript object prototypes, including those of String, Date and Number, to provide additional features. See the <db:link xlink:href="qtqml-javascript-hostenvironment.xml">JavaScript Host Environment</db:link> for further details.)</db:para>
<db:section xml:id="qvariantlist-and-qvariantmap-to-javascript-array-like-and-object">
<db:title>QVariantList and QVariantMap to JavaScript Array-like and Object</db:title>
<db:para>The QML engine provides automatic type conversion between <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> and JavaScript array-likes, and between <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> and JavaScript objects.</db:para>
<db:para>An <db:emphasis>array-like</db:emphasis>, in ECMAScript terms, is an object used like an array. The array-likes produced by conversion from <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> (and other C++ sequential containers) are not only that but also offer the common array methods and automatically synchronize the <db:emphasis>length</db:emphasis> property. They can be used just like JavaScript Arrays for any practical purposes. The <db:emphasis>Array.isArray()</db:emphasis> method still returns false for them, though.</db:para>
<db:para>For example, the function defined in QML below expects two arguments, an array and an object, and prints their contents using the standard JavaScript syntax for array and object item access. The C++ code below calls this function, passing a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> and a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>, which are automatically converted to JavaScript array-like and object values, respectively:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>QML</db:para>
</db:td>
<db:td>
<db:programlisting language="qml">// MyItem.qml
Item {
    function readValues(anArray, anObject) {
        for (var i=0; i&lt;anArray.length; i++)
            console.log(&quot;Array item:&quot;, anArray[i])

        for (var prop in anObject) {
            console.log(&quot;Object item:&quot;, prop, &quot;=&quot;, anObject[prop])
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>C++</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">// C++
QQuickView view(QUrl::fromLocalFile(&quot;MyItem.qml&quot;));

QVariantList list;
list &lt;&lt; 10 &lt;&lt; QColor(Qt::green) &lt;&lt; &quot;bottles&quot;;

QVariantMap map;
map.insert(&quot;language&quot;, &quot;QML&quot;);
map.insert(&quot;released&quot;, QDate(2010, 9, 21));

QMetaObject::invokeMethod(view.rootObject(), &quot;readValues&quot;,
        Q_ARG(QVariant, QVariant::fromValue(list)),
        Q_ARG(QVariant, QVariant::fromValue(map)));
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This produces output like:</db:para>
<db:programlisting language="cpp">Array item: 10
Array item: #00ff00
Array item: bottles
Object item: language = QML
Object item: released = Tue Sep 21 2010 00:00:00 GMT+1000 (EST)
</db:programlisting>
<db:para>Similarly, if a C++ type uses a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> or <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> type for a property type or method parameter, the value can be created as a JavaScript array or object in QML, and is automatically converted to a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> or <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> when it is passed to C++.</db:para>
<db:para>Since Qt 6.5, <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> properties of C++ types can be changed in place by QML code. Since Qt 6.9, <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> properties of C++ types can be changed in place by QML code.</db:para>
</db:section>
<db:section xml:id="qdatetime-to-javascript-date">
<db:title>QDateTime to JavaScript Date</db:title>
<db:para>The QML engine provides automatic type conversion between <db:link xlink:href="qdatetime.xml">QDateTime</db:link> values and JavaScript Date objects.</db:para>
<db:para>For example, the function defined in QML below expects a JavaScript Date object, and also returns a new Date object with the current date and time. The C++ code below calls this function, passing a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> value that is automatically converted by the engine into a Date object when it is passed to the readDate() function. In turn, the readDate() function returns a Date object that is automatically converted into a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> value when it is received in C++:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>QML</db:para>
</db:td>
<db:td>
<db:programlisting language="qml">// MyItem.qml
Item {
    function readDate(dt) {
        console.log(&quot;The given date is:&quot;, dt.toUTCString());
        return new Date();
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>C++</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">// C++
QQuickView view(QUrl::fromLocalFile(&quot;MyItem.qml&quot;));

QDateTime dateTime = QDateTime::currentDateTime();
QDateTime retValue;

QMetaObject::invokeMethod(view.rootObject(), &quot;readDate&quot;,
        Q_RETURN_ARG(QVariant, retValue),
        Q_ARG(QVariant, QVariant::fromValue(dateTime)));

qDebug() &lt;&lt; &quot;Value returned from readDate():&quot; &lt;&lt; retValue;
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Similarly, if a C++ type uses a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> for a property type or method parameter, the value can be created as a JavaScript Date object in QML, and is automatically converted to a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> value when it is passed to C++.</db:para>
<db:note>
<db:para>Watch out for the difference in month numbering: JavaScript numbers January as 0 through 11 for December, off by one from Qt's numbering of January as 1 through 12 for December.</db:para>
</db:note>
<db:note>
<db:para>When using a string in JavaScript as the value of a Date object, note that a string with no time fields (so a simple date) is interpreted as the UTC start of the relevant day, in contrast to new Date(y, m, d) which uses the local time start of the day. Most other ways of constructing a Date object in JavaScript produce a local time, unless methods with UTC in their names are used. If your program is run in a zone behind UTC (nominally west of The Prime Meridian), use of a date-only string will lead to a Date object whose getDate() is one less than the day-number in your string; it will typically have a large value for getHours(). The UTC variants of these methods, getUTCDate() and getUTCHours(), will give the results you expect for such a Date objects. See also the next section.</db:para>
</db:note>
</db:section>
<db:section xml:id="qdate-and-javascript-date">
<db:title>QDate and JavaScript Date</db:title>
<db:para>The QML engine converts automatically between <db:link xlink:href="qdate.xml">QDate</db:link> and the JavaScript Date type by representing the date by the UTC start of its day. A date is mapped back to <db:link xlink:href="qdate.xml">QDate</db:link> via <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, selecting its <db:link xlink:href="qdatetime.xml#date">date</db:link>() method, using the local time form of the date unless the UTC form of it coincides with the start of the next day, in which case the UTC form is used.</db:para>
<db:para>This slighly eccentric arrangement is a work-around for the fact that JavaScript's construction of a Date object from a date-only string uses the UTC start of the day, but new Date(y, m, d) uses the local time start of the indicated date, as discussed in a note at the end of the previous section.</db:para>
<db:para>As a result, where a <db:link xlink:href="qdate.xml">QDate</db:link> property or parameter is exposed to QML, care should be taken in reading its value: the Date.getUTCFullYear(), Date.getUTCMonth() and Date.getUTCDate() methods are more likely to deliver the results users expect than the corresponding methods without UTC in their names.</db:para>
<db:para>It is thus commonly more robust to use a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> property. This makes it possible to take control, on the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> side, of whether the date (and time) is specified in terms of UTC or local time; as long as the JavaScript code is written to work with the same standard, it should be possible to avoid trouble.</db:para>
<db:anchor xml:id="qtime-to-javascript-date"/>
</db:section>
<db:section xml:id="qtime-and-javascript-date">
<db:title>QTime and JavaScript Date</db:title>
<db:para>The QML engine provides automatic type conversion from <db:link xlink:href="qtime.xml">QTime</db:link> values to JavaScript Date objects. As <db:link xlink:href="qtime.xml">QTime</db:link> values do not contain a date component, one is created for the conversion only. Thus, you should not rely on the date component of the resulting Date object.</db:para>
<db:para>Under the hood, conversion from a JavaScript Date object to <db:link xlink:href="qtime.xml">QTime</db:link> is done by converting to a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object (using local time) and calling its <db:link xlink:href="qdatetime.xml#time">time</db:link>() method.</db:para>
</db:section>
<db:section xml:id="sequence-type-to-javascript-array">
<db:title>Sequence Type to JavaScript Array</db:title>
<db:para>See <db:link xlink:href="qtqml-typesystem-sequencetypes.xml">QML Sequence Types</db:link> for a general description of sequence types. The <db:link xlink:href="qtqml-qmlmodule.xml">QtQml module</db:link> contains a few sequence types you may want to use.</db:para>
<db:para>You can also create a list-like data structure by constructing a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> using <db:link xlink:href="qjsengine.xml#newArray">QJSEngine::newArray</db:link>(). Such a JavaScript array does not need any conversion when passing it between QML and C++. See <db:link xlink:href="qjsvalue.xml#working-with-arrays">QJSValue#Working With Arrays</db:link> for details on how to manipulate JavaScript arrays from C++.</db:para>
</db:section>
<db:section xml:id="qbytearray-to-javascript-arraybuffer">
<db:title>QByteArray to JavaScript ArrayBuffer</db:title>
<db:para>The QML engine provides automatic type conversion between <db:link xlink:href="qbytearray.xml">QByteArray</db:link> values and JavaScript ArrayBuffer objects.</db:para>
</db:section>
<db:section xml:id="value-types">
<db:title>Value Types</db:title>
<db:para>Some value types in Qt such as <db:link xlink:href="qpoint.xml">QPoint</db:link> are represented in JavaScript as objects that have the same properties and functions like in the C++ API. The same representation is possible with custom C++ value types. To enable a custom value type with the QML engine, the class declaration needs to be annotated with Q_GADGET. Properties that are intended to be visible in the JavaScript representation need to be declared with Q_PROPERTY. Similarly functions need to be marked with Q_INVOKABLE. This is the same with <db:link xlink:href="qobject.xml">QObject</db:link> based C++ APIs. For example, the Actor class below is annotated as gadget and has properties:</db:para>
<db:programlisting language="cpp">class Actor
{
    Q_GADGET
    Q_PROPERTY(QString name READ name WRITE setName)
public:
    QString name() const { return m_name; }
    void setName(const QString &amp;name) { m_name = name; }

private:
    QString m_name;
};

Q_DECLARE_METATYPE(Actor)
</db:programlisting>
<db:para>The usual pattern is to use a gadget class as the type of a property, or to emit a gadget as a signal argument. In such cases, the gadget instance is passed by value between C++ and QML (because it's a value type). If QML code changes a property of a gadget property, the entire gadget is re-created and passed back to the C++ property setter. In Qt 5, gadget types cannot be instantiated by direct declaration in QML. In contrast, a <db:link xlink:href="qobject.xml">QObject</db:link> instance can be declared; and <db:link xlink:href="qobject.xml">QObject</db:link> instances are always passed by pointer from C++ to QML.</db:para>
</db:section>
</db:section>
<db:section xml:id="enumeration-types">
<db:title>Enumeration Types</db:title>
<db:para>To use a custom enumeration as a data type, its class must be registered and the enumeration must also be declared with <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>() to register it with Qt's meta object system. For example, the Message class below has a Status enum:</db:para>
<db:programlisting language="cpp">class Message : public QObject
{
    Q_OBJECT
    Q_PROPERTY(Status status READ status NOTIFY statusChanged)
public:
    enum Status {
        Ready,
        Loading,
        Error
    };
    Q_ENUM(Status)
    Status status() const;
signals:
    void statusChanged();
};
</db:programlisting>
<db:para>Providing the Message class has been <db:link xlink:href="qtqml-cppintegration-definetypes.xml#registering-c-types-with-the-qml-type-system">registered</db:link> with the QML type system, its Status enum can be used from QML:</db:para>
<db:programlisting language="qml">Message {
     onStatusChanged: {
         if (status == Message.Ready)
             console.log(&quot;Message is loaded!&quot;)
     }
 }
</db:programlisting>
<db:para>To use an enum as a <db:link xlink:href="qflags.xml">flags</db:link> type in QML, see <db:link xlink:href="qobject.xml#Q_FLAG">Q_FLAG</db:link>().</db:para>
<db:note>
<db:para>The names of enum values must begin with a capital letter in order to be accessible from QML.</db:para>
</db:note>
<db:programlisting language="cpp">...
enum class Status {
          Ready,
          Loading,
          Error
}
Q_ENUM(Status)
...
</db:programlisting>
<db:para>Enum classes are registered in QML as scoped and unscoped properties. The Ready value will be registered at Message.Status.Ready and Message.Ready .</db:para>
<db:para>When using enum classes, there can be multiple enums using the same identifiers. The unscoped registration will be overwriten by the last registered enum. For classes that contain such name conficts it is possible to disable the unscoped registration by annotating your class with a special <db:link xlink:href="qobject.xml#Q_CLASSINFO">Q_CLASSINFO</db:link> macro. Use the name RegisterEnumClassesUnscoped with the value false to prevent scoped enums from being merged into the same name space.</db:para>
<db:programlisting language="cpp">class Message : public QObject
    {
        Q_OBJECT
        Q_CLASSINFO(&quot;RegisterEnumClassesUnscoped&quot;, &quot;false&quot;)
        Q_ENUM(ScopedEnum)
        Q_ENUM(OtherValue)

    public:
        enum class ScopedEnum {
              Value1,
              Value2,
              OtherValue
        };
        enum class OtherValue {
              Value1,
              Value2
        };
    };
</db:programlisting>
<db:para>Enums from related types are usually registered in the scope of the relating type. For example any enum from a different type used in a <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> declaration causes all enums from that type to be made available in QML. This is usually more of a liability than a feature. In order to prevent it from happening, annotate your class with a special <db:link xlink:href="qobject.xml#Q_CLASSINFO">Q_CLASSINFO</db:link> macro. Use the name RegisterEnumsFromRelatedTypes with the value false to prevent enums from related types from being registered in this type.</db:para>
<db:para>You should explicitly register the enclosing types of any enums you want to use in QML, using <db:link xlink:href="qqmlintegration-h.xml#QML_ELEMENT">QML_ELEMENT</db:link> or <db:link xlink:href="qqmlintegration-h.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link>, rather than rely on their enums to be injected into other types.</db:para>
<db:programlisting language="cpp">class OtherType : public QObject
{
    Q_OBJECT
    QML_ELEMENT

public:
    enum SomeEnum { A, B, C };
    Q_ENUM(SomeEnum)

    enum AnotherEnum { D, E, F };
    Q_ENUM(AnotherEnum)
};

class Message : public QObject
{
    Q_OBJECT
    QML_ELEMENT

    // This would usually cause all enums from OtherType to be registered
    // as members of Message ...
    Q_PROPERTY(OtherType::SomeEnum someEnum READ someEnum CONSTANT)

    // ... but this way it doesn't.
    Q_CLASSINFO(&quot;RegisterEnumsFromRelatedTypes&quot;, &quot;false&quot;)

public:
    OtherType::SomeEnum someEnum() const { return OtherType::B; }
};
</db:programlisting>
<db:para>The important difference is the scope for the enums in QML. If an enum from a related class is automatically registered, the scope is the type it is imported into. In the above case, without the extra <db:link xlink:href="qobject.xml#Q_CLASSINFO">Q_CLASSINFO</db:link>, you would use Message.A, for example. If C++ type holding the enums is explicitly registered, and the registration of enums from related types is suppressed, the QML type for the C++ type holding the enums is the scope for all of its enums. You would use OtherType.A instead of Message.A in QML.</db:para>
<db:para>Mind that you can use <db:link xlink:href="qqmlintegration-h.xml#QML_FOREIGN">QML_FOREIGN</db:link> to register a type you cannot modify. You can also use <db:link xlink:href="qqmlintegration-h.xml#QML_FOREIGN_NAMESPACE">QML_FOREIGN_NAMESPACE</db:link> to register the enumerators of a C++ type into a QML namespace of any upper-case name, even if the same C++ type is also registered as a QML value type.</db:para>
<db:section xml:id="enumeration-types-as-signal-and-method-parameters">
<db:title>Enumeration Types as Signal and Method Parameters</db:title>
<db:para>C++ signals and methods with enumeration-type parameters can be used from QML provided that the enumeration and the signal or method are both declared within the same class, or that the enumeration value is one of those declared in the <db:link xlink:href="qml-qtqml-qt.xml">Qt Namespace</db:link>.</db:para>
<db:para>Additionally, if a C++ signal with an enum parameter should be connectable to a QML function using the <db:link xlink:href="qtqml-syntax-signals.xml#connecting-signals-to-methods-and-signals">connect()</db:link> function, the enum type must be registered using <db:link xlink:href="qmetatype.xml#qRegisterMetaType">qRegisterMetaType</db:link>().</db:para>
<db:para>For QML signals, enum values may be passed as signal parameters using the int type:</db:para>
<db:programlisting language="qml">Message {
    signal someOtherSignal(int statusValue)

    Component.onCompleted: {
        someOtherSignal(Message.Loading)
    }
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
