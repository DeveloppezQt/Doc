<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlComponent Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> class encapsulates a QML component definition.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlComponent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtqml-component.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Components are reusable, encapsulated QML types with well-defined interfaces.</db:para>
<db:para>A <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> instance can be created from a QML file. For example, if there is a <db:code>main.qml</db:code> file like this:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    width: 200
    height: 200
}
</db:programlisting>
<db:para>The following code loads this QML file as a component, creates an instance of this component using <db:link xlink:href="qqmlcomponent.xml#create">create</db:link>(), and then queries the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>'s <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> value:</db:para>
<db:programlisting language="cpp">QQmlEngine *engine = new QQmlEngine;
QQmlComponent component(engine, QUrl::fromLocalFile(&quot;main.qml&quot;));

QObject *myObject = component.create();
QQuickItem *item = qobject_cast&amp;lt;QQuickItem*&amp;gt;(myObject);
int width = item-&amp;gt;width();  // width = 200
</db:programlisting>
<db:para>To create instances of a component in code where a <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> instance is not available, you can use <db:link xlink:href="qqmlengine.xml#qmlContext">qmlContext</db:link>() or <db:link xlink:href="qqmlengine.xml#qmlEngine">qmlEngine</db:link>(). For example, in the scenario below, child items are being created within a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> subclass:</db:para>
<db:programlisting language="cpp">void MyCppItem::init()
{
    QQmlEngine *engine = qmlEngine(this);
    // Or:
    // QQmlEngine *engine = qmlContext(this)-&amp;gt;engine();
    QQmlComponent component(engine, QUrl::fromLocalFile(&quot;MyItem.qml&quot;));
    QQuickItem *childItem = qobject_cast&amp;lt;QQuickItem*&amp;gt;(component.create());
    childItem-&amp;gt;setParentItem(this);
}
</db:programlisting>
<db:para>Note that these functions will return <db:code>null</db:code> when called inside the constructor of a <db:link xlink:href="qobject.xml">QObject</db:link> subclass, as the instance will not yet have a context nor engine.</db:para>
<db:section xml:id="network-components">
<db:title>Network Components</db:title>
<db:para>If the URL passed to <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> is a network resource, or if the QML document references a network resource, the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> has to fetch the network data before it is able to create objects. In this case, the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> will have a <db:link xlink:href="qqmlcomponent.xml#Status-enum">Loading</db:link> <db:link xlink:href="qqmlcomponent.xml#status-prop">status</db:link>. An application will have to wait until the component is <db:link xlink:href="qqmlcomponent.xml#Status-enum">Ready</db:link> before calling <db:link xlink:href="qqmlcomponent.xml#create">QQmlComponent::create</db:link>().</db:para>
<db:para>The following example shows how to load a QML file from a network resource. After creating the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link>, it tests whether the component is loading. If it is, it connects to the <db:link xlink:href="qqmlcomponent.xml#statusChanged">QQmlComponent::statusChanged</db:link>() signal and otherwise calls the <db:code>continueLoading()</db:code> method directly. Note that <db:link xlink:href="qqmlcomponent.xml#isLoading">QQmlComponent::isLoading</db:link>() may be false for a network component if the component has been cached and is ready immediately.</db:para>
<db:programlisting language="cpp">MyApplication::MyApplication()
{
    // ...
    component = new QQmlComponent(engine, QUrl(&quot;http://www.example.com/main.qml&quot;));
    if (component-&amp;gt;isLoading()) {
        QObject::connect(component, &amp;amp;QQmlComponent::statusChanged,
                         this, &amp;amp;MyApplication::continueLoading);
    } else {
        continueLoading();
    }
}

void MyApplication::continueLoading()
{
    if (component-&amp;gt;isError()) {
        qWarning() &amp;lt;&amp;lt; component-&amp;gt;errors();
    } else {
        QObject *myObject = component-&amp;gt;create();
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CompilationMode-enum">
<db:title>enum QQmlComponent::CompilationMode</db:title>
<db:enumsynopsis>
<db:enumname>CompilationMode</db:enumname>
<db:enumitem>
<db:enumidentifier>PreferSynchronous</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Asynchronous</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies whether the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> should load the component immediately, or asynchonously.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link></db:emphasis>::PreferSynchronous</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Prefer loading/compiling the component immediately, blocking the thread. This is not always possible; for example, remote URLs will always load asynchronously.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link></db:emphasis>::Asynchronous</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Load/compile the component in a background thread.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QQmlComponent::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>Null</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ready</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Loading</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the loading status of the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> has no data. Call <db:link xlink:href="qqmlcomponent.xml#loadUrl">loadUrl</db:link>() or <db:link xlink:href="qqmlcomponent.xml#setData">setData</db:link>() to add QML content.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link></db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> is ready and <db:link xlink:href="qqmlcomponent.xml#create">create</db:link>() may be called.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link></db:emphasis>::Loading</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> is loading network data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link></db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error has occurred. Call <db:link xlink:href="qqmlcomponent.xml#errors">errors</db:link>() to retrieve a list of <db:link xlink:href="qqmlerror.xml">errors</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="progress-prop">
<db:title>[read-only] progress : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>progress</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">progress</db:synopsisinfo>
<db:synopsisinfo role="notifier">progressChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The progress of loading the component, from 0.0 (nothing loaded) to 1.0 (finished).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>qreal</db:type> <db:emphasis role="bold">progress</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qqmlcomponent.xml#progressChanged">progressChanged</db:link></db:emphasis>(<db:type>qreal</db:type> <db:emphasis>progress</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Status</db:type>
<db:varname>status</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">status</db:synopsisinfo>
<db:synopsisinfo role="notifier">statusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The component's current <db:link xlink:href="qqmlcomponent.xml#Status-enum">status</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qqmlcomponent.xml#Status-enum">QQmlComponent::Status</db:link></db:type> <db:emphasis role="bold">status</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qqmlcomponent.xml#statusChanged">statusChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qqmlcomponent.xml#Status-enum">QQmlComponent::Status</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="url-prop">
<db:title>[read-only] url : const QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>url</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">url</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The component URL. This is the URL passed to either the constructor, or the <db:link xlink:href="qqmlcomponent.xml#loadUrl">loadUrl</db:link>(), or <db:link xlink:href="qqmlcomponent.xml#setData">setData</db:link>() methods.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">url</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlComponent-1">
<db:title>QQmlComponent::QQmlComponent(QQmlEngine *<db:emphasis>engine</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlComponent</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlComponent(QQmlEngine *engine, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> with no data and give it the specified <db:code role="parameter">engine</db:code> and <db:code role="parameter">parent</db:code>. Set the data with <db:link xlink:href="qqmlcomponent.xml#setData">setData</db:link>().</db:para>
</db:section>
<db:section xml:id="QQmlComponent-2">
<db:title>QQmlComponent::QQmlComponent(QQmlEngine *<db:emphasis>engine</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlComponent</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlComponent(QQmlEngine *engine, const QString &amp;fileName, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> from the given <db:code role="parameter">fileName</db:code> and give it the specified <db:code role="parameter">parent</db:code> and <db:code role="parameter">engine</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#loadUrl">loadUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QQmlComponent-3">
<db:title>QQmlComponent::QQmlComponent(QQmlEngine *<db:emphasis>engine</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>, QQmlComponent::CompilationMode <db:emphasis>mode</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlComponent</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlComponent::CompilationMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlComponent(QQmlEngine *engine, const QString &amp;fileName, QQmlComponent::CompilationMode mode, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> from the given <db:code role="parameter">fileName</db:code> and give it the specified <db:code role="parameter">parent</db:code> and <db:code role="parameter">engine</db:code>. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qqmlcomponent.xml#CompilationMode-enum">Asynchronous</db:link>, the component will be loaded and compiled asynchronously.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#loadUrl">loadUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QQmlComponent-4">
<db:title>QQmlComponent::QQmlComponent(QQmlEngine *<db:emphasis>engine</db:emphasis>, const QUrl &amp;<db:emphasis>url</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlComponent</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlComponent(QQmlEngine *engine, const QUrl &amp;url, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> from the given <db:code role="parameter">url</db:code> and give it the specified <db:code role="parameter">parent</db:code> and <db:code role="parameter">engine</db:code>.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:para>Relative paths will be resolved against <db:link xlink:href="qqmlengine.xml#baseUrl">QQmlEngine::baseUrl</db:link>(), which is the current working directory unless specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#loadUrl">loadUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QQmlComponent-5">
<db:title>QQmlComponent::QQmlComponent(QQmlEngine *<db:emphasis>engine</db:emphasis>, const QUrl &amp;<db:emphasis>url</db:emphasis>, QQmlComponent::CompilationMode <db:emphasis>mode</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlComponent</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlComponent::CompilationMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlComponent(QQmlEngine *engine, const QUrl &amp;url, QQmlComponent::CompilationMode mode, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> from the given <db:code role="parameter">url</db:code> and give it the specified <db:code role="parameter">parent</db:code> and <db:code role="parameter">engine</db:code>. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qqmlcomponent.xml#CompilationMode-enum">Asynchronous</db:link>, the component will be loaded and compiled asynchronously.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:para>Relative paths will be resolved against <db:link xlink:href="qqmlengine.xml#baseUrl">QQmlEngine::baseUrl</db:link>(), which is the current working directory unless specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#loadUrl">loadUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QQmlComponent">
<db:title>[override virtual] QQmlComponent::~QQmlComponent()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQmlComponent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQmlComponent() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destruct the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link>.</db:para>
</db:section>
<db:section xml:id="beginCreate">
<db:title>[virtual] QObject *QQmlComponent::beginCreate(QQmlContext *<db:emphasis>context</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>beginCreate</db:methodname>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * beginCreate(QQmlContext *context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Create an object instance from this component, within the specified <db:code role="parameter">context</db:code>. Returns <db:code>nullptr</db:code> if creation failed.</db:para>
<db:note>
<db:para>This method provides advanced control over component instance creation. In general, programmers should use <db:link xlink:href="qqmlcomponent.xml#create">QQmlComponent::create</db:link>() to create object instances.</db:para>
</db:note>
<db:para>When <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> constructs an instance, it occurs in three steps:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The object hierarchy is created, and constant values are assigned.</db:para>
</db:listitem>
<db:listitem>
<db:para>Property bindings are evaluated for the first time.</db:para>
</db:listitem>
<db:listitem>
<db:para>If applicable, <db:link xlink:href="qqmlparserstatus.xml#componentComplete">QQmlParserStatus::componentComplete</db:link>() is called on objects.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>QQmlComponent::beginCreate() differs from <db:link xlink:href="qqmlcomponent.xml#create">QQmlComponent::create</db:link>() in that it only performs step 1. <db:link xlink:href="qqmlcomponent.xml#completeCreate">QQmlComponent::completeCreate</db:link>() must be called to complete steps 2 and 3.</db:para>
<db:para>This breaking point is sometimes useful when using attached properties to communicate information to an instantiated component, as it allows their initial values to be configured before property bindings take effect.</db:para>
<db:para>The ownership of the returned object instance is transferred to the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#completeCreate">completeCreate</db:link>()</db:member>
<db:member><db:link xlink:href="qjsengine.xml#ObjectOwnership-enum">QQmlEngine::ObjectOwnership</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completeCreate">
<db:title>[virtual] void QQmlComponent::completeCreate()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>completeCreate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void completeCreate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method provides advanced control over component instance creation. In general, programmers should use <db:link xlink:href="qqmlcomponent.xml#create">QQmlComponent::create</db:link>() to create a component.</db:para>
<db:para>This function completes the component creation begun with <db:link xlink:href="qqmlcomponent.xml#beginCreate">QQmlComponent::beginCreate</db:link>() and must be called afterwards.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#beginCreate">beginCreate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>[virtual] QObject *QQmlComponent::create(QQmlContext *<db:emphasis>context</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>create</db:methodname>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>context</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * create(QQmlContext *context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Create an object instance from this component, within the specified <db:code role="parameter">context</db:code>. Returns <db:code>nullptr</db:code> if creation failed.</db:para>
<db:para>If <db:code role="parameter">context</db:code> is <db:code>nullptr</db:code> (the default), it will create the instance in the <db:link xlink:href="qqmlengine.xml#rootContext">root context</db:link> of the engine.</db:para>
<db:para>The ownership of the returned object instance is transferred to the caller.</db:para>
<db:para>If the object being created from this component is a visual item, it must have a visual parent, which can be set by calling <db:link xlink:href="qquickitem.xml#parent-prop">QQuickItem::setParentItem</db:link>(). See <db:link xlink:href="qtquick-visualcanvas-visualparent.xml">Concepts - Visual Parent in Qt Quick</db:link> for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsengine.xml#ObjectOwnership-enum">QQmlEngine::ObjectOwnership</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create-1">
<db:title>void QQmlComponent::create(QQmlIncubator &amp;<db:emphasis>incubator</db:emphasis>, QQmlContext *<db:emphasis>context</db:emphasis> = nullptr, QQmlContext *<db:emphasis>forContext</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>create</db:methodname>
<db:methodparam>
<db:type>QQmlIncubator &amp;</db:type>
<db:parameter>incubator</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>context</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>forContext</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void create(QQmlIncubator &amp;incubator, QQmlContext *context, QQmlContext *forContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Create an object instance from this component using the provided <db:code role="parameter">incubator</db:code>. <db:code role="parameter">context</db:code> specifies the context within which to create the object instance.</db:para>
<db:para>If <db:code role="parameter">context</db:code> is <db:code>nullptr</db:code> (by default), it will create the instance in the engine's <db:link xlink:href="qqmlengine.xml#rootContext">root context</db:link>.</db:para>
<db:para><db:code role="parameter">forContext</db:code> specifies a context that this object creation depends upon. If the <db:code role="parameter">forContext</db:code> is being created asynchronously, and the <db:link xlink:href="qqmlincubator.xml#IncubationMode-enum">QQmlIncubator::IncubationMode</db:link> is <db:link xlink:href="qqmlincubator.xml#IncubationMode-enum">QQmlIncubator::AsynchronousIfNested</db:link>, this object will also be created asynchronously. If <db:code role="parameter">forContext</db:code> is <db:code>nullptr</db:code> (by default), the <db:code role="parameter">context</db:code> will be used for this decision.</db:para>
<db:para>The created object and its creation status are available via the <db:code role="parameter">incubator</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createWithInitialProperties">
<db:title>[since 5.14] QObject *QQmlComponent::createWithInitialProperties(const QVariantMap &amp;<db:emphasis>initialProperties</db:emphasis>, QQmlContext *<db:emphasis>context</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>QObject *</db:type>
<db:methodname>createWithInitialProperties</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>initialProperties</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>context</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * createWithInitialProperties(const QVariantMap &amp;initialProperties, QQmlContext *context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Create an object instance of this component, within the specified <db:code role="parameter">context</db:code>, and initialize its top-level properties with <db:code role="parameter">initialProperties</db:code>.</db:para>
<db:para>If any of the <db:code>initialProperties</db:code> cannot be set, <db:link xlink:href="qqmlcomponent.xml#isError">isError</db:link>() will return <db:code>true</db:code>, and the <db:link xlink:href="qqmlcomponent.xml#errors">errors</db:link>() function can be used to get detailed information about the error(s).</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#create">QQmlComponent::create</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="creationContext">
<db:title>QQmlContext *QQmlComponent::creationContext() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlContext *</db:type>
<db:methodname>creationContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlContext * creationContext() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> the component was created in. This is only valid for components created directly from QML.</db:para>
</db:section>
<db:section xml:id="engine">
<db:title>[since 5.12] QQmlEngine *QQmlComponent::engine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlEngine *</db:type>
<db:methodname>engine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlEngine * engine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> of this component.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="errors">
<db:title>QList&lt;QQmlError&gt; QQmlComponent::errors() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QQmlError&gt;</db:type>
<db:methodname>errors</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QQmlError&gt; errors() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of errors that occurred during the last compile or create operation. An empty list is returned if <db:link xlink:href="qqmlcomponent.xml#isError">isError</db:link>() is not set.</db:para>
</db:section>
<db:section xml:id="isBound">
<db:title>bool QQmlComponent::isBound() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBound</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBound() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the component was created in a QML files that specifies <db:code>pragma ComponentBehavior: Bound</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isError">
<db:title>bool QQmlComponent::isError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qqmlcomponent.xml#status-prop">status</db:link>() == <db:link xlink:href="qqmlcomponent.xml#Status-enum">QQmlComponent::Error</db:link>.</db:para>
</db:section>
<db:section xml:id="isLoading">
<db:title>bool QQmlComponent::isLoading() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLoading</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLoading() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qqmlcomponent.xml#status-prop">status</db:link>() == <db:link xlink:href="qqmlcomponent.xml#Status-enum">QQmlComponent::Loading</db:link>.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QQmlComponent::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qqmlcomponent.xml#status-prop">status</db:link>() == <db:link xlink:href="qqmlcomponent.xml#Status-enum">QQmlComponent::Null</db:link>.</db:para>
</db:section>
<db:section xml:id="isReady">
<db:title>bool QQmlComponent::isReady() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReady</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReady() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qqmlcomponent.xml#status-prop">status</db:link>() == <db:link xlink:href="qqmlcomponent.xml#Status-enum">QQmlComponent::Ready</db:link>.</db:para>
</db:section>
<db:section xml:id="loadUrl">
<db:title>void QQmlComponent::loadUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadUrl(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Load the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> from the provided <db:code role="parameter">url</db:code>.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:para>Relative paths will be resolved against <db:link xlink:href="qqmlengine.xml#baseUrl">QQmlEngine::baseUrl</db:link>(), which is the current working directory unless specified.</db:para>
</db:section>
<db:section xml:id="loadUrl-1">
<db:title>void QQmlComponent::loadUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>, QQmlComponent::CompilationMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlComponent::CompilationMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadUrl(const QUrl &amp;url, QQmlComponent::CompilationMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Load the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> from the provided <db:code role="parameter">url</db:code>. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qqmlcomponent.xml#CompilationMode-enum">Asynchronous</db:link>, the component will be loaded and compiled asynchronously.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:para>Relative paths will be resolved against <db:link xlink:href="qqmlengine.xml#baseUrl">QQmlEngine::baseUrl</db:link>(), which is the current working directory unless specified.</db:para>
</db:section>
<db:section xml:id="progressChanged">
<db:title>void QQmlComponent::progressChanged(qreal <db:emphasis>progress</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>progressChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>progress</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">progress</db:synopsisinfo>
<db:synopsisinfo role="signature">void progressChanged(qreal progress)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Emitted whenever the component's loading progress changes. <db:code role="parameter">progress</db:code> will be the current progress between 0.0 (nothing loaded) and 1.0 (finished).</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qqmlcomponent.xml#progress-prop">progress</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="setData">
<db:title>void QQmlComponent::setData(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(const QByteArray &amp;data, const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> to use the given QML <db:code role="parameter">data</db:code>. If <db:code role="parameter">url</db:code> is provided, it is used to set the component name and to provide a base path for items resolved by this component.</db:para>
</db:section>
<db:section xml:id="setInitialProperties">
<db:title>[since 5.14] void QQmlComponent::setInitialProperties(QObject *<db:emphasis>component</db:emphasis>, const QVariantMap &amp;<db:emphasis>properties</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInitialProperties</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>component</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>properties</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInitialProperties(QObject *component, const QVariantMap &amp;properties)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set top-level <db:code role="parameter">properties</db:code> of the <db:code role="parameter">component</db:code>.</db:para>
<db:para>This method provides advanced control over component instance creation. In general, programmers should use <db:link xlink:href="qqmlcomponent.xml#createWithInitialProperties">QQmlComponent::createWithInitialProperties</db:link> to create a component.</db:para>
<db:para>Use this method after <db:link xlink:href="qqmlcomponent.xml#beginCreate">beginCreate</db:link> and before <db:link xlink:href="qqmlcomponent.xml#completeCreate">completeCreate</db:link> has been called. If a provided property does not exist, a warning is issued.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="statusChanged">
<db:title>void QQmlComponent::statusChanged(QQmlComponent::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>statusChanged</db:methodname>
<db:methodparam>
<db:type>QQmlComponent::Status</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">status</db:synopsisinfo>
<db:synopsisinfo role="signature">void statusChanged(QQmlComponent::Status status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Emitted whenever the component's status changes. <db:code role="parameter">status</db:code> will be the new status.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qqmlcomponent.xml#status-prop">status</db:link>. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
