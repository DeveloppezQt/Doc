<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Custom Geometry Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates providing custom vertex data from C++ and QML.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/customgeometry-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example makes use of <db:link xlink:href="qquick3dgeometry.xml">QQuick3DGeometry</db:link> and <db:link xlink:href="qml-qtquick3d-model.xml#geometry-prop">the geometry property</db:link> of Model to render a mesh with vertex, normal, and texture coordinates specified from C++ and QML instead of a pre-baked asset.</db:para>
<db:para>In addition, the <db:link xlink:href="qml-qtquick3d-helpers-gridgeometry.xml">GridGeometry</db:link> is also demonstrated. <db:link xlink:href="qml-qtquick3d-helpers-gridgeometry.xml">GridGeometry</db:link> is a built-in <db:link xlink:href="qquick3dgeometry.xml">QQuick3DGeometry</db:link> implementation that provides a mesh with line primitives suitable for displaying a grid.</db:para>
<db:para>The focus on this example will be on the code that provides the custom geometry, so let's first have a look at the <db:code>ExampleTriangleGeometry</db:code> C++ header file:</db:para>
<db:programlisting language="cpp">class ExampleTriangleGeometry : public QQuick3DGeometry
{
    Q_OBJECT
    QML_NAMED_ELEMENT(ExampleTriangleGeometry)
    Q_PROPERTY(bool normals READ normals WRITE setNormals NOTIFY normalsChanged)
    Q_PROPERTY(float normalXY READ normalXY WRITE setNormalXY NOTIFY normalXYChanged)
    Q_PROPERTY(bool uv READ uv WRITE setUV NOTIFY uvChanged)
    Q_PROPERTY(float uvAdjust READ uvAdjust WRITE setUVAdjust NOTIFY uvAdjustChanged)

public:
    ExampleTriangleGeometry();

    bool normals() const { return m_hasNormals; }
    void setNormals(bool enable);

    float normalXY() const { return m_normalXY; }
    void setNormalXY(float xy);

    bool uv() const { return m_hasUV; }
    void setUV(bool enable);

    float uvAdjust() const { return m_uvAdjust; }
    void setUVAdjust(float f);

signals:
    void normalsChanged();
    void normalXYChanged();
    void uvChanged();
    void uvAdjustChanged();

private:
    void updateData();

    bool m_hasNormals = false;
    float m_normalXY = 0.0f;
    bool m_hasUV = false;
    float m_uvAdjust = 0.0f;
};
</db:programlisting>
<db:para>The most important thing to notice is that our <db:code>ExampleTriangleGeometry</db:code> class inherits from <db:link xlink:href="qquick3dgeometry.xml">QQuick3DGeometry</db:link> and that we call the <db:code>QML_NAMED_ELEMENT(ExampleTriangleGeometry)</db:code> macro, making our class accessible in QML. There are also a few properties defined through the <db:code>Q_PROPERTY</db:code> macro which are automatically exposed in our QML object. Now, let's look at the QML Model:</db:para>
<db:programlisting language="qml">Model {
    id: triangleModel
    visible: false
    scale: Qt.vector3d(100, 100, 100)
    geometry: ExampleTriangleGeometry {
        normals: cbNorm.checked
        normalXY: sliderNorm.value
        uv: cbUV.checked
        uvAdjust: sliderUV.value
    }
    materials: [
        DefaultMaterial {
            Texture {
                id: baseColorMap
                source: &quot;qt_logo_rect.png&quot;
            }
            cullMode: DefaultMaterial.NoCulling
            diffuseMap: cbTexture.checked ? baseColorMap : null
            specularAmount: 0.5
        }
    ]
}
</db:programlisting>
<db:para>Note that we specify the <db:code>geometry</db:code> property to use our <db:code>ExampleTriangleGeometry</db:code> class, with the relevant properties specified. This is all that is needed on the QML side to use a custom geometry.</db:para>
<db:para>Now, lets look at the other important part of the C++ code, namely the <db:code>updateData()</db:code> method. This method creates and uploads the data for our custom geometry whenever a <db:code>ExampleTriangleGeometry</db:code> class is created or any of its QML properties are updated.</db:para>
<db:programlisting language="cpp">void ExampleTriangleGeometry::updateData()
{
    clear();

    int stride = 3 * sizeof(float);
    if (m_hasNormals)
        stride += 3 * sizeof(float);
    if (m_hasUV)
        stride += 2 * sizeof(float);

    QByteArray vertexData(3 * stride, Qt::Initialization::Uninitialized);
    float *p = reinterpret_cast&amp;lt;float *&amp;gt;(vertexData.data());

    // a triangle, front face = counter-clockwise
    *p++ = -1.0f; *p++ = -1.0f; *p++ = 0.0f;
    if (m_hasNormals) {
        *p++ = m_normalXY; *p++ = m_normalXY; *p++ = 1.0f;
    }
    if (m_hasUV) {
        *p++ = 0.0f + m_uvAdjust; *p++ = 0.0f + m_uvAdjust;
    }
    *p++ = 1.0f; *p++ = -1.0f; *p++ = 0.0f;
    if (m_hasNormals) {
        *p++ = m_normalXY; *p++ = m_normalXY; *p++ = 1.0f;
    }
    if (m_hasUV) {
        *p++ = 1.0f - m_uvAdjust; *p++ = 0.0f + m_uvAdjust;
    }
    *p++ = 0.0f; *p++ = 1.0f; *p++ = 0.0f;
    if (m_hasNormals) {
        *p++ = m_normalXY; *p++ = m_normalXY; *p++ = 1.0f;
    }
    if (m_hasUV) {
        *p++ = 1.0f - m_uvAdjust; *p++ = 1.0f - m_uvAdjust;
    }

    setVertexData(vertexData);
    setStride(stride);
    setBounds(QVector3D(-1.0f, -1.0f, 0.0f), QVector3D(+1.0f, +1.0f, 0.0f));

    setPrimitiveType(QQuick3DGeometry::PrimitiveType::Triangles);

    addAttribute(QQuick3DGeometry::Attribute::PositionSemantic,
                 0,
                 QQuick3DGeometry::Attribute::F32Type);

    if (m_hasNormals) {
        addAttribute(QQuick3DGeometry::Attribute::NormalSemantic,
                     3 * sizeof(float),
                     QQuick3DGeometry::Attribute::F32Type);
    }

    if (m_hasUV) {
        addAttribute(QQuick3DGeometry::Attribute::TexCoordSemantic,
                     m_hasNormals ? 6 * sizeof(float) : 3 * sizeof(float),
                     QQuick3DGeometry::Attribute::F32Type);
    }
}
</db:programlisting>
<db:para>The method starts by calling <db:code>clear()</db:code> to clear all previously uploaded data. It then computes the stride for the vertices, taking into account the presence of normals and uv coordinates. Then a byte array is created to hold the vertex buffer, which is then filled with vertices for a single triangle with corners in (-1, -1, 0), (1, -1, 0) and (0, 1, 0).</db:para>
<db:para>Then the vertex data is uploaded and the stride is set by calling <db:code>setVertexData()</db:code> and <db:code>setStride()</db:code>. The bounds of the geometry is set by calling <db:code>setBounds</db:code>. Although not used in this example setting the bounds is needed for shadows to work. Then the primitive type is set by calling <db:code>setPrimitiveType()</db:code>. Lastly, we specify how the attributes for position, normal and uv coords are laid out in memory in the previously uploaded buffer by calling <db:code>addAttribute()</db:code> for each attribute.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="customgeometry/CMakeLists.txt">customgeometry/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customgeometry/Main.qml">customgeometry/Main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customgeometry/TorusMesh.qml">customgeometry/TorusMesh.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customgeometry/customgeometry.pro">customgeometry/customgeometry.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customgeometry/examplegeometry.cpp">customgeometry/examplegeometry.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customgeometry/examplegeometry.h">customgeometry/examplegeometry.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customgeometry/main.cpp">customgeometry/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customgeometry/qmldir">customgeometry/qmldir</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="customgeometry/qt_logo_rect.png">customgeometry/qt_logo_rect.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
