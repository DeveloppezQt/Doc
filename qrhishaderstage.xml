<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRhiShaderStage Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Specifies the type and the shader code for a shader stage in the pipeline.</db:para>
<db:para>This class was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When setting up a <db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link>, a collection of shader stages are specified. The <db:link xlink:href="qrhishaderstage.xml">QRhiShaderStage</db:link> contains a <db:link xlink:href="qshader.xml">QShader</db:link> and some associated metadata, such as the graphics pipeline stage, and the <db:link xlink:href="qshader.xml#Variant-enum">shader variant</db:link> to select. There is no need to specify the shader language or version because the <db:link xlink:href="qrhi.xml">QRhi</db:link> backend in use at runtime will take care of choosing the appropriate shader version from the collection within the <db:link xlink:href="qshader.xml">QShader</db:link>.</db:para>
<db:para>The typical usage is in combination with QRhiGraphicsPipeline::setShaderStages(), shown here with a simple approach to load the <db:link xlink:href="qshader.xml">QShader</db:link> from <db:code>.qsb</db:code> files generated offline or at build time:</db:para>
<db:programlisting language="cpp">QShader getShader(const QString &amp;name)
{
    QFile f(name);
    return f.open(QIODevice::ReadOnly) ? QShader::fromSerialized(f.readAll()) : QShader();
}

QShader vs = getShader(&quot;material.vert.qsb&quot;);
QShader fs = getShader(&quot;material.frag.qsb&quot;);
pipeline-&gt;setShaderStages({
    { QRhiShaderStage::Vertex, vs },
    { QRhiShaderStage::Fragment, fs }
});
</db:programlisting>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Type-enum">
<db:title>enum QRhiShaderStage::Type</db:title>
<db:para>Specifies the type of the shader stage.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhishaderstage.xml">QRhiShaderStage</db:link></db:emphasis>::Vertex</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Vertex stage</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhishaderstage.xml">QRhiShaderStage</db:link></db:emphasis>::TessellationControl</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Tessellation control (hull shader) stage. Must be used only when the <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::Tessellation</db:link> feature is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhishaderstage.xml">QRhiShaderStage</db:link></db:emphasis>::TessellationEvaluation</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Tessellation evaluation (domain shader) stage. Must be used only when the <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::Tessellation</db:link> feature is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhishaderstage.xml">QRhiShaderStage</db:link></db:emphasis>::Fragment</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Fragment (pixel shader) stage</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhishaderstage.xml">QRhiShaderStage</db:link></db:emphasis>::Compute</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Compute stage. Must be used only when the <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::Compute</db:link> feature is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhishaderstage.xml">QRhiShaderStage</db:link></db:emphasis>::Geometry</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Geometry stage. Must be used only when the <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::GeometryShader</db:link> feature is supported.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRhiShaderStage">
<db:title>QRhiShaderStage::QRhiShaderStage(QRhiShaderStage::Type <db:emphasis>type</db:emphasis>, const QShader &amp;<db:emphasis>shader</db:emphasis>, QShader::Variant <db:emphasis>v</db:emphasis> = QShader::StandardShader)</db:title>
<db:para>Constructs a shader stage description with the <db:code role="parameter">type</db:code> of the stage and the <db:code role="parameter">shader</db:code>.</db:para>
<db:para>The shader variant <db:code role="parameter">v</db:code> defaults to <db:link xlink:href="qshader.xml#Variant-enum">QShader::StandardShader</db:link>. A <db:link xlink:href="qshader.xml">QShader</db:link> contains multiple source and binary versions of a shader. In addition, it can also contain variants of the shader with slightly modified code. <db:code role="parameter">v</db:code> can then be used to select the desired variant.</db:para>
</db:section>
</db:section>
</db:article>
