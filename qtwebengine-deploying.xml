<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Deploying Qt WebEngine Applications</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt WebEngine Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The way to package and deploy applications varies between operating systems. For Windows and macOS, <db:link xlink:href="windows-deployment.xml#the-windows-deployment-tool">windeployqt</db:link> and <db:link xlink:href="macos.xml#deploying-applications-on-macos">macdeployqt</db:link> automate the steps to generate a stand-alone application package.</db:para>
<db:para>When manually deploying applications that depend on Qt WebEngine, all the files that are required to run the application have to be included: libraries, QML imports, plugins, and translations.</db:para>
<db:para>For more information, see <db:link xlink:href="deployment.xml">Deploying Qt Applications</db:link>.</db:para>
<db:section xml:id="target-platforms">
<db:title>Target Platforms</db:title>
<db:para>Qt WebEngine does try to support all <db:link xlink:href="supported-platforms.xml">Supported Platforms</db:link> of Qt. However, due to different requirements of Chromium this is not always possible. Known limitations are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt WebEngine currently supports only Windows, Linux, and macOS.</db:para>
</db:listitem>
<db:listitem>
<db:para>On Windows, Qt WebEngine only supports Windows Vista or newer as target platform. Due to use of newer API in Chromium, Windows XP is not supported. WinRT is not supported, either.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="deploying-applications-manually">
<db:title>Deploying Applications Manually</db:title>
<db:para>When manually deploying applications that depend on Qt WebEngine, the following files might have to be deployed:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Libraries</db:para>
</db:listitem>
<db:listitem>
<db:para>QML imports</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt WebEngine process</db:para>
</db:listitem>
<db:listitem>
<db:para>Resources</db:para>
</db:listitem>
<db:listitem>
<db:para>Translations</db:para>
</db:listitem>
<db:listitem>
<db:para>Audio and video codecs</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="deploying-libraries">
<db:title>Deploying Libraries</db:title>
<db:para>The following libraries must be deployed with applications that depend on Qt WebEngine:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtwebenginecore-module.xml">QtWebEngineCore</db:link> library</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebenginewidgets-module.xml">QtWebEngineWidgets</db:link> or <db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link> libraries, depending on application type</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="deploying-qml-imports">
<db:title>Deploying QML Imports</db:title>
<db:para>If Qt Quick integration is used in the application, the <db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link> import directory needs to be deployed.</db:para>
</db:section>
<db:section xml:id="deploying-qt-webengine-processes">
<db:title>Deploying Qt WebEngine Processes</db:title>
<db:para>Qt WebEngine takes advantage of the multi-process model that the Chromium project offers. The multi-process model requires that the Qt WebEngine Process executable be deployed alongside your application.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> process is executed for each <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> or <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> instance. For example, a browser application with two tabs open should have two separate instances of the process running. This is a common approach used by most modern web engines to provide a stable browsing experience.</db:para>
<db:para>At runtime, Qt WebEngine looks for the <db:code>QtWebEngineProcess</db:code> executable in the directory that QLibraryInfo::location(<db:link xlink:href="qlibraryinfo.xml#LibraryPath-enum">QLibraryInfo::LibraryExecutablesPath</db:link>) returns. For Qt installations, this is <db:code>QTDIR/libexec</db:code> (Linux) or <db:code>QTDIR\bin</db:code> (Windows). The path can be changed by defining a <db:code>qt.conf</db:code> file, for example. Alternatively, an executable path can be set as a value of the <db:code>QTWEBENGINEPROCESS_PATH</db:code> environment variable. On macOS, Qt WebEngine looks for the executable in <db:code>.app/Helpers/QtWebEngineProcess</db:code>.</db:para>
</db:section>
<db:section xml:id="deploying-resources">
<db:title>Deploying Resources</db:title>
<db:para>Qt WebEngine requires the following resource files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>qtwebengine_resources.pak</db:code> contains the resources needed by Chromium.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qtwebengine_devtools_resources.pak</db:code> contains tools for remote debugging.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qtwebengine_resources_100p.pak</db:code> contains images suitable for low resolution displays.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qtwebengine_resources_200p.pak</db:code> contains images suitable for high DPI displays.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>icudtl.dat</db:code> provides support for International Components for Unicode (ICU). It is the Chromium version of ICU, which is not needed if Qt WebEngine was configured to use the system ICU.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Resources are searched from the following locations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>On Linux and Windows: the <db:code>resources</db:code> directory in the directory specified by QLibraryInfo::location(<db:link xlink:href="qlibraryinfo.xml#LibraryPath-enum">QLibraryInfo::DataPath</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para>On macOS: <db:code>.app/Content/Resources</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para>The application directory specified by <db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Alternatively, a resources directory path can be set as a value of the <db:code>QTWEBENGINE_RESOURCES_PATH</db:code> environment variable.</db:para>
</db:section>
<db:section xml:id="translations">
<db:title>Translations</db:title>
<db:para>Locale data (such as <db:code>en-US.pak</db:code>) is searched form the following locations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>On macOS: <db:code>.app/Content/Resources</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para>On Linux and Windows: <db:code>qtwebengine_locales</db:code> directory in the directory specified by QLibraryInfo::location(<db:link xlink:href="qlibraryinfo.xml#LibraryPath-enum">QLibraryInfo::TranslationsPath</db:link>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Alternatively, a locales directory path can be set as a value of the <db:code>QTWEBENGINE_LOCALES_PATH</db:code> environment variable.</db:para>
</db:section>
<db:section xml:id="javascript-files-in-qt-resource-files">
<db:title>JavaScript Files in Qt Resource Files</db:title>
<db:para>If your <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> application is built using the Qt Quick Compiler, and the application ships JavaScript files inside .qrc resources, and these files are supposed to be loaded from inside HTML pages, make sure to specify the resource files in a <db:code>QTQUICK_COMPILER_SKIPPED_RESOURCES</db:code> qmake variable inside your project. This prevents the Qt Quick Compiler from trying to generate C++ code for the corresponding JavaScript code, as well as removing the original JavaScript code from the Qt resources file, which would lead to broken HTML pages. For example:</db:para>
<db:programlisting language="cpp">QTQUICK_COMPILER_SKIPPED_RESOURCES += resources/my_resource.qrc
</db:programlisting>
</db:section>
</db:section>
</db:article>
