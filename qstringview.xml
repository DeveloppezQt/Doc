<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringView Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringview.xml">QStringView</db:link> class provides a unified view on UTF-16 strings with a read-only subset of the <db:link xlink:href="qstring.xml">QString</db:link> API.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringView is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="string-processing.xml">Classes for string data</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qstringview.xml">QStringView</db:link> references a contiguous portion of a UTF-16 string it does not own. It acts as an interface type to all kinds of UTF-16 string, without the need to construct a <db:link xlink:href="qstring.xml">QString</db:link> first.</db:para>
<db:para>The UTF-16 string may be represented as an array (or an array-compatible data-structure such as <db:link xlink:href="qstring.xml">QString</db:link>, std::basic_string, etc.) of <db:link xlink:href="qchar.xml">QChar</db:link>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> or (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> is designed as an interface type; its main use-case is as a function parameter type. When QStringViews are used as automatic variables or data members, care must be taken to ensure that the referenced string data (for example, owned by a <db:link xlink:href="qstring.xml">QString</db:link>) outlives the <db:link xlink:href="qstringview.xml">QStringView</db:link> on all code paths, lest the string view ends up referencing deleted data.</db:para>
<db:para>When used as an interface type, <db:link xlink:href="qstringview.xml">QStringView</db:link> allows a single function to accept a wide variety of UTF-16 string data sources. One function accepting <db:link xlink:href="qstringview.xml">QStringView</db:link> thus replaces three function overloads (taking <db:link xlink:href="qstring.xml">QString</db:link> and <db:code>(const QChar*, qsizetype)</db:code>), while at the same time enabling even more string data sources to be passed to the function, such as <db:code>u&quot;Hello World&quot;</db:code>, a <db:code>char16_t</db:code> string literal.</db:para>
<db:para>QStringViews should be passed by value, not by reference-to-const:</db:para>
<db:programlisting language="cpp">    void myfun1(QStringView sv);        // preferred
    void myfun2(const QStringView &amp;sv); // compiles and works, but slower
</db:programlisting>
<db:para>If you want to give your users maximum freedom in what strings they can pass to your function, accompany the <db:link xlink:href="qstringview.xml">QStringView</db:link> overload with overloads for</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>QChar</db:emphasis>: this overload can delegate to the <db:link xlink:href="qstringview.xml">QStringView</db:link> version:</db:para>
<db:programlisting language="cpp">    void fun(QChar ch) { fun(QStringView(&amp;ch, 1)); }
</db:programlisting>
<db:para>even though, for technical reasons, <db:link xlink:href="qstringview.xml">QStringView</db:link> cannot provide a <db:link xlink:href="qchar.xml">QChar</db:link> constructor by itself.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>QString</db:emphasis>: if you store an unmodified copy of the string and thus would like to take advantage of <db:link xlink:href="qstring.xml">QString</db:link>'s implicit sharing.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link>: if you can implement the function without converting the <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link> to UTF-16 first; users expect a function overloaded on <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link> to perform strictly less memory allocations than the semantically equivalent call of the <db:link xlink:href="qstringview.xml">QStringView</db:link> version, involving construction of a <db:link xlink:href="qstring.xml">QString</db:link> from the <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> can also be used as the return value of a function. If you call a function returning <db:link xlink:href="qstringview.xml">QStringView</db:link>, take extra care to not keep the <db:link xlink:href="qstringview.xml">QStringView</db:link> around longer than the function promises to keep the referenced string data alive. If in doubt, obtain a strong reference to the data by calling <db:link xlink:href="qstringview.xml#toString">toString</db:link>() to convert the <db:link xlink:href="qstringview.xml">QStringView</db:link> into a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> is a <db:emphasis>Literal Type</db:emphasis>, but since it stores data as <db:code>char16_t</db:code>, iteration is not <db:code>constexpr</db:code> (casts from <db:code>const char16_t*</db:code> to <db:code>const QChar*</db:code>, which is not allowed in <db:code>constexpr</db:code> functions). You can use an indexed loop and/or <db:link xlink:href="qstringview.xml#utf16">utf16</db:link>() in <db:code>constexpr</db:code> contexts instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml">QString</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>QStringView::const_iterator</db:title>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#iterator-typedef">iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>QStringView::const_pointer</db:title>
<db:para>Alias for <db:code>value_type *</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>QStringView::const_reference</db:title>
<db:para>Alias for <db:code>value_type &amp;</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>QStringView::const_reverse_iterator</db:title>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>QStringView::difference_type</db:title>
<db:para>Alias for <db:code>std::ptrdiff_t</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>QStringView::iterator</db:title>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable iterators, so this is the same as <db:link xlink:href="qstringview.xml#const_iterator-typedef">const_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>QStringView::pointer</db:title>
<db:para>Alias for <db:code>value_type *</db:code>. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable pointers, so this is the same as <db:link xlink:href="qstringview.xml#const_pointer-typedef">const_pointer</db:link>.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>QStringView::reference</db:title>
<db:para>Alias for <db:code>value_type &amp;</db:code>. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable references, so this is the same as <db:link xlink:href="qstringview.xml#const_reference-typedef">const_reference</db:link>.</db:para>
</db:section>
<db:section xml:id="reverse_iterator-typedef">
<db:title>QStringView::reverse_iterator</db:title>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable reverse iterators, so this is the same as <db:link xlink:href="qstringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#iterator-typedef">iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>QStringView::size_type</db:title>
<db:para>Alias for qsizetype. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="storage_type-typedef">
<db:title>QStringView::storage_type</db:title>
<db:para>Alias for <db:code>char16_t</db:code>.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>QStringView::value_type</db:title>
<db:para>Alias for <db:code>const QChar</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="split">
<db:title>[since 6.0] QList&lt;QStringView&gt; QStringView::split(QChar <db:emphasis>sep</db:emphasis>, Qt::SplitBehavior <db:emphasis>behavior</db:emphasis> = Qt::KeepEmptyParts, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="split-1">[since 6.0] QList&lt;QStringView&gt; QStringView::split(QStringView <db:emphasis>sep</db:emphasis>, Qt::SplitBehavior <db:emphasis>behavior</db:emphasis> = Qt::KeepEmptyParts, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Splits the view into substring views wherever <db:code role="parameter">sep</db:code> occurs, and returns the list of those string views.</db:para>
<db:para>See <db:link xlink:href="qstring.xml#split">QString::split</db:link>() for how <db:code role="parameter">sep</db:code>, <db:code role="parameter">behavior</db:code> and <db:code role="parameter">cs</db:code> interact to form the result.</db:para>
<db:note>
<db:para>All the returned views are valid as long as the data referenced by this string view is valid. Destroying the data will cause all views to become dangling.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="arg">
<db:title>QString QStringView::arg(Args &amp;&amp;... <db:emphasis>args</db:emphasis>) const</db:title>
<db:para>Replaces occurrences of <db:code>%N</db:code> in this string with the corresponding argument from <db:code role="parameter">args</db:code>. The arguments are not positional: the first of the <db:code role="parameter">args</db:code> replaces the <db:code>%N</db:code> with the lowest <db:code>N</db:code> (all of them), the second of the <db:code role="parameter">args</db:code> the <db:code>%N</db:code> with the next-lowest <db:code>N</db:code> etc.</db:para>
<db:para><db:code>Args</db:code> can consist of anything that implicitly converts to <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link>.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.9, <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> and UTF-8 strings (<db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>, <db:code>const char8_t*</db:code>, etc) were not supported as <db:code role="parameter">args</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#arg">QString::arg</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare">
<db:title>[constexpr noexcept] int QStringView::compare(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="compare-1">[noexcept] int QStringView::compare(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="compare-2">[noexcept] int QStringView::compare(QLatin1StringView <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Compares this string view to the Latin-1 string view <db:code role="parameter">l1</db:code>, or the character <db:code role="parameter">ch</db:code>. Returns a negative integer if this string view is less than <db:code role="parameter">l1</db:code> or <db:code role="parameter">ch</db:code>, a positive integer if it is greater than <db:code role="parameter">l1</db:code> or <db:code role="parameter">ch</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the comparison is case-sensitive; otherwise the comparison is case-insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#operator-eq-eq">operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#operator-lt">operator&lt;</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#operator-gt">operator&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith">
<db:title>[noexcept] bool QStringView::startsWith(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="startsWith-1">[noexcept] bool QStringView::startsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="startsWith-2">[noexcept] bool QStringView::startsWith(QLatin1StringView <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="startsWith-3">[noexcept] bool QStringView::startsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this string view starts with the UTF-16 string viewed by <db:code role="parameter">str</db:code>, the Latin-1 string viewed by <db:code role="parameter">l1</db:code>, or the character <db:code role="parameter">ch</db:code> respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith">
<db:title>[noexcept] bool QStringView::endsWith(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="endsWith-1">[noexcept] bool QStringView::endsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="endsWith-2">[noexcept] bool QStringView::endsWith(QLatin1StringView <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="endsWith-3">[noexcept] bool QStringView::endsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this string view ends with the UTF-16 string viewed by <db:code role="parameter">str</db:code>, the Latin-1 string viewed by <db:code role="parameter">l1</db:code>, or the character <db:code role="parameter">ch</db:code> respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>[noexcept] qsizetype QStringView::indexOf(QChar <db:emphasis>c</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="indexOf-1">[noexcept] qsizetype QStringView::indexOf(QLatin1StringView <db:emphasis>l1</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="indexOf-2">[noexcept] qsizetype QStringView::indexOf(QStringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns the index position of the first occurrence of the UTF-16 string viewed by <db:code role="parameter">str</db:code>, the Latin-1 string viewed by <db:code role="parameter">l1</db:code>, or the character <db:code role="parameter">ch</db:code> respectively, in this string view, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code>, <db:code role="parameter">l1</db:code> or <db:code role="parameter">ch</db:code> is not found, respectively.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#indexOf">QString::indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>[noexcept] bool QStringView::contains(QChar <db:emphasis>c</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="contains-1">[noexcept] bool QStringView::contains(QLatin1StringView <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="contains-2">[noexcept] bool QStringView::contains(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this string view contains an occurrence of the UTF-16 string viewed by <db:code role="parameter">str</db:code>, the Latin-1 string viewed by <db:code role="parameter">l1</db:code>, or the character <db:code role="parameter">ch</db:code> respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-1">
<db:title>[noexcept] qsizetype QStringView::lastIndexOf(QChar <db:emphasis>c</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="lastIndexOf-2">[noexcept] qsizetype QStringView::lastIndexOf(QLatin1StringView <db:emphasis>l1</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="lastIndexOf-3">[noexcept] qsizetype QStringView::lastIndexOf(QStringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns the index position of the last occurrence of the UTF-16 string viewed by <db:code role="parameter">str</db:code>, the Latin-1 string viewed by <db:code role="parameter">l1</db:code>, or the character <db:code role="parameter">ch</db:code> respectively, in this string view, searching backward from index position <db:code role="parameter">from</db:code>.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:para>Returns -1 if <db:code role="parameter">str</db:code>, <db:code role="parameter">l1</db:code> or <db:code role="parameter">c</db:code> is not found, respectively.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:note>
<db:para>When searching for a 0-length <db:code role="parameter">str</db:code> or <db:code role="parameter">l1</db:code>, the match at the end of the data is excluded from the search by a negative <db:code role="parameter">from</db:code>, even though <db:code>-1</db:code> is normally thought of as searching from the end of the string view: the match at the end is <db:emphasis>after</db:emphasis> the last character, so it is excluded. To include such a final empty match, either give a positive value for <db:code role="parameter">from</db:code> or omit the <db:code role="parameter">from</db:code> parameter entirely.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#lastIndexOf">QString::lastIndexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-6">
<db:title>[noexcept, since 6.2] qsizetype QStringView::lastIndexOf(QLatin1StringView <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="lastIndexOf-7">[noexcept, since 6.2] qsizetype QStringView::lastIndexOf(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>This function overloads <db:link xlink:href="qstringview.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the UTF-16 string viewed by <db:code role="parameter">str</db:code> or the Latin-1 string viewed by <db:code role="parameter">l1</db:code> respectively, in this string view searching backward from the last character of this string view. Returns -1 if <db:code role="parameter">str</db:code> or <db:code role="parameter">l1</db:code> is not found, respectively.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#lastIndexOf">QString::lastIndexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tokenize">
<db:title>[constexpr noexcept(...), since 6.0] auto QStringView::tokenize(Needle &amp;&amp;<db:emphasis>sep</db:emphasis>, Flags... <db:emphasis>flags</db:emphasis>) const</db:title>
<db:para>Splits the string into substring views wherever <db:code role="parameter">sep</db:code> occurs, and returns a lazy sequence of those strings.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">return QStringTokenizer{std::forward&lt;Needle&gt;(sep), flags...};
</db:programlisting>
<db:para>except it works without C++17 Class Template Argument Deduction (CTAD) enabled in the compiler.</db:para>
<db:para>See <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> for how <db:code role="parameter">sep</db:code> and <db:code role="parameter">flags</db:code> interact to form the result.</db:para>
<db:note>
<db:para>While this function returns <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link>, you should never, ever, name its template arguments explicitly. If you can use C++17 Class Template Argument Deduction (CTAD), you may write</db:para>
</db:note>
<db:programlisting language="cpp">QStringTokenizer result = sv.tokenize(sep);
</db:programlisting>
<db:para>(without template arguments). If you can't use C++17 CTAD, you must store the return value only in <db:code>auto</db:code> variables:</db:para>
<db:programlisting language="cpp">auto result = sv.tokenize(sep);
</db:programlisting>
<db:para>This is because the template arguments of <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> have a very subtle dependency on the specific <db:link xlink:href="qstringview.xml#tokenize">tokenize</db:link>() overload from which they are returned, and they don't usually correspond to the type used for the separator.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link></db:member>
<db:member><db:link xlink:href="qstringtokenizer.xml#qTokenize">qTokenize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView">
<db:title>[constexpr noexcept] QStringView::QStringView()</db:title>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView-1">
<db:title>[constexpr noexcept] QStringView::QStringView(const Char (&amp;)[N] <db:emphasis>string</db:emphasis>)</db:title>
<db:para>Constructs a string view on the character string literal <db:code role="parameter">string</db:code>. The view covers the array until the first <db:code>Char(0)</db:code> is encountered, or <db:code>N</db:code>, whichever comes first. If you need the full array, use <db:link xlink:href="qstringview.xml#fromArray">fromArray</db:link>() instead.</db:para>
<db:para><db:code role="parameter">string</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#fromArray">fromArray</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView-2">
<db:title>[constexpr noexcept] QStringView::QStringView(const Char *<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>. The length is determined by scanning for the first <db:code>Char(0)</db:code>.</db:para>
<db:para><db:code role="parameter">str</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">str</db:code> is safe and results in a null string view.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
</db:section>
</db:section>
<db:section xml:id="QStringView-3">
<db:title>[constexpr noexcept] QStringView::QStringView(const Container &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>. The length is taken from <db:code>std::size(str)</db:code>.</db:para>
<db:para><db:code>std::data(str)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>The string view will be empty if and only if <db:code>std::size(str) == 0</db:code>. It is unspecified whether this constructor can result in a null string view (<db:code>std::data(str)</db:code> would have to return <db:code>nullptr</db:code> for this).</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if <db:code>Container</db:code> is a container with a compatible character type as <db:code>value_type</db:code>. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView-4">
<db:title>[noexcept] QStringView::QStringView(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>.</db:para>
<db:para><db:code>str.data()</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>The string view will be null if and only if <db:code>str.isNull()</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringView-5">
<db:title>[constexpr noexcept] QStringView::QStringView(<db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView-6">
<db:title>[constexpr] QStringView::QStringView(const Char *<db:emphasis>first</db:emphasis>, const Char *<db:emphasis>last</db:emphasis>)</db:title>
<db:para>Constructs a string view on <db:code role="parameter">first</db:code> with length (<db:code role="parameter">last</db:code> - <db:code role="parameter">first</db:code>).</db:para>
<db:para>The range <db:code>[first,last)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>\nullptr</db:code> as <db:code role="parameter">first</db:code> is safe if <db:code role="parameter">last</db:code> is <db:code>nullptr</db:code>, too, and results in a null string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">last</db:code> precedes <db:code role="parameter">first</db:code>, or <db:code role="parameter">first</db:code> is <db:code>nullptr</db:code> and <db:code role="parameter">last</db:code> is not.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
</db:section>
</db:section>
<db:section xml:id="QStringView-7">
<db:title>[constexpr] QStringView::QStringView(const Char *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code> with length <db:code role="parameter">len</db:code>.</db:para>
<db:para>The range <db:code>[str,len)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">str</db:code> is safe if <db:code role="parameter">len</db:code> is 0, too, and results in a null string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">len</db:code> is negative or, when positive, if <db:code role="parameter">str</db:code> is <db:code>nullptr</db:code>.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>[constexpr noexcept] QChar QStringView::at(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:para>Returns the character at position <db:code role="parameter">n</db:code> in this string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">n</db:code> is negative or not less than <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="back">
<db:title>[constexpr] QChar QStringView::back() const</db:title>
<db:para>Returns the last character in the string view. Same as <db:link xlink:href="qstringview.xml#last">last</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>[noexcept] QStringView::const_iterator QStringView::begin() const</db:title>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first character in the string view.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cbegin">
<db:title>[noexcept] QStringView::const_iterator QStringView::cbegin() const</db:title>
<db:para>Same as <db:link xlink:href="qstringview.xml#begin">begin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>[noexcept] QStringView::const_iterator QStringView::cend() const</db:title>
<db:para>Same as <db:link xlink:href="qstringview.xml#end">end</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crend">crend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chop">
<db:title>[constexpr noexcept] void QStringView::chop(qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Truncates this string view by <db:code role="parameter">length</db:code> characters.</db:para>
<db:para>Same as <db:code>*this = left(size() - length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#mid" role="deprecated">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#left" role="deprecated">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#right" role="deprecated">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#slice">slice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chopped">
<db:title>[constexpr noexcept] QStringView QStringView::chopped(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:para>Returns the substring of length <db:link xlink:href="qstringview.xml#size">size</db:link>() - <db:code role="parameter">length</db:code> starting at the beginning of this object.</db:para>
<db:para>Same as <db:code>left(size() - length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#mid" role="deprecated">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#left" role="deprecated">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#right" role="deprecated">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#slice">slice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare-3">
<db:title>[noexcept] int QStringView::compare(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Compares this string view with string view <db:code role="parameter">str</db:code> and returns a negative integer if this string view is less than <db:code role="parameter">str</db:code>, a positive integer if it is greater than <db:code role="parameter">str</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the comparison is case-sensitive; otherwise the comparison is case-insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#operator-eq-eq">operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#operator-lt">operator&lt;</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#operator-gt">operator&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare-4">
<db:title>[noexcept, since 6.5] int QStringView::compare(QUtf8StringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Compares this string view with <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> <db:code role="parameter">str</db:code> and returns a negative integer if this string view is less than <db:code role="parameter">str</db:code>, a positive integer if it is greater than <db:code role="parameter">str</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the comparison is case-sensitive; otherwise the comparison is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#operator-eq-eq">operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#operator-lt">operator&lt;</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#operator-gt">operator&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constBegin">
<db:title>[noexcept, since 6.1] QStringView::const_iterator QStringView::constBegin() const</db:title>
<db:para>Same as <db:link xlink:href="qstringview.xml#begin">begin</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constData">
<db:title>[noexcept, since 6.0] QStringView::const_pointer QStringView::constData() const</db:title>
<db:para>Returns a const pointer to the first character in the string view.</db:para>
<db:note>
<db:para>The character array represented by the return value is <db:emphasis>not</db:emphasis> null-terminated.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#utf16">utf16</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constEnd">
<db:title>[noexcept, since 6.1] QStringView::const_iterator QStringView::constEnd() const</db:title>
<db:para>Same as <db:link xlink:href="qstringview.xml#end">end</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crend">crend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-3">
<db:title>[since 6.1] bool QStringView::contains(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, QRegularExpressionMatch *<db:emphasis>rmatch</db:emphasis> = nullptr) const</db:title>
<db:para>Returns <db:code>true</db:code> if the regular expression <db:code role="parameter">re</db:code> matches somewhere in this string view; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If the match is successful and <db:code role="parameter">rmatch</db:code> is not <db:code>nullptr</db:code>, it also writes the results of the match into the <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object pointed to by <db:code role="parameter">rmatch</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>[since 6.1] qsizetype QStringView::count(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>) const</db:title>
<db:para>Returns the number of times the regular expression <db:code role="parameter">re</db:code> matches in the string view.</db:para>
<db:para>For historical reasons, this function counts overlapping matches. This behavior is different from simply iterating over the matches in the string view using <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-1">
<db:title>[noexcept, since 6.0] qsizetype QStringView::count(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringview.xml#count">count</db:link>().</db:para>
<db:para>Returns the number of occurrences of the character <db:code role="parameter">ch</db:code> in the string view.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#count-1" role="deprecated">QString::count</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-2">
<db:title>[since 6.4] qsizetype QStringView::count(QLatin1StringView <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringview.xml#count">count</db:link>().</db:para>
<db:para>Returns the number of (potentially overlapping) occurrences of the Latin-1 string viewed by <db:code role="parameter">l1</db:code> in this string view.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#count-1" role="deprecated">QString::count</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-3">
<db:title>[noexcept, since 6.0] qsizetype QStringView::count(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringview.xml#count">count</db:link>().</db:para>
<db:para>Returns the number of (potentially overlapping) occurrences of the string view <db:code role="parameter">str</db:code> in this string view.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#count-1" role="deprecated">QString::count</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crbegin">
<db:title>[noexcept] QStringView::const_reverse_iterator QStringView::crbegin() const</db:title>
<db:para>Same as <db:link xlink:href="qstringview.xml#rbegin">rbegin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cbegin">cbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crend">
<db:title>[noexcept] QStringView::const_reverse_iterator QStringView::crend() const</db:title>
<db:para>Same as <db:link xlink:href="qstringview.xml#rend">rend</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cend">cend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[noexcept] QStringView::const_pointer QStringView::data() const</db:title>
<db:para>Returns a const pointer to the first character in the string view.</db:para>
<db:note>
<db:para>The character array represented by the return value is <db:emphasis>not</db:emphasis> null-terminated.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#utf16">utf16</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="empty">
<db:title>[constexpr noexcept] bool QStringView::empty() const</db:title>
<db:para>Returns whether this string view is empty - that is, whether <db:code>size() == 0</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>[noexcept] QStringView::const_iterator QStringView::end() const</db:title>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary character after the last character in the list.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first">
<db:title>[constexpr] QChar QStringView::first() const</db:title>
<db:para>Returns the first character in the string view. Same as <db:link xlink:href="qstringview.xml#front">front</db:link>().</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first-1">
<db:title>[constexpr noexcept, since 6.0] QStringView QStringView::first(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:para>Returns a string view that points to the first <db:code role="parameter">n</db:code> characters of this string view.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#startsWith">startsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#slice">slice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromArray">
<db:title>[static constexpr noexcept] QStringView QStringView::fromArray(const Char (&amp;)[Size] <db:emphasis>string</db:emphasis>)</db:title>
<db:para>Constructs a string view on the full character string literal <db:code role="parameter">string</db:code>, including any trailing <db:code>Char(0)</db:code>. If you don't want the null-terminator included in the view then you can <db:link xlink:href="qstringview.xml#chop">chop</db:link>() it off when you are certain it is at the end. Alternatively you can use the constructor overload taking an array literal which will create a view up to, but not including, the first null-terminator in the data.</db:para>
<db:para><db:code role="parameter">string</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>This function will work with any array literal if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section xml:id="front">
<db:title>[constexpr] QChar QStringView::front() const</db:title>
<db:para>Returns the first character in the string view. Same as <db:link xlink:href="qstringview.xml#first">first</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-3">
<db:title>[since 6.1] qsizetype QStringView::indexOf(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, QRegularExpressionMatch *<db:emphasis>rmatch</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the index position of the first match of the regular expression <db:code role="parameter">re</db:code> in the string view, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">re</db:code> didn't match anywhere.</db:para>
<db:para>If the match is successful and <db:code role="parameter">rmatch</db:code> is not <db:code>nullptr</db:code>, it also writes the results of the match into the <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object pointed to by <db:code role="parameter">rmatch</db:code>.</db:para>
<db:note>
<db:para>Due to how the regular expression matching algorithm works, this function will actually match repeatedly from the beginning of the string view until the position <db:code role="parameter">from</db:code> is reached.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[constexpr noexcept] bool QStringView::isEmpty() const</db:title>
<db:para>Returns whether this string view is empty - that is, whether <db:code>size() == 0</db:code>.</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLower">
<db:title>[noexcept, since 6.7] bool QStringView::isLower() const</db:title>
<db:para>Returns <db:code>true</db:code> if this view is identical to its lowercase folding.</db:para>
<db:para>Note that this does <db:emphasis>not</db:emphasis> mean that the string view does not contain uppercase letters (some uppercase letters do not have a lowercase folding; they are left unchanged by <db:link xlink:href="qstringview.xml#toString">toString</db:link>().toLower()). For more information, refer to the Unicode standard, section 3.13.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#toLower">QChar::toLower</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isUpper">isUpper</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr noexcept] bool QStringView::isNull() const</db:title>
<db:para>Returns whether this string view is null - that is, whether <db:code>data() == nullptr</db:code>.</db:para>
<db:para>This functions is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRightToLeft">
<db:title>[noexcept] bool QStringView::isRightToLeft() const</db:title>
<db:para>Returns <db:code>true</db:code> if the string view is read right to left.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#isRightToLeft">QString::isRightToLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUpper">
<db:title>[noexcept, since 6.7] bool QStringView::isUpper() const</db:title>
<db:para>Returns <db:code>true</db:code> if this view is identical to its uppercase folding.</db:para>
<db:para>Note that this does <db:emphasis>not</db:emphasis> mean that the the string view does not contain lowercase letters (some lowercase letters do not have a uppercase folding; they are left unchanged by <db:link xlink:href="qstringview.xml#toString">toString</db:link>().toUpper()). For more information, refer to the Unicode standard, section 3.13.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#toUpper">QChar::toUpper</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isLower">isLower</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValidUtf16">
<db:title>[noexcept] bool QStringView::isValidUtf16() const</db:title>
<db:para>Returns <db:code>true</db:code> if the string view contains valid UTF-16 encoded data, or <db:code>false</db:code> otherwise.</db:para>
<db:para>Note that this function does not perform any special validation of the data; it merely checks if it can be successfully decoded from UTF-16. The data is assumed to be in host byte order; the presence of a BOM is meaningless.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#isValidUtf16">QString::isValidUtf16</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="last">
<db:title>[constexpr] QChar QStringView::last() const</db:title>
<db:para>Returns the last character in the string view. Same as <db:link xlink:href="qstringview.xml#back">back</db:link>().</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="last-1">
<db:title>[constexpr noexcept, since 6.0] QStringView QStringView::last(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:para>Returns a string view that points to the last <db:code role="parameter">n</db:code> characters of this string view.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#slice">slice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf">
<db:title>[since 6.2] qsizetype QStringView::lastIndexOf(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, QRegularExpressionMatch *<db:emphasis>rmatch</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the index position of the last match of the regular expression <db:code role="parameter">re</db:code> in the string view. Returns -1 if <db:code role="parameter">re</db:code> didn't match anywhere.</db:para>
<db:para>If the match is successful and <db:code role="parameter">rmatch</db:code> is not <db:code>nullptr</db:code>, it also writes the results of the match into the <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object pointed to by <db:code role="parameter">rmatch</db:code>.</db:para>
<db:note>
<db:para>Due to how the regular expression matching algorithm works, this function will actually match repeatedly from the beginning of the string view until the end of the string view is reached.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="lastIndexOf-4">
<db:title>[since 6.1] qsizetype QStringView::lastIndexOf(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis>, QRegularExpressionMatch *<db:emphasis>rmatch</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the index position of the last match of the regular expression <db:code role="parameter">re</db:code> in the string view, which starts before the index position <db:code role="parameter">from</db:code>.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:para>Returns -1 if <db:code role="parameter">re</db:code> didn't match anywhere.</db:para>
<db:para>If the match is successful and <db:code role="parameter">rmatch</db:code> is not <db:code>nullptr</db:code>, it also writes the results of the match into the <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object pointed to by <db:code role="parameter">rmatch</db:code>.</db:para>
<db:note>
<db:para>Due to how the regular expression matching algorithm works, this function will actually match repeatedly from the beginning of the string view until the position <db:code role="parameter">from</db:code> is reached.</db:para>
</db:note>
<db:note>
<db:para>When searching for a regular expression <db:code role="parameter">re</db:code> that may match 0 characters, the match at the end of the data is excluded from the search by a negative <db:code role="parameter">from</db:code>, even though <db:code>-1</db:code> is normally thought of as searching from the end of the string view: the match at the end is <db:emphasis>after</db:emphasis> the last character, so it is excluded. To include such a final empty match, either give a positive value for <db:code role="parameter">from</db:code> or omit the <db:code role="parameter">from</db:code> parameter entirely.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="lastIndexOf-5">
<db:title>[noexcept, since 6.3] qsizetype QStringView::lastIndexOf(QChar <db:emphasis>c</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringview.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>[constexpr noexcept] qsizetype QStringView::length() const</db:title>
<db:para>Same as <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare">
<db:title>[since 6.4] int QStringView::localeAwareCompare(QStringView <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compares this string view with the <db:code role="parameter">other</db:code> string view and returns an integer less than, equal to, or greater than zero if this string view is less than, equal to, or greater than the <db:code role="parameter">other</db:code> string view.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxSize">
<db:title>[static constexpr noexcept, since 6.8] qsizetype QStringView::maxSize()</db:title>
<db:para>It returns the maximum number of elements that the view can theoretically represent. In practice, the number can be much smaller, limited by the amount of memory available to the system.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="max_size">
<db:title>[constexpr noexcept, since 6.8] qsizetype QStringView::max_size() const</db:title>
<db:para>This function is provided for STL compatibility.</db:para>
<db:para>Returns <db:link xlink:href="qstringview.xml#maxSize">maxSize</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="rbegin">
<db:title>[noexcept] QStringView::const_reverse_iterator QStringView::rbegin() const</db:title>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to the first character in the string view, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rend">
<db:title>[noexcept] QStringView::const_reverse_iterator QStringView::rend() const</db:title>
<db:para>Returns a <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to one past the last character in the string view, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[constexpr noexcept] qsizetype QStringView::size() const</db:title>
<db:para>Returns the size of this string view, in UTF-16 code units (that is, surrogate pairs count as two for the purposes of this function, the same as in <db:link xlink:href="qstring.xml">QString</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="slice">
<db:title>[constexpr, since 6.8] QStringView &amp;QStringView::slice(qsizetype <db:emphasis>pos</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>)</db:title>
<db:para>Modifies this string view to start from position <db:code role="parameter">pos</db:code>, extending for <db:code role="parameter">n</db:code> code points.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0, <db:code role="parameter">n</db:code> &lt; 0, or <db:code role="parameter">pos</db:code> + <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="slice-1">
<db:title>[constexpr, since 6.8] QStringView &amp;QStringView::slice(qsizetype <db:emphasis>pos</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Modifies this string view to start from position <db:code role="parameter">pos</db:code>, extending to its end.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0 or <db:code role="parameter">pos</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced">
<db:title>[constexpr noexcept, since 6.0] QStringView QStringView::sliced(qsizetype <db:emphasis>pos</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:para>Returns a string view that points to <db:code role="parameter">n</db:code> characters of this string view, starting at position <db:code role="parameter">pos</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0, <db:code role="parameter">n</db:code> &lt; 0, or <db:code role="parameter">pos</db:code> + <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#slice">slice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced-1">
<db:title>[constexpr noexcept, since 6.0] QStringView QStringView::sliced(qsizetype <db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a string view starting at position <db:code role="parameter">pos</db:code> in this object, and extending to its end.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0 or <db:code role="parameter">pos</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#slice">slice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="split-2">
<db:title>[since 6.0] QList&lt;QStringView&gt; QStringView::split(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, Qt::SplitBehavior <db:emphasis>behavior</db:emphasis> = Qt::KeepEmptyParts) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Splits the string into substring views wherever the regular expression <db:code role="parameter">re</db:code> matches, and returns the list of those strings. If <db:code role="parameter">re</db:code> does not match anywhere in the string, <db:link xlink:href="qstringview.xml#split">split</db:link>() returns a single-element list containing this string as view.</db:para>
<db:note>
<db:para>The views in the returned list are sub-views of this view; as such, they reference the same data as it and only remain valid for as long as that data remains live.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="toCFString">
<db:title>[since 6.0] CFStringRef QStringView::toCFString() const</db:title>
<db:para>Creates a CFString from this <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:para>The caller owns the CFString and is responsible for releasing it.</db:para>
<db:note>
<db:para>this function is only available on macOS and iOS.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="toDouble">
<db:title>[since 6.0] double QStringView::toDouble(bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the string view converted to a <db:code>double</db:code> value.</db:para>
<db:para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toDouble">QLocale::toDouble</db:link>()</db:para>
<db:para>For historic reasons, this function does not handle thousands group separators. If you need to convert such numbers, use <db:link xlink:href="qlocale.xml#toDouble">QLocale::toDouble</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toDouble">QString::toDouble</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFloat">
<db:title>[since 6.0] float QStringView::toFloat(bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the string view converted to a <db:code>float</db:code> value.</db:para>
<db:para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toFloat">QLocale::toFloat</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toFloat">QString::toFloat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toInt">
<db:title>[since 6.0] int QStringView::toInt(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string view converted to an <db:code>int</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: if the string view begins with &quot;0x&quot;, base 16 is used; otherwise, if the string view begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toInt">QLocale::toInt</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toInt">QString::toInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLatin1">
<db:title>QByteArray QStringView::toLatin1() const</db:title>
<db:para>Returns a Latin-1 representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>The behavior is undefined if the string contains non-Latin1 characters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLocal8Bit">
<db:title>QByteArray QStringView::toLocal8Bit() const</db:title>
<db:para>Returns a local 8-bit representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>On Unix systems this is equivalen to <db:link xlink:href="qstringview.xml#toUtf8">toUtf8</db:link>(), on Windows the systems current code page is being used.</db:para>
<db:para>The behavior is undefined if the string contains characters not supported by the locale's 8-bit encoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLong">
<db:title>[since 6.0] long QStringView::toLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string view converted to a <db:code>long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: if the string view begins with &quot;0x&quot;, base 16 is used; otherwise, if the string view begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toLong">QLocale::toLong</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toLong">QString::toLong</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLongLong">
<db:title>[since 6.0] qlonglong QStringView::toLongLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string view converted to a <db:code>long long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: if the string view begins with &quot;0x&quot;, base 16 is used; otherwise, if the string view begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toLongLong">QLocale::toLongLong</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toLongLong">QString::toLongLong</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNSString">
<db:title>[since 6.0] NSString *QStringView::toNSString() const</db:title>
<db:para>Creates an NSString from this <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:para>The NSString is autoreleased.</db:para>
<db:note>
<db:para>this function is only available on macOS and iOS.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="toShort">
<db:title>[since 6.0] short QStringView::toShort(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string view converted to a <db:code>short</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: if the string view begins with &quot;0x&quot;, base 16 is used; otherwise, if the string view begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toShort">QLocale::toShort</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toShort">QString::toShort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QStringView::toString() const</db:title>
<db:para>Returns a deep copy of this string view's data as a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>The return value will be the null <db:link xlink:href="qstring.xml">QString</db:link> if and only if this string view is null.</db:para>
</db:section>
<db:section xml:id="toUInt">
<db:title>[since 6.0] uint QStringView::toUInt(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string view converted to an <db:code>unsigned int</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: if the string view begins with &quot;0x&quot;, base 16 is used; otherwise, if the string view begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toUInt">QLocale::toUInt</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toUInt">QString::toUInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toULong">
<db:title>[since 6.0] ulong QStringView::toULong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string view converted to an <db:code>unsigned long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: if the string view begins with &quot;0x&quot;, base 16 is used; otherwise, if the string view begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toULongLong">QLocale::toULongLong</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toULong">QString::toULong</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toULongLong">
<db:title>[since 6.0] qulonglong QStringView::toULongLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string view converted to an <db:code>unsigned long long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: if the string view begins with &quot;0x&quot;, base 16 is used; otherwise, if the string view begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toULongLong">QLocale::toULongLong</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toULongLong">QString::toULongLong</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUShort">
<db:title>[since 6.0] ushort QStringView::toUShort(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string view converted to an <db:code>unsigned short</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: if the string view begins with &quot;0x&quot;, base 16 is used; otherwise, if the string view begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use <db:link xlink:href="qlocale.xml#toUShort">QLocale::toUShort</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toUShort">QString::toUShort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUcs4">
<db:title>QList&lt;uint&gt; QStringView::toUcs4() const</db:title>
<db:para>Returns a UCS-4/UTF-32 representation of the string view as a <db:link xlink:href="qlist.xml">QList</db:link>&lt;uint&gt;.</db:para>
<db:para>UCS-4 is a Unicode codec and therefore it is lossless. All characters from this string view will be encoded in UCS-4. Any invalid sequence of code units in this string view is replaced by the Unicode replacement character (<db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::ReplacementCharacter</db:link>, which corresponds to <db:code>U+FFFD</db:code>).</db:para>
<db:para>The returned list is not 0-terminated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUtf8">
<db:title>QByteArray QStringView::toUtf8() const</db:title>
<db:para>Returns a UTF-8 representation of the string view as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>UTF-8 is a Unicode codec and can represent all characters in a Unicode string like <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toWCharArray">
<db:title>qsizetype QStringView::toWCharArray(wchar_t *<db:emphasis>array</db:emphasis>) const</db:title>
<db:para>Transcribes this string view into the given <db:code role="parameter">array</db:code>.</db:para>
<db:para>The caller is responsible for ensuring <db:code role="parameter">array</db:code> is large enough to hold the <db:code>wchar_t</db:code> encoding of this string view (allocating the array with the same length as the string view is always sufficient). The array is encoded in UTF-16 on platforms where <db:code>wchar_t</db:code> is 2 bytes wide (e.g. Windows); otherwise (Unix systems), <db:code>wchar_t</db:code> is assumed to be 4 bytes wide and the data is written in UCS-4.</db:para>
<db:note>
<db:para>This function writes no null terminator to the end of <db:code role="parameter">array</db:code>.</db:para>
</db:note>
<db:para>Returns the number of <db:code>wchar_t</db:code> entries written to <db:code role="parameter">array</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toWCharArray">QString::toWCharArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="trimmed">
<db:title>[noexcept] QStringView QStringView::trimmed() const</db:title>
<db:para>Strips leading and trailing whitespace and returns the result.</db:para>
<db:para>Whitespace means any character for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns <db:code>true</db:code>. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and ' '.</db:para>
</db:section>
<db:section xml:id="truncate">
<db:title>[constexpr noexcept] void QStringView::truncate(qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Truncates this string view to length <db:code role="parameter">length</db:code>.</db:para>
<db:para>Same as <db:code>*this = left(length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#mid" role="deprecated">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#left" role="deprecated">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#right" role="deprecated">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="utf16">
<db:title>[constexpr noexcept] const QStringView::storage_type *QStringView::utf16() const</db:title>
<db:para>Returns a const pointer to the first character in the string view.</db:para>
<db:note>
<db:para>The character array represented by the return value is <db:emphasis>not</db:emphasis> null-terminated.</db:para>
</db:note>
<db:para><db:code>storage_type</db:code> is <db:code>char16_t</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-std-3a-3au16string_view">
<db:title>[noexcept, since 6.7] std::u16string_view QStringView::operator std::u16string_view() const</db:title>
<db:para>Converts this <db:link xlink:href="qstringview.xml">QStringView</db:link> object to a <db:code>std::u16string_view</db:code> object. The returned view will have the same data pointer and length of this view.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>[constexpr] QChar QStringView::operator[](qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:para>Returns the character at position <db:code role="parameter">n</db:code> in this string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">n</db:code> is negative or not less than <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QStringView &amp;<db:emphasis>lhs</db:emphasis>, const QStringView &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt">[noexcept] bool operator&lt;(const QStringView &amp;<db:emphasis>lhs</db:emphasis>, const QStringView &amp;<db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-lt-eq">[noexcept] bool operator&lt;=(const QStringView &amp;<db:emphasis>lhs</db:emphasis>, const QStringView &amp;<db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq">[noexcept] bool operator==(const QStringView &amp;<db:emphasis>lhs</db:emphasis>, const QStringView &amp;<db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-gt">[noexcept] bool operator&gt;(const QStringView &amp;<db:emphasis>lhs</db:emphasis>, const QStringView &amp;<db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-gt-eq">[noexcept] bool operator&gt;=(const QStringView &amp;<db:emphasis>lhs</db:emphasis>, const QStringView &amp;<db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:para>Operators for comparing <db:code role="parameter">lhs</db:code> to <db:code role="parameter">rhs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#compare">compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qHash-7">
<db:title>[noexcept] size_t qHash(QStringView <db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QStringView</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qstringview.xml">QStringView</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="left">
<db:title>[constexpr noexcept, deprecated] QStringView QStringView::left(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qstringview.xml#first">first</db:link>() instead in new code.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">length</db:code> starting at position 0 in this object.</db:para>
<db:para>The entire string view is returned if <db:code role="parameter">length</db:code> is greater than or equal to <db:link xlink:href="qstringview.xml#size">size</db:link>(), or less than zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#startsWith">startsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#slice">slice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid">
<db:title>[constexpr noexcept, deprecated] QStringView QStringView::mid(qsizetype <db:emphasis>start</db:emphasis>, qsizetype <db:emphasis>length</db:emphasis> = -1) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">length</db:code> starting at position <db:code role="parameter">start</db:code> in this object.</db:para>
<db:para>Use <db:link xlink:href="qstringview.xml#sliced">sliced</db:link>() instead in new code.</db:para>
<db:para>Returns an empty string view if <db:code role="parameter">start</db:code> exceeds the length of the string view. If there are less than <db:code role="parameter">length</db:code> characters available in the string view starting at <db:code role="parameter">start</db:code>, or if <db:code role="parameter">length</db:code> is negative (default), the function returns all characters that are available from <db:code role="parameter">start</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#slice">slice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>[constexpr noexcept, deprecated] QStringView QStringView::right(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qstringview.xml#last">last</db:link>() instead in new code.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">length</db:code> starting at position <db:link xlink:href="qstringview.xml#size">size</db:link>() - <db:code role="parameter">length</db:code> in this object.</db:para>
<db:para>The entire string view is returned if <db:code role="parameter">length</db:code> is greater than or equal to <db:link xlink:href="qstringview.xml#size">size</db:link>(), or less than zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#slice">slice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
