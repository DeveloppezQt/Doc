<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringView Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringview.xml">QStringView</db:link> class provides a unified view on UTF-16 strings with a read-only subset of the <db:link xlink:href="qstring.xml">QString</db:link> API.</db:para>
<db:para>This class was introduced in Qt 5.10.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.10</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringView is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qstringview.xml">QStringView</db:link> references a contiguous portion of a UTF-16 string it does not own. It acts as an interface type to all kinds of UTF-16 string, without the need to construct a <db:link xlink:href="qstring.xml">QString</db:link> first.</db:para>
<db:para>The UTF-16 string may be represented as an array (or an array-compatible data-structure such as <db:link xlink:href="qstring.xml">QString</db:link>, std::basic_string, etc.) of <db:link xlink:href="qchar.xml">QChar</db:link>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> (on compilers that support C++11 Unicode strings) or (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> is designed as an interface type; its main use-case is as a function parameter type. When QStringViews are used as automatic variables or data members, care must be taken to ensure that the referenced string data (for example, owned by a <db:link xlink:href="qstring.xml">QString</db:link>) outlives the <db:link xlink:href="qstringview.xml">QStringView</db:link> on all code paths, lest the string view ends up referencing deleted data.</db:para>
<db:para>When used as an interface type, <db:link xlink:href="qstringview.xml">QStringView</db:link> allows a single function to accept a wide variety of UTF-16 string data sources. One function accepting <db:link xlink:href="qstringview.xml">QStringView</db:link> thus replaces three function overloads (taking <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qstringref.xml">QStringRef</db:link>, and <db:code>(const QChar*, int)</db:code>), while at the same time enabling even more string data sources to be passed to the function, such as <db:code>u&quot;Hello World&quot;</db:code>, a <db:code>char16_t</db:code> string literal.</db:para>
<db:para>QStringViews should be passed by value, not by reference-to-const:</db:para>
<db:programlisting language="cpp">void myfun1(QStringView sv);        // preferred
void myfun2(const QStringView &amp;amp;sv); // compiles and works, but slower
</db:programlisting>
<db:para>If you want to give your users maximum freedom in what strings they can pass to your function, accompany the <db:link xlink:href="qstringview.xml">QStringView</db:link> overload with overloads for</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>QChar</db:emphasis>: this overload can delegate to the <db:link xlink:href="qstringview.xml">QStringView</db:link> version:</db:para>
<db:programlisting language="cpp">void fun(QChar ch) { fun(QStringView(&amp;amp;ch, 1)); }
</db:programlisting>
<db:para>even though, for technical reasons, <db:link xlink:href="qstringview.xml">QStringView</db:link> cannot provide a <db:link xlink:href="qchar.xml">QChar</db:link> constructor by itself.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>QString</db:emphasis>: if you store an unmodified copy of the string and thus would like to take advantage of <db:link xlink:href="qstring.xml">QString</db:link>'s implicit sharing.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>: if you can implement the function without converting the <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> to UTF-16 first; users expect a function overloaded on <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> to perform strictly less memory allocations than the semantically equivalent call of the <db:link xlink:href="qstringview.xml">QStringView</db:link> version, involving construction of a <db:link xlink:href="qstring.xml">QString</db:link> from the <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> can also be used as the return value of a function. If you call a function returning <db:link xlink:href="qstringview.xml">QStringView</db:link>, take extra care to not keep the <db:link xlink:href="qstringview.xml">QStringView</db:link> around longer than the function promises to keep the referenced string data alive. If in doubt, obtain a strong reference to the data by calling <db:link xlink:href="qstringview.xml#toString">toString</db:link>() to convert the <db:link xlink:href="qstringview.xml">QStringView</db:link> into a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> is a <db:emphasis>Literal Type</db:emphasis>, but since it stores data as <db:code>char16_t</db:code>, iteration is not <db:code>constexpr</db:code> (casts from <db:code>const char16_t*</db:code> to <db:code>const QChar*</db:code>, which is not allowed in <db:code>constexpr</db:code> functions). You can use an indexed loop and/or <db:link xlink:href="qstringview.xml#utf16">utf16</db:link>() in <db:code>constexpr</db:code> contexts instead.</db:para>
<db:note>
<db:para>We strongly discourage the use of <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstringview.xml">QStringView</db:link>&gt;, because <db:link xlink:href="qlist.xml">QList</db:link> is a very inefficient container for QStringViews (it would heap-allocate every element). Use <db:link xlink:href="qvector.xml">QVector</db:link> (or std::vector) to hold QStringViews instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml">QString</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml">QStringRef</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>QStringView::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#iterator-typedef">iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>QStringView::const_pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>const_pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type *</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>QStringView::const_reference</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type &amp;</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>QStringView::const_reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>QStringView::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>std::ptrdiff_t</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>QStringView::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable iterators, so this is the same as <db:link xlink:href="qstringview.xml#const_iterator-typedef">const_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>QStringView::pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type *</db:code>. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable pointers, so this is the same as <db:link xlink:href="qstringview.xml#const_pointer-typedef">const_pointer</db:link>.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>QStringView::reference</db:title>
<db:typedefsynopsis>
<db:typedefname>reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type &amp;</db:code>. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable references, so this is the same as <db:link xlink:href="qstringview.xml#const_reference-typedef">const_reference</db:link>.</db:para>
</db:section>
<db:section xml:id="reverse_iterator-typedef">
<db:title>QStringView::reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable reverse iterators, so this is the same as <db:link xlink:href="qstringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#iterator-typedef">iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>QStringView::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for qsizetype. Provided for compatibility with the STL.</db:para>
<db:para>Unlike other Qt classes, <db:link xlink:href="qstringview.xml">QStringView</db:link> uses qsizetype as its <db:code>size_type</db:code>, to allow accepting data from <db:code>std::basic_string</db:code> without truncation. The Qt API functions, for example <db:link xlink:href="qstringview.xml#length">length</db:link>(), return <db:code>int</db:code>, while the STL-compatible functions, for example <db:link xlink:href="qstringview.xml#size">size</db:link>(), return <db:code>size_type</db:code>.</db:para>
</db:section>
<db:section xml:id="storage_type-typedef">
<db:title>QStringView::storage_type</db:title>
<db:typedefsynopsis>
<db:typedefname>storage_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>char16_t</db:code> for non-Windows or if Q_COMPILER_UNICODE_STRINGS is defined. Otherwise, alias for <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>QStringView::value_type</db:title>
<db:typedefsynopsis>
<db:typedefname>value_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>const QChar</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="startsWith-2">
<db:title>bool QStringView::startsWith(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="startsWith-3">bool QStringView::startsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="startsWith-1">bool QStringView::startsWith(QLatin1String <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="startsWith">bool QStringView::startsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this string-view starts with string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>, respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-2">
<db:title>bool QStringView::endsWith(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="endsWith-3">bool QStringView::endsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="endsWith-1">bool QStringView::endsWith(QLatin1String <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="endsWith">bool QStringView::endsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this string-view ends with string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>, respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView">
<db:title>QStringView::QStringView()</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView-1">
<db:title>QStringView::QStringView(<db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView-2">
<db:title>QStringView::QStringView(const Char *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(const Char *str, qsizetype len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code> with length <db:code role="parameter">len</db:code>.</db:para>
<db:para>The range <db:code>[str,len)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">str</db:code> is safe if <db:code role="parameter">len</db:code> is 0, too, and results in a null string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">len</db:code> is negative or, when positive, if <db:code role="parameter">str</db:code> is <db:code>nullptr</db:code>.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringView-3">
<db:title>QStringView::QStringView(const Char *<db:emphasis>first</db:emphasis>, const Char *<db:emphasis>last</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(const Char *first, const Char *last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">first</db:code> with length (<db:code role="parameter">last</db:code> - <db:code role="parameter">first</db:code>).</db:para>
<db:para>The range <db:code>[first,last)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">first</db:code> is safe if <db:code role="parameter">last</db:code> is nullptr, too, and results in a null string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">last</db:code> precedes <db:code role="parameter">first</db:code>, or <db:code role="parameter">first</db:code> is <db:code>nullptr</db:code> and <db:code role="parameter">last</db:code> is not.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringView-4">
<db:title>QStringView::QStringView(const Char (&amp;)[N] <db:emphasis>string</db:emphasis> = N)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>const Char (&amp;)[N]</db:type>
<db:parameter>string</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(const Char (&amp;)[N] string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on the character string literal <db:code role="parameter">string</db:code>. The length is set to <db:code>N-1</db:code>, excluding the trailing {Char(0)}. If you need the full array, use the constructor from pointer and size instead:</db:para>
<db:programlisting language="cpp">auto sv = QStringView(array, std::size(array)); // using C++17 std::size()
</db:programlisting>
<db:para><db:code role="parameter">string</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code role="parameter">string</db:code> is an actual array and <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringView-5">
<db:title>QStringView::QStringView(const Char *<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(const Char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>. The length is determined by scanning for the first <db:code>Char(0)</db:code>.</db:para>
<db:para><db:code role="parameter">str</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">str</db:code> is safe and results in a null string view.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code role="parameter">str</db:code> is not an array and if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringView-6">
<db:title>QStringView::QStringView(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(const QString &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>.</db:para>
<db:para><db:code>str.data()</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>The string view will be null if and only if <db:code>str.isNull()</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringView-7">
<db:title>QStringView::QStringView(const QStringRef &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>const QStringRef &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(const QStringRef &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>.</db:para>
<db:para><db:code>str.data()</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>The string view will be null if and only if <db:code>str.isNull()</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringView-8">
<db:title>QStringView::QStringView(const StdBasicString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>const StdBasicString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(const StdBasicString &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>. The length is taken from <db:code>str.size()</db:code>.</db:para>
<db:para><db:code>str.data()</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>StdBasicString</db:code> is an instantiation of <db:code>std::basic_string</db:code> with a compatible character type. The compatible character types are: <db:code>QChar</db:code>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> and (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
<db:para>The string view will be empty if and only if <db:code>str.empty()</db:code>. It is unspecified whether this constructor can result in a null string view (<db:code>str.data()</db:code> would have to return <db:code>nullptr</db:code> for this).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>QChar QStringView::at(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar at(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the character at position <db:code role="parameter">n</db:code> in this string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">n</db:code> is negative or not less than <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="back">
<db:title>QChar QStringView::back() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar back() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last character in the string. Same as <db:link xlink:href="qstringview.xml#last">last</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>QStringView::const_iterator QStringView::begin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView::const_iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView::const_iterator begin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first character in the string.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cbegin">
<db:title>QStringView::const_iterator QStringView::cbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView::const_iterator</db:type>
<db:methodname>cbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView::const_iterator cbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qstringview.xml#begin">begin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>QStringView::const_iterator QStringView::cend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView::const_iterator</db:type>
<db:methodname>cend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView::const_iterator cend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qstringview.xml#end">end</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crend">crend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chop">
<db:title>void QStringView::chop(qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>chop</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void chop(qsizetype length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this string view by <db:code role="parameter">length</db:code> characters.</db:para>
<db:para>Same as <db:code>*this = left(size() - length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chopped">
<db:title>QStringView QStringView::chopped(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>chopped</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView chopped(qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the substring of length <db:link xlink:href="qstringview.xml#size">size</db:link>() - <db:code role="parameter">length</db:code> starting at the beginning of this object.</db:para>
<db:para>Same as <db:code>left(size() - length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crbegin">
<db:title>QStringView::const_reverse_iterator QStringView::crbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView::const_reverse_iterator</db:type>
<db:methodname>crbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView::const_reverse_iterator crbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qstringview.xml#rbegin">rbegin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cbegin">cbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crend">
<db:title>QStringView::const_reverse_iterator QStringView::crend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView::const_reverse_iterator</db:type>
<db:methodname>crend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView::const_reverse_iterator crend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qstringview.xml#rend">rend</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cend">cend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>QStringView::const_pointer QStringView::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView::const_pointer</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView::const_pointer data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const pointer to the first character in the string.</db:para>
<db:note>
<db:para>The character array represented by the return value is <db:emphasis>not</db:emphasis> null-terminated.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#utf16">utf16</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="empty">
<db:title>bool QStringView::empty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>empty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool empty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this string view is empty - that is, whether <db:code>size() == 0</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>QStringView::const_iterator QStringView::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView::const_iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView::const_iterator end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary character after the last character in the list.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first">
<db:title>QChar QStringView::first() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>first</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar first() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first character in the string. Same as <db:link xlink:href="qstringview.xml#front">front</db:link>().</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="front">
<db:title>QChar QStringView::front() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>front</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar front() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first character in the string. Same as <db:link xlink:href="qstringview.xml#first">first</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#last">last</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QStringView::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this string view is empty - that is, whether <db:code>size() == 0</db:code>.</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QStringView::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this string view is null - that is, whether <db:code>data() == nullptr</db:code>.</db:para>
<db:para>This functions is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRightToLeft">
<db:title>[since 5.11] bool QStringView::isRightToLeft() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isRightToLeft</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isRightToLeft() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string is read right to left.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#isRightToLeft">QString::isRightToLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="last">
<db:title>QChar QStringView::last() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>last</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar last() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last character in the string. Same as <db:link xlink:href="qstringview.xml#back">back</db:link>().</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#first">first</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="left">
<db:title>QStringView QStringView::left(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>left</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView left(qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the substring of length <db:code role="parameter">length</db:code> starting at position 0 in this object.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>int QStringView::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qstringview.xml#size">size</db:link>(), except returns the result as an <db:code>int</db:code>.</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:warning>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> can represent strings with more than 2<db:superscript>31</db:superscript> characters. Calling this function on a string view for which <db:link xlink:href="qstringview.xml#size">size</db:link>() returns a value greater than <db:code>INT_MAX</db:code> constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid">
<db:title>QStringView QStringView::mid(qsizetype <db:emphasis>start</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>mid</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView mid(qsizetype start) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the substring starting at position <db:code role="parameter">start</db:code> in this object, and extending to the end of the string.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">start</db:code> &lt; 0 or <db:code role="parameter">start</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid-1">
<db:title>QStringView QStringView::mid(qsizetype <db:emphasis>start</db:emphasis>, qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>mid</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView mid(qsizetype start, qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">length</db:code> starting at position <db:code role="parameter">start</db:code> in this object.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">start</db:code> &lt; 0, <db:code role="parameter">length</db:code> &lt; 0, or <db:code role="parameter">start</db:code> + <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rbegin">
<db:title>QStringView::const_reverse_iterator QStringView::rbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView::const_reverse_iterator</db:type>
<db:methodname>rbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView::const_reverse_iterator rbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to the first character in the string, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rend">
<db:title>QStringView::const_reverse_iterator QStringView::rend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView::const_reverse_iterator</db:type>
<db:methodname>rend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView::const_reverse_iterator rend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to one past the last character in the string, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>QStringView QStringView::right(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>right</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView right(qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the substring of length <db:code role="parameter">length</db:code> starting at position <db:link xlink:href="qstringview.xml#size">size</db:link>() - <db:code role="parameter">length</db:code> in this object.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qsizetype QStringView::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of this string view, in UTF-16 code points (that is, surrogate pairs count as two for the purposes of this function, the same as in <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qstringref.xml">QStringRef</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLatin1">
<db:title>QByteArray QStringView::toLatin1() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toLatin1</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toLatin1() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a Latin-1 representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>The behavior is undefined if the string contains non-Latin1 characters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLocal8Bit">
<db:title>QByteArray QStringView::toLocal8Bit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toLocal8Bit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toLocal8Bit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a local 8-bit representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para><db:link xlink:href="qtextcodec.xml#codecForLocale">QTextCodec::codecForLocale</db:link>() is used to perform the conversion from Unicode. If the locale's encoding could not be determined, this function does the same as <db:link xlink:href="qstringview.xml#toLatin1">toLatin1</db:link>().</db:para>
<db:para>The behavior is undefined if the string contains characters not supported by the locale's 8-bit encoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QStringView::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a deep copy of this string view's data as a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>The return value will be the null <db:link xlink:href="qstring.xml">QString</db:link> if and only if this string view is null.</db:para>
<db:warning>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> can store strings with more than 2<db:superscript>30</db:superscript> characters while <db:link xlink:href="qstring.xml">QString</db:link> cannot. Calling this function on a string view for which <db:link xlink:href="qstringview.xml#size">size</db:link>() returns a value greater than <db:code>INT_MAX / 2</db:code> constitutes undefined behavior.</db:para>
</db:warning>
</db:section>
<db:section xml:id="toUcs4">
<db:title>QVector&lt;uint&gt; QStringView::toUcs4() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;uint&gt;</db:type>
<db:methodname>toUcs4</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;uint&gt; toUcs4() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a UCS-4/UTF-32 representation of the string as a <db:link xlink:href="qvector.xml">QVector</db:link>&lt;uint&gt;.</db:para>
<db:para>UCS-4 is a Unicode codec and therefore it is lossless. All characters from this string will be encoded in UCS-4. Any invalid sequence of code units in this string is replaced by the Unicode replacement character (<db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::ReplacementCharacter</db:link>, which corresponds to <db:code>U+FFFD</db:code>).</db:para>
<db:para>The returned vector is not 0-terminated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUtf8">
<db:title>QByteArray QStringView::toUtf8() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toUtf8</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toUtf8() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a UTF-8 representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>UTF-8 is a Unicode codec and can represent all characters in a Unicode string like <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="trimmed">
<db:title>QStringView QStringView::trimmed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>trimmed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView trimmed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Strips leading and trailing whitespace and returns the result.</db:para>
<db:para>Whitespace means any character for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns <db:code>true</db:code>. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and ' '.</db:para>
</db:section>
<db:section xml:id="truncate">
<db:title>void QStringView::truncate(qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>truncate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void truncate(qsizetype length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this string view to length <db:code role="parameter">length</db:code>.</db:para>
<db:para>Same as <db:code>*this = left(length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">chop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="utf16">
<db:title>const QStringView::storage_type *QStringView::utf16() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QStringView::storage_type *</db:type>
<db:methodname>utf16</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QStringView::storage_type * utf16() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const pointer to the first character in the string.</db:para>
<db:para><db:code>storage_type</db:code> is <db:code>char16_t</db:code>.</db:para>
<db:note>
<db:para>The character array represented by the return value is <db:emphasis>not</db:emphasis> null-terminated.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QChar QStringView::operator[](qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar operator[](qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the character at position <db:code role="parameter">n</db:code> in this string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">n</db:code> is negative or not less than <db:link xlink:href="qstringview.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash">
<db:title>[since 5.10] uint qHash(QStringView <db:emphasis>key</db:emphasis>, uint <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qHash(QStringView key, uint seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash value for the <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
</db:section>
</db:article>
