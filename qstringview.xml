<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringView Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringview.xml">QStringView</db:link> class provides a unified view on UTF-16 strings with a read-only subset of the QString API.</db:para>
<db:para>This class was introduced in Qt 5.10.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.10</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringView is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qstringview.xml">QStringView</db:link> references a contiguous portion of a UTF-16 string it does not own. It acts as an interface type to all kinds of UTF-16 string, without the need to construct a QString first.</db:para>
<db:para>The UTF-16 string may be represented as an array (or an array-compatible data-structure such as QString, std::basic_string, etc.) of QChar, ushort, char16_t or (on platforms, such as Windows, where it is a 16-bit type) wchar_t.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> is designed as an interface type; its main use-case is as a function parameter type. When QStringViews are used as automatic variables or data members, care must be taken to ensure that the referenced string data (for example, owned by a QString) outlives the <db:link xlink:href="qstringview.xml">QStringView</db:link> on all code paths, lest the string view ends up referencing deleted data.</db:para>
<db:para>When used as an interface type, <db:link xlink:href="qstringview.xml">QStringView</db:link> allows a single function to accept a wide variety of UTF-16 string data sources. One function accepting <db:link xlink:href="qstringview.xml">QStringView</db:link> thus replaces three function overloads (taking QString, QStringRef, and (const QChar*, int)), while at the same time enabling even more string data sources to be passed to the function, such as u&quot;Hello World&quot;, a char16_t string literal.</db:para>
<db:para>QStringViews should be passed by value, not by reference-to-const:</db:para>
<db:programlisting language="cpp">    void myfun1(QStringView sv);        // preferred
    void myfun2(const QStringView &amp;amp;sv); // compiles and works, but slower
</db:programlisting>
<db:para>If you want to give your users maximum freedom in what strings they can pass to your function, accompany the <db:link xlink:href="qstringview.xml">QStringView</db:link> overload with overloads for</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>QChar</db:emphasis>: this overload can delegate to the <db:link xlink:href="qstringview.xml">QStringView</db:link> version:</db:para>
<db:programlisting language="cpp">    void fun(QChar ch) { fun(QStringView(&amp;amp;ch, 1)); }
</db:programlisting>
<db:para>even though, for technical reasons, <db:link xlink:href="qstringview.xml">QStringView</db:link> cannot provide a QChar constructor by itself.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>QString</db:emphasis>: if you store an unmodified copy of the string and thus would like to take advantage of QString's implicit sharing.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>: if you can implement the function without converting the <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> to UTF-16 first; users expect a function overloaded on <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> to perform strictly less memory allocations than the semantically equivalent call of the <db:link xlink:href="qstringview.xml">QStringView</db:link> version, involving construction of a QString from the <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> can also be used as the return value of a function. If you call a function returning <db:link xlink:href="qstringview.xml">QStringView</db:link>, take extra care to not keep the <db:link xlink:href="qstringview.xml">QStringView</db:link> around longer than the function promises to keep the referenced string data alive. If in doubt, obtain a strong reference to the data by calling toString() to convert the <db:link xlink:href="qstringview.xml">QStringView</db:link> into a QString.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> is a <db:emphasis>Literal Type</db:emphasis>, but since it stores data as char16_t, iteration is not constexpr (casts from const char16_t* to const QChar*, which is not allowed in constexpr functions). You can use an indexed loop and/or utf16() in constexpr contexts instead.</db:para>
<db:note>
<db:para>We strongly discourage the use of <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstringview.xml">QStringView</db:link>&gt;, because <db:link xlink:href="qlist.xml">QList</db:link> is a very inefficient container for QStringViews (it would heap-allocate every element). Use <db:link xlink:href="qvector.xml">QVector</db:link> (or std::vector) to hold QStringViews instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring-proxy.xml">QString</db:link></db:member>
<db:member><db:link xlink:href="qstringref-proxy.xml">QStringRef</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>QStringView::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#iterator-typedef">iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>QStringView::const_pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>const_pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for value_type *. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>QStringView::const_reference</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for value_type &amp;. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>QStringView::const_reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>QStringView::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for std::ptrdiff_t. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>QStringView::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable iterators, so this is the same as <db:link xlink:href="qstringview.xml#const_iterator-typedef">const_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>QStringView::pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for value_type *. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable pointers, so this is the same as <db:link xlink:href="qstringview.xml#const_pointer-typedef">const_pointer</db:link>.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>QStringView::reference</db:title>
<db:typedefsynopsis>
<db:typedefname>reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for value_type &amp;. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable references, so this is the same as <db:link xlink:href="qstringview.xml#const_reference-typedef">const_reference</db:link>.</db:para>
</db:section>
<db:section xml:id="reverse_iterator-typedef">
<db:title>QStringView::reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> does not support mutable reverse iterators, so this is the same as <db:link xlink:href="qstringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml#iterator-typedef">iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>QStringView::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for qsizetype. Provided for compatibility with the STL.</db:para>
<db:para>Unlike other Qt classes, <db:link xlink:href="qstringview.xml">QStringView</db:link> uses qsizetype as its size_type, to allow accepting data from std::basic_string without truncation. The Qt API functions, for example length(), return int, while the STL-compatible functions, for example size(), return size_type.</db:para>
</db:section>
<db:section xml:id="storage_type-typedef">
<db:title>QStringView::storage_type</db:title>
<db:typedefsynopsis>
<db:typedefname>storage_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for char16_t.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>QStringView::value_type</db:title>
<db:typedefsynopsis>
<db:typedefname>value_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for const QChar. Provided for compatibility with the STL.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="endsWith">
<db:title>[private] int QStringView::endsWith(QStringView <db:emphasis>str</db:emphasis>, int <db:emphasis>cs</db:emphasis>) const</db:title>
<db:para>Returns true if this string-view ends with string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>, respectively; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>startsWith()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-1">
<db:title>[private, since 5.14] int QStringView::contains(QStringView <db:emphasis>str</db:emphasis>, int <db:emphasis>cs</db:emphasis>) const</db:title>
<db:para>Returns true if this string-view contains an occurrence of the string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>indexOf()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView-3">
<db:title>[default] QStringView::QStringView()</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:void/>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView() = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>isNull()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView-4">
<db:title>[default] QStringView::QStringView(<db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(std::nullptr_t) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>isNull()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringView-5">
<db:title>[default] QStringView::QStringView(const class QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringView</db:methodname>
<db:methodparam>
<db:type>const class QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView(const class QString &amp;str) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>.</db:para>
<db:para>str.data() must remain valid for the lifetime of this string view object.</db:para>
<db:para>The string view will be null if and only if str.isNull().</db:para>
</db:section>
</db:section>
</db:article>
