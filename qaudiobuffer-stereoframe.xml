<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudiobuffer-stereoframe.xml">StereoFrame</db:link> class provides a simple wrapper for a stereo audio frame.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>StereoFrame</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>StereoFrame is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This templatized structure lets you treat a block of individual samples as an interleaved stereo stream frame. This is most useful when used with the templatized <db:link xlink:href="qaudiobuffer.xml#data">data</db:link>() functions of <db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link>. Generally the data is accessed as a pointer, so no copying should occur.</db:para>
<db:para>There are some predefined instantiations of this template for working with common stereo sample depths in a convenient way.</db:para>
<db:para>This frame structure has <db:emphasis>left</db:emphasis> and <db:emphasis>right</db:emphasis> members for accessing individual channel data.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">// Assuming 'buffer' is an unsigned 16 bit stereo buffer..
QAudioBuffer::S16U *frames = buffer-&gt;data&lt;QAudioBuffer::S16U&gt;();
for (int i=0; i &lt; buffer-&gt;frameCount(); i++) {
    qSwap(frames[i].left, frames[i].right);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiobuffer-stereoframe.xml#S8U-typedef">QAudioBuffer::S8U</db:link></db:member>
<db:member><db:link xlink:href="qaudiobuffer-stereoframe.xml#S8S-typedef">QAudioBuffer::S8S</db:link></db:member>
<db:member><db:link xlink:href="qaudiobuffer-stereoframe.xml#S16S-typedef">QAudioBuffer::S16S</db:link></db:member>
<db:member><db:link xlink:href="qaudiobuffer-stereoframe.xml#S16U-typedef">QAudioBuffer::S16U</db:link></db:member>
<db:member><db:link xlink:href="qaudiobuffer-stereoframe.xml#S32F-typedef">QAudioBuffer::S32F</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="left-var">
<db:title>T StereoFrame::left</db:title>
<db:para>This variable holds the left sample</db:para>
</db:section>
<db:section xml:id="right-var">
<db:title>T StereoFrame::right</db:title>
<db:para>This variable holds the right sample</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="S16S-typedef">
<db:title>S16S</db:title>
<db:para>This is a predefined specialization for a signed stereo 16 bit sample. Each channel is a <db:emphasis>signed short</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="S16U-typedef">
<db:title>S16U</db:title>
<db:para>This is a predefined specialization for an unsigned stereo 16 bit sample. Each channel is an <db:emphasis>unsigned short</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="S32F-typedef">
<db:title>S32F</db:title>
<db:para>This is a predefined specialization for an 32 bit float sample. Each channel is a <db:emphasis>float</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="S8S-typedef">
<db:title>S8S</db:title>
<db:para>This is a predefined specialization for a signed stereo 8 bit sample. Each channel is a <db:emphasis>signed char</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="S8U-typedef">
<db:title>S8U</db:title>
<db:para>This is a predefined specialization for an unsigned stereo 8 bit sample. Each channel is an <db:emphasis>unsigned char</db:emphasis>.</db:para>
</db:section>
</db:section>
</db:article>
