<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudiobuffer-stereoframe.xml">StereoFrame</db:link> class provides a simple wrapper for a stereo audio frame.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>StereoFrame</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>StereoFrame is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This templatized structure lets you treat a block of individual samples as an interleaved stereo stream frame. This is most useful when used with the templatized <db:link xlink:href="qaudiobuffer.xml#data">data</db:link>() functions of <db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link>. Generally the data is accessed as a pointer, so no copying should occur.</db:para>
<db:para>There are some predefined instantiations of this template for working with common stereo sample depths in a convenient way.</db:para>
<db:para>This frame structure has <db:emphasis>left</db:emphasis> and <db:emphasis>right</db:emphasis> members for accessing individual channel data.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">// Assuming 'buffer' is an unsigned 16 bit stereo buffer..
QAudioBuffer::S16U *frames = buffer-&amp;gt;data&amp;lt;QAudioBuffer::S16U&amp;gt;();
for (int i=0; i &amp;lt; buffer-&amp;gt;frameCount(); i++) {
    qSwap(frames[i].left, frames[i].right);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiobuffer.xml#S8U-typedef">QAudioBuffer::S8U</db:link></db:member>
<db:member><db:link xlink:href="qaudiobuffer.xml#S8S-typedef">QAudioBuffer::S8S</db:link></db:member>
<db:member><db:link xlink:href="qaudiobuffer.xml#S16S-typedef">QAudioBuffer::S16S</db:link></db:member>
<db:member><db:link xlink:href="qaudiobuffer.xml#S16U-typedef">QAudioBuffer::S16U</db:link></db:member>
<db:member><db:link xlink:href="qaudiobuffer.xml#S32F-typedef">QAudioBuffer::S32F</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="StereoFrame">
<db:title>StereoFrame::StereoFrame()</db:title>
<db:constructorsynopsis>
<db:methodname>StereoFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">StereoFrame()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new frame with the &quot;silent&quot; value for this sample format (0 for signed formats and floats, 0x8* for unsigned formats).</db:para>
</db:section>
<db:section xml:id="StereoFrame-1">
<db:title>StereoFrame::StereoFrame(T <db:emphasis>leftSample</db:emphasis>, T <db:emphasis>rightSample</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>StereoFrame</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>leftSample</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>rightSample</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">StereoFrame(T leftSample, T rightSample)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new frame with the supplied <db:code role="parameter">leftSample</db:code> and <db:code role="parameter">rightSample</db:code> values.</db:para>
</db:section>
<db:section xml:id="average">
<db:title>T StereoFrame::average() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>average</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T average() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the arithmetic average of the left and right samples.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void StereoFrame::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the values of this frame to the &quot;silent&quot; value.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>StereoFrame&lt;T&gt; &amp;StereoFrame::operator=(const StereoFrame&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>StereoFrame&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const StereoFrame&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">StereoFrame&lt;T&gt; &amp; operator=(const StereoFrame&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this frame.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="left-var">
<db:title>T StereoFrame::left</db:title>
<db:fieldsynopsis>
<db:type>T</db:type>
<db:varname>left</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This variable holds the left sample</db:para>
</db:section>
<db:section xml:id="right-var">
<db:title>T StereoFrame::right</db:title>
<db:fieldsynopsis>
<db:type>T</db:type>
<db:varname>right</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This variable holds the right sample</db:para>
</db:section>
</db:section>
</db:article>
