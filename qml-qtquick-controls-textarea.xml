<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TextArea QML Type</db:title>
<db:productname>QtQuickControls1</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 1 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Displays multiple lines of editable formatted text.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>ScrollView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TextArea is part of <db:simplelist><db:member><db:link xlink:href="controls.xml">Buttons and Controls</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/textarea.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>It can display both plain and rich text. For example:</db:para>
<db:programlisting language="qml">TextArea {
    width: 240
    text:
        &quot;Lorem ipsum dolor sit amet, consectetur adipisicing elit, &quot; +
        &quot;sed do eiusmod tempor incididunt ut labore et dolore magna &quot; +
        &quot;aliqua. Ut enim ad minim veniam, quis nostrud exercitation &quot; +
        &quot;ullamco laboris nisi ut aliquip ex ea commodo cosnsequat. &quot;;
}
</db:programlisting>
<db:para>Clipboard support is provided by the <db:link xlink:href="qml-qtquick-controls-textarea.xml#cut-method">cut</db:link>(), <db:link xlink:href="qml-qtquick-controls-textarea.xml#copy-method">copy</db:link>(), and <db:link xlink:href="qml-qtquick-controls-textarea.xml#paste-method">paste</db:link>() functions, and the selection can be handled in a traditional &quot;mouse&quot; mechanism by setting <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectByMouse-prop">selectByMouse</db:link>, or handled completely from QML by manipulating <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionStart-prop">selectionStart</db:link> and <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionEnd-prop">selectionEnd</db:link>, or using <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectAll-method">selectAll</db:link>() or <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:para>You can translate between cursor positions (characters from the start of the document) and pixel points using <db:link xlink:href="qml-qtquick-controls-textarea.xml#positionAt-method">positionAt</db:link>() and <db:link xlink:href="qml-qtquick-controls-textarea.xml#positionToRectangle-method">positionToRectangle</db:link>().</db:para>
<db:para>You can create a custom appearance for a <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> by assigning a <db:link xlink:href="qml-qtquick-controls-styles-textareastyle.xml">TextAreaStyle</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activeFocusOnPress-prop">
<db:title>activeFocusOnPress : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>activeFocusOnPress</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> should gain active focus on a mouse press. By default this is set to true.</db:para>
</db:section>
<db:section xml:id="backgroundVisible-prop">
<db:title>backgroundVisible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>backgroundVisible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines if the background should be filled or not.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="baseUrl-prop">
<db:title>baseUrl : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>baseUrl</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies a base URL which is used to resolve relative URLs within the text.</db:para>
<db:para>The default value is the url of the QML file instantiating the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> item.</db:para>
</db:section>
<db:section xml:id="canPaste-prop">
<db:title>[read-only] canPaste : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>canPaste</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns true if the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> is writable and the content of the clipboard is suitable for pasting into the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>.</db:para>
</db:section>
<db:section xml:id="canRedo-prop">
<db:title>[read-only] canRedo : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>canRedo</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns true if the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> is writable and there are <db:link xlink:href="qml-qtquick-controls-textarea.xml#undo-method">undone</db:link> operations that can be redone.</db:para>
</db:section>
<db:section xml:id="canUndo-prop">
<db:title>[read-only] canUndo : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>canUndo</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns true if the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> is writable and there are previous operations that can be undone.</db:para>
</db:section>
<db:section xml:id="contentHeight-prop">
<db:title>[read-only, since QtQuick.Controls 1.3] contentHeight : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentHeight</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The height of the text content.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="contentWidth-prop">
<db:title>[read-only, since QtQuick.Controls 1.3] contentWidth : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentWidth</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The width of the text content.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="cursorPosition-prop">
<db:title>cursorPosition : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>cursorPosition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The position of the cursor in the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>.</db:para>
</db:section>
<db:section xml:id="cursorRectangle-prop">
<db:title>[read-only, since QtQuick.Controls 1.3] cursorRectangle : rect</db:title>
<db:fieldsynopsis>
<db:type>rect</db:type>
<db:varname>cursorRectangle</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The rectangle where the text cursor is rendered within the text area.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="effectiveHorizontalAlignment-prop">
<db:title>[read-only] effectiveHorizontalAlignment : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>effectiveHorizontalAlignment</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Gets the effective horizontal alignment of the text within the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> item's width.</db:para>
<db:para>To set/get the default horizontal alignment of <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>, use the property <db:code>horizontalAlignment</db:code>.</db:para>
</db:section>
<db:section xml:id="font-prop">
<db:title>font : font</db:title>
<db:fieldsynopsis>
<db:type>font</db:type>
<db:varname>font</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The font of the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>.</db:para>
</db:section>
<db:section xml:id="horizontalAlignment-prop">
<db:title>horizontalAlignment : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>horizontalAlignment</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the alignment of the text within the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> item's width.</db:para>
<db:para>By default, the horizontal text alignment follows the natural alignment of the text, for example, text that is read from left to right will be aligned to the left.</db:para>
<db:para>The valid values for <db:code>horizontalAlignment</db:code> are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignLeft (Default)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignRight</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignHCenter</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When using the attached property <db:link xlink:href="qml-qtquick-layoutmirroring.xml#enabled-prop">LayoutMirroring::enabled</db:link> to mirror application layouts, the horizontal alignment of text will also be mirrored. However, the property <db:code>horizontalAlignment</db:code> will remain unchanged. To query the effective horizontal alignment of <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>, use the read-only property <db:code>effectiveHorizontalAlignment</db:code>.</db:para>
</db:section>
<db:section xml:id="hoveredLink-prop">
<db:title>[read-only, since QtQuick.Controls 1.1] hoveredLink : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>hoveredLink</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the link string when user hovers a link embedded in the text. The link must be in rich text or HTML format and the link string provides access to the particular link.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="inputMethodComposing-prop">
<db:title>[read-only, since QtQuick.Controls 1.3] inputMethodComposing : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>inputMethodComposing</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> has partial text input from an input method.</db:para>
<db:para>While it is composing an input method may rely on mouse or key events from the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> to edit or commit the partial text. This property can be used to determine when to disable events handlers that may interfere with the correct operation of an input method.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="inputMethodHints-prop">
<db:title>inputMethodHints : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>inputMethodHints</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Provides hints to the input method about the expected content of the text edit, and how it should operate.</db:para>
<db:para>The value is a bit-wise combination of flags or Qt.ImhNone if no hints are set.</db:para>
<db:para>The default value is <db:code>Qt.ImhNone</db:code>.</db:para>
<db:para>Flags that alter behavior are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhHiddenText - Characters should be hidden, as is typically used when entering passwords.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhSensitiveData - Typed text should not be stored by the active input method in any persistent storage like predictive user dictionary.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoAutoUppercase - The input method should not try to automatically switch to upper case when a sentence ends.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferNumbers - Numbers are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferUppercase - Upper case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferLowercase - Lower case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoPredictiveText - Do not use predictive text (i.e. dictionary lookup) while typing.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDate - The text editor functions as a date field.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhTime - The text editor functions as a time field.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Flags that restrict input (exclusive flags) are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhDigitsOnly - Only digits are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhFormattedNumbersOnly - Only number input is allowed. This includes decimal point and minus sign.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUppercaseOnly - Only upper case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhLowercaseOnly - Only lower case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDialableCharactersOnly - Only characters suitable for phone dialing are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhEmailCharactersOnly - Only characters suitable for email addresses are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUrlCharactersOnly - Only characters suitable for URLs are allowed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Masks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhExclusiveInputMask - This mask yields nonzero if any of the exclusive flags are used.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="length-prop">
<db:title>[read-only] length : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>length</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the total number of plain text characters in the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> item.</db:para>
<db:para>As this number doesn't include any formatting markup, it may not be the same as the length of the string returned by the <db:link xlink:href="qml-qtquick-controls-textarea.xml#text-prop">text</db:link> property.</db:para>
<db:para>This property can be faster than querying the length the <db:link xlink:href="qml-qtquick-controls-textarea.xml#text-prop">text</db:link> property as it doesn't require any copying or conversion of the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>'s internal string data.</db:para>
</db:section>
<db:section xml:id="lineCount-prop">
<db:title>[read-only] lineCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>lineCount</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the total number of lines in the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> item.</db:para>
</db:section>
<db:section xml:id="menu-prop">
<db:title>[since QtQuick.Controls 1.3] menu : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>menu</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the edit <db:link xlink:href="qml-qtquick-controls-menu.xml">Menu</db:link> for working with text selection. Set it to <db:code>null</db:code> if no menu is wanted.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-menu.xml">Menu</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>readOnly : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>readOnly</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the user can interact with the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> item.</db:para>
<db:para>The difference from a disabled text field is that it will appear to be active, and text can be selected and copied.</db:para>
<db:para>If this property is set to <db:code>true</db:code>, the text cannot be edited by user interaction.</db:para>
<db:para>By default this property is <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="selectByKeyboard-prop">
<db:title>selectByKeyboard : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>selectByKeyboard</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines if the user can select the text with the keyboard.</db:para>
<db:para>If set to <db:code>true</db:code>, the user can use the keyboard to select the text even if the editor is read-only. If set to <db:code>false</db:code>, the user cannot use the keyboard to select the text even if the editor is editable.</db:para>
<db:para>The default value is <db:code>true</db:code> when the editor is editable, and <db:code>false</db:code> when read-only.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#readOnly-prop">readOnly</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectByMouse-prop">
<db:title>selectByMouse : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>selectByMouse</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines if the user can select the text with the mouse.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>selectedText</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property provides the text currently selected in the text edit.</db:para>
</db:section>
<db:section xml:id="selectionEnd-prop">
<db:title>[read-only] selectionEnd : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>selectionEnd</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The cursor position after the last character in the current selection.</db:para>
<db:para>This property is read-only. To change the selection, use select(start,end), <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectAll-method">selectAll</db:link>(), or <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionStart-prop">selectionStart</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#cursorPosition-prop">cursorPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#selectedText-prop">selectedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionStart-prop">
<db:title>[read-only] selectionStart : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>selectionStart</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The cursor position before the first character in the current selection.</db:para>
<db:para>This property is read-only. To change the selection, use select(start,end), <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectAll-method">selectAll</db:link>(), or <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionEnd-prop">selectionEnd</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#cursorPosition-prop">cursorPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#selectedText-prop">selectedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabChangesFocus-prop">
<db:title>tabChangesFocus : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>tabChangesFocus</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether Tab changes focus, or is accepted as input.</db:para>
<db:para>Defaults to <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>text</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The text to display. If the text format is AutoText the text edit will automatically determine whether the text should be treated as rich text. This determination is made using <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>().</db:para>
</db:section>
<db:section xml:id="textColor-prop">
<db:title>textColor : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>textColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The text color.</db:para>
<db:programlisting language="qml">TextArea { textColor: &quot;orange&quot; }
</db:programlisting>
</db:section>
<db:section xml:id="textDocument-prop">
<db:title>textDocument : TextDocument</db:title>
<db:fieldsynopsis>
<db:type>TextDocument</db:type>
<db:varname>textDocument</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property exposes the <db:link xlink:href="qquicktextdocument.xml">QQuickTextDocument</db:link> of this <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#textDocument-prop">TextEdit::textDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFormat-prop">
<db:title>textFormat : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>textFormat</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The way the text property should be displayed.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AutoText</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.PlainText</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.RichText</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default is <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.PlainText. If the text format is <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AutoText the text edit will automatically determine whether the text should be treated as rich text. This determination is made using <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>().</db:para>
</db:section>
<db:section xml:id="textMargin-prop">
<db:title>[since QtQuick.Controls 1.1] textMargin : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>textMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The margin, in pixels, around the text in the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="verticalAlignment-prop">
<db:title>verticalAlignment : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>verticalAlignment</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the alignment of the text within the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> item's height.</db:para>
<db:para>The valid values for <db:code>verticalAlignment</db:code> are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignTop</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignBottom</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignVCenter (Default)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="wrapMode-prop">
<db:title>wrapMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>wrapMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set this property to wrap the text to the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> item's width.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.NoWrap - no wrapping will be performed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.WordWrap (default) - wrapping is done on word boundaries only.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.WrapAnywhere - wrapping is done at any point on a line, even if it occurs in the middle of a word.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.Wrap - if possible, wrapping occurs at a word boundary; otherwise it will occur at the appropriate point on the line, even in the middle of a word.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="editingFinished-signal">
<db:title>[since QtQuick.Controls 1.5] editingFinished()</db:title>
<db:para>This signal is emitted when the text area loses focus.</db:para>
<db:para>The corresponding handler is <db:code>onEditingFinished</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onEditingFinished</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 1.5.</db:para>
</db:section>
<db:section xml:id="linkActivated-signal">
<db:title>linkActivated(string <db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks on a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">link</db:code> string provides access to the particular link.</db:para>
<db:para>The corresponding handler is <db:code>onLinkActivated</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkActivated</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="linkHovered-signal">
<db:title>[since QtQuick.Controls 1.1] linkHovered(string <db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user hovers a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">link</db:code> string provides access to the particular link.</db:para>
<db:para>The corresponding handler is <db:code>onLinkHovered</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkHovered</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#hoveredLink-prop">hoveredLink</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="append-method">
<db:title>void append(string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Appends <db:code role="parameter">string</db:code> as a new line to the end of the text area.</db:para>
</db:section>
<db:section xml:id="copy-method">
<db:title>void copy()</db:title>
<db:para>Copies the currently selected text to the system clipboard.</db:para>
</db:section>
<db:section xml:id="cut-method">
<db:title>void cut()</db:title>
<db:para>Moves the currently selected text to the system clipboard.</db:para>
</db:section>
<db:section xml:id="deselect-method">
<db:title>void deselect()</db:title>
<db:para>Removes active text selection.</db:para>
</db:section>
<db:section xml:id="getFormattedText-method">
<db:title>string getFormattedText(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Returns the section of text that is between the <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions.</db:para>
<db:para>The returned text will be formatted according to the <db:link xlink:href="qml-qtquick-controls-textarea.xml#textFormat-prop">textFormat</db:link> property.</db:para>
</db:section>
<db:section xml:id="getText-method">
<db:title>string getText(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Returns the section of text that is between the <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions.</db:para>
<db:para>The returned text does not include any rich text formatting.</db:para>
</db:section>
<db:section xml:id="insert-method">
<db:title>void insert(int <db:emphasis>position</db:emphasis>, string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">text</db:code> into the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> at position.</db:para>
</db:section>
<db:section xml:id="isRightToLeft-method">
<db:title>bool isRightToLeft(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Returns true if the natural reading direction of the editor text found between positions <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> is right to left.</db:para>
</db:section>
<db:section xml:id="moveCursorSelection-method">
<db:title>void moveCursorSelection(int <db:emphasis>position</db:emphasis>, SelectionMode <db:emphasis>mode</db:emphasis> = TextEdit.SelectCharacters)</db:title>
<db:para>Moves the cursor to <db:code role="parameter">position</db:code> and updates the selection according to the optional <db:code role="parameter">mode</db:code> parameter. (To only move the cursor, set the <db:link xlink:href="qml-qtquick-controls-textarea.xml#cursorPosition-prop">cursorPosition</db:link> property.)</db:para>
<db:para>When this method is called it additionally sets either the <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionStart-prop">selectionStart</db:link> or the <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionEnd-prop">selectionEnd</db:link> (whichever was at the previous cursor position) to the specified position. This allows you to easily extend and contract the selected text range.</db:para>
<db:para>The selection mode specifies whether the selection is updated on a per character or a per word basis. If not specified the selection mode will default to <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectCharacters.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectCharacters - Sets either the <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionStart-prop">selectionStart</db:link> or <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionEnd-prop">selectionEnd</db:link> (whichever was at the previous cursor position) to the specified position.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectWords - Sets the <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionStart-prop">selectionStart</db:link> and <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionEnd-prop">selectionEnd</db:link> to include all words between the specified position and the previous cursor position. Words partially in the range are included.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, take this sequence of calls:</db:para>
<db:programlisting language="cpp">cursorPosition = 5
moveCursorSelection(9, TextEdit.SelectCharacters)
moveCursorSelection(7, TextEdit.SelectCharacters)
</db:programlisting>
<db:para>This moves the cursor to the 5th position, extends the selection end from 5 to 9, and then retracts the selection end from 9 to 7, leaving the text from the 5th position to the 7th position selected (the 6th and 7th characters).</db:para>
<db:para>The same sequence with <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectWords will extend the selection start to a word boundary before or on the 5th position, and extend the selection end to a word boundary on or past the 9th position.</db:para>
</db:section>
<db:section xml:id="paste-method">
<db:title>void paste()</db:title>
<db:para>Replaces the currently selected text by the contents of the system clipboard.</db:para>
</db:section>
<db:section xml:id="positionAt-method">
<db:title>int positionAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the text position closest to pixel position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:para>Position 0 is before the first character, position 1 is after the first character but before the second, and so on until position <db:link xlink:href="qml-qtquick-controls-textarea.xml#text-prop">text</db:link>.length, which is after all characters.</db:para>
</db:section>
<db:section xml:id="positionToRectangle-method">
<db:title>rectangle positionToRectangle(<db:emphasis>position</db:emphasis>)</db:title>
<db:para>Returns the rectangle at the given <db:code role="parameter">position</db:code> in the text. The x, y, and height properties correspond to the cursor that would describe that position.</db:para>
</db:section>
<db:section xml:id="redo-method">
<db:title>void redo()</db:title>
<db:para>Redoes the last operation if redo is <db:link xlink:href="qml-qtquick-controls-textarea.xml#canRedo-prop">available</db:link>.</db:para>
</db:section>
<db:section xml:id="remove-method">
<db:title>string remove(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Removes the section of text that is between the <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions from the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>.</db:para>
</db:section>
<db:section xml:id="select-method">
<db:title>void select(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Causes the text from <db:code role="parameter">start</db:code> to <db:code role="parameter">end</db:code> to be selected.</db:para>
<db:para>If either start or end is out of range, the selection is not changed.</db:para>
<db:para>After calling this, <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionStart-prop">selectionStart</db:link> will become the lesser and <db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionEnd-prop">selectionEnd</db:link> will become the greater (regardless of the order passed to this method).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionStart-prop">selectionStart</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml#selectionEnd-prop">selectionEnd</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectAll-method">
<db:title>void selectAll()</db:title>
<db:para>Causes all text to be selected.</db:para>
</db:section>
<db:section xml:id="selectWord-method">
<db:title>void selectWord()</db:title>
<db:para>Causes the word closest to the current cursor position to be selected.</db:para>
</db:section>
<db:section xml:id="undo-method">
<db:title>void undo()</db:title>
<db:para>Undoes the last operation if undo is <db:link xlink:href="qml-qtquick-controls-textarea.xml#canUndo-prop">available</db:link>. Deselects any current selection, and updates the selection start to the current cursor position.</db:para>
</db:section>
</db:section>
</db:article>
