<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>StackView QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a stack-based navigation model.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>StackView is part of <db:simplelist><db:member><db:link xlink:href="views.xml">Application Navigation and Views</db:link></db:member><db:member><db:link xlink:href="controls.xml">Buttons and Controls</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/stackview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> implements a stack-based navigation model, which can be used with a set of interlinked information pages. Items are pushed onto the stack as the user navigates deeper into the material, and popped off again when he chooses to go back.</db:para>
<db:para>The <db:link xlink:href="qtquickcontrols-touch-example.xml">touch gallery</db:link> example is a good starting point to understand how <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> works. The following snippet from the example shows how it can be used:</db:para>
<db:programlisting language="qml">StackView {
    id: stack
    initialItem: view

    Component {
        id: view

        MouseArea {
            Text {
                text: stack.depth
                anchors.centerIn: parent
            }
            onClicked: stack.push(view)
        }
    }
}
</db:programlisting>
<db:section xml:id="using-stackview-in-an-application">
<db:title>Using StackView in an Application</db:title>
<db:para>Using <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> in an application is typically a simple matter of adding the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> as a child of a Window. The stack is usually anchored to the edges of the window, except at the top or bottom where it might be anchored to a status bar, or some other similar UI component. The stack can then be used by invoking its navigation methods. The first item to show in the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> is the one that was assigned to <db:link xlink:href="qml-qtquick-controls-stackview.xml#initialItem-prop">initialItem</db:link>.</db:para>
<db:note>
<db:para>Items pushed onto the stack view have <db:link xlink:href="qml-qtquick-controls-stackview.xml#supported-attached-properties">Stack attached properties</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="basic-navigation">
<db:title>Basic Navigation</db:title>
<db:para>There are three primary navigation operations in <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link>: <db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>(), <db:link xlink:href="qml-qtquick-controls-stackview.xml#pop-method">pop</db:link>(), and replace (replace by specifying argument <db:code>replace</db:code> to <db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>()). These correspond to classic stack operations where &quot;push&quot; adds an item to the top of a stack, &quot;pop&quot; removes the top item from the stack, and &quot;replace&quot; is like a pop followed by a push, in that it replaces the topmost item on the stack with a new item (but the applied transtition might be different). The topmost item in the stack corresponds to the one that is <db:link xlink:href="qml-qtquick-controls-stackview.xml#currentItem-prop">currently</db:link> visible on the screen. That means that &quot;push&quot; is the logical equivalent of navigating forward or deeper into the application, &quot;pop&quot; is the equivalent of navigating back, and &quot;replace&quot; is the equivalent of replacing the current item.</db:para>
<db:para>Sometimes it is necessary to go back more than a single step in the stack, for example, to return to a &quot;main&quot; item or some kind of section item in the application. For this use case, it is possible to specify an item as a parameter for <db:link xlink:href="qml-qtquick-controls-stackview.xml#pop-method">pop</db:link>(). This is called an &quot;unwind&quot; operation as the stack gets unwound to the specified item. If the item is not found, then the stack unwinds until there is only a single item in the stack, which then becomes the current item. To explicitly unwind to the bottom of the stack, it is recommended to use <db:link xlink:href="qml-qtquick-controls-stackview.xml#pop-method">pop</db:link>(null), though technically any non-existent item will do.</db:para>
<db:para>Given the stack [A, B, C]:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>(D) =&gt; [A, B, C, D] - &quot;push&quot; transition animation between C and D</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml#pop-method">pop</db:link>() =&gt; [A, B] - &quot;pop&quot; transition animation between C and B</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>(D, replace) =&gt; [A, B, D] - &quot;replace&quot; transition between C and D</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml#pop-method">pop</db:link>(A) =&gt; [A] - &quot;pop&quot; transition between C and A</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>When the stack is empty, a <db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>() will not perform a transition animation because there is nothing to transition from (typically during application start-up). A <db:link xlink:href="qml-qtquick-controls-stackview.xml#pop-method">pop</db:link>() on a stack with depth 1 or 0 is a no-operation. If all items need to be removed from the stack, a separate function <db:link xlink:href="qml-qtquick-controls-stackview.xml#clear-method">clear</db:link>() is available.</db:para>
</db:note>
<db:para>Calling <db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>() returns the item that was pushed onto the stack. Calling <db:link xlink:href="qml-qtquick-controls-stackview.xml#pop-method">pop</db:link>() returns the item that was popped off the stack. When <db:link xlink:href="qml-qtquick-controls-stackview.xml#pop-method">pop</db:link>() is called in an unwind operation, the top-most item (the first item that was popped, which will also be the one transitioning out) is returned.</db:para>
</db:section>
<db:section xml:id="deep-linking">
<db:title>Deep Linking</db:title>
<db:para><db:emphasis>Deep linking</db:emphasis> means launching an application into a particular state. For example, a newspaper application could be launched into showing a particular article, bypassing the front item (and possibly a section item) that would normally have to be navigated through to get to the article concerned. In terms of <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link>, deep linking means the ability to modify the state of the stack, so much so that it is possible to push a set of items to the top of the stack, or to completely reset the stack to a given state.</db:para>
<db:para>The API for deep linking in <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> is the same as for basic navigation. Pushing an array instead of a single item, will involve that all the items in that array will be pushed onto the stack. The transition animation, however, will be conducted as if only the last item in the array was pushed onto the stack. The normal semantics of <db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>() apply for deep linking, meaning that <db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>() adds whatever is pushed onto the stack. Note also that only the last item of the array will be loaded. The rest will be lazy-loaded as needed when entering the screen upon subsequent calls to pop (or when requesting the item by using <db:code role="parameter">get</db:code>).</db:para>
<db:para>This gives us the following result, given the stack [A, B, C]:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>([D, E, F]) =&gt; [A, B, C, D, E, F] - &quot;push&quot; transition animation between C and F</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>([D, E, F], replace) =&gt; [A, B, D, E, F] - &quot;replace&quot; transition animation between C and F</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml#clear-method">clear</db:link>(); <db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>([D, E, F]) =&gt; [D, E, F] - no transition animation (since the stack was empty)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pushing-items">
<db:title>Pushing items</db:title>
<db:para>An item pushed onto the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> can be either an Item, a URL, a string containing a URL, or a Component. To push it, assign it to a property &quot;item&quot; inside a property list, and pass it as an argument to <db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link>:</db:para>
<db:programlisting language="cpp">stackView.push({item: yourItem})
</db:programlisting>
<db:para>The list can contain several properties that control how the item should be pushed:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>item</db:code>: this property is required, and holds the item to be pushed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>properties</db:code>: a list of QML properties to be assigned to the item upon push. These properties will be copied into the item at load time, or when the item will become the current item (normally upon push).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>immediate</db:code>: set this property to <db:code>true</db:code> to skip transition effects. When pushing an array, this property only needs to be set on the first element to make the whole operation immediate.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>replace</db:code>: set this property to replace the current item on the stack. When pushing an array, you only need to set this property on the first element to replace as many elements on the stack as inside the array.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>destroyOnPop</db:code>: set this boolean to <db:code>true</db:code> if <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> needs to destroy the item when it is popped off the stack. By default (if <db:code role="parameter">destroyOnPop</db:code> is not specified), <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> will destroy items pushed as components or URLs. Items not destroyed will be re-parented back to the original parents they had before being pushed onto the stack and hidden. If you need to set this property, do it with care, so that items are not leaked.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the only argument needed is &quot;item&quot;, the following short-hand notation can be applied:</db:para>
<db:programlisting language="cpp">stackView.push(yourItem)
</db:programlisting>
<db:para>You can push several items in one go by using an array of property lists. This is more efficient than pushing items one by one, as <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> can then load only the last item in the list. The rest will be loaded as they are about to become the current item (which happens when the stack is popped). The following example shows how to push an array of items:</db:para>
<db:programlisting language="cpp">stackView.push([{item: yourItem1}, {item: yourItem2}])
</db:programlisting>
<db:para>If an inline item is pushed, the item is temporarily re-parented into the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link>. When the item is later popped off, it gets re-parented back to its original owner again. If, however, an item is pushed as a component or a URL, the actual item will be created as an item from that component. This happens automatically when the item is about to become the current item in the stack. Ownership of the item will then normally be taken by the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link>, which will automatically destroy the item when it is later popped off. The component that declared the item, by contrast, remains in the ownership of the application and is not destroyed by the stack. This can be overridden by explicitly setting <db:code>destroyOnPop</db:code> in the list of arguments given to push.</db:para>
<db:para>If the <db:code>properties</db:code> to be pushed are specified, they will be copied into the item at loading time (in case of a component or URL), or when the item becomes the current item (in case of an inline item). The following example shows how this can be done:</db:para>
<db:programlisting language="cpp">stackView.push({item: someItem, properties: {fgcolor: &quot;red&quot;, bgcolor: &quot;blue&quot;}})
</db:programlisting>
<db:note>
<db:para>If an item is declared inside another item, and that parent gets destroyed, (even if a component was used), that child item will also be destroyed. This follows normal Qt parent-child destruction rules, but sometimes comes as a surprise for developers.</db:para>
</db:note>
</db:section>
<db:section xml:id="lifecycle">
<db:title>Lifecycle</db:title>
<db:para>An item's lifecycle in the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> can have the following transitions:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>instantiation</db:para>
</db:listitem>
<db:listitem>
<db:para>inactive</db:para>
</db:listitem>
<db:listitem>
<db:para>activating</db:para>
</db:listitem>
<db:listitem>
<db:para>active</db:para>
</db:listitem>
<db:listitem>
<db:para>deactivating</db:para>
</db:listitem>
<db:listitem>
<db:para>inactive</db:para>
</db:listitem>
<db:listitem>
<db:para>destruction</db:para>
</db:listitem>
</db:orderedlist>
<db:para>It can move any number of times between inactive and active. When an item is activated, it's visible on the screen and is considered to be the current item. An item in a <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> that is not visible is not activated, even if the item is currently the top-most item in the stack. When the stack becomes visible, the item that is top-most gets activated. Likewise if the stack is then hidden, the topmost item would be deactivated. Popping the item off the top of the stack at this point would not result in further deactivation since the item is not active.</db:para>
<db:para>There is an attached <db:link xlink:href="qml-qtquick-controls-stack.xml#status-attached-prop">Stack.status</db:link> property that tracks the lifecycle. This property is an enumeration with the following values: <db:code>Stack.Inactive</db:code>, <db:code>Stack.Activating</db:code>, <db:code>Stack.Active</db:code> and <db:code>Stack.Deactivating</db:code>. Combined with the normal <db:code>Component.onComplete</db:code> and <db:code>Component.onDestruction</db:code> signals, the entire lifecycle is thus:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Created: Component.onCompleted()</db:para>
</db:listitem>
<db:listitem>
<db:para>Activating: Stack.onStatusChanged (Stack.status is Stack.Activating)</db:para>
</db:listitem>
<db:listitem>
<db:para>Acivated: Stack.onStatusChanged (Stack.status is Stack.Active)</db:para>
</db:listitem>
<db:listitem>
<db:para>Deactivating: Stack.onStatusChanged (Stack.status is Stack.Deactivating)</db:para>
</db:listitem>
<db:listitem>
<db:para>Deactivated: Stack.onStatusChanged (Stack.status is Stack.Inactive)</db:para>
</db:listitem>
<db:listitem>
<db:para>Destruction: Component.onDestruction()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="finding-items">
<db:title>Finding items</db:title>
<db:para>Sometimes it is necessary to search for an item, for example, in order to unwind the stack to an item to which the application does not have a reference. This is facilitated using a function <db:link xlink:href="qml-qtquick-controls-stackview.xml#find-method">find</db:link>() in <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link>. The <db:link xlink:href="qml-qtquick-controls-stackview.xml#find-method">find</db:link>() function takes a callback function as its only argument. The callback gets invoked for each item in the stack (starting at the top). If the callback returns true, then it signals that a match has been found and the <db:link xlink:href="qml-qtquick-controls-stackview.xml#find-method">find</db:link>() function returns that item. If the callback fails to return true (no match is found), then <db:link xlink:href="qml-qtquick-controls-stackview.xml#find-method">find</db:link>() returns <db:code>null</db:code>.</db:para>
<db:para>The code below searches for an item in the stack that has a name &quot;order_id&quot; and then unwinds to that item. Note that since <db:link xlink:href="qml-qtquick-controls-stackview.xml#find-method">find</db:link>() returns <db:code>null</db:code> if no item is found, and since pop unwinds to the bottom of the stack if null is given as the target item, the code works well even in case no matching item is found.</db:para>
<db:programlisting language="cpp">stackView.pop(stackView.find(function(item) {
    return item.name == &quot;order_id&quot;;
}));
</db:programlisting>
<db:para>You can also get to an item in the stack using <db:link xlink:href="qml-qtquick-controls-stackview.xml#get-method">get</db:link>(index). You should use this function if your item depends on another item in the stack, as the function will ensure that the item at the given index gets loaded before it is returned.</db:para>
<db:programlisting language="cpp">previousItem = stackView.get(myItem.Stack.index - 1));
</db:programlisting>
</db:section>
<db:section xml:id="transitions">
<db:title>Transitions</db:title>
<db:para>A transition is performed whenever a item is pushed or popped, and consists of two items: enterItem and exitItem. The <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> itself will never move items around, but instead delegates the job to an external animation set provided by the style or the application developer. How items should visually enter and leave the stack (and the geometry they should end up with) is therefore completely controlled from the outside.</db:para>
<db:para>When the transition starts, the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> will search for a transition that matches the operation executed. There are three transitions to choose from: <db:link xlink:href="qml-qtquick-controls-stackviewdelegate.xml#pushTransition-prop">pushTransition</db:link>, <db:link xlink:href="qml-qtquick-controls-stackviewdelegate.xml#popTransition-prop">popTransition</db:link>, and <db:link xlink:href="qml-qtquick-controls-stackviewdelegate.xml#replaceTransition-prop">replaceTransition</db:link>. Each implements how <db:code>enterItem</db:code> should animate in, and <db:code>exitItem</db:code> out. The transitions are collected inside a <db:link xlink:href="qml-qtquick-controls-stackviewdelegate.xml">StackViewDelegate</db:link> object assigned to <db:link xlink:href="qml-qtquick-controls-stackview.xml#delegate-prop">delegate</db:link>. By default, popTransition and replaceTransition will be the same as pushTransition, unless you set them to something else.</db:para>
<db:para>A simple fade transition could be implemented as:</db:para>
<db:programlisting language="qml">StackView {
    delegate: StackViewDelegate {
        function transitionFinished(properties)
        {
            properties.exitItem.opacity = 1
        }

        pushTransition: StackViewTransition {
            PropertyAnimation {
                target: enterItem
                property: &quot;opacity&quot;
                from: 0
                to: 1
            }
            PropertyAnimation {
                target: exitItem
                property: &quot;opacity&quot;
                from: 1
                to: 0
            }
        }
    }
}
</db:programlisting>
<db:para>PushTransition needs to inherit from StackViewTransition, which is a <db:link xlink:href="qml-qtquick-parallelanimation.xml">ParallelAnimation</db:link> that contains the properties <db:code>enterItem</db:code> and <db:code>exitItem</db:code>. These items should be assigned to the <db:code>target</db:code> property of animations within the transition. Since the same items instance can be pushed several times to a <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link>, you should always override <db:link xlink:href="qml-qtquick-controls-stackviewdelegate.xml#transitionFinished-method">StackViewDelegate.transitionFinished</db:link>(). Implement this function to reset any properties animated on the exitItem so that later transitions can expect the items to be in a default state.</db:para>
<db:para>A more complex example could look like the following. Here, the items are lying on the side before being rotated to an upright position:</db:para>
<db:programlisting language="qml">StackView {
    delegate: StackViewDelegate {
        function transitionFinished(properties)
        {
            properties.exitItem.x = 0
            properties.exitItem.rotation = 0
        }

        pushTransition: StackViewTransition {
            SequentialAnimation {
                ScriptAction {
                    script: enterItem.rotation = 90
                }
                PropertyAnimation {
                    target: enterItem
                    property: &quot;x&quot;
                    from: enterItem.width
                    to: 0
                }
                PropertyAnimation {
                    target: enterItem
                    property: &quot;rotation&quot;
                    from: 90
                    to: 0
                }
            }
            PropertyAnimation {
                target: exitItem
                property: &quot;x&quot;
                from: 0
                to: -exitItem.width
            }
        }
    }
}
</db:programlisting>
<db:section xml:id="advanced-usage">
<db:title>Advanced usage</db:title>
<db:para>When the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> needs a new transition, it first calls <db:link xlink:href="qml-qtquick-controls-stackviewdelegate.xml#getTransition-method">StackViewDelegate.getTransition</db:link>(). The base implementation of this function just looks for a property named <db:code>properties.name</db:code> inside itself (root), which is how it finds <db:code>property Component pushTransition</db:code> in the examples above.</db:para>
<db:programlisting language="cpp">function getTransition(properties)
{
    return root[properties.name]
}
</db:programlisting>
<db:para>You can override this function for your delegate if you need extra logic to decide which transition to return. You could for example introspect the items, and return different animations depending on the their internal state. <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> will expect you to return a Component that contains a StackViewTransition, or a StackViewTransition directly. The former is easier, as <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> will then create the transition and later destroy it when it's done, while avoiding any side effects caused by the transition being alive long after it has run. Returning a StackViewTransition directly can be useful if you need to write some sort of transition caching for performance reasons. As an optimization, you can also return <db:code>null</db:code> to signal that you just want to show/hide the items immediately without creating or running any transitions. You can also override this function if you need to alter the items in any way before the transition starts.</db:para>
<db:para><db:code>properties</db:code> contains the properties that will be assigned to the StackViewTransition before it runs. In fact, you can add more properties to this object during the call if you need to initialize additional properties of your custom StackViewTransition when the returned component is instantiated.</db:para>
<db:para>The following example shows how you can decide which animation to use at runtime:</db:para>
<db:programlisting language="qml">StackViewDelegate {
    function getTransition(properties)
    {
        return (properties.enterItem.Stack.index % 2) ? horizontalTransition : verticalTransition
    }

    function transitionFinished(properties)
    {
        properties.exitItem.x = 0
        properties.exitItem.y = 0
    }

    property Component horizontalTransition: StackViewTransition {
        PropertyAnimation {
            target: enterItem
            property: &quot;x&quot;
            from: target.width
            to: 0
            duration: 300
        }
        PropertyAnimation {
            target: exitItem
            property: &quot;x&quot;
            from: 0
            to: target.width
            duration: 300
        }
    }

    property Component verticalTransition: StackViewTransition {
        PropertyAnimation {
            target: enterItem
            property: &quot;y&quot;
            from: target.height
            to: 0
            duration: 300
        }
        PropertyAnimation {
            target: exitItem
            property: &quot;y&quot;
            from: 0
            to: target.height
            duration: 300
        }
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="supported-attached-properties">
<db:title>Supported Attached Properties</db:title>
<db:para>Items in a <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> support these attached properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stack.xml#index-attached-prop">Stack.index</db:link> - Contains the index of the item inside the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stack.xml#view-attached-prop">Stack.view</db:link> - Contains the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> the item is in</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stack.xml#status-attached-prop">Stack.status</db:link> - Contains the status of the item</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="busy-prop">
<db:title>[read-only] busy : bool</db:title>
<db:para><db:code role="parameter">busy</db:code> is <db:code>true</db:code> if a transition is running, and <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="currentItem-prop">
<db:title>[read-only] currentItem : Item</db:title>
<db:para>The currently top-most item in the stack.</db:para>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : StackViewDelegate</db:title>
<db:para>The transitions to use when pushing or popping items. For better understanding on how to apply custom transitions, read <db:link xlink:href="qml-qtquick-controls-stackview.xml#transitions">Transitions</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-stackview.xml#transitions">Transitions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depth-prop">
<db:title>[read-only] depth : int</db:title>
<db:para>The number of items currently pushed onto the stack.</db:para>
</db:section>
<db:section xml:id="initialItem-prop">
<db:title>initialItem : var</db:title>
<db:para>The first item that should be shown when the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> is created. <db:code role="parameter">initialItem</db:code> can take same value as the first argument to <db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">StackView.push</db:link>(). Note that this is just a convenience for writing <db:code>Component.onCompleted: stackView.push(myInitialItem)</db:code></db:para>
<db:para>Examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>initialItem: Qt.resolvedUrl(&quot;MyItem.qml&quot;)</db:para>
</db:listitem>
<db:listitem>
<db:para>initialItem: myItem</db:para>
</db:listitem>
<db:listitem>
<db:para>initialItem: {&quot;item&quot; : Qt.resolvedUrl(&quot;MyRectangle.qml&quot;), &quot;properties&quot; : {&quot;color&quot; : &quot;red&quot;}}</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-stackview.xml#push-method">push</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="clear-method">
<db:title>void clear()</db:title>
<db:para>Remove all items from the stack. No animations will be applied.</db:para>
</db:section>
<db:section xml:id="completeTransition-method">
<db:title>void completeTransition()</db:title>
<db:para>Immediately completes any ongoing transition. /sa Animation.complete</db:para>
</db:section>
<db:section xml:id="find-method">
<db:title>Item find(<db:emphasis>function</db:emphasis>, bool <db:emphasis>onlySearchLoadedItems</db:emphasis> = false)</db:title>
<db:para>Search for a specific item inside the stack. <db:code role="parameter">func</db:code> will be called for each item in the stack (with the item as argument) until the function returns true. Return value will be the item found. For example: find(function(item, index) { return item.isTheOne }) Set <db:code role="parameter">onlySearchLoadedItems</db:code> to <db:code>true</db:code> to not load items that are not loaded into memory</db:para>
</db:section>
<db:section xml:id="get-method">
<db:title>Item get(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>dontLoad</db:emphasis> = false)</db:title>
<db:para>Returns the item at position <db:code role="parameter">index</db:code> in the stack. If <db:code role="parameter">dontLoad</db:code> is true, the item will not be forced to load (and <db:code>null</db:code> will be returned if not yet loaded)</db:para>
</db:section>
<db:section xml:id="pop-method">
<db:title>Item pop(Item <db:emphasis>item</db:emphasis> = undefined)</db:title>
<db:para>Pops one or more items off the stack.</db:para>
<db:para>The function can also take a property list as argument - <db:code>Item StackView::pop(jsobject dict)</db:code>, which can contain one or more of the following properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>item</db:code>: if specified, all items down to (but not including) <db:code role="parameter">item</db:code> will be popped off. If <db:code role="parameter">item</db:code> is <db:code>null</db:code>, all items down to (but not including) the first item will be popped. If not specified, only the current item will be popped.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>immediate</db:code>: set this property to <db:code>true</db:code> to skip transition effects.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>stackView.pop()</db:para>
</db:listitem>
<db:listitem>
<db:para>stackView.pop({item:someItem, immediate: true})</db:para>
</db:listitem>
<db:listitem>
<db:para>stackView.pop({immediate: true})</db:para>
</db:listitem>
<db:listitem>
<db:para>stackView.pop(null)</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>If the only argument needed is &quot;item&quot;, you can apply the following short- hand notation: <db:code>stackView.pop(anItem)</db:code>.</db:para>
</db:note>
<db:para>Returns the item that was popped off</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-stackview.xml#clear-method">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="push-method">
<db:title>Item push(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Pushes an item onto the stack.</db:para>
<db:para>The function can also take a property list as argument - <db:code>Item StackView::push(jsobject dict)</db:code>, which should contain one or more of the following properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>item</db:code>: this property is required, and holds the item you want to push.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>properties</db:code>: a list of QML properties that should be assigned to the item upon push. These properties will be copied into the item when it is loaded (in case of a component or URL), or when it becomes the current item for the first time (normally upon push).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>immediate</db:code>: set this property to <db:code>true</db:code> to skip transition effects. When pushing an array, you only need to set this property on the first element to make the whole operation immediate.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>replace</db:code>: set this property to replace the current item on the stack. When pushing an array, you only need to set this property on the first element to replace as many elements on the stack as inside the array.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>destroyOnPop</db:code>: set this property to specify if the item needs to be destroyed when its popped off the stack. By default (if <db:code role="parameter">destroyOnPop</db:code> is not specified), <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> will destroy items pushed as components or URLs. Items not destroyed will be re-parented to the original parents they had before being pushed onto the stack, and hidden. If you need to set this property, do it with care, so that items are not leaked.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can also push an array of items (property lists) if you need to push several items in one go. A transition will then only occur between the current item and the last item in the list. Loading the other items will be deferred until needed.</db:para>
<db:para>Examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>stackView.push({item:anItem})</db:para>
</db:listitem>
<db:listitem>
<db:para>stackView.push({item:aURL, immediate: true, replace: true})</db:para>
</db:listitem>
<db:listitem>
<db:para>stackView.push({item:aRectangle, properties:{color:&quot;red&quot;}})</db:para>
</db:listitem>
<db:listitem>
<db:para>stackView.push({item:aComponent, properties:{color:&quot;red&quot;}})</db:para>
</db:listitem>
<db:listitem>
<db:para>stackView.push({item:aComponent.createObject(), destroyOnPop:true})</db:para>
</db:listitem>
<db:listitem>
<db:para>stackView.push([{item:anitem, immediate:true}, {item:aURL}])</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>If the only argument needed is &quot;item&quot;, you can apply the following short- hand notation: <db:code>stackView.push(anItem)</db:code>.</db:para>
</db:note>
<db:para>Returns the item that became current.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-stackview.xml#initialItem-prop">initialItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-stackview.xml#pushing-items">Pushing items</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for StackView</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-method-documentation">
<db:title>Obsolete Method Documentation</db:title>
<db:section xml:id="replace-method">
<db:title>[deprecated] replace(<db:emphasis>item</db:emphasis>, <db:emphasis>properties</db:emphasis>, <db:emphasis>immediate</db:emphasis>)</db:title>
<db:para>This method is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use Push() instead</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
