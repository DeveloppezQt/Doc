<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Quick Nano Browser</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A web browser implemented using the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> QML type.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/quicknanobrowser-demo.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Quick Nano Browser</db:emphasis> demonstrates how to use the <db:link xlink:href="qtwebengine-qmlmodule.xml">Qt WebEngine QML types</db:link> to develop a small web browser application that consists of a browser window with a title bar, toolbar, tab view, and status bar. The web content is loaded in a web engine view within the tab view. If certificate errors occur, users are prompted for action in a message dialog. The status bar pops up to display the URL of a hovered link.</db:para>
<db:para>A web page can issue a request for being displayed in fullscreen mode. Users can allow full screen mode by using a toolbar button. They can leave fullscreen mode by using a keyboard shortcut. Additional toolbar buttons enable moving backwards and forwards in the browser history, reloading tab content, and opening a settings menu for enabling the following features: JavaScript, plugins, fullscreen mode, off the record, HTTP disk cache, autoloading images, and ignoring certificate errors.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-the-main-browser-window">
<db:title>Creating the Main Browser Window</db:title>
<db:para>When the browser main window is loaded, it creates an empty tab using the default profile. Each tab is a web engine view that fills the main window.</db:para>
<db:para>We create the main window in the <db:emphasis>BrowserWindow.qml</db:emphasis> file using the <db:link xlink:href="qml-qtquick-controls2-applicationwindow.xml">ApplicationWindow</db:link> type:</db:para>
<db:programlisting language="cpp">ApplicationWindow {
    id: browserWindow
    property QtObject applicationRoot
    property Item currentWebView: tabs.currentIndex &amp;lt; tabs.count ? tabs.getTab(tabs.currentIndex).item : null
    ...
    width: 1300
    height: 900
    visible: true
    title: currentWebView &amp;amp;&amp;amp; currentWebView.title
</db:programlisting>
<db:para>We use the <db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link> Qt Quick control to create an empty tab view that fills the main window. We set the tab active first, to make sure that the tab item is immediately instantiated:</db:para>
<db:programlisting language="cpp">    TabView {
        id: tabs
        function createEmptyTab(profile) {
            var tab = addTab(&quot;&quot;, tabComponent);
            // We must do this first to make sure that tab.active gets set so that tab.item gets instantiated immediately.
            tab.active = true;
            tab.title = Qt.binding(function() { return tab.item.title });
            tab.item.profile = profile;
            return tab;
        }

        anchors.top: parent.top
        anchors.bottom: devToolsView.top
        anchors.left: parent.left
        anchors.right: parent.right
        Component.onCompleted: createEmptyTab(defaultProfile)
</db:programlisting>
<db:para>The tab contains a web engine view that loads web content:</db:para>
<db:programlisting language="cpp">        // Add custom tab view style so we can customize the tabs to include a close button
        style: TabViewStyle {
            property color frameColor: &quot;#999&quot;
            property color fillColor: &quot;#eee&quot;
            property color nonSelectedColor: &quot;#ddd&quot;
            frameOverlap: 1
            frame: Rectangle {
                color: &quot;#eee&quot;
                border.color: frameColor
            }
            tab: Rectangle {
                id: tabRectangle
                color: styleData.selected ? fillColor : nonSelectedColor
                border.width: 1
                border.color: frameColor
                implicitWidth: Math.max(text.width + 30, 80)
                implicitHeight: Math.max(text.height + 10, 20)
                Rectangle { height: 1 ; width: parent.width ; color: frameColor}
                Rectangle { height: parent.height ; width: 1; color: frameColor}
                Rectangle { x: parent.width - 2; height: parent.height ; width: 1; color: frameColor}
                Text {
                    id: text
                    anchors.left: parent.left
                    anchors.verticalCenter: parent.verticalCenter
                    anchors.leftMargin: 6
                    text: styleData.title
                    elide: Text.ElideRight
                    color: styleData.selected ? &quot;black&quot; : frameColor
                }
                Button {
                    anchors.right: parent.right
                    anchors.verticalCenter: parent.verticalCenter
                    anchors.rightMargin: 4
                    height: 12
                    style: ButtonStyle {
                        background: Rectangle {
                            implicitWidth: 12
                            implicitHeight: 12
                            color: control.hovered ? &quot;#ccc&quot; : tabRectangle.color
                            Text {text: &quot;x&quot; ; anchors.centerIn: parent ; color: &quot;gray&quot;}
                        }}
                    onClicked: tabs.removeTab(styleData.index);
                }
            }
        }

        Component {
            id: tabComponent
            WebEngineView {
                id: webEngineView
                focus: true
</db:programlisting>
<db:para>We use the <db:link xlink:href="qml-qtquick-controls2-action.xml">Action</db:link> type to create new tabs:</db:para>
<db:programlisting language="cpp">    Action {
        shortcut: StandardKey.AddTab
        onTriggered: {
            tabs.createEmptyTab(tabs.count != 0 ? currentWebView.profile : defaultProfile);
            tabs.currentIndex = tabs.count - 1;
            addressBar.forceActiveFocus();
            addressBar.selectAll();
        }
</db:programlisting>
<db:para>We use the <db:link xlink:href="qml-qtquick-controls2-textfield.xml">TextField</db:link> Qt Quick Control within a <db:link xlink:href="qml-qtquick-controls2-toolbar.xml">ToolBar</db:link> to create an address bar that shows the current URL and where users can enter another URL:</db:para>
<db:programlisting language="cpp">    toolBar: ToolBar {
        id: navigationBar
            RowLayout {
                anchors.fill: parent
    ...
                TextField {
                    id: addressBar
    ...
                    focus: true
                    Layout.fillWidth: true
                    text: currentWebView &amp;amp;&amp;amp; currentWebView.url
                    onAccepted: currentWebView.url = utils.fromUserInput(text)
                }
</db:programlisting>
</db:section>
<db:section xml:id="handling-certificate-errors">
<db:title>Handling Certificate Errors</db:title>
<db:para>If the certificate of the site being loaded triggers a certificate error, we call the <db:link xlink:href="qml-qtwebengine-webenginecertificateerror.xml#defer-method">defer</db:link>() QML method to pause the URL request and wait for user input:</db:para>
<db:programlisting language="cpp">                onCertificateError: function(error) {
                    error.defer();
                    sslDialog.enqueue(error);
                }
</db:programlisting>
<db:para>We use the <db:link xlink:href="qml-qt-labs-platform-messagedialog.xml">MessageDialog</db:link> type to prompt users to continue or cancel the loading of the web page. If users select <db:guilabel>Yes</db:guilabel>, we call the <db:link xlink:href="qml-qtwebengine-webenginecertificateerror.xml#ignoreCertificateError-method">ignoreCertificateError</db:link>() method to ignore the error and continue loading content from the URL. If users select <db:guilabel>No</db:guilabel>, we call the <db:link xlink:href="qml-qtwebengine-webenginecertificateerror.xml#rejectCertificate-method">rejectCertificate</db:link>() method to reject the request and stop loading content from the URL:</db:para>
<db:programlisting language="cpp">    MessageDialog {
        id: sslDialog

        property var certErrors: []
        icon: StandardIcon.Warning
        standardButtons: StandardButton.No | StandardButton.Yes
        title: &quot;Server's certificate not trusted&quot;
        text: &quot;Do you wish to continue?&quot;
        detailedText: &quot;If you wish so, you may continue with an unverified certificate. &quot; +
                      &quot;Accepting an unverified certificate means &quot; +
                      &quot;you may not be connected with the host you tried to connect to.\n&quot; +
                      &quot;Do you wish to override the security check and continue?&quot;
        onYes: {
            certErrors.shift().ignoreCertificateError();
            presentError();
        }
        onNo: reject()
        onRejected: reject()

        function reject(){
            certErrors.shift().rejectCertificate();
            presentError();
        }
        function enqueue(error){
            certErrors.push(error);
            presentError();
        }
        function presentError(){
            visible = certErrors.length &amp;gt; 0
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="entering-and-leaving-fullscreen-mode">
<db:title>Entering and Leaving Fullscreen Mode</db:title>
<db:para>We create a menu item for allowing fullscreen mode in a settings menu that we place on the tool bar. Also, we create an action for leaving fullscreen mode by using a keyboard shortcut. We call the <db:link xlink:href="qml-qtwebengine-fullscreenrequest.xml#accept-method">accept</db:link>() method to accept the fullscreen request. The methdod sets the <db:link xlink:href="qml-qtwebengine-webengineview.xml#isFullScreen-prop">isFullScreen</db:link> property to be equal to the <db:link xlink:href="qml-qtwebengine-fullscreenrequest.xml#toggleOn-prop">toggleOn</db:link> property.</db:para>
<db:programlisting language="cpp">                onFullScreenRequested: function(request) {
                    if (request.toggleOn) {
                        webEngineView.state = &quot;FullScreen&quot;;
                        browserWindow.previousVisibility = browserWindow.visibility;
                        browserWindow.showFullScreen();
                        fullScreenNotification.show();
                    } else {
                        webEngineView.state = &quot;&quot;;
                        browserWindow.visibility = browserWindow.previousVisibility;
                        fullScreenNotification.hide();
                    }
                    request.accept();
                }
</db:programlisting>
<db:para>When entering fullscreen mode, we display a notification using the FullScreenNotification custom type that we create in <db:emphasis>FullScreenNotification.qml</db:emphasis>.</db:para>
<db:para>We use the <db:link xlink:href="qml-qtquick-controls2-action.xml">Action</db:link> type in the settings menu to create a shortcut for leaving fullscreen mode by pressing the escape key:</db:para>
<db:programlisting language="cpp">    Settings {
        id : appSettings
        property alias fullScreenSupportEnabled: fullScreenSupportEnabled.checked
        property alias autoLoadIconsForPage: autoLoadIconsForPage.checked
        property alias touchIconsEnabled: touchIconsEnabled.checked
        property alias webRTCPublicInterfacesOnly : webRTCPublicInterfacesOnly.checked
        property alias devToolsEnabled: devToolsEnabled.checked
    }

    Action {
        shortcut: &quot;Escape&quot;
        onTriggered: {
            if (currentWebView.state == &quot;FullScreen&quot;) {
                browserWindow.visibility = browserWindow.previousVisibility;
                fullScreenNotification.hide();
                currentWebView.triggerWebAction(WebEngineView.ExitFullScreen);
            }
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="files-and-attributions">
<db:title>Files and Attributions</db:title>
<db:para>The example uses icons from the Tango Icon Library:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtwebengine-attribution-quicknanobrowser-tango.xml#quicknanobrowser-tango">Tango Icon Library</db:link></db:para>
</db:td>
<db:td>
<db:para>Public Domain</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/ApplicationRoot.qml">webengine/quicknanobrowser/ApplicationRoot.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/BrowserDialog.qml">webengine/quicknanobrowser/BrowserDialog.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/BrowserWindow.qml">webengine/quicknanobrowser/BrowserWindow.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/DownloadView.qml">webengine/quicknanobrowser/DownloadView.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/FullScreenNotification.qml">webengine/quicknanobrowser/FullScreenNotification.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/main.cpp">webengine/quicknanobrowser/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/quicknanobrowser.pro">webengine/quicknanobrowser/quicknanobrowser.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/resources.qrc">webengine/quicknanobrowser/resources.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/utils.h">webengine/quicknanobrowser/utils.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/icons/3rdparty/go-next.png">webengine/quicknanobrowser/icons/3rdparty/go-next.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/icons/3rdparty/go-previous.png">webengine/quicknanobrowser/icons/3rdparty/go-previous.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/icons/3rdparty/process-stop.png">webengine/quicknanobrowser/icons/3rdparty/process-stop.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/quicknanobrowser/icons/3rdparty/view-refresh.png">webengine/quicknanobrowser/icons/3rdparty/view-refresh.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
