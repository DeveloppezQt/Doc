<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMacCocoaViewContainer Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> class provides a widget for macOS that can be used to wrap arbitrary Cocoa views (i.e., NSView subclasses) and insert them into Qt hierarchies.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMacCocoaViewContainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMacCocoaViewContainer is part of <db:simplelist><db:member>advanced</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>While Qt offers a lot of classes for writing your application, Apple's Cocoa frameworks offer functionality that is not currently available (or may never end up) in Qt. Using <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link>, it is possible to take an arbitrary NSView-derived class from Cocoa and put it in a Qt widgets hierarchy. Depending on the level of integration you need, you can use <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> directly or subclass it to wrap more functionality of the underlying NSView.</db:para>
<db:para>It should be also noted that, at the Cocoa level, there is a difference between top-level windows and views (widgets that are inside a window). For this reason, make sure that the NSView that you are wrapping doesn't end up as a top-level window. The best way to ensure this is to make sure <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link>'s parent widget is not null.</db:para>
<db:para>If you are using <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> as a subclass and are accessing Cocoa API, it is probably simpler to have your file end with <db:code>.mm</db:code> instead of <db:code>.cpp</db:code>. Most Apple tools will correctly identify the source as Objective-C++.</db:para>
<db:para><db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> requires knowledge of how Cocoa works, especially in regard to its reference counting (retain/release) nature. It is noted in the functions below if there is any change in the reference count. Cocoa views often generate temporary objects that are released by an autorelease pool. If this is done outside of a running event loop, it is up to the developer to provide the autorelease pool.</db:para>
<db:para>The following is a snippet showing how to subclass <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> to wrap an NSSearchField.</db:para>
<db:programlisting language="cpp">SearchWidget::SearchWidget(QWidget *parent)
    : QMacCocoaViewContainer(0, parent)
{
    // Many Cocoa objects create temporary autorelease objects,
    // so create a pool to catch them.
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    // Create the NSSearchField, set it on the QCocoaViewContainer.
    NSSearchField *search = [[NSSearchField alloc] init];
    setCocoaView(search);

    // Use a Qt menu for the search field menu.
    QMenu *qtMenu = createMenu(this);
    NSMenu *nsMenu = qtMenu-&amp;gt;macMenu(0);
    [[search cell] setSearchMenuTemplate:nsMenu];

    // Release our reference, since our super class takes ownership and we
    // don't need it anymore.
    [search release];

    // Clean up our pool as we no longer need it.
    [pool release];
}
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMacCocoaViewContainer">
<db:title>QMacCocoaViewContainer::QMacCocoaViewContainer(NSView *<db:emphasis>view</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMacCocoaViewContainer</db:methodname>
<db:methodparam>
<db:type>NSView *</db:type>
<db:parameter>view</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMacCocoaViewContainer(NSView *view, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a new <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> using the NSView pointer in the <db:code role="parameter">view</db:code> with parent, <db:code role="parameter">parent</db:code>. <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> will retain the <db:code role="parameter">view</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMacCocoaViewContainer">
<db:title>[virtual] QMacCocoaViewContainer::~QMacCocoaViewContainer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMacCocoaViewContainer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMacCocoaViewContainer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroy the <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> and release the wrapped view.</db:para>
</db:section>
<db:section xml:id="cocoaView">
<db:title>NSView *QMacCocoaViewContainer::cocoaView() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>NSView *</db:type>
<db:methodname>cocoaView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">NSView * cocoaView() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the NSView that has been set on this container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmaccocoaviewcontainer.xml#setCocoaView">setCocoaView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCocoaView">
<db:title>void QMacCocoaViewContainer::setCocoaView(NSView *<db:emphasis>view</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCocoaView</db:methodname>
<db:methodparam>
<db:type>NSView *</db:type>
<db:parameter>view</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCocoaView(NSView *view)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">view</db:code> as the NSView to contain and retains it. If this container already had a view set, it will release the previously set view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmaccocoaviewcontainer.xml#cocoaView">cocoaView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
