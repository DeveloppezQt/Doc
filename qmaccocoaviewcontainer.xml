<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMacCocoaViewContainer Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> class provides a widget for macOS that can be used to wrap arbitrary Cocoa views (i.e., NSView subclasses) and insert them into Qt hierarchies.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMacCocoaViewContainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMacCocoaViewContainer is part of <db:simplelist><db:member>advanced</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>While Qt offers a lot of classes for writing your application, Apple's Cocoa framework offers lots of functionality that is not currently in Qt or may never end up in Qt. Using <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link>, it is possible to put an arbitrary NSView-derived class from Cocoa and put it in a Qt hierarchy. Depending on how comfortable you are with using objective-C, you can use <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> directly, or subclass it to wrap further functionality of the underlying NSView.</db:para>
<db:para><db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> works regardless if Qt is built against Carbon or Cocoa. However, QCocoaContainerView requires macOS 10.5 or better to be used with Carbon.</db:para>
<db:para>It should be also noted that at the low level on macOS, there is a difference between windows (top-levels) and view (widgets that are inside a window). For this reason, make sure that the NSView that you are wrapping doesn't end up as a top-level. The best way to ensure this is to make sure you always have a parent and not set the parent to 0.</db:para>
<db:para>If you are using <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> as a sub-class and are mixing and matching objective-C with C++ (a.k.a. objective-C++). It is probably simpler to have your file end with <db:code>.mm</db:code> than <db:code>.cpp</db:code>. Most Apple tools will correctly identify the source as objective-C++.</db:para>
<db:para><db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> requires knowledge of how Cocoa works, especially in regard to its reference counting (retain/release) nature. It is noted in the functions below if there is any change in the reference count. Cocoa views often generate temporary objects that are released by an autorelease pool. If this is done outside of a running event loop, it is up to the developer to provide the autorelease pool.</db:para>
<db:para>The following is a snippet of subclassing <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> to wrap a NSSearchField.</db:para>
<db:programlisting language="cpp">SearchWidget::SearchWidget(QWidget *parent)
    : QMacCocoaViewContainer(0, parent)
{
    // Many Cocoa objects create temporary autorelease objects,
    // so create a pool to catch them.
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    // Create the NSSearchField, set it on the QCocoaViewContainer.
    NSSearchField *search = [[NSSearchField alloc] init];
    setCocoaView(search);

    // Use a Qt menu for the search field menu.
    QMenu *qtMenu = createMenu(this);
    NSMenu *nsMenu = qtMenu-&gt;macMenu(0);
    [[search cell] setSearchMenuTemplate:nsMenu];

    // Release our reference, since our super class takes ownership and we
    // don't need it anymore.
    [search release];

    // Clean up our pool as we no longer need it.
    [pool release];
}
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QMacCocoaViewContainer">
<db:title>[virtual noexcept] QMacCocoaViewContainer::~QMacCocoaViewContainer()</db:title>
<db:para>Destroy the <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link> and release the wrapped view.</db:para>
</db:section>
<db:section xml:id="cocoaView">
<db:title>NSView *QMacCocoaViewContainer::cocoaView() const</db:title>
<db:para>Returns the NSView that has been set on this container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmaccocoaviewcontainer.xml#setCocoaView">setCocoaView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCocoaView">
<db:title>void QMacCocoaViewContainer::setCocoaView(NSView *<db:emphasis>view</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">view</db:code> as the NSView to contain and retains it. If this container already had a view set, it will release the previously set view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmaccocoaviewcontainer.xml#cocoaView">cocoaView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
