<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickGraphicsConfiguration Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickgraphicsconfiguration.xml">QQuickGraphicsConfiguration</db:link> class is a container for low-level graphics settings that can affect how the underlying graphics API, such as Vulkan, is initialized by the Qt Quick scene graph. It can also control certain aspects of the scene graph renderer.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickGraphicsConfiguration</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When constructing and showing a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> that uses Vulkan to render, a Vulkan instance (<db:code>VkInstance</db:code>), a physical device (<db:code>VkPhysicalDevice</db:code>), a device (<db:code>VkDevice</db:code>) and associated objects (queues, pools) are initialized through the Vulkan API. The same is mostly true when using <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> to redirect the rendering into a custom render target, such as a texture. While <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link> construction is under the application's control then, the initialization of other graphics objects happen the same way in <db:link xlink:href="qquickrendercontrol.xml#initialize">QQuickRenderControl::initialize</db:link>() as with an on-screen <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>.</db:para>
<db:para>For the majority of applications no additional configuration is needed because Qt Quick provides reasonable defaults for many low-level graphics settings, for example which device extensions to enable.</db:para>
<db:para>This will not alway be sufficient, however. In advanced use cases, when integrating direct Vulkan or other graphics API content, or when integrating with an external 3D or VR engine, such as, OpenXR, the application will want to specify its own set of settings when it comes to details, such as which device extensions to enable.</db:para>
<db:para>That is what this class enables. It allows specifying, for example, a list of device extensions that is then picked up by the scene graph when using Vulkan, or graphics APIs where the concept is applicable. Where some concepts are not applicable, the related settings are simply ignored.</db:para>
<db:para>Another class of settings are related to the scene graph's renderer. In some cases applications may want to control certain behavior,such as using the depth buffer when rendering 2D content. In Qt 5 such settings were either not controllable at all, or were managed through environment variables. In Qt 6, <db:link xlink:href="qquickgraphicsconfiguration.xml">QQuickGraphicsConfiguration</db:link> provides a new home for these settings, while keeping support for the legacy environment variables, where applicable.</db:para>
<db:note>
<db:para>Setting a <db:link xlink:href="qquickgraphicsconfiguration.xml">QQuickGraphicsConfiguration</db:link> on a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> must happen early enough, before the scene graph is initialized for the first time for that window. With on-screen windows this means the call must be done before invoking show() on the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> or <db:link xlink:href="qquickview.xml">QQuickView</db:link>. With <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> the configuration must be finalized before calling <db:link xlink:href="qquickrendercontrol.xml#initialize">initialize</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setGraphicsConfiguration">QQuickWindow::setGraphicsConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link></db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickGraphicsConfiguration">
<db:title>QQuickGraphicsConfiguration::QQuickGraphicsConfiguration()</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickGraphicsConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickGraphicsConfiguration()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a default <db:link xlink:href="qquickgraphicsconfiguration.xml">QQuickGraphicsConfiguration</db:link> that does not specify any additional settings for the scene graph to take into account.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickGraphicsConfiguration">
<db:title>QQuickGraphicsConfiguration::~QQuickGraphicsConfiguration()</db:title>
<db:destructorsynopsis>
<db:methodname>~QQuickGraphicsConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickGraphicsConfiguration()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="deviceExtensions">
<db:title>QByteArrayList QQuickGraphicsConfiguration::deviceExtensions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayList</db:type>
<db:methodname>deviceExtensions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayList deviceExtensions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of the requested additional device extensions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickgraphicsconfiguration.xml#setDeviceExtensions">setDeviceExtensions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDepthBufferEnabledFor2D">
<db:title>bool QQuickGraphicsConfiguration::isDepthBufferEnabledFor2D() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDepthBufferEnabledFor2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDepthBufferEnabledFor2D() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if depth buffer usage is enabled for 2D content.</db:para>
<db:para>By default the value is true, unless the <db:code>QSG_NO_DEPTH_BUFFER</db:code> environment variable is set.</db:para>
</db:section>
<db:section xml:id="preferredInstanceExtensions">
<db:title>[static, since 6.1] QByteArrayList QQuickGraphicsConfiguration::preferredInstanceExtensions()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArrayList</db:type>
<db:methodname>preferredInstanceExtensions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayList preferredInstanceExtensions()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of Vulkan instance extensions Qt Quick prefers to have enabled on the VkInstance.</db:para>
<db:para>In most cases Qt Quick is responsible for creating a <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link>. This function is not relevant then. On the other hand, when using <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> in combination with Vulkan-based rendering, it is the application's responsibility to create a <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link> and associate it with the (offscreen) <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>. In this case, it is expected that the application queries the list of instance extensions to enable, and passes them to <db:link xlink:href="qvulkaninstance.xml#setExtensions">QVulkanInstance::setExtensions</db:link>() before calling <db:link xlink:href="qvulkaninstance.xml#create">QVulkanInstance::create</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="setDepthBufferFor2D">
<db:title>void QQuickGraphicsConfiguration::setDepthBufferFor2D(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDepthBufferFor2D</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDepthBufferFor2D(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the usage of depth buffer for 2D content to <db:code role="parameter">enable</db:code>. When disabled, the Qt Quick scene graph never writes into the depth buffer.</db:para>
<db:para>By default the value is true, unless the <db:code>QSG_NO_DEPTH_BUFFER</db:code> environment variable is set.</db:para>
<db:para>The default value of true is the most optimal setting for the vast majority of scenes. Disabling depth buffer usage reduces the efficiency of the scene graph's batching.</db:para>
<db:para>There are cases however, when allowing the 2D content write to the depth buffer is not ideal. Consider a 3D scene as an &quot;overlay&quot; on top the 2D scene, rendered via Qt Quick 3D using a <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> with <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">renderMode</db:link> set to <db:code>Overlay</db:code>. In this case, having the depth buffer filled by 2D content can cause unexpected results. This is because the way the 2D scene graph renderer generates and handles depth values is not necessarily compatible with how a 3D scene works. This may end up in depth value clashes, collisions, and unexpected depth test failures. Therefore, the robust approach here is to call this function with <db:code role="parameter">enable</db:code> set to false, and disable depth buffer writes for the 2D content in the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>.</db:para>
<db:note>
<db:para>This flag is not fully identical to setting the <db:code>QSG_NO_DEPTH_BUFFER</db:code> environment variable. This flag does not control the depth-stencil buffers' presence. It is rather relevant for the rendering pipeline. To force not having depth/stencil attachments at all, set <db:code>QSG_NO_DEPTH_BUFFER</db:code> and <db:code>QSG_NO_STENCIL_BUFFER</db:code>. Be aware however that such a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>, and any Item layers in it, may then become incompatible with items, such as <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> with certain operating modes, because 3D content requires a depth buffer. Calling this function is always safe, but can mean that resources, such as depth buffers, are created even though they are not actively used.</db:para>
</db:note>
</db:section>
<db:section xml:id="setDeviceExtensions">
<db:title>void QQuickGraphicsConfiguration::setDeviceExtensions(const QByteArrayList &amp;<db:emphasis>extensions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDeviceExtensions</db:methodname>
<db:methodparam>
<db:type>const QByteArrayList &amp;</db:type>
<db:parameter>extensions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDeviceExtensions(const QByteArrayList &amp;extensions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the list of additional <db:code role="parameter">extensions</db:code> to enable on the graphics device (such as, the <db:code>VkDevice</db:code>).</db:para>
<db:para>When rendering with a graphics API where the concept is not applicable, <db:code role="parameter">extensions</db:code> will be ignored.</db:para>
<db:note>
<db:para>The list specifies additional, extra extensions. Qt Quick always enables extensions that are required by the scene graph.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickgraphicsconfiguration.xml#deviceExtensions">deviceExtensions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
