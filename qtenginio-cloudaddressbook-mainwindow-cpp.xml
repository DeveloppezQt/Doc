<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Enginio C++ Examples - Cloud Address Book</db:title>
<db:productname>QtEnginio</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio</db:titleabbrev>
<db:abstract>
<db:para>The Cloud Address Book demonstrates how to use sorting, filtering, and the full text search functionality.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtCore/qbytearray.h&gt;
#include &lt;QtCore/qpair.h&gt;

#include &lt;QtCore/qjsondocument.h&gt;
#include &lt;QtCore/qjsonobject.h&gt;
#include &lt;QtCore/qsortfilterproxymodel.h&gt;

#include &lt;Enginio/enginioclient.h&gt;
#include &lt;Enginio/enginioreply.h&gt;

#include &lt;QtGui/qicon.h&gt;
#include &lt;QtWidgets/qpushbutton.h&gt;

#include &quot;addressbookmodel.h&quot;

// To get the backend right, we use a helper class in the example.
// Usually one would just insert the backend information below.
#include &quot;backendhelper.h&quot;

#include &quot;mainwindow.h&quot;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    setupUi(this);
    QByteArray EnginioBackendId = backendId(&quot;cloudaddressbook&quot;);

    client = new EnginioClient(this);
    client-&gt;setBackendId(EnginioBackendId);

    // this line is a debugging conviniance, passing all errors to qDebug()
    QObject::connect(client, &amp;EnginioClient::error, this, &amp;MainWindow::error);

    model = new AddressBookModel(this);
    model-&gt;setClient(client);

    QJsonObject query;
    query[&quot;objectType&quot;] = QString::fromUtf8(&quot;objects.addressbook&quot;);
    model-&gt;setQuery(query);

    tableView-&gt;horizontalHeader()-&gt;setSectionResizeMode(QHeaderView::ResizeToContents);

    sortFilterProxyModel = new QSortFilterProxyModel(this);
    sortFilterProxyModel-&gt;setSourceModel(model);
    tableView-&gt;setSortingEnabled(true);
    tableView-&gt;setModel(sortFilterProxyModel);

    // create the full text search based on searchEdit text value
    QObject::connect(searchEdit, &amp;QLineEdit::returnPressed, this, &amp;MainWindow::onSearchEdit);

    // clear the status bar when the search is finished
    QObject::connect(model, &amp;AddressBookModel::searchFinished, this, &amp;MainWindow::onSearchFinished);

    // append an empty row
    QObject::connect(add, &amp;QPushButton::clicked, this, &amp;MainWindow::onAddRow);

    // enable remove button when a row is selected
    QObject::connect(tableView-&gt;selectionModel(), &amp;QItemSelectionModel::selectionChanged, this, &amp;MainWindow::onSelectionChanged);

    // remove selected rows
    QObject::connect(remove, &amp;QPushButton::clicked, this, &amp;MainWindow::onRemoveRow);
}

void MainWindow::onSearchEdit()
{
    model-&gt;newSearch(searchEdit-&gt;text());
    statusbar-&gt;showMessage(QStringLiteral(&quot;Searching for: &quot;) + searchEdit-&gt;text());
    searchEdit-&gt;clear();
}

void MainWindow::onSearchFinished()
{
    statusbar-&gt;showMessage(QStringLiteral(&quot;Search finished&quot;), 1500);
}

void MainWindow::onAddRow()
{
    QJsonObject item;
    item.insert(&quot;objectType&quot;, QString::fromUtf8(&quot;objects.addressbook&quot;));
    EnginioReply *reply = model-&gt;append(item);
    QObject::connect(reply, &amp;EnginioReply::finished, reply, &amp;EnginioReply::deleteLater);
}

void MainWindow::onSelectionChanged()
{
    remove-&gt;setEnabled(tableView-&gt;selectionModel()-&gt;selectedRows().count());
}

void MainWindow::onRemoveRow()
{
    foreach (const QModelIndex &amp;index, tableView-&gt;selectionModel()-&gt;selectedRows()) {
        QModelIndex sourceIndex = sortFilterProxyModel-&gt;mapToSource(index);
        EnginioReply *reply = model-&gt;remove(sourceIndex.row());
        QObject::connect(reply, &amp;EnginioReply::finished, reply, &amp;EnginioReply::deleteLater);
    }
}

void MainWindow::error(EnginioReply *error)
{
    qWarning() &lt;&lt; Q_FUNC_INFO &lt;&lt; error;
}

</db:programlisting>
</db:article>
