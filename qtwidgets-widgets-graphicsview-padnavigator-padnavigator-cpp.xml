<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Pad Navigator Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to create animated user interface.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;flippablepad.h&quot;
#include &quot;padnavigator.h&quot;
#include &quot;splashitem.h&quot;

#ifndef QT_NO_OPENGL
#include &amp;lt;QtOpenGL&amp;gt;
#else
#include &amp;lt;QtWidgets&amp;gt;
#endif

PadNavigator::PadNavigator(const QSize &amp;amp;size, QWidget *parent)
    : QGraphicsView(parent)
{
    // Splash item
    SplashItem *splash = new SplashItem;
    splash-&amp;gt;setZValue(1);

    // Pad item
    FlippablePad *pad = new FlippablePad(size);
    QGraphicsRotation *flipRotation = new QGraphicsRotation(pad);
    QGraphicsRotation *xRotation = new QGraphicsRotation(pad);
    QGraphicsRotation *yRotation = new QGraphicsRotation(pad);
    flipRotation-&amp;gt;setAxis(Qt::YAxis);
    xRotation-&amp;gt;setAxis(Qt::YAxis);
    yRotation-&amp;gt;setAxis(Qt::XAxis);
    pad-&amp;gt;setTransformations(QList&amp;lt;QGraphicsTransform *&amp;gt;()
                            &amp;lt;&amp;lt; flipRotation
                            &amp;lt;&amp;lt; xRotation &amp;lt;&amp;lt; yRotation);

    // Back (proxy widget) item
    QGraphicsProxyWidget *backItem = new QGraphicsProxyWidget(pad);
    QWidget *widget = new QWidget;
    form.setupUi(widget);
    form.hostName-&amp;gt;setFocus();
    backItem-&amp;gt;setWidget(widget);
    backItem-&amp;gt;setVisible(false);
    backItem-&amp;gt;setFocus();
    backItem-&amp;gt;setCacheMode(QGraphicsItem::ItemCoordinateCache);
    const QRectF r = backItem-&amp;gt;rect();
    backItem-&amp;gt;setTransform(QTransform()
                           .rotate(180, Qt::YAxis)
                           .translate(-r.width()/2, -r.height()/2));

    // Selection item
    RoundRectItem *selectionItem = new RoundRectItem(QRectF(-60, -60, 120, 120), Qt::gray, pad);
    selectionItem-&amp;gt;setZValue(0.5);

    // Splash animations
    QPropertyAnimation *smoothSplashMove = new QPropertyAnimation(splash, &quot;y&quot;);
    QPropertyAnimation *smoothSplashOpacity = new QPropertyAnimation(splash, &quot;opacity&quot;);
    smoothSplashMove-&amp;gt;setEasingCurve(QEasingCurve::InQuad);
    smoothSplashMove-&amp;gt;setDuration(250);
    smoothSplashOpacity-&amp;gt;setDuration(250);

    // Selection animation
    QPropertyAnimation *smoothXSelection = new QPropertyAnimation(selectionItem, &quot;x&quot;);
    QPropertyAnimation *smoothYSelection = new QPropertyAnimation(selectionItem, &quot;y&quot;);
    QPropertyAnimation *smoothXRotation = new QPropertyAnimation(xRotation, &quot;angle&quot;);
    QPropertyAnimation *smoothYRotation = new QPropertyAnimation(yRotation, &quot;angle&quot;);
    smoothXSelection-&amp;gt;setDuration(125);
    smoothYSelection-&amp;gt;setDuration(125);
    smoothXRotation-&amp;gt;setDuration(125);
    smoothYRotation-&amp;gt;setDuration(125);
    smoothXSelection-&amp;gt;setEasingCurve(QEasingCurve::InOutQuad);
    smoothYSelection-&amp;gt;setEasingCurve(QEasingCurve::InOutQuad);
    smoothXRotation-&amp;gt;setEasingCurve(QEasingCurve::InOutQuad);
    smoothYRotation-&amp;gt;setEasingCurve(QEasingCurve::InOutQuad);

    // Flip animation setup
    QPropertyAnimation *smoothFlipRotation = new QPropertyAnimation(flipRotation, &quot;angle&quot;);
    QPropertyAnimation *smoothFlipScale = new QPropertyAnimation(pad, &quot;scale&quot;);
    QPropertyAnimation *smoothFlipXRotation = new QPropertyAnimation(xRotation, &quot;angle&quot;);
    QPropertyAnimation *smoothFlipYRotation = new QPropertyAnimation(yRotation, &quot;angle&quot;);
    QParallelAnimationGroup *flipAnimation = new QParallelAnimationGroup(this);
    smoothFlipScale-&amp;gt;setDuration(500);
    smoothFlipRotation-&amp;gt;setDuration(500);
    smoothFlipXRotation-&amp;gt;setDuration(500);
    smoothFlipYRotation-&amp;gt;setDuration(500);
    smoothFlipScale-&amp;gt;setEasingCurve(QEasingCurve::InOutQuad);
    smoothFlipRotation-&amp;gt;setEasingCurve(QEasingCurve::InOutQuad);
    smoothFlipXRotation-&amp;gt;setEasingCurve(QEasingCurve::InOutQuad);
    smoothFlipYRotation-&amp;gt;setEasingCurve(QEasingCurve::InOutQuad);
    smoothFlipScale-&amp;gt;setKeyValueAt(0, qvariant_cast&amp;lt;qreal&amp;gt;(1.0));
    smoothFlipScale-&amp;gt;setKeyValueAt(0.5, qvariant_cast&amp;lt;qreal&amp;gt;(0.7));
    smoothFlipScale-&amp;gt;setKeyValueAt(1, qvariant_cast&amp;lt;qreal&amp;gt;(1.0));
    flipAnimation-&amp;gt;addAnimation(smoothFlipRotation);
    flipAnimation-&amp;gt;addAnimation(smoothFlipScale);
    flipAnimation-&amp;gt;addAnimation(smoothFlipXRotation);
    flipAnimation-&amp;gt;addAnimation(smoothFlipYRotation);

    // Flip animation delayed property assignment
    QSequentialAnimationGroup *setVariablesSequence = new QSequentialAnimationGroup;
    QPropertyAnimation *setFillAnimation = new QPropertyAnimation(pad, &quot;fill&quot;);
    QPropertyAnimation *setBackItemVisibleAnimation = new QPropertyAnimation(backItem, &quot;visible&quot;);
    QPropertyAnimation *setSelectionItemVisibleAnimation = new QPropertyAnimation(selectionItem, &quot;visible&quot;);
    setFillAnimation-&amp;gt;setDuration(0);
    setBackItemVisibleAnimation-&amp;gt;setDuration(0);
    setSelectionItemVisibleAnimation-&amp;gt;setDuration(0);
    setVariablesSequence-&amp;gt;addPause(250);
    setVariablesSequence-&amp;gt;addAnimation(setBackItemVisibleAnimation);
    setVariablesSequence-&amp;gt;addAnimation(setSelectionItemVisibleAnimation);
    setVariablesSequence-&amp;gt;addAnimation(setFillAnimation);
    flipAnimation-&amp;gt;addAnimation(setVariablesSequence);

    // Build the state machine
    QStateMachine *stateMachine = new QStateMachine(this);
    QState *splashState = new QState(stateMachine);
    QState *frontState = new QState(stateMachine);
    QHistoryState *historyState = new QHistoryState(frontState);
    QState *backState = new QState(stateMachine);
    frontState-&amp;gt;assignProperty(pad, &quot;fill&quot;, false);
    frontState-&amp;gt;assignProperty(splash, &quot;opacity&quot;, 0.0);
    frontState-&amp;gt;assignProperty(backItem, &quot;visible&quot;, false);
    frontState-&amp;gt;assignProperty(flipRotation, &quot;angle&quot;, qvariant_cast&amp;lt;qreal&amp;gt;(0.0));
    frontState-&amp;gt;assignProperty(selectionItem, &quot;visible&quot;, true);
    backState-&amp;gt;assignProperty(pad, &quot;fill&quot;, true);
    backState-&amp;gt;assignProperty(backItem, &quot;visible&quot;, true);
    backState-&amp;gt;assignProperty(xRotation, &quot;angle&quot;, qvariant_cast&amp;lt;qreal&amp;gt;(0.0));
    backState-&amp;gt;assignProperty(yRotation, &quot;angle&quot;, qvariant_cast&amp;lt;qreal&amp;gt;(0.0));
    backState-&amp;gt;assignProperty(flipRotation, &quot;angle&quot;, qvariant_cast&amp;lt;qreal&amp;gt;(180.0));
    backState-&amp;gt;assignProperty(selectionItem, &quot;visible&quot;, false);
    stateMachine-&amp;gt;addDefaultAnimation(smoothXRotation);
    stateMachine-&amp;gt;addDefaultAnimation(smoothYRotation);
    stateMachine-&amp;gt;addDefaultAnimation(smoothXSelection);
    stateMachine-&amp;gt;addDefaultAnimation(smoothYSelection);
    stateMachine-&amp;gt;setInitialState(splashState);

    // Transitions
    QEventTransition *anyKeyTransition = new QEventTransition(this, QEvent::KeyPress, splashState);
    anyKeyTransition-&amp;gt;setTargetState(frontState);
    anyKeyTransition-&amp;gt;addAnimation(smoothSplashMove);
    anyKeyTransition-&amp;gt;addAnimation(smoothSplashOpacity);

    QKeyEventTransition *enterTransition = new QKeyEventTransition(this, QEvent::KeyPress,
                                                                   Qt::Key_Enter, backState);
    QKeyEventTransition *returnTransition = new QKeyEventTransition(this, QEvent::KeyPress,
                                                                    Qt::Key_Return, backState);
    QKeyEventTransition *backEnterTransition = new QKeyEventTransition(this, QEvent::KeyPress,
                                                                       Qt::Key_Enter, frontState);
    QKeyEventTransition *backReturnTransition = new QKeyEventTransition(this, QEvent::KeyPress,
                                                                        Qt::Key_Return, frontState);
    enterTransition-&amp;gt;setTargetState(historyState);
    returnTransition-&amp;gt;setTargetState(historyState);
    backEnterTransition-&amp;gt;setTargetState(backState);
    backReturnTransition-&amp;gt;setTargetState(backState);
    enterTransition-&amp;gt;addAnimation(flipAnimation);
    returnTransition-&amp;gt;addAnimation(flipAnimation);
    backEnterTransition-&amp;gt;addAnimation(flipAnimation);
    backReturnTransition-&amp;gt;addAnimation(flipAnimation);

    // Create substates for each icon; store in temporary grid.
    int columns = size.width();
    int rows = size.height();
    QVector&amp;lt; QVector&amp;lt; QState * &amp;gt; &amp;gt; stateGrid;
    stateGrid.resize(rows);
    for (int y = 0; y &amp;lt; rows; ++y) {
        stateGrid[y].resize(columns);
        for (int x = 0; x &amp;lt; columns; ++x)
            stateGrid[y][x] = new QState(frontState);
    }
    frontState-&amp;gt;setInitialState(stateGrid[0][0]);
    selectionItem-&amp;gt;setPos(pad-&amp;gt;iconAt(0, 0)-&amp;gt;pos());

    // Enable key navigation using state transitions
    for (int y = 0; y &amp;lt; rows; ++y) {
        for (int x = 0; x &amp;lt; columns; ++x) {
            QState *state = stateGrid[y][x];
            QKeyEventTransition *rightTransition = new QKeyEventTransition(this, QEvent::KeyPress,
                                                                           Qt::Key_Right, state);
            QKeyEventTransition *leftTransition = new QKeyEventTransition(this, QEvent::KeyPress,
                                                                          Qt::Key_Left, state);
            QKeyEventTransition *downTransition = new QKeyEventTransition(this, QEvent::KeyPress,
                                                                          Qt::Key_Down, state);
            QKeyEventTransition *upTransition = new QKeyEventTransition(this, QEvent::KeyPress,
                                                                        Qt::Key_Up, state);
            rightTransition-&amp;gt;setTargetState(stateGrid[y][(x + 1) % columns]);
            leftTransition-&amp;gt;setTargetState(stateGrid[y][((x - 1) + columns) % columns]);
            downTransition-&amp;gt;setTargetState(stateGrid[(y + 1) % rows][x]);
            upTransition-&amp;gt;setTargetState(stateGrid[((y - 1) + rows) % rows][x]);
            RoundRectItem *icon = pad-&amp;gt;iconAt(x, y);
            state-&amp;gt;assignProperty(xRotation, &quot;angle&quot;, -icon-&amp;gt;x() / 6.0);
            state-&amp;gt;assignProperty(yRotation, &quot;angle&quot;, icon-&amp;gt;y() / 6.0);
            state-&amp;gt;assignProperty(selectionItem, &quot;x&quot;, icon-&amp;gt;x());
            state-&amp;gt;assignProperty(selectionItem, &quot;y&quot;, icon-&amp;gt;y());
            frontState-&amp;gt;assignProperty(icon, &quot;visible&quot;, true);
            backState-&amp;gt;assignProperty(icon, &quot;visible&quot;, false);

            QPropertyAnimation *setIconVisibleAnimation = new QPropertyAnimation(icon, &quot;visible&quot;);
            setIconVisibleAnimation-&amp;gt;setDuration(0);
            setVariablesSequence-&amp;gt;addAnimation(setIconVisibleAnimation);
        }
    }

    // Scene
    QGraphicsScene *scene = new QGraphicsScene(this);
    scene-&amp;gt;setBackgroundBrush(QPixmap(&quot;:/images/blue_angle_swirl.jpg&quot;));
    scene-&amp;gt;setItemIndexMethod(QGraphicsScene::NoIndex);
    scene-&amp;gt;addItem(pad);
    scene-&amp;gt;setSceneRect(scene-&amp;gt;itemsBoundingRect());
    setScene(scene);

    // Adjust splash item to scene contents
    const QRectF sbr = splash-&amp;gt;boundingRect();
    splash-&amp;gt;setPos(-sbr.width() / 2, scene-&amp;gt;sceneRect().top() - 2);
    frontState-&amp;gt;assignProperty(splash, &quot;y&quot;, splash-&amp;gt;y() - 100.0);
    scene-&amp;gt;addItem(splash);

    // View
    setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    setMinimumSize(50, 50);
    setViewportUpdateMode(FullViewportUpdate);
    setCacheMode(CacheBackground);
    setRenderHints(QPainter::Antialiasing
                   | QPainter::SmoothPixmapTransform
                   | QPainter::TextAntialiasing);
#ifndef QT_NO_OPENGL
    setViewport(new QOpenGLWidget);
#endif

    stateMachine-&amp;gt;start();
}

void PadNavigator::resizeEvent(QResizeEvent *event)
{
    QGraphicsView::resizeEvent(event);
    fitInView(scene()-&amp;gt;sceneRect(), Qt::KeepAspectRatio);
}

</db:programlisting>
</db:article>
