<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineView Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> class provides a widget that is used to view and edit web documents.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginewidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QWebEngineView is part of <db:simplelist><db:member>advanced</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:emphasis>web view</db:emphasis> is the main widget component of the Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> web browsing module. It can be used in various applications to display web content live from the Internet.</db:para>
<db:para>A <db:emphasis>web site</db:emphasis> can be loaded to a web view with the load() function. The GET method is always used to load URLs.</db:para>
<db:para>Like all Qt widgets, the <db:link xlink:href="qwidget.xml#show">show</db:link>() function must be invoked in order to display the web view. The snippet below illustrates this:</db:para>
<db:programlisting language="cpp">    QWebEngineView *view = new QWebEngineView(parent);
    view-&gt;load(QUrl(&quot;http://qt-project.org/&quot;));
    view-&gt;show();
</db:programlisting>
<db:para>Alternatively, <db:link xlink:href="qwebengineview.xml#url-prop">setUrl</db:link>() can be used to load a web site. If you have the HTML content readily available, you can use setHtml() instead.</db:para>
<db:para>The loadStarted() signal is emitted when the view begins loading and the loadProgress() signal is emitted whenever an element of the web view completes loading, such as an embedded image or a script. The loadFinished() signal is emitted when the view has been loaded completely. Its argument, either <db:code>true</db:code> or <db:code>false</db:code>, indicates whether loading was successful or failed.</db:para>
<db:para>The page() function returns a pointer to a <db:emphasis>web page</db:emphasis> object. A <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> contains a <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link>, which in turn allows access to the <db:link xlink:href="qwebenginehistory.xml">QWebEngineHistory</db:link> in the page's context.</db:para>
<db:para>The title of an HTML document can be accessed with the <db:link xlink:href="qwebengineview.xml#title-prop">title</db:link>() property. Additionally, a web site may specify an icon, which can be accessed using the <db:link xlink:href="qwebengineview.xml#icon-prop">icon</db:link>() or its URL using the <db:link xlink:href="qwebengineview.xml#iconUrl-prop">iconUrl</db:link>() property. If the title or the icon changes, the corresponding titleChanged(), <db:link xlink:href="qwebengineview.xml#icon-prop">iconChanged</db:link>() and <db:link xlink:href="qwebengineview.xml#iconUrl-prop">iconUrlChanged</db:link>() signals will be emitted. The <db:link xlink:href="qwebengineview.xml#zoomFactor-prop">zoomFactor</db:link>() property enables zooming the contents of the web page by a scale factor.</db:para>
<db:para>The widget features a context menu that is tailored to the element at hand, and includes actions useful in a browser. For a custom context menu, or for embedding actions in a menu or toolbar, the individual actions are available via <db:link xlink:href="">pageAction()</db:link>. The web view maintains the state of the returned actions, but allows modification of action properties such as <db:link xlink:href="qaction.xml#text-prop">text</db:link> or <db:link xlink:href="qaction.xml#icon-prop">icon</db:link>. The action semantics can also be triggered directly through triggerPageAction().</db:para>
<db:para>If you want to provide support for web sites that allow the user to open new windows, such as pop-up windows, you can subclass <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> and reimplement the createWindow() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebengine-webenginewidgets-demobrowser-example.xml">WebEngine Demo Browser Example</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webenginewidgets-contentmanipulation-example.xml">WebEngine Content Manipulation Example</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webenginewidgets-markdowneditor-example.xml">WebEngine Markdown Editor Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="hasSelection-prop">
<db:title>[read-only] hasSelection : const bool</db:title>
<db:para>This property holds whether this page contains selected content or not.</db:para>
<db:para>By default, this property is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasSelection</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">selectionChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon-prop">
<db:title>[read-only, since 5.7] icon : const QIcon</db:title>
<db:para>This property holds the icon associated with the page currently viewed</db:para>
<db:para>By default, this property contains a null icon.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> <db:emphasis role="bold">icon</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">iconChanged</db:emphasis>(<db:emphasis>const QIcon &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>iconChanged()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#iconUrl-prop">iconUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#iconUrl-prop">iconUrlChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconUrl-prop">
<db:title>[read-only] iconUrl : const QUrl</db:title>
<db:para>This property holds the URL of the icon associated with the page currently viewed</db:para>
<db:para>By default, this property contains an empty URL.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">iconUrl</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">iconUrlChanged</db:emphasis>(<db:emphasis>const QUrl &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>iconUrlChanged()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#icon-prop">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#icon-prop">iconChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : const QString</db:title>
<db:para>This property holds the text currently selected</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">selectedText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">findText()</db:link></db:member>
<db:member><db:link xlink:href="">selectionChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>[read-only] title : const QString</db:title>
<db:para>This property holds the title of the web page currently viewed</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">titleChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="url-prop">
<db:title>url : QUrl</db:title>
<db:para>This property holds the URL of the web page currently viewed</db:para>
<db:para>Setting this property clears the view and loads the URL.</db:para>
<db:para>By default, this property contains an empty, invalid URL.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">url</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUrl</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">load()</db:link></db:member>
<db:member><db:link xlink:href="">urlChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoomFactor-prop">
<db:title>zoomFactor : qreal</db:title>
<db:para>This property holds the zoom factor for the view</db:para>
<db:para>Valid values are within the range from <db:code>0.25</db:code> to <db:code>5.0</db:code>. The default factor is <db:code>1.0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">zoomFactor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setZoomFactor</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>factor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QWebEngineView::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QWebEngineView::dragEnterEvent(QDragEnterEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragEnterEvent" role="function">QWidget::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QWebEngineView::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragLeaveEvent" role="function">QWidget::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QWebEngineView::dragMoveEvent(QDragMoveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragMoveEvent" role="function">QWidget::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QWebEngineView::dropEvent(QDropEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dropEvent" role="function">QWidget::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QWebEngineView::event(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QWebEngineView::hideEvent(QHideEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QWebEngineView::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QWebEngineView::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
