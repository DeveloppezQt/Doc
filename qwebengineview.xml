<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineView Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> class provides a widget that is used to view and edit web documents.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginewidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QWebEngineView is part of <db:simplelist><db:member>advanced</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:emphasis>web view</db:emphasis> is the main widget component of the Qt WebEngine web browsing module. It can be used in various applications to display web content live from the Internet.</db:para>
<db:para>A <db:emphasis>web site</db:emphasis> can be loaded to a web view with the <db:link xlink:href="qwebengineview.xml#load">load</db:link>() function. The GET method is always used to load URLs.</db:para>
<db:para>Like all Qt widgets, the <db:link xlink:href="qwidget.xml#show">show</db:link>() function must be invoked in order to display the web view. The snippet below illustrates this:</db:para>
<db:programlisting language="cpp">    QWebEngineView *view = new QWebEngineView(parent);
    view-&amp;gt;load(QUrl(&quot;http://qt-project.org/&quot;));
    view-&amp;gt;show();
</db:programlisting>
<db:para>Alternatively, <db:link xlink:href="qwebengineview.xml#url-prop">setUrl</db:link>() can be used to load a web site. If you have the HTML content readily available, you can use <db:link xlink:href="qwebengineview.xml#setHtml">setHtml</db:link>() instead.</db:para>
<db:para>The <db:link xlink:href="qwebengineview.xml#loadStarted">loadStarted</db:link>() signal is emitted when the view begins loading and the <db:link xlink:href="qwebengineview.xml#loadProgress">loadProgress</db:link>() signal is emitted whenever an element of the web view completes loading, such as an embedded image or a script. The <db:link xlink:href="qwebengineview.xml#loadFinished">loadFinished</db:link>() signal is emitted when the view has been loaded completely. Its argument, either <db:code>true</db:code> or <db:code>false</db:code>, indicates whether loading was successful or failed.</db:para>
<db:para>The <db:link xlink:href="qwebengineview.xml#page">page</db:link>() function returns a pointer to a <db:emphasis>web page</db:emphasis> object. A <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> contains a <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link>, which in turn allows access to the <db:link xlink:href="qwebenginehistory.xml">QWebEngineHistory</db:link> in the page's context.</db:para>
<db:para>The title of an HTML document can be accessed with the <db:link xlink:href="qwebengineview.xml#title-prop">title</db:link>() property. Additionally, a web site may specify an icon, which can be accessed using the <db:link xlink:href="qwebengineview.xml#icon-prop">icon</db:link>() or its URL using the <db:link xlink:href="qwebengineview.xml#iconUrl-prop">iconUrl</db:link>() property. If the title or the icon changes, the corresponding <db:link xlink:href="qwebengineview.xml#titleChanged">titleChanged</db:link>(), <db:link xlink:href="qwebengineview.xml#iconChanged">iconChanged</db:link>() and <db:link xlink:href="qwebengineview.xml#iconUrlChanged">iconUrlChanged</db:link>() signals will be emitted. The <db:link xlink:href="qwebengineview.xml#zoomFactor-prop">zoomFactor</db:link>() property enables zooming the contents of the web page by a scale factor.</db:para>
<db:para>The widget features a context menu that is tailored to the element at hand, and includes actions useful in a browser. For a custom context menu, or for embedding actions in a menu or toolbar, the individual actions are available via <db:link xlink:href="qwebengineview.xml#pageAction">pageAction</db:link>(). The web view maintains the state of the returned actions, but allows modification of action properties such as <db:link xlink:href="qaction.xml#text-prop">text</db:link> or <db:link xlink:href="qaction.xml#icon-prop">icon</db:link>. The action semantics can also be triggered directly through <db:link xlink:href="qwebengineview.xml#triggerPageAction">triggerPageAction</db:link>().</db:para>
<db:para>If you want to provide support for web sites that allow the user to open new windows, such as pop-up windows, you can subclass <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> and reimplement the <db:link xlink:href="qwebengineview.xml#createWindow">createWindow</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">WebEngine Widgets Simple Browser Example</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webenginewidgets-contentmanipulation-example.xml">WebEngine Content Manipulation Example</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webenginewidgets-markdowneditor-example.xml">WebEngine Markdown Editor Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="hasSelection-prop">
<db:title>[read-only] hasSelection : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>hasSelection</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasSelection</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether this page contains selected content or not.</db:para>
<db:para>By default, this property is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasSelection</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#selectionChanged">selectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon-prop">
<db:title>[read-only, since 5.7] icon : const QIcon</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QIcon</db:type>
<db:varname>icon</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">icon</db:synopsisinfo>
<db:synopsisinfo role="notifier">iconChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the icon associated with the page currently viewed.</db:para>
<db:para>By default, this property contains a null icon.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> <db:emphasis role="bold">icon</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwebengineview.xml#iconChanged">iconChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> &amp;<db:emphasis>icon</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#iconChanged">iconChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#iconUrl-prop">iconUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#iconUrlChanged">iconUrlChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconUrl-prop">
<db:title>[read-only] iconUrl : const QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>iconUrl</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">iconUrl</db:synopsisinfo>
<db:synopsisinfo role="notifier">iconUrlChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL of the icon associated with the page currently viewed.</db:para>
<db:para>By default, this property contains an empty URL.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">iconUrl</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwebengineview.xml#iconUrlChanged">iconUrlChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#iconUrlChanged">iconUrlChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#icon-prop">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#iconChanged">iconChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>selectedText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectedText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text currently selected.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">selectedText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#findText">findText</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#selectionChanged">selectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>[read-only] title : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>title</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">title</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the title of the page as defined by the HTML <db:code>&lt;title&gt;</db:code> element.</db:para>
<db:para>Equivalent to <db:link xlink:href="qwebenginepage.xml#title-prop">QWebEnginePage::title</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#titleChanged">titleChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="url-prop">
<db:title>url : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>url</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">url</db:synopsisinfo>
<db:synopsisinfo role="setter">setUrl</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL of the web page currently viewed.</db:para>
<db:para>Setting this property clears the view and loads the URL.</db:para>
<db:para>By default, this property contains an empty, invalid URL.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">url</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUrl</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#load">load</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#urlChanged">urlChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoomFactor-prop">
<db:title>zoomFactor : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>zoomFactor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">zoomFactor</db:synopsisinfo>
<db:synopsisinfo role="setter">setZoomFactor</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the zoom factor for the view.</db:para>
<db:para>Valid values are within the range from <db:code>0.25</db:code> to <db:code>5.0</db:code>. The default factor is <db:code>1.0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">zoomFactor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setZoomFactor</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>factor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebEngineView">
<db:title>[explicit] QWebEngineView::QWebEngineView(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineView</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>Q_NULLPTR</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineView(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty web view with the parent <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QWebEngineView">
<db:title>[virtual] QWebEngineView::~QWebEngineView()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWebEngineView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebEngineView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the web view.</db:para>
</db:section>
<db:section xml:id="back">
<db:title>void QWebEngineView::back()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void back()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience slot that loads the previous document in the list of documents built by navigating links. Does nothing if there is no previous document.</db:para>
<db:para>It is equivalent to:</db:para>
<db:programlisting language="cpp">    view-&amp;gt;page()-&amp;gt;triggerAction(QWebEnginePage::Back);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#forward">forward</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#pageAction">pageAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QWebEngineView::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>contextMenuEvent</db:methodname>
<db:methodparam>
<db:type>QContextMenuEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void contextMenuEvent(QContextMenuEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="createWindow">
<db:title>[virtual protected] QWebEngineView *QWebEngineView::createWindow(QWebEnginePage::WebWindowType <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QWebEngineView *</db:type>
<db:methodname>createWindow</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::WebWindowType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineView * createWindow(QWebEnginePage::WebWindowType type)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called from the <db:link xlink:href="qwebenginepage.xml#createWindow">createWindow</db:link>() method of the associated <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> each time the page wants to create a new window of the given <db:code role="parameter">type</db:code>. For example, when a JavaScript request to open a document in a new window is issued.</db:para>
<db:note>
<db:para>If the <db:code>createWindow()</db:code> method of the associated page is reimplemented, this method is not called, unless explicitly done so in the reimplementation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#createWindow">QWebEnginePage::createWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QWebEngineView::dragEnterEvent(QDragEnterEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragEnterEvent</db:methodname>
<db:methodparam>
<db:type>QDragEnterEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragEnterEvent(QDragEnterEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragEnterEvent" role="function">QWidget::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QWebEngineView::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragLeaveEvent</db:methodname>
<db:methodparam>
<db:type>QDragLeaveEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragLeaveEvent(QDragLeaveEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragLeaveEvent" role="function">QWidget::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QWebEngineView::dragMoveEvent(QDragMoveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragMoveEvent</db:methodname>
<db:methodparam>
<db:type>QDragMoveEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragMoveEvent(QDragMoveEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragMoveEvent" role="function">QWidget::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QWebEngineView::dropEvent(QDropEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dropEvent</db:methodname>
<db:methodparam>
<db:type>QDropEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dropEvent(QDropEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dropEvent" role="function">QWidget::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QWebEngineView::event(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *ev) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="findText">
<db:title>void QWebEngineView::findText(const QString &amp;<db:emphasis>subString</db:emphasis>, QWebEnginePage::FindFlags <db:emphasis>options</db:emphasis> = QWebEnginePage::FindFlags(), const QWebEngineCallback&lt;bool&gt; &amp;<db:emphasis>resultCallback</db:emphasis> = QWebEngineCallback&lt;bool&gt;())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>findText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>subString</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEnginePage::FindFlags</db:type>
<db:parameter>options</db:parameter>
<db:initializer>QWebEnginePage::FindFlags()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QWebEngineCallback&lt;bool&gt; &amp;</db:type>
<db:parameter>resultCallback</db:parameter>
<db:initializer>QWebEngineCallback&lt;bool&gt;()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void findText(const QString &amp;subString, QWebEnginePage::FindFlags options, const QWebEngineCallback&lt;bool&gt; &amp;resultCallback)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds the specified string, <db:code role="parameter">subString</db:code>, in the page, using the given <db:code role="parameter">options</db:code>.</db:para>
<db:para>To clear the selection, just pass an empty string.</db:para>
<db:para><db:code role="parameter">resultCallback</db:code> must take a boolean parameter. It will be called with a value of <db:code>true</db:code> if <db:code role="parameter">subString</db:code> was found; otherwise the callback value will be <db:code>false</db:code>.</db:para>
<db:warning>
<db:para>We guarantee that the callback (<db:code role="parameter">resultCallback</db:code>) is always called, but it might be done during page destruction. When <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> or <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> instance inside it.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#selectedText-prop">selectedText</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#selectionChanged">selectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="forward">
<db:title>void QWebEngineView::forward()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>forward</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void forward()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience slot that loads the next document in the list of documents built by navigating links. Does nothing if there is no next document.</db:para>
<db:para>It is equivalent to:</db:para>
<db:programlisting language="cpp">    view-&amp;gt;page()-&amp;gt;triggerAction(QWebEnginePage::Forward);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#pageAction">pageAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QWebEngineView::hideEvent(QHideEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>hideEvent</db:methodname>
<db:methodparam>
<db:type>QHideEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hideEvent(QHideEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="history">
<db:title>QWebEngineHistory *QWebEngineView::history() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineHistory *</db:type>
<db:methodname>history</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineHistory * history() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the view's history of navigated web pages.</db:para>
<db:para>It is equivalent to:</db:para>
<db:programlisting language="cpp">    view-&amp;gt;page()-&amp;gt;history();
</db:programlisting>
</db:section>
<db:section xml:id="iconChanged">
<db:title>[since 5.7] void QWebEngineView::iconChanged(const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>iconChanged</db:methodname>
<db:methodparam>
<db:type>const QIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">icon</db:synopsisinfo>
<db:synopsisinfo role="signature">void iconChanged(const QIcon &amp;icon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the icon (&quot;favicon&quot;) associated with the view is changed. The new icon is specified by <db:code role="parameter">icon</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qwebengineview.xml#icon-prop">icon</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#icon-prop">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#iconUrl-prop">iconUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#iconUrlChanged">iconUrlChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconUrlChanged">
<db:title>void QWebEngineView::iconUrlChanged(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>iconUrlChanged</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">iconUrl</db:synopsisinfo>
<db:synopsisinfo role="signature">void iconUrlChanged(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the URL of the icon (&quot;favicon&quot;) associated with the view is changed. The new URL is specified by <db:code role="parameter">url</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qwebengineview.xml#iconUrl-prop">iconUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#iconUrl-prop">iconUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#icon-prop">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#iconChanged">iconChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load">
<db:title>void QWebEngineView::load(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the specified <db:code role="parameter">url</db:code> and displays it.</db:para>
<db:note>
<db:para>The view remains the same until enough data has arrived to display the new URL.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>load()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#url-prop">setUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#url-prop">url</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#urlChanged">urlChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qurl.xml#fromUserInput">QUrl::fromUserInput</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load-1">
<db:title>[since 5.9] void QWebEngineView::load(const QWebEngineHttpRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QWebEngineHttpRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QWebEngineHttpRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Issues the specified <db:code role="parameter">request</db:code> and loads the response.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#load">load</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#url-prop">setUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#url-prop">url</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#urlChanged">urlChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qurl.xml#fromUserInput">QUrl::fromUserInput</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadFinished">
<db:title>void QWebEngineView::loadFinished(bool <db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadFinished</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadFinished(bool ok)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a load of the page has finished. <db:code role="parameter">ok</db:code> will indicate whether the load was successful or an error occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#loadStarted">loadStarted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadProgress">
<db:title>void QWebEngineView::loadProgress(int <db:emphasis>progress</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadProgress</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>progress</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadProgress(int progress)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted every time an element in the web view completes loading, such as an embedded image or a script. Therefore, it tracks the collective progress of loading the web view.</db:para>
<db:para>The current value is provided by <db:code role="parameter">progress</db:code> and scales from 0 to 100, which is the default range of <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#loadStarted">loadStarted</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#loadFinished">loadFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadStarted">
<db:title>void QWebEngineView::loadStarted()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadStarted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadStarted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a new load of the page is started.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#loadProgress">loadProgress</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#loadFinished">loadFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="page">
<db:title>QWebEnginePage *QWebEngineView::page() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEnginePage *</db:type>
<db:methodname>page</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEnginePage * page() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the underlying web page.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#setPage">setPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageAction">
<db:title>QAction *QWebEngineView::pageAction(QWebEnginePage::WebAction <db:emphasis>action</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAction *</db:type>
<db:methodname>pageAction</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::WebAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAction * pageAction(QWebEnginePage::WebAction action) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a <db:link xlink:href="qaction.xml">QAction</db:link> that encapsulates the specified web action <db:code role="parameter">action</db:code>.</db:para>
</db:section>
<db:section xml:id="reload">
<db:title>void QWebEngineView::reload()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reload</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reload()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reloads the current document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#pageAction">pageAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#loadStarted">loadStarted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderProcessTerminated">
<db:title>[since 5.6] void QWebEngineView::renderProcessTerminated(QWebEnginePage::RenderProcessTerminationStatus <db:emphasis>terminationStatus</db:emphasis>, int <db:emphasis>exitCode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>renderProcessTerminated</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::RenderProcessTerminationStatus</db:type>
<db:parameter>terminationStatus</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>exitCode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void renderProcessTerminated(QWebEnginePage::RenderProcessTerminationStatus terminationStatus, int exitCode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the render process is terminated with a non-zero exit status. <db:code role="parameter">terminationStatus</db:code> is the termination status of the process and <db:code role="parameter">exitCode</db:code> is the status code with which the process terminated.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>void QWebEngineView::selectionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the selection changes.</db:para>
<db:note>
<db:para>When using the mouse to select text by left-clicking and dragging, the signal will be emitted for each new character selected, and not upon releasing the left mouse button.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#selectedText-prop">selectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContent">
<db:title>void QWebEngineView::setContent(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QString &amp;<db:emphasis>mimeType</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>baseUrl</db:emphasis> = QUrl())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContent</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mimeType</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>baseUrl</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContent(const QByteArray &amp;data, const QString &amp;mimeType, const QUrl &amp;baseUrl)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the content of the web view to <db:code role="parameter">data</db:code>. If the <db:code role="parameter">mimeType</db:code> argument is empty, it is assumed that the content is <db:code>text/plain,charset=US-ASCII</db:code>.</db:para>
<db:para>External objects referenced in the content are located relative to <db:code role="parameter">baseUrl</db:code>. For external objects to be loaded, <db:code>baseUrl</db:code> cannot be empty.</db:para>
<db:para>The data is loaded immediately; external objects are loaded asynchronously.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#load">load</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#setHtml">setHtml</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#toHtml">QWebEnginePage::toHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHtml">
<db:title>void QWebEngineView::setHtml(const QString &amp;<db:emphasis>html</db:emphasis>, const QUrl &amp;<db:emphasis>baseUrl</db:emphasis> = QUrl())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHtml</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>html</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>baseUrl</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHtml(const QString &amp;html, const QUrl &amp;baseUrl)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the content of the web view to the specified <db:code role="parameter">html</db:code> content.</db:para>
<db:para>External objects, such as stylesheets or images referenced in the HTML document, are located relative to <db:code role="parameter">baseUrl</db:code>. For external objects to be loaded, <db:code>baseUrl</db:code> cannot be empty. For example, if <db:code role="parameter">html</db:code> is retrieved from <db:code>http://www.example.com/documents/overview.html</db:code>, which is the base URL, then an image referenced with the relative URL, <db:code>diagram.png</db:code>, should be at <db:code>http://www.example.com/documents/diagram.png</db:code>.</db:para>
<db:para>The HTML document is loaded immediately, whereas external objects are loaded asynchronously.</db:para>
<db:para>When using this method, Qt WebEngine assumes that external resources, such as JavaScript programs or style sheets, are encoded in UTF-8 unless otherwise specified. For example, the encoding of an external script can be specified through the <db:code>charset</db:code> attribute of the HTML script tag. Alternatively, the encoding can be specified by the web server.</db:para>
<db:para>This is a convenience function equivalent to <db:code>setContent(html, &quot;text/html;charset=UTF-8&quot;, baseUrl)</db:code>.</db:para>
<db:warning>
<db:para>This function works only for HTML. For other MIME types (such as XHTML or SVG), <db:link xlink:href="qwebengineview.xml#setContent">setContent</db:link>() should be used instead.</db:para>
</db:warning>
<db:note>
<db:para>Content larger than 2 MB cannot be displayed, because setHtml() converts the provided HTML to percent-encoding and places <db:code>data</db:code>: in front of it to create the URL that it navigates to. Thereby, the provided code becomes a URL that exceeds the 2 MB limit set by Chromium. If the content is too large, the <db:link xlink:href="qwebengineview.xml#loadFinished">loadFinished</db:link>() signal is triggered with <db:code>success=false</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#load">load</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#setContent">setContent</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#toHtml">QWebEnginePage::toHtml</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setContent">QWebEnginePage::setContent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPage">
<db:title>void QWebEngineView::setPage(QWebEnginePage *<db:emphasis>page</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPage</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage *</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPage(QWebEnginePage *page)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes <db:code role="parameter">page</db:code> the new web page of the web view.</db:para>
<db:para>The parent <db:link xlink:href="qobject.xml">QObject</db:link> of the provided page remains the owner of the object. If the current page is a child of the web view, it will be deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#page">page</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="settings">
<db:title>QWebEngineSettings *QWebEngineView::settings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineSettings *</db:type>
<db:methodname>settings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineSettings * settings() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the view or page specific settings object.</db:para>
<db:para>It is equivalent to:</db:para>
<db:programlisting language="cpp">    view-&amp;gt;page()-&amp;gt;settings();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginesettings.xml#globalSettings" role="deprecated">QWebEngineSettings::globalSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QWebEngineView::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QWebEngineView::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="stop">
<db:title>void QWebEngineView::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience slot that stops loading the document.</db:para>
<db:para>It is equivalent to:</db:para>
<db:programlisting language="cpp">    view-&amp;gt;page()-&amp;gt;triggerAction(QWebEnginePage::Stop);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#reload">reload</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#pageAction">pageAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#loadFinished">loadFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="titleChanged">
<db:title>void QWebEngineView::titleChanged(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>titleChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void titleChanged(const QString &amp;title)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the <db:code role="parameter">title</db:code> of the view changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#title-prop">title</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="triggerPageAction">
<db:title>void QWebEngineView::triggerPageAction(QWebEnginePage::WebAction <db:emphasis>action</db:emphasis>, bool <db:emphasis>checked</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>triggerPageAction</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::WebAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>checked</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void triggerPageAction(QWebEnginePage::WebAction action, bool checked)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Triggers the specified <db:code role="parameter">action</db:code>. If it is a checkable action, the specified <db:code role="parameter">checked</db:code> state is assumed.</db:para>
<db:para>The following example triggers the copy action and therefore copies any selected text to the clipboard.</db:para>
<db:programlisting language="cpp">    view-&amp;gt;triggerPageAction(QWebEnginePage::Copy);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#pageAction">pageAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="urlChanged">
<db:title>void QWebEngineView::urlChanged(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>urlChanged</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void urlChanged(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">url</db:code> of the view changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#url-prop">url</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineview.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
