<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUnhandledException Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link> class represents an unhandled exception in a Qt Concurrent worker thread.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUnhandledException</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qexception.xml" xlink:role="class">QException</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>If a worker thread throws an exception that is not a subclass of <db:link xlink:href="qexception.xml">QException</db:link>, the <db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> functions will throw a <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link> on the receiver thread side. The information about the actual exception that has been thrown will be saved in the <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link> class and can be obtained using the <db:link xlink:href="qunhandledexception.xml#exception">exception</db:link>() method. For example, you can process the exception held by <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link> in the following way:</db:para>
<db:programlisting language="cpp">try {
    auto f = QtConcurrent::run([] { throw MyException {}; });
    // ...
} catch (const QUnhandledException &amp;e) {
    try {
        if (e.exception())
            std::rethrow_exception(e.exception());
    } catch (const MyException &amp;ex) {
        // Process 'ex'
    }
}

</db:programlisting>
<db:para>Inheriting from this class is not supported.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUnhandledException-2">
<db:title>[noexcept, since 6.0] QUnhandledException::QUnhandledException(std::__exception_ptr::exception_ptr <db:emphasis>exception</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link> object. Saves the pointer to the actual exception object if <db:code role="parameter">exception</db:code> is passed.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qunhandledexception.xml#exception">exception</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUnhandledException-1">
<db:title>[noexcept] QUnhandledException::QUnhandledException(const QUnhandledException &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link> object as a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QUnhandledException">
<db:title>[noexcept] QUnhandledException::QUnhandledException(QUnhandledException &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs a <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link>, making it point to the same object as <db:code role="parameter">other</db:code> was pointing to.</db:para>
</db:section>
<db:section xml:id="exception">
<db:title>[since 6.0] std::__exception_ptr::exception_ptr QUnhandledException::exception() const</db:title>
<db:para>Returns a <db:link xlink:href="https://en.cppreference.com/w/cpp/error/exception_ptr">pointer</db:link> to the actual exception that has been saved in this <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link>. Returns a null pointer, if it does not point to an exception object.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 6.0] void QUnhandledException::swap(QUnhandledException &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this unhandled exception object with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QUnhandledException &amp;QUnhandledException::operator=(const QUnhandledException &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link> object and returns a reference to this <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link> object.</db:para>
</db:section>
</db:section>
</db:article>
