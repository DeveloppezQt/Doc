<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFormBuilder Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qformbuilder.xml">QFormBuilder</db:link> class is used to dynamically construct user interfaces from UI files at run-time.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFormBuilder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractformbuilder.xml" xlink:role="class">QAbstractFormBuilder</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qformbuilder.xml">QFormBuilder</db:link> class provides a mechanism for dynamically creating user interfaces at run-time, based on UI files created with <db:emphasis>Qt Designer</db:emphasis>. For example:</db:para>
<db:programlisting language="cpp">        MyForm::MyForm(QWidget *parent)
            : QWidget(parent)
        {
            QFormBuilder builder;
            QFile file(&quot;:/forms/myWidget.ui&quot;);
            file.open(QFile::ReadOnly);
            QWidget *myWidget = builder.load(&amp;amp;file, this);
            file.close();

            QVBoxLayout *layout = new QVBoxLayout;
            layout-&amp;gt;addWidget(myWidget);
            setLayout(layout);
        }
</db:programlisting>
<db:para>By including the user interface in the example's resources (<db:code>myForm.qrc</db:code>), we ensure that it will be present when the example is run:</db:para>
<db:programlisting language="cpp">    &amp;lt;!DOCTYPE RCC&amp;gt;&amp;lt;RCC version=&quot;1.0&quot;&amp;gt;
    &amp;lt;qresource prefix=&quot;/forms&quot;&amp;gt;
       &amp;lt;file&amp;gt;mywidget.ui&amp;lt;/file&amp;gt;
    &amp;lt;/qresource&amp;gt;
    &amp;lt;/RCC&amp;gt;
</db:programlisting>
<db:para><db:link xlink:href="qformbuilder.xml">QFormBuilder</db:link> extends the <db:link xlink:href="qabstractformbuilder.xml">QAbstractFormBuilder</db:link> base class with a number of functions that are used to support custom widget plugins:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qformbuilder.xml#pluginPaths">pluginPaths</db:link>() returns the list of paths that the form builder searches when loading custom widget plugins.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qformbuilder.xml#addPluginPath">addPluginPath</db:link>() allows additional paths to be registered with the form builder.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qformbuilder.xml#setPluginPath">setPluginPath</db:link>() is used to replace the existing list of paths with a list obtained from some other source.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qformbuilder.xml#clearPluginPaths">clearPluginPaths</db:link>() removes all paths registered with the form builder.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qformbuilder.xml#customWidgets">customWidgets</db:link>() returns a list of interfaces to plugins that can be used to create new instances of registered custom widgets.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qformbuilder.xml">QFormBuilder</db:link> class is typically used by custom components and applications that embed <db:emphasis>Qt Designer</db:emphasis>. Standalone applications that need to dynamically generate user interfaces at run-time use the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class, found in the <db:link xlink:href="qtuitools-module.xml">QtUiTools</db:link> module.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractformbuilder.xml">QAbstractFormBuilder</db:link></db:member>
<db:member><db:link xlink:href="qtuitools-index.xml">Qt UI Tools</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFormBuilder">
<db:title>QFormBuilder::QFormBuilder()</db:title>
<db:constructorsynopsis>
<db:methodname>QFormBuilder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QFormBuilder()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new form builder.</db:para>
</db:section>
<db:section xml:id="dtor.QFormBuilder">
<db:title>[override virtual] QFormBuilder::~QFormBuilder()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QFormBuilder</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QFormBuilder() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the form builder.</db:para>
</db:section>
<db:section xml:id="addPluginPath">
<db:title>void QFormBuilder::addPluginPath(const QString &amp;<db:emphasis>pluginPath</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addPluginPath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pluginPath</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addPluginPath(const QString &amp;pluginPath)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a new plugin path specified by <db:code role="parameter">pluginPath</db:code> to the list of paths that will be searched by the form builder when loading a custom widget plugin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformbuilder.xml#setPluginPath">setPluginPath</db:link>()</db:member>
<db:member><db:link xlink:href="qformbuilder.xml#clearPluginPaths">clearPluginPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearPluginPaths">
<db:title>void QFormBuilder::clearPluginPaths()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearPluginPaths</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearPluginPaths()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the list of paths that the form builder uses to search for custom widget plugins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformbuilder.xml#pluginPaths">pluginPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="customWidgets">
<db:title>QList&lt;QDesignerCustomWidgetInterface *&gt; QFormBuilder::customWidgets() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QDesignerCustomWidgetInterface *&gt;</db:type>
<db:methodname>customWidgets</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QDesignerCustomWidgetInterface *&gt; customWidgets() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the available plugins.</db:para>
</db:section>
<db:section xml:id="pluginPaths">
<db:title>QStringList QFormBuilder::pluginPaths() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>pluginPaths</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList pluginPaths() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of paths the form builder searches for plugins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformbuilder.xml#addPluginPath">addPluginPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPluginPath">
<db:title>void QFormBuilder::setPluginPath(const QStringList &amp;<db:emphasis>pluginPaths</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPluginPath</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>pluginPaths</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPluginPath(const QStringList &amp;pluginPaths)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the list of plugin paths to the list specified by <db:code role="parameter">pluginPaths</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformbuilder.xml#addPluginPath">addPluginPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
