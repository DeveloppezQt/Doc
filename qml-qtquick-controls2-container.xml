<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Container QML Type</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Abstract base type providing functionality common to containers.</db:para>
<db:para>This type was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 2.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls2-dialogbuttonbox.xml" xlink:role="">DialogButtonBox</db:link>, <db:link xlink:href="qml-qtquick-controls2-swipeview.xml" xlink:role="">SwipeView</db:link>, and <db:link xlink:href="qml-qtquick-controls2-tabbar.xml" xlink:role="">TabBar</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls2-control.xml">Control</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Container is part of <db:simplelist><db:member>qtquickcontrols2-containers</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Container is the base type of container-like user interface controls that allow dynamic insertion and removal of items.</db:para>
<db:section xml:id="using-containers">
<db:title>Using Containers</db:title>
<db:para>Typically, items are statically declared as children of Container, but it is also possible to <db:link xlink:href="qml-qtquick-controls2-container.xml#addItem-method">add</db:link>, <db:link xlink:href="qml-qtquick-controls2-container.xml#insertItem-method">insert</db:link>, <db:link xlink:href="qml-qtquick-controls2-container.xml#moveItem-method">move</db:link> and <db:link xlink:href="qml-qtquick-controls2-container.xml#removeItem-method">remove</db:link> items dynamically. The items in a container can be accessed using <db:link xlink:href="qml-qtquick-controls2-container.xml#itemAt-method">itemAt</db:link>() or <db:link xlink:href="qml-qtquick-controls2-container.xml#contentChildren-prop">contentChildren</db:link>.</db:para>
<db:para>Most containers have the concept of a &quot;current&quot; item. The current item is specified via the <db:link xlink:href="qml-qtquick-controls2-container.xml#currentIndex-prop">currentIndex</db:link> property, and can be accessed using the read-only <db:link xlink:href="qml-qtquick-controls2-container.xml#currentItem-prop">currentItem</db:link> property.</db:para>
<db:para>The following example illustrates dynamic insertion of items to a <db:link xlink:href="qml-qtquick-controls2-tabbar.xml">TabBar</db:link>, which is one of the concrete implementations of Container.</db:para>
<db:programlisting language="cpp">Row {
    TabBar {
        id: tabBar

        currentIndex: 0
        width: parent.width - addButton.width

        TabButton { text: &quot;TabButton&quot; }
    }

    Component {
        id: tabButton
        TabButton { text: &quot;TabButton&quot; }
    }

    Button {
        id: addButton
        text: &quot;+&quot;
        flat: true
        onClicked: {
            tabBar.addItem(tabButton.createObject(tabBar))
            console.log(&quot;added:&quot;, tabBar.itemAt(tabBar.count - 1))
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="implementing-containers">
<db:title>Implementing Containers</db:title>
<db:para>Container does not provide any default visualization. It is used to implement such containers as <db:link xlink:href="qml-qtquick-controls2-swipeview.xml">SwipeView</db:link> and <db:link xlink:href="qml-qtquick-controls2-tabbar.xml">TabBar</db:link>. When implementing a custom container, the most important part of the API is <db:link xlink:href="qml-qtquick-controls2-container.xml#contentModel-prop">contentModel</db:link>, which provides the contained items in a way that it can be used as a delegate model for item views and repeaters.</db:para>
<db:programlisting language="cpp">Container {
    id: container

    contentItem: ListView {
        model: container.contentModel
        snapMode: ListView.SnapOneItem
        orientation: ListView.Horizontal
    }

    Text {
        text: &quot;Page 1&quot;
        width: container.width
        height: container.height
    }

    Text {
        text: &quot;Page 2&quot;
        width: container.width
        height: container.height
    }
}
</db:programlisting>
<db:para>Notice how the sizes of the page items are set by hand. This is because the example uses a plain Container, which does not make any assumptions on the visual layout. It is typically not necessary to specify sizes for items in concrete Container implementations, such as <db:link xlink:href="qml-qtquick-controls2-swipeview.xml">SwipeView</db:link> and <db:link xlink:href="qml-qtquick-controls2-tabbar.xml">TabBar</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-containers.xml">Container Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="contentChildren-prop">
<db:title>contentChildren : list&lt;Item&gt;</db:title>
<db:para>This property holds the list of content children.</db:para>
<db:para>The list contains all items that have been declared in QML as children of the container, and also items that have been dynamically added or inserted using the <db:link xlink:href="qml-qtquick-controls2-container.xml#addItem-method">addItem</db:link>() and <db:link xlink:href="qml-qtquick-controls2-container.xml#insertItem-method">insertItem</db:link>() methods, respectively.</db:para>
<db:note>
<db:para>Unlike <db:code>contentData</db:code>, <db:code>contentChildren</db:code> does not include non-visual QML objects. It is re-ordered when items are inserted or moved.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#children-prop">Item::children</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#contentData-prop">contentData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentData-prop">
<db:title>contentData : list&lt;Object&gt;</db:title>
<db:para>This property holds the list of content data.</db:para>
<db:para>The list contains all objects that have been declared in QML as children of the container, and also items that have been dynamically added or inserted using the <db:link xlink:href="qml-qtquick-controls2-container.xml#addItem-method">addItem</db:link>() and <db:link xlink:href="qml-qtquick-controls2-container.xml#insertItem-method">insertItem</db:link>() methods, respectively.</db:para>
<db:note>
<db:para>Unlike <db:code>contentChildren</db:code>, <db:code>contentData</db:code> does include non-visual QML objects. It is not re-ordered when items are inserted or moved.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#data-prop">Item::data</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#contentChildren-prop">contentChildren</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentModel-prop">
<db:title>[read-only] contentModel : model</db:title>
<db:para>This property holds the content model of items.</db:para>
<db:para>The content model is provided for visualization purposes. It can be assigned as a model to a content item that presents the contents of the container.</db:para>
<db:programlisting language="cpp">Container {
    id: container
    contentItem: ListView {
        model: container.contentModel
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#contentData-prop">contentData</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#contentChildren-prop">contentChildren</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:para>This property holds the number of items.</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:para>This property holds the index of the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#currentItem-prop">currentItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#incrementCurrentIndex-method">incrementCurrentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#decrementCurrentIndex-method">decrementCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentItem-prop">
<db:title>[read-only] currentItem : Item</db:title>
<db:para>This property holds the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#currentIndex-prop">currentIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addItem-method">
<db:title>void addItem(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Adds an <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="decrementCurrentIndex-method">
<db:title>[since QtQuick.Controls 2.1] void decrementCurrentIndex()</db:title>
<db:para>Decrements the current index of the container.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#currentIndex-prop">currentIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="incrementCurrentIndex-method">
<db:title>[since QtQuick.Controls 2.1] void incrementCurrentIndex()</db:title>
<db:para>Increments the current index of the container.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-container.xml#currentIndex-prop">currentIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertItem-method">
<db:title>void insertItem(int <db:emphasis>index</db:emphasis>, Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Inserts an <db:code role="parameter">item</db:code> at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="itemAt-method">
<db:title>Item itemAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the item at <db:code role="parameter">index</db:code>, or <db:code>null</db:code> if it does not exist.</db:para>
</db:section>
<db:section xml:id="moveItem-method">
<db:title>void moveItem(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Moves an item <db:code role="parameter">from</db:code> one index <db:code role="parameter">to</db:code> another.</db:para>
</db:section>
<db:section xml:id="removeItem-method">
<db:title>void removeItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes an item at <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>The ownership of the item is transferred to the caller.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
