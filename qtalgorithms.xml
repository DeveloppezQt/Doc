<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtAlgorithms&gt; - Generic Algorithms</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The &lt;QtAlgorithms&gt; header includes the generic, template-based algorithms.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtAlgorithms</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>&lt;QtAlgorithms&gt; is part of <db:simplelist><db:member>funclists</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt provides a number of global template functions in &lt;QtAlgorithms&gt; that work on containers and perform small tasks to make life easier, such as <db:link xlink:href="qtalgorithms.xml#qDeleteAll">qDeleteAll</db:link>(), which invokes operator delete on all items in a given container or in a given range. You can use these algorithms with any <db:link xlink:href="containers.xml">container class</db:link> that provides STL-style iterators, including Qt's <db:link xlink:href="qlist.xml">QList</db:link>, <db:link xlink:href="qmap.xml">QMap</db:link>, and <db:link xlink:href="qhash.xml#qhash">QHash</db:link> classes.</db:para>
<db:para>Most algorithms take <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> as parameters. The algorithms are generic in the sense that they aren't bound to a specific iterator class; you can use them with any iterators that meet a certain set of requirements.</db:para>
<db:para>Different algorithms can have different requirements for the iterators they accept. The iterator types required are specified for each algorithm. If an iterator of the wrong type is passed (for example, if <db:link xlink:href="qlist.xml#ConstIterator-typedef">QList::ConstIterator</db:link> is passed as an <db:link xlink:href="qtalgorithms.xml#output-iterators">output iterator</db:link>), you will always get a compiler error, although not necessarily a very informative one.</db:para>
<db:para>Some algorithms have special requirements on the value type stored in the containers. For example, <db:link xlink:href="qtalgorithms.xml#qDeleteAll">qDeleteAll</db:link>() requires that the value type is a non-const pointer type (for example, <db:link xlink:href="qwidget.xml">QWidget</db:link> *). The value type requirements are specified for each algorithm, and the compiler will produce an error if a requirement isn't met.</db:para>
<db:para>The generic algorithms can be used on other container classes than those provided by Qt and STL. The syntax of STL-style iterators is modeled after C++ pointers, so it's possible to use plain arrays as containers and plain pointers as iterators.</db:para>
<db:section xml:id="types-of-iterators">
<db:title>Types of Iterators</db:title>
<db:para>The algorithms have certain requirements on the iterator types they accept, and these are specified individually for each function. The compiler will produce an error if a requirement isn't met.</db:para>
<db:section xml:id="input-iterators">
<db:title>Input Iterators</db:title>
<db:para>An <db:emphasis>input iterator</db:emphasis> is an iterator that can be used for reading data sequentially from a container. It must provide the following operators: == and != for comparing two iterators, unary * for retrieving the value stored in the item, and prefix ++ for advancing to the next item.</db:para>
<db:para>The Qt containers' iterator types (const and non-const) are all input iterators.</db:para>
</db:section>
<db:section xml:id="output-iterators">
<db:title>Output Iterators</db:title>
<db:para>An output iterator is an iterator that can be used for writing data sequentially to a container or to some output stream. It must provide the following operators: unary * for writing a value (i.e., *it = val) and prefix ++ for advancing to the next item.</db:para>
<db:para>The Qt containers' non-const iterator types are all output iterators.</db:para>
</db:section>
<db:section xml:id="forward-iterators">
<db:title>Forward Iterators</db:title>
<db:para>A <db:emphasis>forward iterator</db:emphasis> is an iterator that meets the requirements of both input iterators and output iterators.</db:para>
<db:para>The Qt containers' non-const iterator types are all forward iterators.</db:para>
</db:section>
<db:section xml:id="bidirectional-iterators">
<db:title>Bidirectional Iterators</db:title>
<db:para>A <db:emphasis>bidirectional iterator</db:emphasis> is an iterator that meets the requirements of forward iterators but that in addition supports prefix -- for iterating backward.</db:para>
<db:para>The Qt containers' non-const iterator types are all bidirectional iterators.</db:para>
</db:section>
<db:section xml:id="random-access-iterators">
<db:title>Random Access Iterators</db:title>
<db:para>The last category, <db:emphasis>random access iterators</db:emphasis>, is the most powerful type of iterator. It supports all the requirements of a bidirectional iterator, and supports the following operations:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>i += n</db:para>
</db:td>
<db:td>
<db:para>advances iterator i by n positions</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>i -= n</db:para>
</db:td>
<db:td>
<db:para>moves iterator i back by n positions</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>i + n or n + i</db:para>
</db:td>
<db:td>
<db:para>returns the iterator for the item n positions ahead of iterator i</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>i - n</db:para>
</db:td>
<db:td>
<db:para>returns the iterator for the item n positions behind of iterator i</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>i - j</db:para>
</db:td>
<db:td>
<db:para>returns the number of items between iterators i and j</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>i[n]</db:para>
</db:td>
<db:td>
<db:para>same as *(i + n)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>i &lt; j</db:para>
</db:td>
<db:td>
<db:para>returns true if iterator j comes after iterator i</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>'s non-const iterator type is random access iterator.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="containers.xml">container classes</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml">&lt;QtGlobal&gt;</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qCountLeadingZeroBits">
<db:title>[constexpr] uint qCountLeadingZeroBits(quint8 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qCountLeadingZeroBits</db:methodname>
<db:methodparam>
<db:type>quint8</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qCountLeadingZeroBits(quint8 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of consecutive zero bits in <db:code role="parameter">v</db:code>, when searching from the MSB. For example, qCountLeadingZeroBits(quint8(1)) returns 7 and qCountLeadingZeroBits(quint8(8)) returns 4.</db:para>
</db:section>
<db:section xml:id="qCountLeadingZeroBits-1">
<db:title>[constexpr] uint qCountLeadingZeroBits(quint16 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qCountLeadingZeroBits</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qCountLeadingZeroBits(quint16 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of consecutive zero bits in <db:code role="parameter">v</db:code>, when searching from the MSB. For example, <db:link xlink:href="qtalgorithms.xml#qCountLeadingZeroBits">qCountLeadingZeroBits</db:link>(quint16(1)) returns 15 and <db:link xlink:href="qtalgorithms.xml#qCountLeadingZeroBits">qCountLeadingZeroBits</db:link>(quint16(8)) returns 12.</db:para>
</db:section>
<db:section xml:id="qCountLeadingZeroBits-2">
<db:title>[constexpr] uint qCountLeadingZeroBits(quint32 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qCountLeadingZeroBits</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qCountLeadingZeroBits(quint32 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of consecutive zero bits in <db:code role="parameter">v</db:code>, when searching from the MSB. For example, <db:link xlink:href="qtalgorithms.xml#qCountLeadingZeroBits">qCountLeadingZeroBits</db:link>(quint32(1)) returns 31 and <db:link xlink:href="qtalgorithms.xml#qCountLeadingZeroBits">qCountLeadingZeroBits</db:link>(quint32(8)) returns 28.</db:para>
</db:section>
<db:section xml:id="qCountLeadingZeroBits-3">
<db:title>[constexpr] uint qCountLeadingZeroBits(quint64 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qCountLeadingZeroBits</db:methodname>
<db:methodparam>
<db:type>quint64</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qCountLeadingZeroBits(quint64 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of consecutive zero bits in <db:code role="parameter">v</db:code>, when searching from the MSB. For example, <db:link xlink:href="qtalgorithms.xml#qCountLeadingZeroBits">qCountLeadingZeroBits</db:link>(quint64(1)) returns 63 and <db:link xlink:href="qtalgorithms.xml#qCountLeadingZeroBits">qCountLeadingZeroBits</db:link>(quint64(8)) returns 60.</db:para>
</db:section>
<db:section xml:id="qCountTrailingZeroBits">
<db:title>[constexpr] uint qCountTrailingZeroBits(quint8 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qCountTrailingZeroBits</db:methodname>
<db:methodparam>
<db:type>quint8</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qCountTrailingZeroBits(quint8 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of consecutive zero bits in <db:code role="parameter">v</db:code>, when searching from the LSB. For example, qCountTrailingZeroBits(1) returns 0 and qCountTrailingZeroBits(8) returns 3.</db:para>
</db:section>
<db:section xml:id="qCountTrailingZeroBits-1">
<db:title>[constexpr] uint qCountTrailingZeroBits(quint16 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qCountTrailingZeroBits</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qCountTrailingZeroBits(quint16 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="qCountTrailingZeroBits-2">
<db:title>[constexpr] uint qCountTrailingZeroBits(quint32 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qCountTrailingZeroBits</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qCountTrailingZeroBits(quint32 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="qCountTrailingZeroBits-3">
<db:title>[constexpr] uint qCountTrailingZeroBits(quint64 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qCountTrailingZeroBits</db:methodname>
<db:methodparam>
<db:type>quint64</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qCountTrailingZeroBits(quint64 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="qDeleteAll">
<db:title>void qDeleteAll(ForwardIterator <db:emphasis>begin</db:emphasis>, ForwardIterator <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDeleteAll</db:methodname>
<db:methodparam>
<db:type>ForwardIterator</db:type>
<db:parameter>begin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>ForwardIterator</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDeleteAll(ForwardIterator begin, ForwardIterator end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes all the items in the range [<db:code role="parameter">begin</db:code>, <db:code role="parameter">end</db:code>) using the C++ delete operator. The item type must be a pointer type (for example, QWidget *).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QList&amp;lt;Employee *&amp;gt; list;
list.append(new Employee(&quot;Blackpool&quot;, &quot;Stephen&quot;));
list.append(new Employee(&quot;Twist&quot;, &quot;Oliver&quot;));

qDeleteAll(list.begin(), list.end());
list.clear();
</db:programlisting>
<db:para>Notice that qDeleteAll() doesn't remove the items from the container; it merely calls delete on them. In the example above, we call clear() on the container to remove the items.</db:para>
<db:para>This function can also be used to delete items stored in associative containers, such as <db:link xlink:href="qmap.xml">QMap</db:link> and <db:link xlink:href="qhash.xml#qhash">QHash</db:link>. Only the objects stored in each container will be deleted by this function; objects used as keys will not be deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtalgorithms.xml#forward-iterators">forward iterators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDeleteAll-1">
<db:title>void qDeleteAll(const Container &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDeleteAll</db:methodname>
<db:methodparam>
<db:type>const Container &amp;</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDeleteAll(const Container &amp;c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is the same as <db:link xlink:href="qtalgorithms.xml#qDeleteAll">qDeleteAll</db:link>(<db:code role="parameter">c</db:code>.begin(), <db:code role="parameter">c</db:code>.end()).</db:para>
</db:section>
<db:section xml:id="qPopulationCount">
<db:title>[constexpr] uint qPopulationCount(quint8 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qPopulationCount</db:methodname>
<db:methodparam>
<db:type>quint8</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qPopulationCount(quint8 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bits set in <db:code role="parameter">v</db:code>. This number is also called the Hamming Weight of <db:code role="parameter">v</db:code>.</db:para>
</db:section>
<db:section xml:id="qPopulationCount-1">
<db:title>[constexpr] uint qPopulationCount(quint16 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qPopulationCount</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qPopulationCount(quint16 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="qPopulationCount-2">
<db:title>[constexpr] uint qPopulationCount(quint32 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qPopulationCount</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qPopulationCount(quint32 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="qPopulationCount-3">
<db:title>[constexpr] uint qPopulationCount(quint64 <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qPopulationCount</db:methodname>
<db:methodparam>
<db:type>quint64</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qPopulationCount(quint64 v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
</db:section>
</db:article>
