<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Configuring the JavaScript Engine</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes the environment variables available, to control how Javascript is run.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Running JavaScript code can be influenced by a few environment variables, particularly:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Environment Variable</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QV4_JIT_CALL_THRESHOLD</db:para>
</db:td>
<db:td>
<db:para>The JavaScript engine contains a Just-In-Time compiler (JIT). The JIT will compile frequently run JavaScript functions into machine code to run faster. This environment variable determines how often a function needs to be run to be considered for JIT compilation. The default value is 3 times.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_FORCE_INTERPRETER</db:para>
</db:td>
<db:td>
<db:para>Setting this environment variable runs all functions and expressions through the interpreter. The JIT is never used, no matter how often a function or expression is called. Functions and expressions may still be compiled ahead of time using <db:link xlink:href="qtqml-tool-qmlcachegen.xml">qmlcachegen</db:link> or <db:link xlink:href="qtqml-qml-script-compiler.xml">qmlsc</db:link>, but only the generated byte code is used at run time. Any generated C++ code and the machine code resulting from it is ignored.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_JS_MAX_STACK_SIZE</db:para>
</db:td>
<db:td>
<db:para>The JavaScript engine reserves a special memory area as a stack to run JavaScript. This stack is separate from the C++ stack. Usually this area is 4MB in size. If this environment variable contains a number, the JavaScript engine interprets it as the size of the memory area, in bytes, to be allocated as the JavaScript stack.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_GC_MAX_STACK_SIZE</db:para>
</db:td>
<db:td>
<db:para>In addition to the regular JavaScript stack, the JavaScript engine keeps another stack for the garbage collector, usually 2MB of memory. If the garbage collector needs to handle an excessive number of objects at the same time, this stack might overrun. If it contains a number, this environment variable is interpreted as the size in bytes of the memory area that will be allocated as the stack for the garbage collector.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_CRASH_ON_STACKOVERFLOW</db:para>
</db:td>
<db:td>
<db:para>Usually the JavaScript engine tries to catch C++ stack overflows caused by excessively recursive JavaScript code, and generates a non-fatal error condition. There are separate recursion checks for compiling JavaScript and running JavaScript. A stack overflow when compiling JavaScript indicates that the code contains deeply nested objects and functions. A stack overflow at run-time indicates that the code results in a deeply recursive program. The check for this is only indirectly related to the JavaScript stack size mentioned above, as each JavaScript function call consumes stack space on both, the C++ and the JavaScript stack. The code that checks for excessive recursion is necessarily conservative, as the available stack size depends on many factors and can often be customized by the user. With this environment variable set, the JavaScript engine does not check for stack overflows when compiling or running JavaScript and will not generate exceptions for them. Instead, when the stack overflows the program attempts an invalid memory access. This most likely terminates the program. In turn, the program gets to use up all the stack space the operating system can provide.</db:para>
<db:warning>
<db:para>malicious code may be able to evade the termination and access unexpected memory locations this way.</db:para>
</db:warning>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_MAX_CALL_DEPTH</db:para>
</db:td>
<db:td>
<db:para>Stack overflows when running (as opposed to compiling) JavaScript are prevented by controlling the call depth: the number of nested function invocations. By default, an exception is generated if the call depth exceeds a maximum number tuned to the platform's default stack size. If the QV4_MAX_CALL_DEPTH environment variable contains a number, this number is used as maximum call depth. Beware that the recursion limit when compiling JavaScript is not affected. The default maximum call depth is 1234 on most platforms. On QNX it is 640 because on QNX the default stack size is smaller than on most platforms.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:anchor xml:id="qv4-gc-timelimit"/>
<db:para>QV4_GC_TIMELIMIT</db:para>
</db:td>
<db:td>
<db:para>This value is used to tell the engine how much time it should spend in each incremental garbage collection step. It can either be a positive number, specifying the timelimit in milliseconds, or 0. If the value is 0, garbage collection becomes non-incremental.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_MM_AGGRESSIVE_GC</db:para>
</db:td>
<db:td>
<db:para>Setting this environment variable runs the garbage collector before each memory allocation. This is very expensive at run-time, but it quickly uncovers many memory management errors, for example the manual deletion of an object belonging to the QML engine from C++.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_PROFILE_WRITE_PERF_MAP</db:para>
</db:td>
<db:td>
<db:para>On Linux, the perf utility can be used to profile programs. To analyze JIT-compiled JavaScript functions, it needs to know about their names and locations in memory. To provide this information, there's a convention to create a special file called perf-&lt;pid&gt;.map in <db:emphasis>/tmp</db:emphasis> which perf then reads. This environment variable, if set, causes the JIT to generate this file.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_SHOW_BYTECODE</db:para>
</db:td>
<db:td>
<db:para>Outputs the IR bytecode generated by Qt to the console. Has to be combined with QML_DISABLE_DISK_CACHE or already cached bytecode will not be shown.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_DUMP_BASIC_BLOCKS</db:para>
</db:td>
<db:td>
<db:para>Outputs the basic blocks of each function compiled ahead of time. The details of the blocks are printed to the console. Additionally, control flow graphs with the byte code for each block are generated in the DOT format for each compiled function. The value of QV4_DUMP_BASIC_BLOCKS is used as the path to the folder where the DOT files should be generated. If the path is any of [&quot;-&quot;, &quot;1&quot;, &quot;true&quot;] or if files can't be opened, the graphs are dumped to stdout instead.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QV4_VALIDATE_BASIC_BLOCKS</db:para>
</db:td>
<db:td>
<db:para>Performs checks on the basic blocks of a function compiled ahead of time to validate its structure and coherence. If the validation fails, an error message is printed to the console.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qmldiskcache.xml">The QML Disk Cache</db:link> accepts further environment variables that allow fine tuning its behavior. In particular QML_DISABLE_DISK_CACHE may be useful for debugging.</db:para>
</db:article>
