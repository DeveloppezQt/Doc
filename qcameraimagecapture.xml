<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCameraImageCapture Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link> class is used for the recording of media content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCameraImageCapture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qmediabindableinterface.xml" xlink:role="class">QMediaBindableInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCameraImageCapture is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_camera</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link> class is a high level images recording class. It's not intended to be used alone but for accessing the media recording functions of other media objects, like <db:link xlink:href="qcamera.xml">QCamera</db:link>.</db:para>
<db:programlisting language="cpp">camera = new QCamera;

viewfinder = new QCameraViewfinder();
viewfinder-&gt;show();

camera-&gt;setViewfinder(viewfinder);

imageCapture = new QCameraImageCapture(camera);

camera-&gt;setCaptureMode(QCamera::CaptureStillImage);
camera-&gt;start();
//on half pressed shutter button
camera-&gt;searchAndLock();

//on shutter button pressed
imageCapture-&gt;capture();

//on shutter button released
camera-&gt;unlock();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CaptureDestination-enum">
<db:title>enum QCameraImageCapture::CaptureDestination</db:title>
<db:bridgehead renderas="sect2">flags QCameraImageCapture::CaptureDestinations</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link></db:emphasis>::CaptureToFile</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Capture the image to a file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link></db:emphasis>::CaptureToBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Capture the image to a buffer for further processing.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>CaptureDestinations</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;CaptureDestination&gt;. </db:code>It stores an OR combination of <db:code>CaptureDestination</db:code> values.</db:para>
</db:section>
<db:section xml:id="DriveMode-enum">
<db:title>enum QCameraImageCapture::DriveMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link></db:emphasis>::SingleImageCapture</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Drive mode is capturing a single picture.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QCameraImageCapture::Error</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No Errors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link></db:emphasis>::NotReadyError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The service is not ready for capture yet.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Device is not ready or not available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link></db:emphasis>::OutOfSpaceError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>No space left on device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link></db:emphasis>::NotSupportedFeatureError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Device does not support stillimages capture.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link></db:emphasis>::FormatError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Current format is not supported.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="readyForCapture-prop">
<db:title>[read-only] readyForCapture : const bool</db:title>
<db:para>This property holds whether the service is ready to capture a an image immediately.</db:para>
<db:para>Calling <db:link xlink:href="qcameraimagecapture.xml#capture">capture</db:link>() while <db:emphasis>readyForCapture</db:emphasis> is <db:code>false</db:code> is not permitted and results in an error.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isReadyForCapture</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcameraimagecapture.xml#readyForCaptureChanged">readyForCaptureChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>ready</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCameraImageCapture">
<db:title>[explicit] QCameraImageCapture::QCameraImageCapture(QMediaObject *<db:emphasis>mediaObject</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a media recorder which records the media produced by <db:code role="parameter">mediaObject</db:code>.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QCameraImageCapture">
<db:title>[virtual noexcept] QCameraImageCapture::~QCameraImageCapture()</db:title>
<db:para>Destroys images capture object.</db:para>
</db:section>
<db:section xml:id="availability">
<db:title>QMultimedia::AvailabilityStatus QCameraImageCapture::availability() const</db:title>
<db:para>Returns the availability of this functionality.</db:para>
</db:section>
<db:section xml:id="bufferFormat">
<db:title>QVideoFrame::PixelFormat QCameraImageCapture::bufferFormat() const</db:title>
<db:para>Returns the buffer image capture format being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#supportedBufferFormats">supportedBufferFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraimagecapture.xml#setBufferFormat">setBufferFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bufferFormatChanged">
<db:title>void QCameraImageCapture::bufferFormatChanged(QVideoFrame::PixelFormat <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Signal emitted when the buffer <db:code role="parameter">format</db:code> for the buffer image capture has changed.</db:para>
</db:section>
<db:section xml:id="cancelCapture">
<db:title>void QCameraImageCapture::cancelCapture()</db:title>
<db:para>Cancel incomplete capture requests. Already captured and queused for proicessing images may be discarded.</db:para>
</db:section>
<db:section xml:id="capture">
<db:title>int QCameraImageCapture::capture(const QString &amp;<db:emphasis>file</db:emphasis> = QString())</db:title>
<db:para>Capture the image and save it to <db:code role="parameter">file</db:code>. This operation is asynchronous in majority of cases, followed by signals <db:link xlink:href="qcameraimagecapture.xml#imageExposed">QCameraImageCapture::imageExposed</db:link>(), <db:link xlink:href="qcameraimagecapture.xml#imageCaptured">QCameraImageCapture::imageCaptured</db:link>(), <db:link xlink:href="qcameraimagecapture.xml#imageSaved">QCameraImageCapture::imageSaved</db:link>() or <db:link xlink:href="qcameraimagecapture.xml#error">QCameraImageCapture::error</db:link>().</db:para>
<db:para>If an empty <db:code role="parameter">file</db:code> is passed, the camera backend choses the default location and naming scheme for photos on the system, if only file name without full path is specified, the image will be saved to the default directory, with a full path reported with <db:link xlink:href="qcameraimagecapture.xml#imageCaptured">imageCaptured</db:link>() and <db:link xlink:href="qcameraimagecapture.xml#imageSaved">imageSaved</db:link>() signals.</db:para>
<db:para><db:link xlink:href="qcamera.xml">QCamera</db:link> saves all the capture parameters like exposure settings or image processing parameters, so changes to camera parameters after capture() is called do not affect previous capture requests.</db:para>
<db:para>QCameraImageCapture::capture returns the capture Id parameter, used with <db:link xlink:href="qcameraimagecapture.xml#imageExposed">imageExposed</db:link>(), <db:link xlink:href="qcameraimagecapture.xml#imageCaptured">imageCaptured</db:link>() and <db:link xlink:href="qcameraimagecapture.xml#imageSaved">imageSaved</db:link>() signals.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#readyForCapture-prop">isReadyForCapture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="captureDestination">
<db:title>QCameraImageCapture::CaptureDestinations QCameraImageCapture::captureDestination() const</db:title>
<db:para>Returns the image capture destination being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#isCaptureDestinationSupported">isCaptureDestinationSupported</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraimagecapture.xml#setCaptureDestination">setCaptureDestination</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="captureDestinationChanged">
<db:title>void QCameraImageCapture::captureDestinationChanged(QCameraImageCapture::CaptureDestinations <db:emphasis>destination</db:emphasis>)</db:title>
<db:para>Signal emitted when the capture <db:code role="parameter">destination</db:code> has changed.</db:para>
</db:section>
<db:section xml:id="encodingSettings">
<db:title>QImageEncoderSettings QCameraImageCapture::encodingSettings() const</db:title>
<db:para>Returns the image encoder settings being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#setEncodingSettings">setEncodingSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QCameraImageCapture::Error QCameraImageCapture::error() const</db:title>
<db:para>Returns the current error state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QCameraImageCapture::error(int <db:emphasis>id</db:emphasis>, QCameraImageCapture::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:para>Signals that the capture request <db:code role="parameter">id</db:code> has failed with an <db:code role="parameter">error</db:code> and <db:code role="parameter">errorString</db:code> description.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QCameraImageCapture::errorString() const</db:title>
<db:para>Returns a string describing the current error state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="imageAvailable">
<db:title>void QCameraImageCapture::imageAvailable(int <db:emphasis>id</db:emphasis>, const QVideoFrame &amp;<db:emphasis>buffer</db:emphasis>)</db:title>
<db:para>Signal emitted when the frame with request <db:code role="parameter">id</db:code> is available as <db:code role="parameter">buffer</db:code>.</db:para>
</db:section>
<db:section xml:id="imageCaptured">
<db:title>void QCameraImageCapture::imageCaptured(int <db:emphasis>id</db:emphasis>, const QImage &amp;<db:emphasis>preview</db:emphasis>)</db:title>
<db:para>Signal emitted when the frame with request <db:code role="parameter">id</db:code> was captured, but not processed and saved yet. Frame <db:code role="parameter">preview</db:code> can be displayed to user.</db:para>
</db:section>
<db:section xml:id="imageCodecDescription">
<db:title>QString QCameraImageCapture::imageCodecDescription(const QString &amp;<db:emphasis>codec</db:emphasis>) const</db:title>
<db:para>Returns a description of an image <db:code role="parameter">codec</db:code>.</db:para>
</db:section>
<db:section xml:id="imageExposed">
<db:title>void QCameraImageCapture::imageExposed(int <db:emphasis>id</db:emphasis>)</db:title>
<db:para>Signal emitted when the frame with request <db:code role="parameter">id</db:code> was exposed.</db:para>
</db:section>
<db:section xml:id="imageMetadataAvailable">
<db:title>void QCameraImageCapture::imageMetadataAvailable(int <db:emphasis>id</db:emphasis>, const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Signals that a metadata for an image with request <db:code role="parameter">id</db:code> is available. Also includes the <db:code role="parameter">key</db:code> and <db:code role="parameter">value</db:code> of the metadata.</db:para>
<db:para>This signal is emitted between <db:link xlink:href="qcameraimagecapture.xml#imageExposed">imageExposed</db:link> and <db:link xlink:href="qcameraimagecapture.xml#imageSaved">imageSaved</db:link> signals.</db:para>
</db:section>
<db:section xml:id="imageSaved">
<db:title>void QCameraImageCapture::imageSaved(int <db:emphasis>id</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Signal emitted when the frame with request <db:code role="parameter">id</db:code> was saved to <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="isAvailable">
<db:title>bool QCameraImageCapture::isAvailable() const</db:title>
<db:para>Returns true if the images capture service ready to use.</db:para>
</db:section>
<db:section xml:id="isCaptureDestinationSupported">
<db:title>bool QCameraImageCapture::isCaptureDestinationSupported(QCameraImageCapture::CaptureDestinations <db:emphasis>destination</db:emphasis>) const</db:title>
<db:para>Returns true if the image capture <db:code role="parameter">destination</db:code> is supported; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#captureDestination">captureDestination</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraimagecapture.xml#setCaptureDestination">setCaptureDestination</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaObject">
<db:title>[override virtual] QMediaObject *QCameraImageCapture::mediaObject() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qmediabindableinterface.xml#mediaObject" role="function">QMediaBindableInterface::mediaObject() const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#setMediaObject">setMediaObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readyForCaptureChanged">
<db:title>void QCameraImageCapture::readyForCaptureChanged(bool <db:emphasis>ready</db:emphasis>)</db:title>
<db:para>Signals that a camera's <db:code role="parameter">ready</db:code> for capture state has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcameraimagecapture.xml#readyForCapture-prop">readyForCapture</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="setBufferFormat">
<db:title>void QCameraImageCapture::setBufferFormat(const QVideoFrame::PixelFormat <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the buffer image capture <db:code role="parameter">format</db:code> to be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#bufferFormat">bufferFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraimagecapture.xml#supportedBufferFormats">supportedBufferFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraimagecapture.xml#captureDestination">captureDestination</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCaptureDestination">
<db:title>void QCameraImageCapture::setCaptureDestination(QCameraImageCapture::CaptureDestinations <db:emphasis>destination</db:emphasis>)</db:title>
<db:para>Sets the capture <db:code role="parameter">destination</db:code> to be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#isCaptureDestinationSupported">isCaptureDestinationSupported</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraimagecapture.xml#captureDestination">captureDestination</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncodingSettings">
<db:title>void QCameraImageCapture::setEncodingSettings(const QImageEncoderSettings &amp;<db:emphasis>settings</db:emphasis>)</db:title>
<db:para>Sets the image encoding <db:code role="parameter">settings</db:code>.</db:para>
<db:para>If some parameters are not specified, or null settings are passed, the encoder choose the default encoding parameters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#encodingSettings">encodingSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMediaObject">
<db:title>[override virtual protected] bool QCameraImageCapture::setMediaObject(QMediaObject *<db:emphasis>mediaObject</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qmediabindableinterface.xml#setMediaObject" role="function">QMediaBindableInterface::setMediaObject(QMediaObject *object)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#mediaObject">mediaObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedBufferFormats">
<db:title>QList&lt;QVideoFrame::PixelFormat&gt; QCameraImageCapture::supportedBufferFormats() const</db:title>
<db:para>Returns the list of supported buffer image capture formats.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#bufferFormat">bufferFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraimagecapture.xml#setBufferFormat">setBufferFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedImageCodecs">
<db:title>QStringList QCameraImageCapture::supportedImageCodecs() const</db:title>
<db:para>Returns a list of supported image codecs.</db:para>
</db:section>
<db:section xml:id="supportedResolutions">
<db:title>QList&lt;QSize&gt; QCameraImageCapture::supportedResolutions(const QImageEncoderSettings &amp;<db:emphasis>settings</db:emphasis> = QImageEncoderSettings(), bool *<db:emphasis>continuous</db:emphasis> = Q_NULLPTR) const</db:title>
<db:para>Returns a list of resolutions images can be encoded at.</db:para>
<db:para>If non null image <db:code role="parameter">settings</db:code> parameter is passed, the returned list is reduced to resolution supported with partial settings like image codec or quality applied.</db:para>
<db:para>If the encoder supports arbitrary resolutions within the supported range, *<db:code role="parameter">continuous</db:code> is set to true, otherwise *<db:code role="parameter">continuous</db:code> is set to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#resolution">QImageEncoderSettings::resolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
