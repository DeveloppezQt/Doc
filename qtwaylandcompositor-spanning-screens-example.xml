<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Spanning Screens</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Spanning Screens is an example that demonstrates how to let Wayland clients span multiple screens.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>Spanning screens is a Wayland compositor example that maximizes clients across a top and a bottom screen.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/spanning-screens.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>For an introduction to the basic principles of creating a <db:link xlink:href="qtwaylandcompositor-index.xml">Qt Wayland Compositor</db:link> with Qt, see the <db:link xlink:href="qtwaylandcompositor-minimal-qml-example.xml">Minimal QML example</db:link>.</db:para>
</db:section>
<db:section xml:id="supporting-multiple-screens">
<db:title>Supporting Multiple Screens</db:title>
<db:para>In <db:link xlink:href="qtwaylandcompositor-index.xml">Qt Wayland Compositor</db:link> a screen is represented by a <db:link xlink:href="qml-qtwayland-compositor-waylandoutput.xml">WaylandOutput</db:link>, and a <db:link xlink:href="qtwaylandcompositor-minimal-cpp-example.xml#window">Window</db:link> is used to contain the <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> scene representing both clients and the compositor's UI.</db:para>
<db:para>In this example, a multi-screen setup is emulated by creating two windows on the primary screen, but the code can easily be modified to target multiple physical screens.</db:para>
<db:programlisting language="qml">// Enable the following to make the output target an actual screen,
// for example when running on eglfs in a multi-display embedded system.

// screen: Qt.application.screens[0]
</db:programlisting>
<db:para>Since each <db:link xlink:href="qtwaylandcompositor-minimal-cpp-example.xml#window">Window</db:link> represents an isolated <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> scene, this means we need a trick to have the same client content display inside both windows. The way to do this in <db:link xlink:href="qtwaylandcompositor-index.xml">Qt Wayland Compositor</db:link> is to create two views of the same client content: One for the &quot;top&quot; window and one for the &quot;bottom&quot;. The views share a reference to the same underlying graphics buffer. This allows us to copy different areas of the client's surface onto each of the windows.</db:para>
<db:programlisting language="qml">const topItem = chromeComponent.createObject(topSurfaceArea, {
    shellSurface
});

const bottomItem = chromeComponent.createObject(bottomSurfaceArea, {
    shellSurface,
    y: Qt.binding(function() { return -topSurfaceArea.height;})
});
</db:programlisting>
<db:para>When the client connects to the <db:link xlink:href="qtwaylandcompositor-shellextensions.xml">shell extension</db:link> <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link>, we create two references to the surface. One of them is added to the &quot;top&quot; output, and the second to the &quot;bottom&quot;. The item on the bottom output also gets an offset corresponding to the height of the top output. This ensures that the part of the client surface showing on the bottom output starts where the top output ends.</db:para>
<db:programlisting language="qml">const height = topSurfaceArea.pixelHeight + bottomSurfaceArea.pixelHeight;
const width = Math.max(bottomSurfaceArea.pixelWidth, topSurfaceArea.pixelWidth);
const size = Qt.size(width, height);
toplevel.sendFullscreen(size);
</db:programlisting>
<db:para>In addition, we tell the client to resize its surface so that it fills both the top and bottom window. The end result is a client that spans two windows, or &quot;screens&quot;.</db:para>
<db:para>Referencing the same client surface from multiple items is a tool which can be used for many things. For a demonstration of a desktop-style compositor where windows can be moved from screen to screen, take a look at the <db:link xlink:href="qtwaylandcompositor-multi-screen-example.xml">Multi Screen example</db:link>.</db:para>
<db:para>The <db:link xlink:href="qtwaylandcompositor-multi-output-example.xml">Multi Output example</db:link> shows how client surfaces can be displayed on multiple outputs with different sizes and other properties.</db:para>
<db:note>
<db:para>In order to support multiple Wayland outputs in the same compositor, the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_ShareOpenGLContexts</db:link> attribute must be set before the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object is constructed.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwayland.git/tree/examples/wayland/spanning-screens?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
