<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioDevice Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> class provides an information about audio devices and their functionality.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioDevice is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> describes an audio device available in the system, either for input or for playback.</db:para>
<db:para>A <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> is used by Qt to construct classes that communicate with the device â€“ such as <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link>, and <db:link xlink:href="qaudiosink.xml">QAudioSink</db:link>. It is also used to determine the input or output device to use in a capture session or during media playback.</db:para>
<db:para>You can also query each device for the formats it supports. A format in this context is a set consisting of a channel count, sample rate, and sample type. A format is represented by the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> class.</db:para>
<db:para>The values supported by the device for each of these parameters can be fetched with <db:link xlink:href="qaudiodevice.xml#minimumChannelCount">minimumChannelCount</db:link>(), <db:link xlink:href="qaudiodevice.xml#maximumChannelCount">maximumChannelCount</db:link>(), <db:link xlink:href="qaudiodevice.xml#minimumSampleRate">minimumSampleRate</db:link>(), <db:link xlink:href="qaudiodevice.xml#maximumSampleRate">maximumSampleRate</db:link>() and <db:link xlink:href="qaudiodevice.xml#supportedSampleFormats">supportedSampleFormats</db:link>(). The combinations supported are dependent on the audio device capabilities. If you need a specific format, you can check if the device supports it with <db:link xlink:href="qaudiodevice.xml#isFormatSupported">isFormatSupported</db:link>(). For instance:</db:para>
<db:programlisting language="cpp">{
    sourceFile.setFileName(&quot;/tmp/test.raw&quot;);
    sourceFile.open(QIODevice::ReadOnly);

    QAudioFormat format;
    // Set up the format, eg.
    format.setSampleRate(8000);
    format.setChannelCount(1);
    format.setSampleFormat(QAudioFormat::UInt8);

    QAudioDevice info(QMediaDevices::defaultAudioOutput());
    if (!info.isFormatSupported(format)) {
        qWarning() &amp;lt;&amp;lt; &quot;Raw audio format not supported by backend, cannot play audio.&quot;;
        return;
    }

    audio = new QAudioSink(format, this);
    connect(audio, QAudioSink::stateChanged, this, &amp;amp;AudioInputExample::handleStateChanged);
    audio-&amp;gt;start(&amp;amp;sourceFile);
}
</db:programlisting>
<db:para>The set of available devices can be retrieved from the <db:link xlink:href="qmediadevices.xml">QMediaDevices</db:link> class.</db:para>
<db:para>For instance:</db:para>
<db:programlisting language="cpp">const auto devices = QMediaDevices::audioOutputs();
for (const QAudioDevice &amp;amp;device : devices)
    qDebug() &amp;lt;&amp;lt; &quot;Device: &quot; &amp;lt;&amp;lt; device.description();
</db:programlisting>
<db:para>In this code sample, we loop through all devices that are able to output sound, i.e., play an audio stream in a supported format. For each device we find, we simply print the deviceName().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiosink.xml">QAudioSink</db:link></db:member>
<db:member><db:link xlink:href="qaudiosource.xml">QAudioSource</db:link></db:member>
<db:member><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Mode-enum">
<db:title>enum QAudioDevice::Mode</db:title>
<db:enumsynopsis>
<db:enumname>Mode</db:enumname>
<db:enumitem>
<db:enumidentifier>Null</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Input</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Output</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes the mode of this device.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A null device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link></db:emphasis>::Input</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An input device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link></db:emphasis>::Output</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An output device.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="description-prop">
<db:title>[read-only] description : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>description</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">description</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns a human readable name of the audio device.</db:para>
<db:para>Use this string to present the device to the user.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">description</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="id-prop">
<db:title>[read-only] id : const QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>id</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">id</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns an identifier for the audio device.</db:para>
<db:para>Device names vary depending on the platform/audio plugin being used.</db:para>
<db:para>They are a unique identifier for the audio device.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold">id</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="isDefault-prop">
<db:title>[read-only] isDefault : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>isDefault</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isDefault</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns true if this is the default audio device.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isDefault</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="mode-prop">
<db:title>[read-only] mode : const Mode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Mode</db:type>
<db:varname>mode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">mode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns whether this device is an input or output device.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qaudiodevice.xml#Mode-enum">QAudioDevice::Mode</db:link></db:type> <db:emphasis role="bold">mode</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioDevice">
<db:title>QAudioDevice::QAudioDevice()</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> object.</db:para>
</db:section>
<db:section xml:id="QAudioDevice-1">
<db:title>QAudioDevice::QAudioDevice(const QAudioDevice &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioDevice</db:methodname>
<db:methodparam>
<db:type>const QAudioDevice &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioDevice(const QAudioDevice &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QAudioDevice-2">
<db:title>QAudioDevice::QAudioDevice(QAudioDevice &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioDevice</db:methodname>
<db:methodparam>
<db:type>QAudioDevice &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioDevice(QAudioDevice &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move constructs from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioDevice">
<db:title>QAudioDevice::~QAudioDevice()</db:title>
<db:destructorsynopsis>
<db:methodname>~QAudioDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAudioDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroy this audio device info.</db:para>
</db:section>
<db:section xml:id="channelConfiguration">
<db:title>QAudioFormat::ChannelConfig QAudioDevice::channelConfiguration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAudioFormat::ChannelConfig</db:type>
<db:methodname>channelConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat::ChannelConfig channelConfiguration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the channel configuration of the device.</db:para>
</db:section>
<db:section xml:id="isFormatSupported">
<db:title>bool QAudioDevice::isFormatSupported(const QAudioFormat &amp;<db:emphasis>settings</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFormatSupported</db:methodname>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>settings</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFormatSupported(const QAudioFormat &amp;settings) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the supplied <db:code role="parameter">settings</db:code> are supported by the audio device described by this <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link>.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QAudioDevice::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> object holds a valid device definition.</db:para>
</db:section>
<db:section xml:id="maximumChannelCount">
<db:title>int QAudioDevice::maximumChannelCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumChannelCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumChannelCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of supported channel counts.</db:para>
<db:para>This is typically 1 for mono sound, or 2 for stereo sound.</db:para>
</db:section>
<db:section xml:id="maximumSampleRate">
<db:title>int QAudioDevice::maximumSampleRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumSampleRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumSampleRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum supported sample rate (in Hertz).</db:para>
</db:section>
<db:section xml:id="minimumChannelCount">
<db:title>int QAudioDevice::minimumChannelCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minimumChannelCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minimumChannelCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum number of supported channel counts.</db:para>
<db:para>This is typically 1 for mono sound, or 2 for stereo sound.</db:para>
</db:section>
<db:section xml:id="minimumSampleRate">
<db:title>int QAudioDevice::minimumSampleRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minimumSampleRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minimumSampleRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum supported sample rate (in Hertz).</db:para>
</db:section>
<db:section xml:id="preferredFormat">
<db:title>QAudioFormat QAudioDevice::preferredFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAudioFormat</db:type>
<db:methodname>preferredFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat preferredFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default audio format settings for this device.</db:para>
<db:para>These settings are provided by the platform/audio plugin being used.</db:para>
<db:para>They are also dependent on the <db:link xlink:href="qaudio.xml">QAudio</db:link>::Mode being used.</db:para>
<db:para>A typical audio system would provide something like:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Input settings: 48000Hz mono 16 bit.</db:para>
</db:listitem>
<db:listitem>
<db:para>Output settings: 48000Hz stereo 16 bit.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="supportedSampleFormats">
<db:title>QList&lt;QAudioFormat::SampleFormat&gt; QAudioDevice::supportedSampleFormats() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAudioFormat::SampleFormat&gt;</db:type>
<db:methodname>supportedSampleFormats</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAudioFormat::SampleFormat&gt; supportedSampleFormats() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of supported sample types.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QAudioDevice::swap(QAudioDevice &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QAudioDevice &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QAudioDevice &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the audio device with the <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QAudioDevice::operator!=(const QAudioDevice &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QAudioDevice &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QAudioDevice &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> class represents a different audio device than <db:code role="parameter">other</db:code></db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QAudioDevice &amp;QAudioDevice::operator=(QAudioDevice &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAudioDevice &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QAudioDevice &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioDevice &amp; operator=(QAudioDevice &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves <db:code role="parameter">other</db:code> into this <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> object.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QAudioDevice &amp;QAudioDevice::operator=(const QAudioDevice &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAudioDevice &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QAudioDevice &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioDevice &amp; operator=(const QAudioDevice &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> object to be equal to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QAudioDevice::operator==(const QAudioDevice &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QAudioDevice &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QAudioDevice &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> class represents the same audio device as <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
