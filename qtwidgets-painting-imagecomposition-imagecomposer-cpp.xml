<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Image Composition Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how composition modes work in QPainter.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;imagecomposer.h&quot;

#include &lt;QtWidgets&gt;

static const QSize resultSize(200, 200);

ImageComposer::ImageComposer()
{
    sourceButton = new QToolButton;
    sourceButton-&gt;setIconSize(resultSize);

    operatorComboBox = new QComboBox;
    addOp(QPainter::CompositionMode_SourceOver, tr(&quot;SourceOver&quot;));
    addOp(QPainter::CompositionMode_DestinationOver, tr(&quot;DestinationOver&quot;));
    addOp(QPainter::CompositionMode_Clear, tr(&quot;Clear&quot;));
    addOp(QPainter::CompositionMode_Source, tr(&quot;Source&quot;));
    addOp(QPainter::CompositionMode_Destination, tr(&quot;Destination&quot;));
    addOp(QPainter::CompositionMode_SourceIn, tr(&quot;SourceIn&quot;));
    addOp(QPainter::CompositionMode_DestinationIn, tr(&quot;DestinationIn&quot;));
    addOp(QPainter::CompositionMode_SourceOut, tr(&quot;SourceOut&quot;));
    addOp(QPainter::CompositionMode_DestinationOut, tr(&quot;DestinationOut&quot;));
    addOp(QPainter::CompositionMode_SourceAtop, tr(&quot;SourceAtop&quot;));
    addOp(QPainter::CompositionMode_DestinationAtop, tr(&quot;DestinationAtop&quot;));
    addOp(QPainter::CompositionMode_Xor, tr(&quot;Xor&quot;));
    addOp(QPainter::CompositionMode_Plus, tr(&quot;Plus&quot;));
    addOp(QPainter::CompositionMode_Multiply, tr(&quot;Multiply&quot;));
    addOp(QPainter::CompositionMode_Screen, tr(&quot;Screen&quot;));
    addOp(QPainter::CompositionMode_Overlay, tr(&quot;Overlay&quot;));
    addOp(QPainter::CompositionMode_Darken, tr(&quot;Darken&quot;));
    addOp(QPainter::CompositionMode_Lighten, tr(&quot;Lighten&quot;));
    addOp(QPainter::CompositionMode_ColorDodge, tr(&quot;ColorDodge&quot;));
    addOp(QPainter::CompositionMode_ColorBurn, tr(&quot;ColorBurn&quot;));
    addOp(QPainter::CompositionMode_HardLight, tr(&quot;HardLight&quot;));
    addOp(QPainter::CompositionMode_SoftLight, tr(&quot;SoftLight&quot;));
    addOp(QPainter::CompositionMode_Difference, tr(&quot;Difference&quot;));
    addOp(QPainter::CompositionMode_Exclusion, tr(&quot;Exclusion&quot;));

    destinationButton = new QToolButton;
    destinationButton-&gt;setIconSize(resultSize);

    equalLabel = new QLabel(tr(&quot;=&quot;));

    resultLabel = new QLabel;
    resultLabel-&gt;setMinimumWidth(resultSize.width());

    connect(sourceButton, SIGNAL(clicked()), this, SLOT(chooseSource()));
    connect(operatorComboBox, SIGNAL(activated(int)), this, SLOT(recalculateResult()));
    connect(destinationButton, SIGNAL(clicked()), this, SLOT(chooseDestination()));

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&gt;addWidget(sourceButton, 0, 0, 3, 1);
    mainLayout-&gt;addWidget(operatorComboBox, 1, 1);
    mainLayout-&gt;addWidget(destinationButton, 0, 2, 3, 1);
    mainLayout-&gt;addWidget(equalLabel, 1, 3);
    mainLayout-&gt;addWidget(resultLabel, 0, 4, 3, 1);
    mainLayout-&gt;setSizeConstraint(QLayout::SetFixedSize);
    setLayout(mainLayout);

    resultImage = QImage(resultSize, QImage::Format_ARGB32_Premultiplied);

    loadImage(&quot;:/images/butterfly.png&quot;, &amp;sourceImage, sourceButton);
    loadImage(&quot;:/images/checker.png&quot;, &amp;destinationImage, destinationButton);

    setWindowTitle(tr(&quot;Image Composition&quot;));
}

void ImageComposer::chooseSource()
{
    chooseImage(tr(&quot;Choose Source Image&quot;), &amp;sourceImage, sourceButton);
}

void ImageComposer::chooseDestination()
{
    chooseImage(tr(&quot;Choose Destination Image&quot;), &amp;destinationImage, destinationButton);
}

void ImageComposer::recalculateResult()
{
    QPainter::CompositionMode mode = currentMode();

    QPainter painter(&amp;resultImage);
    painter.setCompositionMode(QPainter::CompositionMode_Source);
    painter.fillRect(resultImage.rect(), Qt::transparent);
    painter.setCompositionMode(QPainter::CompositionMode_SourceOver);
    painter.drawImage(0, 0, destinationImage);
    painter.setCompositionMode(mode);
    painter.drawImage(0, 0, sourceImage);
    painter.setCompositionMode(QPainter::CompositionMode_DestinationOver);
    painter.fillRect(resultImage.rect(), Qt::white);
    painter.end();

    resultLabel-&gt;setPixmap(QPixmap::fromImage(resultImage));
}

void ImageComposer::addOp(QPainter::CompositionMode mode, const QString &amp;name)
{
    operatorComboBox-&gt;addItem(name, mode);
}

void ImageComposer::chooseImage(const QString &amp;title, QImage *image,
                                QToolButton *button)
{
    QString fileName = QFileDialog::getOpenFileName(this, title);
    if (!fileName.isEmpty())
        loadImage(fileName, image, button);
}

void ImageComposer::loadImage(const QString &amp;fileName, QImage *image,
                              QToolButton *button)
{
    image-&gt;load(fileName);

    // Scale the image to given size
    *image = image-&gt;scaled(resultSize, Qt::KeepAspectRatio);

    QImage fixedImage(resultSize, QImage::Format_ARGB32_Premultiplied);
    QPainter painter(&amp;fixedImage);
    painter.setCompositionMode(QPainter::CompositionMode_Source);
    painter.fillRect(fixedImage.rect(), Qt::transparent);
    painter.setCompositionMode(QPainter::CompositionMode_SourceOver);
    painter.drawImage(imagePos(*image), *image);
    painter.end();
    button-&gt;setIcon(QPixmap::fromImage(fixedImage));

    *image = fixedImage;

    recalculateResult();
}

QPainter::CompositionMode ImageComposer::currentMode() const
{
    return (QPainter::CompositionMode)
           operatorComboBox-&gt;itemData(operatorComboBox-&gt;currentIndex()).toInt();
}

QPoint ImageComposer::imagePos(const QImage &amp;image) const
{
    return QPoint((resultSize.width() - image.width()) / 2,
                  (resultSize.height() - image.height()) / 2);
}

</db:programlisting>
</db:article>
