<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ScrollView QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Scrollable view.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Pane</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ScrollView is part of <db:simplelist><db:member>qtquickcontrols-containers</db:member><db:member>qtquickcontrols-focusscopes</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link> provides scrolling for user-defined content. It can be used to either replace a <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link>, or to decorate an existing one.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-scrollview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The first example demonstrates the simplest usage of <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link>.</db:para>
<db:programlisting language="qml">ScrollView {
    width: 200
    height: 200

    Label {
        text: &quot;ABC&quot;
        font.pixelSize: 224
    }
}
</db:programlisting>
<db:para>The second example illustrates using an existing <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link>, that is, a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:programlisting language="qml">ScrollView {
    width: 200
    height: 200

    ListView {
        model: 20
        delegate: ItemDelegate {
            text: &quot;Item &quot; + index

            required property int index
        }
    }
}
</db:programlisting>
<db:note>
<db:para>As of Qt-6.0, <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link> automatically clips its contents if you don't use a Flickable as a child. If this is not wanted, you can set your own Flickable as a child, and control the <db:link xlink:href="qml-qtquick-item.xml#clip-prop">clip</db:link> property on the Flickable explicitly.</db:para>
</db:note>
<db:section xml:id="sizing">
<db:title>Sizing</db:title>
<db:para>As with Flickable, there are several things to keep in mind when using <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If only a single item is used within a <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link>, the content size is automatically calculated based on the implicit size of its contained item. However, if more than one item is used (or an implicit size is not provided), the <db:link xlink:href="qml-qtquick-controls-pane.xml#contentWidth-prop">contentWidth</db:link> and <db:link xlink:href="qml-qtquick-controls-pane.xml#contentHeight-prop">contentHeight</db:link> properties must be set to the combined size of its contained items.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the content size is less than or equal to the size of the <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link>, it will not be scrollable.</db:para>
</db:listitem>
<db:listitem>
<db:para>If you want the <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link> to only scroll vertically, you can bind <db:link xlink:href="qml-qtquick-controls-pane.xml#contentWidth-prop">contentWidth</db:link> to <db:link xlink:href="qml-qtquick-controls-control.xml#availableWidth-prop">availableWidth</db:link> (and vice versa for contentHeight). This will let the contents fill out all the available space horizontally inside the <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link>, taking any padding or scroll bars into account.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="scroll-bars">
<db:title>Scroll Bars</db:title>
<db:para>The horizontal and vertical scroll bars can be accessed and customized using the <db:link xlink:href="qml-qtquick-controls-scrollbar.xml#horizontal-attached-prop">ScrollBar.horizontal</db:link> and <db:link xlink:href="qml-qtquick-controls-scrollbar.xml#vertical-attached-prop">ScrollBar.vertical</db:link> attached properties. The following example adjusts the scroll bar policies so that the horizontal scroll bar is always off, and the vertical scroll bar is always on.</db:para>
<db:programlisting language="qml">ScrollView {
    // ...
    ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
    ScrollBar.vertical.policy: ScrollBar.AlwaysOn
}
</db:programlisting>
</db:section>
<db:section xml:id="touch-vs-mouse-interaction">
<db:title>Touch vs. Mouse Interaction</db:title>
<db:para>On touch, <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link> enables flicking and makes the scroll bars non-interactive.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-scrollindicator.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>When interacted with a mouse device, flicking is disabled and the scroll bars are interactive.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-scrollbar.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>Scroll bars can be made interactive on touch, or non-interactive when interacted with a mouse device, by setting the <db:link xlink:href="qml-qtquick-controls-scrollbar.xml#interactive-prop">interactive</db:link> property explicitly to <db:code>true</db:code> or <db:code>false</db:code>, respectively.</db:para>
<db:programlisting language="qml">ScrollView {
    // ...
    ScrollBar.horizontal.interactive: true
    ScrollBar.vertical.interactive: true
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-scrollbar.xml">ScrollBar</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-scrollindicator.xml">ScrollIndicator</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-scrollview">Customizing ScrollView</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-containers.xml">Container Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-focus.xml">Focus Management in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="contentChildren-prop">
<db:title>contentChildren : list&lt;Item&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;Item&gt;</db:type>
<db:varname>contentChildren</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of content children.</db:para>
<db:para>The list contains all items that have been declared in QML as children of the view.</db:para>
<db:note>
<db:para>Unlike <db:code>contentData</db:code>, <db:code>contentChildren</db:code> does not include non-visual QML objects.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#children-prop">Item::children</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-scrollview.xml#contentData-prop">contentData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentData-prop">
<db:title>[default] contentData : list&lt;QtObject&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;QtObject&gt;</db:type>
<db:varname>contentData</db:varname>
<db:modifier>writable</db:modifier>
<db:modifier>[default]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of content data.</db:para>
<db:para>The list contains all objects that have been declared in QML as children of the view.</db:para>
<db:note>
<db:para>Unlike <db:code>contentChildren</db:code>, <db:code>contentData</db:code> does include non-visual QML objects.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#data-prop">Item::data</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-scrollview.xml#contentChildren-prop">contentChildren</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
