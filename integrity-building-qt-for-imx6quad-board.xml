<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building Qt for i.MX6 Quad Board</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-preparing-bsp-for-imx6quad-board.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Preparing BSP for i.MX6 Quad Board"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-building-monolith.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Building Monolith Project"/></db:extendedlink>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>To set up the development environment for Qt for INTEGRITY, you need to build Qt from the sources for the i.MX6 Quad board. Before building Qt, create a shell script that will run the exports for your environment.</db:para>
<db:section xml:id="creating-script-for-running-exports">
<db:title>Creating Script for Running Exports</db:title>
<db:para>Create a new shell script <db:emphasis>setEnvironment.sh</db:emphasis>, and save it under your home folder. Add the following export commands to the script:</db:para>
<db:programlisting language="cpp" role="bad">export PATH=$PATH:/usr/ghs/comp_201654
export INTEGRITY_DIR=/usr/ghs/int1144
export INTEGRITY_BSP=platform-cortex-a9
export GL_INC_DIR=/usr/ghs/int1144/INTEGRITY-include/Vivante/sdk/inc
export GL_LIB_DIR=/usr/ghs/int1144/libs/Vivante
</db:programlisting>
<db:para>These exports assume you have used the default installation directories while installing MULTI IDE and INTEGRITY (see <db:link xlink:href="integrity-installing-dependencies.xml">Installing Platform Dependencies</db:link>). If you have not used the default directories, you need to adjust the exported paths accordingly.</db:para>
<db:para>To initialize your build environment, run the following command in a terminal:</db:para>
<db:programlisting language="cpp" role="bad">source ~/setEnvironment.sh
</db:programlisting>
<db:note>
<db:para>You need to run this command in your terminal every time you build Qt, or use the qmake build system.</db:para>
</db:note>
</db:section>
<db:section xml:id="getting-qt-source-code">
<db:title>Getting Qt Source Code</db:title>
<db:para>You can download the Qt source code via your <db:link xlink:href="https://login.qt.io/login">Qt Account</db:link>.</db:para>
<db:para>You can also get the Qt sources via the Git version control system. Qt Wiki has instructions for getting Qt sources via Git, see <db:link xlink:href="https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_source_code">https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_source_code</db:link>. You find the step by step instructions also from <db:link xlink:href="integrity-building-qt-for-imx6quad-board.xml#getting-qt-sources-via-git">Getting Qt Sources via Git</db:link>.</db:para>
<db:section xml:id="getting-qt-sources-via-git">
<db:title>Getting Qt Sources via Git</db:title>
<db:para>Clone the top-level Qt 5 repository by running the following command in a terminal:</db:para>
<db:programlisting language="cpp" role="bad">git clone git://code.qt.io/qt/qt5.git
</db:programlisting>
<db:note>
<db:para>If you are behind a firewall and want to use the HTTPS protocol, you can clone the top-level Qt 5 repository with the following command:</db:para>
</db:note>
<db:programlisting language="cpp" role="bad">git clone https://code.qt.io/qt/qt5.git
</db:programlisting>
<db:para>Check out the target branch and the Qt sources with the following commands:</db:para>
<db:programlisting language="cpp" role="bad">cd qt5
git checkout &amp;lt;Qt version&amp;gt;
perl init-repository
</db:programlisting>
<db:para>For example, the git checkout command for Qt 5.9.0 is git checkout 5.9.0.</db:para>
<db:para>The init-repository script initializes the Qt 5 repository and clones various Qt 5 sub-modules (see <db:link xlink:href="https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_submodule_source_code">https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_submodule_source_code</db:link>). Qt modules supported by Qt for INTEGRITY are listed in <db:link xlink:href="integrity.xml#supported-qt-modules">Supported Qt Modules</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="configuring-qt">
<db:title>Configuring Qt</db:title>
<db:para>Configure Qt for the i.MX6 Quad board with the following command:</db:para>
<db:programlisting language="cpp" role="bad">cd &amp;lt;Qt installation directory&amp;gt;
./configure -prefix $PWD/qtbase -xplatform integrity-armv7-imx6 -confirm-license
-opensource -nomake examples -nomake tests -no-dbus -silent -opengl es2 -static
</db:programlisting>
<db:note>
<db:para>INTEGRITY supports only static Qt builds.</db:para>
</db:note>
</db:section>
<db:section xml:id="building-qt">
<db:title>Building Qt</db:title>
<db:para>Build Qt with the make command in the terminal. You can run make with as many cores on your host machine as you desire. In our example we use six cores:</db:para>
<db:programlisting language="cpp" role="bad">make -j6
</db:programlisting>
<db:anchor xml:id="installing-qt-for-imx6"/>
</db:section>
<db:section xml:id="installing-qt">
<db:title>Installing Qt</db:title>
<db:para>If you have not used the configure option -prefix $PWD/qtbase in <db:link xlink:href="integrity-building-qt-for-imx6quad-board.xml#configuring-qt">Configuring Qt</db:link>, run the following command in a terminal:</db:para>
<db:programlisting language="cpp" role="bad">cd &amp;lt;Qt installation directory&amp;gt;
make install
</db:programlisting>
<db:para>If you have used the configure option -prefix $PWD/qtbase, you can use Qt from the build directory, without running the make install command.</db:para>
<db:para>Qt is now configured and built for the i.MX6 Quad board.</db:para>
</db:section>
</db:article>
