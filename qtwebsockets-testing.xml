<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Testing Qt WebSockets</db:title>
<db:productname>QtWebSockets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebSockets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt WebSockets Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="https://github.com/crossbario/autobahn-testsuite">Autobahn|Testsuite</db:link>, a standard test suite for WebSocket Protocol (<db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc6455">RFC 6455</db:link>), can be used for testing the conformance of Qt WebSockets. Refer to <db:link xlink:href="https://github.com/crossbario/autobahn-testsuite/blob/master/README.md#installation">Autobahn|Testsuite installation documentation</db:link> to set up the test suite.</db:para>
<db:section xml:id="testing-qt-websockets-with-autobahn-testsuite">
<db:title>Testing Qt WebSockets with Autobahn|Testsuite</db:title>
<db:section xml:id="wstest-fuzzingserver-mode">
<db:title>wstest - fuzzingserver mode</db:title>
<db:programlisting language="cpp">cd your_build_dir/tests/manual/compliance
qmake your_src_dir/tests/manual/compliance/compliance.pro
make

cd ~
wstest -m fuzzingserver
</db:programlisting>
<db:para>Then, in another terminal:</db:para>
<db:programlisting language="cpp">cd your_build_dir/tests/manual/compliance
./tst_compliance
</db:programlisting>
<db:para>Test results will be generated under ~/reports/clients directory. Point your browser to ~/reports/clients/index.html.</db:para>
</db:section>
<db:section xml:id="wstest-fuzzingclient-mode">
<db:title>wstest - fuzzingclient mode</db:title>
<db:programlisting language="cpp">cd your_build_dir/examples/websockets/echoserver
qmake your_src_dir/examples/websockets/echoserver/echoserver.pro
make

./echoserver -p 9001
</db:programlisting>
<db:para>Then, in another terminal:</db:para>
<db:programlisting language="cpp">cd ~
wstest -m fuzzingclient
</db:programlisting>
<db:para>Test results will be generated under ~/reports/servers directory. Point your browser to ~/reports/servers/index.html.</db:para>
</db:section>
</db:section>
</db:article>
