<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QQuickItem Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> class provides the most basic of all visual items in <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml" xlink:role="">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qqmlparserstatus.xml" xlink:role="class">QQmlParserStatus</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickframebufferobject.xml" xlink:role="class">QQuickFramebufferObject</db:link> and <db:link xlink:href="qquickpainteditem.xml" xlink:role="class">QQuickPaintedItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>All visual items in Qt Quick inherit from <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>. Although a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> instance has no visual appearance, it defines all the attributes that are common across visual items, such as x and y position, width and height, <db:link xlink:href="qtquick-positioning-anchors.xml">anchoring</db:link> and key handling support.</db:para>
<db:para>You can subclass <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> to provide your own custom visual item that inherits these features.</db:para>
<db:section xml:id="custom-scene-graph-items">
<db:title>Custom Scene Graph Items</db:title>
<db:para>All visual QML items are rendered using the scene graph, a low-level, high-performance rendering stack, closely tied to OpenGL. It is possible for subclasses of <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> to add their own custom content into the scene graph by setting the <db:link xlink:href="qquickitem.xml#Flag-enum">QQuickItem::ItemHasContents</db:link> flag and reimplementing the <db:link xlink:href="qquickitem.xml#updatePaintNode">QQuickItem::updatePaintNode</db:link>() function.</db:para>
<db:warning>
<db:para>It is crucial that OpenGL operations and interaction with the scene graph happens exclusively on the rendering thread, primarily during the <db:link xlink:href="qquickitem.xml#updatePaintNode">updatePaintNode</db:link>() call. The best rule of thumb is to only use classes with the &quot;QSG&quot; prefix inside the <db:link xlink:href="qquickitem.xml#updatePaintNode">QQuickItem::updatePaintNode</db:link>() function.</db:para>
</db:warning>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
</db:section>
<db:section xml:id="custom-qpainter-items">
<db:title>Custom QPainter Items</db:title>
<db:para>The <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> provides a subclass, <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>, which allows the users to render content using <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
<db:warning>
<db:para>Using <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> uses an indirect 2D surface to render its content, either using software rasterization or using an OpenGL framebuffer object (FBO), so the rendering is a two-step operation. First rasterize the surface, then draw the surface. Using scene graph API directly is always significantly faster.</db:para>
</db:warning>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link></db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Flag-enum">
<db:title>enum QQuickItem::Flag</db:title>
<db:bridgehead renderas="sect2">flags QQuickItem::Flags</db:bridgehead>
<db:para>This enum type is used to specify various item properties.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemClipsChildrenToShape</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Indicates this item should visually clip its children so that they are rendered only within the boundaries of this item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemAcceptsInputMethod</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Indicates the item supports text input methods.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemIsFocusScope</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Indicates the item is a focus scope. See <db:link xlink:href="qtquick-input-focus.xml">Keyboard Focus in Qt Quick</db:link> for more information.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemHasContents</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Indicates the item has visual content and should be rendered by the scene graph.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemAcceptsDrops</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Indicates the item accepts drag and drop events.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#setFlag">setFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#setFlags">setFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ItemChange-enum">
<db:title>enum QQuickItem::ItemChange</db:title>
<db:para>Used in conjunction with <db:link xlink:href="qquickitem.xml#itemChange">QQuickItem::itemChange</db:link>() to notify the item about certain types of changes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemChildAddedChange</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A child was added. <db:link xlink:href="qquickitem-itemchangedata.xml#item-var">ItemChangeData::item</db:link> contains the added child.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemChildRemovedChange</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A child was removed. <db:link xlink:href="qquickitem-itemchangedata.xml#item-var">ItemChangeData::item</db:link> contains the removed child.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemSceneChange</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The item was added to or removed from a scene. The <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> rendering the scene is specified in using <db:link xlink:href="qquickitem-itemchangedata.xml#window-var">ItemChangeData::window</db:link>. The window parameter is null when the item is removed from a scene.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemVisibleHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The item's visibility has changed. <db:link xlink:href="qquickitem-itemchangedata.xml#boolValue-var">ItemChangeData::boolValue</db:link> contains the new visibility.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemParentHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The item's parent has changed. <db:link xlink:href="qquickitem-itemchangedata.xml#item-var">ItemChangeData::item</db:link> contains the new parent.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemOpacityHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The item's opacity has changed. <db:link xlink:href="qquickitem-itemchangedata.xml#realValue-var">ItemChangeData::realValue</db:link> contains the new opacity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemActiveFocusHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The item's focus has changed. <db:link xlink:href="qquickitem-itemchangedata.xml#boolValue-var">ItemChangeData::boolValue</db:link> contains whether the item has focus or not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::ItemRotationHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The item's rotation has changed. <db:link xlink:href="qquickitem-itemchangedata.xml#realValue-var">ItemChangeData::realValue</db:link> contains the new rotation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TransformOrigin-enum">
<db:title>enum QQuickItem::TransformOrigin</db:title>
<db:para>Controls the point about which simple transforms like scale apply.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::TopLeft</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The top-left corner of the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::Top</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The center point of the top of the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::TopRight</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The top-right corner of the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::Left</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The left most point of the vertical middle.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::Center</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The center of the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::Right</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The right most point of the vertical middle.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::BottomLeft</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The bottom-left corner of the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::Bottom</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The center point of the bottom of the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:emphasis>::BottomRight</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The bottom-right corner of the item.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">transformOrigin()</db:link></db:member>
<db:member><db:link xlink:href="">setTransformOrigin()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickItem">
<db:title>QQuickItem::QQuickItem(QQuickItem *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickItem">
<db:title>[virtual noexcept] QQuickItem::~QQuickItem()</db:title>
<db:para>Destroys the <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>.</db:para>
</db:section>
<db:section xml:id="acceptHoverEvents">
<db:title>bool QQuickItem::acceptHoverEvents() const</db:title>
<db:para>Returns whether hover events are accepted by this item.</db:para>
<db:para>The default value is false.</db:para>
<db:para>If this is false, then the item will not receive any hover events through the <db:link xlink:href="qquickitem.xml#hoverEnterEvent">hoverEnterEvent</db:link>(), <db:link xlink:href="qquickitem.xml#hoverMoveEvent">hoverMoveEvent</db:link>() and <db:link xlink:href="qquickitem.xml#hoverLeaveEvent">hoverLeaveEvent</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#setAcceptHoverEvents">setAcceptHoverEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="acceptedMouseButtons">
<db:title>Qt::MouseButtons QQuickItem::acceptedMouseButtons() const</db:title>
<db:para>Returns the mouse buttons accepted by this item.</db:para>
<db:para>The default value is <db:link xlink:href="qt.xml#MouseButton-enum">Qt::NoButton</db:link>; that is, no mouse buttons are accepted.</db:para>
<db:para>If an item does not accept the mouse button for a particular mouse event, the mouse event will not be delivered to the item and will be delivered to the next item in the item hierarchy instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#setAcceptedMouseButtons">setAcceptedMouseButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childAt">
<db:title>QQuickItem *QQuickItem::childAt(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>Returns the first visible child item found at point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) within the coordinate system of this item.</db:para>
<db:para>Returns 0 if there is no such item.</db:para>
</db:section>
<db:section xml:id="childItems">
<db:title>QList&lt;QQuickItem *&gt; QQuickItem::childItems() const</db:title>
<db:para>Returns the children of this item.</db:para>
</db:section>
<db:section xml:id="childMouseEventFilter">
<db:title>[virtual protected] bool QQuickItem::childMouseEventFilter(QQuickItem *<db:emphasis>item</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplement this method to filter the mouse events that are received by this item's children.</db:para>
<db:para>This method will only be called if <db:link xlink:href="qquickitem.xml#filtersChildMouseEvents">filtersChildMouseEvents</db:link>() is true.</db:para>
<db:para>Return true if the specified <db:code role="parameter">event</db:code> should not be passed onto the specified child <db:code role="parameter">item</db:code>, and false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#setFiltersChildMouseEvents">setFiltersChildMouseEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="classBegin">
<db:title>[override virtual protected] void QQuickItem::classBegin()</db:title>
<db:para>Reimplements: <db:link xlink:href="qqmlparserstatus.xml#classBegin" role="function">QQmlParserStatus::classBegin()</db:link>.</db:para>
<db:para>Derived classes should call the base class method before adding their own action to perform at classBegin.</db:para>
</db:section>
<db:section xml:id="componentComplete">
<db:title>[override virtual protected] void QQuickItem::componentComplete()</db:title>
<db:para>Reimplements: <db:link xlink:href="qqmlparserstatus.xml#componentComplete" role="function">QQmlParserStatus::componentComplete()</db:link>.</db:para>
<db:para>Derived classes should call the base class method before adding their own actions to perform at componentComplete.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>[virtual] bool QQuickItem::contains(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns true if this item contains <db:code role="parameter">point</db:code>, which is in local coordinates; returns false otherwise.</db:para>
<db:para>This function can be overwritten in order to handle point collisions in items with custom shapes. The default implementation checks if the point is inside the item's bounding rect.</db:para>
<db:para>Note that this method is generally used to check whether the item is under the mouse cursor, and for that reason, the implementation of this function should be as light-weight as possible.</db:para>
</db:section>
<db:section xml:id="cursor">
<db:title>QCursor QQuickItem::cursor() const</db:title>
<db:para>Returns the cursor shape for this item.</db:para>
<db:para>The mouse cursor will assume this shape when it is over this item, unless an override cursor is set. See the <db:link xlink:href="qt.xml#CursorShape-enum">list of predefined cursor objects</db:link> for a range of useful shapes.</db:para>
<db:para>If no cursor shape has been set this returns a cursor with the <db:link xlink:href="qt.xml#CursorShape-enum">Qt::ArrowCursor</db:link> shape, however another cursor shape may be displayed if an overlapping item has a valid cursor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#setCursor">setCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#unsetCursor">unsetCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[virtual protected] void QQuickItem::dragEnterEvent(QDragEnterEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive drag-enter events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:para>Drag and drop events are only provided if the <db:link xlink:href="qquickitem.xml#Flag-enum">ItemAcceptsDrops</db:link> flag has been set for this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-drag.xml">Drag</db:link></db:member>
<db:member><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[virtual protected] void QQuickItem::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive drag-leave events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:para>Drag and drop events are only provided if the <db:link xlink:href="qquickitem.xml#Flag-enum">ItemAcceptsDrops</db:link> flag has been set for this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-drag.xml">Drag</db:link></db:member>
<db:member><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[virtual protected] void QQuickItem::dragMoveEvent(QDragMoveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive drag-move events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:para>Drag and drop events are only provided if the <db:link xlink:href="qquickitem.xml#Flag-enum">ItemAcceptsDrops</db:link> flag has been set for this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-drag.xml">Drag</db:link></db:member>
<db:member><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[virtual protected] void QQuickItem::dropEvent(QDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive drop events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:para>Drag and drop events are only provided if the <db:link xlink:href="qquickitem.xml#Flag-enum">ItemAcceptsDrops</db:link> flag has been set for this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-drag.xml">Drag</db:link></db:member>
<db:member><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QQuickItem::event(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="filtersChildMouseEvents">
<db:title>bool QQuickItem::filtersChildMouseEvents() const</db:title>
<db:para>Returns whether mouse events of this item's children should be filtered through this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#setFiltersChildMouseEvents">setFiltersChildMouseEvents</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#childMouseEventFilter">childMouseEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>QQuickItem::Flags QQuickItem::flags() const</db:title>
<db:para>Returns the item flags for this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#setFlags">setFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#setFlag">setFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[virtual protected] void QQuickItem::focusInEvent(<db:emphasis>QFocusEvent *</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive focus-in events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[virtual protected] void QQuickItem::focusOutEvent(<db:emphasis>QFocusEvent *</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive focus-out events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="geometryChanged">
<db:title>[virtual protected] void QQuickItem::geometryChanged(const QRectF &amp;<db:emphasis>newGeometry</db:emphasis>, const QRectF &amp;<db:emphasis>oldGeometry</db:emphasis>)</db:title>
<db:para>This function is called to handle this item's changes in geometry from <db:code role="parameter">oldGeometry</db:code> to <db:code role="parameter">newGeometry</db:code>. If the two geometries are the same, it doesn't do anything.</db:para>
<db:para>Derived classes must call the base class method within their implementation.</db:para>
</db:section>
<db:section xml:id="grabMouse">
<db:title>void QQuickItem::grabMouse()</db:title>
<db:para>Grabs the mouse input.</db:para>
<db:para>This item will receive all mouse events until <db:link xlink:href="qquickitem.xml#ungrabMouse">ungrabMouse</db:link>() is called.</db:para>
<db:warning>
<db:para>This function should be used with caution.</db:para>
</db:warning>
</db:section>
<db:section xml:id="grabTouchPoints">
<db:title>void QQuickItem::grabTouchPoints(const QVector&lt;int&gt; &amp;<db:emphasis>ids</db:emphasis>)</db:title>
<db:para>Grabs the touch points specified by <db:code role="parameter">ids</db:code>.</db:para>
<db:para>These touch points will be owned by the item until they are released. Alternatively, the grab can be stolen by a filtering item like Flickable. Use <db:link xlink:href="qquickitem.xml#setKeepTouchGrab">setKeepTouchGrab</db:link>() to prevent the grab from being stolen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#ungrabTouchPoints">ungrabTouchPoints</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#setKeepTouchGrab">setKeepTouchGrab</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="heightValid">
<db:title>[protected] bool QQuickItem::heightValid() const</db:title>
<db:para>Returns whether the height property has been set explicitly.</db:para>
</db:section>
<db:section xml:id="hoverEnterEvent">
<db:title>[virtual protected] void QQuickItem::hoverEnterEvent(QHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive hover-enter events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:para>Hover events are only provided if <db:link xlink:href="qquickitem.xml#acceptHoverEvents">acceptHoverEvents</db:link>() is true.</db:para>
</db:section>
<db:section xml:id="hoverLeaveEvent">
<db:title>[virtual protected] void QQuickItem::hoverLeaveEvent(QHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive hover-leave events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:para>Hover events are only provided if <db:link xlink:href="qquickitem.xml#acceptHoverEvents">acceptHoverEvents</db:link>() is true.</db:para>
</db:section>
<db:section xml:id="hoverMoveEvent">
<db:title>[virtual protected] void QQuickItem::hoverMoveEvent(QHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive hover-move events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:para>Hover events are only provided if <db:link xlink:href="qquickitem.xml#acceptHoverEvents">acceptHoverEvents</db:link>() is true.</db:para>
</db:section>
<db:section xml:id="implicitWidth">
<db:title>qreal QQuickItem::implicitWidth() const</db:title>
<db:para>Returns the width of the item that is implied by other properties that determine the content.</db:para>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[virtual protected] void QQuickItem::inputMethodEvent(QInputMethodEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive input method events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[virtual] QVariant QQuickItem::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>) const</db:title>
<db:para>This method is only relevant for input items.</db:para>
<db:para>If this item is an input item, this method should be reimplemented to return the relevant input method flags for the given <db:code role="parameter">query</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#inputMethodQuery">QWidget::inputMethodQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isComponentComplete">
<db:title>[protected] bool QQuickItem::isComponentComplete() const</db:title>
<db:para>Returns true if construction of the QML component is complete; otherwise returns false.</db:para>
<db:para>It is often desirable to delay some processing until the component is completed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#componentComplete">componentComplete</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFocusScope">
<db:title>bool QQuickItem::isFocusScope() const</db:title>
<db:para>Returns true if this item is a focus scope, and false otherwise.</db:para>
</db:section>
<db:section xml:id="isTextureProvider">
<db:title>[virtual] bool QQuickItem::isTextureProvider() const</db:title>
<db:para>Returns true if this item is a texture provider. The default implementation returns false.</db:para>
<db:para>This function can be called from any thread.</db:para>
</db:section>
<db:section xml:id="itemChange">
<db:title>[virtual protected] void QQuickItem::itemChange(QQuickItem::ItemChange <db:emphasis>change</db:emphasis>, const QQuickItem::ItemChangeData &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Called when <db:code role="parameter">change</db:code> occurs for this item.</db:para>
<db:para><db:code role="parameter">value</db:code> contains extra information relating to the change, when applicable.</db:para>
<db:para>If you re-implement this method in a subclass, be sure to call</db:para>
<db:programlisting language="cpp">QQuickItem::itemChange(change, value);
</db:programlisting>
<db:para>typically at the end of your implementation, to ensure the <db:link xlink:href="qquickitem.xml#windowChanged">windowChanged</db:link>() signal will be emitted.</db:para>
</db:section>
<db:section xml:id="keepMouseGrab">
<db:title>bool QQuickItem::keepMouseGrab() const</db:title>
<db:para>Returns whether mouse input should exclusively remain with this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#setKeepMouseGrab">setKeepMouseGrab</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keepTouchGrab">
<db:title>bool QQuickItem::keepTouchGrab() const</db:title>
<db:para>Returns whether the touch points grabbed by this item should exclusively remain with this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#setKeepTouchGrab">setKeepTouchGrab</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#keepMouseGrab">keepMouseGrab</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[virtual protected] void QQuickItem::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive key press events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[virtual protected] void QQuickItem::keyReleaseEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive key release events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="mapFromItem">
<db:title>QPointF QQuickItem::mapFromItem(const QQuickItem *<db:emphasis>item</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Maps the given <db:code role="parameter">point</db:code> in <db:code role="parameter">item</db:code>'s coordinate system to the equivalent point within this item's coordinate system, and returns the mapped coordinate.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is 0, this maps <db:code role="parameter">point</db:code> from the coordinate system of the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-coordinates.xml">Concepts - Visual Coordinates in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene">
<db:title>QPointF QQuickItem::mapFromScene(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Maps the given <db:code role="parameter">point</db:code> in the scene's coordinate system to the equivalent point within this item's coordinate system, and returns the mapped coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-coordinates.xml">Concepts - Visual Coordinates in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectFromItem">
<db:title>QRectF QQuickItem::mapRectFromItem(const QQuickItem *<db:emphasis>item</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:para>Maps the given <db:code role="parameter">rect</db:code> in <db:code role="parameter">item</db:code>'s coordinate system to the equivalent rectangular area within this item's coordinate system, and returns the mapped rectangle value.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is 0, this maps <db:code role="parameter">rect</db:code> from the coordinate system of the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-coordinates.xml">Concepts - Visual Coordinates in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectFromScene">
<db:title>QRectF QQuickItem::mapRectFromScene(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:para>Maps the given <db:code role="parameter">rect</db:code> in the scene's coordinate system to the equivalent rectangular area within this item's coordinate system, and returns the mapped rectangle value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-coordinates.xml">Concepts - Visual Coordinates in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectToItem">
<db:title>QRectF QQuickItem::mapRectToItem(const QQuickItem *<db:emphasis>item</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:para>Maps the given <db:code role="parameter">rect</db:code> in this item's coordinate system to the equivalent rectangular area within <db:code role="parameter">item</db:code>'s coordinate system, and returns the mapped rectangle value.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is 0, this maps <db:code role="parameter">rect</db:code> to the coordinate system of the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-coordinates.xml">Concepts - Visual Coordinates in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectToScene">
<db:title>QRectF QQuickItem::mapRectToScene(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:para>Maps the given <db:code role="parameter">rect</db:code> in this item's coordinate system to the equivalent rectangular area within the scene's coordinate system, and returns the mapped rectangle value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-coordinates.xml">Concepts - Visual Coordinates in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToItem">
<db:title>QPointF QQuickItem::mapToItem(const QQuickItem *<db:emphasis>item</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Maps the given <db:code role="parameter">point</db:code> in this item's coordinate system to the equivalent point within <db:code role="parameter">item</db:code>'s coordinate system, and returns the mapped coordinate.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is 0, this maps <db:code role="parameter">point</db:code> to the coordinate system of the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-coordinates.xml">Concepts - Visual Coordinates in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene">
<db:title>QPointF QQuickItem::mapToScene(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Maps the given <db:code role="parameter">point</db:code> in this item's coordinate system to the equivalent point within the scene's coordinate system, and returns the mapped coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-coordinates.xml">Concepts - Visual Coordinates in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[virtual protected] void QQuickItem::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive mouse double-click events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[virtual protected] void QQuickItem::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive mouse move events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[virtual protected] void QQuickItem::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive mouse press events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[virtual protected] void QQuickItem::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive mouse release events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="mouseUngrabEvent">
<db:title>[virtual protected] void QQuickItem::mouseUngrabEvent()</db:title>
<db:para>This event handler can be reimplemented in a subclass to be notified when a mouse ungrab event has occurred on this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#ungrabMouse">ungrabMouse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextItemInFocusChain">
<db:title>QQuickItem *QQuickItem::nextItemInFocusChain(bool <db:emphasis>forward</db:emphasis> = true)</db:title>
<db:para>Returns the item in the focus chain which is next to this item. If <db:code role="parameter">forward</db:code> is <db:code>true</db:code>, or not supplied, it is the next item in the forwards direction. If <db:code role="parameter">forward</db:code> is <db:code>false</db:code>, it is the next item in the backwards direction.</db:para>
</db:section>
<db:section xml:id="polish">
<db:title>void QQuickItem::polish()</db:title>
<db:para>Schedules a polish event for this item.</db:para>
<db:para>When the scene graph processes the request, it will call <db:link xlink:href="qquickitem.xml#updatePolish">updatePolish</db:link>() on this item.</db:para>
</db:section>
<db:section xml:id="releaseResources">
<db:title>[virtual protected] void QQuickItem::releaseResources()</db:title>
<db:para>This function is called when the item's scene graph resources are no longer needed. It allows items to free its resources, for instance textures, that are not owned by scene graph nodes. Note that scene graph nodes are managed by <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> and should not be deleted by this function. Scene graph resources are no longer needed when the parent is set to null and the item is not used by any <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> or <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link>.</db:para>
<db:para>This function is called from the main thread. Therefore, resources used by the scene graph should not be deleted directly, but by calling <db:link xlink:href="qobject.xml#deleteLater">QObject::deleteLater</db:link>().</db:para>
<db:note>
<db:para>The item destructor still needs to free its scene graph resources if not already done.</db:para>
</db:note>
</db:section>
<db:section xml:id="scopedFocusItem">
<db:title>QQuickItem *QQuickItem::scopedFocusItem() const</db:title>
<db:para>If this item is a focus scope, this returns the item in its focus chain that currently has focus.</db:para>
<db:para>Returns 0 if this item is not a focus scope.</db:para>
</db:section>
<db:section xml:id="setAcceptHoverEvents">
<db:title>void QQuickItem::setAcceptHoverEvents(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enabled</db:code> is true, this sets the item to accept hover events; otherwise, hover events are not accepted by this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#acceptHoverEvents">acceptHoverEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAcceptedMouseButtons">
<db:title>void QQuickItem::setAcceptedMouseButtons(Qt::MouseButtons <db:emphasis>buttons</db:emphasis>)</db:title>
<db:para>Sets the mouse buttons accepted by this item to <db:code role="parameter">buttons</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#acceptedMouseButtons">acceptedMouseButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCursor">
<db:title>void QQuickItem::setCursor(const QCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">cursor</db:code> shape for this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#cursor">cursor</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#unsetCursor">unsetCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFiltersChildMouseEvents">
<db:title>void QQuickItem::setFiltersChildMouseEvents(bool <db:emphasis>filter</db:emphasis>)</db:title>
<db:para>Sets whether mouse events of this item's children should be filtered through this item.</db:para>
<db:para>If <db:code role="parameter">filter</db:code> is true, <db:link xlink:href="qquickitem.xml#childMouseEventFilter">childMouseEventFilter</db:link>() will be called when a mouse event is triggered for a child item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#filtersChildMouseEvents">filtersChildMouseEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlag">
<db:title>void QQuickItem::setFlag(QQuickItem::Flag <db:emphasis>flag</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:para>Enables the specified <db:code role="parameter">flag</db:code> for this item if <db:code role="parameter">enabled</db:code> is true; if <db:code role="parameter">enabled</db:code> is false, the flag is disabled.</db:para>
<db:para>These provide various hints for the item; for example, the <db:link xlink:href="qquickitem.xml#Flag-enum">ItemClipsChildrenToShape</db:link> flag indicates that all children of this item should be clipped to fit within the item area.</db:para>
</db:section>
<db:section xml:id="setFlags">
<db:title>void QQuickItem::setFlags(QQuickItem::Flags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Enables the specified <db:code role="parameter">flags</db:code> for this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#flags">flags</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#setFlag">setFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKeepMouseGrab">
<db:title>void QQuickItem::setKeepMouseGrab(bool <db:emphasis>keep</db:emphasis>)</db:title>
<db:para>Sets whether the mouse input should remain exclusively with this item.</db:para>
<db:para>This is useful for items that wish to grab and keep mouse interaction following a predefined gesture. For example, an item that is interested in horizontal mouse movement may set <db:link xlink:href="qquickitem.xml#keepMouseGrab">keepMouseGrab</db:link> to true once a threshold has been exceeded. Once <db:link xlink:href="qquickitem.xml#keepMouseGrab">keepMouseGrab</db:link> has been set to true, filtering items will not react to mouse events.</db:para>
<db:para>If <db:code role="parameter">keep</db:code> is false, a filtering item may steal the grab. For example, <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> may attempt to steal a mouse grab if it detects that the user has begun to move the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#keepMouseGrab">keepMouseGrab</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKeepTouchGrab">
<db:title>void QQuickItem::setKeepTouchGrab(bool <db:emphasis>keep</db:emphasis>)</db:title>
<db:para>Sets whether the touch points grabbed by this item should remain exclusively with this item.</db:para>
<db:para>This is useful for items that wish to grab and keep specific touch points following a predefined gesture. For example, an item that is interested in horizontal touch point movement may set setKeepTouchGrab to true once a threshold has been exceeded. Once setKeepTouchGrab has been set to true, filtering items will not react to the relevant touch points.</db:para>
<db:para>If <db:code role="parameter">keep</db:code> is false, a filtering item may steal the grab. For example, <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> may attempt to steal a touch point grab if it detects that the user has begun to move the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#keepTouchGrab">keepTouchGrab</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#setKeepMouseGrab">setKeepMouseGrab</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stackAfter">
<db:title>void QQuickItem::stackAfter(const QQuickItem *<db:emphasis>sibling</db:emphasis>)</db:title>
<db:para>Moves the specified <db:code role="parameter">sibling</db:code> item to the index after this item within the visual stacking order.</db:para>
<db:para>The given <db:code role="parameter">sibling</db:code> must be a sibling of this item; that is, they must have the same immediate <db:link xlink:href="qobject.xml#parent">parent</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-visualparent.xml">Concepts - Visual Parent in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stackBefore">
<db:title>void QQuickItem::stackBefore(const QQuickItem *<db:emphasis>sibling</db:emphasis>)</db:title>
<db:para>Moves the specified <db:code role="parameter">sibling</db:code> item to the index before this item within the visual stacking order.</db:para>
<db:para>The given <db:code role="parameter">sibling</db:code> must be a sibling of this item; that is, they must have the same immediate <db:link xlink:href="qobject.xml#parent">parent</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-visualparent.xml">Concepts - Visual Parent in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureProvider">
<db:title>[virtual] QSGTextureProvider *QQuickItem::textureProvider() const</db:title>
<db:para>Returns the texture provider for an item. The default implementation returns 0.</db:para>
<db:para>This function may only be called on the rendering thread.</db:para>
</db:section>
<db:section xml:id="touchEvent">
<db:title>[virtual protected] void QQuickItem::touchEvent(QTouchEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive touch events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="touchUngrabEvent">
<db:title>[virtual protected] void QQuickItem::touchUngrabEvent()</db:title>
<db:para>This event handler can be reimplemented in a subclass to be notified when a touch ungrab event has occurred on this item.</db:para>
</db:section>
<db:section xml:id="ungrabMouse">
<db:title>void QQuickItem::ungrabMouse()</db:title>
<db:para>Releases the mouse grab following a call to <db:link xlink:href="qquickitem.xml#grabMouse">grabMouse</db:link>().</db:para>
</db:section>
<db:section xml:id="ungrabTouchPoints">
<db:title>void QQuickItem::ungrabTouchPoints()</db:title>
<db:para>Ungrabs the touch points owned by this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#grabTouchPoints">grabTouchPoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unsetCursor">
<db:title>void QQuickItem::unsetCursor()</db:title>
<db:para>Clears the cursor shape for this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#cursor">cursor</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#setCursor">setCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update">
<db:title>void QQuickItem::update()</db:title>
<db:para>Schedules a call to <db:link xlink:href="qquickitem.xml#updatePaintNode">updatePaintNode</db:link>() for this item.</db:para>
<db:para>The call to <db:link xlink:href="qquickitem.xml#updatePaintNode">QQuickItem::updatePaintNode</db:link>() will always happen if the item is showing in a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>.</db:para>
<db:para>Only items which specifies <db:link xlink:href="qquickitem.xml#Flag-enum">QQuickItem::ItemHasContents</db:link> are allowed to call QQuickItem::update().</db:para>
</db:section>
<db:section xml:id="updateInputMethod">
<db:title>[protected] void QQuickItem::updateInputMethod(Qt::InputMethodQueries <db:emphasis>queries</db:emphasis> = Qt::ImQueryInput)</db:title>
<db:para>Notify input method on updated query values if needed. <db:code role="parameter">queries</db:code> indicates the changed attributes.</db:para>
</db:section>
<db:section xml:id="updatePaintNode">
<db:title>[virtual protected] QSGNode *QQuickItem::updatePaintNode(QSGNode *<db:emphasis>oldNode</db:emphasis>, QQuickItem::UpdatePaintNodeData *<db:emphasis>updatePaintNodeData</db:emphasis>)</db:title>
<db:para>Called on the render thread when it is time to sync the state of the item with the scene graph.</db:para>
<db:para>The function is called as a result of <db:link xlink:href="qquickitem.xml#update">QQuickItem::update</db:link>(), if the user has set the <db:link xlink:href="qquickitem.xml#Flag-enum">QQuickItem::ItemHasContents</db:link> flag on the item.</db:para>
<db:para>The function should return the root of the scene graph subtree for this item. Most implementations will return a single <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> containing the visual representation of this item. <db:code role="parameter">oldNode</db:code> is the node that was returned the last time the function was called. <db:code role="parameter">updatePaintNodeData</db:code> provides a pointer to the <db:link xlink:href="qsgtransformnode.xml">QSGTransformNode</db:link> associated with this <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>.</db:para>
<db:programlisting language="cpp">QSGNode *MyItem::updatePaintNode(QSGNode *node, UpdatePaintNodeData *)
{
    QSGSimpleRectNode *n = static_cast&lt;QSGSimpleRectNode *&gt;(node);
    if (!n) {
        n = new QSGSimpleRectNode();
        n-&gt;setColor(Qt::red);
    }
    n-&gt;setRect(boundingRect());
    return n;
}
</db:programlisting>
<db:para>The main thread is blocked while this function is executed so it is safe to read values from the <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> instance and other objects in the main thread.</db:para>
<db:para>If no call to QQuickItem::updatePaintNode() result in actual scene graph changes, like <db:link xlink:href="qsgnode.xml#markDirty">QSGNode::markDirty</db:link>() or adding and removing nodes, then the underlying implementation may decide to not render the scene again as the visual outcome is identical.</db:para>
<db:warning>
<db:para>It is crucial that OpenGL operations and interaction with the scene graph happens exclusively on the render thread, primarily during the QQuickItem::updatePaintNode() call. The best rule of thumb is to only use classes with the &quot;QSG&quot; prefix inside the QQuickItem::updatePaintNode() function.</db:para>
</db:warning>
<db:warning>
<db:para>This function is called on the render thread. This means any QObjects or thread local storage that is created will have affinity to the render thread, so apply caution when doing anything other than rendering in this function. Similarly for signals, these will be emitted on the render thread and will thus often be delivered via queued connections.</db:para>
</db:warning>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link></db:member>
<db:member><db:link xlink:href="qsgsimplematerial.xml">QSGSimpleMaterial</db:link></db:member>
<db:member><db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link></db:member>
<db:member><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:member>
<db:member><db:link xlink:href="qsgflatcolormaterial.xml">QSGFlatColorMaterial</db:link></db:member>
<db:member><db:link xlink:href="qsgtexturematerial.xml">QSGTextureMaterial</db:link></db:member>
<db:member><db:link xlink:href="qsgnode.xml#markDirty">QSGNode::markDirty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updatePolish">
<db:title>[virtual protected] void QQuickItem::updatePolish()</db:title>
<db:para>This function should perform any layout as required for this item.</db:para>
<db:para>When <db:link xlink:href="qquickitem.xml#polish">polish</db:link>() is called, the scene graph schedules a polish event for this item. When the scene graph is ready to render this item, it calls updatePolish() to do any item layout as required before it renders the next frame.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[virtual protected] void QQuickItem::wheelEvent(QWheelEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented in a subclass to receive wheel events for an item. The event information is provided by the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="widthValid">
<db:title>[protected] bool QQuickItem::widthValid() const</db:title>
<db:para>Returns whether the width property has been set explicitly.</db:para>
</db:section>
<db:section xml:id="window">
<db:title>QQuickWindow *QQuickItem::window() const</db:title>
<db:para>Returns the window in which this item is rendered.</db:para>
<db:para>The item does not have a window until it has been assigned into a scene. The <db:link xlink:href="qquickitem.xml#windowChanged">windowChanged</db:link>() signal provides a notification both when the item is entered into a scene and when it is removed from a scene.</db:para>
</db:section>
<db:section xml:id="windowChanged">
<db:title>void QQuickItem::windowChanged(QQuickWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:para>This signal is emitted when the item's <db:code role="parameter">window</db:code> changes.</db:para>
</db:section>
</db:section>
</db:article>
