<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRasterPaintEngine Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qrasterpaintengine.xml">QRasterPaintEngine</db:link> class enables hardware acceleration of painting operations in Qt for Embedded Linux.</db:para>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRasterPaintEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpaintengineex.xml" xlink:role="class">QPaintEngineEx</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRasterPaintEngine is part of <db:simplelist><db:member>qws</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Note that this functionality is only available in Qt for Embedded Linux.</db:para>
<db:para>In Qt for Embedded Linux, painting is a pure software implementation. But starting with Qt 4.2, it is possible to add an accelerated graphics driver to take advantage of available hardware resources.</db:para>
<db:para>Hardware acceleration is accomplished by creating a custom screen driver, accelerating the copying from memory to the screen, and implementing a custom paint engine accelerating the various painting operations. Then a custom paint device and a custom window surface must be implemented to make Qt for Embedded Linux aware of the accelerated driver.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qrasterpaintengine.xml">QRasterPaintEngine</db:link> class does not support 8-bit images. Instead, they need to be converted to a supported format, such as <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32_Premultiplied</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRasterPaintEngine">
<db:title>[since 4.5] QRasterPaintEngine::QRasterPaintEngine(QPaintDevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRasterPaintEngine</db:methodname>
<db:methodparam>
<db:type>QPaintDevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QRasterPaintEngine(QPaintDevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a raster based paint engine for operating on the given <db:code role="parameter">device</db:code>, with the complete set of <db:link xlink:href="qpaintengine.xml#PaintEngineFeature-enum">paint engine features and capabilities</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="dtor.QRasterPaintEngine">
<db:title>[virtual] QRasterPaintEngine::~QRasterPaintEngine()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QRasterPaintEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QRasterPaintEngine()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this paint engine.</db:para>
</db:section>
<db:section xml:id="begin">
<db:title>[override virtual] bool QRasterPaintEngine::begin(QPaintDevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>begin</db:methodname>
<db:methodparam>
<db:type>QPaintDevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool begin(QPaintDevice *device) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#begin" role="function">QPaintEngine::begin(QPaintDevice *pdev)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawEllipse">
<db:title>[override virtual] void QRasterPaintEngine::drawEllipse(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawEllipse</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawEllipse(const QRectF &amp;rect) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawEllipse" role="function">QPaintEngine::drawEllipse(const QRectF &amp;rect)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawImage-1">
<db:title>[override virtual] void QRasterPaintEngine::drawImage(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QImage &amp;<db:emphasis>img</db:emphasis>, const QRectF &amp;<db:emphasis>sr</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>img</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>sr</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QRectF &amp;r, const QImage &amp;img, const QRectF &amp;sr, Qt::ImageConversionFlags flags) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawImage" role="function">QPaintEngine::drawImage(const QRectF &amp;rectangle, const QImage &amp;image, const QRectF &amp;sr, Qt::ImageConversionFlags flags)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawLines">
<db:title>[override virtual] void QRasterPaintEngine::drawLines(const QLine *<db:emphasis>lines</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QLine *</db:type>
<db:parameter>lines</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineCount</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QLine *lines, int lineCount) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawLines-1" role="function">QPaintEngine::drawLines(const QLine *lines, int lineCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawLines-1">
<db:title>[override virtual] void QRasterPaintEngine::drawLines(const QLineF *<db:emphasis>lines</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QLineF *</db:type>
<db:parameter>lines</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineCount</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QLineF *lines, int lineCount) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawLines" role="function">QPaintEngine::drawLines(const QLineF *lines, int lineCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPixmap-1">
<db:title>[override virtual] void QRasterPaintEngine::drawPixmap(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QRectF &amp;<db:emphasis>sr</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>sr</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(const QRectF &amp;r, const QPixmap &amp;pixmap, const QRectF &amp;sr) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawPixmap" role="function">QPaintEngine::drawPixmap(const QRectF &amp;r, const QPixmap &amp;pm, const QRectF &amp;sr)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPoints">
<db:title>[override virtual] void QRasterPaintEngine::drawPoints(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPoints</db:methodname>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoints(const QPointF *points, int pointCount) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawPoints" role="function">QPaintEngine::drawPoints(const QPointF *points, int pointCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPolygon">
<db:title>[override virtual] void QRasterPaintEngine::drawPolygon(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>, QPaintEngine::PolygonDrawMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPolygon</db:methodname>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPaintEngine::PolygonDrawMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolygon(const QPointF *points, int pointCount, QPaintEngine::PolygonDrawMode mode) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawPolygon" role="function">QPaintEngine::drawPolygon(const QPointF *points, int pointCount, QPaintEngine::PolygonDrawMode mode)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPolygon-1">
<db:title>[override virtual] void QRasterPaintEngine::drawPolygon(const QPoint *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>, QPaintEngine::PolygonDrawMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPolygon</db:methodname>
<db:methodparam>
<db:type>const QPoint *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPaintEngine::PolygonDrawMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolygon(const QPoint *points, int pointCount, QPaintEngine::PolygonDrawMode mode) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawPolygon-1" role="function">QPaintEngine::drawPolygon(const QPoint *points, int pointCount, QPaintEngine::PolygonDrawMode mode)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawRects">
<db:title>[override virtual] void QRasterPaintEngine::drawRects(const QRect *<db:emphasis>rects</db:emphasis>, int <db:emphasis>rectCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawRects</db:methodname>
<db:methodparam>
<db:type>const QRect *</db:type>
<db:parameter>rects</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rectCount</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRects(const QRect *rects, int rectCount) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawRects-1" role="function">QPaintEngine::drawRects(const QRect *rects, int rectCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawRects-1">
<db:title>[override virtual] void QRasterPaintEngine::drawRects(const QRectF *<db:emphasis>rects</db:emphasis>, int <db:emphasis>rectCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawRects</db:methodname>
<db:methodparam>
<db:type>const QRectF *</db:type>
<db:parameter>rects</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rectCount</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRects(const QRectF *rects, int rectCount) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawRects" role="function">QPaintEngine::drawRects(const QRectF *rects, int rectCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawStaticTextItem">
<db:title>[override virtual] void QRasterPaintEngine::drawStaticTextItem(QStaticTextItem *<db:emphasis>textItem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawStaticTextItem</db:methodname>
<db:methodparam>
<db:type>QStaticTextItem *</db:type>
<db:parameter>textItem</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawStaticTextItem(QStaticTextItem *textItem) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
</db:section>
<db:section xml:id="drawTextItem">
<db:title>[override virtual] void QRasterPaintEngine::drawTextItem(const QPointF &amp;<db:emphasis>p</db:emphasis>, const QTextItem &amp;<db:emphasis>textItem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawTextItem</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextItem &amp;</db:type>
<db:parameter>textItem</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawTextItem(const QPointF &amp;p, const QTextItem &amp;textItem) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawTextItem" role="function">QPaintEngine::drawTextItem(const QPointF &amp;p, const QTextItem &amp;textItem)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawTiledPixmap">
<db:title>[override virtual] void QRasterPaintEngine::drawTiledPixmap(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QPointF &amp;<db:emphasis>sr</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawTiledPixmap</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>sr</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawTiledPixmap(const QRectF &amp;r, const QPixmap &amp;pixmap, const QPointF &amp;sr) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawTiledPixmap" role="function">QPaintEngine::drawTiledPixmap(const QRectF &amp;rect, const QPixmap &amp;pixmap, const QPointF &amp;p)</db:link>.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>[override virtual] bool QRasterPaintEngine::end()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool end() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#end" role="function">QPaintEngine::end()</db:link>.</db:para>
</db:section>
<db:section xml:id="fillRect">
<db:title>[override virtual] void QRasterPaintEngine::fillRect(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRectF &amp;r, const QBrush &amp;brush) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
</db:section>
<db:section xml:id="fillRect-1">
<db:title>[override virtual] void QRasterPaintEngine::fillRect(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRectF &amp;r, const QColor &amp;color) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
</db:section>
<db:section xml:id="shouldDrawCachedGlyphs">
<db:title>[override virtual] bool QRasterPaintEngine::shouldDrawCachedGlyphs(QFontEngine *<db:emphasis>fontEngine</db:emphasis>, const QTransform &amp;<db:emphasis>m</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>shouldDrawCachedGlyphs</db:methodname>
<db:methodparam>
<db:type>QFontEngine *</db:type>
<db:parameter>fontEngine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool shouldDrawCachedGlyphs(QFontEngine *fontEngine, const QTransform &amp;m) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Indicates whether glyph caching is supported by the font engine <db:code role="parameter">fontEngine</db:code> with the given transform <db:code role="parameter">m</db:code> applied.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QSpan-typedef">
<db:title>QSpan</db:title>
<db:typedefsynopsis>
<db:typedefname>QSpan</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A struct equivalent to QT_FT_Span, containing a position (x, y), the span's length in pixels and its color/coverage (a value ranging from 0 to 255).</db:para>
</db:section>
</db:section>
</db:article>
