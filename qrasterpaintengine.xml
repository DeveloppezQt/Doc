<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRasterPaintEngine Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qrasterpaintengine.xml">QRasterPaintEngine</db:link> class enables hardware acceleration of painting operations in Qt for Embedded Linux.</db:para>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRasterPaintEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpaintengineex.xml" xlink:role="class">QPaintEngineEx</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRasterPaintEngine is part of <db:simplelist><db:member>qws</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Preliminary</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Note that this functionality is only available in Qt for Embedded Linux.</db:para>
<db:para>In Qt for Embedded Linux, painting is a pure software implementation. But starting with Qt 4.2, it is possible to add an accelerated graphics driver to take advantage of available hardware resources.</db:para>
<db:para>Hardware acceleration is accomplished by creating a custom screen driver, accelerating the copying from memory to the screen, and implementing a custom paint engine accelerating the various painting operations. Then a custom paint device and a custom window surface must be implemented to make Qt for Embedded Linux aware of the accelerated driver.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qrasterpaintengine.xml">QRasterPaintEngine</db:link> class does not support 8-bit images. Instead, they need to be converted to a supported format, such as <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32_Premultiplied</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRasterPaintEngine">
<db:title>[since 4.5] QRasterPaintEngine::QRasterPaintEngine(QPaintDevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Creates a raster based paint engine for operating on the given <db:code role="parameter">device</db:code>, with the complete set of <db:link xlink:href="qpaintengine.xml#PaintEngineFeature-enum">paint engine features and capabilities</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="dtor.QRasterPaintEngine">
<db:title>[virtual noexcept] QRasterPaintEngine::~QRasterPaintEngine()</db:title>
<db:para>Destroys this paint engine.</db:para>
</db:section>
<db:section xml:id="begin">
<db:title>[override virtual] bool QRasterPaintEngine::begin(QPaintDevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#begin" role="function">QPaintEngine::begin(QPaintDevice *pdev)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawEllipse">
<db:title>[override virtual] void QRasterPaintEngine::drawEllipse(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawEllipse-1" role="function">QPaintEngine::drawEllipse(const QRectF &amp;rect)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawImage">
<db:title>[override virtual] void QRasterPaintEngine::drawImage(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QImage &amp;<db:emphasis>img</db:emphasis>, const QRectF &amp;<db:emphasis>sr</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawImage" role="function">QPaintEngine::drawImage(const QRectF &amp;rectangle, const QImage &amp;image, const QRectF &amp;sr, Qt::ImageConversionFlags flags)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawLines">
<db:title>[override virtual] void QRasterPaintEngine::drawLines(const QLine *<db:emphasis>lines</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawLines-1" role="function">QPaintEngine::drawLines(const QLine *lines, int lineCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawLines-1">
<db:title>[override virtual] void QRasterPaintEngine::drawLines(const QLineF *<db:emphasis>lines</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawLines" role="function">QPaintEngine::drawLines(const QLineF *lines, int lineCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPixmap">
<db:title>[override virtual] void QRasterPaintEngine::drawPixmap(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QRectF &amp;<db:emphasis>sr</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawPixmap" role="function">QPaintEngine::drawPixmap(const QRectF &amp;r, const QPixmap &amp;pm, const QRectF &amp;sr)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPoints">
<db:title>[override virtual] void QRasterPaintEngine::drawPoints(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawPoints-1" role="function">QPaintEngine::drawPoints(const QPointF *points, int pointCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPolygon">
<db:title>[override virtual] void QRasterPaintEngine::drawPolygon(const QPoint *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>, QPaintEngine::PolygonDrawMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawPolygon-1" role="function">QPaintEngine::drawPolygon(const QPoint *points, int pointCount, QPaintEngine::PolygonDrawMode mode)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPolygon-1">
<db:title>[override virtual] void QRasterPaintEngine::drawPolygon(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>, QPaintEngine::PolygonDrawMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawPolygon" role="function">QPaintEngine::drawPolygon(const QPointF *points, int pointCount, QPaintEngine::PolygonDrawMode mode)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawRects">
<db:title>[override virtual] void QRasterPaintEngine::drawRects(const QRect *<db:emphasis>rects</db:emphasis>, int <db:emphasis>rectCount</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawRects-1" role="function">QPaintEngine::drawRects(const QRect *rects, int rectCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawRects-1">
<db:title>[override virtual] void QRasterPaintEngine::drawRects(const QRectF *<db:emphasis>rects</db:emphasis>, int <db:emphasis>rectCount</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawRects" role="function">QPaintEngine::drawRects(const QRectF *rects, int rectCount)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawStaticTextItem">
<db:title>[override virtual] void QRasterPaintEngine::drawStaticTextItem(QStaticTextItem *<db:emphasis>textItem</db:emphasis>)</db:title>
</db:section>
<db:section xml:id="drawTextItem">
<db:title>[override virtual] void QRasterPaintEngine::drawTextItem(const QPointF &amp;<db:emphasis>p</db:emphasis>, const QTextItem &amp;<db:emphasis>textItem</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawTextItem" role="function">QPaintEngine::drawTextItem(const QPointF &amp;p, const QTextItem &amp;textItem)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawTiledPixmap">
<db:title>[override virtual] void QRasterPaintEngine::drawTiledPixmap(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QPointF &amp;<db:emphasis>sr</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#drawTiledPixmap" role="function">QPaintEngine::drawTiledPixmap(const QRectF &amp;rect, const QPixmap &amp;pixmap, const QPointF &amp;p)</db:link>.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>[override virtual] bool QRasterPaintEngine::end()</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintengine.xml#end" role="function">QPaintEngine::end()</db:link>.</db:para>
</db:section>
<db:section xml:id="fillRect">
<db:title>[override virtual] void QRasterPaintEngine::fillRect(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
</db:section>
<db:section xml:id="fillRect-1">
<db:title>[override virtual] void QRasterPaintEngine::fillRect(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
</db:section>
<db:section xml:id="shouldDrawCachedGlyphs">
<db:title>[override virtual] bool QRasterPaintEngine::shouldDrawCachedGlyphs(QFontEngine *<db:emphasis>fontEngine</db:emphasis>, const QTransform &amp;<db:emphasis>m</db:emphasis>) const</db:title>
<db:para>Indicates whether glyph caching is supported by the font engine <db:code role="parameter">fontEngine</db:code> with the given transform <db:code role="parameter">m</db:code> applied.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QSpan-typedef">
<db:title>QSpan</db:title>
<db:para>A struct equivalent to QT_FT_Span, containing a position (x, y), the span's length in pixels and its color/coverage (a value ranging from 0 to 255).</db:para>
</db:section>
</db:section>
</db:article>
