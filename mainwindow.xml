<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Application Main Window</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creating the application window.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview-of-the-main-window-classes">
<db:title>Overview of the Main Window Classes</db:title>
<db:para>These classes provide everything you need for a typical modern main application window, like the main window itself, menu and tool bars, a status bar, etc.</db:para>
</db:section>
<db:section xml:id="the-main-window-classes">
<db:title>The Main Window Classes</db:title>
<db:para>Qt provides the following classes for managing main windows and associated user interface components:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QMainWindow is the central class around which applications can be built. Along with the companion QDockWidget and QToolBar classes, it represents the top-level user interface of the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>QDockWidget provides a widget that can be used to create detachable tool palettes or helper windows. Dock widgets keep track of their own properties, and they can be moved, closed, and floated as external windows.</db:para>
</db:listitem>
<db:listitem>
<db:para>QToolBar provides a generic toolbar widget that can hold a number of different action-related widgets, such as buttons, drop-down menus, comboboxes, and spin boxes. The emphasis on a unified action model in Qt means that toolbars cooperate well with menus and keyboard shortcuts.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="example-code">
<db:title>Example Code</db:title>
<db:para>Using QMainWindow is straightforward. Generally, we subclass QMainWindow and set up menus, toolbars, and dock widgets inside the QMainWindow constructor.</db:para>
<db:para>To add a menu bar to the main window, we simply create the menus, and add them to the main window's menu bar. Note that the QMainWindow::menuBar() function will automatically create the menu bar the first time it is called. You can also call QMainWindow::setMenuBar() to use a custom menu bar in the main window.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    ...
    newAct = new QAction(tr(&quot;&amp;amp;New&quot;), this);
    newAct-&amp;gt;setShortcuts(QKeySequence::New);
    newAct-&amp;gt;setStatusTip(tr(&quot;Create a new file&quot;));
    connect(newAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::newFile);

    openAct = new QAction(tr(&quot;&amp;amp;Open...&quot;), this);
    openAct-&amp;gt;setShortcuts(QKeySequence::Open);
    openAct-&amp;gt;setStatusTip(tr(&quot;Open an existing file&quot;));
    connect(openAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::open);
    ...
</db:programlisting>
<db:para>Once actions have been created, we can add them to the main window components. To begin with, we add them to the pop-up menus:</db:para>
<db:programlisting language="cpp">    fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));
    fileMenu-&amp;gt;addAction(newAct);
    fileMenu-&amp;gt;addAction(openAct);
    ...
    fileMenu-&amp;gt;addSeparator();
    ...
</db:programlisting>
<db:para>The QToolBar and QMenu classes use Qt's action system to provide a consistent API. In the above code, some existing actions were added to the file menu with the QMenu::addAction() function. QToolBar also provides this function, making it easy to reuse actions in different parts of the main window. This avoids unnecessary duplication of work.</db:para>
<db:para>We create a toolbar as a child of the main window, and add the desired actions to it:</db:para>
<db:programlisting language="cpp">fileToolBar = addToolBar(tr(&quot;File&quot;));
fileToolBar-&amp;gt;addAction(newAct);
fileToolBar-&amp;gt;addAction(openAct);
    ...
fileToolbar-&amp;gt;setAllowedAreas(Qt::TopToolBarArea | Qt::BottomToolBarArea);
addToolBar(Qt::TopToolBarArea, fileToolbar);
</db:programlisting>
<db:para>In this example, the toolbar is restricted to the top and bottom toolbar areas of the main window, and is initially placed in the top tool bar area. We can see that the actions specified by newAct and openAct will be displayed both on the toolbar and in the file menu.</db:para>
<db:para>QDockWidget is used in a similar way to QToolBar. We create a dock widget as a child of the main window, and add widgets as children of the dock widget:</db:para>
<db:programlisting language="cpp">    contentsWindow = new QDockWidget(tr(&quot;Table of Contents&quot;), this);
    contentsWindow-&amp;gt;setAllowedAreas(Qt::LeftDockWidgetArea
                                  | Qt::RightDockWidgetArea);
    addDockWidget(Qt::LeftDockWidgetArea, contentsWindow);

    headingList = new QListWidget(contentsWindow);
    contentsWindow-&amp;gt;setWidget(headingList);
</db:programlisting>
<db:para>In this example, the dock widget can only be placed in the left and right dock areas, and it is initially placed in the left dock area.</db:para>
<db:para>The QMainWindow API allows the programmer to customize which dock widget areas occupy the four corners of the dock widget area. If required, the default can be changed with the QMainWindow::setCorner() function:</db:para>
<db:programlisting language="cpp">setCorner(Qt::TopLeftCorner, Qt::LeftDockWidgetArea);
setCorner(Qt::BottomLeftCorner, Qt::LeftDockWidgetArea);
setCorner(Qt::TopRightCorner, Qt::RightDockWidgetArea);
setCorner(Qt::BottomRightCorner, Qt::RightDockWidgetArea);
</db:programlisting>
<db:para>The following diagram shows the configuration produced by the above code. Note that the left and right dock widgets will occupy the top and bottom corners of the main window in this layout.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mainwindow-docks-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Once all of the main window components have been set up, the central widget is created and installed by using code similar to the following:</db:para>
<db:programlisting language="cpp">QWidget *centralWidget = new QWidget(this);
setCentralWidget(centralWidget);
</db:programlisting>
<db:para>The central widget can be any subclass of QWidget.</db:para>
</db:section>
</db:article>
