<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextCodec Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> class provides conversions between text encodings.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextCodec</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextCodec is part of <db:simplelist><db:member>i18n</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt uses Unicode to store, draw and manipulate strings. In many situations you may wish to deal with data that uses a different encoding. For example, most Japanese documents are still stored in Shift-JIS or ISO 2022-JP, while Russian users often have their documents in KOI8-R or Windows-1251.</db:para>
<db:para>Qt provides a set of <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> classes to help with converting non-Unicode formats to and from Unicode. You can also create your own codec classes.</db:para>
<db:para>The supported encodings are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="codec-big5.xml">Big5</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-big5hkscs.xml">Big5-HKSCS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>CP949</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-eucjp.xml">EUC-JP</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-euckr.xml">EUC-KR</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-gbk.xml">GB18030</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>HP-ROMAN8</db:para>
</db:listitem>
<db:listitem>
<db:para>IBM 850</db:para>
</db:listitem>
<db:listitem>
<db:para>IBM 866</db:para>
</db:listitem>
<db:listitem>
<db:para>IBM 874</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codecs-jis.xml">ISO 2022-JP</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>ISO 8859-1 to 10</db:para>
</db:listitem>
<db:listitem>
<db:para>ISO 8859-13 to 16</db:para>
</db:listitem>
<db:listitem>
<db:para>Iscii-Bng, Dev, Gjr, Knd, Mlm, Ori, Pnj, Tlg, and Tml</db:para>
</db:listitem>
<db:listitem>
<db:para>KOI8-R</db:para>
</db:listitem>
<db:listitem>
<db:para>KOI8-U</db:para>
</db:listitem>
<db:listitem>
<db:para>Macintosh</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-sjis.xml">Shift-JIS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>TIS-620</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-tscii.xml">TSCII</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-8</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16BE</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16LE</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32BE</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32LE</db:para>
</db:listitem>
<db:listitem>
<db:para>Windows-1250 to 1258</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If Qt is compiled with ICU support enabled, most codecs supported by ICU will also be available to the application.</db:para>
<db:para><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link>s can be used as follows to convert some locally encoded string to Unicode. Suppose you have some string encoded in Russian KOI8-R encoding, and want to convert it to Unicode. The simple way to do it is like this:</db:para>
<db:programlisting language="cpp">QByteArray encodedString = &quot;...&quot;;
QTextCodec *codec = QTextCodec::codecForName(&quot;KOI8-R&quot;);
QString string = codec-&amp;gt;toUnicode(encodedString);
</db:programlisting>
<db:para>After this, string holds the text converted to Unicode. Converting a string from Unicode to the local encoding is just as easy:</db:para>
<db:programlisting language="cpp">QString string = &quot;...&quot;;
QTextCodec *codec = QTextCodec::codecForName(&quot;KOI8-R&quot;);
QByteArray encodedString = codec-&amp;gt;fromUnicode(string);
</db:programlisting>
<db:para>To read or write files in various encodings, use <db:link xlink:href="qtextstream.xml">QTextStream</db:link> and its <db:link xlink:href="qtextstream.xml#setCodec">setCodec</db:link>() function. See the <db:link xlink:href="qtwidgets-tools-codecs-example.xml">Codecs</db:link> example for an application of <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> to file I/O.</db:para>
<db:para>Some care must be taken when trying to convert the data in chunks, for example, when receiving it over a network. In such cases it is possible that a multi-byte character will be split over two chunks. At best this might result in the loss of a character and at worst cause the entire conversion to fail.</db:para>
<db:para>The approach to use in these situations is to create a <db:link xlink:href="qtextdecoder.xml">QTextDecoder</db:link> object for the codec and use this <db:link xlink:href="qtextdecoder.xml">QTextDecoder</db:link> for the whole decoding process, as shown below:</db:para>
<db:programlisting language="cpp">QTextCodec *codec = QTextCodec::codecForName(&quot;Shift-JIS&quot;);
QTextDecoder *decoder = codec-&amp;gt;makeDecoder();

QString string;
while (new_data_available()) {
    QByteArray chunk = get_new_data();
    string += decoder-&amp;gt;toUnicode(chunk);
}
delete decoder;
</db:programlisting>
<db:para>The <db:link xlink:href="qtextdecoder.xml">QTextDecoder</db:link> object maintains state between chunks and therefore works correctly even if a multi-byte character is split between chunks.</db:para>
<db:section xml:id="creating-your-own-codec-class">
<db:title>Creating Your Own Codec Class</db:title>
<db:para>Support for new text encodings can be added to Qt by creating <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> subclasses.</db:para>
<db:para>The pure virtual functions describe the encoder to the system and the coder is used as required in the different text file formats supported by <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, and under X11, for the locale-specific character input and output.</db:para>
<db:para>To add support for another encoding to Qt, make a subclass of <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> and implement the functions listed in the table below.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Function</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextcodec.xml#name">name</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns the official name for the encoding. If the encoding is listed in the <db:link xlink:href="http://www.iana.org/assignments/character-sets/character-sets.xml">IANA character-sets encoding file</db:link>, the name should be the preferred MIME name for the encoding.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextcodec.xml#aliases">aliases</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns a list of alternative names for the encoding. <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> provides a default implementation that returns an empty list. For example, &quot;ISO-8859-1&quot; has &quot;latin1&quot;, &quot;CP819&quot;, &quot;IBM819&quot;, and &quot;iso-ir-100&quot; as aliases.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextcodec.xml#mibEnum">mibEnum</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Return the MIB enum for the encoding if it is listed in the <db:link xlink:href="http://www.iana.org/assignments/character-sets/character-sets.xml">IANA character-sets encoding file</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextcodec.xml#convertToUnicode">convertToUnicode</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Converts an 8-bit character string to Unicode.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextcodec.xml#convertFromUnicode">convertFromUnicode</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Converts a Unicode string to an 8-bit character string.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:member>
<db:member><db:link xlink:href="qtextdecoder.xml">QTextDecoder</db:link></db:member>
<db:member><db:link xlink:href="qtextencoder.xml">QTextEncoder</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-tools-codecs-example.xml">Text Codecs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ConversionFlag-enum">
<db:title>enum QTextCodec::ConversionFlag</db:title>
<db:bridgehead renderas="sect2">flags QTextCodec::ConversionFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>ConversionFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>DefaultConversion</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConvertInvalidToNull</db:enumidentifier>
<db:enumvalue>0x80000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IgnoreHeader</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FreeFunction</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QTextCodec::ConversionFlags</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:emphasis>::DefaultConversion</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No flag is set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:emphasis>::ConvertInvalidToNull</db:code></db:para>
</db:td>
<db:td><db:code>0x80000000</db:code></db:td>
<db:td>
<db:para>If this flag is set, each invalid input character is output as a null character.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:emphasis>::IgnoreHeader</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Ignore any Unicode byte-order mark and don't generate any.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ConversionFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ConversionFlag&gt;. </db:code>It stores an OR combination of <db:code>ConversionFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextCodec-1">
<db:title>[protected] QTextCodec::QTextCodec()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextCodec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link>, and gives it the highest precedence. The <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> should always be constructed on the heap (i.e. with new). Qt takes ownership and will delete it when the application terminates.</db:para>
</db:section>
<db:section xml:id="dtor.QTextCodec">
<db:title>[virtual protected] QTextCodec::~QTextCodec()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QTextCodec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextCodec()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">non-reentrant</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link>. Note that you should not delete codecs yourself: once created they become Qt's responsibility.</db:para>
<db:warning>
<db:para>This function is not <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:warning></db:section>
<db:section xml:id="aliases">
<db:title>[virtual] QList&lt;QByteArray&gt; QTextCodec::aliases() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>aliases</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; aliases() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Subclasses can return a number of aliases for the codec in question.</db:para>
<db:para>Standard aliases for codecs can be found in the <db:link xlink:href="http://www.iana.org/assignments/character-sets/character-sets.xml">IANA character-sets encoding file</db:link>.</db:para>
</db:section>
<db:section xml:id="availableCodecs">
<db:title>[static] QList&lt;QByteArray&gt; QTextCodec::availableCodecs()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>availableCodecs</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; availableCodecs()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all available codecs, by name. Call <db:link xlink:href="qtextcodec.xml#codecForName">QTextCodec::codecForName</db:link>() to obtain the <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> for the name.</db:para>
<db:para>The list may contain many mentions of the same codec if the codec has aliases.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#availableMibs">availableMibs</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml#aliases">aliases</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableMibs">
<db:title>[static] QList&lt;int&gt; QTextCodec::availableMibs()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;int&gt;</db:type>
<db:methodname>availableMibs</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;int&gt; availableMibs()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of MIBs for all available codecs. Call <db:link xlink:href="qtextcodec.xml#codecForMib">QTextCodec::codecForMib</db:link>() to obtain the <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> for the MIB.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#availableCodecs">availableCodecs</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml#mibEnum">mibEnum</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canEncode">
<db:title>bool QTextCodec::canEncode(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canEncode</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canEncode(QChar ch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the Unicode character <db:code role="parameter">ch</db:code> can be fully encoded with this codec; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="canEncode-1">
<db:title>bool QTextCodec::canEncode(const QString &amp;<db:emphasis>s</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canEncode</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canEncode(const QString &amp;s) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para><db:code role="parameter">s</db:code> contains the string being tested for encode-ability.</db:para>
</db:section>
<db:section xml:id="canEncode-2">
<db:title>[since 5.10] bool QTextCodec::canEncode(QStringView <db:emphasis>s</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canEncode</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canEncode(QStringView s) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the Unicode string <db:code role="parameter">s</db:code> can be fully encoded with this codec; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="codecForHtml">
<db:title>[static, since 4.4] QTextCodec *QTextCodec::codecForHtml(const QByteArray &amp;<db:emphasis>ba</db:emphasis>, QTextCodec *<db:emphasis>defaultCodec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codecForHtml</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCodec *</db:type>
<db:parameter>defaultCodec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codecForHtml(const QByteArray &amp;ba, QTextCodec *defaultCodec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Tries to detect the encoding of the provided snippet of HTML in the given byte array, <db:code role="parameter">ba</db:code>, by checking the BOM (Byte Order Mark) and the content-type meta header and returns a <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> instance that is capable of decoding the html to unicode. If the codec cannot be detected from the content provided, <db:code role="parameter">defaultCodec</db:code> is returned.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#codecForUtfText">codecForUtfText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="codecForHtml-1">
<db:title>[static] QTextCodec *QTextCodec::codecForHtml(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codecForHtml</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codecForHtml(const QByteArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Tries to detect the encoding of the provided snippet of HTML in the given byte array, <db:code role="parameter">ba</db:code>, by checking the BOM (Byte Order Mark) and the content-type meta header and returns a <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> instance that is capable of decoding the html to unicode. If the codec cannot be detected, this overload returns a Latin-1 <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link>.</db:para>
</db:section>
<db:section xml:id="codecForLocale">
<db:title>[static] QTextCodec *QTextCodec::codecForLocale()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codecForLocale</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codecForLocale()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the codec most suitable for this locale.</db:para>
<db:para>On Windows, the codec will be based on a system locale. On Unix systems, the codec will might fall back to using the <db:emphasis>iconv</db:emphasis> library if no builtin codec for the locale can be found.</db:para>
<db:para>Note that in these cases the codec's name will be &quot;System&quot;.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#setCodecForLocale">setCodecForLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="codecForMib">
<db:title>[static] QTextCodec *QTextCodec::codecForMib(int <db:emphasis>mib</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codecForMib</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mib</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codecForMib(int mib)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> which matches the <db:link xlink:href="qtextcodec.xml#mibEnum">MIBenum</db:link> <db:code role="parameter">mib</db:code>.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="codecForName">
<db:title>[static] QTextCodec *QTextCodec::codecForName(const QByteArray &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codecForName</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codecForName(const QByteArray &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches all installed <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> objects and returns the one which best matches <db:code role="parameter">name</db:code>; the match is case-insensitive. Returns 0 if no codec matching the name <db:code role="parameter">name</db:code> could be found.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="codecForName-1">
<db:title>[static] QTextCodec *QTextCodec::codecForName(const char *<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codecForName</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codecForName(const char *name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches all installed <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> objects and returns the one which best matches <db:code role="parameter">name</db:code>; the match is case-insensitive. Returns 0 if no codec matching the name <db:code role="parameter">name</db:code> could be found.</db:para>
</db:section>
<db:section xml:id="codecForUtfText">
<db:title>[static, since 4.6] QTextCodec *QTextCodec::codecForUtfText(const QByteArray &amp;<db:emphasis>ba</db:emphasis>, QTextCodec *<db:emphasis>defaultCodec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codecForUtfText</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCodec *</db:type>
<db:parameter>defaultCodec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codecForUtfText(const QByteArray &amp;ba, QTextCodec *defaultCodec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Tries to detect the encoding of the provided snippet <db:code role="parameter">ba</db:code> by using the BOM (Byte Order Mark) and returns a <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> instance that is capable of decoding the text to unicode. This function can detect one of the following codecs:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>UTF-32 Little Endian</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32 Big Endian</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16 Little Endian</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16 Big Endian</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-8</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the codec cannot be detected from the content provided, <db:code role="parameter">defaultCodec</db:code> is returned.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#codecForHtml">codecForHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="codecForUtfText-1">
<db:title>[static] QTextCodec *QTextCodec::codecForUtfText(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codecForUtfText</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codecForUtfText(const QByteArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Tries to detect the encoding of the provided snippet <db:code role="parameter">ba</db:code> by using the BOM (Byte Order Mark) and returns a <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> instance that is capable of decoding the text to unicode. This function can detect one of the following codecs:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>UTF-32 Little Endian</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32 Big Endian</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16 Little Endian</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16 Big Endian</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-8</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the codec cannot be detected from the content provided, this overload returns a Latin-1 <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#codecForHtml">codecForHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="convertFromUnicode">
<db:title>[pure virtual protected] QByteArray QTextCodec::convertFromUnicode(const QChar *<db:emphasis>input</db:emphasis>, int <db:emphasis>number</db:emphasis>, QTextCodec::ConverterState *<db:emphasis>state</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>convertFromUnicode</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>number</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCodec::ConverterState *</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray convertFromUnicode(const QChar *input, int number, QTextCodec::ConverterState *state) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> subclasses must reimplement this function.</db:para>
<db:para>Converts the first <db:code role="parameter">number</db:code> of characters from the <db:code role="parameter">input</db:code> array from Unicode to the encoding of the subclass, and returns the result in a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para><db:code role="parameter">state</db:code> can be 0 in which case the conversion is stateless and default conversion rules should be used. If state is not 0, the codec should save the state after the conversion in <db:code role="parameter">state</db:code>, and adjust the remainingChars and invalidChars members of the struct.</db:para>
</db:section>
<db:section xml:id="convertToUnicode">
<db:title>[pure virtual protected] QString QTextCodec::convertToUnicode(const char *<db:emphasis>chars</db:emphasis>, int <db:emphasis>len</db:emphasis>, QTextCodec::ConverterState *<db:emphasis>state</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>convertToUnicode</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>chars</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCodec::ConverterState *</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString convertToUnicode(const char *chars, int len, QTextCodec::ConverterState *state) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> subclasses must reimplement this function.</db:para>
<db:para>Converts the first <db:code role="parameter">len</db:code> characters of <db:code role="parameter">chars</db:code> from the encoding of the subclass to Unicode, and returns the result in a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para><db:code role="parameter">state</db:code> can be 0, in which case the conversion is stateless and default conversion rules should be used. If state is not 0, the codec should save the state after the conversion in <db:code role="parameter">state</db:code>, and adjust the remainingChars and invalidChars members of the struct.</db:para>
</db:section>
<db:section xml:id="fromUnicode">
<db:title>QByteArray QTextCodec::fromUnicode(const QString &amp;<db:emphasis>str</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>fromUnicode</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray fromUnicode(const QString &amp;str) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts <db:code role="parameter">str</db:code> from Unicode to the encoding of this codec, and returns the result in a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
</db:section>
<db:section xml:id="fromUnicode-1">
<db:title>[since 5.10] QByteArray QTextCodec::fromUnicode(QStringView <db:emphasis>str</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>fromUnicode</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray fromUnicode(QStringView str) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts <db:code role="parameter">str</db:code> from Unicode to the encoding of this codec, and returns the result in a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="fromUnicode-2">
<db:title>QByteArray QTextCodec::fromUnicode(const QChar *<db:emphasis>input</db:emphasis>, int <db:emphasis>number</db:emphasis>, QTextCodec::ConverterState *<db:emphasis>state</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>fromUnicode</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>number</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCodec::ConverterState *</db:type>
<db:parameter>state</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray fromUnicode(const QChar *input, int number, QTextCodec::ConverterState *state) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the first <db:code role="parameter">number</db:code> of characters from the <db:code role="parameter">input</db:code> array from Unicode to the encoding of this codec, and returns the result in a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>The <db:code role="parameter">state</db:code> of the convertor used is updated.</db:para>
</db:section>
<db:section xml:id="makeDecoder">
<db:title>[since 4.7] QTextDecoder *QTextCodec::makeDecoder(QTextCodec::ConversionFlags <db:emphasis>flags</db:emphasis> = DefaultConversion) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextDecoder *</db:type>
<db:methodname>makeDecoder</db:methodname>
<db:methodparam>
<db:type>QTextCodec::ConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>DefaultConversion</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDecoder * makeDecoder(QTextCodec::ConversionFlags flags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qtextdecoder.xml">QTextDecoder</db:link> with a specified <db:code role="parameter">flags</db:code> to decode chunks of char * data to create chunks of Unicode data.</db:para>
<db:para>The caller is responsible for deleting the returned object.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
</db:section>
<db:section xml:id="makeEncoder">
<db:title>[since 4.7] QTextEncoder *QTextCodec::makeEncoder(QTextCodec::ConversionFlags <db:emphasis>flags</db:emphasis> = DefaultConversion) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextEncoder *</db:type>
<db:methodname>makeEncoder</db:methodname>
<db:methodparam>
<db:type>QTextCodec::ConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>DefaultConversion</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextEncoder * makeEncoder(QTextCodec::ConversionFlags flags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qtextencoder.xml">QTextEncoder</db:link> with a specified <db:code role="parameter">flags</db:code> to encode chunks of Unicode data as char * data.</db:para>
<db:para>The caller is responsible for deleting the returned object.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
</db:section>
<db:section xml:id="mibEnum">
<db:title>[pure virtual] int QTextCodec::mibEnum() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>mibEnum</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int mibEnum() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Subclasses of <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> must reimplement this function. It returns the MIBenum (see <db:link xlink:href="http://www.iana.org/assignments/character-sets/character-sets.xml">IANA character-sets encoding file</db:link> for more information). It is important that each <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> subclass returns the correct unique value for this function.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>[pure virtual] QByteArray QTextCodec::name() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray name() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> subclasses must reimplement this function. It returns the name of the encoding supported by the subclass.</db:para>
<db:para>If the codec is registered as a character set in the <db:link xlink:href="http://www.iana.org/assignments/character-sets/character-sets.xml">IANA character-sets encoding file</db:link> this method should return the preferred mime name for the codec if defined, otherwise its name.</db:para>
</db:section>
<db:section xml:id="setCodecForLocale">
<db:title>[static] void QTextCodec::setCodecForLocale(QTextCodec *<db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setCodecForLocale</db:methodname>
<db:methodparam>
<db:type>QTextCodec *</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCodecForLocale(QTextCodec *c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">non-reentrant</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the codec to <db:code role="parameter">c</db:code>; this will be returned by <db:link xlink:href="qtextcodec.xml#codecForLocale">codecForLocale</db:link>(). If <db:code role="parameter">c</db:code> is a null pointer, the codec is reset to the default.</db:para>
<db:para>This might be needed for some applications that want to use their own mechanism for setting the locale.</db:para>
<db:warning>
<db:para>This function is not <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:warning><db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#codecForLocale">codecForLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUnicode">
<db:title>QString QTextCodec::toUnicode(const QByteArray &amp;<db:emphasis>a</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toUnicode</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toUnicode(const QByteArray &amp;a) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts <db:code role="parameter">a</db:code> from the encoding of this codec to Unicode, and returns the result in a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:section>
<db:section xml:id="toUnicode-1">
<db:title>QString QTextCodec::toUnicode(const char *<db:emphasis>chars</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toUnicode</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>chars</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toUnicode(const char *chars) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para><db:code role="parameter">chars</db:code> contains the source characters.</db:para>
</db:section>
<db:section xml:id="toUnicode-2">
<db:title>QString QTextCodec::toUnicode(const char *<db:emphasis>input</db:emphasis>, int <db:emphasis>size</db:emphasis>, QTextCodec::ConverterState *<db:emphasis>state</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toUnicode</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCodec::ConverterState *</db:type>
<db:parameter>state</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toUnicode(const char *input, int size, QTextCodec::ConverterState *state) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the first <db:code role="parameter">size</db:code> characters from the <db:code role="parameter">input</db:code> from the encoding of this codec to Unicode, and returns the result in a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>The <db:code role="parameter">state</db:code> of the convertor used is updated.</db:para>
</db:section>
</db:section>
</db:article>
