<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextCodec Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> class provides conversions between text encodings.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextCodec</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextCodec is part of <db:simplelist><db:member>i18n</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt uses Unicode to store, draw and manipulate strings. In many situations you may wish to deal with data that uses a different encoding. For example, most Japanese documents are still stored in Shift-JIS or ISO 2022-JP, while Russian users often have their documents in KOI8-R or Windows-1251.</db:para>
<db:para>Qt provides a set of <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> classes to help with converting non-Unicode formats to and from Unicode. You can also create your own codec classes.</db:para>
<db:para>The supported encodings are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="codec-big5.xml">Big5</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-big5hkscs.xml">Big5-HKSCS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>CP949</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-eucjp.xml">EUC-JP</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-euckr.xml">EUC-KR</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-gbk.xml">GB18030</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>HP-ROMAN8</db:para>
</db:listitem>
<db:listitem>
<db:para>IBM 850</db:para>
</db:listitem>
<db:listitem>
<db:para>IBM 866</db:para>
</db:listitem>
<db:listitem>
<db:para>IBM 874</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codecs-jis.xml">ISO 2022-JP</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>ISO 8859-1 to 10</db:para>
</db:listitem>
<db:listitem>
<db:para>ISO 8859-13 to 16</db:para>
</db:listitem>
<db:listitem>
<db:para>Iscii-Bng, Dev, Gjr, Knd, Mlm, Ori, Pnj, Tlg, and Tml</db:para>
</db:listitem>
<db:listitem>
<db:para>KOI8-R</db:para>
</db:listitem>
<db:listitem>
<db:para>KOI8-U</db:para>
</db:listitem>
<db:listitem>
<db:para>Macintosh</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-sjis.xml">Shift-JIS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>TIS-620</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="codec-tscii.xml">TSCII</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-8</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16BE</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16LE</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32BE</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32LE</db:para>
</db:listitem>
<db:listitem>
<db:para>Windows-1250 to 1258</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If Qt is compiled with ICU support enabled, most codecs supported by ICU will also be available to the application.</db:para>
<db:para><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link>s can be used as follows to convert some locally encoded string to Unicode. Suppose you have some string encoded in Russian KOI8-R encoding, and want to convert it to Unicode. The simple way to do it is like this:</db:para>
<db:programlisting language="cpp">QByteArray encodedString = &quot;...&quot;;
QTextCodec *codec = QTextCodec::codecForName(&quot;KOI8-R&quot;);
QString string = codec-&gt;toUnicode(encodedString);
</db:programlisting>
<db:para>After this, string holds the text converted to Unicode. Converting a string from Unicode to the local encoding is just as easy:</db:para>
<db:programlisting language="cpp">QString string = &quot;...&quot;;
QTextCodec *codec = QTextCodec::codecForName(&quot;KOI8-R&quot;);
QByteArray encodedString = codec-&gt;fromUnicode(string);
</db:programlisting>
<db:para>To read or write files in various encodings, use <db:link xlink:href="qtextstream.xml">QTextStream</db:link> and its <db:link xlink:href="">setCodec()</db:link> function. See the Codecs example for an application of <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> to file I/O.</db:para>
<db:para>Some care must be taken when trying to convert the data in chunks, for example, when receiving it over a network. In such cases it is possible that a multi-byte character will be split over two chunks. At best this might result in the loss of a character and at worst cause the entire conversion to fail.</db:para>
<db:para>The approach to use in these situations is to create a QTextDecoder object for the codec and use this QTextDecoder for the whole decoding process, as shown below:</db:para>
<db:programlisting language="cpp">QTextCodec *codec = QTextCodec::codecForName(&quot;Shift-JIS&quot;);
QTextDecoder *decoder = codec-&gt;makeDecoder();

QString string;
while (new_data_available()) {
    QByteArray chunk = get_new_data();
    string += decoder-&gt;toUnicode(chunk);
}
delete decoder;
</db:programlisting>
<db:para>The QTextDecoder object maintains state between chunks and therefore works correctly even if a multi-byte character is split between chunks.</db:para>
<db:section xml:id="creating-your-own-codec-class">
<db:title>Creating Your Own Codec Class</db:title>
<db:para>Support for new text encodings can be added to Qt by creating <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> subclasses.</db:para>
<db:para>The pure virtual functions describe the encoder to the system and the coder is used as required in the different text file formats supported by <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, and under X11, for the locale-specific character input and output.</db:para>
<db:para>To add support for another encoding to Qt, make a subclass of <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> and implement the functions listed in the table below.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Function</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>name()</db:para>
</db:td>
<db:td>
<db:para>Returns the official name for the encoding. If the encoding is listed in the <db:link xlink:href="http://www.iana.org/assignments/character-sets/character-sets.xml">IANA character-sets encoding file</db:link>, the name should be the preferred MIME name for the encoding.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>aliases()</db:para>
</db:td>
<db:td>
<db:para>Returns a list of alternative names for the encoding. <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> provides a default implementation that returns an empty list. For example, &quot;ISO-8859-1&quot; has &quot;latin1&quot;, &quot;CP819&quot;, &quot;IBM819&quot;, and &quot;iso-ir-100&quot; as aliases.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="">mibEnum()</db:link></db:para>
</db:td>
<db:td>
<db:para>Return the MIB enum for the encoding if it is listed in the <db:link xlink:href="http://www.iana.org/assignments/character-sets/character-sets.xml">IANA character-sets encoding file</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>convertToUnicode()</db:para>
</db:td>
<db:td>
<db:para>Converts an 8-bit character string to Unicode.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>convertFromUnicode()</db:para>
</db:td>
<db:td>
<db:para>Converts a Unicode string to an 8-bit character string.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:member>
<db:member>QTextDecoder</db:member>
<db:member>QTextEncoder</db:member>
<db:member><db:link xlink:href="">Text Codecs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ConversionFlag-enum">
<db:title>enum QTextCodec::ConversionFlag</db:title>
<db:bridgehead renderas="sect2">flags QTextCodec::ConversionFlags</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:emphasis>::DefaultConversion</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No flag is set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:emphasis>::ConvertInvalidToNull</db:code></db:para>
</db:td>
<db:td><db:code>0x80000000</db:code></db:td>
<db:td>
<db:para>If this flag is set, each invalid input character is output as a null character.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:emphasis>::IgnoreHeader</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Ignore any Unicode byte-order mark and don't generate any.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ConversionFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ConversionFlag&gt;. </db:code>It stores an OR combination of <db:code>ConversionFlag</db:code> values.</db:para>
</db:section>
</db:section>
</db:article>
