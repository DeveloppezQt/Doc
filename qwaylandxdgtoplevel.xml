<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaylandXdgToplevel Class</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link> class represents the toplevel window specific parts of an xdg surface.</db:para>
<db:para>This class was introduced in Qt 5.12.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaylandXdgToplevel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Waylandcompositor)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Waylandcompositor)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += waylandcompositor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-xdgtoplevel.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is part of the <db:link xlink:href="qwaylandxdgshell.xml">QWaylandXdgShell</db:link> extension and provides a way to extend the functionality of an <db:link xlink:href="qwaylandxdgsurface.xml">QWaylandXdgSurface</db:link> with features specific to desktop-style windows.</db:para>
<db:para>It corresponds to the Wayland interface <db:code>xdg_toplevel</db:code>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DecorationMode-enum">
<db:title>enum QWaylandXdgToplevel::DecorationMode</db:title>
<db:enumsynopsis>
<db:enumname>DecorationMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ClientSideDecoration</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ServerSideDecoration</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type is used to specify the window decoration mode for toplevel windows.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link></db:emphasis>::ServerSideDecoration</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The compositor should draw window decorations.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link></db:emphasis>::ClientSideDecoration</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The client should draw window decorations.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activated-prop">
<db:title>[read-only] activated : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>activated</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activated</db:synopsisinfo>
<db:synopsisinfo role="notifier">activatedChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether toplevel is drawing itself as having input focus.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">activated</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">activatedChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="appId-prop">
<db:title>[read-only] appId : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>appId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">appId</db:synopsisinfo>
<db:synopsisinfo role="notifier">appIdChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the app id of the <db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">appId</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">appIdChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="decorationMode-prop">
<db:title>[read-only] decorationMode : const DecorationMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>DecorationMode</db:type>
<db:varname>decorationMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">decorationMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">decorationModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current window decoration mode for this toplevel.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qwaylandxdgtoplevel.xml#DecorationMode-enum">QWaylandXdgToplevel::DecorationMode</db:link></db:type> <db:emphasis role="bold">decorationMode</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">decorationModeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QWaylandXdgDecorationManagerV1</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullscreen-prop">
<db:title>[read-only] fullscreen : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>fullscreen</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">fullscreen</db:synopsisinfo>
<db:synopsisinfo role="notifier">fullscreenChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the client has acknowledged that it should be fullscreen.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">fullscreen</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">fullscreenChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxSize-prop">
<db:title>[read-only] maxSize : const QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>maxSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maxSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">maxSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum size of the <db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link>.</db:para>
<db:para>The compositor is free to ignore this value and request a larger size.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">maxSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">maxSizeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximized-prop">
<db:title>[read-only] maximized : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>maximized</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximized</db:synopsisinfo>
<db:synopsisinfo role="notifier">maximizedChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the client has acknowledged that it should be maximized.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">maximized</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">maximizedChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minSize-prop">
<db:title>[read-only] minSize : const QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>minSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">minSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum size of the <db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link>.</db:para>
<db:para>The compositor is free to ignore this value and request a smaller size.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">minSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">minSizeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="parentToplevel-prop">
<db:title>[read-only] parentToplevel : QWaylandXdgToplevel* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QWaylandXdgToplevel*</db:type>
<db:varname>parentToplevel</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">parentToplevel</db:synopsisinfo>
<db:synopsisinfo role="notifier">parentToplevelChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qml-xdgtoplevel.xml">XdgToplevel</db:link> parent of this <db:link xlink:href="qml-xdgtoplevel.xml">XdgToplevel</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qwaylandxdgtoplevel.xml#QWaylandXdgToplevel">QWaylandXdgToplevel</db:link></db:type> *<db:emphasis role="bold">parentToplevel</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">parentToplevelChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="resizing-prop">
<db:title>[read-only] resizing : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>resizing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">resizing</db:synopsisinfo>
<db:synopsisinfo role="notifier">resizingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the client has acknowledged that it is being resized.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">resizing</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">resizingChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="states-prop">
<db:title>[read-only] states : const QList&lt;int&gt;</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QList&lt;int&gt;</db:type>
<db:varname>states</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="notifier">statesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the last states the client acknowledged for this QWaylandToplevel.</db:para>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">statesChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="title-prop">
<db:title>[read-only] title : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>title</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">title</db:synopsisinfo>
<db:synopsisinfo role="notifier">titleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the title of the <db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">titleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="xdgSurface-prop">
<db:title>[read-only] xdgSurface : QWaylandXdgSurface* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QWaylandXdgSurface*</db:type>
<db:varname>xdgSurface</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">xdgSurface</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qwaylandxdgsurface.xml">QWaylandXdgSurface</db:link> for this <db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qwaylandxdgsurface.xml">QWaylandXdgSurface</db:link></db:type> *<db:emphasis role="bold">xdgSurface</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWaylandXdgToplevel">
<db:title>[explicit] QWaylandXdgToplevel::QWaylandXdgToplevel(QWaylandXdgSurface *<db:emphasis>xdgSurface</db:emphasis>, QWaylandResource &amp;<db:emphasis>resource</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandXdgToplevel</db:methodname>
<db:methodparam>
<db:type>QWaylandXdgSurface *</db:type>
<db:parameter>xdgSurface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWaylandResource &amp;</db:type>
<db:parameter>resource</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandXdgToplevel(QWaylandXdgSurface *xdgSurface, QWaylandResource &amp;resource)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link> for the given <db:code role="parameter">xdgSurface</db:code> and <db:code role="parameter">resource</db:code>.</db:para>
</db:section>
<db:section xml:id="fromResource">
<db:title>[static] QWaylandXdgToplevel *QWaylandXdgToplevel::fromResource(::wl_resource *<db:emphasis>resource</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWaylandXdgToplevel *</db:type>
<db:methodname>fromResource</db:methodname>
<db:methodparam>
<db:type>::wl_resource *</db:type>
<db:parameter>resource</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandXdgToplevel * fromResource(::wl_resource *resource)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qwaylandxdgtoplevel.xml">QWaylandXdgToplevel</db:link> corresponding to the <db:code role="parameter">resource</db:code>.</db:para>
</db:section>
<db:section xml:id="role">
<db:title>[static] QWaylandSurfaceRole *QWaylandXdgToplevel::role()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWaylandSurfaceRole *</db:type>
<db:methodname>role</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSurfaceRole * role()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the surface role for the QWaylandToplevel.</db:para>
</db:section>
<db:section xml:id="sendClose">
<db:title>void QWaylandXdgToplevel::sendClose()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendClose</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendClose()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a close event to the client. The client may choose to ignore the event.</db:para>
</db:section>
<db:section xml:id="sendConfigure">
<db:title>uint QWaylandXdgToplevel::sendConfigure(const QSize &amp;<db:emphasis>size</db:emphasis>, const QList&lt;QWaylandXdgToplevel::State&gt; &amp;<db:emphasis>states</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>sendConfigure</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QWaylandXdgToplevel::State&gt; &amp;</db:type>
<db:parameter>states</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendConfigure(const QSize &amp;size, const QList&lt;QWaylandXdgToplevel::State&gt; &amp;states)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a configure event to the client. Parameter <db:code role="parameter">size</db:code> contains the pixel size of the surface. A size of zero means the client is free to decide the size. Known <db:code role="parameter">states</db:code> are enumerated in QWaylandXdgToplevel::State.</db:para>
</db:section>
<db:section xml:id="sendFullscreen">
<db:title>uint QWaylandXdgToplevel::sendFullscreen(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>sendFullscreen</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendFullscreen(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience for sending a configure event with the fullscreen state set, and maximized and resizing removed. The activated state is left in its current state.</db:para>
<db:para><db:code role="parameter">size</db:code> is the new size of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandxdgtoplevel.xml#sendUnmaximized">sendUnmaximized</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sendMaximized">
<db:title>uint QWaylandXdgToplevel::sendMaximized(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>sendMaximized</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendMaximized(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience for sending a configure event with the maximized state set, and fullscreen and resizing removed. The activated state is left in its current state.</db:para>
<db:para><db:code role="parameter">size</db:code> is the new size of the window.</db:para>
</db:section>
<db:section xml:id="sendResizing">
<db:title>uint QWaylandXdgToplevel::sendResizing(const QSize &amp;<db:emphasis>maxSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>sendResizing</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>maxSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendResizing(const QSize &amp;maxSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience for sending a configure event with the resizing state set, and maximized and fullscreen removed. The activated state is left in its current state.</db:para>
<db:para><db:code role="parameter">maxSize</db:code> is the new size of the window.</db:para>
</db:section>
<db:section xml:id="sendUnmaximized">
<db:title>uint QWaylandXdgToplevel::sendUnmaximized(const QSize &amp;<db:emphasis>size</db:emphasis> = QSize(0, 0))</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>sendUnmaximized</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
<db:initializer>QSize(0, 0)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendUnmaximized(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience for sending a configure event with the maximized, fullscreen and resizing states removed, and fullscreen and resizing removed. The activated state is left in its current state.</db:para>
<db:para><db:code role="parameter">size</db:code> is the new size of the window. If <db:code role="parameter">size</db:code> is zero, the client decides the size.</db:para>
</db:section>
<db:section xml:id="sizeForResize">
<db:title>QSize QWaylandXdgToplevel::sizeForResize(const QSizeF &amp;<db:emphasis>size</db:emphasis>, const QPointF &amp;<db:emphasis>delta</db:emphasis>, Qt::Edges <db:emphasis>edges</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeForResize</db:methodname>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>delta</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Edges</db:type>
<db:parameter>edges</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeForResize(const QSizeF &amp;size, const QPointF &amp;delta, Qt::Edges edges) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience for computing the new size given the current <db:code role="parameter">size</db:code>, a <db:code role="parameter">delta</db:code>, and the <db:code role="parameter">edges</db:code> active in the drag.</db:para>
</db:section>
</db:section>
</db:article>
