<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SAX Bookmarks Example</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to read XBEL files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;xbelgenerator.h&quot;

XbelGenerator::XbelGenerator(const QTreeWidget *treeWidget)
    : treeWidget(treeWidget)
{
}

bool XbelGenerator::write(QIODevice *device)
{
    out.setDevice(device);
    out.setCodec(&quot;UTF-8&quot;);
    out &amp;lt;&amp;lt; &quot;&amp;lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&amp;gt;\n&quot;
        &amp;lt;&amp;lt; &quot;&amp;lt;!DOCTYPE xbel&amp;gt;\n&quot;
        &amp;lt;&amp;lt; &quot;&amp;lt;xbel version=\&quot;1.0\&quot;&amp;gt;\n&quot;;

    for (int i = 0; i &amp;lt; treeWidget-&amp;gt;topLevelItemCount(); ++i)
        generateItem(treeWidget-&amp;gt;topLevelItem(i), 1);

    out &amp;lt;&amp;lt; &quot;&amp;lt;/xbel&amp;gt;\n&quot;;
    return true;
}

QString XbelGenerator::indent(int depth)
{
    const int IndentSize = 4;
    return QString(IndentSize * depth, ' ');
}

QString XbelGenerator::escapedText(const QString &amp;amp;str)
{
    QString result = str;
    result.replace('&amp;amp;', &quot;&amp;amp;amp;&quot;);
    result.replace('&amp;lt;', &quot;&amp;amp;lt;&quot;);
    result.replace('&amp;gt;', &quot;&amp;amp;gt;&quot;);
    return result;
}

QString XbelGenerator::escapedAttribute(const QString &amp;amp;str)
{
    QString result = escapedText(str);
    result.replace(QLatin1Char('&quot;'), &quot;&amp;amp;quot;&quot;);
    result.prepend(QLatin1Char('&quot;'));
    result.append(QLatin1Char('&quot;'));
    return result;
}

void XbelGenerator::generateItem(const QTreeWidgetItem *item, int depth)
{
    QString tagName = item-&amp;gt;data(0, Qt::UserRole).toString();
    if (tagName == QLatin1String(&quot;folder&quot;)) {
        bool folded = !treeWidget-&amp;gt;isItemExpanded(item);
        out &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;&amp;lt;folder folded=\&quot;&quot; &amp;lt;&amp;lt; (folded ? &quot;yes&quot; : &quot;no&quot;)
                             &amp;lt;&amp;lt; &quot;\&quot;&amp;gt;\n&quot;
            &amp;lt;&amp;lt; indent(depth + 1) &amp;lt;&amp;lt; &quot;&amp;lt;title&amp;gt;&quot; &amp;lt;&amp;lt; escapedText(item-&amp;gt;text(0))
                                 &amp;lt;&amp;lt; &quot;&amp;lt;/title&amp;gt;\n&quot;;

        for (int i = 0; i &amp;lt; item-&amp;gt;childCount(); ++i)
            generateItem(item-&amp;gt;child(i), depth + 1);

        out &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;&amp;lt;/folder&amp;gt;\n&quot;;
    } else if (tagName == QLatin1String(&quot;bookmark&quot;)) {
        out &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;&amp;lt;bookmark&quot;;
        if (!item-&amp;gt;text(1).isEmpty())
            out &amp;lt;&amp;lt; &quot; href=&quot; &amp;lt;&amp;lt; escapedAttribute(item-&amp;gt;text(1));
        out &amp;lt;&amp;lt; &quot;&amp;gt;\n&quot;
            &amp;lt;&amp;lt; indent(depth + 1) &amp;lt;&amp;lt; &quot;&amp;lt;title&amp;gt;&quot; &amp;lt;&amp;lt; escapedText(item-&amp;gt;text(0))
                                 &amp;lt;&amp;lt; &quot;&amp;lt;/title&amp;gt;\n&quot;
            &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;&amp;lt;/bookmark&amp;gt;\n&quot;;
    } else if (tagName == QLatin1String(&quot;separator&quot;)) {
        out &amp;lt;&amp;lt; indent(depth) &amp;lt;&amp;lt; &quot;&amp;lt;separator/&amp;gt;\n&quot;;
    }
}

</db:programlisting>
</db:article>
