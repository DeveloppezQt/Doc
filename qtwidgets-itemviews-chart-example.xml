<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chart Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Chart example shows how to create a custom view for the model/view framework.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/chart-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In this example, the items in a table model are represented as slices in a pie chart, relying on the flexibility of the model/view architecture to handle custom editing and selection features.</db:para>
<db:para><db:emphasis role="bold">Note that you only need to create a new view class if your data requires a specialized representation.</db:emphasis> You should first consider using a standard <db:link xlink:href="qlistview.xml">QListView</db:link>, <db:link xlink:href="qtableview.xml">QTableView</db:link>, or <db:link xlink:href="qtreeview.xml">QTreeView</db:link> with a custom <db:link xlink:href="qitemdelegate.xml">QItemDelegate</db:link> subclass if you need to represent data in a special way.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/itemviews/chart?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
