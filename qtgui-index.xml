<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt GUI</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt GUI module provides classes for windowing system integration, event handling, OpenGL and OpenGL ES integration, 2D graphics, basic imaging, fonts and text. These classes are used internally by Qt's user interface technologies and can also be used directly, for instance to write applications using low-level OpenGL ES graphics APIs.</db:para>
<db:para>For application developers writing user interfaces, Qt provides higher level API's, like Qt Quick, that are much more suitable than the enablers found in the Qt GUI module.</db:para>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="http://www.cmake.org/cmake/help/documentation.html">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module components in the <db:code>Qt6</db:code> package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 COMPONENTS Gui REQUIRED)
target_link_libraries(mytarget PRIVATE Qt6::Gui)
</db:programlisting>
<db:para>See also the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>If you use <db:link xlink:href="qmake-manual.xml">qmake</db:link> to build your projects, Qt GUI is included by default. To disable Qt GUI, add the following line to your <db:code>.pro</db:code> file:</db:para>
<db:programlisting language="cpp">QT -= gui
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="application-windows">
<db:title>Application Windows</db:title>
<db:para>The most important classes in the Qt GUI module are <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> and <db:link xlink:href="qwindow.xml">QWindow</db:link>. A Qt application that wants to show content on screen, will need to make use of these. <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> contains the main event loop, where all events from the window system and other sources are processed and dispatched. It also handles the application's initialization and finalization.</db:para>
<db:para>The <db:link xlink:href="qwindow.xml">QWindow</db:link> class represents a window in the underlying windowing system. It provides a number of virtual functions to handle events (<db:link xlink:href="qevent.xml">QEvent</db:link>) from the windowing system, such as touch-input, exposure, focus, key strokes and geometry changes.</db:para>
</db:section>
<db:section xml:id="A2d-graphics">
<db:title>2D Graphics</db:title>
<db:para>The Qt GUI module contains classes for 2D graphics, imaging, fonts and advanced typography.</db:para>
<db:para>A <db:link xlink:href="qwindow.xml">QWindow</db:link> created with the surface type <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::RasterSurface</db:link> can be used in combination with <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> and <db:link xlink:href="qpainter.xml">QPainter</db:link>, Qt's highly optimized 2D vector graphics API. <db:link xlink:href="qpainter.xml">QPainter</db:link> supports drawing lines, polygons, vector paths, images and text. For more information, see <db:link xlink:href="paintsystem.xml">Paint System</db:link> and <db:link xlink:href="qtgui-rasterwindow-example.xml">Raster Window Example</db:link>.</db:para>
<db:para>Qt can load and save images using the <db:link xlink:href="qimage.xml">QImage</db:link> and <db:link xlink:href="qpixmap.xml">QPixmap</db:link> classes. By default, Qt supports the most common image formats including JPEG and PNG among others. Users can add support for additional formats via the <db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link> class. For more information, see <db:link xlink:href="paintsystem-images.xml">Reading and Writing Image Files</db:link></db:para>
<db:para>Typography in Qt is done with <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> which uses the <db:link xlink:href="qpainter.xml">QPainter</db:link> API in combination with Qt's font classes, primarily <db:link xlink:href="qfont.xml">QFont</db:link>. Applications that prefer more low-level APIs to text and font handling, classes like <db:link xlink:href="qrawfont.xml">QRawFont</db:link> and <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> can be used.</db:para>
</db:section>
<db:section xml:id="opengl-and-opengl-es-integration">
<db:title>OpenGL and OpenGL ES Integration</db:title>
<db:para><db:link xlink:href="qwindow.xml">QWindow</db:link> supports rendering using OpenGL and OpenGL ES, depending on what the platform supports. OpenGL rendering is enabled by setting the <db:link xlink:href="qwindow.xml">QWindow</db:link>'s surface type to <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::OpenGLSurface</db:link>, choosing the format attributes with <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link>, and then creating a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> to manage the native OpenGL context. In addition, Qt has <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link>, which enables the use of OpenGL accelerated <db:link xlink:href="qpainter.xml">QPainter</db:link> rendering, as well as convenience classes that simplify the writing of OpenGL code and hides the complexities of extension handling and the differences between OpenGL ES 2 and desktop OpenGL. The convenience classes include <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> that lets an application use all the OpenGL ES 2 functions on desktop OpenGL without having to manually resolve the OpenGL function pointers, thus allowing cross-platform development of applications targeting mobile or embedded devices, and some classes that wrap native OpenGL functionality in a simpler Qt API:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopengldebuglogger.xml">QOpenGLDebugLogger</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopengltimerquery.xml">QOpenGLTimerQuery</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopenglvertexarrayobject.xml">QOpenGLVertexArrayObject</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Finally, in order to provide better support for the newer versions (3.0 and higher) of OpenGL, a versioned function wrapper mechanism is also available: The QOpenGLFunction_N_N family of classes expose all the functions in a given OpenGL version and profile, allowing easy development of desktop applications relying on modern, desktop-only OpenGL features.</db:para>
<db:para>For more information, see the <db:link xlink:href="qtopengl-openglwindow-example.xml">OpenGL Window Example</db:link>.</db:para>
<db:para>The Qt GUI module also contains a few math classes to aid with the most common mathmatical operations related to 3D graphics. These classes include <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link>, <db:link xlink:href="qvector4d.xml">QVector4D</db:link> and <db:link xlink:href="qquaternion.xml">QQuaternion</db:link></db:para>
<db:para>A <db:link xlink:href="qwindow.xml">QWindow</db:link> created with the <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::OpenGLSurface</db:link> can be used in combination with <db:link xlink:href="qpainter.xml">QPainter</db:link> and <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> to have OpenGL hardware accelerated 2D graphics, by sacrificing some of the visual quality.</db:para>
</db:section>
<db:section xml:id="vulkan-integration">
<db:title>Vulkan Integration</db:title>
<db:para>Qt GUI has support for the <db:link xlink:href="https://www.khronos.org/vulkan/">Vulkan</db:link> API. Qt applications require the presence of the <db:link xlink:href="https://www.lunarg.com/vulkan-sdk/">LunarG Vulkan SDK</db:link>.</db:para>
<db:para>On Windows, the SDK sets the environment variable <db:code>VULKAN_SDK</db:code>, which will be detected by the <db:code>configure</db:code> script.</db:para>
<db:para>On Android, Vulkan headers were added in API level 24 of the NDK.</db:para>
<db:para>Relevant classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QVulkanDeviceFunctions</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvulkanextension.xml">QVulkanExtension</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QVulkanFunctions</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvulkaninfovector.xml">QVulkanInfoVector</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvulkanwindowrenderer.xml">QVulkanWindowRenderer</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more information, see the <db:link xlink:href="qtgui-hellovulkanwidget-example.xml">Hello Vulkan Widget Example</db:link> and the <db:link xlink:href="qtgui-hellovulkanwindow-example.xml">Hello Vulkan Window Example</db:link>.</db:para>
</db:section>
<db:section xml:id="drag-and-drop">
<db:title>Drag and Drop</db:title>
<db:para>Qt GUI includes support for drag and drop. The <db:link xlink:href="dnd.xml">Drag and Drop</db:link> overview has more information.</db:para>
</db:section>
<db:section xml:id="module-evolution">
<db:title>Module Evolution</db:title>
<db:para><db:link xlink:href="gui-changes-qt6.xml">Changes to Qt GUI</db:link> lists important changes in the module API and functionality that were done for the Qt 6 series of Qt.</db:para>
</db:section>
<db:section xml:id="licenses-and-attributions">
<db:title>Licenses and Attributions</db:title>
<db:para>Qt GUI is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under free software licenses: The <db:link xlink:href="http://www.gnu.org/licenses/lgpl-3.0.html">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
<db:para>Furthermore, Qt GUI in Qt 6.0.4 may contain third-party modules under following permissive licenses:</db:para>
<db:para/>
</db:section>
<db:section xml:id="reference">
<db:title>Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtgui-module.xml">Qt GUI C++ Classes</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="events.xml">Event Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting.xml">Painting Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting-3d.xml">Rendering in 3D</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
