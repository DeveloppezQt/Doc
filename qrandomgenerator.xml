<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRandomGenerator Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> class allows one to obtain random values from a high-quality Random Number Generator.</db:para>
<db:para>This class was introduced in Qt 5.10.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRandomGenerator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.10</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qrandomgenerator64.xml" xlink:role="class">QRandomGenerator64</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> may be used to generate random values from a high-quality random number generator. Like the C++ random engines, <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> can be seeded with user-provided values through the constructor. When seeded, the sequence of numbers generated by this class is deterministic. That is to say, given the same seed data, <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> will generate the same sequence of numbers. But given different seeds, the results should be considerably different.</db:para>
<db:para><db:link xlink:href="qrandomgenerator.xml#securelySeeded">QRandomGenerator::securelySeeded</db:link>() can be used to create a <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> that is securely seeded with QRandomGenerator::system(), meaning that the sequence of numbers it generates cannot be easily predicted. Additionally, QRandomGenerator::global() returns a global instance of <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> that Qt will ensure to be securely seeded. This object is thread-safe, may be shared for most uses, and is always seeded from QRandomGenerator::system()</db:para>
<db:para>QRandomGenerator::system() may be used to access the system's cryptographically-safe random generator. On Unix systems, it's equivalent to reading from /dev/urandom or the getrandom() or getentropy() system calls.</db:para>
<db:para>The class can generate 32-bit or 64-bit quantities, or fill an array of those. The most common way of generating new values is to call the <db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>(), <db:link xlink:href="qrandomgenerator.xml#generate64">generate64</db:link>() or <db:link xlink:href="qrandomgenerator.xml#fillRange">fillRange</db:link>() functions. One would use it as:</db:para>
<db:programlisting language="cpp">    quint32 value = QRandomGenerator::global()-&amp;gt;generate();
</db:programlisting>
<db:para>Additionally, it provides a floating-point function <db:link xlink:href="qrandomgenerator.xml#generateDouble">generateDouble</db:link>() that returns a number in the range [0, 1) (that is, inclusive of zero and exclusive of 1). There's also a set of convenience functions that facilitate obtaining a random number in a bounded, integral range.</db:para>
<db:section xml:id="seeding-and-determinism">
<db:title>Seeding and determinism</db:title>
<db:para><db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> may be seeded with specific seed data. When that is done, the numbers generated by the object will always be the same, as in the following example:</db:para>
<db:programlisting language="cpp">    QRandomGenerator prng1(1234), prng2(1234);
    Q_ASSERT(prng1.generate() == prng2.generate());
    Q_ASSERT(prng1.generate64() == prng2.generate64());
</db:programlisting>
<db:para>The seed data takes the form of one or more 32-bit words. The ideal seed size is approximately equal to the size of the <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> class itself. Due to mixing of the seed data, <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> cannot guarantee that distinct seeds will produce different sequences.</db:para>
<db:para>QRandomGenerator::global(), like all generators created by <db:link xlink:href="qrandomgenerator.xml#securelySeeded">QRandomGenerator::securelySeeded</db:link>(), is always seeded from QRandomGenerator::system(), so it's not possible to make it produce identical sequences.</db:para>
</db:section>
<db:section xml:id="bulk-data">
<db:title>Bulk data</db:title>
<db:para>When operating in deterministic mode, <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> may be used for bulk data generation. In fact, applications that do not need cryptographically-secure or true random data are advised to use a regular <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> instead of QRandomGenerator::system() for their random data needs.</db:para>
<db:para>For ease of use, <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> provides a global object that can be easily used, as in the following example:</db:para>
<db:programlisting language="cpp">    int x = QRandomGenerator::global()-&amp;gt;generate();
    int y = QRandomGenerator::global()-&amp;gt;generate();
    int w = QRandomGenerator::global()-&amp;gt;bounded(16384);
    int h = QRandomGenerator::global()-&amp;gt;bounded(16384);
</db:programlisting>
</db:section>
<db:section xml:id="system-wide-random-number-generator">
<db:title>System-wide random number generator</db:title>
<db:para>QRandomGenerator::system() may be used to access the system-wide random number generator, which is cryptographically-safe on all systems that Qt runs on. This function will use hardware facilities to generate random numbers where available. On such systems, those facilities are true Random Number Generators. However, if they are true RNGs, those facilities have finite entropy sources and thus may fail to produce any results if their entropy pool is exhausted.</db:para>
<db:para>If that happens, first the operating system then <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> will fall back to Pseudo Random Number Generators of decreasing qualities (Qt's fallback generator being the simplest). Whether those generators are still of cryptographic quality is implementation-defined. Therefore, QRandomGenerator::system() should not be used for high-frequency random number generation, lest the entropy pool become empty. As a rule of thumb, this class should not be called upon to generate more than a kilobyte per second of random data (note: this may vary from system to system).</db:para>
<db:para>If an application needs true RNG data in bulk, it should use the operating system facilities (such as /dev/random on Linux) directly and wait for entropy to become available. If the application requires PRNG engines of cryptographic quality but not of true randomness, QRandomGenerator::system() may still be used (see section below).</db:para>
<db:para>If neither a true RNG nor a cryptographically secure PRNG are required, applications should instead use PRNG engines like <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link>'s deterministic mode and those from the C++ Standard Library. QRandomGenerator::system() can be used to seed those.</db:para>
<db:section xml:id="fallback-quality">
<db:title>Fallback quality</db:title>
<db:para>QRandomGenerator::system() uses the operating system facilities to obtain random numbers, which attempt to collect real entropy from the surrounding environment to produce true random numbers. However, it's possible that the entropy pool becomes exhausted, in which case the operating system will fall back to a pseudo-random engine for a time. Under no circumstances will QRandomGenerator::system() block, waiting for more entropy to be collected.</db:para>
<db:para>The following operating systems guarantee that the results from their random-generation API will be of at least cryptographically-safe quality, even if the entropy pool is exhausted: Apple OSes (Darwin), BSDs, Linux, Windows. Barring a system installation problem (such as /dev/urandom not being readable by the current process), QRandomGenerator::system() will therefore have the same guarantees.</db:para>
<db:para>On other operating systems, <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> will fall back to a PRNG of good numeric distribution, but it cannot guarantee proper seeding in all cases. Please consult the OS documentation for more information.</db:para>
<db:para>Applications that require <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> not to fall back to non-cryptographic quality generators are advised to check their operating system documentation or restrict their deployment to one of the above.</db:para>
</db:section>
</db:section>
<db:section xml:id="reentrancy-and-thread-safety">
<db:title>Reentrancy and thread-safety</db:title>
<db:para><db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> is reentrant, meaning that multiple threads can operate on this class at the same time, so long as they operate on different objects. If multiple threads need to share one PRNG sequence, external locking by a mutex is required.</db:para>
<db:para>The exceptions are the objects returned by QRandomGenerator::global() and QRandomGenerator::system(): those objects are thread-safe and may be used by any thread without external locking. Note that thread-safety does not extend to copying those objects: they should always be used by reference.</db:para>
</db:section>
<db:section xml:id="standard-c-library-compatibility">
<db:title>Standard C++ Library compatibility</db:title>
<db:para><db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> is modeled after the requirements for random number engines in the C++ Standard Library and may be used in almost all contexts that the Standard Library engines can. Exceptions to the requirements are the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> does not support seeding from another seed sequence-like class besides std::seed_seq itself;</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> is not comparable (but is copyable) or streamable to std::ostream or from std::istream.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> is also compatible with the uniform distribution classes std::uniform_int_distribution and std:uniform_real_distribution, as well as the free function std::generate_canonical. For example, the following code may be used to generate a floating-point number in the range [1, 2.5):</db:para>
<db:programlisting language="cpp">    std::uniform_real_distribution dist(1, 2.5);
    return dist(*QRandomGenerator::global());
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator64.xml">QRandomGenerator64</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qrand" role="deprecated">qrand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="result_type-typedef">
<db:title>QRandomGenerator::result_type</db:title>
<db:typedefsynopsis>
<db:typedefname>result_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A typedef to the type that <db:link xlink:href="qrandomgenerator.xml#operator-28-29">operator</db:link>() returns. That is, quint32.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#operator-28-29">operator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRandomGenerator-3">
<db:title>[default] QRandomGenerator::QRandomGenerator(quint32 <db:emphasis>seedValue</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRandomGenerator</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>seedValue</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QRandomGenerator(quint32 seedValue) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Initializes this <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> object with the value <db:code role="parameter">seedValue</db:code> as the seed. Two objects constructed or reseeded with the same seed value will produce the same number sequence.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#seed-1">seed</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#securelySeeded">securelySeeded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRandomGenerator-4">
<db:title>[default] QRandomGenerator::QRandomGenerator(const quint32 *<db:emphasis>seedBuffer</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRandomGenerator</db:methodname>
<db:methodparam>
<db:type>const quint32 *</db:type>
<db:parameter>seedBuffer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QRandomGenerator(const quint32 *seedBuffer, qsizetype len) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Initializes this <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> object with <db:code role="parameter">len</db:code> values found in the array <db:code role="parameter">seedBuffer</db:code> as the seed. Two objects constructed or reseeded with the same seed value will produce the same number sequence.</db:para>
<db:para>This constructor is equivalent to:</db:para>
<db:programlisting language="cpp">    std::seed_seq sseq(seedBuffer, seedBuffer + len);
    QRandomGenerator generator(sseq);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#seed-1">seed</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#securelySeeded">securelySeeded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRandomGenerator-5">
<db:title>[default] QRandomGenerator::QRandomGenerator(const quint32 *<db:emphasis>begin</db:emphasis>, const quint32 *<db:emphasis>end</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRandomGenerator</db:methodname>
<db:methodparam>
<db:type>const quint32 *</db:type>
<db:parameter>begin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const quint32 *</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QRandomGenerator(const quint32 *begin, const quint32 *end) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Initializes this <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> object with the values found in the range from <db:code role="parameter">begin</db:code> to <db:code role="parameter">end</db:code> as the seed. Two objects constructed or reseeded with the same seed value will produce the same number sequence.</db:para>
<db:para>This constructor is equivalent to:</db:para>
<db:programlisting language="cpp">    std::seed_seq sseq(begin, end);
    QRandomGenerator generator(sseq);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#seed-1">seed</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#securelySeeded">securelySeeded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRandomGenerator-6">
<db:title>[default] QRandomGenerator::QRandomGenerator(std::seed_seq &amp;<db:emphasis>sseq</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRandomGenerator</db:methodname>
<db:methodparam>
<db:type>std::seed_seq &amp;</db:type>
<db:parameter>sseq</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QRandomGenerator(std::seed_seq &amp;sseq) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Initializes this <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> object with the seed sequence <db:code role="parameter">sseq</db:code> as the seed. Two objects constructed or reseeded with the same seed value will produce the same number sequence.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#seed-1">seed</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#securelySeeded">securelySeeded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRandomGenerator-7">
<db:title>[default] QRandomGenerator::QRandomGenerator(const QRandomGenerator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRandomGenerator</db:methodname>
<db:methodparam>
<db:type>const QRandomGenerator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QRandomGenerator(const QRandomGenerator &amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of the generator state in the <db:code role="parameter">other</db:code> object. If <db:code role="parameter">other</db:code> is QRandomGenerator::system() or a copy of that, this object will also read from the operating system random-generating facilities. In that case, the sequences generated by the two objects will be different.</db:para>
<db:para>In all other cases, the new <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> object will start at the same position in the deterministic sequence as the <db:code role="parameter">other</db:code> object was. Both objects will generate the same sequence from this point on.</db:para>
<db:para>For that reason, it is not adviseable to create a copy of QRandomGenerator::global(). If one needs an exclusive deterministic generator, consider instead using <db:link xlink:href="qrandomgenerator.xml#securelySeeded">securelySeeded</db:link>() to obtain a new object that shares no relationship with the QRandomGenerator::global().</db:para>
</db:section>
<db:section xml:id="bounded">
<db:title>double QRandomGenerator::bounded(double <db:emphasis>highest</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>double</db:type>
<db:methodname>bounded</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>highest</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double bounded(double highest)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates one random double in the range between 0 (inclusive) and <db:code role="parameter">highest</db:code> (exclusive). This function is equivalent to and is implemented as:</db:para>
<db:programlisting language="cpp">    return generateDouble() * highest;
</db:programlisting>
<db:para>If the <db:code role="parameter">highest</db:code> parameter is negative, the result will be negative too; if it is infinite or NaN, the result will be infinite or NaN too (that is, not random).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#generateDouble">generateDouble</db:link>()</db:member>
<db:member>bounded()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bounded-1">
<db:title>int QRandomGenerator::bounded(int <db:emphasis>highest</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>bounded</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>highest</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int bounded(int highest)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Generates one random 32-bit quantity in the range between 0 (inclusive) and <db:code role="parameter">highest</db:code> (exclusive). <db:code role="parameter">highest</db:code> must be positive.</db:para>
<db:para>Note that this function cannot be used to obtain values in the full 32-bit range of int. Instead, use <db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>() and cast to int.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#generate64">generate64</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#generateDouble">generateDouble</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bounded-2">
<db:title>int QRandomGenerator::bounded(int <db:emphasis>lowest</db:emphasis>, int <db:emphasis>highest</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>bounded</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lowest</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>highest</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int bounded(int lowest, int highest)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Generates one random 32-bit quantity in the range between <db:code role="parameter">lowest</db:code> (inclusive) and <db:code role="parameter">highest</db:code> (exclusive), both of which may be negative, but <db:code role="parameter">highest</db:code> must be greater than <db:code role="parameter">lowest</db:code>.</db:para>
<db:para>Note that this function cannot be used to obtain values in the full 32-bit range of int. Instead, use <db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>() and cast to int.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#generate64">generate64</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#generateDouble">generateDouble</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="discard">
<db:title>Q_DECL_EXPORT QRandomGenerator::discard(unsigned long long <db:emphasis>z</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Q_DECL_EXPORT</db:type>
<db:methodname>discard</db:methodname>
<db:methodparam>
<db:type>unsigned long long</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_DECL_EXPORT discard(unsigned long long z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Discards the next <db:code role="parameter">z</db:code> entries from the sequence. This method is equivalent to calling <db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>() <db:code role="parameter">z</db:code> times and discarding the result, as in:</db:para>
<db:programlisting language="cpp">    while (z--)
        generator.generate();
</db:programlisting>
</db:section>
<db:section xml:id="fillRange">
<db:title>void QRandomGenerator::fillRange(UInt *<db:emphasis>buffer</db:emphasis>, qsizetype <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRange</db:methodname>
<db:methodparam>
<db:type>UInt *</db:type>
<db:parameter>buffer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRange(UInt *buffer, qsizetype count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates <db:code role="parameter">count</db:code> 32- or 64-bit quantities (depending on the type UInt) and stores them in the buffer pointed by <db:code role="parameter">buffer</db:code>. This is the most efficient way to obtain more than one quantity at a time, as it reduces the number of calls into the Random Number Generator source.</db:para>
<db:para>For example, to fill a vector of 16 entries with random values, one may write:</db:para>
<db:programlisting language="cpp">    QVector&amp;lt;quint32&amp;gt; vector;
    vector.resize(16);
    QRandomGenerator::fillRange(vector.data(), vector.size());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fillRange-1">
<db:title>void QRandomGenerator::fillRange(UInt (&amp;)[N] <db:emphasis>buffer</db:emphasis> = N)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRange</db:methodname>
<db:methodparam>
<db:type>UInt (&amp;)[N]</db:type>
<db:parameter>buffer</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRange(UInt (&amp;)[N] buffer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates N 32- or 64-bit quantities (depending on the type UInt) and stores them in the <db:code role="parameter">buffer</db:code> array. This is the most efficient way to obtain more than one quantity at a time, as it reduces the number of calls into the Random Number Generator source.</db:para>
<db:para>For example, to fill generate two 32-bit quantities, one may write:</db:para>
<db:programlisting language="cpp">    quint32 array[2];
    QRandomGenerator::fillRange(array);
</db:programlisting>
<db:para>It would have also been possible to make one call to <db:link xlink:href="qrandomgenerator.xml#generate64">generate64</db:link>() and then split the two halves of the 64-bit value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="generate64">
<db:title>int QRandomGenerator::generate64()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>generate64</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int generate64()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates a 64-bit random quantity and returns it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#operator-28-29">operator()</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="generate">
<db:title>int QRandomGenerator::generate()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>generate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int generate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates a 32-bit random quantity and returns it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#operator-28-29">operator()</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#generate64">generate64</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="generate-1">
<db:title>void QRandomGenerator::generate(ForwardIterator <db:emphasis>begin</db:emphasis>, ForwardIterator <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>generate</db:methodname>
<db:methodparam>
<db:type>ForwardIterator</db:type>
<db:parameter>begin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>ForwardIterator</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void generate(ForwardIterator begin, ForwardIterator end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates 32-bit quantities and stores them in the range between <db:code role="parameter">begin</db:code> and <db:code role="parameter">end</db:code>. This function is equivalent to (and is implemented as):</db:para>
<db:programlisting language="cpp">    std::generate(begin, end, [this]() { return generate(); });
</db:programlisting>
<db:para>This function complies with the requirements for the function <db:link xlink:href="http://en.cppreference.com/w/cpp/numeric/random/seed_seq/generate">std::seed_seq::generate</db:link>, which requires unsigned 32-bit integer values.</db:para>
<db:para>Note that if the [begin, end) range refers to an area that can store more than 32 bits per element, the elements will still be initialized with only 32 bits of data. Any other bits will be zero. To fill the range with 64 bit quantities, one can write:</db:para>
<db:programlisting language="cpp">    std::generate(begin, end, []() { return QRandomGenerator::global()-&amp;gt;generate64(); });
</db:programlisting>
<db:para>If the range refers to contiguous memory (such as an array or the data from a <db:link xlink:href="qvector.xml">QVector</db:link>), the <db:link xlink:href="qrandomgenerator.xml#fillRange">fillRange</db:link>() function may be used too.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#fillRange">fillRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="generateDouble">
<db:title>double QRandomGenerator::generateDouble()</db:title>
<db:methodsynopsis>
<db:type>double</db:type>
<db:methodname>generateDouble</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double generateDouble()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates one random qreal in the canonical range [0, 1) (that is, inclusive of zero and exclusive of 1).</db:para>
<db:para>This function is equivalent to:</db:para>
<db:programlisting language="cpp">    QRandomGenerator64 rd;
    return std::generate_canonical&amp;lt;qreal, std::numeric_limits&amp;lt;qreal&amp;gt;::digits&amp;gt;(rd);
</db:programlisting>
<db:para>The same may also be obtained by using <db:link xlink:href="http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution">std::uniform_real_distribution</db:link> with parameters 0 and 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#generate64">generate64</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#bounded">bounded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="securelySeeded">
<db:title>[static] QRandomGenerator QRandomGenerator::securelySeeded()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QRandomGenerator</db:type>
<db:methodname>securelySeeded</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRandomGenerator securelySeeded()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> object that was securely seeded with QRandomGenerator::system(). This function will obtain the ideal seed size for the algorithm that <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> uses and is therefore the recommended way for creating a new <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> object that will be kept for some time.</db:para>
<db:para>Given the amount of data required to securely seed the deterministic engine, this function is somewhat expensive and should not be used for short-term uses of <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> (using it to generate fewer than 2600 bytes of random data is effectively a waste of resources). If the use doesn't require that much data, consider using QRandomGenerator::global() and not storing a <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> object instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>global()</db:member>
<db:member>system()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="seed-1">
<db:title>void QRandomGenerator::seed(std::seed_seq &amp;<db:emphasis>seed</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>seed</db:methodname>
<db:methodparam>
<db:type>std::seed_seq &amp;</db:type>
<db:parameter>seed</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void seed(std::seed_seq &amp;seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Reseeds this object using the seed sequence <db:code role="parameter">seed</db:code> as the seed.</db:para>
</db:section>
<db:section xml:id="operator-28-29">
<db:title>QRandomGenerator::result_type QRandomGenerator::operator()()</db:title>
<db:methodsynopsis>
<db:type>QRandomGenerator::result_type</db:type>
<db:methodname>operator()</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRandomGenerator::result_type operator()()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates a 32-bit random quantity and returns it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrandomgenerator.xml#generate">generate</db:link>()</db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml#generate64">generate64</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
