<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DOM Bookmarks Example</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a reader for XML Bookmark Exchange Language files.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;xbeltree.h&quot;

XbelTree::XbelTree(QWidget *parent)
    : QTreeWidget(parent)
{
    QStringList labels;
    labels &lt;&lt; tr(&quot;Title&quot;) &lt;&lt; tr(&quot;Location&quot;);

    header()-&gt;setSectionResizeMode(QHeaderView::Stretch);
    setHeaderLabels(labels);

    folderIcon.addPixmap(style()-&gt;standardPixmap(QStyle::SP_DirClosedIcon),
                         QIcon::Normal, QIcon::Off);
    folderIcon.addPixmap(style()-&gt;standardPixmap(QStyle::SP_DirOpenIcon),
                         QIcon::Normal, QIcon::On);
    bookmarkIcon.addPixmap(style()-&gt;standardPixmap(QStyle::SP_FileIcon));
}

bool XbelTree::read(QIODevice *device)
{
    QString errorStr;
    int errorLine;
    int errorColumn;

    if (!domDocument.setContent(device, true, &amp;errorStr, &amp;errorLine,
                                &amp;errorColumn)) {
        QMessageBox::information(window(), tr(&quot;DOM Bookmarks&quot;),
                                 tr(&quot;Parse error at line %1, column %2:\n%3&quot;)
                                 .arg(errorLine)
                                 .arg(errorColumn)
                                 .arg(errorStr));
        return false;
    }

    QDomElement root = domDocument.documentElement();
    if (root.tagName() != &quot;xbel&quot;) {
        QMessageBox::information(window(), tr(&quot;DOM Bookmarks&quot;),
                                 tr(&quot;The file is not an XBEL file.&quot;));
        return false;
    } else if (root.hasAttribute(&quot;version&quot;)
               &amp;&amp; root.attribute(&quot;version&quot;) != &quot;1.0&quot;) {
        QMessageBox::information(window(), tr(&quot;DOM Bookmarks&quot;),
                                 tr(&quot;The file is not an XBEL version 1.0 &quot;
                                    &quot;file.&quot;));
        return false;
    }

    clear();

    disconnect(this, SIGNAL(itemChanged(QTreeWidgetItem*,int)),
               this, SLOT(updateDomElement(QTreeWidgetItem*,int)));

    QDomElement child = root.firstChildElement(&quot;folder&quot;);
    while (!child.isNull()) {
        parseFolderElement(child);
        child = child.nextSiblingElement(&quot;folder&quot;);
    }

    connect(this, SIGNAL(itemChanged(QTreeWidgetItem*,int)),
            this, SLOT(updateDomElement(QTreeWidgetItem*,int)));

    return true;
}

bool XbelTree::write(QIODevice *device)
{
    const int IndentSize = 4;

    QTextStream out(device);
    domDocument.save(out, IndentSize);
    return true;
}

void XbelTree::updateDomElement(QTreeWidgetItem *item, int column)
{
    QDomElement element = domElementForItem.value(item);
    if (!element.isNull()) {
        if (column == 0) {
            QDomElement oldTitleElement = element.firstChildElement(&quot;title&quot;);
            QDomElement newTitleElement = domDocument.createElement(&quot;title&quot;);

            QDomText newTitleText = domDocument.createTextNode(item-&gt;text(0));
            newTitleElement.appendChild(newTitleText);

            element.replaceChild(newTitleElement, oldTitleElement);
        } else {
            if (element.tagName() == &quot;bookmark&quot;)
                element.setAttribute(&quot;href&quot;, item-&gt;text(1));
        }
    }
}

void XbelTree::parseFolderElement(const QDomElement &amp;element,
                                  QTreeWidgetItem *parentItem)
{
    QTreeWidgetItem *item = createItem(element, parentItem);

    QString title = element.firstChildElement(&quot;title&quot;).text();
    if (title.isEmpty())
        title = QObject::tr(&quot;Folder&quot;);

    item-&gt;setFlags(item-&gt;flags() | Qt::ItemIsEditable);
    item-&gt;setIcon(0, folderIcon);
    item-&gt;setText(0, title);

    bool folded = (element.attribute(&quot;folded&quot;) != &quot;no&quot;);
    setItemExpanded(item, !folded);

    QDomElement child = element.firstChildElement();
    while (!child.isNull()) {
        if (child.tagName() == &quot;folder&quot;) {
            parseFolderElement(child, item);
        } else if (child.tagName() == &quot;bookmark&quot;) {
            QTreeWidgetItem *childItem = createItem(child, item);

            QString title = child.firstChildElement(&quot;title&quot;).text();
            if (title.isEmpty())
                title = QObject::tr(&quot;Folder&quot;);

            childItem-&gt;setFlags(item-&gt;flags() | Qt::ItemIsEditable);
            childItem-&gt;setIcon(0, bookmarkIcon);
            childItem-&gt;setText(0, title);
            childItem-&gt;setText(1, child.attribute(&quot;href&quot;));
        } else if (child.tagName() == &quot;separator&quot;) {
            QTreeWidgetItem *childItem = createItem(child, item);
            childItem-&gt;setFlags(item-&gt;flags() &amp; ~(Qt::ItemIsSelectable | Qt::ItemIsEditable));
            childItem-&gt;setText(0, QString(30, 0xB7));
        }
        child = child.nextSiblingElement();
    }
}

QTreeWidgetItem *XbelTree::createItem(const QDomElement &amp;element,
                                      QTreeWidgetItem *parentItem)
{
    QTreeWidgetItem *item;
    if (parentItem) {
        item = new QTreeWidgetItem(parentItem);
    } else {
        item = new QTreeWidgetItem(this);
    }
    domElementForItem.insert(item, element);
    return item;
}

</db:programlisting>
</db:article>
