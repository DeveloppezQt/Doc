<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Custom Shaders Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of custom vertex and fragment shaders.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example demonstrates using a material with completely custom vertex and fragment shader code.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/customshaders-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example is the counterpart to the <db:link xlink:href="qtquick3d-custommaterial-example.xml">custommaterials</db:link> example, which demonstrates the other group of custom materials: <db:code>shaded</db:code> materials where the shader code snippet augments a <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link>, rather than replacing it.</db:para>
<db:section xml:id="implementing-a-custom-material">
<db:title>Implementing a custom material</db:title>
<db:para>In this example, a mesh is deformed by the vertex shader according to a sine function. The end result is controlled by two sliders corresponding to the time and amplitude values of the sine function.</db:para>
<db:para>The fragment shader is used to color the mesh according to the position values of the vertices. There are two fragment shaders included: one with and without texturing. The textured version samples a texture that is source from either an image file, or from a live Qt Quick layer.</db:para>
<db:para>The material does not participate in the default lighting or shadowing system, and therefore has its <db:link xlink:href="qml-qtquick3d-custommaterial.xml#shadingMode-prop">shadingMode</db:link> property set to <db:code>CustomMaterial.Unshaded</db:code>.</db:para>
<db:para>See <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link> for a detailed description of custom material capabilities.</db:para>
<db:programlisting language="qml">CustomMaterial {
    property real time: 0.0
    property real amplitude: 5.0
    property real alpha: 1.0

    property bool texturing: false
    property bool textureFromItem: false
    property Item texSrc
    Texture {
        id: texFromFile
        source: &quot;qt_logo.png&quot;
    }
    Texture {
        id: texFromItem
        sourceItem: texSrc
    }
    property TextureInput tex: TextureInput {
        enabled: texturing
        texture: textureFromItem ? texFromItem : texFromFile
    }

    shadingMode: CustomMaterial.Unshaded
    sourceBlend: alpha &amp;lt; 1.0 ? CustomMaterial.SrcAlpha : CustomMaterial.NoBlend
    destinationBlend: alpha &amp;lt; 1.0 ? CustomMaterial.OneMinusSrcAlpha : CustomMaterial.NoBlend
    cullMode: CustomMaterial.BackFaceCulling

    vertexShader: &quot;example.vert&quot;
    fragmentShader: texturing ? &quot;example_tex.frag&quot; : &quot;example.frag&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="using-a-custom-material">
<db:title>Using a custom material</db:title>
<db:para>A custom material using custom shaders is used the same way as any other material. The uniforms in the shader can be easily updated through QML property bindings.</db:para>
<db:programlisting language="qml">Model {
    position: Qt.vector3d(0, 0, 0)
    NumberAnimation on eulerRotation.y {
        from: 0
        to: 360
        duration: 3000
        loops: -1
        running: control.animateRotation
    }
    scale: Qt.vector3d(2, 2, 2)
    source: &quot;#Sphere&quot;
    materials: [
        ExampleMaterial {
            id: exampleMaterial
            time: control.time
            amplitude: control.amplitude
            alpha: control.alpha
            texturing: control.texturing
            textureFromItem: control.textureFromItem
            texSrc: Rectangle {
                layer.enabled: true
                layer.textureMirroring: ShaderEffectSource.NoMirroring
                visible: false
                SequentialAnimation on color {
                    ColorAnimation { from: &quot;black&quot;; to: &quot;yellow&quot;; duration: 2000 }
                    ColorAnimation { from: &quot;yellow&quot;; to: &quot;cyan&quot;; duration: 1000 }
                    ColorAnimation { from: &quot;cyan&quot;; to: &quot;black&quot;; duration: 500 }
                    loops: -1
                }
                width: 512
                height: 512
                Image {
                    source: &quot;qt_logo.png&quot;
                    anchors.centerIn: parent
                }
            }
        }
    ]
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="customshaders/CMakeLists.txt">customshaders/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshaders/ExampleMaterial.qml">customshaders/ExampleMaterial.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshaders/MaterialControl.qml">customshaders/MaterialControl.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshaders/customshaders.pro">customshaders/customshaders.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshaders/main.cpp">customshaders/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshaders/main.qml">customshaders/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshaders/resources.qrc">customshaders/resources.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="customshaders/qt_logo.png">customshaders/qt_logo.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
