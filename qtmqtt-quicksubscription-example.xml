<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Quick MQTT Example</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Registering QMqttClient to QML and using it in a Qt Quick user interface.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/quicksubscription.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Quick MQTT</db:emphasis> demonstrates how to register QMqttClient as a QML type and use it in a Qt Quick application.</db:para>
<db:para><db:link xlink:href="qtmqtt-index.xml">Qt MQTT</db:link> does not provide a QML API in its current version. However, you can make the C++ classes of the module available to QML.</db:para>
<db:section xml:id="creating-a-client">
<db:title>Creating a Client</db:title>
<db:para>We create a <db:code>QmlMqttClient</db:code> class with the QMqttClient class as a base class:</db:para>
<db:programlisting language="cpp">QmlMqttClient::QmlMqttClient(QObject *parent)
    : QObject(parent)
{
    connect(&amp;amp;m_client, &amp;amp;QMqttClient::hostnameChanged, this, &amp;amp;QmlMqttClient::hostnameChanged);
    connect(&amp;amp;m_client, &amp;amp;QMqttClient::portChanged, this, &amp;amp;QmlMqttClient::portChanged);
    connect(&amp;amp;m_client, &amp;amp;QMqttClient::stateChanged, this, &amp;amp;QmlMqttClient::stateChanged);
}
</db:programlisting>
<db:para>We use the <db:code>subscribe()</db:code> function to create a subscription object:</db:para>
<db:programlisting language="cpp">void QmlMqttClient::connectToHost()
{
    m_client.connectToHost();
}
</db:programlisting>
<db:para>We connect to QMqttSubscription::messageReceived( ) to receive all messages sent to the broker:</db:para>
<db:programlisting language="cpp">void QmlMqttClient::disconnectFromHost()
{
    m_client.disconnectFromHost();
}
</db:programlisting>
<db:para>We use an QMqttMessage object to store the payload of a received message:</db:para>
<db:programlisting language="cpp">void QmlMqttSubscription::handleMessage(const QMqttMessage &amp;amp;qmsg)
{
    emit messageReceived(qmsg.payload());
}
</db:programlisting>
</db:section>
<db:section xml:id="registering-classes-in-qml">
<db:title>Registering Classes in QML</db:title>
<db:para>In the <db:code>main.cpp</db:code> file, we register the <db:code>QmlMqttClient</db:code> class as a QML type, MqttClient:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);
    QQmlApplicationEngine engine;

    QObject::connect(
            &amp;amp;engine, &amp;amp;QQmlApplicationEngine::objectCreationFailed, &amp;amp;app,
            []() { QCoreApplication::exit(EXIT_FAILURE); }, Qt::QueuedConnection);

    engine.loadFromModule(u&quot;subscription&quot;_s, u&quot;Main&quot;_s);

    return QGuiApplication::exec();
}
</db:programlisting>
<db:para>In addition, we register the <db:code>QmlMqttSubscription</db:code> class as an uncreatable type:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>We can now use the MqttClient type in the <db:code>main.qml</db:code> file to create an MQTT client:</db:para>
<db:programlisting language="cpp">    MqttClient {
        id: client
        hostname: hostnameField.text
        port: portField.text
    }
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="quicksubscription/CMakeLists.txt">quicksubscription/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quicksubscription/Main.qml">quicksubscription/Main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quicksubscription/main.cpp">quicksubscription/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quicksubscription/qmldir">quicksubscription/qmldir</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quicksubscription/qmlmqttclient.cpp">quicksubscription/qmlmqttclient.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quicksubscription/qmlmqttclient.h">quicksubscription/qmlmqttclient.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quicksubscription/quicksubscription.pro">quicksubscription/quicksubscription.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
