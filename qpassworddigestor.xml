<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPasswordDigestor Namespace</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpassworddigestor.xml">QPasswordDigestor</db:link> namespace contains functions which you can use to generate hashes or keys.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPasswordDigestor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="deriveKeyPbkdf1">
<db:title>[since 5.12] QByteArray QPasswordDigestor::deriveKeyPbkdf1(QCryptographicHash::Algorithm <db:emphasis>algorithm</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QByteArray &amp;<db:emphasis>salt</db:emphasis>, int <db:emphasis>iterations</db:emphasis>, quint64 <db:emphasis>dkLen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QByteArray</db:type>
<db:methodname>deriveKeyPbkdf1</db:methodname>
<db:methodparam>
<db:type>QCryptographicHash::Algorithm</db:type>
<db:parameter>algorithm</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>salt</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>iterations</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>quint64</db:type>
<db:parameter>dkLen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray deriveKeyPbkdf1(QCryptographicHash::Algorithm algorithm, const QByteArray &amp;data, const QByteArray &amp;salt, int iterations, quint64 dkLen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a hash computed using the PBKDF1-algorithm as defined in <db:link xlink:href="https://tools.ietf.org/html/rfc8018#section-5.1">RFC 8018</db:link>.</db:para>
<db:para>The function takes the <db:code role="parameter">data</db:code> and <db:code role="parameter">salt</db:code>, and then hashes it repeatedly for <db:code role="parameter">iterations</db:code> iterations using the specified hash <db:code role="parameter">algorithm</db:code>. If the resulting hash is longer than <db:code role="parameter">dkLen</db:code> then it is truncated before it is returned.</db:para>
<db:para>This function only supports SHA-1 and MD5! The max output size is 160 bits (20 bytes) when using SHA-1, or 128 bits (16 bytes) when using MD5. Specifying a value for <db:code role="parameter">dkLen</db:code> which is greater than this results in a warning and an empty <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is returned. To programmatically check this limit you can use <db:link xlink:href="qcryptographichash.xml#hashLength">QCryptographicHash::hashLength</db:link>. Furthermore: the <db:code role="parameter">salt</db:code> must always be 8 bytes long!</db:para>
<db:note>
<db:para>This function is provided for use with legacy applications and all new applications are recommended to use <db:link xlink:href="qpassworddigestor.xml#deriveKeyPbkdf2">PBKDF2</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpassworddigestor.xml#deriveKeyPbkdf2">deriveKeyPbkdf2</db:link></db:member>
<db:member><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:member>
<db:member><db:link xlink:href="qcryptographichash.xml#hashLength">QCryptographicHash::hashLength</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deriveKeyPbkdf2">
<db:title>[since 5.12] QByteArray QPasswordDigestor::deriveKeyPbkdf2(QCryptographicHash::Algorithm <db:emphasis>algorithm</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QByteArray &amp;<db:emphasis>salt</db:emphasis>, int <db:emphasis>iterations</db:emphasis>, quint64 <db:emphasis>dkLen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QByteArray</db:type>
<db:methodname>deriveKeyPbkdf2</db:methodname>
<db:methodparam>
<db:type>QCryptographicHash::Algorithm</db:type>
<db:parameter>algorithm</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>salt</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>iterations</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>quint64</db:type>
<db:parameter>dkLen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray deriveKeyPbkdf2(QCryptographicHash::Algorithm algorithm, const QByteArray &amp;data, const QByteArray &amp;salt, int iterations, quint64 dkLen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Derive a key using the PBKDF2-algorithm as defined in <db:link xlink:href="https://tools.ietf.org/html/rfc8018#section-5.2">RFC 8018</db:link>.</db:para>
<db:para>This function takes the <db:code role="parameter">data</db:code> and <db:code role="parameter">salt</db:code>, and then applies HMAC-X, where the X is <db:code role="parameter">algorithm</db:code>, repeatedly. It internally concatenates intermediate results to the final output until at least <db:code role="parameter">dkLen</db:code> amount of bytes have been computed and it will execute HMAC-X <db:code role="parameter">iterations</db:code> times each time a concatenation is required. The total number of times it will execute HMAC-X depends on <db:code role="parameter">iterations</db:code>, <db:code role="parameter">dkLen</db:code> and <db:code role="parameter">algorithm</db:code> and can be calculated as iterations * ceil(dkLen / QCryptographicHash::hashLength(algorithm)).</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpassworddigestor.xml#deriveKeyPbkdf1">deriveKeyPbkdf1</db:link></db:member>
<db:member><db:link xlink:href="qmessageauthenticationcode.xml">QMessageAuthenticationCode</db:link></db:member>
<db:member><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
