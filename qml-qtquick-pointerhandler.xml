<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PointerHandler QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Abstract handler for pointer events.</db:para>
<db:para><db:emphasis role="bold">This type is under development and is subject to change.</db:emphasis></db:para>
<db:para>This type was introduced in Qt 5.10.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.10</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-pointerdevicehandler.xml" xlink:role="">PointerDeviceHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> is the base class Input Handler (not registered as a QML type) for events from any kind of pointing device (touch, mouse or graphics tablet).</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>[read-only] active : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds true whenever this Input Handler has taken sole responsibility for handing one or more EventPoints, by successfully taking an exclusive grab of those points. This means that it is keeping its properties up-to-date according to the movements of those Event Points and actively manipulating its <db:link xlink:href="qml-qtquick-pointerhandler.xml#target-prop">target</db:link> (if any).</db:para>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If a <db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> is disabled, it will reject all events and no signals will be emitted.</db:para>
</db:section>
<db:section xml:id="grabPermissions-prop">
<db:title>grabPermissions : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>grabPermissions</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies the permissions when this handler's logic decides to take over the exclusive grab, or when it is asked to approve grab takeover or cancellation by another handler.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PointerHandler.TakeOverForbidden</db:para>
</db:td>
<db:td>
<db:para>This handler neither takes from nor gives grab permission to any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from another handler of the same class.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any kind of handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromAnything</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for another handler of the same class to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of handler to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByItems</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of Item to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesCancellation</db:para>
</db:td>
<db:td>
<db:para>This handler will allow its grab to be set to null.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByAnything</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any any type of Item or Handler to take the grab.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default is <db:code>PointerHandler.CanTakeOverFromItems | PointerHandler.CanTakeOverFromHandlersOfDifferentType | PointerHandler.ApprovesTakeOverByAnything</db:code> which allows most takeover scenarios but avoids e.g. two PinchHandlers fighting over the same touchpoints.</db:para>
</db:section>
<db:section xml:id="margin-prop">
<db:title>margin : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>margin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The margin beyond the bounds of the <db:link xlink:href="qml-qtquick-pointerhandler.xml#parent-prop">parent</db:link> item within which an event point can activate this handler. For example, on a <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> where the <db:link xlink:href="qml-qtquick-pointerhandler.xml#target-prop">target</db:link> is also the <db:code>parent</db:code>, it's useful to set this to a distance at least half the width of a typical user's finger, so that if the <db:code>parent</db:code> has been scaled down to a very small size, the pinch gesture is still possible. Or, if a <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link>-based button is placed near the screen edge, it can be used to comply with Fitts's Law: react to mouse clicks at the screen edge even though the button is visually spaced away from the edge by a few pixels.</db:para>
<db:para>The default value is 0.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerHandlerMargin.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="parent-prop">
<db:title>[read-only] parent : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>parent</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> which is the scope of the handler; the Item in which it was declared. The handler will handle events on behalf of this Item, which means a pointer event is relevant if at least one of its event points occurs within the Item's interior. Initially <db:link xlink:href="qml-qtquick-pointerhandler.xml#target-prop">target()</db:link> is the same, but it can be reassigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pointerhandler.xml#target-prop">target</db:link></db:member>
<db:member><db:link xlink:href="">QObject::parent()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>target</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The Item which this handler will manipulate.</db:para>
<db:para>By default, it is the same as the <db:link xlink:href="qml-qtquick-pointerhandler.xml#parent-prop">parent</db:link>, the Item within which the handler is declared. However, it can sometimes be useful to set the target to a different Item, in order to handle events within one item but manipulate another; or to <db:code>null</db:code>, to disable the default behavior and do something else instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="canceled-signal">
<db:title>canceled(EventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>If this handler has already grabbed the given <db:code role="parameter">point</db:code>, this signal is emitted when the grab is stolen by a different Pointer Handler or Item.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCanceled</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="grabChanged-signal">
<db:title>grabChanged(GrabTransition <db:emphasis>transition</db:emphasis>, EventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>This signal is emitted when the grab has changed in some way which is relevant to this handler.</db:para>
<db:para>The <db:code role="parameter">transition</db:code> (verb) tells what happened. The <db:code role="parameter">point</db:code> (object) is the point that was grabbed or ungrabbed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onGrabChanged</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
