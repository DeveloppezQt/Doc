<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Bluetooth File Transfer Example</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example showing the use of Bluetooth Object Push Profile (OPP).</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtBluetooth module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;remoteselector.h&quot;
#include &quot;ui_remoteselector.h&quot;

#include &amp;lt;qbluetoothdeviceinfo.h&amp;gt;
#include &amp;lt;qbluetoothaddress.h&amp;gt;
#include &amp;lt;qbluetoothtransferrequest.h&amp;gt;
#include &amp;lt;qbluetoothtransferreply.h&amp;gt;
#include &amp;lt;qbluetoothlocaldevice.h&amp;gt;

#include &amp;lt;QMovie&amp;gt;
#include &amp;lt;QMessageBox&amp;gt;
#include &amp;lt;QFileDialog&amp;gt;
#include &amp;lt;QCheckBox&amp;gt;

#include &quot;progress.h&quot;
#include &quot;pindisplay.h&quot;

QT_USE_NAMESPACE

RemoteSelector::RemoteSelector(QWidget *parent)
:   QDialog(parent), ui(new Ui::RemoteSelector),
    m_localDevice(new QBluetoothLocalDevice), m_pindisplay(0),
    m_pairingError(false)
{
    ui-&amp;gt;setupUi(this);

    //Using default Bluetooth adapter
    QBluetoothAddress adapterAddress = m_localDevice-&amp;gt;address();

    /*
     * In case of multiple Bluetooth adapters it is possible to
     * set which adapter will be used by providing MAC Address.
     * Example code:
     *
     * QBluetoothAddress adapterAddress(&quot;XX:XX:XX:XX:XX:XX&quot;);
     * m_discoveryAgent = new QBluetoothServiceDiscoveryAgent(adapterAddress);
     */

    m_discoveryAgent = new QBluetoothServiceDiscoveryAgent(adapterAddress);

    connect(m_discoveryAgent, SIGNAL(serviceDiscovered(QBluetoothServiceInfo)),
            this, SLOT(serviceDiscovered(QBluetoothServiceInfo)));
    connect(m_discoveryAgent, SIGNAL(finished()), this, SLOT(discoveryFinished()));
    connect(m_discoveryAgent, SIGNAL(canceled()), this, SLOT(discoveryFinished()));

    ui-&amp;gt;remoteDevices-&amp;gt;setColumnWidth(3, 75);
    ui-&amp;gt;remoteDevices-&amp;gt;setColumnWidth(4, 100);

    connect(m_localDevice, SIGNAL(pairingDisplayPinCode(QBluetoothAddress,QString)),
            this, SLOT(displayPin(QBluetoothAddress,QString)));
    connect(m_localDevice, SIGNAL(pairingDisplayConfirmation(QBluetoothAddress,QString)),
            this, SLOT(displayConfirmation(QBluetoothAddress,QString)));
    connect(m_localDevice, SIGNAL(pairingFinished(QBluetoothAddress,QBluetoothLocalDevice::Pairing)),
            this, SLOT(pairingFinished(QBluetoothAddress,QBluetoothLocalDevice::Pairing)));
    connect(m_localDevice, SIGNAL(error(QBluetoothLocalDevice::Error)),
            this, SLOT(pairingError(QBluetoothLocalDevice::Error)));

    ui-&amp;gt;busyWidget-&amp;gt;setMovie(new QMovie(&quot;:/icons/busy.gif&quot;));
    ui-&amp;gt;busyWidget-&amp;gt;movie()-&amp;gt;start();

    ui-&amp;gt;pairingBusy-&amp;gt;setMovie(new QMovie(&quot;:/icons/pairing.gif&quot;));
    ui-&amp;gt;pairingBusy-&amp;gt;hide();

    ui-&amp;gt;remoteDevices-&amp;gt;clearContents();
    ui-&amp;gt;remoteDevices-&amp;gt;setRowCount(0);
}

RemoteSelector::~RemoteSelector()
{
    delete ui;
    delete m_discoveryAgent;
    delete m_localDevice;
}

void RemoteSelector::startDiscovery(const QBluetoothUuid &amp;amp;uuid)
{
    ui-&amp;gt;stopButton-&amp;gt;setDisabled(false);
    if (m_discoveryAgent-&amp;gt;isActive())
        m_discoveryAgent-&amp;gt;stop();

    m_discoveryAgent-&amp;gt;setUuidFilter(uuid);
    m_discoveryAgent-&amp;gt;start();

    if (!m_discoveryAgent-&amp;gt;isActive() ||
            m_discoveryAgent-&amp;gt;error() != QBluetoothServiceDiscoveryAgent::NoError) {
        ui-&amp;gt;status-&amp;gt;setText(tr(&quot;Cannot find remote services.&quot;));
    } else {
        ui-&amp;gt;status-&amp;gt;setText(tr(&quot;Scanning...&quot;));
        ui-&amp;gt;busyWidget-&amp;gt;show();
        ui-&amp;gt;busyWidget-&amp;gt;movie()-&amp;gt;start();
    }
}

QBluetoothServiceInfo RemoteSelector::service() const
{
    return m_service;
}

void RemoteSelector::serviceDiscovered(const QBluetoothServiceInfo &amp;amp;serviceInfo)
{
#if 0
    qDebug() &amp;lt;&amp;lt; &quot;Discovered service on&quot;
             &amp;lt;&amp;lt; serviceInfo.device().name() &amp;lt;&amp;lt; serviceInfo.device().address().toString();
    qDebug() &amp;lt;&amp;lt; &quot;\tService name:&quot; &amp;lt;&amp;lt; serviceInfo.serviceName();
    qDebug() &amp;lt;&amp;lt; &quot;\tDescription:&quot;
             &amp;lt;&amp;lt; serviceInfo.attribute(QBluetoothServiceInfo::ServiceDescription).toString();
    qDebug() &amp;lt;&amp;lt; &quot;\tProvider:&quot;
             &amp;lt;&amp;lt; serviceInfo.attribute(QBluetoothServiceInfo::ServiceProvider).toString();
    qDebug() &amp;lt;&amp;lt; &quot;\tL2CAP protocol service multiplexer:&quot;
             &amp;lt;&amp;lt; serviceInfo.protocolServiceMultiplexer();
    qDebug() &amp;lt;&amp;lt; &quot;\tRFCOMM server channel:&quot; &amp;lt;&amp;lt; serviceInfo.serverChannel();
#endif

    QString remoteName;
    if (serviceInfo.device().name().isEmpty())
        remoteName = serviceInfo.device().address().toString();
    else
        remoteName = serviceInfo.device().name();

//    QListWidgetItem *item =
//        new QListWidgetItem(QString::fromLatin1(&quot;%1\t%2\t%3&quot;).arg(serviceInfo.device().address().toString(),
//                                                             serviceInfo.device().name(), serviceInfo.serviceName()));

    QMutableMapIterator&amp;lt;int, QBluetoothServiceInfo&amp;gt; i(m_discoveredServices);
    while (i.hasNext()){
        i.next();
        if (serviceInfo.device().address() == i.value().device().address()){
            i.setValue(serviceInfo);
            return;
        }
    }

    int row = ui-&amp;gt;remoteDevices-&amp;gt;rowCount();
    ui-&amp;gt;remoteDevices-&amp;gt;insertRow(row);
    QTableWidgetItem *item = new QTableWidgetItem(serviceInfo.device().address().toString());
    ui-&amp;gt;remoteDevices-&amp;gt;setItem(row, 0, item);
    item = new QTableWidgetItem(serviceInfo.device().name());
    ui-&amp;gt;remoteDevices-&amp;gt;setItem(row, 1, item);
    item = new QTableWidgetItem(serviceInfo.serviceName());

    ui-&amp;gt;remoteDevices-&amp;gt;setItem(row, 2, item);

    QBluetoothLocalDevice::Pairing p;

    p = m_localDevice-&amp;gt;pairingStatus(serviceInfo.device().address());

    ui-&amp;gt;remoteDevices-&amp;gt;blockSignals(true);

    item = new QTableWidgetItem();
    if ((p&amp;amp;QBluetoothLocalDevice::Paired) || (p&amp;amp;QBluetoothLocalDevice::AuthorizedPaired))
        item-&amp;gt;setCheckState(Qt::Checked);
    else
        item-&amp;gt;setCheckState(Qt::Unchecked);
    ui-&amp;gt;remoteDevices-&amp;gt;setItem(row, 3, item);

    item = new QTableWidgetItem();
    if (p&amp;amp;QBluetoothLocalDevice::AuthorizedPaired)
        item-&amp;gt;setCheckState(Qt::Checked);
    else
        item-&amp;gt;setCheckState(Qt::Unchecked);

    ui-&amp;gt;remoteDevices-&amp;gt;setItem(row, 4, item);

    ui-&amp;gt;remoteDevices-&amp;gt;blockSignals(false);

    m_discoveredServices.insert(row, serviceInfo);
}

void RemoteSelector::discoveryFinished()
{
    ui-&amp;gt;status-&amp;gt;setText(tr(&quot;Select the device to send to.&quot;));
    ui-&amp;gt;stopButton-&amp;gt;setDisabled(true);
    ui-&amp;gt;busyWidget-&amp;gt;movie()-&amp;gt;stop();
    ui-&amp;gt;busyWidget-&amp;gt;hide();
}

void RemoteSelector::startDiscovery()
{
    startDiscovery(QBluetoothUuid(QBluetoothUuid::ObexObjectPush));
}

void RemoteSelector::on_refreshPB_clicked()
{
    startDiscovery();
    ui-&amp;gt;stopButton-&amp;gt;setDisabled(false);
}

void RemoteSelector::on_fileSelectPB_clicked()
{
    ui-&amp;gt;fileName-&amp;gt;setText(QFileDialog::getOpenFileName());
    if (m_service.isValid())
        ui-&amp;gt;sendButton-&amp;gt;setDisabled(false);
}

void RemoteSelector::on_sendButton_clicked()
{
    QBluetoothTransferManager mgr;
    QBluetoothTransferRequest req(m_service.device().address());

    m_file = new QFile(ui-&amp;gt;fileName-&amp;gt;text());

    Progress *p = new Progress;
    p-&amp;gt;setStatus(&quot;Sending to: &quot; + m_service.device().name(), &quot;Waiting for start&quot;);
    p-&amp;gt;show();

    QBluetoothTransferReply *reply = mgr.put(req, m_file);
    //mgr is default parent
    //ensure that mgr doesn't take reply down when leaving scope
    reply-&amp;gt;setParent(this);
    if (reply-&amp;gt;error()){
        qDebug() &amp;lt;&amp;lt; &quot;Failed to send file&quot;;
        p-&amp;gt;finished(reply);
        reply-&amp;gt;deleteLater();
        return;
    }

    connect(reply, SIGNAL(transferProgress(qint64,qint64)), p, SLOT(uploadProgress(qint64,qint64)));
    connect(reply, SIGNAL(finished(QBluetoothTransferReply*)), p, SLOT(finished(QBluetoothTransferReply*)));
    connect(p, SIGNAL(rejected()), reply, SLOT(abort()));
}

void RemoteSelector::on_stopButton_clicked()
{
    m_discoveryAgent-&amp;gt;stop();
}

QString RemoteSelector::addressToName(const QBluetoothAddress &amp;amp;address)
{
    QMapIterator&amp;lt;int, QBluetoothServiceInfo&amp;gt; i(m_discoveredServices);
    while (i.hasNext()){
        i.next();
        if (i.value().device().address() == address)
            return i.value().device().name();
    }
    return address.toString();
}

void RemoteSelector::displayPin(const QBluetoothAddress &amp;amp;address, QString pin)
{
    if (m_pindisplay)
        m_pindisplay-&amp;gt;deleteLater();
    m_pindisplay = new pinDisplay(QString(&quot;Enter pairing pin on: %1&quot;).arg(addressToName(address)), pin, this);
    m_pindisplay-&amp;gt;show();
}

void RemoteSelector::displayConfirmation(const QBluetoothAddress &amp;amp;address, QString pin)
{
    Q_UNUSED(address);

    if (m_pindisplay)
        m_pindisplay-&amp;gt;deleteLater();
    m_pindisplay = new pinDisplay(QString(&quot;Confirm this pin is the same&quot;), pin, this);
    connect(m_pindisplay, SIGNAL(accepted()), this, SLOT(displayConfAccepted()));
    connect(m_pindisplay, SIGNAL(rejected()), this, SLOT(displayConfReject()));
    m_pindisplay-&amp;gt;setOkCancel();
    m_pindisplay-&amp;gt;show();
}

void RemoteSelector::displayConfAccepted()
{
    m_localDevice-&amp;gt;pairingConfirmation(true);
}
void RemoteSelector::displayConfReject()
{
    m_localDevice-&amp;gt;pairingConfirmation(false);
}

void RemoteSelector::pairingFinished(const QBluetoothAddress &amp;amp;address, QBluetoothLocalDevice::Pairing status)
{
    QBluetoothServiceInfo service;
    int row = 0;

    ui-&amp;gt;pairingBusy-&amp;gt;hide();
    ui-&amp;gt;pairingBusy-&amp;gt;movie()-&amp;gt;stop();

    ui-&amp;gt;remoteDevices-&amp;gt;blockSignals(true);

    for (int i = 0; i &amp;lt; m_discoveredServices.count(); i++){
        if (m_discoveredServices.value(i).device().address() == address){
            service = m_discoveredServices.value(i);
            row = i;
            break;
        }
    }

    if (m_pindisplay)
        delete m_pindisplay;

    QMessageBox msgBox;
    if (m_pairingError) {
        msgBox.setText(&quot;Pairing failed with &quot; + address.toString());
    } else if (status == QBluetoothLocalDevice::Paired
               || status == QBluetoothLocalDevice::AuthorizedPaired) {
        msgBox.setText(&quot;Paired successfully with &quot; + address.toString());
    } else {
        msgBox.setText(&quot;Pairing released with &quot; + address.toString());
    }

    if (service.isValid()){
        if (status == QBluetoothLocalDevice::AuthorizedPaired){
            ui-&amp;gt;remoteDevices-&amp;gt;item(row, 3)-&amp;gt;setCheckState(Qt::Checked);
            ui-&amp;gt;remoteDevices-&amp;gt;item(row, 4)-&amp;gt;setCheckState(Qt::Checked);
        }
        else if (status == QBluetoothLocalDevice::Paired){
            ui-&amp;gt;remoteDevices-&amp;gt;item(row, 3)-&amp;gt;setCheckState(Qt::Checked);
            ui-&amp;gt;remoteDevices-&amp;gt;item(row, 4)-&amp;gt;setCheckState(Qt::Unchecked);
        }
        else {
            ui-&amp;gt;remoteDevices-&amp;gt;item(row, 3)-&amp;gt;setCheckState(Qt::Unchecked);
            ui-&amp;gt;remoteDevices-&amp;gt;item(row, 4)-&amp;gt;setCheckState(Qt::Unchecked);
        }
    }

    m_pairingError = false;
    msgBox.exec();

    ui-&amp;gt;remoteDevices-&amp;gt;blockSignals(false);
}

void RemoteSelector::pairingError(QBluetoothLocalDevice::Error error)
{
    if (error != QBluetoothLocalDevice::PairingError)
        return;

    m_pairingError = true;
    pairingFinished(m_service.device().address(), QBluetoothLocalDevice::Unpaired);
}

void RemoteSelector::on_remoteDevices_cellClicked(int row, int column)
{
    Q_UNUSED(column);

    m_service = m_discoveredServices.value(row);
    if (!ui-&amp;gt;fileName-&amp;gt;text().isEmpty()) {
        ui-&amp;gt;sendButton-&amp;gt;setDisabled(false);
    }
}

void RemoteSelector::on_remoteDevices_itemChanged(QTableWidgetItem* item)
{
    int row = item-&amp;gt;row();
    int column = item-&amp;gt;column();
    m_service = m_discoveredServices.value(row);

    if (column &amp;lt; 3)
        return;

    if (item-&amp;gt;checkState() == Qt::Unchecked &amp;amp;&amp;amp; column == 3){
        m_localDevice-&amp;gt;requestPairing(m_service.device().address(), QBluetoothLocalDevice::Unpaired);
        return; // don't continue and start movie
    }
    else if ((item-&amp;gt;checkState() == Qt::Checked &amp;amp;&amp;amp; column == 3) ||
            (item-&amp;gt;checkState() == Qt::Unchecked &amp;amp;&amp;amp; column == 4)){
        m_localDevice-&amp;gt;requestPairing(m_service.device().address(), QBluetoothLocalDevice::Paired);
        ui-&amp;gt;remoteDevices-&amp;gt;blockSignals(true);
        ui-&amp;gt;remoteDevices-&amp;gt;item(row, column)-&amp;gt;setCheckState(Qt::PartiallyChecked);
        ui-&amp;gt;remoteDevices-&amp;gt;blockSignals(false);
    }
    else if (item-&amp;gt;checkState() == Qt::Checked &amp;amp;&amp;amp; column == 4){
        m_localDevice-&amp;gt;requestPairing(m_service.device().address(), QBluetoothLocalDevice::AuthorizedPaired);
        ui-&amp;gt;remoteDevices-&amp;gt;blockSignals(true);
        ui-&amp;gt;remoteDevices-&amp;gt;item(row, column)-&amp;gt;setCheckState(Qt::PartiallyChecked);
        ui-&amp;gt;remoteDevices-&amp;gt;blockSignals(false);
    }
    ui-&amp;gt;pairingBusy-&amp;gt;show();
    ui-&amp;gt;pairingBusy-&amp;gt;movie()-&amp;gt;start();
}

</db:programlisting>
</db:article>
