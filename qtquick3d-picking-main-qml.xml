<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Picking example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates picking of models.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick.Controls
import QtQuick3D

Window {
    visible: true
    width: 800
    height: 500
    title: qsTr(&quot;Picking Example&quot;)
    color: &quot;#848895&quot;

    Row {
        anchors.left: parent.left
        anchors.leftMargin: 8
        spacing: 10
        Column {
            Label {
                color: &quot;white&quot;
                font.pointSize: 14
                text: &quot;Last Pick:&quot;
            }
            Label {
                color: &quot;white&quot;
                font.pointSize: 14
                text: &quot;Screen Position:&quot;
            }
            Label {
                color: &quot;white&quot;
                font.pointSize: 14
                text: &quot;UV Position:&quot;
            }
            Label {
                color: &quot;white&quot;
                font.pointSize: 14
                text: &quot;Distance:&quot;
            }
            Label {
                color: &quot;white&quot;
                font.pointSize: 14
                text: &quot;World Position:&quot;
            }
            Label {
                color: &quot;white&quot;
                font.pointSize: 14
                text: &quot;Local Position:&quot;
            }

            Label {
                color: &quot;white&quot;
                font.pointSize: 14
                text: &quot;World Normal:&quot;
            }
            Label {
                color: &quot;white&quot;
                font.pointSize: 14
                text: &quot;Local Normal:&quot;
            }
        }
        Column {
            Label {
                id: pickName
                color: &quot;white&quot;
                font.pointSize: 14
            }
            Label {
                id: pickPosition
                color: &quot;white&quot;
                font.pointSize: 14
            }
            Label {
                id: uvPosition
                color: &quot;white&quot;
                font.pointSize: 14
            }
            Label {
                id: distance
                color: &quot;white&quot;
                font.pointSize: 14
            }
            Label {
                id: scenePosition
                color: &quot;white&quot;
                font.pointSize: 14
            }
            Label {
                id: localPosition
                color: &quot;white&quot;
                font.pointSize: 14
            }
            Label {
                id: worldNormal
                color: &quot;white&quot;
                font.pointSize: 14
            }
            Label {
                id: localNormal
                color: &quot;white&quot;
                font.pointSize: 14
            }

        }
    }

    View3D {
        id: view
        anchors.fill: parent
        renderMode: View3D.Underlay

        PointLight {
            x: -200
            y: 200
            z: 300
            quadraticFade: 0
            brightness: 1.5
        }

        PerspectiveCamera {
            z: 500
        }

        Model {
            id: cubeModel
            objectName: &quot;Cube&quot;
            source: &quot;#Cube&quot;
            pickable: true
            property bool isPicked: false

            scale.x: 1.5
            scale.y: 2
            scale.z: 1.5

            materials: DefaultMaterial {
                diffuseColor: cubeModel.isPicked ? &quot;#41cd52&quot; : &quot;#09102b&quot;
                specularAmount: 0.25
                specularRoughness: 0.2
                roughnessMap: Texture { source: &quot;maps/roughness.jpg&quot; }
            }

            SequentialAnimation on eulerRotation {
                running: !cubeModel.isPicked
                loops: Animation.Infinite
                PropertyAnimation {
                    duration: 2500
                    from: Qt.vector3d(0, 0, 0)
                    to: Qt.vector3d(360, 360, 360)
                }
            }
        }

        Model {
            id: coneModel
            objectName: &quot;Cone&quot;
            source: &quot;#Cone&quot;
            pickable: true
            property bool isPicked: false

            x: 200
            z: 100

            scale.x: 2
            scale.y: 1.5
            scale.z: 2

            materials: DefaultMaterial {
                diffuseColor: coneModel.isPicked ? &quot;#21be2b&quot; : &quot;#53586b&quot;
                specularAmount: 1
                specularRoughness: 0.1
                roughnessMap: Texture { source: &quot;maps/roughness.jpg&quot; }
            }

            SequentialAnimation on eulerRotation {
                running: !coneModel.isPicked
                loops: Animation.Infinite
                PropertyAnimation {
                    duration: 10000
                    from: Qt.vector3d(0, 0, 0)
                    to: Qt.vector3d(-360, 360, 0)
                }
            }
        }

        Model {
            id: sphereModel
            objectName: &quot;Sphere&quot;
            source: &quot;#Sphere&quot;
            pickable: true
            property bool isPicked: false

            x: -100
            y: -100
            z: -100

            scale.x: 5
            scale.y: 3
            scale.z: 1

            materials: DefaultMaterial {
                diffuseColor: sphereModel.isPicked ? &quot;#17a81a&quot; : &quot;#9d9faa&quot;
                specularAmount: 0.25
                specularRoughness: 0.2
                roughnessMap: Texture { source: &quot;maps/roughness.jpg&quot; }
            }

            SequentialAnimation on eulerRotation.x {
                running: !sphereModel.isPicked
                loops: Animation.Infinite
                PropertyAnimation {
                    duration: 5000
                    from: 0
                    to: 360
                }
            }
        }
    }

    MouseArea {
        anchors.fill: view

        onClicked: {
            // Get screen coordinates of the click
            pickPosition.text = &quot;(&quot; + mouse.x + &quot;, &quot; + mouse.y + &quot;)&quot;
            var result = view.pick(mouse.x, mouse.y);
            if (result.objectHit) {
                var pickedObject = result.objectHit;
                // Toggle the isPicked property for the model
                pickedObject.isPicked = !pickedObject.isPicked;
                // Get picked model name
                pickName.text = pickedObject.objectName;
                // Get other pick specifics
                uvPosition.text = &quot;(&quot;
                        + result.uvPosition.x.toFixed(2) + &quot;, &quot;
                        + result.uvPosition.y.toFixed(2) + &quot;)&quot;;
                distance.text = result.distance.toFixed(2);
                scenePosition.text = &quot;(&quot;
                        + result.scenePosition.x.toFixed(2) + &quot;, &quot;
                        + result.scenePosition.y.toFixed(2) + &quot;, &quot;
                        + result.scenePosition.z.toFixed(2) + &quot;)&quot;;
                localPosition.text = &quot;(&quot;
                        + result.position.x.toFixed(2) + &quot;, &quot;
                        + result.position.y.toFixed(2) + &quot;, &quot;
                        + result.position.z.toFixed(2) + &quot;)&quot;;
                worldNormal.text = &quot;(&quot;
                        + result.sceneNormal.x.toFixed(2) + &quot;, &quot;
                        + result.sceneNormal.y.toFixed(2) + &quot;, &quot;
                        + result.sceneNormal.z.toFixed(2) + &quot;)&quot;;
                localNormal.text = &quot;(&quot;
                        + result.normal.x.toFixed(2) + &quot;, &quot;
                        + result.normal.y.toFixed(2) + &quot;, &quot;
                        + result.normal.z.toFixed(2) + &quot;)&quot;;
            } else {
                pickName.text = &quot;None&quot;;
                uvPosition.text = &quot;&quot;;
                distance.text = &quot;&quot;;
                scenePosition.text = &quot;&quot;;
                localPosition.text = &quot;&quot;;
                worldNormal.text = &quot;&quot;;
                localNormal.text = &quot;&quot;;
            }
        }
    }
}

</db:programlisting>
</db:article>
