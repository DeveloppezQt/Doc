<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Restoring a Window's Geometry</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to save and restore window geometry.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This document describes how to save and restore a <db:link xlink:href="application-windows.xml#window-geometry">window's geometry</db:link> using the geometry properties. On Windows, this is basically storing the result of <db:link xlink:href="qwindow.xml#geometry">QWindow::geometry</db:link>() and calling <db:link xlink:href="qwindow.xml#setGeometry">QWindow::setGeometry</db:link>() in the next session before calling <db:link xlink:href="qwindow.xml#show">show</db:link>().</db:para>
<db:para>On X11, this might not work because an invisible window does not have a frame yet. The window manager will decorate the window later. When this happens, the window shifts towards the bottom/right corner of the screen depending on the size of the decoration frame. Although X provides a way to avoid this shift, some window managers fail to implement this feature.</db:para>
<db:para>When using <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link>, Qt provides functions that saves and restores a widget window's geometry and state for you. <db:link xlink:href="qwidget.xml#saveGeometry">QWidget::saveGeometry</db:link>() saves the window geometry and maximized/fullscreen state, while <db:link xlink:href="qwidget.xml#restoreGeometry">QWidget::restoreGeometry</db:link>() restores it. The restore function also checks if the restored geometry is outside the available screen geometry, and modifies it as appropriate if it is:</db:para>
<db:programlisting language="cpp">void MyMainWindow::closeEvent(QCloseEvent *event)
{
    QSettings settings(&quot;MyCompany&quot;, &quot;MyApp&quot;);
    settings.setValue(&quot;geometry&quot;, saveGeometry());
    settings.setValue(&quot;windowState&quot;, saveState());
    QMainWindow::closeEvent(event);
}
void MainWindow::readSettings()
{
    QSettings settings(&quot;MyCompany&quot;, &quot;MyApp&quot;);
    restoreGeometry(settings.value(&quot;myWidget/geometry&quot;).toByteArray());
    restoreState(settings.value(&quot;myWidget/windowState&quot;).toByteArray());
}
</db:programlisting>
<db:para>Another solution is to store both <db:link xlink:href="qwidget.xml#pos-prop">pos</db:link>() and <db:link xlink:href="qwidget.xml#size-prop">size</db:link>() and to restore the geometry using <db:link xlink:href="qwidget.xml#size-prop">QWidget::resize</db:link>() and <db:link xlink:href="qwidget.xml#pos-prop">move</db:link>() before calling <db:link xlink:href="qwidget.xml#show">show</db:link>().</db:para>
</db:article>
