<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CMake Variable Reference</db:title>
<db:productname>QtCMake</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Using Qt with CMake</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-qt5-and-qt6-compatibility.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt 5 and Qt 6 compatibility"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-property-reference.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="CMake Property Reference"/></db:extendedlink>
<db:abstract>
<db:para>Provides a complete reference for CMake variables implemented in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="module-variables">
<db:title>Module variables</db:title>
<db:para>Qt modules loaded with <db:code>find_package</db:code> set various variables.</db:para>
<db:note>
<db:para>You rarely need to access these variables directly. Common tasks like linking against a module should be done through the library targets each module defines.</db:para>
</db:note>
<db:para>For example, <db:code>find_package(Qt6 COMPONENTS Widgets)</db:code>, when successful, makes the following variables available:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Variable</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>Qt6Widgets_COMPILE_DEFINITIONS</db:code></db:para>
</db:td>
<db:td>
<db:para>A list of compile definitions to use when building against the library.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Qt6Widgets_DEFINITIONS</db:code></db:para>
</db:td>
<db:td>
<db:para>A list of definitions to use when building against the library.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Qt6Widgets_EXECUTABLE_COMPILE_FLAGS</db:code></db:para>
</db:td>
<db:td>
<db:para>A string of flags to use when building executables against the library.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Qt6Widgets_FOUND</db:code></db:para>
</db:td>
<db:td>
<db:para>A boolean that describes whether the module was found successfully.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Qt6Widgets_INCLUDE_DIRS</db:code></db:para>
</db:td>
<db:td>
<db:para>A list of include directories to use when building against the library.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Qt6Widgets_LIBRARIES</db:code></db:para>
</db:td>
<db:td>
<db:para>The name of the imported target for the module: <db:code>Qt5::Widgets</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Qt6Widgets_PRIVATE_INCLUDE_DIRS</db:code></db:para>
</db:td>
<db:td>
<db:para>A list of private include directories to use when building against the library and using private Qt API.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Qt6Widgets_VERSION_STRING</db:code></db:para>
</db:td>
<db:td>
<db:para>A string containing the module's version.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For all packages found with <db:code>find_package</db:code>, equivalents of these variables are available; they are case-sensitive.</db:para>
</db:section>
<db:section xml:id="installation-variables">
<db:title>Installation variables</db:title>
<db:para>Additionally, there are also variables that don't relate to a particular package, but to the Qt installation itself.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Variable</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:anchor xml:id="qt-default-major-version"/>
<db:para><db:code>QT_DEFAULT_MAJOR_VERSION</db:code></db:para>
</db:td>
<db:td>
<db:para>An integer that controls the Qt version that <db:code>qt_</db:code> commands forward to in case of mixed Qt 5 and Qt 6 projects. It needs to be set to either <db:code>5</db:code> or <db:code>6</db:code> before the respective <db:code>find_package()</db:code> calls.</db:para>
<db:para>If set to <db:code>5</db:code>, commands starting with <db:code>qt_</db:code> will call their counterpart starting with <db:code>qt5_</db:code>. If set to <db:code>6</db:code>, they will call their counterpart starting with <db:code>qt6_</db:code>.</db:para>
<db:para>If not set, the first <db:code>find_package</db:code> call defines the default version.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>QT_LIBINFIX</db:code></db:para>
</db:td>
<db:td>
<db:para>A string that holds the infix used in library names, when Qt is configured with <db:code>-libinfix</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:anchor xml:id="qt-no-create-versionless-functions"/>
<db:para><db:code>QT_NO_CREATE_VERSIONLESS_FUNCTIONS</db:code></db:para>
</db:td>
<db:td>
<db:para>Hides commands that start with <db:code>qt_</db:code>, leaving only the versioned ones starting with <db:code>qt6_</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:anchor xml:id="qt-no-create-versionless-targets"/>
<db:para><db:code>QT_NO_CREATE_VERSIONLESS_TARGETS</db:code></db:para>
</db:td>
<db:td>
<db:para>Hides the imported targets starting with <db:code>Qt::</db:code>. Instead, you need to use the targets starting with <db:code>Qt6::</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>QT_VISIBILITY_AVAILABLE</db:code></db:para>
</db:td>
<db:td>
<db:para>On Unix, a boolean that describes whether Qt libraries and plugins were compiled with <db:code>-fvisibility=hidden</db:code>. This means that only selected symbols are exported.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="project-variables">
<db:title>Project variables</db:title>
<db:para>These variables can influence CMake commands provided by Qt. They may be set by the project, a toolchain file or other third-party packages.</db:para>
<db:section xml:id="qt6-core">
<db:title>Qt6::Core</db:title>
<db:variablelist role="cmake-variables-qtcore">
<db:varlistentry>
<db:term><db:link xlink:href="cmake-variable-android-ndk-host-system-name.xml" xlink:role="page">ANDROID_NDK_HOST_SYSTEM_NAME</db:link></db:term>
<db:listitem>
<db:para>Android-specific architecture of the host system.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="cmake-variable-android-sdk-root.xml" xlink:role="page">ANDROID_SDK_ROOT</db:link></db:term>
<db:listitem>
<db:para>Location of the Android SDK.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="cmake-variable-qt-android-application-arguments.xml" xlink:role="page">QT_ANDROID_APPLICATION_ARGUMENTS</db:link></db:term>
<db:listitem>
<db:para>List of arguments to pass to Android applications.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="cmake-variable-qt-host-path.xml" xlink:role="page">QT_HOST_PATH</db:link></db:term>
<db:listitem>
<db:para>Location of the host Qt installation when cross-compiling.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
