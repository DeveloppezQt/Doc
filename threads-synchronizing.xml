<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Synchronizing Threads</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="threads-starting.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Starting Threads with QThread"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="threads-reentrancy.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Reentrancy and Thread-Safety"/></db:extendedlink>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>Thread Support in Qt</db:para>
<db:para>The <db:link xlink:href="qmutex.xml">QMutex</db:link>, <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link>, <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link>, and <db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link> classes provide means to synchronize threads. While the main idea with threads is that they should be as concurrent as possible, there are points where threads must stop and wait for other threads. For example, if two threads try to access the same global variable simultaneously, the results are usually undefined.</db:para>
<db:para><db:link xlink:href="qmutex.xml">QMutex</db:link> provides a mutually exclusive lock, or mutex. At most one thread can hold the mutex at any time. If a thread tries to acquire the mutex while the mutex is already locked, the thread will be put to sleep until the thread that currently holds the mutex unlocks it. Mutexes are often used to protect accesses to shared data (i.e., data that can be accessed from multiple threads simultaneously). In the <db:link xlink:href="threads-reentrancy.xml">Reentrancy and Thread-Safety</db:link> section below, we will use it to make a class thread-safe.</db:para>
<db:para><db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> is similar to <db:link xlink:href="qmutex.xml">QMutex</db:link>, except that it distinguishes between &quot;read&quot; and &quot;write&quot; access to shared data and allows multiple readers to access the data simultaneously. Using <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> instead of <db:link xlink:href="qmutex.xml">QMutex</db:link> when it is possible can make multithreaded programs more concurrent.</db:para>
<db:para><db:link xlink:href="qsemaphore.xml">QSemaphore</db:link> is a generalization of <db:link xlink:href="qmutex.xml">QMutex</db:link> that protects a certain number of identical resources. In contrast, a mutex protects exactly one resource. The Semaphores example shows a typical application of semaphores: synchronizing access to a circular buffer between a producer and a consumer.</db:para>
<db:para><db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link> allows a thread to wake up other threads when some condition has been met. One or many threads can block waiting for a <db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link> to set a condition with <db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>() or <db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>(). Use <db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>() to wake one randomly selected event or <db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>() to wake them all. The <db:link xlink:href="">Wait Conditions</db:link> example shows how to solve the producer-consumer problem using <db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link> instead of <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link>.</db:para>
<db:para>Note that Qt's synchronization classes rely on the use of properly aligned pointers. For instance, you cannot use packed classes with MSVC.</db:para>
</db:article>
