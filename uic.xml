<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>User Interface Compiler (uic)</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page documents the <db:emphasis>User Interface Compiler</db:emphasis> for the <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> module. The <db:code>uic</db:code> reads an XML format user interface definition (<db:code>.ui</db:code>) file as generated by <db:link xlink:href="qtdesigner-manual.xml">Qt Designer</db:link> and creates a corresponding C++ header file.</db:para>
<db:para>Usage:</db:para>
<db:programlisting language="cpp">uic [options] &amp;lt;uifile&amp;gt;
</db:programlisting>
<db:section xml:id="options">
<db:title>Options</db:title>
<db:para>The following table lists the command-line options recognized by <db:code>uic</db:code>.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>-o &lt;file&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Write output to <db:code>&lt;file&gt;</db:code> instead of to standard output.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-tr &lt;func&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Use <db:code>&lt;func&gt;</db:code> for translating strings instead of <db:code>tr()</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-p</db:code></db:para>
</db:td>
<db:td>
<db:para>Don't generate guards against multiple inclusion (<db:code>#ifndef</db:code> FOO_H ...).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-h</db:code></db:para>
</db:td>
<db:td>
<db:para>Display the usage and the list of options.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-v</db:code></db:para>
</db:td>
<db:td>
<db:para>Display <db:code>uic</db:code>'s version number.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-d</db:code></db:para>
</db:td>
<db:td>
<db:para>Display the dependencies for the UI.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-n</db:code></db:para>
</db:td>
<db:td>
<db:para>Don't generate any #include directives.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--postfix &lt;postfix&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Append <db:code>&lt;postfix&gt;</db:code> to all generated classnames.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--include &lt;file&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Add #include <db:code>&lt;file&gt;</db:code> to the output.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>If you use <db:code>qmake</db:code>, <db:code>uic</db:code> will be invoked automatically for header files.</db:para>
<db:para>Here are useful makefile rules if you only use GNU make:</db:para>
<db:programlisting language="cpp">ui_%.h: %.ui
        uic $&amp;lt; -o $@
</db:programlisting>
<db:para>If you want to write portably, you can use individual rules of the following form:</db:para>
<db:programlisting language="cpp">ui_foo.h: foo.ui
        uic $&amp;lt; -o $@
</db:programlisting>
<db:para>You must also remember to add <db:code>ui_foo.h</db:code> to your <db:code>HEADERS</db:code> (substitute your favorite name).</db:para>
</db:section>
</db:article>
