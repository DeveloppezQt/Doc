<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Common Rich Text Editing Tasks</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="richtext-layouts.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Document Layouts"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="richtext-advanced-processing.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Advanced Rich Text Processing"/></db:extendedlink>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>richtext.html Contents</db:para>
<db:para>There are a number of tasks that are often performed by developers when editing and processing text documents using Qt. These include the use of display widgets such as QTextBrowser and QTextEdit, creation of documents with QTextDocument, editing using a QTextCursor, and exporting the document structure. This document outlines some of the more common ways of using the rich text classes to perform these tasks, showing convenient patterns that can be reused in your own applications.</db:para>
<db:section xml:id="using-qtextedit">
<db:title>Using QTextEdit</db:title>
<db:para>A text editor widget can be constructed and used to display HTML in the following way:</db:para>
<db:programlisting language="cpp">QTextEdit *editor = new QTextEdit(parent);
editor-&amp;gt;setHtml(aStringContainingHTMLtext);
editor-&amp;gt;show();
</db:programlisting>
<db:para>By default, the text editor contains a document with a root frame, inside which is an empty text block. This document can be obtained so that it can be modified directly by the application:</db:para>
<db:programlisting language="cpp">QTextDocument *document = editor-&amp;gt;document();
</db:programlisting>
<db:para>The text editor's cursor may also be used to edit a document:</db:para>
<db:programlisting language="cpp">QTextCursor cursor = editor-&amp;gt;textCursor();
</db:programlisting>
<db:para>Although a document can be edited using many cursors at once, a QTextEdit only displays a single cursor at a time. Therefore, if we want to update the editor to display a particular cursor or its selection, we need to set the editor's cursor after we have modified the document:</db:para>
<db:programlisting language="cpp">editor-&amp;gt;setTextCursor(cursor);
</db:programlisting>
</db:section>
<db:section xml:id="selecting-text">
<db:title>Selecting Text</db:title>
<db:para>Text is selected by moving the cursor using operations that are similar to those performed by a user in a text editor. To select text between two points in the document, we need to position the cursor at the first point then move it using a special mode (<db:link xlink:href="">QTextCursor::MoveMode</db:link>) with a move operation (<db:link xlink:href="">QTextCursor::MoveOperation</db:link>). When we select the text, we leave the selection anchor at the old cursor position just as the user might do by holding down the Shift key when selecting text:</db:para>
<db:programlisting language="cpp">    cursor.movePosition(QTextCursor::StartOfWord);
    cursor.movePosition(QTextCursor::EndOfWord, QTextCursor::KeepAnchor);
</db:programlisting>
<db:para>In the above code, a whole word is selected using this method. QTextCursor provides a number of common move operations for selecting individual characters, words, lines, and whole blocks.</db:para>
</db:section>
<db:section xml:id="finding-text">
<db:title>Finding Text</db:title>
<db:para>QTextDocument provides a cursor-based interface for searching, making it easy to find and modify text in the style of a text editor. The following code finds all the instances of a particular word in a document, and changes the color of each:</db:para>
<db:programlisting language="cpp">    QTextCursor newCursor(document);

    while (!newCursor.isNull() &amp;amp;&amp;amp; !newCursor.atEnd()) {
        newCursor = document-&amp;gt;find(searchString, newCursor);

        if (!newCursor.isNull()) {
            newCursor.movePosition(QTextCursor::WordRight,
                                   QTextCursor::KeepAnchor);

            newCursor.mergeCharFormat(colorFormat);
        }
    }
</db:programlisting>
<db:para>Note that the cursor does not have to be moved after each search and replace operation; it is always positioned at the end of the word that was just replaced.</db:para>
</db:section>
<db:section xml:id="printing-documents">
<db:title>Printing Documents</db:title>
<db:para>QTextEdit is designed for the display of large rich text documents that are read on screen, rendering them in the same way as a web browser. As a result, it does not automatically break the contents of the document into page-sized pieces that are suitable for printing.</db:para>
<db:para>QTextDocument provides a <db:link xlink:href="">print()</db:link> function to allow documents to be printed using the QPrinter class. The following code shows how to prepare a document in a QTextEdit for printing with a QPrinter:</db:para>
<db:programlisting language="cpp">    QTextDocument *document = editor-&amp;gt;document();
    QPrinter printer;

    QPrintDialog *dlg = new QPrintDialog(&amp;amp;printer, this);
    if (dlg-&amp;gt;exec() != QDialog::Accepted)
        return;

    document-&amp;gt;print(&amp;amp;printer);
</db:programlisting>
<db:para>The document is obtained from the text editor, and a QPrinter is constructed then configured using a QPrintDialog. If the user accepts the printer's configuration then the document is formatted and printed using the <db:link xlink:href="">print()</db:link> function.</db:para>
</db:section>
</db:article>
