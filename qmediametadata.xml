<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaMetaData Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides meta-data for media files.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaMetaData</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>Not all identifiers are supported on all platforms.</db:para>
</db:note>
<db:informaltable style="generic" width="60%">
<db:thead>
<db:tr>
<db:th colspan="3">
<db:para>Common attributes</db:para>
</db:th>
</db:tr>
<db:tr>
<db:th>
<db:para>Value</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
<db:th>
<db:para>Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Title</db:para>
</db:td>
<db:td>
<db:para>The title of the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Author</db:para>
</db:td>
<db:td>
<db:para>The authors of the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Comment</db:para>
</db:td>
<db:td>
<db:para>A user comment about the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Description</db:para>
</db:td>
<db:td>
<db:para>A description of the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Genre</db:para>
</db:td>
<db:td>
<db:para>The genre of the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Date</db:para>
</db:td>
<db:td>
<db:para>The date of the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Language</db:para>
</db:td>
<db:td>
<db:para>The language of media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlocale.xml#Language-enum">QLocale::Language</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Publisher</db:para>
</db:td>
<db:td>
<db:para>The publisher of the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Copyright</db:para>
</db:td>
<db:td>
<db:para>The media's copyright notice.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Url</db:para>
</db:td>
<db:td>
<db:para>A Url pointing to the origin of the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th colspan="3">
<db:para>Media attributes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">MediaType</db:link></db:para>
</db:td>
<db:td>
<db:para>The type of the media (audio, video, etc).</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">FileFormat</db:link></db:para>
</db:td>
<db:td>
<db:para>The file format of the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmediaformat.xml#FileFormat-enum">QMediaFormat::FileFormat</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Duration</db:para>
</db:td>
<db:td>
<db:para>The duration in millseconds of the media.</db:para>
</db:td>
<db:td>
<db:para>qint64</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th colspan="3">
<db:para>Audio attributes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">AudioBitRate</db:link></db:para>
</db:td>
<db:td>
<db:para>The bit rate of the media's audio stream in bits per second.</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">AudioCodec</db:link></db:para>
</db:td>
<db:td>
<db:para>The codec of the media's audio stream.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmediaformat.xml#AudioCodec-enum">QMediaFormat::AudioCodec</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th colspan="3">
<db:para>Video attributes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">VideoFrameRate</db:link></db:para>
</db:td>
<db:td>
<db:para>The frame rate of the media's video stream.</db:para>
</db:td>
<db:td>
<db:para>qreal</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">VideoBitRate</db:link></db:para>
</db:td>
<db:td>
<db:para>The bit rate of the media's video stream in bits per second.</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">VideoCodec</db:link></db:para>
</db:td>
<db:td>
<db:para>The codec of the media's video stream.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmediaformat.xml#VideoCodec-enum">QMediaFormat::VideoCodec</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th colspan="3">
<db:para>Music attributes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">AlbumTitle</db:link></db:para>
</db:td>
<db:td>
<db:para>The title of the album the media belongs to.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">AlbumArtist</db:link></db:para>
</db:td>
<db:td>
<db:para>The principal artist of the album the media belongs to.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">ContributingArtist</db:link></db:para>
</db:td>
<db:td>
<db:para>The artists contributing to the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">TrackNumber</db:link></db:para>
</db:td>
<db:td>
<db:para>The track number of the media.</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Composer</db:para>
</db:td>
<db:td>
<db:para>The composer of the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">LeadPerformer</db:link></db:para>
</db:td>
<db:td>
<db:para>The lead performer in the media.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">ThumbnailImage</db:link></db:para>
</db:td>
<db:td>
<db:para>An embedded thumbnail image.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qimage.xml">QImage</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml#Key-enum">CoverArtImage</db:link></db:para>
</db:td>
<db:td>
<db:para>An embedded cover art image.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qimage.xml">QImage</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th colspan="3">
<db:para>Image and video attributes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Orientation</db:para>
</db:td>
<db:td>
<db:para>The rotation angle of an image or video.</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Resolution</db:para>
</db:td>
<db:td>
<db:para>The dimensions of an image or video.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsize.xml">QSize</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Key-enum">
<db:title>enum QMediaMetaData::Key</db:title>
<db:enumsynopsis>
<db:enumname>Key</db:enumname>
<db:enumitem>
<db:enumidentifier>Title</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Author</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Comment</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Description</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Genre</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Date</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Language</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Publisher</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Copyright</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Url</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Duration</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaType</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FileFormat</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AudioBitRate</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AudioCodec</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VideoBitRate</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VideoCodec</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VideoFrameRate</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlbumTitle</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlbumArtist</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContributingArtist</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TrackNumber</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Composer</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LeadPerformer</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ThumbnailImage</db:enumidentifier>
<db:enumvalue>24</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CoverArtImage</db:enumidentifier>
<db:enumvalue>25</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Orientation</db:enumidentifier>
<db:enumvalue>26</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Resolution</db:enumidentifier>
<db:enumvalue>27</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The following meta data keys can be used:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Title</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Media title</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Author</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Media author</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Comment</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Comment</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Description</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Brief desripttion</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Genre</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Genre the media belongs to</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Date</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Creation date</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Language</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Media language</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Publisher</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Media publisher info.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Copyright</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Media copyright info.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Url</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Publisher's website URL</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Duration</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Media playback duration</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::MediaType</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Type of the media</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::FileFormat</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>File format</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::AudioBitRate</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::AudioCodec</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::VideoBitRate</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::VideoCodec</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::VideoFrameRate</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::AlbumTitle</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Album's title</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::AlbumArtist</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Artist's info.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::ContributingArtist</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::TrackNumber</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Composer</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Media composer's info.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::LeadPerformer</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::ThumbnailImage</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>Media thumbnail image</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::CoverArtImage</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>Media cover art</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Orientation</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:emphasis>::Resolution</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="clear">
<db:title>void QMediaMetaData::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all data from the meta data object.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>void QMediaMetaData::insert(QMediaMetaData::Key <db:emphasis>k</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>QMediaMetaData::Key</db:type>
<db:parameter>k</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(QMediaMetaData::Key k, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a <db:code role="parameter">value</db:code> into a Key: <db:code role="parameter">k</db:code>.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QMediaMetaData::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the meta data contains no items: otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="keyType">
<db:title>[static protected] QMetaType QMediaMetaData::keyType(QMediaMetaData::Key <db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMetaType</db:type>
<db:methodname>keyType</db:methodname>
<db:methodparam>
<db:type>QMediaMetaData::Key</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaType keyType(QMediaMetaData::Key key)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta type used to store data for Key <db:code role="parameter">key</db:code>.</db:para>
</db:section>
<db:section xml:id="keys">
<db:title>QList&lt;QMediaMetaData::Key&gt; QMediaMetaData::keys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QMediaMetaData::Key&gt;</db:type>
<db:methodname>keys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QMediaMetaData::Key&gt; keys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qlist.xml">QList</db:link> of QMediaMetaData::Keys.</db:para>
</db:section>
<db:section xml:id="metaDataKeyToString">
<db:title>[static] QString QMediaMetaData::metaDataKeyToString(QMediaMetaData::Key <db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>metaDataKeyToString</db:methodname>
<db:methodparam>
<db:type>QMediaMetaData::Key</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString metaDataKeyToString(QMediaMetaData::Key key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>returns a string representation of <db:code role="parameter">key</db:code> that can be used when presenting meta data to users.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>void QMediaMetaData::remove(QMediaMetaData::Key <db:emphasis>k</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>QMediaMetaData::Key</db:type>
<db:parameter>k</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(QMediaMetaData::Key k)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes meta data from a Key: <db:code role="parameter">k</db:code>.</db:para>
</db:section>
<db:section xml:id="stringValue">
<db:title>QString QMediaMetaData::stringValue(QMediaMetaData::Key <db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>stringValue</db:methodname>
<db:methodparam>
<db:type>QMediaMetaData::Key</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString stringValue(QMediaMetaData::Key key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta data for key <db:code role="parameter">key</db:code> as a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>This is mainly meant to simplify presenting the meta data to a user.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QMediaMetaData::value(QMediaMetaData::Key <db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>QMediaMetaData::Key</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant value(QMediaMetaData::Key key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta data value for Key <db:code role="parameter">key</db:code>, or a null <db:link xlink:href="qvariant.xml">QVariant</db:link> if no meta data for the key is available.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QVariant &amp;QMediaMetaData::operator[](QMediaMetaData::Key <db:emphasis>k</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVariant &amp;</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>QMediaMetaData::Key</db:type>
<db:parameter>k</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant &amp; operator[](QMediaMetaData::Key k)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns data stored at the Key <db:code role="parameter">k</db:code>.</db:para>
<db:programlisting language="cpp">QMediaMetaData rockBallad1;
rockBalad[QMediaMetaData::Genre]=&quot;Rock&quot;
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="data-var">
<db:title>QHash&lt;QMediaMetaData::Key, QVariant&gt; QMediaMetaData::data</db:title>
<db:fieldsynopsis>
<db:type>QHash&lt;QMediaMetaData::Key, QVariant&gt;</db:type>
<db:varname>data</db:varname>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This variable holds the meta data.</db:para>
<db:note>
<db:para>this is a <db:code>protected</db:code> member of its class.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QMediaMetaData &amp;<db:emphasis>a</db:emphasis>, const QMediaMetaData &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QMediaMetaData &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMediaMetaData &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QMediaMetaData &amp;a, const QMediaMetaData &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares two meta data objects <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code>, and returns <db:code>false</db:code> if they are identical or <db:code>true</db:code> if they differ.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QMediaMetaData &amp;<db:emphasis>a</db:emphasis>, const QMediaMetaData &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QMediaMetaData &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMediaMetaData &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QMediaMetaData &amp;a, const QMediaMetaData &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares two meta data objects <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code>, and returns <db:code>true</db:code> if they are identical or <db:code>false</db:code> if they differ.</db:para>
</db:section>
</db:section>
</db:article>
