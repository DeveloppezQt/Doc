<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScopedValueRollback Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QScopedValueRollback</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscopedvaluerollback.xml">QScopedValueRollback</db:link> class resets a variable to its previous value on destruction.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScopedValueRollback</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScopedValueRollback is part of <db:simplelist><db:member>misc</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qscopedvaluerollback.xml">QScopedValueRollback</db:link> class can be used to revert state when an exception is thrown without needing to write try-catch blocks.</db:para>
<db:para>It can also be used to manage variables that are temporarily set, such as reentrancy guards. By using this class, the variable will be reset whether the function is exited normally, exited early by a return statement, or exited by an exception.</db:para>
<db:para>The template can only be instantiated with a type that supports assignment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscopedpointer.xml">QScopedPointer</db:link></db:member>
<db:member><db:link xlink:href="qscopeguard.xml">QScopeGuard</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScopedValueRollback">
<db:title>[explicit constexpr] QScopedValueRollback::QScopedValueRollback(T &amp;<db:emphasis>var</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QScopedValueRollback</db:methodname>
<db:methodparam>
<db:type>T &amp;</db:type>
<db:parameter>var</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QScopedValueRollback(T &amp;var)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Stores the previous value of <db:code role="parameter">var</db:code> internally, for revert on destruction.</db:para>
</db:section>
<db:section xml:id="QScopedValueRollback-1">
<db:title>[explicit constexpr, since 5.4] QScopedValueRollback::QScopedValueRollback(T &amp;<db:emphasis>var</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QScopedValueRollback</db:methodname>
<db:methodparam>
<db:type>T &amp;</db:type>
<db:parameter>var</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QScopedValueRollback(T &amp;var, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Assigns <db:code role="parameter">value</db:code> to var and stores the previous value of <db:code role="parameter">var</db:code> internally, for revert on destruction.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="dtor.QScopedValueRollback">
<db:title>QScopedValueRollback::~QScopedValueRollback()</db:title>
<db:destructorsynopsis>
<db:methodname>~QScopedValueRollback</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QScopedValueRollback()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Assigns the previous value to the managed variable. This is the value at construction time, or at the last call to <db:link xlink:href="qscopedvaluerollback.xml#commit">commit</db:link>()</db:para>
</db:section>
<db:section xml:id="commit">
<db:title>[constexpr] void QScopedValueRollback::commit()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>commit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void commit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the previous value of the managed variable to its current value.</db:para>
</db:section>
</db:section>
</db:article>
