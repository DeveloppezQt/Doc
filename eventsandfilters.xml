<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The Event System</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A guide to event handling in Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In Qt, events are objects, derived from the abstract <db:link xlink:href="qevent.xml">QEvent</db:link> class, that represent things that have happened either within an application or as a result of outside activity that the application needs to know about. Events can be received and handled by any instance of a <db:link xlink:href="qobject.xml">QObject</db:link> subclass, but they are especially relevant to widgets. This document describes how events are delivered and handled in a typical application.</db:para>
<db:section xml:id="how-events-are-delivered">
<db:title>How Events are Delivered</db:title>
<db:para>When an event occurs, Qt creates an event object to represent it by constructing an instance of the appropriate <db:link xlink:href="qevent.xml">QEvent</db:link> subclass, and delivers it to a particular instance of <db:link xlink:href="qobject.xml">QObject</db:link> (or one of its subclasses) by calling its <db:link xlink:href="qobject.xml#event">event</db:link>() function.</db:para>
<db:para>This function does not handle the event itself; based on the type of event delivered, it calls an event handler for that specific type of event, and sends a response based on whether the event was accepted or ignored.</db:para>
<db:para>Some events, such as <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link> and <db:link xlink:href="qkeyevent.xml">QKeyEvent</db:link>, come from the window system; some, such as <db:link xlink:href="qtimerevent.xml">QTimerEvent</db:link>, come from other sources; some come from the application itself.</db:para>
</db:section>
<db:section xml:id="event-types">
<db:title>Event Types</db:title>
<db:para>Most event types have special classes, notably <db:link xlink:href="qresizeevent.xml">QResizeEvent</db:link>, <db:link xlink:href="qpaintevent.xml">QPaintEvent</db:link>, <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link>, <db:link xlink:href="qkeyevent.xml">QKeyEvent</db:link>, and <db:link xlink:href="qcloseevent.xml">QCloseEvent</db:link>. Each class subclasses <db:link xlink:href="qevent.xml">QEvent</db:link> and adds event-specific functions. For example, <db:link xlink:href="qresizeevent.xml">QResizeEvent</db:link> adds <db:link xlink:href="qresizeevent.xml#size">size</db:link>() and <db:link xlink:href="qresizeevent.xml#oldSize">oldSize</db:link>() to enable widgets to discover how their dimensions have been changed.</db:para>
<db:para>Some classes support more than one actual event type. <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link> supports mouse button presses, double-clicks, moves, and other related operations.</db:para>
<db:para>Each event has an associated type, defined in <db:link xlink:href="qevent.xml#Type-enum">QEvent::Type</db:link>, and this can be used as a convenient source of run-time type information to quickly determine which subclass a given event object was constructed from.</db:para>
<db:para>Since programs need to react in varied and complex ways, Qt's event delivery mechanisms are flexible. The documentation for <db:link xlink:href="qcoreapplication.xml#notify">QCoreApplication::notify</db:link>() concisely tells the whole story; the <db:emphasis>Qt Quarterly</db:emphasis> article <db:link xlink:href="http://doc.qt.io/archives/qq/qq11-events.html">Another Look at Events</db:link> rehashes it less concisely. Here we will explain enough for 95% of applications.</db:para>
</db:section>
<db:section xml:id="event-handlers">
<db:title>Event Handlers</db:title>
<db:para>The normal way for an event to be delivered is by calling a virtual function. For example, <db:link xlink:href="qpaintevent.xml">QPaintEvent</db:link> is delivered by calling <db:link xlink:href="qwidget.xml#paintEvent">QWidget::paintEvent</db:link>(). This virtual function is responsible for reacting appropriately, normally by repainting the widget. If you do not perform all the necessary work in your implementation of the virtual function, you may need to call the base class's implementation.</db:para>
<db:para>For example, the following code handles left mouse button clicks on a custom checkbox widget while passing all other button clicks to the base <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> class:</db:para>
<db:programlisting language="cpp">void MyCheckBox::mousePressEvent(QMouseEvent *event)
{
    if (event-&gt;button() == Qt::LeftButton) {
        // handle left mouse button here
    } else {
        // pass on other buttons to base class
        QCheckBox::mousePressEvent(event);
    }
}
</db:programlisting>
<db:para>If you want to replace the base class's function, you must implement everything yourself. However, if you only want to extend the base class's functionality, then you implement what you want and call the base class to obtain the default behavior for any cases you do not want to handle.</db:para>
<db:para>Occasionally, there isn't such an event-specific function, or the event-specific function isn't sufficient. The most common example involves Tab key presses. Normally, <db:link xlink:href="qwidget.xml">QWidget</db:link> intercepts these to move the keyboard focus, but a few widgets need the Tab key for themselves.</db:para>
<db:para>These objects can reimplement <db:link xlink:href="qobject.xml#event">QObject::event</db:link>(), the general event handler, and either do their event handling before or after the usual handling, or they can replace the function completely. A very unusual widget that both interprets Tab and has an application-specific custom event might contain the following <db:link xlink:href="qobject.xml#event">event</db:link>() function:</db:para>
<db:programlisting language="cpp">bool MyWidget::event(QEvent *event)
{
    if (event-&gt;type() == QEvent::KeyPress) {
    QKeyEvent *ke = static_cast&lt;QKeyEvent *&gt;(event);
    if (ke-&gt;key() == Qt::Key_Tab) {
        // special tab handling here
        return true;
    }
    } else if (event-&gt;type() == MyCustomEventType) {
    MyCustomEvent *myEvent = static_cast&lt;MyCustomEvent *&gt;(event);
    // custom event handling here
    return true;
    }

    return QWidget::event(event);
}
</db:programlisting>
<db:para>Note that <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>() is still called for all of the cases not handled, and that the return value indicates whether an event was dealt with; a true value prevents the event from being sent on to other objects.</db:para>
</db:section>
<db:section xml:id="event-filters">
<db:title>Event Filters</db:title>
<db:para>Sometimes an object needs to look at, and possibly intercept, the events that are delivered to another object. For example, dialogs commonly want to filter key presses for some widgets; for example, to modify Return-key handling.</db:para>
<db:para>The <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>() function enables this by setting up an <db:emphasis>event filter</db:emphasis>, causing a nominated filter object to receive the events for a target object in its <db:link xlink:href="qobject.xml#eventFilter">QObject::eventFilter</db:link>() function. An event filter gets to process events before the target object does, allowing it to inspect and discard the events as required. An existing event filter can be removed using the <db:link xlink:href="qobject.xml#removeEventFilter">QObject::removeEventFilter</db:link>() function.</db:para>
<db:para>When the filter object's <db:link xlink:href="qobject.xml#eventFilter">eventFilter</db:link>() implementation is called, it can accept or reject the event, and allow or deny further processing of the event. If all the event filters allow further processing of an event (by each returning false), the event is sent to the target object itself. If one of them stops processing (by returning true), the target and any later event filters do not get to see the event at all.</db:para>
<db:programlisting language="cpp">bool FilterObject::eventFilter(QObject *object, QEvent *event)
{
    if (object == target &amp;&amp; event-&gt;type() == QEvent::KeyPress) {
        QKeyEvent *keyEvent = static_cast&lt;QKeyEvent *&gt;(event);
        if (keyEvent-&gt;key() == Qt::Key_Tab) {
            // Special tab handling
            return true;
        } else
            return false;
    }
    return false;
}
</db:programlisting>
<db:para>The above code shows another way to intercept Tab key press events sent to a particular target widget. In this case, the filter handles the relevant events and returns true to stop them from being processed any further. All other events are ignored, and the filter returns false to allow them to be sent on to the target widget, via any other event filters that are installed on it.</db:para>
<db:para>It is also possible to filter <db:emphasis>all</db:emphasis> events for the entire application, by installing an event filter on the <db:link xlink:href="qapplication.xml">QApplication</db:link> or <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object. Such global event filters are called before the object-specific filters. This is very powerful, but it also slows down event delivery of every single event in the entire application; the other techniques discussed should generally be used instead.</db:para>
</db:section>
<db:section xml:id="sending-events">
<db:title>Sending Events</db:title>
<db:para>Many applications want to create and send their own events. You can send events in exactly the same ways as Qt's own event loop by constructing suitable event objects and sending them with <db:link xlink:href="qcoreapplication.xml#sendEvent">QCoreApplication::sendEvent</db:link>() and <db:link xlink:href="qcoreapplication.xml#postEvent">QCoreApplication::postEvent</db:link>().</db:para>
<db:para><db:link xlink:href="qcoreapplication.xml#sendEvent">sendEvent</db:link>() processes the event immediately. When it returns, the event filters and/or the object itself have already processed the event. For many event classes there is a function called <db:link xlink:href="qevent.xml#accepted-prop">isAccepted</db:link>() that tells you whether the event was accepted or rejected by the last handler that was called.</db:para>
<db:para><db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>() posts the event on a queue for later dispatch. The next time Qt's main event loop runs, it dispatches all posted events, with some optimization. For example, if there are several resize events, they are compressed into one. The same applies to paint events: <db:link xlink:href="qwidget.xml#update">QWidget::update</db:link>() calls <db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>(), which eliminates flickering and increases speed by avoiding multiple repaints.</db:para>
<db:para><db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>() is also used during object initialization, since the posted event will typically be dispatched very soon after the initialization of the object is complete. When implementing a widget, it is important to realize that events can be delivered very early in its lifetime so, in its constructor, be sure to initialize member variables early on, before there's any chance that it might receive an event.</db:para>
<db:para>To create events of a custom type, you need to define an event number, which must be greater than <db:link xlink:href="qevent.xml#Type-enum">QEvent::User</db:link>, and you may need to subclass <db:link xlink:href="qevent.xml">QEvent</db:link> in order to pass specific information about your custom event. See the <db:link xlink:href="qevent.xml">QEvent</db:link> documentation for further details.</db:para>
</db:section>
</db:article>
