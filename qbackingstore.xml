<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBackingStore Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> class provides a drawing area for <db:link xlink:href="qwindow.xml">QWindow</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBackingStore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> enables the use of <db:link xlink:href="qpainter.xml">QPainter</db:link> to paint on a <db:link xlink:href="qwindow.xml">QWindow</db:link> with type RasterSurface. The other way of rendering to a <db:link xlink:href="qwindow.xml">QWindow</db:link> is through the use of OpenGL with <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>.</db:para>
<db:para>A <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> contains a buffered representation of the window contents, and thus supports partial updates by using <db:link xlink:href="qpainter.xml">QPainter</db:link> to only update a sub region of the window contents.</db:para>
<db:para><db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> might be used by an application that wants to use <db:link xlink:href="qpainter.xml">QPainter</db:link> without OpenGL acceleration and without the extra overhead of using the <db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> UI stacks. For an example of how to use <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> see the <db:link xlink:href="qtgui-rasterwindow-example.xml">Raster Window Example</db:link>.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBackingStore">
<db:title>[explicit] QBackingStore::QBackingStore(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:para>Constructs an empty surface for the given top-level <db:code role="parameter">window</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QBackingStore">
<db:title>[noexcept] QBackingStore::~QBackingStore()</db:title>
<db:para>Destroys this surface.</db:para>
</db:section>
<db:section xml:id="beginPaint">
<db:title>void QBackingStore::beginPaint(const QRegion &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:para>This function is called before painting onto the surface begins, with the <db:code role="parameter">region</db:code> in which the painting will occur.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbackingstore.xml#endPaint">endPaint</db:link>()</db:member>
<db:member><db:link xlink:href="qbackingstore.xml#paintDevice">paintDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endPaint">
<db:title>void QBackingStore::endPaint()</db:title>
<db:para>This function is called after painting onto the surface has ended.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbackingstore.xml#beginPaint">beginPaint</db:link>()</db:member>
<db:member><db:link xlink:href="qbackingstore.xml#paintDevice">paintDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flush">
<db:title>void QBackingStore::flush(const QRegion &amp;<db:emphasis>region</db:emphasis>, QWindow *<db:emphasis>win</db:emphasis> = Q_NULLPTR, const QPoint &amp;<db:emphasis>offset</db:emphasis> = QPoint())</db:title>
<db:para>Flushes the given <db:code role="parameter">region</db:code> from the specified window <db:code role="parameter">win</db:code> onto the screen.</db:para>
<db:para>Note that the <db:code role="parameter">offset</db:code> parameter is currently unused.</db:para>
</db:section>
<db:section xml:id="handle">
<db:title>QPlatformBackingStore *QBackingStore::handle() const</db:title>
<db:para>Returns a pointer to the QPlatformBackingStore implementation</db:para>
</db:section>
<db:section xml:id="hasStaticContents">
<db:title>bool QBackingStore::hasStaticContents() const</db:title>
<db:para>Returns a boolean indicating if this window has static contents or not.</db:para>
</db:section>
<db:section xml:id="paintDevice">
<db:title>QPaintDevice *QBackingStore::paintDevice()</db:title>
<db:para>Implement this function to return the appropriate paint device.</db:para>
</db:section>
<db:section xml:id="resize">
<db:title>void QBackingStore::resize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the size of the windowsurface to be <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbackingstore.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scroll">
<db:title>bool QBackingStore::scroll(const QRegion &amp;<db:emphasis>area</db:emphasis>, int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Scrolls the given <db:code role="parameter">area</db:code> <db:code role="parameter">dx</db:code> pixels to the right and <db:code role="parameter">dy</db:code> downward; both <db:code role="parameter">dx</db:code> and <db:code role="parameter">dy</db:code> may be negative.</db:para>
<db:para>Returns <db:code>true</db:code> if the area was scrolled successfully; false otherwise.</db:para>
</db:section>
<db:section xml:id="setStaticContents">
<db:title>void QBackingStore::setStaticContents(const QRegion &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:para>Set <db:code role="parameter">region</db:code> as the static contents of this window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbackingstore.xml#staticContents">staticContents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>QSize QBackingStore::size() const</db:title>
<db:para>Returns the current size of the windowsurface.</db:para>
</db:section>
<db:section xml:id="staticContents">
<db:title>QRegion QBackingStore::staticContents() const</db:title>
<db:para>Returns a pointer to the <db:link xlink:href="qregion.xml">QRegion</db:link> that has the static contents of this window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbackingstore.xml#setStaticContents">setStaticContents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="window">
<db:title>QWindow *QBackingStore::window() const</db:title>
<db:para>Returns a pointer to the top-level window associated with this surface.</db:para>
</db:section>
</db:section>
</db:article>
