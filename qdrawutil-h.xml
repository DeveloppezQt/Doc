<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;qdrawutil.h&gt; - Drawing Utility Functions</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Widgets Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>qdrawutil.h</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml">QPainter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qDrawBorderPixmap">
<db:title>void qDrawBorderPixmap(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>target</db:emphasis>, const QMargins &amp;<db:emphasis>margins</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawBorderPixmap</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawBorderPixmap(QPainter *painter, const QRect &amp;target, const QMargins &amp;margins, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The qDrawBorderPixmap function is for drawing a pixmap into the margins of a rectangle.</db:para>
<db:para>Draws the given <db:code role="parameter">pixmap</db:code> into the given <db:code role="parameter">target</db:code> rectangle, using the given <db:code role="parameter">painter</db:code>. The pixmap will be split into nine segments and drawn according to the <db:code role="parameter">margins</db:code> structure.</db:para>
</db:section>
<db:section xml:id="qDrawBorderPixmap-1">
<db:title>void qDrawBorderPixmap(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>targetRect</db:emphasis>, const QMargins &amp;<db:emphasis>targetMargins</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QRect &amp;<db:emphasis>sourceRect</db:emphasis>, const QMargins &amp;<db:emphasis>sourceMargins</db:emphasis>, const QTileRules &amp;<db:emphasis>rules</db:emphasis> = QTileRules())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawBorderPixmap</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>targetRect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>targetMargins</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>sourceRect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>sourceMargins</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTileRules &amp;</db:type>
<db:parameter>rules</db:parameter>
<db:initializer>QTileRules()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawBorderPixmap(QPainter *painter, const QRect &amp;targetRect, const QMargins &amp;targetMargins, const QPixmap &amp;pixmap, const QRect &amp;sourceRect, const QMargins &amp;sourceMargins, const QTileRules &amp;rules)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the indicated <db:code role="parameter">sourceRect</db:code> rectangle from the given <db:code role="parameter">pixmap</db:code> into the given <db:code role="parameter">targetRect</db:code> rectangle, using the given <db:code role="parameter">painter</db:code>. The pixmap will be split into nine segments according to the given <db:code role="parameter">targetMargins</db:code> and <db:code role="parameter">sourceMargins</db:code> structures. Finally, the pixmap will be drawn according to the given <db:code role="parameter">rules</db:code>.</db:para>
<db:para>This function is used to draw a scaled pixmap, similar to <db:link xlink:href="http://www.w3.org/TR/css3-background/">CSS3 border-images</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#TileRule-enum">Qt::TileRule</db:link></db:member>
<db:member><db:link xlink:href="qtilerules.xml">QTileRules</db:link></db:member>
<db:member><db:link xlink:href="qmargins.xml">QMargins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawPlainRect">
<db:title>void qDrawPlainRect(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, const QColor &amp;<db:emphasis>lineColor</db:emphasis>, int <db:emphasis>lineWidth</db:emphasis> = 1, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawPlainRect</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>lineColor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineWidth</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawPlainRect(QPainter *painter, int x, int y, int width, int height, const QColor &amp;lineColor, int lineWidth, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the plain rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, using the specified <db:code role="parameter">painter</db:code>, <db:code role="parameter">lineColor</db:code> and <db:code role="parameter">lineWidth</db:code>. The rectangle's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a plain rectangle:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle(QFrame::Box | QFrame::Plain);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeRect">qDrawShadeRect</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawPlainRect-1">
<db:title>void qDrawPlainRect(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, const QColor &amp;<db:emphasis>lineColor</db:emphasis>, int <db:emphasis>lineWidth</db:emphasis> = 1, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawPlainRect</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>lineColor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineWidth</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawPlainRect(QPainter *painter, const QRect &amp;rect, const QColor &amp;lineColor, int lineWidth, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the plain rectangle specified by <db:code role="parameter">rect</db:code> using the given <db:code role="parameter">painter</db:code>, <db:code role="parameter">lineColor</db:code> and <db:code role="parameter">lineWidth</db:code>. The rectangle's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a plain rectangle:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle(QFrame::Box | QFrame::Plain);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeRect">qDrawShadeRect</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawShadeLine">
<db:title>void qDrawShadeLine(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>x1</db:emphasis>, int <db:emphasis>y1</db:emphasis>, int <db:emphasis>x2</db:emphasis>, int <db:emphasis>y2</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = true, int <db:emphasis>lineWidth</db:emphasis> = 1, int <db:emphasis>midLineWidth</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawShadeLine</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineWidth</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>midLineWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawShadeLine(QPainter *painter, int x1, int y1, int x2, int y2, const QPalette &amp;palette, bool sunken, int lineWidth, int midLineWidth)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws a horizontal (<db:code role="parameter">y1</db:code> == <db:code role="parameter">y2</db:code>) or vertical (<db:code role="parameter">x1</db:code> == <db:code role="parameter">x2</db:code>) shaded line using the given <db:code role="parameter">painter</db:code>. Note that nothing is drawn if <db:code role="parameter">y1</db:code> != <db:code role="parameter">y2</db:code> and <db:code role="parameter">x1</db:code> != <db:code role="parameter">x2</db:code> (i.e. the line is neither horizontal nor vertical).</db:para>
<db:para>The provided <db:code role="parameter">palette</db:code> specifies the shading colors (<db:link xlink:href="qpalette.xml#light">light</db:link>, <db:link xlink:href="qpalette.xml#dark">dark</db:link> and <db:link xlink:href="qpalette.xml#mid">middle</db:link> colors). The given <db:code role="parameter">lineWidth</db:code> specifies the line width for each of the lines; it is not the total line width. The given <db:code role="parameter">midLineWidth</db:code> specifies the width of a middle line drawn in the <db:link xlink:href="qpalette.xml#mid">QPalette::mid</db:link>() color.</db:para>
<db:para>The line appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a shaded line:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle(QFrame::HLine | QFrame::Sunken);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeRect">qDrawShadeRect</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadePanel">qDrawShadePanel</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawShadeLine-1">
<db:title>void qDrawShadeLine(QPainter *<db:emphasis>painter</db:emphasis>, const QPoint &amp;<db:emphasis>p1</db:emphasis>, const QPoint &amp;<db:emphasis>p2</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = true, int <db:emphasis>lineWidth</db:emphasis> = 1, int <db:emphasis>midLineWidth</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawShadeLine</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineWidth</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>midLineWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawShadeLine(QPainter *painter, const QPoint &amp;p1, const QPoint &amp;p2, const QPalette &amp;palette, bool sunken, int lineWidth, int midLineWidth)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a horizontal or vertical shaded line between <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> using the given <db:code role="parameter">painter</db:code>. Note that nothing is drawn if the line between the points would be neither horizontal nor vertical.</db:para>
<db:para>The provided <db:code role="parameter">palette</db:code> specifies the shading colors (<db:link xlink:href="qpalette.xml#light">light</db:link>, <db:link xlink:href="qpalette.xml#dark">dark</db:link> and <db:link xlink:href="qpalette.xml#mid">middle</db:link> colors). The given <db:code role="parameter">lineWidth</db:code> specifies the line width for each of the lines; it is not the total line width. The given <db:code role="parameter">midLineWidth</db:code> specifies the width of a middle line drawn in the <db:link xlink:href="qpalette.xml#mid">QPalette::mid</db:link>() color.</db:para>
<db:para>The line appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a shaded line:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle(QFrame::HLine | QFrame::Sunken);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeRect">qDrawShadeRect</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadePanel">qDrawShadePanel</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawShadePanel">
<db:title>void qDrawShadePanel(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = false, int <db:emphasis>lineWidth</db:emphasis> = 1, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawShadePanel</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineWidth</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawShadePanel(QPainter *painter, int x, int y, int width, int height, const QPalette &amp;palette, bool sunken, int lineWidth, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the shaded panel beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> using the provided <db:code role="parameter">painter</db:code> and the given <db:code role="parameter">lineWidth</db:code>.</db:para>
<db:para>The given <db:code role="parameter">palette</db:code> specifies the shading colors (<db:link xlink:href="qpalette.xml#light">light</db:link>, <db:link xlink:href="qpalette.xml#dark">dark</db:link> and <db:link xlink:href="qpalette.xml#mid">middle</db:link> colors). The panel's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:para>The panel appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a shaded panel:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle( QFrame::Panel | QFrame::Sunken);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawWinPanel">qDrawWinPanel</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeLine">qDrawShadeLine</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeRect">qDrawShadeRect</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawShadePanel-1">
<db:title>void qDrawShadePanel(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = false, int <db:emphasis>lineWidth</db:emphasis> = 1, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawShadePanel</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineWidth</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawShadePanel(QPainter *painter, const QRect &amp;rect, const QPalette &amp;palette, bool sunken, int lineWidth, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the shaded panel at the rectangle specified by <db:code role="parameter">rect</db:code> using the given <db:code role="parameter">painter</db:code> and the given <db:code role="parameter">lineWidth</db:code>.</db:para>
<db:para>The given <db:code role="parameter">palette</db:code> specifies the shading colors (<db:link xlink:href="qpalette.xml#light">light</db:link>, <db:link xlink:href="qpalette.xml#dark">dark</db:link> and <db:link xlink:href="qpalette.xml#mid">middle</db:link> colors). The panel's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:para>The panel appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a shaded panel:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle( QFrame::Panel | QFrame::Sunken);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawWinPanel">qDrawWinPanel</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeLine">qDrawShadeLine</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeRect">qDrawShadeRect</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawShadeRect">
<db:title>void qDrawShadeRect(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = false, int <db:emphasis>lineWidth</db:emphasis> = 1, int <db:emphasis>midLineWidth</db:emphasis> = 0, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawShadeRect</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineWidth</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>midLineWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawShadeRect(QPainter *painter, int x, int y, int width, int height, const QPalette &amp;palette, bool sunken, int lineWidth, int midLineWidth, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the shaded rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> using the provided <db:code role="parameter">painter</db:code>.</db:para>
<db:para>The provide <db:code role="parameter">palette</db:code> specifies the shading colors (<db:link xlink:href="qpalette.xml#light">light</db:link>, <db:link xlink:href="qpalette.xml#dark">dark</db:link> and <db:link xlink:href="qpalette.xml#mid">middle</db:link> colors. The given <db:code role="parameter">lineWidth</db:code> specifies the line width for each of the lines; it is not the total line width. The <db:code role="parameter">midLineWidth</db:code> specifies the width of a middle line drawn in the <db:link xlink:href="qpalette.xml#mid">QPalette::mid</db:link>() color. The rectangle's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:para>The rectangle appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a shaded rectangle:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle(QFrame::Box | QFrame::Raised);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeLine">qDrawShadeLine</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadePanel">qDrawShadePanel</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawPlainRect">qDrawPlainRect</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawShadeRect-1">
<db:title>void qDrawShadeRect(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = false, int <db:emphasis>lineWidth</db:emphasis> = 1, int <db:emphasis>midLineWidth</db:emphasis> = 0, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawShadeRect</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineWidth</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>midLineWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawShadeRect(QPainter *painter, const QRect &amp;rect, const QPalette &amp;palette, bool sunken, int lineWidth, int midLineWidth, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the shaded rectangle specified by <db:code role="parameter">rect</db:code> using the given <db:code role="parameter">painter</db:code>.</db:para>
<db:para>The provide <db:code role="parameter">palette</db:code> specifies the shading colors (<db:link xlink:href="qpalette.xml#light">light</db:link>, <db:link xlink:href="qpalette.xml#dark">dark</db:link> and <db:link xlink:href="qpalette.xml#mid">middle</db:link> colors. The given <db:code role="parameter">lineWidth</db:code> specifies the line width for each of the lines; it is not the total line width. The <db:code role="parameter">midLineWidth</db:code> specifies the width of a middle line drawn in the <db:link xlink:href="qpalette.xml#mid">QPalette::mid</db:link>() color. The rectangle's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:para>The rectangle appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a shaded rectangle:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle(QFrame::Box | QFrame::Raised);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadeLine">qDrawShadeLine</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadePanel">qDrawShadePanel</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawPlainRect">qDrawPlainRect</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawWinButton">
<db:title>void qDrawWinButton(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = false, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawWinButton</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawWinButton(QPainter *painter, int x, int y, int width, int height, const QPalette &amp;palette, bool sunken, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the Windows-style button specified by the given point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>}, <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> using the provided <db:code role="parameter">painter</db:code> with a line width of 2 pixels. The button's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:para>The given <db:code role="parameter">palette</db:code> specifies the shading colors (<db:link xlink:href="qpalette.xml#light">light</db:link>, <db:link xlink:href="qpalette.xml#dark">dark</db:link> and <db:link xlink:href="qpalette.xml#mid">middle</db:link> colors).</db:para>
<db:para>The button appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>()-&gt; Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawWinPanel">qDrawWinPanel</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawWinButton-1">
<db:title>void qDrawWinButton(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = false, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawWinButton</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawWinButton(QPainter *painter, const QRect &amp;rect, const QPalette &amp;palette, bool sunken, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the Windows-style button at the rectangle specified by <db:code role="parameter">rect</db:code> using the given <db:code role="parameter">painter</db:code> with a line width of 2 pixels. The button's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:para>The given <db:code role="parameter">palette</db:code> specifies the shading colors (<db:link xlink:href="qpalette.xml#light">light</db:link>, <db:link xlink:href="qpalette.xml#dark">dark</db:link> and <db:link xlink:href="qpalette.xml#mid">middle</db:link> colors).</db:para>
<db:para>The button appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>()-&gt; Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawWinPanel">qDrawWinPanel</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawWinPanel">
<db:title>void qDrawWinPanel(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = false, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawWinPanel</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawWinPanel(QPainter *painter, int x, int y, int width, int height, const QPalette &amp;palette, bool sunken, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the Windows-style panel specified by the given point(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> using the provided <db:code role="parameter">painter</db:code> with a line width of 2 pixels. The button's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:para>The given <db:code role="parameter">palette</db:code> specifies the shading colors. The panel appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a shaded panel:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle(QFrame::WinPanel | QFrame::Raised);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadePanel">qDrawShadePanel</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawWinButton">qDrawWinButton</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDrawWinPanel-1">
<db:title>void qDrawWinPanel(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, const QPalette &amp;<db:emphasis>palette</db:emphasis>, bool <db:emphasis>sunken</db:emphasis> = false, const QBrush *<db:emphasis>fill</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qDrawWinPanel</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sunken</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush *</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void qDrawWinPanel(QPainter *painter, const QRect &amp;rect, const QPalette &amp;palette, bool sunken, const QBrush *fill)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the Windows-style panel at the rectangle specified by <db:code role="parameter">rect</db:code> using the given <db:code role="parameter">painter</db:code> with a line width of 2 pixels. The button's interior is filled with the <db:code role="parameter">fill</db:code> brush unless <db:code role="parameter">fill</db:code> is nullptr.</db:para>
<db:para>The given <db:code role="parameter">palette</db:code> specifies the shading colors. The panel appears sunken if <db:code role="parameter">sunken</db:code> is true, otherwise raised.</db:para>
<db:warning>
<db:para>This function does not look at <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() or <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(). Use the drawing functions in <db:link xlink:href="qstyle.xml">QStyle</db:link> to make widgets that follow the current GUI style.</db:para>
</db:warning>
<db:para>Alternatively you can use a <db:link xlink:href="qframe.xml">QFrame</db:link> widget and apply the <db:link xlink:href="qframe.xml#setFrameStyle">QFrame::setFrameStyle</db:link>() function to display a shaded panel:</db:para>
<db:programlisting language="cpp">QFrame frame:
frame.setFrameStyle(QFrame::WinPanel | QFrame::Raised);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawShadePanel">qDrawShadePanel</db:link>()</db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml#qDrawWinButton">qDrawWinButton</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
