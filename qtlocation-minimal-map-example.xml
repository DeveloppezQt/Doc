<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Minimal Map (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The minimum code to display a map using Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/minimal_map.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Minimal Map</db:emphasis> demonstrates how to use the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> item to render a map. It shows the minimum amount of code needed to display the map, and can be used as a basis for further experimentation.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="c-code">
<db:title>C++ Code</db:title>
<db:para>In <db:code>main.cpp</db:code> we use only the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> and <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> classes.</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;
</db:programlisting>
<db:para>In the main function, we first instantiate a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object. Then we create a <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> and tell it to load <db:code>main.qml</db:code> from the <db:link xlink:href="resources.xml">Qt Resource System</db:link>.</db:para>
<db:para>Finally, <db:link xlink:href="qguiapplication.xml#exec">QGuiApplication::exec</db:link>() launches the main event loop.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQmlApplicationEngine engine;
    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="qml-code">
<db:title>QML Code</db:title>
<db:para>In <db:code>main.qml</db:code>, we import the <db:link xlink:href="qtlocation-qmlmodule.xml">QtLocation</db:link> QML module and its depending <db:link xlink:href="qtpositioning-qmlmodule.xml">QtPositioning</db:link> QML module. Next, we create the top level window, set a sensible default size, and make it visible. The window will be filled by a <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> item showing the map.</db:para>
<db:programlisting language="cpp">import QtQuick
import QtLocation
import QtPositioning

Window {
    width: Qt.platform.os == &quot;android&quot; ? Screen.width : 512
    height: Qt.platform.os == &quot;android&quot; ? Screen.height : 512
    visible: true
    title: map.center + &quot; zoom &quot; + map.zoomLevel.toFixed(3)
           + &quot; min &quot; + map.minimumZoomLevel + &quot; max &quot; + map.maximumZoomLevel

    Plugin {
        id: mapPlugin
        name: &quot;osm&quot;
    }

    Map {
        id: map
        anchors.fill: parent
        plugin: mapPlugin
        center: QtPositioning.coordinate(59.91, 10.75) // Oslo
        zoomLevel: 14
        property geoCoordinate startCentroid

        PinchHandler {
            id: pinch
            target: null
            onActiveChanged: if (active) {
                map.startCentroid = map.toCoordinate(pinch.centroid.position, false)
            }
            onScaleChanged: (delta) =&amp;gt; {
                map.zoomLevel += Math.log2(delta)
                map.alignCoordinateToPoint(map.startCentroid, pinch.centroid.position)
            }
            onRotationChanged: (delta) =&amp;gt; {
                map.bearing -= delta
                map.alignCoordinateToPoint(map.startCentroid, pinch.centroid.position)
            }
            grabPermissions: PointerHandler.TakeOverForbidden
        }
        WheelHandler {
            id: wheel
            // workaround for QTBUG-87646 / QTBUG-112394 / QTBUG-112432:
            // Magic Mouse pretends to be a trackpad but doesn't work with PinchHandler
            // and we don't yet distinguish mice and trackpads on Wayland either
            acceptedDevices: Qt.platform.pluginName === &quot;cocoa&quot; || Qt.platform.pluginName === &quot;wayland&quot;
                             ? PointerDevice.Mouse | PointerDevice.TouchPad
                             : PointerDevice.Mouse
            rotationScale: 1/120
            property: &quot;zoomLevel&quot;
        }
        DragHandler {
            id: drag
            target: null
            onTranslationChanged: (delta) =&amp;gt; map.pan(-delta.x, -delta.y)
        }
        Shortcut {
            enabled: map.zoomLevel &amp;lt; map.maximumZoomLevel
            sequence: StandardKey.ZoomIn
            onActivated: map.zoomLevel = Math.round(map.zoomLevel + 1)
        }
        Shortcut {
            enabled: map.zoomLevel &amp;gt; map.minimumZoomLevel
            sequence: StandardKey.ZoomOut
            onActivated: map.zoomLevel = Math.round(map.zoomLevel - 1)
        }
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> item is necessary to define the map provider we are going to use. The example can work with any of the available geo services plugins. However, some plugins may require additional plugin parameters in order to function correctly and we can use <db:link xlink:href="qml-qtlocation-pluginparameter.xml">PluginParameter</db:link> to specify them. In this example, we use the <db:code>osm</db:code> plugin, which is a <db:link xlink:href="location-plugin-osm.xml">Qt Location Open Street Map Plugin</db:link> and does not require any parameters.</db:para>
<db:para>In the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> item, we refer to the <db:code>plugin</db:code> we use and we set the <db:code>center</db:code> and the <db:code>zoomLevel</db:code> of the map.</db:para>
</db:section>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:para>The example requires a working internet connection to download <db:code>OpenStreetMap</db:code> map tiles. An optional system proxy should be picked up automatically.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtlocation.git/tree/examples/location/minimal_map?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
