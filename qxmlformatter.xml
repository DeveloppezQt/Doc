<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlFormatter Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> class is an implementation of <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> for transforming XQuery output into formatted XML.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlFormatter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qxmlserializer.xml" xlink:role="class">QXmlSerializer</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlFormatter is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> is a subclass of <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> that formats the XML output to make it easier for humans to read.</db:para>
<db:para><db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> outputs XML without adding unnecessary whitespace. In particular, it does not add <db:emphasis>newlines</db:emphasis> and indentation. To make the XML output easier to read, <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> adds <db:emphasis>newlines</db:emphasis> and indentation by adding, removing, and modifying <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence nodes</db:link> that only consist of whitespace. It also modifies whitespace in other places where it is not significant; e.g., between attributes and in the document prologue.</db:para>
<db:para>For example, where the base class <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> would output this:</db:para>
<db:programlisting language="cpp">&lt;a&gt;&lt;b/&gt;&lt;c/&gt;&lt;p&gt;Some Text&lt;/p&gt;&lt;/a&gt;

</db:programlisting>
<db:para><db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> outputs this:</db:para>
<db:programlisting language="cpp">&lt;a&gt;
   &lt;b/&gt;
   &lt;c/&gt;
   &lt;p&gt;Some Text&lt;/p&gt;
&lt;/a&gt;

</db:programlisting>
<db:para>If you just want to serialize your XML in a human-readable format, use <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> as it is. The default indentation level is 4 spaces, but you can set your own indentation value <db:link xlink:href="qxmlformatter.xml#setIndentationDepth">setIndentationDepth</db:link>().</db:para>
<db:para>The <db:emphasis>newlines</db:emphasis> and indentation added by <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> are suitable for common formats, such as XHTML, SVG, or Docbook, where whitespace is not significant. However, if your XML will be used as input where whitespace is significant, then you must write your own subclass of <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> or <db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link>.</db:para>
<db:para>Note that using <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> instead of <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> will increase computational overhead and document storage size due to the insertion of whitespace.</db:para>
<db:para>Note also that the indentation style used by <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> remains loosely defined and may change in future versions of Qt. If a specific indentation style is required then either use the base class <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> directly, or write your own subclass of <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> or <db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link>. Alternatively, you can subclass <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> and reimplement the callbacks there.</db:para>
<db:programlisting language="cpp">QXmlQuery query;
query.setQuery(&quot;doc('index.html')/html/body/p[1]&quot;);

QXmlFormatter formatter(query, myOutputDevice);
formatter.setIndentationDepth(2);
query.evaluateTo(&amp;formatter);
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlFormatter">
<db:title>QXmlFormatter::QXmlFormatter(const QXmlQuery &amp;<db:emphasis>query</db:emphasis>, QIODevice *<db:emphasis>outputDevice</db:emphasis>)</db:title>
<db:para>Constructs a formatter that uses the name pool and message handler in <db:code role="parameter">query</db:code>, and writes the result to <db:code role="parameter">outputDevice</db:code> as formatted XML.</db:para>
<db:para><db:code role="parameter">outputDevice</db:code> is passed directly to <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atomicValue">
<db:title>[override virtual] void QXmlFormatter::atomicValue(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#atomicValue" role="function">QXmlSerializer::atomicValue(const QVariant &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="attribute">
<db:title>[override virtual] void QXmlFormatter::attribute(const QXmlName &amp;<db:emphasis>name</db:emphasis>, const QStringRef &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#attribute" role="function">QXmlSerializer::attribute(const QXmlName &amp;name, const QStringRef &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="characters">
<db:title>[override virtual] void QXmlFormatter::characters(const QStringRef &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#characters" role="function">QXmlSerializer::characters(const QStringRef &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="comment">
<db:title>[override virtual] void QXmlFormatter::comment(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#comment" role="function">QXmlSerializer::comment(const QString &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="endDocument">
<db:title>[override virtual] void QXmlFormatter::endDocument()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#endDocument" role="function">QXmlSerializer::endDocument()</db:link>.</db:para>
</db:section>
<db:section xml:id="endElement">
<db:title>[override virtual] void QXmlFormatter::endElement()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#endElement" role="function">QXmlSerializer::endElement()</db:link>.</db:para>
</db:section>
<db:section xml:id="endOfSequence">
<db:title>[override virtual] void QXmlFormatter::endOfSequence()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#endOfSequence" role="function">QXmlSerializer::endOfSequence()</db:link>.</db:para>
</db:section>
<db:section xml:id="indentationDepth">
<db:title>int QXmlFormatter::indentationDepth() const</db:title>
<db:para>Returns the number of spaces <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> will output for each indentation level. The default is four.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlformatter.xml#setIndentationDepth">setIndentationDepth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processingInstruction">
<db:title>[override virtual] void QXmlFormatter::processingInstruction(const QXmlName &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#processingInstruction" role="function">QXmlSerializer::processingInstruction(const QXmlName &amp;name, const QString &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="setIndentationDepth">
<db:title>void QXmlFormatter::setIndentationDepth(int <db:emphasis>depth</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">depth</db:code> to be the number of spaces <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> will output for level of indentation. The default is four.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlformatter.xml#indentationDepth">indentationDepth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDocument">
<db:title>[override virtual] void QXmlFormatter::startDocument()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#startDocument" role="function">QXmlSerializer::startDocument()</db:link>.</db:para>
</db:section>
<db:section xml:id="startElement">
<db:title>[override virtual] void QXmlFormatter::startElement(const QXmlName &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#startElement" role="function">QXmlSerializer::startElement(const QXmlName &amp;name)</db:link>.</db:para>
</db:section>
<db:section xml:id="startOfSequence">
<db:title>[override virtual] void QXmlFormatter::startOfSequence()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlserializer.xml#startOfSequence" role="function">QXmlSerializer::startOfSequence()</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
