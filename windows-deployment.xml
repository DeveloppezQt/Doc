<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Windows - Deployment</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This documentation describes deployment process for <db:link xlink:href="windows.xml">Windows</db:link>. We refer to the <db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/tests/manual/examples/widgets/tools/plugandpaint/app?h=6.6">Plug &amp; Paint</db:link> example application through out the document to demonstrate the deployment process.</db:para>
<db:note>
<db:para>Add your Qt build directory to the list of excluded directories of any anti-virus application that runs on your system.</db:para>
</db:note>
<db:section xml:id="the-windows-deployment-tool">
<db:title>The Windows Deployment Tool</db:title>
<db:anchor xml:id="windeployqt"/>
<db:para>The Windows deployment tool windeployqt is designed to automate the process of creating a deployable folder containing the <db:link xlink:href="qmake-variable-reference.xml#qt">Qt</db:link>-related dependencies (libraries, QML imports, plugins, and translations) required to run the application from that folder. It creates an installation tree for Windows desktop applications, which can be easily bundled into an installation package.</db:para>
<db:para>The tool can be found in QTDIR/bin/windeployqt. It needs to be run within the build environment in order to function correctly. When using Qt Online Installer, the script QTDIR/bin/qtenv2.bat should be used to set it up.</db:para>
<db:para>windeployqt takes an .exe file or a directory that contains an .exe file as an argument, and scans the executable for dependencies. If a directory is passed with the --qmldir argument, windeployqt uses the qmlimportscanner tool to scan QML files inside the directory for QML import dependencies. Identified dependencies are then copied to the executable's directory.</db:para>
<db:para>In case Qt was built with the configure switch -relocatable turned off, windeployqt replaces the hardcoded local paths in Qt6Core.dll by relative ones.</db:para>
<db:para>For Windows desktop applications, the required runtime files for the compiler are also copied to the deployable folder by default (unless the option --no-compiler-runtime is specified). In the case of release builds using Microsoft Visual C++, these consist of the Visual C++ Redistributable Packages, which are intended for recursive installation by the application's installer on the target machine. Otherwise, the shared libraries of the compiler runtime are used.</db:para>
<db:para>The application may require additional 3rd-party libraries (for example, database libraries), which are not taken into account by windeployqt.</db:para>
<db:para>Additional arguments are described in the tools' help output:</db:para>
<db:programlisting language="cpp" role="bad">Usage: windeployqt [options] [files]
Qt Deploy Tool 6.0.0

The simplest way to use windeployqt is to add the bin directory of your Qt
installation (e.g. &amp;lt;QT_DIR\bin&amp;gt;) to the PATH variable and then run:
  windeployqt &amp;lt;path-to-app-binary&amp;gt;
If ICU, etc. are not in the bin directory, they need to be in the PATH
variable. If your application uses Qt Quick, run:
  windeployqt --qmldir &amp;lt;path-to-app-qml-files&amp;gt; &amp;lt;path-to-app-binary&amp;gt;

Options:
  -?, -h, --help              Displays help on commandline options.
  --help-all                  Displays help including Qt specific options.
  -v, --version               Displays version information.
  --dir &amp;lt;directory&amp;gt;           Use directory instead of binary directory.
  --qmake &amp;lt;path&amp;gt;              Use specified qmake instead of qmake from PATH.
  --libdir &amp;lt;path&amp;gt;             Copy libraries to path.
  --plugindir &amp;lt;path&amp;gt;          Copy plugins to path.
  --debug                     Assume debug binaries.
  --release                   Assume release binaries.
  --pdb                       Deploy .pdb files (MSVC).
  --force                     Force updating files.
  --dry-run                   Simulation mode. Behave normally, but do not
                              copy/update any files.
  --no-patchqt                Do not patch the Qt6Core library.
  --ignore-library-errors     Ignore errors when libraries cannot be found.
  --no-plugins                Skip plugin deployment.
  --no-libraries              Skip library deployment.
  --qmldir &amp;lt;directory&amp;gt;        Scan for QML-imports starting from directory.
  --qmlimport &amp;lt;directory&amp;gt;     Add the given path to the QML module search
                              locations.
  --no-quick-import           Skip deployment of Qt Quick imports.
  --translations &amp;lt;languages&amp;gt;  A comma-separated list of languages to deploy
                              (de,fi).
  --no-translations           Skip deployment of translations.
  --no-system-d3d-compiler    Skip deployment of the system D3D compiler.
  --compiler-runtime          Deploy compiler runtime (Desktop only).
  --no-virtualkeyboard        Disable deployment of the Virtual Keyboard.
  --no-compiler-runtime       Do not deploy compiler runtime (Desktop only).
  --json                      Print to stdout in JSON format.
  --no-opengl-sw              Do not deploy the software rasterizer library.
  --list &amp;lt;option&amp;gt;             Print only the names of the files copied.
                              Available options:
                               source:   absolute path of the source files
                               target:   absolute path of the target files
                               relative: paths of the target files, relative
                                         to the target directory
                               mapping:  outputs the source and the relative
                                         target, suitable for use within an
                                         Appx mapping file
  --verbose &amp;lt;level&amp;gt;           Verbose level (0-2).

Qt libraries can be added by passing their name (-xml) or removed by passing
the name prepended by --no- (--no-xml). Available libraries:
bluetooth concurrent core declarative designer designercomponents gui qthelp
multimedia multimediawidgets multimediaquick network nfc opengl openglwidgets
positioning printsupport qml qmltooling quick quickparticles quickwidgets script
scripttools sensors serialport sql svg svgwidgets test websockets widgets xml
webenginecore webengine webenginewidgets 3dcore 3drenderer 3dquick
3dquickrenderer 3dinput 3danimation 3dextras geoservices webchannel serialbus
webview

Arguments:
  [files]                     Binaries or directory containing the binary.
</db:programlisting>
</db:section>
<db:section xml:id="static-linking">
<db:title>Static Linking</db:title>
<db:para>To build static applications, build Qt statically by configuring Qt with -static:</db:para>
<db:programlisting language="cpp">cd C:\path\to\Qt
configure -static &amp;lt;any other options you need&amp;gt;
</db:programlisting>
<db:para>If you later need to reconfigure and rebuild Qt from the same location, ensure that all traces of the previous configuration are removed by entering the build directory and running nmake distclean or mingw32-make distclean before running configure again.</db:para>
<db:section xml:id="linking-the-application-to-the-static-version-of-qt">
<db:title>Linking the Application to the Static Version of Qt</db:title>
<db:para>As an example, this section will build the <db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/tests/manual/examples/widgets/tools/plugandpaint/app?h=6.6">Plug &amp; Paint</db:link> example statically.</db:para>
<db:para>Once Qt finishes building, build the <db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/tests/manual/examples/widgets/tools/plugandpaint/app?h=6.6">Plug &amp; Paint</db:link> application. First we must go into the directory that contains the application:</db:para>
<db:programlisting language="cpp">cd examples\tools\plugandpaint
</db:programlisting>
<db:para>Run qmake to create a new makefile for the application, and perform a clean build to create the statically linked executable:</db:para>
<db:programlisting language="cpp">nmake clean
qmake -config release
nmake
</db:programlisting>
<db:para>You probably want to link against the release libraries, and you can specify this when invoking qmake. Now, provided that everything compiled and linked without any errors, we should have a plugandpaint.exe file that is ready for deployment. To check that the application has the required libraries, copy the executable to a machine that does not have Qt or any Qt applications installed, and run it on that machine.</db:para>
<db:para>Remember that if your application depends on compiler specific libraries, these must still be redistributed along with your application. You can check which libraries your application is linking against by using the depends tool. For more information, read the <db:link xlink:href="windows-deployment.xml#application-dependencies">Application Dependencies</db:link> section.</db:para>
<db:para>Since we cannot deploy plugins using the static linking approach, the application we have prepared is incomplete. It will run, but the functionality will be disabled due to the missing plugins. To deploy plugin-based applications we should use the shared library approach.</db:para>
</db:section>
</db:section>
<db:section xml:id="shared-libraries">
<db:title>Shared Libraries</db:title>
<db:para>We have two challenges when deploying the plugandpaint application using the shared libraries approach: The Qt runtime has to be correctly redistributed along with the application executable, and the plugins have to be installed in the correct location on the target system so that the application can find them.</db:para>
<db:section xml:id="building-qt-as-a-shared-library">
<db:title>Building Qt as a Shared Library</db:title>
<db:para>For this example, we assume that Qt is installed as a shared library, which is the default when installing Qt, in the <db:emphasis>C:\path\to\Qt</db:emphasis> directory.</db:para>
</db:section>
<db:section xml:id="linking-the-application-to-qt-as-a-shared-library">
<db:title>Linking the Application to Qt as a Shared Library</db:title>
<db:para>After ensuring that Qt is built as a shared library, we can build the plugandpaint application. First, we must go into the directory that contains the application:</db:para>
<db:programlisting language="cpp">cd examples\tools\plugandpaint
</db:programlisting>
<db:para>Now run qmake to create a new makefile for the application, and do a clean build to create the dynamically linked executable:</db:para>
<db:programlisting language="cpp">nmake clean
qmake -config release
nmake
</db:programlisting>
<db:para>This builds the core application, the following will build the plugins:</db:para>
<db:programlisting language="cpp">cd ..\plugandpaint/plugins
nmake clean
qmake -config release
nmake
</db:programlisting>
<db:para>If everything compiled and linked without any errors, we will get a plugandpaint.exe executable and the pnp_basictools.dll and pnp_extrafilters.dll plugin files.</db:para>
</db:section>
<db:section xml:id="creating-the-application-package">
<db:title>Creating the Application Package</db:title>
<db:para>To deploy the application, we must make sure that we copy the relevant Qt DLLs (corresponding to the Qt modules used in the application) and the Windows platform plugin, qwindows.dll, as well as the executable to the same directory tree in the release subdirectory.</db:para>
<db:para>In contrast to user plugins, Qt plugins must be put into subdirectories matching the plugin type. The correct location for the platform plugin is a subdirectory named platforms. <db:link xlink:href="windows-deployment.xml#qt-plugins">Qt Plugins</db:link> section has additional information about plugins and how Qt searches for them.</db:para>
<db:para>If dynamic OpenGL is used, you may additionally want to include the library required software-based OpenGL, if the application is compatible with it.</db:para>
<db:para>If Qt was configured to link against ICU or OpenSSL, the respective DLL's need to be added to the release folder, too. But the binary packages for Qt on Windows do require this. For more details, see also <db:link xlink:href="third-party-libraries.xml">Third-Party Libraries</db:link>.</db:para>
<db:para>Remember that if your application depends on compiler specific libraries, these must be redistributed along with your application. You can check which libraries your application is linking against by using the depends tool. For more information, see the <db:link xlink:href="windows-deployment.xml#application-dependencies">Application Dependencies</db:link> section.</db:para>
<db:para>We'll cover the plugins shortly, but first we'll check that the application will work in a deployed environment: Either copy the executable and the Qt DLLs to a machine that doesn't have Qt or any Qt applications installed, or if you want to test on the build machine, ensure that the machine doesn't have Qt in its environment.</db:para>
<db:para>If the application starts without any problems, then we have successfully made a dynamically linked version of the plugandpaint application. But the application's functionality will still be missing since we have not yet deployed the associated plugins.</db:para>
<db:para>Plugins work differently to normal DLLs, so we can't just copy them into the same directory as our application's executable as we did with the Qt DLLs. When looking for plugins, the application searches in a plugins subdirectory inside the directory of the application executable.</db:para>
<db:para>So to make the plugins available to our application, we have to create the plugins subdirectory and copy over the relevant DLLs:</db:para>
<db:programlisting language="cpp">plugins\pnp_basictools.dll
plugins\pnp_extrafilters.dll
</db:programlisting>
<db:para>An archive distributing all the Qt DLLs and application specific plugins required to run the <db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/tests/manual/examples/widgets/tools/plugandpaint/app?h=6.6">Plug &amp; Paint</db:link> application, would have to include the following files:</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Component</db:para>
</db:th>
<db:th colspan="2" rowspan="1">
<db:para>File Name</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>The executable</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>plugandpaint.exe</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The Basic Tools plugin</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>plugins\pnp_basictools.dll</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The ExtraFilters plugin</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>plugins\pnp_extrafilters.dll</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The Qt Windows platform plugin</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>platforms\qwindows.dll</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The Qt Windows Vista style plugin</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>styles\qwindowsvistastyle.dll</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The Qt Core module</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>Qt6Core.dll</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The Qt GUI module</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>Qt6Gui.dll</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The Qt Widgets module</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>Qt6Widgets.dll</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Other plugins might be required depending on the features the application uses (iconengines, imageformats).</db:para>
<db:para>In addition, the archive must contain the following compiler specific libraries (assuming Visual Studio 16 (2019)):</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Component</db:para>
</db:th>
<db:th colspan="2" rowspan="1">
<db:para>File Name</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>The C run-time</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>vcruntime140.dll</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The C++ run-time</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>msvcp160.dll</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If dynamic OpenGL was used, then the archive may additionally contain:</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Component</db:para>
</db:th>
<db:th colspan="2" rowspan="1">
<db:para>File Name</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>OpenGL Software renderer library</db:para>
</db:td>
<db:td>
<db:para>opengl32sw.dll</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Finally, if Qt was configured to use ICU, the archive must contain:</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th colspan="3">
<db:para>File Name</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>icudtXX.dll</db:para>
</db:td>
<db:td>
<db:para>icuinXX.dll</db:para>
</db:td>
<db:td>
<db:para>icuucXX.dll</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>To verify that the application now can be successfully deployed, you can extract this archive on a machine without Qt and without any compiler installed, and try to run it.</db:para>
<db:para>An alternative to putting the plugins in the plugins subdirectory is to add a custom search path when you start your application using <db:link xlink:href="qcoreapplication.xml#addLibraryPath">QCoreApplication::addLibraryPath</db:link>() or <db:link xlink:href="qcoreapplication.xml#setLibraryPaths">QCoreApplication::setLibraryPaths</db:link>().</db:para>
<db:programlisting language="cpp">QCoreApplication::addLibraryPath(&quot;C:/some/other/path&quot;);
</db:programlisting>
<db:para>One benefit of using plugins is that they can easily be made available to a whole family of applications.</db:para>
<db:para>It's often most convenient to add the path in the application's main() function, right after the <db:link xlink:href="qapplication.xml">QApplication</db:link> object is created. Once the path is added, the application will search it for plugins, in addition to looking in the plugins subdirectory in the application's own directory. Any number of additional paths can be added.</db:para>
</db:section>
<db:section xml:id="manifest-files">
<db:title>Manifest files</db:title>
<db:para>When deploying an application compiled with Visual Studio, there are some additional steps to be taken.</db:para>
<db:para>First, we need to copy the manifest file created when linking the application. This manifest file contains information about the application's dependencies on side-by-side assemblies, such as the runtime libraries.</db:para>
<db:para>The manifest file needs to be copied into the <db:emphasis role="bold">same</db:emphasis> folder as the application executable. You do not need to copy the manifest files for shared libraries (DLLs), since they are not used.</db:para>
<db:para>If the shared library has dependencies that are different from the application using it, the manifest file needs to be embedded into the DLL binary. The following CONFIG options are available for embedding manifests:</db:para>
<db:programlisting language="cpp">embed_manifest_dll
embed_manifest_exe
</db:programlisting>
<db:para>Both options are enabled by default. To remove embed_manifest_exe, add</db:para>
<db:programlisting language="cpp">CONFIG -= embed_manifest_exe
</db:programlisting>
<db:para>to your .pro file.</db:para>
<db:para>You can find more information about manifest files and side-by-side assemblies at the <db:link xlink:href="https://docs.microsoft.com/en-us/previous-versions//aa376307(v=vs.85)">Side-by-side Assemblies documentation page</db:link>.</db:para>
<db:para>The correct way to include the runtime libraries with your application is to ensure that they are installed on the end-user's system.</db:para>
<db:para>To install the runtime libraries on the end-user's system, you need to include the appropriate Visual C++ Redistributable Package (VCRedist) executable with your application and ensure that it is executed when the user installs your application.</db:para>
<db:para>The redistributable is named vc_redist.x64.exe (64-bit) and can be found in the folder &lt;Visual Studio install path&gt;/VC/redist/&lt;language-code&gt;.</db:para>
<db:para>Alternatively, it can be downloaded from the web, for example <db:link xlink:href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads">https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads</db:link>.</db:para>
<db:note>
<db:para>The application you ship must be compiled with exactly the same compiler version against the same C runtime version. This prevents deploying errors caused by different versions of the C runtime libraries.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="application-dependencies">
<db:title>Application Dependencies</db:title>
<db:section xml:id="additional-libraries">
<db:title>Additional Libraries</db:title>
<db:para>Depending on configuration, compiler specific libraries must be redistributed along with your application.</db:para>
<db:para>You can check which libraries your application is linking against by using the <db:link xlink:href="http://www.dependencywalker.com/">Dependency Walker</db:link> tool. All you need to do is to run it like this:</db:para>
<db:programlisting language="cpp">depends &amp;lt;application executable&amp;gt;
</db:programlisting>
<db:para>This will provide a list of the libraries that your application depends on and other information.</db:para>
<db:para>When looking at the release build of the Plug &amp; Paint executable (plugandpaint.exe) with the depends tool, the tool lists the following immediate dependencies to non-system libraries:</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt</db:para>
</db:th>
<db:th>
<db:para>Visual Studio 16 (2019)</db:para>
</db:th>
<db:th>
<db:para>MinGW</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>QT6CORE.DLL - The <db:link xlink:href="qtcore-module.xml">QtCore</db:link> runtime</db:para>
</db:listitem>
<db:listitem>
<db:para>QT6GUI.DLL - The <db:link xlink:href="qtgui-module.xml">QtGui</db:link> runtime</db:para>
</db:listitem>
<db:listitem>
<db:para>QT6WIDGETS.DLL - The <db:link xlink:href="qtwidgets-module.xml">QtWidgets</db:link> runtime</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>VCCORLIB140.DLL, VCRUNTIME140D.DLL - The C runtime</db:para>
</db:listitem>
<db:listitem>
<db:para>MSVCP140.DLL - The C++ runtime</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>LIBWINPTHREAD-1.DLL</db:para>
</db:listitem>
<db:listitem>
<db:para>LIBGCC_S_SEH-1.DLL</db:para>
</db:listitem>
<db:listitem>
<db:para>LIBSTDC++-6.DLL</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When looking at the plugin DLLs the exact same dependencies are listed.</db:para>
</db:section>
<db:section xml:id="qt-plugins">
<db:title>Qt Plugins</db:title>
<db:para>All Qt GUI applications require a plugin that implements the <db:link xlink:href="qpa.xml">Qt Platform Abstraction</db:link> (QPA) layer in Qt. For Windows, the name of the platform plugin is qwindows.dll. This file must be located within a specific subdirectory (by default, platforms) under your distribution directory. Alternatively, it is possible to adjust the search path Qt uses to find its plugins, as described below.</db:para>
<db:para>Your application may also depend on one or more Qt plugins, such as the print support plugin, the JPEG image format plugin or a SQL driver plugin. Be sure to distribute any Qt plugins that you need with your application. Similar to the platform plugin, each type of plugin must be located within a specific subdirectory (such as printsupport, imageformats or sqldrivers) within your distribution directory.</db:para>
<db:para>The libraries are relocatable unless Qt was built with the configure switch -relocatable turned off. The search paths for Qt plugins are relative to the location of the <db:link xlink:href="qtcore-module.xml">QtCore</db:link> library and no further steps are required to ensure plugins are found after installing the application on the target machine.</db:para>
</db:section>
<db:section xml:id="ensuring-plugins-are-found-when-using-non-relocatable-builds">
<db:title>Ensuring Plugins Are Found when Using Non-Relocatable Builds</db:title>
<db:para>For non-relocatable builds, additional steps must be taken to ensure plugins are found after the application has been installed on the target machine.</db:para>
<db:para>In this case, the search path for Qt plugins is hard-coded into the <db:link xlink:href="qtcore-module.xml">QtCore</db:link> library. By default, the plugins subdirectory of the Qt installation is the first plugin search path. However, pre-determined paths like the default one have certain disadvantages. For example, they may not exist on the target machine. For that reason, you need to examine various alternatives to make sure that the Qt plugins are found:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt-conf.xml">Using qt.conf</db:link>. This approach is the recommended if you have executables in different places sharing the same plugins.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using <db:link xlink:href="qcoreapplication.xml#addLibraryPath">QApplication::addLibraryPath</db:link>() or <db:link xlink:href="qcoreapplication.xml#setLibraryPaths">QApplication::setLibraryPaths</db:link>(). This approach is recommended if you only have one executable that will use the plugin.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using a third party installation utility to change the hard-coded paths in the <db:link xlink:href="qtcore-module.xml">QtCore</db:link> library.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you add a custom path using QApplication::addLibraryPath it could look like this:</db:para>
<db:programlisting language="cpp">QCoreApplication::addLibraryPath(&quot;C:/customPath/plugins&quot;);
</db:programlisting>
<db:para>Then <db:link xlink:href="qcoreapplication.xml#libraryPaths">QCoreApplication::libraryPaths</db:link>() would return something like this:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>C:/customPath/plugins</db:para>
</db:listitem>
<db:listitem>
<db:para>C:/Qt/%VERSION%/plugins</db:para>
</db:listitem>
<db:listitem>
<db:para>E:/myApplication/directory</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The executable will look for the plugins in these directories and the same order as the <db:link xlink:href="qstringlist.xml">QStringList</db:link> returned by <db:link xlink:href="qcoreapplication.xml#libraryPaths">QCoreApplication::libraryPaths</db:link>(). The newly added path is prepended to the <db:link xlink:href="qcoreapplication.xml#libraryPaths">QCoreApplication::libraryPaths</db:link>() which means that it will be searched through first. However, if you use <db:link xlink:href="qcoreapplication.xml#setLibraryPaths">QCoreApplication::setLibraryPaths</db:link>(), you will be able to determine which paths and in which order they will be searched.</db:para>
<db:para>The <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> document outlines the issues you need to pay attention to when building and deploying plugins for Qt applications.</db:para>
</db:section>
</db:section>
</db:article>
