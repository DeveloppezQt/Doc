<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Remote Objects QML Types</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides QML types for remote objects support.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>The QML types for <db:link xlink:href="qtremoteobjects-index.xml">Qt Remote Objects</db:link> provide the helper pieces needed to build a remote objects network. They are typically used in conjunction with custom-registered replica types that make up a specific network.</db:para>
<db:para>As an example, consider the following .rep file:</db:para>
<db:programlisting language="cpp">class MyType {
    PROP(QString myProp=&quot;Hello World&quot;)
};
</db:programlisting>
<db:para>The generated replica can be registered as a QML type:</db:para>
<db:programlisting language="cpp">qmlRegisterType&amp;lt;MyTypeReplica&amp;gt;(&quot;custom&quot;,1,0,&quot;MyTypeReplica&quot;)
</db:programlisting>
<db:para>And then used from QML in conjunction with the base type Node:</db:para>
<db:programlisting language="qml">import QtQuick
import QtRemoteObjects
import custom 1.0

Item {
    MyTypeReplica {
        id: myType
        node: Node { registryUrl: &quot;local:registry&quot; }
    }

    Text { text: myType.myProp }

    MouseArea {
        anchors.fill: parent
        onClicked: myType.pushMyProp(&quot;Updated Text&quot;)
    }
}
</db:programlisting>
<db:para>Note that by default you cannot directly assign to a replica property, but rather use a <db:code>push</db:code> function. This is due to the potential problems that arise from the mix of declarative programming and asynchronous updates. Specifically, we want to avoid issues like the following:</db:para>
<db:programlisting language="cpp" role="bad">myType.myProp = &quot;Updated Text&quot;
console.log(myType.myProp) // logs &quot;Hello World&quot;, as the new text has not yet been round-tripped
</db:programlisting>
<db:para>The QML types in this module can be imported into your application using the following import statement in your .qml file:</db:para>
<db:programlisting language="qml">import QtRemoteObjects
</db:programlisting>
<db:section xml:id="qml-types">
<db:title>QML Types</db:title>
<db:section>
<db:title>Contents</db:title>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtremoteobjects-host.xml" xlink:role="">Host</db:link></db:term>
<db:listitem>
<db:para>A host node on a Qt Remote Objects network.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtremoteobjects-node.xml" xlink:role="">Node</db:link></db:term>
<db:listitem>
<db:para>A node on a Qt Remote Objects network.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtremoteobjects-qtremoteobjects.xml" xlink:role="">QtRemoteObjects</db:link></db:term>
<db:listitem>
<db:para>The QtRemoteObjects global object provides useful functions for working with remote types in QML.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtremoteobjects-settingsstore.xml" xlink:role="">SettingsStore</db:link></db:term>
<db:listitem>
<db:para>A basic store for persisted properties.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
