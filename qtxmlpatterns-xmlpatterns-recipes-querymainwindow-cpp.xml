<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Recipes Example</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using Qt XML Patterns to query XML data loaded from a file.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets/QMessageBox&amp;gt;
#include &amp;lt;QtWidgets/QFileDialog&amp;gt;
#include &amp;lt;QtXmlPatterns&amp;gt;

#include &quot;querymainwindow.h&quot;
#include &quot;xmlsyntaxhighlighter.h&quot;

QueryMainWindow::QueryMainWindow()
{
    setupUi(this);

    new XmlSyntaxHighlighter(findChild&amp;lt;QTextEdit*&amp;gt;(&quot;inputTextEdit&quot;)-&amp;gt;document());
    new XmlSyntaxHighlighter(findChild&amp;lt;QTextEdit*&amp;gt;(&quot;outputTextEdit&quot;)-&amp;gt;document());

    ui_defaultQueries = findChild&amp;lt;QComboBox*&amp;gt;(&quot;defaultQueries&quot;);
    QMetaObject::connectSlotsByName(this);

    connect(ui_defaultQueries, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::currentIndexChanged),
            this, &amp;amp;QueryMainWindow::displayQuery);

    loadInputFile();
    const QStringList queries(QDir(&quot;:/files/&quot;, &quot;*.xq&quot;).entryList());
    for (const auto &amp;amp;query : queries)
        ui_defaultQueries-&amp;gt;addItem(query);
    if (queries.count() &amp;gt; 0)
        displayQuery(0);
}

void QueryMainWindow::displayQuery(int index)
{
    QFile queryFile(QString(&quot;:files/&quot;) + ui_defaultQueries-&amp;gt;itemText(index));
    queryFile.open(QIODevice::ReadOnly);
    const QString query(QString::fromLatin1(queryFile.readAll()));
    findChild&amp;lt;QTextEdit*&amp;gt;(&quot;queryTextEdit&quot;)-&amp;gt;setPlainText(query);

    evaluate(query);
}

void QueryMainWindow::loadInputFile()
{
    QFile forView;
    forView.setFileName(&quot;:/files/cookbook.xml&quot;);
    if (!forView.open(QIODevice::ReadOnly)) {
        QMessageBox::information(this,
            tr(&quot;Unable to open file&quot;), forView.errorString());
        return;
    }

    QTextStream in(&amp;amp;forView);
    QString inputDocument = in.readAll();
    findChild&amp;lt;QTextEdit*&amp;gt;(&quot;inputTextEdit&quot;)-&amp;gt;setPlainText(inputDocument);
}

void QueryMainWindow::evaluate(const QString &amp;amp;str)
{
    QFile sourceDocument;
    sourceDocument.setFileName(&quot;:/files/cookbook.xml&quot;);
    sourceDocument.open(QIODevice::ReadOnly);

    QByteArray outArray;
    QBuffer buffer(&amp;amp;outArray);
    buffer.open(QIODevice::ReadWrite);

    QXmlQuery query;
    query.bindVariable(&quot;inputDocument&quot;, &amp;amp;sourceDocument);
    query.setQuery(str);
    if (!query.isValid())
        return;

    QXmlFormatter formatter(query, &amp;amp;buffer);
    if (!query.evaluateTo(&amp;amp;formatter))
        return;

    buffer.close();
    findChild&amp;lt;QTextEdit*&amp;gt;(&quot;outputTextEdit&quot;)-&amp;gt;setPlainText(QString::fromUtf8(outArray.constData()));

}

</db:programlisting>
</db:article>
