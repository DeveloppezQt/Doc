<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QJoint Class</db:title>
<db:subtitle>Qt3DCore::QJoint</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Used to transforms parts of skinned meshes.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJoint</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3DCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3DCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dcore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qt3d-core-joint.xml" xlink:role="">Joint</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qt3dcore-qjoint.xml">QJoint</db:link> node is used to build skeletons as part of the skinned mesh support in Qt 3D. A joint can be transformed by way of its scale, rotation and translation properties. Any mesh vertices that are bound to the joint will have their transformations updated accordingly.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="inverseBindMatrix-prop">
<db:title>inverseBindMatrix : QMatrix4x4</db:title>
<db:para>Holds the inverse bind matrix of the joint. This is used to transform vertices from model space into the space of this joint so they can subsequently be multiplied by the joint's global transform to perform the skinning operation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QMatrix4x4</db:type> <db:emphasis role="bold">inverseBindMatrix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInverseBindMatrix</db:emphasis>(const <db:type>QMatrix4x4</db:type> &amp;<db:emphasis>inverseBindMatrix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">inverseBindMatrixChanged</db:emphasis>(const <db:type>QMatrix4x4</db:type> &amp;<db:emphasis>inverseBindMatrix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotation-prop">
<db:title>rotation : QQuaternion</db:title>
<db:para>Holds the rotation of the joint as QQuaternion.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QQuaternion</db:type> <db:emphasis role="bold">rotation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotation</db:emphasis>(const <db:type>QQuaternion</db:type> &amp;<db:emphasis>rotation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationChanged</db:emphasis>(const <db:type>QQuaternion</db:type> &amp;<db:emphasis>rotation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationX-prop">
<db:title>rotationX : float</db:title>
<db:para>Holds the x rotation of the joint as an Euler angle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">rotationX</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationX</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationX</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationXChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationX</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationY-prop">
<db:title>rotationY : float</db:title>
<db:para>Holds the y rotation of the joint as an Euler angle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">rotationY</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationY</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationY</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationYChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationY</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationZ-prop">
<db:title>rotationZ : float</db:title>
<db:para>Holds the z rotation of the joint as an Euler angle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">rotationZ</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationZ</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationZ</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationZChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationZ</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="scale-prop">
<db:title>scale : QVector3D</db:title>
<db:para>Holds the scale of the joint.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QVector3D</db:type> <db:emphasis role="bold">scale</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setScale</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>scale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">scaleChanged</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>scale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="translation-prop">
<db:title>translation : QVector3D</db:title>
<db:para>Holds the translation of the joint as QVector3D.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QVector3D</db:type> <db:emphasis role="bold">translation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTranslation</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>translation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">translationChanged</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>translation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QJoint">
<db:title>[explicit] QJoint::QJoint(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new <db:link xlink:href="qt3dcore-qjoint.xml">QJoint</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="addChildJoint">
<db:title>void QJoint::addChildJoint(Qt3DCore::QJoint *<db:emphasis>joint</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">joint</db:code> as a child of this joint. If <db:code role="parameter">joint</db:code> has no parent, then this joint takes ownership of it. Child joints are in the coordinate system of their parent joint.</db:para>
</db:section>
<db:section xml:id="childJoints">
<db:title>QList&lt;Qt3DCore::QJoint *&gt; QJoint::childJoints() const</db:title>
<db:para>The vector of joints this joint has as children.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>QString QJoint::name() const</db:title>
<db:para>Returns the name of the joint.</db:para>
<db:note>
<db:para>Getter function for property name. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qjoint.xml#name-prop">setName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeChildJoint">
<db:title>void QJoint::removeChildJoint(Qt3DCore::QJoint *<db:emphasis>joint</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">joint</db:code> from this joint's list of children. The child joint is not destroyed.</db:para>
</db:section>
<db:section xml:id="setToIdentity">
<db:title>void QJoint::setToIdentity()</db:title>
<db:para>Sets the transform matrix for this joint to the identity matrix.</db:para>
</db:section>
</db:section>
</db:article>
