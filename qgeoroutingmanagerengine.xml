<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoRoutingManagerEngine Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoroutingmanagerengine.xml">QGeoRoutingManagerEngine</db:link> class provides an interface and convenience methods to implementers of <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> plugins who want to provide access to geographic routing information.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoRoutingManagerEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoRoutingManagerEngine is part of <db:simplelist><db:member>QtLocation-impl</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>There are no source or binary compatibility guarantees for the backend classes. The API is only guaranteed to work with the Qt version it was developed against. API changes will however only be made in minor releases. (6.6, 6.7, and so on.)</db:para>
</db:note>
<db:para>Subclasses of <db:link xlink:href="qgeoroutingmanagerengine.xml">QGeoRoutingManagerEngine</db:link> need to provide an implementation of <db:link xlink:href="qgeoroutingmanagerengine.xml#calculateRoute">calculateRoute</db:link>().</db:para>
<db:para>In the default implementation, supportsRouteUpdates() returns false and <db:link xlink:href="qgeoroutingmanagerengine.xml#updateRoute">updateRoute</db:link>() returns a <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> object containing a <db:link xlink:href="qgeoroutereply.xml#Error-enum">QGeoRouteReply::UnsupportedOptionError</db:link>.</db:para>
<db:para>If the routing service supports updating routes as they are being traveled, the subclass should provide an implementation of <db:link xlink:href="qgeoroutingmanagerengine.xml#updateRoute">updateRoute</db:link>() and call setSupportsRouteUpdates(true) at some point in time before <db:link xlink:href="qgeoroutingmanagerengine.xml#updateRoute">updateRoute</db:link>() is called.</db:para>
<db:para>The function setSupportsRouteUpdates() is one of several functions which configure the reported capabilities of the engine. If the capabilities of an engine differ from the default values these functions should be used so that the reported capabilities are accurate.</db:para>
<db:para>It is important that this is done before <db:link xlink:href="qgeoroutingmanagerengine.xml#calculateRoute">calculateRoute</db:link>(), <db:link xlink:href="qgeoroutingmanagerengine.xml#updateRoute">updateRoute</db:link>() or any of the capability reporting functions are used to prevent incorrect or inconsistent behavior.</db:para>
<db:para>A subclass of QGeoRouteManagerEngine will often make use of a subclass fo <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> internally, in order to add any engine-specific data (such as a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object for network-based services) to the <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> instances used by the engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoRoutingManagerEngine">
<db:title>[explicit] QGeoRoutingManagerEngine::QGeoRoutingManagerEngine(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoRoutingManagerEngine</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRoutingManagerEngine(const QVariantMap &amp;parameters, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new engine with the specified <db:code role="parameter">parent</db:code>, using <db:code role="parameter">parameters</db:code> to pass any implementation specific data to the engine.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoRoutingManagerEngine">
<db:title>[virtual] QGeoRoutingManagerEngine::~QGeoRoutingManagerEngine()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGeoRoutingManagerEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoRoutingManagerEngine()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this engine.</db:para>
</db:section>
<db:section xml:id="calculateRoute">
<db:title>[pure virtual] QGeoRouteReply *QGeoRoutingManagerEngine::calculateRoute(const QGeoRouteRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QGeoRouteReply *</db:type>
<db:methodname>calculateRoute</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteReply * calculateRoute(const QGeoRouteRequest &amp;request) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins the calculation of the route specified by <db:code role="parameter">request</db:code>.</db:para>
<db:para>A <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> object will be returned, which can be used to manage the routing operation and to return the results of the operation.</db:para>
<db:para>This engine and the returned <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> object will emit signals indicating if the operation completes or if errors occur.</db:para>
<db:para>Once the operation has completed, <db:link xlink:href="qgeoroutereply.xml#routes">QGeoRouteReply::routes</db:link> can be used to retrieve the calculated route or routes.</db:para>
<db:para>If <db:code role="parameter">request</db:code> includes features which are not supported by this engine, as reported by the methods in this engine, then a <db:link xlink:href="qgeoroutereply.xml#Error-enum">QGeoRouteReply::UnsupportedOptionError</db:link> will occur.</db:para>
<db:para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to <db:link xlink:href="qgeoroutingmanagerengine.xml#finished">QGeoRoutingManagerEngine::finished</db:link>(), <db:link xlink:href="qgeoroutingmanagerengine.xml#errorOccurred">QGeoRoutingManagerEngine::errorOccurred</db:link>(), <db:link xlink:href="qgeoroutereply.xml#finished">QGeoRouteReply::finished</db:link>() or <db:link xlink:href="qgeoroutereply.xml#errorOccurred">QGeoRouteReply::errorOccurred</db:link>() with <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QGeoRoutingManagerEngine::errorOccurred(QGeoRouteReply *<db:emphasis>reply</db:emphasis>, QGeoRouteReply::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QGeoRouteReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGeoRouteReply::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QGeoRouteReply *reply, QGeoRouteReply::Error error, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error has been detected in the processing of <db:code role="parameter">reply</db:code>. The <db:link xlink:href="qgeoroutingmanagerengine.xml#finished">QGeoRoutingManagerEngine::finished</db:link>() signal will probably follow.</db:para>
<db:para>The error will be described by the error code <db:code role="parameter">error</db:code>. If <db:code role="parameter">errorString</db:code> is not empty it will contain a textual description of the error.</db:para>
<db:para>This signal and <db:link xlink:href="qgeoroutereply.xml#errorOccurred">QGeoRouteReply::errorOccurred</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="finished">
<db:title>void QGeoRoutingManagerEngine::finished(QGeoRouteReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:methodparam>
<db:type>QGeoRouteReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished(QGeoRouteReply *reply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:code role="parameter">reply</db:code> has finished processing.</db:para>
<db:para>If reply::error() equals <db:link xlink:href="qgeoroutereply.xml#Error-enum">QGeoRouteReply::NoError</db:link> then the processing finished successfully.</db:para>
<db:para>This signal and <db:link xlink:href="qgeoroutereply.xml#finished">QGeoRouteReply::finished</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="locale">
<db:title>QLocale QGeoRoutingManagerEngine::locale() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLocale</db:type>
<db:methodname>locale</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLocale locale() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the locale used to hint to this routing manager about what language to use for addresses and instructions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="managerName">
<db:title>QString QGeoRoutingManagerEngine::managerName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>managerName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString managerName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name which this engine implementation uses to distinguish itself from the implementations provided by other plugins.</db:para>
<db:para>The combination of managerName() and <db:link xlink:href="qgeoroutingmanagerengine.xml#managerVersion">managerVersion</db:link>() should be unique amongst plugin implementations.</db:para>
</db:section>
<db:section xml:id="managerVersion">
<db:title>int QGeoRoutingManagerEngine::managerVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>managerVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int managerVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the version of this engine implementation.</db:para>
<db:para>The combination of <db:link xlink:href="qgeoroutingmanagerengine.xml#managerName">managerName</db:link>() and managerVersion() should be unique amongst plugin implementations.</db:para>
</db:section>
<db:section xml:id="measurementSystem">
<db:title>QLocale::MeasurementSystem QGeoRoutingManagerEngine::measurementSystem() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLocale::MeasurementSystem</db:type>
<db:methodname>measurementSystem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLocale::MeasurementSystem measurementSystem() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the measurement system used by this manager.</db:para>
<db:para>If <db:link xlink:href="qgeoroutingmanagerengine.xml#setMeasurementSystem">setMeasurementSystem</db:link>() has been called then the value returned by this function may be different to that returned by <db:link xlink:href="qgeoroutingmanagerengine.xml#locale">locale</db:link>().<db:link xlink:href="qlocale.xml#measurementSystem">measurementSystem</db:link>(). In which case the value returned by this function is what will be used by the manager.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setMeasurementSystem">setMeasurementSystem</db:link>()</db:member>
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QGeoRoutingManagerEngine::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocale</db:methodname>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocale(const QLocale &amp;locale)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the locale to be used by this manager to <db:code role="parameter">locale</db:code>.</db:para>
<db:para>If this routing manager supports returning addresses and instructions in different languages, they will be returned in the language of <db:code role="parameter">locale</db:code>.</db:para>
<db:para>The locale used defaults to the system locale if this is not set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#locale">locale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMeasurementSystem">
<db:title>void QGeoRoutingManagerEngine::setMeasurementSystem(QLocale::MeasurementSystem <db:emphasis>system</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMeasurementSystem</db:methodname>
<db:methodparam>
<db:type>QLocale::MeasurementSystem</db:type>
<db:parameter>system</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMeasurementSystem(QLocale::MeasurementSystem system)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the measurement system used by this manager to <db:code role="parameter">system</db:code>.</db:para>
<db:para>The measurement system can be set independently of the locale. Both <db:link xlink:href="qgeoroutingmanagerengine.xml#setLocale">setLocale</db:link>() and this function set the measurement system. The value set by the last function called will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#measurementSystem">measurementSystem</db:link>()</db:member>
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#locale">locale</db:link>()</db:member>
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSupportedFeatureTypes">
<db:title>[protected] void QGeoRoutingManagerEngine::setSupportedFeatureTypes(QGeoRouteRequest::FeatureTypes <db:emphasis>featureTypes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSupportedFeatureTypes</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::FeatureTypes</db:type>
<db:parameter>featureTypes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSupportedFeatureTypes(QGeoRouteRequest::FeatureTypes featureTypes)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the types of features that this engine can take into account during route planning to <db:code role="parameter">featureTypes</db:code>.</db:para>
<db:para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no feature types at all.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#supportedFeatureTypes">supportedFeatureTypes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSupportedFeatureWeights">
<db:title>[protected] void QGeoRoutingManagerEngine::setSupportedFeatureWeights(QGeoRouteRequest::FeatureWeights <db:emphasis>featureWeights</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSupportedFeatureWeights</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::FeatureWeights</db:type>
<db:parameter>featureWeights</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSupportedFeatureWeights(QGeoRouteRequest::FeatureWeights featureWeights)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the weightings which this engine can apply to different features during route planning to <db:code role="parameter">featureWeights</db:code>.</db:para>
<db:para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no feature weights at all.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#supportedFeatureWeights">supportedFeatureWeights</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSupportedManeuverDetails">
<db:title>[protected] void QGeoRoutingManagerEngine::setSupportedManeuverDetails(QGeoRouteRequest::ManeuverDetails <db:emphasis>maneuverDetails</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSupportedManeuverDetails</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::ManeuverDetails</db:type>
<db:parameter>maneuverDetails</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSupportedManeuverDetails(QGeoRouteRequest::ManeuverDetails maneuverDetails)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the levels of detail for navigation maneuvers which can be requested by this engine to <db:code role="parameter">maneuverDetails</db:code>.</db:para>
<db:para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no maneuver details at all.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#supportedManeuverDetails">supportedManeuverDetails</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSupportedRouteOptimizations">
<db:title>[protected] void QGeoRoutingManagerEngine::setSupportedRouteOptimizations(QGeoRouteRequest::RouteOptimizations <db:emphasis>optimizations</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSupportedRouteOptimizations</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::RouteOptimizations</db:type>
<db:parameter>optimizations</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSupportedRouteOptimizations(QGeoRouteRequest::RouteOptimizations optimizations)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the route optimizations supported by this engine to <db:code role="parameter">optimizations</db:code>.</db:para>
<db:para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no route optimizations at all.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#supportedRouteOptimizations">supportedRouteOptimizations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSupportedSegmentDetails">
<db:title>[protected] void QGeoRoutingManagerEngine::setSupportedSegmentDetails(QGeoRouteRequest::SegmentDetails <db:emphasis>segmentDetails</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSupportedSegmentDetails</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::SegmentDetails</db:type>
<db:parameter>segmentDetails</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSupportedSegmentDetails(QGeoRouteRequest::SegmentDetails segmentDetails)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the levels of detail for routing segments which can be requested by this engine to <db:code role="parameter">segmentDetails</db:code>.</db:para>
<db:para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no segment detail at all.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#supportedSegmentDetails">supportedSegmentDetails</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSupportedTravelModes">
<db:title>[protected] void QGeoRoutingManagerEngine::setSupportedTravelModes(QGeoRouteRequest::TravelModes <db:emphasis>travelModes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSupportedTravelModes</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::TravelModes</db:type>
<db:parameter>travelModes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSupportedTravelModes(QGeoRouteRequest::TravelModes travelModes)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the travel modes supported by this engine to <db:code role="parameter">travelModes</db:code>.</db:para>
<db:para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no travel modes at all.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#supportedTravelModes">supportedTravelModes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedFeatureTypes">
<db:title>QGeoRouteRequest::FeatureTypes QGeoRoutingManagerEngine::supportedFeatureTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::FeatureTypes</db:type>
<db:methodname>supportedFeatureTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::FeatureTypes supportedFeatureTypes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the types of features that this engine can take into account during route planning.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setSupportedFeatureTypes">setSupportedFeatureTypes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedFeatureWeights">
<db:title>QGeoRouteRequest::FeatureWeights QGeoRoutingManagerEngine::supportedFeatureWeights() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::FeatureWeights</db:type>
<db:methodname>supportedFeatureWeights</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::FeatureWeights supportedFeatureWeights() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the weightings which this engine can apply to different features during route planning.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setSupportedFeatureWeights">setSupportedFeatureWeights</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedManeuverDetails">
<db:title>QGeoRouteRequest::ManeuverDetails QGeoRoutingManagerEngine::supportedManeuverDetails() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::ManeuverDetails</db:type>
<db:methodname>supportedManeuverDetails</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::ManeuverDetails supportedManeuverDetails() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the levels of detail for navigation maneuvers which can be requested by this engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setSupportedManeuverDetails">setSupportedManeuverDetails</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedRouteOptimizations">
<db:title>QGeoRouteRequest::RouteOptimizations QGeoRoutingManagerEngine::supportedRouteOptimizations() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::RouteOptimizations</db:type>
<db:methodname>supportedRouteOptimizations</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::RouteOptimizations supportedRouteOptimizations() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the route optimizations supported by this engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setSupportedRouteOptimizations">setSupportedRouteOptimizations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedSegmentDetails">
<db:title>QGeoRouteRequest::SegmentDetails QGeoRoutingManagerEngine::supportedSegmentDetails() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::SegmentDetails</db:type>
<db:methodname>supportedSegmentDetails</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::SegmentDetails supportedSegmentDetails() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the levels of detail for routing segments which can be requested by this engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setSupportedSegmentDetails">setSupportedSegmentDetails</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedTravelModes">
<db:title>QGeoRouteRequest::TravelModes QGeoRoutingManagerEngine::supportedTravelModes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::TravelModes</db:type>
<db:methodname>supportedTravelModes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::TravelModes supportedTravelModes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the travel modes supported by this engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanagerengine.xml#setSupportedTravelModes">setSupportedTravelModes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateRoute">
<db:title>[virtual] QGeoRouteReply *QGeoRoutingManagerEngine::updateRoute(const QGeoRoute &amp;<db:emphasis>route</db:emphasis>, const QGeoCoordinate &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QGeoRouteReply *</db:type>
<db:methodname>updateRoute</db:methodname>
<db:methodparam>
<db:type>const QGeoRoute &amp;</db:type>
<db:parameter>route</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteReply * updateRoute(const QGeoRoute &amp;route, const QGeoCoordinate &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins the process of updating <db:code role="parameter">route</db:code> based on the current position <db:code role="parameter">position</db:code>.</db:para>
<db:para>A <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> object will be returned, which can be used to manage the routing operation and to return the results of the operation.</db:para>
<db:para>This engine and the returned <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> object will emit signals indicating if the operation completes or if errors occur.</db:para>
<db:para>If supportsRouteUpdates() returns false an <db:link xlink:href="qgeoroutereply.xml#Error-enum">QGeoRouteReply::UnsupportedOptionError</db:link> will occur.</db:para>
<db:para>Once the operation has completed, <db:link xlink:href="qgeoroutereply.xml#routes">QGeoRouteReply::routes</db:link> can be used to retrieve the updated route.</db:para>
<db:para>The returned route could be entirely different to the original route, especially if <db:code role="parameter">position</db:code> is far enough away from the initial route. Otherwise the route will be similar, although the remaining time and distance will be updated and any segments of the original route which have been traversed will be removed.</db:para>
<db:para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to <db:link xlink:href="qgeoroutingmanagerengine.xml#finished">QGeoRoutingManagerEngine::finished</db:link>(), <db:link xlink:href="qgeoroutingmanagerengine.xml#errorOccurred">QGeoRoutingManagerEngine::errorOccurred</db:link>(), <db:link xlink:href="qgeoroutereply.xml#finished">QGeoRouteReply::finished</db:link>() or <db:link xlink:href="qgeoroutereply.xml#errorOccurred">QGeoRouteReply::errorOccurred</db:link>() with <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
