<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtAndroidPrivate Namespace</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link> namespace provides miscellaneous functions to aid Android development.</db:para>
<db:para><db:emphasis role="bold">This namespace is under development and is subject to change.</db:emphasis></db:para>
<db:para>This namespace was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtCore/private/qandroidextras_p.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This namespace is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When building with CMake, use the following commands to use private Qt Core APIs:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
target_link_libraries(mytarget PRIVATE Qt6::CorePrivate)
</db:programlisting>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="BindFlag-enum">
<db:title>[since 6.2] enum QtAndroidPrivate::BindFlag</db:title>
<db:bridgehead renderas="sect2">flags QtAndroidPrivate::BindFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>BindFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AutoCreate</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DebugUnbind</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotForeground</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AboveClient</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllowOomManagement</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WaivePriority</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Important</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AdjustWithActivity</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExternalService</db:enumidentifier>
<db:enumvalue>-2147483648</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QtAndroidPrivate::BindFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum is used with <db:link xlink:href="qtandroidprivate.xml#bindService">QtAndroidPrivate::bindService</db:link> to describe the mode in which the binding is performed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>No options.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::AutoCreate</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Automatically creates the service as long as the binding exist. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_AUTO_CREATE">BIND_AUTO_CREATE</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::DebugUnbind</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Include debugging help for mismatched calls to unbind. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_DEBUG_UNBIND">BIND_DEBUG_UNBIND</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::NotForeground</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Don't allow this binding to raise the target service's process to the foreground scheduling priority. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_NOT_FOREGROUND">BIND_NOT_FOREGROUND</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::AboveClient</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Indicates that the client application binding to this service considers the service to be more important than the app itself. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_ABOVE_CLIENT">BIND_ABOVE_CLIENT</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::AllowOomManagement</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Allow the process hosting the bound service to go through its normal memory management. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_ALLOW_OOM_MANAGEMENT">BIND_ALLOW_OOM_MANAGEMENT</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::WaivePriority</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Don't impact the scheduling or memory management priority of the target service's hosting process. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_WAIVE_PRIORITY">BIND_WAIVE_PRIORITY</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::Important</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>This service is assigned a higher priority so that it is available to the client when needed. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_IMPORTANT">BIND_IMPORTANT</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::AdjustWithActivity</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>If binding from an activity, allow the target service's process importance to be raised based on whether the activity is visible to the user. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_ADJUST_WITH_ACTIVITY">BIND_ADJUST_WITH_ACTIVITY</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroidprivate.xml">QtAndroidPrivate</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::ExternalService</db:code></db:para>
</db:td>
<db:td><db:code>-2147483648</db:code></db:td>
<db:td>
<db:para>The service being bound is an isolated, external service. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_EXTERNAL_SERVICE">BIND_EXTERNAL_SERVICE</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 6.2.</db:para>
<db:para>The <db:code>BindFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;BindFlag&gt;. </db:code>It stores an OR combination of <db:code>BindFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="bindService">
<db:title>[since 6.2] bool QtAndroidPrivate::bindService(const QAndroidIntent &amp;<db:emphasis>serviceIntent</db:emphasis>, const QAndroidServiceConnection &amp;<db:emphasis>serviceConnection</db:emphasis>, QtAndroidPrivate::BindFlags <db:emphasis>flags</db:emphasis> = BindFlag::None)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>bindService</db:methodname>
<db:methodparam>
<db:type>const QAndroidIntent &amp;</db:type>
<db:parameter>serviceIntent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAndroidServiceConnection &amp;</db:type>
<db:parameter>serviceConnection</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtAndroidPrivate::BindFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>BindFlag::None</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool bindService(const QAndroidIntent &amp;serviceIntent, const QAndroidServiceConnection &amp;serviceConnection, QtAndroidPrivate::BindFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds the service given by <db:code role="parameter">serviceIntent</db:code>, <db:code role="parameter">serviceConnection</db:code> and <db:code role="parameter">flags</db:code>. The <db:code role="parameter">serviceIntent</db:code> object identifies the service to connect to. The <db:code role="parameter">serviceConnection</db:code> is a listener that receives the information as the service is started and stopped.</db:para>
<db:para>Returns true on success</db:para>
<db:para>See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#bindService%28android.content.Intent,%20android.content.ServiceConnection,%20int%29">Android documentation</db:link> documentation for more details.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidintent.xml">QAndroidIntent</db:link></db:member>
<db:member><db:link xlink:href="qandroidserviceconnection.xml">QAndroidServiceConnection</db:link></db:member>
<db:member><db:link xlink:href="qtandroidprivate.xml#BindFlag-enum">BindFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkPermission">
<db:title>[since 6.2] QFuture&lt;QtAndroidPrivate::PermissionResult&gt; QtAndroidPrivate::checkPermission(const QString &amp;<db:emphasis>permission</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFuture&lt;QtAndroidPrivate::PermissionResult&gt;</db:type>
<db:methodname>checkPermission</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>permission</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFuture&lt;QtAndroidPrivate::PermissionResult&gt; checkPermission(const QString &amp;permission)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">preliminary</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:emphasis role="bold">This function is under development and is subject to change.</db:emphasis></db:para>
<db:para>Checks whether this process has the named <db:code role="parameter">permission</db:code> and returns a <db:link xlink:href="qfuture.xml">QFuture</db:link> representing the result of the check.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtandroidprivate.xml#requestPermission">requestPermission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestPermission">
<db:title>[since 6.2] QFuture&lt;QtAndroidPrivate::PermissionResult&gt; QtAndroidPrivate::requestPermission(const QString &amp;<db:emphasis>permission</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFuture&lt;QtAndroidPrivate::PermissionResult&gt;</db:type>
<db:methodname>requestPermission</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>permission</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFuture&lt;QtAndroidPrivate::PermissionResult&gt; requestPermission(const QString &amp;permission)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">preliminary</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:emphasis role="bold">This function is under development and is subject to change.</db:emphasis></db:para>
<db:para>Requests the <db:code role="parameter">permission</db:code> and returns a <db:link xlink:href="qfuture.xml">QFuture</db:link> representing the result of the request.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtandroidprivate.xml#checkPermission">checkPermission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startActivity">
<db:title>[since 6.2] void QtAndroidPrivate::startActivity(const int &amp;<db:emphasis>intent</db:emphasis>, int <db:emphasis>receiverRequestCode</db:emphasis>, QAndroidActivityResultReceiver *<db:emphasis>resultReceiver</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>startActivity</db:methodname>
<db:methodparam>
<db:type>const int &amp;</db:type>
<db:parameter>intent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>receiverRequestCode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAndroidActivityResultReceiver *</db:type>
<db:parameter>resultReceiver</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startActivity(const int &amp;intent, int receiverRequestCode, QAndroidActivityResultReceiver *resultReceiver)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the activity given by <db:code role="parameter">intent</db:code> and provides the result asynchronously through the <db:code role="parameter">resultReceiver</db:code> if this is non-null.</db:para>
<db:para>If <db:code role="parameter">resultReceiver</db:code> is null, then the startActivity() method in the androidActivity() will be called. Otherwise startActivityForResult() will be called.</db:para>
<db:para>The <db:code role="parameter">receiverRequestCode</db:code> is a request code unique to the <db:code role="parameter">resultReceiver</db:code>, and will be returned along with the result, making it possible to use the same receiver for more than one intent.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="startActivity-1">
<db:title>[since 6.2] void QtAndroidPrivate::startActivity(const QAndroidIntent &amp;<db:emphasis>intent</db:emphasis>, int <db:emphasis>receiverRequestCode</db:emphasis>, QAndroidActivityResultReceiver *<db:emphasis>resultReceiver</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>startActivity</db:methodname>
<db:methodparam>
<db:type>const QAndroidIntent &amp;</db:type>
<db:parameter>intent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>receiverRequestCode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAndroidActivityResultReceiver *</db:type>
<db:parameter>resultReceiver</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void startActivity(const QAndroidIntent &amp;intent, int receiverRequestCode, QAndroidActivityResultReceiver *resultReceiver)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the activity given by <db:code role="parameter">intent</db:code> and provides the result asynchronously through the <db:code role="parameter">resultReceiver</db:code> if this is non-null.</db:para>
<db:para>If <db:code role="parameter">resultReceiver</db:code> is null, then the startActivity() method in the androidActivity() will be called. Otherwise startActivityForResult() will be called.</db:para>
<db:para>The <db:code role="parameter">receiverRequestCode</db:code> is a request code unique to the <db:code role="parameter">resultReceiver</db:code>, and will be returned along with the result, making it possible to use the same receiver for more than one intent.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="startActivity-2">
<db:title>[since 6.2] void QtAndroidPrivate::startActivity(const int &amp;<db:emphasis>intent</db:emphasis>, int <db:emphasis>receiverRequestCode</db:emphasis>, std::function&lt;void (int, int, const int &amp;)&gt; <db:emphasis>callbackFunc</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>startActivity</db:methodname>
<db:methodparam>
<db:type>const int &amp;</db:type>
<db:parameter>intent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>receiverRequestCode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>std::function&lt;void (int, int, const int &amp;)&gt;</db:type>
<db:parameter>callbackFunc</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void startActivity(const int &amp;intent, int receiverRequestCode, std::function&lt;void (int, int, const int &amp;)&gt; callbackFunc)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the activity given by <db:code role="parameter">intent</db:code>, using the request code <db:code role="parameter">receiverRequestCode</db:code>, and provides the result by calling <db:code role="parameter">callbackFunc</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="startIntentSender">
<db:title>[since 6.2] void QtAndroidPrivate::startIntentSender(const int &amp;<db:emphasis>intentSender</db:emphasis>, int <db:emphasis>receiverRequestCode</db:emphasis>, QAndroidActivityResultReceiver *<db:emphasis>resultReceiver</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>startIntentSender</db:methodname>
<db:methodparam>
<db:type>const int &amp;</db:type>
<db:parameter>intentSender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>receiverRequestCode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAndroidActivityResultReceiver *</db:type>
<db:parameter>resultReceiver</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startIntentSender(const int &amp;intentSender, int receiverRequestCode, QAndroidActivityResultReceiver *resultReceiver)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the activity given by <db:code role="parameter">intentSender</db:code> and provides the result asynchronously through the <db:code role="parameter">resultReceiver</db:code> if this is non-null.</db:para>
<db:para>If <db:code role="parameter">resultReceiver</db:code> is null, then the startIntentSender() method in the androidActivity() will be called. Otherwise startIntentSenderForResult() will be called.</db:para>
<db:para>The <db:code role="parameter">receiverRequestCode</db:code> is a request code unique to the <db:code role="parameter">resultReceiver</db:code>, and will be returned along with the result, making it possible to use the same receiver for more than one intent.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
</db:section>
</db:article>
