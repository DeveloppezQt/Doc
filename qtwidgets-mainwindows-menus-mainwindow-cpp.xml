<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Menus Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Menus example demonstrates how menus can be used in a main window application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;mainwindow.h&quot;

MainWindow::MainWindow()
{
    QWidget *widget = new QWidget;
    setCentralWidget(widget);

    QWidget *topFiller = new QWidget;
    topFiller-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);

    infoLabel = new QLabel(tr(&quot;&lt;i&gt;Choose a menu option, or right-click to &quot;
                              &quot;invoke a context menu&lt;/i&gt;&quot;));
    infoLabel-&gt;setFrameStyle(QFrame::StyledPanel | QFrame::Sunken);
    infoLabel-&gt;setAlignment(Qt::AlignCenter);

    QWidget *bottomFiller = new QWidget;
    bottomFiller-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;setMargin(5);
    layout-&gt;addWidget(topFiller);
    layout-&gt;addWidget(infoLabel);
    layout-&gt;addWidget(bottomFiller);
    widget-&gt;setLayout(layout);

    createActions();
    createMenus();

    QString message = tr(&quot;A context menu is available by right-clicking&quot;);
    statusBar()-&gt;showMessage(message);

    setWindowTitle(tr(&quot;Menus&quot;));
    setMinimumSize(160, 160);
    resize(480, 320);
}

#ifndef QT_NO_CONTEXTMENU
void MainWindow::contextMenuEvent(QContextMenuEvent *event)
{
    QMenu menu(this);
    menu.addAction(cutAct);
    menu.addAction(copyAct);
    menu.addAction(pasteAct);
    menu.exec(event-&gt;globalPos());
}
#endif // QT_NO_CONTEXTMENU

void MainWindow::newFile()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;File|New&lt;/b&gt;&quot;));
}

void MainWindow::open()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;File|Open&lt;/b&gt;&quot;));
}

void MainWindow::save()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;File|Save&lt;/b&gt;&quot;));
}

void MainWindow::print()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;File|Print&lt;/b&gt;&quot;));
}

void MainWindow::undo()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Undo&lt;/b&gt;&quot;));
}

void MainWindow::redo()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Redo&lt;/b&gt;&quot;));
}

void MainWindow::cut()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Cut&lt;/b&gt;&quot;));
}

void MainWindow::copy()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Copy&lt;/b&gt;&quot;));
}

void MainWindow::paste()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Paste&lt;/b&gt;&quot;));
}

void MainWindow::bold()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Format|Bold&lt;/b&gt;&quot;));
}

void MainWindow::italic()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Format|Italic&lt;/b&gt;&quot;));
}

void MainWindow::leftAlign()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Format|Left Align&lt;/b&gt;&quot;));
}

void MainWindow::rightAlign()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Format|Right Align&lt;/b&gt;&quot;));
}

void MainWindow::justify()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Format|Justify&lt;/b&gt;&quot;));
}

void MainWindow::center()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Format|Center&lt;/b&gt;&quot;));
}

void MainWindow::setLineSpacing()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Format|Set Line Spacing&lt;/b&gt;&quot;));
}

void MainWindow::setParagraphSpacing()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Edit|Format|Set Paragraph Spacing&lt;/b&gt;&quot;));
}

void MainWindow::about()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Help|About&lt;/b&gt;&quot;));
    QMessageBox::about(this, tr(&quot;About Menu&quot;),
            tr(&quot;The &lt;b&gt;Menu&lt;/b&gt; example shows how to create &quot;
               &quot;menu-bar menus and context menus.&quot;));
}

void MainWindow::aboutQt()
{
    infoLabel-&gt;setText(tr(&quot;Invoked &lt;b&gt;Help|About Qt&lt;/b&gt;&quot;));
}

void MainWindow::createActions()
{
    newAct = new QAction(tr(&quot;&amp;New&quot;), this);
    newAct-&gt;setShortcuts(QKeySequence::New);
    newAct-&gt;setStatusTip(tr(&quot;Create a new file&quot;));
    connect(newAct, &amp;QAction::triggered, this, &amp;MainWindow::newFile);

    openAct = new QAction(tr(&quot;&amp;Open...&quot;), this);
    openAct-&gt;setShortcuts(QKeySequence::Open);
    openAct-&gt;setStatusTip(tr(&quot;Open an existing file&quot;));
    connect(openAct, &amp;QAction::triggered, this, &amp;MainWindow::open);

    saveAct = new QAction(tr(&quot;&amp;Save&quot;), this);
    saveAct-&gt;setShortcuts(QKeySequence::Save);
    saveAct-&gt;setStatusTip(tr(&quot;Save the document to disk&quot;));
    connect(saveAct, &amp;QAction::triggered, this, &amp;MainWindow::save);

    printAct = new QAction(tr(&quot;&amp;Print...&quot;), this);
    printAct-&gt;setShortcuts(QKeySequence::Print);
    printAct-&gt;setStatusTip(tr(&quot;Print the document&quot;));
    connect(printAct, &amp;QAction::triggered, this, &amp;MainWindow::print);

    exitAct = new QAction(tr(&quot;E&amp;xit&quot;), this);
    exitAct-&gt;setShortcuts(QKeySequence::Quit);
    exitAct-&gt;setStatusTip(tr(&quot;Exit the application&quot;));
    connect(exitAct, &amp;QAction::triggered, this, &amp;QWidget::close);

    undoAct = new QAction(tr(&quot;&amp;Undo&quot;), this);
    undoAct-&gt;setShortcuts(QKeySequence::Undo);
    undoAct-&gt;setStatusTip(tr(&quot;Undo the last operation&quot;));
    connect(undoAct, &amp;QAction::triggered, this, &amp;MainWindow::undo);

    redoAct = new QAction(tr(&quot;&amp;Redo&quot;), this);
    redoAct-&gt;setShortcuts(QKeySequence::Redo);
    redoAct-&gt;setStatusTip(tr(&quot;Redo the last operation&quot;));
    connect(redoAct, &amp;QAction::triggered, this, &amp;MainWindow::redo);

    cutAct = new QAction(tr(&quot;Cu&amp;t&quot;), this);
    cutAct-&gt;setShortcuts(QKeySequence::Cut);
    cutAct-&gt;setStatusTip(tr(&quot;Cut the current selection's contents to the &quot;
                            &quot;clipboard&quot;));
    connect(cutAct, &amp;QAction::triggered, this, &amp;MainWindow::cut);

    copyAct = new QAction(tr(&quot;&amp;Copy&quot;), this);
    copyAct-&gt;setShortcuts(QKeySequence::Copy);
    copyAct-&gt;setStatusTip(tr(&quot;Copy the current selection's contents to the &quot;
                             &quot;clipboard&quot;));
    connect(copyAct, &amp;QAction::triggered, this, &amp;MainWindow::copy);

    pasteAct = new QAction(tr(&quot;&amp;Paste&quot;), this);
    pasteAct-&gt;setShortcuts(QKeySequence::Paste);
    pasteAct-&gt;setStatusTip(tr(&quot;Paste the clipboard's contents into the current &quot;
                              &quot;selection&quot;));
    connect(pasteAct, &amp;QAction::triggered, this, &amp;MainWindow::paste);

    boldAct = new QAction(tr(&quot;&amp;Bold&quot;), this);
    boldAct-&gt;setCheckable(true);
    boldAct-&gt;setShortcut(QKeySequence::Bold);
    boldAct-&gt;setStatusTip(tr(&quot;Make the text bold&quot;));
    connect(boldAct, &amp;QAction::triggered, this, &amp;MainWindow::bold);

    QFont boldFont = boldAct-&gt;font();
    boldFont.setBold(true);
    boldAct-&gt;setFont(boldFont);

    italicAct = new QAction(tr(&quot;&amp;Italic&quot;), this);
    italicAct-&gt;setCheckable(true);
    italicAct-&gt;setShortcut(QKeySequence::Italic);
    italicAct-&gt;setStatusTip(tr(&quot;Make the text italic&quot;));
    connect(italicAct, &amp;QAction::triggered, this, &amp;MainWindow::italic);

    QFont italicFont = italicAct-&gt;font();
    italicFont.setItalic(true);
    italicAct-&gt;setFont(italicFont);

    setLineSpacingAct = new QAction(tr(&quot;Set &amp;Line Spacing...&quot;), this);
    setLineSpacingAct-&gt;setStatusTip(tr(&quot;Change the gap between the lines of a &quot;
                                       &quot;paragraph&quot;));
    connect(setLineSpacingAct, &amp;QAction::triggered, this, &amp;MainWindow::setLineSpacing);

    setParagraphSpacingAct = new QAction(tr(&quot;Set &amp;Paragraph Spacing...&quot;), this);
    setParagraphSpacingAct-&gt;setStatusTip(tr(&quot;Change the gap between paragraphs&quot;));
    connect(setParagraphSpacingAct, &amp;QAction::triggered,
            this, &amp;MainWindow::setParagraphSpacing);

    aboutAct = new QAction(tr(&quot;&amp;About&quot;), this);
    aboutAct-&gt;setStatusTip(tr(&quot;Show the application's About box&quot;));
    connect(aboutAct, &amp;QAction::triggered, this, &amp;MainWindow::about);

    aboutQtAct = new QAction(tr(&quot;About &amp;Qt&quot;), this);
    aboutQtAct-&gt;setStatusTip(tr(&quot;Show the Qt library's About box&quot;));
    connect(aboutQtAct, &amp;QAction::triggered, qApp, &amp;QApplication::aboutQt);
    connect(aboutQtAct, &amp;QAction::triggered, this, &amp;MainWindow::aboutQt);

    leftAlignAct = new QAction(tr(&quot;&amp;Left Align&quot;), this);
    leftAlignAct-&gt;setCheckable(true);
    leftAlignAct-&gt;setShortcut(tr(&quot;Ctrl+L&quot;));
    leftAlignAct-&gt;setStatusTip(tr(&quot;Left align the selected text&quot;));
    connect(leftAlignAct, &amp;QAction::triggered, this, &amp;MainWindow::leftAlign);

    rightAlignAct = new QAction(tr(&quot;&amp;Right Align&quot;), this);
    rightAlignAct-&gt;setCheckable(true);
    rightAlignAct-&gt;setShortcut(tr(&quot;Ctrl+R&quot;));
    rightAlignAct-&gt;setStatusTip(tr(&quot;Right align the selected text&quot;));
    connect(rightAlignAct, &amp;QAction::triggered, this, &amp;MainWindow::rightAlign);

    justifyAct = new QAction(tr(&quot;&amp;Justify&quot;), this);
    justifyAct-&gt;setCheckable(true);
    justifyAct-&gt;setShortcut(tr(&quot;Ctrl+J&quot;));
    justifyAct-&gt;setStatusTip(tr(&quot;Justify the selected text&quot;));
    connect(justifyAct, &amp;QAction::triggered, this, &amp;MainWindow::justify);

    centerAct = new QAction(tr(&quot;&amp;Center&quot;), this);
    centerAct-&gt;setCheckable(true);
    centerAct-&gt;setShortcut(tr(&quot;Ctrl+E&quot;));
    centerAct-&gt;setStatusTip(tr(&quot;Center the selected text&quot;));
    connect(centerAct, &amp;QAction::triggered, this, &amp;MainWindow::center);

    alignmentGroup = new QActionGroup(this);
    alignmentGroup-&gt;addAction(leftAlignAct);
    alignmentGroup-&gt;addAction(rightAlignAct);
    alignmentGroup-&gt;addAction(justifyAct);
    alignmentGroup-&gt;addAction(centerAct);
    leftAlignAct-&gt;setChecked(true);
}

void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(newAct);
    fileMenu-&gt;addAction(openAct);
    fileMenu-&gt;addAction(saveAct);
    fileMenu-&gt;addAction(printAct);
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(exitAct);

    editMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Edit&quot;));
    editMenu-&gt;addAction(undoAct);
    editMenu-&gt;addAction(redoAct);
    editMenu-&gt;addSeparator();
    editMenu-&gt;addAction(cutAct);
    editMenu-&gt;addAction(copyAct);
    editMenu-&gt;addAction(pasteAct);
    editMenu-&gt;addSeparator();

    helpMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Help&quot;));
    helpMenu-&gt;addAction(aboutAct);
    helpMenu-&gt;addAction(aboutQtAct);

    formatMenu = editMenu-&gt;addMenu(tr(&quot;&amp;Format&quot;));
    formatMenu-&gt;addAction(boldAct);
    formatMenu-&gt;addAction(italicAct);
    formatMenu-&gt;addSeparator()-&gt;setText(tr(&quot;Alignment&quot;));
    formatMenu-&gt;addAction(leftAlignAct);
    formatMenu-&gt;addAction(rightAlignAct);
    formatMenu-&gt;addAction(justifyAct);
    formatMenu-&gt;addAction(centerAct);
    formatMenu-&gt;addSeparator();
    formatMenu-&gt;addAction(setLineSpacingAct);
    formatMenu-&gt;addAction(setParagraphSpacingAct);
}

</db:programlisting>
</db:article>
