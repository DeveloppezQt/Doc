<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlDatabase Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> class handles a connection to a database.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlDatabase</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sql)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sql)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSqlDatabase is part of <db:simplelist><db:member><db:link xlink:href="database.xml">Database Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> class provides an interface for accessing a database through a connection. An instance of <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> represents the connection. The connection provides access to the database via one of the <db:link xlink:href="sql-driver.xml#supported-databases">supported database drivers</db:link>, which are derived from <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link>. Alternatively, you can subclass your own database driver from <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link>. See <db:link xlink:href="sql-driver.xml#how-to-write-your-own-database-driver">How to Write Your Own Database Driver</db:link> for more information.</db:para>
<db:para>Create a connection (i.e., an instance of <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link>) by calling one of the static <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>() functions, where you specify <db:link xlink:href="sql-driver.xml#supported-databases">the driver or type of driver</db:link> to use (depending on the type of database) and a connection name. A connection is known by its own name, <db:emphasis>not</db:emphasis> by the name of the database it connects to. You can have multiple connections to one database. <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> also supports the concept of a <db:emphasis>default</db:emphasis> connection, which is the unnamed connection. To create the default connection, don't pass the connection name argument when you call <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>(). Subsequently, the default connection will be assumed if you call any static member function without specifying the connection name. The following snippet shows how to create and open a default connection to a PostgreSQL database:</db:para>
<db:programlisting language="cpp">    QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QPSQL&quot;);
    db.setHostName(&quot;acidalia&quot;);
    db.setDatabaseName(&quot;customdb&quot;);
    db.setUserName(&quot;mojito&quot;);
    db.setPassword(&quot;J0a1m8&quot;);
    bool ok = db.open();
</db:programlisting>
<db:para>Once the <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> object has been created, set the connection parameters with <db:link xlink:href="qsqldatabase.xml#setDatabaseName">setDatabaseName</db:link>(), <db:link xlink:href="qsqldatabase.xml#setUserName">setUserName</db:link>(), <db:link xlink:href="qsqldatabase.xml#setPassword">setPassword</db:link>(), <db:link xlink:href="qsqldatabase.xml#setHostName">setHostName</db:link>(), <db:link xlink:href="qsqldatabase.xml#setPort">setPort</db:link>(), and <db:link xlink:href="qsqldatabase.xml#setConnectOptions">setConnectOptions</db:link>(). Then call <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() to activate the physical connection to the database. The connection is not usable until you open it.</db:para>
<db:para>The connection defined above will be the <db:emphasis>default</db:emphasis> connection, because we didn't give a connection name to <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>(). Subsequently, you can get the default connection by calling <db:link xlink:href="qsqldatabase.xml#database">database</db:link>() without the connection name argument:</db:para>
<db:programlisting language="cpp">    QSqlDatabase db = QSqlDatabase::database();
</db:programlisting>
<db:para><db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> is a value class. Changes made to a database connection via one instance of <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> will affect other instances of <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> that represent the same connection. Use <db:link xlink:href="qsqldatabase.xml#cloneDatabase">cloneDatabase</db:link>() to create an independent database connection based on an existing one.</db:para>
<db:warning>
<db:para>It is highly recommended that you do not keep a copy of the <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> around as a member of a class, as this will prevent the instance from being correctly cleaned up on shutdown. If you need to access an existing <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link>, it should be accessed with <db:link xlink:href="qsqldatabase.xml#database">database</db:link>(). If you chose to have a <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> member variable, this needs to be deleted before the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instance is deleted, otherwise it may lead to undefined behavior.</db:para>
</db:warning>
<db:para>If you create multiple database connections, specify a unique connection name for each one, when you call <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>(). Use <db:link xlink:href="qsqldatabase.xml#database">database</db:link>() with a connection name to get that connection. Use <db:link xlink:href="qsqldatabase.xml#removeDatabase">removeDatabase</db:link>() with a connection name to remove a connection. <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> outputs a warning if you try to remove a connection referenced by other <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> objects. Use <db:link xlink:href="qsqldatabase.xml#contains">contains</db:link>() to see if a given connection name is in the list of connections.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th colspan="2">
<db:para>Some utility methods:</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#tables">tables</db:link>()</db:para>
</db:td>
<db:td>
<db:para>returns the list of tables</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#primaryIndex">primaryIndex</db:link>()</db:para>
</db:td>
<db:td>
<db:para>returns a table's primary index</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#record">record</db:link>()</db:para>
</db:td>
<db:td>
<db:para>returns meta-information about a table's fields</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#transaction">transaction</db:link>()</db:para>
</db:td>
<db:td>
<db:para>starts a transaction</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#commit">commit</db:link>()</db:para>
</db:td>
<db:td>
<db:para>saves and completes a transaction</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#rollback">rollback</db:link>()</db:para>
</db:td>
<db:td>
<db:para>cancels a transaction</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hasFeature()</db:para>
</db:td>
<db:td>
<db:para>checks if a driver supports transactions</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>()</db:para>
</db:td>
<db:td>
<db:para>returns information about the last error</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#drivers">drivers</db:link>()</db:para>
</db:td>
<db:td>
<db:para>returns the names of the available SQL drivers</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#isDriverAvailable">isDriverAvailable</db:link>()</db:para>
</db:td>
<db:td>
<db:para>checks if a particular driver is available</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldatabase.xml#registerSqlDriver">registerSqlDriver</db:link>()</db:para>
</db:td>
<db:td>
<db:para>registers a custom-made driver</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>When using transactions, you must start the transaction before you create your query.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:member>
<db:member><db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link></db:member>
<db:member><db:link xlink:href="qtsql-index.xml">Qt SQL</db:link></db:member>
<db:member><db:link xlink:href="threads-modules.xml#threads-and-the-sql-module">Threads and the SQL Module</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlDatabase">
<db:title>QSqlDatabase::QSqlDatabase()</db:title>
<db:constructorsynopsis>
<db:methodname>QSqlDatabase</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an empty, invalid <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> object. Use <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>(), <db:link xlink:href="qsqldatabase.xml#removeDatabase">removeDatabase</db:link>(), and <db:link xlink:href="qsqldatabase.xml#database">database</db:link>() to get valid <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> objects.</db:para>
</db:section>
<db:section xml:id="QSqlDatabase-2">
<db:title>[explicit protected] QSqlDatabase::QSqlDatabase(const QString &amp;<db:emphasis>type</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSqlDatabase</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase(const QString &amp;type)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> connection that uses the driver referred to by <db:code role="parameter">type</db:code>. If the <db:code role="parameter">type</db:code> is not recognized, the database connection will have no functionality.</db:para>
<db:para>The currently available driver types are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Driver Type</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QDB2</db:para>
</db:td>
<db:td>
<db:para>IBM DB2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QIBASE</db:para>
</db:td>
<db:td>
<db:para>Borland InterBase Driver</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QMYSQL</db:para>
</db:td>
<db:td>
<db:para>MySQL Driver</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QOCI</db:para>
</db:td>
<db:td>
<db:para>Oracle Call Interface Driver</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QODBC</db:para>
</db:td>
<db:td>
<db:para>ODBC Driver (includes Microsoft SQL Server)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QPSQL</db:para>
</db:td>
<db:td>
<db:para>PostgreSQL Driver</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QSQLITE</db:para>
</db:td>
<db:td>
<db:para>SQLite version 3 or above</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QMIMER</db:para>
</db:td>
<db:td>
<db:para>Mimer SQL 11 or above</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Additional third party drivers, including your own custom drivers, can be loaded dynamically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="sql-driver.xml">SQL Database Drivers</db:link></db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#registerSqlDriver">registerSqlDriver</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#drivers">drivers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSqlDatabase-3">
<db:title>[explicit protected] QSqlDatabase::QSqlDatabase(QSqlDriver *<db:emphasis>driver</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSqlDatabase</db:methodname>
<db:methodparam>
<db:type>QSqlDriver *</db:type>
<db:parameter>driver</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase(QSqlDriver *driver)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a database connection using the given <db:code role="parameter">driver</db:code>.</db:para>
</db:section>
<db:section xml:id="QSqlDatabase-1">
<db:title>QSqlDatabase::QSqlDatabase(const QSqlDatabase &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSqlDatabase</db:methodname>
<db:methodparam>
<db:type>const QSqlDatabase &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase(const QSqlDatabase &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSqlDatabase">
<db:title>QSqlDatabase::~QSqlDatabase()</db:title>
<db:destructorsynopsis>
<db:methodname>~QSqlDatabase</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSqlDatabase()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object and frees any allocated resources.</db:para>
<db:note>
<db:para>When the last connection is destroyed, the destructor implicitly calls <db:link xlink:href="qsqldatabase.xml#close">close</db:link>() to release the database connection.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addDatabase">
<db:title>[static] QSqlDatabase QSqlDatabase::addDatabase(const QString &amp;<db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>connectionName</db:emphasis> = QLatin1StringView(defaultConnection))</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSqlDatabase</db:type>
<db:methodname>addDatabase</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>connectionName</db:parameter>
<db:initializer>QLatin1StringView(defaultConnection)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase addDatabase(const QString &amp;type, const QString &amp;connectionName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a database to the list of database connections using the driver <db:code role="parameter">type</db:code> and the connection name <db:code role="parameter">connectionName</db:code>. If there already exists a database connection called <db:code role="parameter">connectionName</db:code>, that connection is removed.</db:para>
<db:para>The database connection is referred to by <db:code role="parameter">connectionName</db:code>. The newly added database connection is returned.</db:para>
<db:para>If <db:code role="parameter">type</db:code> is not available or could not be loaded, <db:link xlink:href="qsqldatabase.xml#isValid">isValid</db:link>() returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">connectionName</db:code> is not specified, the new connection becomes the default connection for the application, and subsequent calls to <db:link xlink:href="qsqldatabase.xml#database">database</db:link>() without the connection name argument will return the default connection. If a <db:code role="parameter">connectionName</db:code> is provided here, use database(<db:code role="parameter">connectionName</db:code>) to retrieve the connection.</db:para>
<db:warning>
<db:para>If you add a connection with the same name as an existing connection, the new connection replaces the old one. If you call this function more than once without specifying <db:code role="parameter">connectionName</db:code>, the default connection will be the one replaced.</db:para>
</db:warning>
<db:para>Before using the connection, it must be initialized. e.g., call some or all of <db:link xlink:href="qsqldatabase.xml#setDatabaseName">setDatabaseName</db:link>(), <db:link xlink:href="qsqldatabase.xml#setUserName">setUserName</db:link>(), <db:link xlink:href="qsqldatabase.xml#setPassword">setPassword</db:link>(), <db:link xlink:href="qsqldatabase.xml#setHostName">setHostName</db:link>(), <db:link xlink:href="qsqldatabase.xml#setPort">setPort</db:link>(), and <db:link xlink:href="qsqldatabase.xml#setConnectOptions">setConnectOptions</db:link>(), and, finally, <db:link xlink:href="qsqldatabase.xml#open">open</db:link>().</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#database">database</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#removeDatabase">removeDatabase</db:link>()</db:member>
<db:member><db:link xlink:href="threads-modules.xml#threads-and-the-sql-module">Threads and the SQL Module</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addDatabase-1">
<db:title>[static] QSqlDatabase QSqlDatabase::addDatabase(QSqlDriver *<db:emphasis>driver</db:emphasis>, const QString &amp;<db:emphasis>connectionName</db:emphasis> = QLatin1StringView(defaultConnection))</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSqlDatabase</db:type>
<db:methodname>addDatabase</db:methodname>
<db:methodparam>
<db:type>QSqlDriver *</db:type>
<db:parameter>driver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>connectionName</db:parameter>
<db:initializer>QLatin1StringView(defaultConnection)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase addDatabase(QSqlDriver *driver, const QString &amp;connectionName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This overload is useful when you want to create a database connection with a <db:link xlink:href="qsqldriver.xml">driver</db:link> you instantiated yourself. It might be your own database driver, or you might just need to instantiate one of the Qt drivers yourself. If you do this, it is recommended that you include the driver code in your application. For example, you can create a PostgreSQL connection with your own QPSQL driver like this:</db:para>
<db:programlisting language="cpp">PGconn *con = PQconnectdb(&quot;host=server user=bart password=simpson dbname=springfield&quot;);
QPSQLDriver *drv = new QPSQLDriver(con);
QSqlDatabase db = QSqlDatabase::addDatabase(drv); // becomes the new default connection
QSqlQuery query;
query.exec(&quot;SELECT NAME, ID FROM STAFF&quot;);
</db:programlisting>
<db:para>The above code sets up a PostgreSQL connection and instantiates a QPSQLDriver object. Next, <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>() is called to add the connection to the known connections so that it can be used by the Qt SQL classes. When a driver is instantiated with a connection handle (or set of handles), Qt assumes that you have already opened the database connection.</db:para>
<db:note>
<db:para>We assume that <db:code>qtdir</db:code> is the directory where Qt is installed. This will pull in the code that is needed to use the PostgreSQL client library and to instantiate a QPSQLDriver object, assuming that you have the PostgreSQL headers somewhere in your include search path.</db:para>
</db:note>
<db:para>Remember that you must link your application against the database client library. Make sure the client library is in your linker's search path, and add lines like these to your <db:code>.pro</db:code> file:</db:para>
<db:programlisting language="cpp">unix:LIBS += -lpq
win32:LIBS += libpqdll.lib
</db:programlisting>
<db:para>The method described works for all the supplied drivers. The only difference will be in the driver constructor arguments. Here is a table of the drivers included with Qt, their source code files, and their constructor arguments:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Driver</db:para>
</db:th>
<db:th>
<db:para>Class name</db:para>
</db:th>
<db:th>
<db:para>Constructor arguments</db:para>
</db:th>
<db:th>
<db:para>File to include</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QPSQL</db:para>
</db:td>
<db:td>
<db:para>QPSQLDriver</db:para>
</db:td>
<db:td>
<db:para>PGconn *connection</db:para>
</db:td>
<db:td>
<db:para><db:code>qsql_psql.cpp</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QMYSQL</db:para>
</db:td>
<db:td>
<db:para>QMYSQLDriver</db:para>
</db:td>
<db:td>
<db:para>MYSQL *connection</db:para>
</db:td>
<db:td>
<db:para><db:code>qsql_mysql.cpp</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QOCI</db:para>
</db:td>
<db:td>
<db:para>QOCIDriver</db:para>
</db:td>
<db:td>
<db:para>OCIEnv *environment, OCISvcCtx *serviceContext</db:para>
</db:td>
<db:td>
<db:para><db:code>qsql_oci.cpp</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QODBC</db:para>
</db:td>
<db:td>
<db:para>QODBCDriver</db:para>
</db:td>
<db:td>
<db:para>SQLHANDLE environment, SQLHANDLE connection</db:para>
</db:td>
<db:td>
<db:para><db:code>qsql_odbc.cpp</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QDB2</db:para>
</db:td>
<db:td>
<db:para>QDB2</db:para>
</db:td>
<db:td>
<db:para>SQLHANDLE environment, SQLHANDLE connection</db:para>
</db:td>
<db:td>
<db:para><db:code>qsql_db2.cpp</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QSQLITE</db:para>
</db:td>
<db:td>
<db:para>QSQLiteDriver</db:para>
</db:td>
<db:td>
<db:para>sqlite *connection</db:para>
</db:td>
<db:td>
<db:para><db:code>qsql_sqlite.cpp</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QMIMER</db:para>
</db:td>
<db:td>
<db:para>QMimerSQLDriver</db:para>
</db:td>
<db:td>
<db:para>MimerSession *connection</db:para>
</db:td>
<db:td>
<db:para><db:code>qsql_mimer.cpp</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QIBASE</db:para>
</db:td>
<db:td>
<db:para>QIBaseDriver</db:para>
</db:td>
<db:td>
<db:para>isc_db_handle connection</db:para>
</db:td>
<db:td>
<db:para><db:code>qsql_ibase.cpp</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:warning>
<db:para>Adding a database connection with the same connection name as an existing connection, causes the existing connection to be replaced by the new one.</db:para>
</db:warning>
<db:warning>
<db:para>The SQL framework takes ownership of the <db:code role="parameter">driver</db:code>. It must not be deleted. To remove the connection, use <db:link xlink:href="qsqldatabase.xml#removeDatabase">removeDatabase</db:link>().</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#drivers">drivers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cloneDatabase">
<db:title>[static] QSqlDatabase QSqlDatabase::cloneDatabase(const QSqlDatabase &amp;<db:emphasis>other</db:emphasis>, const QString &amp;<db:emphasis>connectionName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSqlDatabase</db:type>
<db:methodname>cloneDatabase</db:methodname>
<db:methodparam>
<db:type>const QSqlDatabase &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>connectionName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase cloneDatabase(const QSqlDatabase &amp;other, const QString &amp;connectionName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">reentrant</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clones the database connection <db:code role="parameter">other</db:code> and stores it as <db:code role="parameter">connectionName</db:code>. All the settings from the original database, e.g. <db:link xlink:href="qsqldatabase.xml#databaseName">databaseName</db:link>(), <db:link xlink:href="qsqldatabase.xml#hostName">hostName</db:link>(), etc., are copied across. Does nothing if <db:code role="parameter">other</db:code> is an invalid database. Returns the newly created database connection.</db:para>
<db:note>
<db:para>The new connection has not been opened. Before using the new connection, you must call <db:link xlink:href="qsqldatabase.xml#open">open</db:link>().</db:para>
</db:note>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="cloneDatabase-1">
<db:title>[static] QSqlDatabase QSqlDatabase::cloneDatabase(const QString &amp;<db:emphasis>other</db:emphasis>, const QString &amp;<db:emphasis>connectionName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSqlDatabase</db:type>
<db:methodname>cloneDatabase</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>connectionName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase cloneDatabase(const QString &amp;other, const QString &amp;connectionName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Clones the database connection <db:code role="parameter">other</db:code> and stores it as <db:code role="parameter">connectionName</db:code>. All the settings from the original database, e.g. <db:link xlink:href="qsqldatabase.xml#databaseName">databaseName</db:link>(), <db:link xlink:href="qsqldatabase.xml#hostName">hostName</db:link>(), etc., are copied across. Does nothing if <db:code role="parameter">other</db:code> is an invalid database. Returns the newly created database connection.</db:para>
<db:note>
<db:para>The new connection has not been opened. Before using the new connection, you must call <db:link xlink:href="qsqldatabase.xml#open">open</db:link>().</db:para>
</db:note>
<db:para>This overload is useful when cloning the database in another thread to the one that is used by the database represented by <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="close">
<db:title>void QSqlDatabase::close()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the database connection, freeing any resources acquired, and invalidating any existing <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> objects that are used with the database.</db:para>
<db:para>This will also affect copies of this <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#removeDatabase">removeDatabase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="commit">
<db:title>bool QSqlDatabase::commit()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>commit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool commit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Commits a transaction to the database if the driver supports transactions and a <db:link xlink:href="qsqldatabase.xml#transaction">transaction</db:link>() has been started. Returns <db:code>true</db:code> if the operation succeeded. Otherwise it returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>For some databases, the commit will fail and return <db:code>false</db:code> if there is an <db:link xlink:href="qsqlquery.xml#isActive">active query</db:link> using the database for a <db:code>SELECT</db:code>. Make the query <db:link xlink:href="qsqlquery.xml#isActive">inactive</db:link> before doing the commit.</db:para>
</db:note>
<db:para>Call <db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>() to get information about errors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquery.xml#isActive">QSqlQuery::isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#rollback">rollback</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectOptions">
<db:title>QString QSqlDatabase::connectOptions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>connectOptions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString connectOptions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the connection options string used for this connection. The string may be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#setConnectOptions">setConnectOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectionName">
<db:title>QString QSqlDatabase::connectionName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>connectionName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString connectionName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the connection name, which may be empty.</db:para>
<db:note>
<db:para>The connection name is not the <db:link xlink:href="qsqldatabase.xml#databaseName">database name</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectionNames">
<db:title>[static] QStringList QSqlDatabase::connectionNames()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>connectionNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList connectionNames()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list containing the names of all connections.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#database">database</db:link>()</db:member>
<db:member><db:link xlink:href="threads-modules.xml#threads-and-the-sql-module">Threads and the SQL Module</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>[static] bool QSqlDatabase::contains(const QString &amp;<db:emphasis>connectionName</db:emphasis> = QLatin1StringView(defaultConnection))</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>connectionName</db:parameter>
<db:initializer>QLatin1StringView(defaultConnection)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QString &amp;connectionName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the list of database connections contains <db:code role="parameter">connectionName</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#connectionNames">connectionNames</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#database">database</db:link>()</db:member>
<db:member><db:link xlink:href="threads-modules.xml#threads-and-the-sql-module">Threads and the SQL Module</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="database">
<db:title>[static] QSqlDatabase QSqlDatabase::database(const QString &amp;<db:emphasis>connectionName</db:emphasis> = QLatin1StringView(defaultConnection), bool <db:emphasis>open</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSqlDatabase</db:type>
<db:methodname>database</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>connectionName</db:parameter>
<db:initializer>QLatin1StringView(defaultConnection)</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>open</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase database(const QString &amp;connectionName, bool open)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the database connection called <db:code role="parameter">connectionName</db:code>. The database connection must have been previously added with <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>(). If <db:code role="parameter">open</db:code> is true (the default) and the database connection is not already open it is opened now. If no <db:code role="parameter">connectionName</db:code> is specified the default connection is used. If <db:code role="parameter">connectionName</db:code> does not exist in the list of databases, an invalid connection is returned.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#isOpen">isOpen</db:link>()</db:member>
<db:member><db:link xlink:href="threads-modules.xml#threads-and-the-sql-module">Threads and the SQL Module</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="databaseName">
<db:title>QString QSqlDatabase::databaseName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>databaseName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString databaseName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the connection's database name, which may be empty.</db:para>
<db:note>
<db:para>The database name is not the connection name.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#setDatabaseName">setDatabaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="driver">
<db:title>QSqlDriver *QSqlDatabase::driver() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSqlDriver *</db:type>
<db:methodname>driver</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDriver * driver() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the database driver used to access the database connection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#drivers">drivers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="driverName">
<db:title>QString QSqlDatabase::driverName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>driverName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString driverName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the connection's driver name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#driver">driver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drivers">
<db:title>[static] QStringList QSqlDatabase::drivers()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>drivers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList drivers()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the available database drivers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#registerSqlDriver">registerSqlDriver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hostName">
<db:title>QString QSqlDatabase::hostName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>hostName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString hostName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the connection's host name; it may be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#setHostName">setHostName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDriverAvailable">
<db:title>[static] bool QSqlDatabase::isDriverAvailable(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDriverAvailable</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDriverAvailable(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if a driver called <db:code role="parameter">name</db:code> is available; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#drivers">drivers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isOpen">
<db:title>bool QSqlDatabase::isOpen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isOpen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isOpen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the database connection is currently open; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isOpenError">
<db:title>bool QSqlDatabase::isOpenError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isOpenError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isOpenError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if there was an error opening the database connection; otherwise returns <db:code>false</db:code>. Error information can be retrieved using the <db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>() function.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QSqlDatabase::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> has a valid driver.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSqlDatabase db;
qDebug() &amp;lt;&amp;lt; db.isValid();    // Returns false

db = QSqlDatabase::database(&quot;sales&quot;);
qDebug() &amp;lt;&amp;lt; db.isValid();    // Returns \c true if &quot;sales&quot; connection exists

QSqlDatabase::removeDatabase(&quot;sales&quot;);
qDebug() &amp;lt;&amp;lt; db.isValid();    // Returns false
</db:programlisting>
</db:section>
<db:section xml:id="lastError">
<db:title>QSqlError QSqlDatabase::lastError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSqlError</db:type>
<db:methodname>lastError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlError lastError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns information about the last error that occurred on the database.</db:para>
<db:para>Failures that occur in conjunction with an individual query are reported by <db:link xlink:href="qsqlquery.xml#lastError">QSqlQuery::lastError</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlerror.xml">QSqlError</db:link></db:member>
<db:member><db:link xlink:href="qsqlquery.xml#lastError">QSqlQuery::lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="numericalPrecisionPolicy">
<db:title>QSql::NumericalPrecisionPolicy QSqlDatabase::numericalPrecisionPolicy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSql::NumericalPrecisionPolicy</db:type>
<db:methodname>numericalPrecisionPolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSql::NumericalPrecisionPolicy numericalPrecisionPolicy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current default precision policy for the database connection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsql.xml#NumericalPrecisionPolicy-enum">QSql::NumericalPrecisionPolicy</db:link></db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setNumericalPrecisionPolicy">setNumericalPrecisionPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquery.xml#numericalPrecisionPolicy">QSqlQuery::numericalPrecisionPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquery.xml#setNumericalPrecisionPolicy">QSqlQuery::setNumericalPrecisionPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>bool QSqlDatabase::open()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens the database connection using the current connection values. Returns <db:code>true</db:code> on success; otherwise returns <db:code>false</db:code>. Error information can be retrieved using <db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setDatabaseName">setDatabaseName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setUserName">setUserName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPassword">setPassword</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setHostName">setHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPort">setPort</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setConnectOptions">setConnectOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open-1">
<db:title>bool QSqlDatabase::open(const QString &amp;<db:emphasis>user</db:emphasis>, const QString &amp;<db:emphasis>password</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>user</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>password</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open(const QString &amp;user, const QString &amp;password)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Opens the database connection using the given <db:code role="parameter">user</db:code> name and <db:code role="parameter">password</db:code>. Returns <db:code>true</db:code> on success; otherwise returns <db:code>false</db:code>. Error information can be retrieved using the <db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>() function.</db:para>
<db:para>This function does not store the password it is given. Instead, the password is passed directly to the driver for opening the connection and it is then discarded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="password">
<db:title>QString QSqlDatabase::password() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>password</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString password() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the connection's password. An empty string will be returned if the password was not set with <db:link xlink:href="qsqldatabase.xml#setPassword">setPassword</db:link>(), and if the password was given in the <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() call, or if no password was used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#setPassword">setPassword</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="port">
<db:title>int QSqlDatabase::port() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>port</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int port() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the connection's port number. The value is undefined if the port number has not been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#setPort">setPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="primaryIndex">
<db:title>QSqlIndex QSqlDatabase::primaryIndex(const QString &amp;<db:emphasis>tablename</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSqlIndex</db:type>
<db:methodname>primaryIndex</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>tablename</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlIndex primaryIndex(const QString &amp;tablename) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the primary index for table <db:code role="parameter">tablename</db:code>. If no primary index exists, an empty <db:link xlink:href="qsqlindex.xml">QSqlIndex</db:link> is returned.</db:para>
<db:note>
<db:para>Some drivers, such as the <db:link xlink:href="sql-driver.xml#qpsql-case-sensitivity">QPSQL</db:link> driver, may may require you to pass <db:code role="parameter">tablename</db:code> in lower case if the table was not quoted when created. See the <db:link xlink:href="sql-driver.xml">Qt SQL driver</db:link> documentation for more information.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#tables">tables</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#record">record</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="record">
<db:title>QSqlRecord QSqlDatabase::record(const QString &amp;<db:emphasis>tablename</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSqlRecord</db:type>
<db:methodname>record</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>tablename</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlRecord record(const QString &amp;tablename) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> populated with the names of all the fields in the table (or view) called <db:code role="parameter">tablename</db:code>. The order in which the fields appear in the record is undefined. If no such table (or view) exists, an empty record is returned.</db:para>
<db:note>
<db:para>Some drivers, such as the <db:link xlink:href="sql-driver.xml#qpsql-case-sensitivity">QPSQL</db:link> driver, may may require you to pass <db:code role="parameter">tablename</db:code> in lower case if the table was not quoted when created. See the <db:link xlink:href="sql-driver.xml">Qt SQL driver</db:link> documentation for more information.</db:para>
</db:note>
</db:section>
<db:section xml:id="registerSqlDriver">
<db:title>[static] void QSqlDatabase::registerSqlDriver(const QString &amp;<db:emphasis>name</db:emphasis>, QSqlDriverCreatorBase *<db:emphasis>creator</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>registerSqlDriver</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSqlDriverCreatorBase *</db:type>
<db:parameter>creator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerSqlDriver(const QString &amp;name, QSqlDriverCreatorBase *creator)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function registers a new SQL driver called <db:code role="parameter">name</db:code>, within the SQL framework. This is useful if you have a custom SQL driver and don't want to compile it as a plugin.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSqlDatabase::registerSqlDriver(&quot;MYDRIVER&quot;, new QSqlDriverCreator&amp;lt;QSqlDriver&amp;gt;);
QVERIFY(QSqlDatabase::drivers().contains(&quot;MYDRIVER&quot;));
QSqlDatabase db = QSqlDatabase::addDatabase(&quot;MYDRIVER&quot;);
QVERIFY(db.isValid());
</db:programlisting>
<db:para><db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> takes ownership of the <db:code role="parameter">creator</db:code> pointer, so you mustn't delete it yourself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#drivers">drivers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeDatabase">
<db:title>[static] void QSqlDatabase::removeDatabase(const QString &amp;<db:emphasis>connectionName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>removeDatabase</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>connectionName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeDatabase(const QString &amp;connectionName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the database connection <db:code role="parameter">connectionName</db:code> from the list of database connections.</db:para>
<db:warning>
<db:para>There should be no open queries on the database connection when this function is called, otherwise a resource leak will occur.</db:para>
</db:warning>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// WRONG
QSqlDatabase db = QSqlDatabase::database(&quot;sales&quot;);
QSqlQuery query(&quot;SELECT NAME, DOB FROM EMPLOYEES&quot;, db);
QSqlDatabase::removeDatabase(&quot;sales&quot;); // will output a warning
// &quot;db&quot; is now a dangling invalid database connection,
// &quot;query&quot; contains an invalid result set
</db:programlisting>
<db:para>The correct way to do it:</db:para>
<db:programlisting language="cpp">{
    QSqlDatabase db = QSqlDatabase::database(&quot;sales&quot;);
    QSqlQuery query(&quot;SELECT NAME, DOB FROM EMPLOYEES&quot;, db);
}
// Both &quot;db&quot; and &quot;query&quot; are destroyed because they are out of scope
QSqlDatabase::removeDatabase(&quot;sales&quot;); // correct
</db:programlisting>
<db:para>To remove the default connection, which may have been created with a call to <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>() not specifying a connection name, you can retrieve the default connection name by calling <db:link xlink:href="qsqldatabase.xml#connectionName">connectionName</db:link>() on the database returned by <db:link xlink:href="qsqldatabase.xml#database">database</db:link>(). Note that if a default database hasn't been created an invalid database will be returned.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#database">database</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#connectionName">connectionName</db:link>()</db:member>
<db:member><db:link xlink:href="threads-modules.xml#threads-and-the-sql-module">Threads and the SQL Module</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rollback">
<db:title>bool QSqlDatabase::rollback()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>rollback</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool rollback()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Rolls back a transaction on the database, if the driver supports transactions and a <db:link xlink:href="qsqldatabase.xml#transaction">transaction</db:link>() has been started. Returns <db:code>true</db:code> if the operation succeeded. Otherwise it returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>For some databases, the rollback will fail and return <db:code>false</db:code> if there is an <db:link xlink:href="qsqlquery.xml#isActive">active query</db:link> using the database for a <db:code>SELECT</db:code>. Make the query <db:link xlink:href="qsqlquery.xml#isActive">inactive</db:link> before doing the rollback.</db:para>
</db:note>
<db:para>Call <db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>() to get information about errors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquery.xml#isActive">QSqlQuery::isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#commit">commit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setConnectOptions">
<db:title>void QSqlDatabase::setConnectOptions(const QString &amp;<db:emphasis>options</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setConnectOptions</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>options</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setConnectOptions(const QString &amp;options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets database-specific <db:code role="parameter">options</db:code>. This must be done before the connection is opened, otherwise it has no effect. Another possibility is to close the connection, call QSqlDatabase::setConnectOptions(), and <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() the connection again.</db:para>
<db:para>The format of the <db:code role="parameter">options</db:code> string is a semicolon separated list of option names or option=value pairs. The options depend on the database client used and are described for each plugin in the <db:link xlink:href="sql-driver.xml">SQL Database Drivers</db:link> page.</db:para>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">db.setConnectOptions(&quot;SSL_KEY=client-key.pem;SSL_CERT=client-cert.pem;SSL_CA=ca-cert.pem;CLIENT_IGNORE_SPACE=1&quot;); // use an SSL connection to the server
if (!db.open()) {
    db.setConnectOptions(); // clears the connect option string
    // ...
}
// ...
// PostgreSQL connection
db.setConnectOptions(&quot;requiressl=1&quot;); // enable PostgreSQL SSL connections
if (!db.open()) {
    db.setConnectOptions(); // clear options
    // ...
}
// ...
// ODBC connection
db.setConnectOptions(&quot;SQL_ATTR_ACCESS_MODE=SQL_MODE_READ_ONLY;SQL_ATTR_TRACE=SQL_OPT_TRACE_ON&quot;); // set ODBC options
if (!db.open()) {
    db.setConnectOptions(); // don't try to set this option
    // ...
}
}
</db:programlisting>
<db:para>Refer to the client library documentation for more information about the different options.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#connectOptions">connectOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDatabaseName">
<db:title>void QSqlDatabase::setDatabaseName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDatabaseName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDatabaseName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the connection's database name to <db:code role="parameter">name</db:code>. To have effect, the database name must be set <db:emphasis>before</db:emphasis> the connection is <db:link xlink:href="qsqldatabase.xml#open">opened</db:link>. Alternatively, you can <db:link xlink:href="qsqldatabase.xml#close">close</db:link>() the connection, set the database name, and call <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() again.</db:para>
<db:note>
<db:para>The <db:emphasis>database name</db:emphasis> is not the <db:emphasis>connection name</db:emphasis>. The connection name must be passed to <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>() at connection object create time.</db:para>
</db:note>
<db:para>For the QSQLITE driver, if the database name specified does not exist, then it will create the file for you unless the QSQLITE_OPEN_READONLY option is set.</db:para>
<db:para>Additionally, <db:code role="parameter">name</db:code> can be set to <db:code>&quot;:memory:&quot;</db:code> which will create a temporary database which is only available for the lifetime of the application.</db:para>
<db:para>For the QOCI (Oracle) driver, the database name is the TNS Service Name.</db:para>
<db:para>For the QODBC driver, the <db:code role="parameter">name</db:code> can either be a DSN, a DSN filename (in which case the file must have a <db:code>.dsn</db:code> extension), or a connection string.</db:para>
<db:para>For example, Microsoft Access users can use the following connection string to open an <db:code>.mdb</db:code> file directly, instead of having to create a DSN entry in the ODBC manager:</db:para>
<db:programlisting language="cpp">// ...
QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QODBC&quot;);
db.setDatabaseName(&quot;DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};FIL={MS Access};DBQ=myaccessfile.mdb&quot;);
if (db.open()) {
    // success!
}
// ...
</db:programlisting>
<db:para>There is no default value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#databaseName">databaseName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setUserName">setUserName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPassword">setPassword</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setHostName">setHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPort">setPort</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setConnectOptions">setConnectOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#open">open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHostName">
<db:title>void QSqlDatabase::setHostName(const QString &amp;<db:emphasis>host</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHostName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>host</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHostName(const QString &amp;host)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the connection's host name to <db:code role="parameter">host</db:code>. To have effect, the host name must be set <db:emphasis>before</db:emphasis> the connection is <db:link xlink:href="qsqldatabase.xml#open">opened</db:link>. Alternatively, you can <db:link xlink:href="qsqldatabase.xml#close">close</db:link>() the connection, set the host name, and call <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() again.</db:para>
<db:para>There is no default value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#hostName">hostName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setUserName">setUserName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPassword">setPassword</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setDatabaseName">setDatabaseName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPort">setPort</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setConnectOptions">setConnectOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#open">open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNumericalPrecisionPolicy">
<db:title>void QSqlDatabase::setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy <db:emphasis>precisionPolicy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNumericalPrecisionPolicy</db:methodname>
<db:methodparam>
<db:type>QSql::NumericalPrecisionPolicy</db:type>
<db:parameter>precisionPolicy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy precisionPolicy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the default numerical precision policy used by queries created on this database connection to <db:code role="parameter">precisionPolicy</db:code>.</db:para>
<db:para>Note: Drivers that don't support fetching numerical values with low precision will ignore the precision policy. You can use <db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>() to find out whether a driver supports this feature.</db:para>
<db:para>Note: Setting the default precision policy to <db:code role="parameter">precisionPolicy</db:code> doesn't affect any currently active queries.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsql.xml#NumericalPrecisionPolicy-enum">QSql::NumericalPrecisionPolicy</db:link></db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#numericalPrecisionPolicy">numericalPrecisionPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquery.xml#setNumericalPrecisionPolicy">QSqlQuery::setNumericalPrecisionPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquery.xml#numericalPrecisionPolicy">QSqlQuery::numericalPrecisionPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPassword">
<db:title>void QSqlDatabase::setPassword(const QString &amp;<db:emphasis>password</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPassword</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>password</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPassword(const QString &amp;password)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the connection's password to <db:code role="parameter">password</db:code>. To have effect, the password must be set <db:emphasis>before</db:emphasis> the connection is <db:link xlink:href="qsqldatabase.xml#open">opened</db:link>. Alternatively, you can <db:link xlink:href="qsqldatabase.xml#close">close</db:link>() the connection, set the password, and call <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() again.</db:para>
<db:para>There is no default value.</db:para>
<db:warning>
<db:para>This function stores the password in plain text within Qt. Use the <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() call that takes a password as parameter to avoid this behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#password">password</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setUserName">setUserName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setDatabaseName">setDatabaseName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setHostName">setHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPort">setPort</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setConnectOptions">setConnectOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#open">open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPort">
<db:title>void QSqlDatabase::setPort(int <db:emphasis>port</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPort</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>port</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPort(int port)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the connection's port number to <db:code role="parameter">port</db:code>. To have effect, the port number must be set <db:emphasis>before</db:emphasis> the connection is <db:link xlink:href="qsqldatabase.xml#open">opened</db:link>. Alternatively, you can <db:link xlink:href="qsqldatabase.xml#close">close</db:link>() the connection, set the port number, and call <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() again..</db:para>
<db:para>There is no default value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#port">port</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setUserName">setUserName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPassword">setPassword</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setHostName">setHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setDatabaseName">setDatabaseName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setConnectOptions">setConnectOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#open">open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUserName">
<db:title>void QSqlDatabase::setUserName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUserName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUserName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the connection's user name to <db:code role="parameter">name</db:code>. To have effect, the user name must be set <db:emphasis>before</db:emphasis> the connection is <db:link xlink:href="qsqldatabase.xml#open">opened</db:link>. Alternatively, you can <db:link xlink:href="qsqldatabase.xml#close">close</db:link>() the connection, set the user name, and call <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() again.</db:para>
<db:para>There is no default value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#userName">userName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setDatabaseName">setDatabaseName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPassword">setPassword</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setHostName">setHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setPort">setPort</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#setConnectOptions">setConnectOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#open">open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tables">
<db:title>QStringList QSqlDatabase::tables(QSql::TableType <db:emphasis>type</db:emphasis> = QSql::Tables) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>tables</db:methodname>
<db:methodparam>
<db:type>QSql::TableType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>QSql::Tables</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList tables(QSql::TableType type) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the database's tables, system tables and views, as specified by the parameter <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#primaryIndex">primaryIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#record">record</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transaction">
<db:title>bool QSqlDatabase::transaction()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>transaction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool transaction()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins a transaction on the database if the driver supports transactions. Returns <db:code>true</db:code> if the operation succeeded. Otherwise it returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#commit">commit</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#rollback">rollback</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userName">
<db:title>QString QSqlDatabase::userName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>userName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString userName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the connection's user name; it may be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#setUserName">setUserName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QSqlDatabase &amp;QSqlDatabase::operator=(const QSqlDatabase &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSqlDatabase &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QSqlDatabase &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlDatabase &amp; operator=(const QSqlDatabase &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this object.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QSqlDatabase</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="exec">
<db:title>QSqlQuery QSqlDatabase::exec(const QString &amp;<db:emphasis>query</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSqlQuery</db:type>
<db:methodname>exec</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>query</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlQuery exec(const QString &amp;query) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.6. We strongly advise against using it in new code.</db:para>
<db:para>Executes a SQL statement on the database and returns a <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> object. Use <db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>() to retrieve error information. If <db:code role="parameter">query</db:code> is empty, an empty, invalid query is returned and <db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>() is not affected.</db:para>
<db:para>Use <db:link xlink:href="qsqlquery.xml#exec-1">QSqlQuery::exec</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link></db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#lastError">lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
