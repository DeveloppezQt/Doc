<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Drop Site Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to distinguish the various MIME formats available in a drag and drop operation.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:alt>Screenshot of the Drop Site example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/dropsite-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Drop Site example accepts drops from other applications, and displays the MIME formats provided by the drag object.</db:para>
<db:para>There are two classes, DropArea and DropSiteWindow, and a main() function in this example. A DropArea object is instantiated in DropSiteWindow; a DropSiteWindow object is then invoked in the main() function.</db:para>
<db:section xml:id="droparea-class-definition">
<db:title>DropArea Class Definition</db:title>
<db:para>The DropArea class is a subclass of <db:link xlink:href="qlabel.xml">QLabel</db:link> with a public slot, clear(), and a changed() signal.</db:para>
<db:programlisting language="cpp">class DropArea : public QLabel
{
    Q_OBJECT

public:
    explicit DropArea(QWidget *parent = nullptr);

public slots:
    void clear();

signals:
    void changed(const QMimeData *mimeData = nullptr);
</db:programlisting>
<db:para>In addition, DropArea contains reimplementations of four <db:link xlink:href="qwidget.xml">QWidget</db:link> event handlers:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#dragEnterEvent">dragEnterEvent</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#dragMoveEvent">dragMoveEvent</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#dragLeaveEvent">dragLeaveEvent</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#dropEvent">dropEvent</db:link>()</db:para>
</db:listitem>
</db:orderedlist>
<db:para>These event handlers are further explained in the implementation of the DropArea class.</db:para>
<db:programlisting language="cpp">protected:
    void dragEnterEvent(QDragEnterEvent *event) override;
    void dragMoveEvent(QDragMoveEvent *event) override;
    void dragLeaveEvent(QDragLeaveEvent *event) override;
    void dropEvent(QDropEvent *event) override;
};
</db:programlisting>
</db:section>
<db:section xml:id="droparea-class-implementation">
<db:title>DropArea Class Implementation</db:title>
<db:para>In the DropArea constructor, we set the <db:link xlink:href="qwidget.xml#minimumSize-prop">minimum size</db:link> to 200x200 pixels, the <db:link xlink:href="qframe.xml#setFrameStyle">frame style</db:link> to both <db:link xlink:href="qframe.xml#Shadow-enum">QFrame::Sunken</db:link> and <db:link xlink:href="qframe.xml#Shape-enum">QFrame::StyledPanel</db:link>, and we align its contents to the center.</db:para>
<db:programlisting language="cpp">DropArea::DropArea(QWidget *parent)
    : QLabel(parent)
{
    setMinimumSize(200, 200);
    setFrameStyle(QFrame::Sunken | QFrame::StyledPanel);
    setAlignment(Qt::AlignCenter);
    setAcceptDrops(true);
    setAutoFillBackground(true);
    clear();
}
</db:programlisting>
<db:para>Also, we enable drop events in DropArea by setting the <db:link xlink:href="qwidget.xml#acceptDrops-prop">acceptDrops</db:link> property to true. Then, we enable the <db:link xlink:href="qwidget.xml#autoFillBackground-prop">autoFillBackground</db:link> property and invoke the clear() function.</db:para>
<db:para>The <db:link xlink:href="qwidget.xml#dragEnterEvent">dragEnterEvent</db:link>() event handler is called when a drag is in progress and the mouse enters the DropArea object. For the DropSite example, when the mouse enters DropArea, we set its text to &quot;&lt;drop content&gt;&quot; and highlight its background.</db:para>
<db:programlisting language="cpp">void DropArea::dragEnterEvent(QDragEnterEvent *event)
{
    setText(tr(&quot;&amp;lt;drop content&amp;gt;&quot;));
    setBackgroundRole(QPalette::Highlight);

    event-&amp;gt;acceptProposedAction();
    emit changed(event-&amp;gt;mimeData());
}
</db:programlisting>
<db:para>Then, we invoke <db:link xlink:href="qdropevent.xml#acceptProposedAction">acceptProposedAction</db:link>() on <db:code role="parameter">event</db:code>, setting the drop action to the one proposed. Lastly, we emit the changed() signal, with the data that was dropped and its MIME type information as a parameter.</db:para>
<db:para>For <db:link xlink:href="qwidget.xml#dragMoveEvent">dragMoveEvent</db:link>(), we just accept the proposed <db:link xlink:href="qdragmoveevent.xml">QDragMoveEvent</db:link> object, <db:code role="parameter">event</db:code>, with <db:link xlink:href="qdropevent.xml#acceptProposedAction">acceptProposedAction</db:link>().</db:para>
<db:programlisting language="cpp">void DropArea::dragMoveEvent(QDragMoveEvent *event)
{
    event-&amp;gt;acceptProposedAction();
}
</db:programlisting>
<db:para>The DropArea class's implementation of <db:link xlink:href="qwidget.xml#dropEvent">dropEvent</db:link>() extracts the <db:code role="parameter">event</db:code>'s mime data and displays it accordingly.</db:para>
<db:programlisting language="cpp">void DropArea::dropEvent(QDropEvent *event)
{
    const QMimeData *mimeData = event-&amp;gt;mimeData();
</db:programlisting>
<db:para>The mimeData object can contain one of the following objects: an image, HTML text, Markdown text, plain text, or a list of URLs.</db:para>
<db:programlisting language="cpp">    if (mimeData-&amp;gt;hasImage()) {
        setPixmap(qvariant_cast&amp;lt;QPixmap&amp;gt;(mimeData-&amp;gt;imageData()));
    } else if (mimeData-&amp;gt;hasFormat(u&quot;text/markdown&quot;_s)) {
        setText(QString::fromUtf8(mimeData-&amp;gt;data(u&quot;text/markdown&quot;_s)));
        setTextFormat(Qt::MarkdownText);
    } else if (mimeData-&amp;gt;hasHtml()) {
        setText(mimeData-&amp;gt;html());
        setTextFormat(Qt::RichText);
    } else if (mimeData-&amp;gt;hasText()) {
        setText(mimeData-&amp;gt;text());
        setTextFormat(Qt::PlainText);
    } else if (mimeData-&amp;gt;hasUrls()) {
        QList&amp;lt;QUrl&amp;gt; urlList = mimeData-&amp;gt;urls();
        QString text;
        for (qsizetype i = 0, count = qMin(urlList.size(), qsizetype(32)); i &amp;lt; count; ++i)
            text += urlList.at(i).path() + u'\n';
        setText(text);
    } else {
        setText(tr(&quot;Cannot display data&quot;));
    }
</db:programlisting>
<db:itemizedlist>
<db:listitem>
<db:para>If mimeData contains an image, we display it in DropArea with <db:link xlink:href="qlabel.xml#pixmap-prop">setPixmap</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>If mimeData contains HTML, we display it with <db:link xlink:href="qlabel.xml#text-prop">setText</db:link>() and set DropArea's text format as <db:link xlink:href="qt.xml#TextFormat-enum">Qt::RichText</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>If mimeData contains Markdown, we display it with <db:link xlink:href="qlabel.xml#text-prop">setText</db:link>() and set DropArea's text format as <db:link xlink:href="qt.xml#TextFormat-enum">Qt::MarkdownText</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>If mimeData contains plain text, we display it with <db:link xlink:href="qlabel.xml#text-prop">setText</db:link>() and set DropArea's text format as <db:link xlink:href="qt.xml#TextFormat-enum">Qt::PlainText</db:link>. In the event that mimeData contains URLs, we iterate through the list of URLs to display them on individual lines.</db:para>
</db:listitem>
<db:listitem>
<db:para>If mimeData contains other types of objects, we set DropArea's text, with <db:link xlink:href="qlabel.xml#text-prop">setText</db:link>() to &quot;Cannot display data&quot; to inform the user.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>We then set DropArea's <db:link xlink:href="qwidget.xml#backgroundRole">backgroundRole</db:link> to <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Dark</db:link> and we accept event's proposed action.</db:para>
<db:programlisting language="cpp">    setBackgroundRole(QPalette::Dark);
    event-&amp;gt;acceptProposedAction();
}
</db:programlisting>
<db:para>The <db:link xlink:href="qwidget.xml#dragLeaveEvent">dragLeaveEvent</db:link>() event handler is called when a drag is in progress and the mouse leaves the widget.</db:para>
<db:programlisting language="cpp">void DropArea::dragLeaveEvent(QDragLeaveEvent *event)
{
    clear();
    event-&amp;gt;accept();
}
</db:programlisting>
<db:para>For DropArea's implementation, we clear invoke clear() and then accept the proposed event.</db:para>
<db:para>The clear() function sets the text in DropArea to &quot;&lt;drop content&gt;&quot; and sets the <db:link xlink:href="qwidget.xml#backgroundRole">backgroundRole</db:link> to <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Dark</db:link>. Lastly, it emits the changed() signal.</db:para>
<db:programlisting language="cpp">void DropArea::clear()
{
    setText(tr(&quot;&amp;lt;drop content&amp;gt;&quot;));
    setBackgroundRole(QPalette::Dark);

    emit changed();
}
</db:programlisting>
</db:section>
<db:section xml:id="dropsitewindow-class-definition">
<db:title>DropSiteWindow Class Definition</db:title>
<db:para>The DropSiteWindow class contains a constructor and a public slot, updateFormatsTable().</db:para>
<db:programlisting language="cpp">class DropSiteWindow : public QWidget
{
    Q_OBJECT

public:
    DropSiteWindow();

public slots:
    void updateFormatsTable(const QMimeData *mimeData);
    void copy();

private:
    DropArea *dropArea;
    QLabel *abstractLabel;
    QTableWidget *formatsTable;

    QPushButton *clearButton;
    QPushButton *copyButton;
    QPushButton *quitButton;
    QDialogButtonBox *buttonBox;
};
</db:programlisting>
<db:para>The class also contains a private instance of DropArea, dropArea, <db:link xlink:href="qlabel.xml">QLabel</db:link>, abstractLabel, <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link>, formatsTable, <db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link>, buttonBox, and two <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> objects, clearButton and quitButton.</db:para>
</db:section>
<db:section xml:id="dropsitewindow-class-implementation">
<db:title>DropSiteWindow Class Implementation</db:title>
<db:para>In the constructor of DropSiteWindow, we instantiate abstractLabel and set its <db:link xlink:href="qlabel.xml#wordWrap-prop">wordWrap</db:link> property to true. We also call the <db:link xlink:href="qwidget.xml#adjustSize">adjustSize</db:link>() function to adjust abstractLabel's size according to its contents.</db:para>
<db:programlisting language="cpp">DropSiteWindow::DropSiteWindow()
{
    abstractLabel = new QLabel(tr(&quot;This example accepts drags from other &quot;
                                  &quot;applications and displays the MIME types &quot;
                                  &quot;provided by the drag object.&quot;));
    abstractLabel-&amp;gt;setWordWrap(true);
    abstractLabel-&amp;gt;adjustSize();
</db:programlisting>
<db:para>Then we instantiate dropArea and connect its changed() signal to DropSiteWindow's updateFormatsTable() slot.</db:para>
<db:programlisting language="cpp">    dropArea = new DropArea;
    connect(dropArea, &amp;amp;DropArea::changed,
            this, &amp;amp;DropSiteWindow::updateFormatsTable);
</db:programlisting>
<db:para>We now set up the <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> object, formatsTable. Its horizontal header is set using a <db:link xlink:href="qstringlist.xml">QStringList</db:link> object, labels. The number of columms are set to two and the table is not editable. Also, the formatTable's horizontal header is formatted to ensure that its second column stretches to occupy additional space available.</db:para>
<db:programlisting language="cpp">    formatsTable = new QTableWidget;
    formatsTable-&amp;gt;setColumnCount(2);
    formatsTable-&amp;gt;setEditTriggers(QAbstractItemView::NoEditTriggers);
    formatsTable-&amp;gt;setHorizontalHeaderLabels({tr(&quot;Format&quot;),  tr(&quot;Content&quot;)});
    formatsTable-&amp;gt;horizontalHeader()-&amp;gt;setStretchLastSection(true);
</db:programlisting>
<db:para>Three <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> objects, clearButton, copyButton, and quitButton, are instantiated and added to buttonBox - a <db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link> object. We use <db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link> here to ensure that the push buttons are presented in a layout that conforms to the platform's style.</db:para>
<db:programlisting language="cpp">    clearButton = new QPushButton(tr(&quot;Clear&quot;));
    copyButton = new QPushButton(tr(&quot;Copy&quot;));
    quitButton = new QPushButton(tr(&quot;Quit&quot;));

    buttonBox = new QDialogButtonBox;
    buttonBox-&amp;gt;addButton(clearButton, QDialogButtonBox::ActionRole);
    buttonBox-&amp;gt;addButton(copyButton, QDialogButtonBox::ActionRole);
#if !QT_CONFIG(clipboard)
    copyButton-&amp;gt;setVisible(false);
#endif

    buttonBox-&amp;gt;addButton(quitButton, QDialogButtonBox::RejectRole);

    connect(quitButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;QWidget::close);
    connect(clearButton, &amp;amp;QAbstractButton::clicked, dropArea, &amp;amp;DropArea::clear);
    connect(copyButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;DropSiteWindow::copy);
</db:programlisting>
<db:para>The <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signals for copyButton, clearButton, and quitButton are connected to copy(), clear() and <db:link xlink:href="qwidget.xml#close">close</db:link>(), respectively.</db:para>
<db:para>For the layout, we use a <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link>, mainLayout, to arrange our widgets vertically. We also set the window title to &quot;Drop Site&quot; and the minimum size to 350x500 pixels.</db:para>
<db:programlisting language="cpp">    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    mainLayout-&amp;gt;addWidget(abstractLabel);
    mainLayout-&amp;gt;addWidget(dropArea);
    mainLayout-&amp;gt;addWidget(formatsTable);
    mainLayout-&amp;gt;addWidget(buttonBox);

    setWindowTitle(tr(&quot;Drop Site&quot;));
    resize(700, 500);
}
</db:programlisting>
<db:para>We move on to the updateFormatsTable() function. This function updates the formatsTable, displaying the MIME formats of the object dropped onto the DropArea object. First, we set <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link>'s <db:link xlink:href="qtablewidget.xml#setRowCount">rowCount</db:link> property to 0. Then, we validate to ensure that the <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object passed in is a valid object.</db:para>
<db:programlisting language="cpp">void DropSiteWindow::updateFormatsTable(const QMimeData *mimeData)
{
    formatsTable-&amp;gt;setRowCount(0);
    copyButton-&amp;gt;setEnabled(false);
    if (!mimeData)
        return;
</db:programlisting>
<db:para>Once we are sure that mimeData is valid, we iterate through its supported formats.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qmimedata.xml#formats">formats</db:link>() function returns a <db:link xlink:href="qstringlist.xml">QStringList</db:link> object, containing all the formats supported by the mimeData.</db:para>
</db:note>
<db:programlisting language="cpp">    const QStringList formats = mimeData-&amp;gt;formats();
    for (const QString &amp;amp;format : formats) {
        QTableWidgetItem *formatItem = new QTableWidgetItem(format);
        formatItem-&amp;gt;setFlags(Qt::ItemIsEnabled);
        formatItem-&amp;gt;setTextAlignment(Qt::AlignTop | Qt::AlignLeft);
</db:programlisting>
<db:para>Within each iteration, we create a <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link>, formatItem and we set its <db:link xlink:href="qtablewidgetitem.xml#setFlags">flags</db:link> to <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEnabled</db:link>, and its <db:link xlink:href="qtablewidgetitem.xml#setTextAlignment" role="deprecated">text alignment</db:link> to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link> and <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link>.</db:para>
<db:para>A <db:link xlink:href="qstring.xml">QString</db:link> object, text, is customized to display data according to the contents of format. We invoke <db:link xlink:href="qstring.xml">QString</db:link>'s <db:link xlink:href="qstring.xml#simplified">simplified</db:link>() function on text, to obtain a string that has no additional space before, after or in between words.</db:para>
<db:programlisting language="cpp">        QString text;
        if (format == u&quot;text/plain&quot;) {
            text = mimeData-&amp;gt;text().simplified();
        } else if (format == u&quot;text/markdown&quot;) {
            text = QString::fromUtf8(mimeData-&amp;gt;data(u&quot;text/markdown&quot;_s));
        } else if (format == u&quot;text/html&quot;) {
            text = mimeData-&amp;gt;html().simplified();
        } else if (format == u&quot;text/uri-list&quot;) {
            QList&amp;lt;QUrl&amp;gt; urlList = mimeData-&amp;gt;urls();
            for (qsizetype i = 0, count = qMin(urlList.size(), qsizetype(32)); i &amp;lt; count; ++i)
                text.append(urlList.at(i).toString() + u' ');
        } else {
            QByteArray data = mimeData-&amp;gt;data(format);
            if (data.size() &amp;gt; 32)
                data.truncate(32);
            text = QString::fromLatin1(data.toHex(' ')).toUpper();
        }
</db:programlisting>
<db:para>If format contains a list of URLs, we iterate through them, using spaces to separate them. On the other hand, if format contains an image, we display the data by converting the text to hexadecimal.</db:para>
<db:programlisting language="cpp">        int row = formatsTable-&amp;gt;rowCount();
        formatsTable-&amp;gt;insertRow(row);
        formatsTable-&amp;gt;setItem(row, 0, new QTableWidgetItem(format));
        formatsTable-&amp;gt;setItem(row, 1, new QTableWidgetItem(text));
    }

    formatsTable-&amp;gt;resizeColumnToContents(0);
#if QT_CONFIG(clipboard)
    copyButton-&amp;gt;setEnabled(formatsTable-&amp;gt;rowCount() &amp;gt; 0);
#endif
}
</db:programlisting>
<db:para>Once text has been customized to contain the appropriate data, we insert both format and text into formatsTable with <db:link xlink:href="qtablewidget.xml#setItem">setItem</db:link>(). Lastly, we invoke <db:link xlink:href="qtableview.xml#resizeColumnToContents">resizeColumnToContents</db:link>() on formatsTable's first column.</db:para>
</db:section>
<db:section xml:id="the-main-function">
<db:title>The main() Function</db:title>
<db:para>Within the main() function, we instantiate DropSiteWindow and invoke its <db:link xlink:href="qwidget.xml#show">show</db:link>() function.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    DropSiteWindow window;
    window.show();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/draganddrop/dropsite?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
