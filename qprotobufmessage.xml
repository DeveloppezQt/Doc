<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProtobufMessage Class</db:title>
<db:productname>QtProtobuf</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Protobuf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Base class for all protobuf messages.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProtobufMessage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Protobuf)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Protobuf)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtprotobuf-any.xml" xlink:role="class">QtProtobuf::Any</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Provides access to the properties of a message, using <db:link xlink:href="qprotobufmessage.xml#setProperty">setProperty</db:link>() and <db:link xlink:href="qprotobufmessage.xml#property">property</db:link>(), without depending on what the message is.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="constructByName">
<db:title>[static] QProtobufMessagePointer QProtobufMessage::constructByName(const QString &amp;<db:emphasis>messageType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QProtobufMessagePointer</db:type>
<db:methodname>constructByName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>messageType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProtobufMessagePointer constructByName(const QString &amp;messageType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs <db:link xlink:href="qprotobufmessage.xml">QProtobufMessage</db:link> using <db:code role="parameter">messageType</db:code>. Returns a pointer to the constructed <db:link xlink:href="qprotobufmessage.xml">QProtobufMessage</db:link>.</db:para>
<db:para>This function attempts to create a message whose type matches <db:code role="parameter">messageType</db:code>. If <db:code role="parameter">messageType</db:code> is unknown, the function returns <db:code>nullptr</db:code>. If the message is not found in the registry, the function returns <db:code>nullptr</db:code>. Ownership of the constructed message is given to the function caller.</db:para>
</db:section>
<db:section xml:id="property">
<db:title>QVariant QProtobufMessage::property(QAnyStringView <db:emphasis>propertyName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>property</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>propertyName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant property(QAnyStringView propertyName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Get the value of the property <db:code role="parameter">propertyName</db:code>.</db:para>
<db:para>If the <db:code role="parameter">propertyName</db:code> isn't known then the returned <db:link xlink:href="qvariant.xml">QVariant</db:link> is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprotobufmessage.xml#setProperty">setProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty">
<db:title>bool QProtobufMessage::setProperty(QAnyStringView <db:emphasis>propertyName</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setProperty</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>propertyName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setProperty(QAnyStringView propertyName, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the property <db:code role="parameter">propertyName</db:code> to the value stored in <db:code role="parameter">value</db:code>.</db:para>
<db:para>If the <db:code role="parameter">propertyName</db:code> isn't a part of the known fields then the value will not be written and the function returns <db:code>false</db:code>.</db:para>
<db:para>Returns <db:code>false</db:code> if it failed to store the <db:code role="parameter">value</db:code> on the property. Otherwise <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprotobufmessage.xml#property">property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty-1">
<db:title>[since 6.6] bool QProtobufMessage::setProperty(QAnyStringView <db:emphasis>propertyName</db:emphasis>, QVariant &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setProperty</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>propertyName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVariant &amp;&amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setProperty(QAnyStringView propertyName, QVariant &amp;&amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="unknownFieldData">
<db:title>[since 6.7] QList&lt;QByteArray&gt; QProtobufMessage::unknownFieldData(qint32 <db:emphasis>field</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>unknownFieldData</db:methodname>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>field</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; unknownFieldData(qint32 field) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the unknown <db:code role="parameter">field</db:code> values sorted as they were received from the wire.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="unknownFieldNumbers">
<db:title>[since 6.7] QList&lt;qint32&gt; QProtobufMessage::unknownFieldNumbers() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;qint32&gt;</db:type>
<db:methodname>unknownFieldNumbers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;qint32&gt; unknownFieldNumbers() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the field numbers that were not known to <db:link xlink:href="qtprotobuf-module.xml">QtProtobuf</db:link> during deserialization.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QProtobufMessagePointer-typedef">
<db:title>[alias] QProtobufMessagePointer</db:title>
<db:typedefsynopsis>
<db:typedefname>QProtobufMessagePointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="module">QtProtobuf</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for std::unique_ptr&lt;<db:link xlink:href="qprotobufmessage.xml">QProtobufMessage</db:link>, <db:link xlink:href="qprotobufmessagedeleter.xml">QProtobufMessageDeleter</db:link>&gt;. Use this to manage the lifetime of dynamically allocated QProtobufMessages, such as those created by calling <db:link xlink:href="qprotobufmessage.xml#constructByName">QProtobufMessage::constructByName</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
