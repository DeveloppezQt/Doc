<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSoundEffect Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link> class provides a way to play low latency sound effects.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSoundEffect</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtmultimedia-soundeffect.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSoundEffect is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class allows you to play uncompressed audio files (typically WAV files) in a generally lower latency way, and is suitable for &quot;feedback&quot; type sounds in response to user actions (e.g. virtual keyboard sounds, positive or negative feedback for popup dialogs, or game sounds). If low latency is not important, consider using the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class instead, since it supports a wider variety of media formats and is less resource intensive.</db:para>
<db:para>This example shows how a looping, somewhat quiet sound effect can be played:</db:para>
<db:programlisting language="cpp">QSoundEffect effect;
effect.setSource(QUrl::fromLocalFile(&quot;engine.wav&quot;));
effect.setLoopCount(QSoundEffect::Infinite);
effect.setVolume(0.25f);
effect.play();
</db:programlisting>
<db:para>Typically the sound effect should be reused, which allows all the parsing and preparation to be done ahead of time, and only triggered when necessary. This assists with lower latency audio playback.</db:para>
<db:programlisting language="cpp">MyGame()
    : m_explosion(this)
{
    m_explosion.setSource(QUrl::fromLocalFile(&quot;explosion.wav&quot;));
    m_explosion.setVolume(0.25f);

    // Set up click handling etc.
    connect(clickSource, &amp;amp;QPushButton::clicked, &amp;amp;m_explosion, &amp;amp;QSoundEffect::play);
}
private:
QSoundEffect m_explosion;
</db:programlisting>
<db:para>Since <db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link> requires slightly more resources to achieve lower latency playback, the platform may limit the number of simultaneously playing sound effects.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Loop-enum">
<db:title>enum QSoundEffect::Loop</db:title>
<db:enumsynopsis>
<db:enumname>Loop</db:enumname>
<db:enumitem>
<db:enumidentifier>Infinite</db:enumidentifier>
<db:enumvalue>-2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link></db:emphasis>::Infinite</db:code></db:para>
</db:td>
<db:td><db:code>-2</db:code></db:td>
<db:td>
<db:para>Used as a parameter to <db:link xlink:href="qsoundeffect.xml#setLoopCount">setLoopCount</db:link>() for infinite looping</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QSoundEffect::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>Null</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Loading</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ready</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No source has been set or the source is null.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link></db:emphasis>::Loading</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qml-qtmultimedia-soundeffect.xml">SoundEffect</db:link> is trying to load the source.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link></db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The source is loaded and ready for play.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link></db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error occurred during operation, such as failure of loading the source.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="audioDevice-prop">
<db:title>audioDevice : QAudioDevice</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAudioDevice</db:type>
<db:varname>audioDevice</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">audioDevice</db:synopsisinfo>
<db:synopsisinfo role="setter">setAudioDevice</db:synopsisinfo>
<db:synopsisinfo role="notifier">audioDeviceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> instance.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link></db:type> <db:emphasis role="bold">audioDevice</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAudioDevice</db:emphasis>(const <db:type><db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link></db:type> &amp;<db:emphasis>device</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">audioDeviceChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="loops-prop">
<db:title>loops : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>loops</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">loopCount</db:synopsisinfo>
<db:synopsisinfo role="setter">setLoopCount</db:synopsisinfo>
<db:synopsisinfo role="notifier">loopCountChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of times the sound is played. A value of 0 or 1 means the sound will be played only once; set to <db:link xlink:href="qml-qtmultimedia-soundeffect.xml">SoundEffect</db:link>.Infinite to enable infinite looping.</db:para>
<db:para>The value can be changed while the sound effect is playing, in which case it will update the remaining loops to the new value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#loopCount">loopCount</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#setLoopCount">setLoopCount</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>loopCount</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#loopCountChanged">loopCountChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="loopsRemaining-prop">
<db:title>[read-only] loopsRemaining : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>loopsRemaining</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">loopsRemaining</db:synopsisinfo>
<db:synopsisinfo role="notifier">loopsRemainingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the number of loops remaining before the sound effect stops by itself, or <db:link xlink:href="qsoundeffect.xml#Loop-enum">QSoundEffect::Infinite</db:link> if that's what has been set in <db:link xlink:href="qsoundeffect.xml#loops-prop">loops</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">loopsRemaining</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#loopsRemainingChanged">loopsRemainingChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="muted-prop">
<db:title>muted : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>muted</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isMuted</db:synopsisinfo>
<db:synopsisinfo role="setter">setMuted</db:synopsisinfo>
<db:synopsisinfo role="notifier">mutedChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property provides a way to control muting. A value of <db:code>true</db:code> will mute this effect.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#isMuted">isMuted</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#setMuted">setMuted</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>muted</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#mutedChanged">mutedChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="playing-prop">
<db:title>[read-only] playing : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>playing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isPlaying</db:synopsisinfo>
<db:synopsisinfo role="notifier">playingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property indicates whether the sound effect is playing or not.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#isPlaying">isPlaying</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#playingChanged">playingChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>source</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">source</db:synopsisinfo>
<db:synopsisinfo role="setter">setSource</db:synopsisinfo>
<db:synopsisinfo role="notifier">sourceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the url for the sound to play. For the <db:link xlink:href="qml-qtmultimedia-soundeffect.xml">SoundEffect</db:link> to attempt to load the source, the URL must exist and the application must have read permission in the specified directory.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#source">source</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#setSource">setSource</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#sourceChanged">sourceChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Status</db:type>
<db:varname>status</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">status</db:synopsisinfo>
<db:synopsisinfo role="notifier">statusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property indicates the current status of the sound effect from the <db:link xlink:href="qsoundeffect.xml#Status-enum">QSoundEffect::Status</db:link> enumeration.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsoundeffect.xml#Status-enum">QSoundEffect::Status</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#status">status</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#statusChanged">statusChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="volume-prop">
<db:title>volume : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>volume</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">volume</db:synopsisinfo>
<db:synopsisinfo role="setter">setVolume</db:synopsisinfo>
<db:synopsisinfo role="notifier">volumeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the volume of the sound effect playback, from 0.0 (silence) to 1.0 (full volume).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#volume">volume</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#setVolume">setVolume</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsoundeffect.xml#volumeChanged">volumeChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSoundEffect">
<db:title>[explicit] QSoundEffect::QSoundEffect(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSoundEffect</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSoundEffect(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QSoundEffect-1">
<db:title>[explicit] QSoundEffect::QSoundEffect(const QAudioDevice &amp;<db:emphasis>audioDevice</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSoundEffect</db:methodname>
<db:methodparam>
<db:type>const QAudioDevice &amp;</db:type>
<db:parameter>audioDevice</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSoundEffect(const QAudioDevice &amp;audioDevice, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link> with the given <db:code role="parameter">audioDevice</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSoundEffect">
<db:title>[virtual] QSoundEffect::~QSoundEffect()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSoundEffect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSoundEffect()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this sound effect.</db:para>
</db:section>
<db:section xml:id="isLoaded">
<db:title>bool QSoundEffect::isLoaded() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLoaded</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLoaded() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the sound effect has finished loading the <db:link xlink:href="qsoundeffect.xml#source">source</db:link>().</db:para>
</db:section>
<db:section xml:id="isMuted">
<db:title>bool QSoundEffect::isMuted() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isMuted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">muted</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isMuted() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this sound effect is muted</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsoundeffect.xml#muted-prop">muted</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isPlaying">
<db:title>bool QSoundEffect::isPlaying() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isPlaying</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">playing</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isPlaying() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the sound effect is currently playing, or false otherwise</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsoundeffect.xml#playing-prop">playing</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="loadedChanged">
<db:title>void QSoundEffect::loadedChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadedChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadedChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:code>loadedChanged</db:code> signal is emitted when the loading state has changed.</db:para>
</db:section>
<db:section xml:id="loopCount">
<db:title>int QSoundEffect::loopCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>loopCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">loops</db:synopsisinfo>
<db:synopsisinfo role="signature">int loopCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the total number of times that this sound effect will be played before stopping.</db:para>
<db:para>See the <db:link xlink:href="qsoundeffect.xml#loopsRemaining-prop">loopsRemaining</db:link>() method for the number of loops currently remaining.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsoundeffect.xml#loops-prop">loops</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsoundeffect.xml#setLoopCount">setLoopCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loopCountChanged">
<db:title>void QSoundEffect::loopCountChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loopCountChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">loops</db:synopsisinfo>
<db:synopsisinfo role="signature">void loopCountChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:code>loopCountChanged</db:code> signal is emitted when the initial number of loops has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsoundeffect.xml#loops-prop">loops</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="loopsRemainingChanged">
<db:title>void QSoundEffect::loopsRemainingChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loopsRemainingChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">loopsRemaining</db:synopsisinfo>
<db:synopsisinfo role="signature">void loopsRemainingChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:code>loopsRemainingChanged</db:code> signal is emitted when the remaining number of loops has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsoundeffect.xml#loopsRemaining-prop">loopsRemaining</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="mutedChanged">
<db:title>void QSoundEffect::mutedChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mutedChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">muted</db:synopsisinfo>
<db:synopsisinfo role="signature">void mutedChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:code>mutedChanged</db:code> signal is emitted when the mute state has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsoundeffect.xml#muted-prop">muted</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="play">
<db:title>void QSoundEffect::play()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>play</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void play()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Start playback of the sound effect, looping the effect for the number of times as specified in the loops property.</db:para>
</db:section>
<db:section xml:id="playingChanged">
<db:title>void QSoundEffect::playingChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>playingChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">playing</db:synopsisinfo>
<db:synopsisinfo role="signature">void playingChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:code>playingChanged</db:code> signal is emitted when the playing property has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsoundeffect.xml#playing-prop">playing</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="setLoopCount">
<db:title>void QSoundEffect::setLoopCount(int <db:emphasis>loopCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLoopCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>loopCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">loops</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLoopCount(int loopCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the total number of times to play this sound effect to <db:code role="parameter">loopCount</db:code>.</db:para>
<db:para>Setting the loop count to 0 or 1 means the sound effect will be played only once; pass <db:code>QSoundEffect::Infinite</db:code> to repeat indefinitely. The loop count can be changed while the sound effect is playing, in which case it will update the remaining loops to the new <db:code role="parameter">loopCount</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsoundeffect.xml#loops-prop">loops</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsoundeffect.xml#loopCount">loopCount</db:link>()</db:member>
<db:member><db:link xlink:href="qsoundeffect.xml#loopsRemaining-prop">loopsRemaining</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMuted">
<db:title>void QSoundEffect::setMuted(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMuted</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>muted</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">muted</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMuted(bool muted)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether to mute this sound effect's playback.</db:para>
<db:para>If <db:code role="parameter">muted</db:code> is true, playback will be muted (silenced), and otherwise playback will occur with the currently specified <db:link xlink:href="qsoundeffect.xml#volume">volume</db:link>().</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsoundeffect.xml#muted-prop">muted</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsoundeffect.xml#isMuted">isMuted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSource">
<db:title>void QSoundEffect::setSource(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSource</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">source</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSource(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the current URL to play to <db:code role="parameter">url</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsoundeffect.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsoundeffect.xml#source">source</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVolume">
<db:title>void QSoundEffect::setVolume(float <db:emphasis>volume</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVolume</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>volume</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">volume</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVolume(float volume)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the sound effect volume to <db:code role="parameter">volume</db:code>.</db:para>
<db:para>The volume is scaled linearly from <db:code>0.0</db:code> (silence) to <db:code>1.0</db:code> (full volume). Values outside this range will be clamped.</db:para>
<db:para>The default volume is <db:code>1.0</db:code>.</db:para>
<db:para>UI volume controls should usually be scaled non-linearly. For example, using a logarithmic scale will produce linear changes in perceived loudness, which is what a user would normally expect from a volume control. See <db:link xlink:href="qaudio.xml#convertVolume">QAudio::convertVolume</db:link>() for more details.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsoundeffect.xml#volume-prop">volume</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsoundeffect.xml#volume">volume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source">
<db:title>QUrl QSoundEffect::source() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>source</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">source</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl source() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the URL of the current source to play</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsoundeffect.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsoundeffect.xml#setSource">setSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceChanged">
<db:title>void QSoundEffect::sourceChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sourceChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">source</db:synopsisinfo>
<db:synopsisinfo role="signature">void sourceChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:code>sourceChanged</db:code> signal is emitted when the source has been changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsoundeffect.xml#source-prop">source</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="status">
<db:title>QSoundEffect::Status QSoundEffect::status() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSoundEffect::Status</db:type>
<db:methodname>status</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">status</db:synopsisinfo>
<db:synopsisinfo role="signature">QSoundEffect::Status status() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current status of this sound effect.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsoundeffect.xml#status-prop">status</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="statusChanged">
<db:title>void QSoundEffect::statusChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>statusChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">status</db:synopsisinfo>
<db:synopsisinfo role="signature">void statusChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:code>statusChanged</db:code> signal is emitted when the status property has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsoundeffect.xml#status-prop">status</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="stop">
<db:title>void QSoundEffect::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stop current playback.</db:para>
</db:section>
<db:section xml:id="supportedMimeTypes">
<db:title>[static] QStringList QSoundEffect::supportedMimeTypes()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>supportedMimeTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList supportedMimeTypes()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the supported mime types for this platform.</db:para>
</db:section>
<db:section xml:id="volume">
<db:title>float QSoundEffect::volume() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>volume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">volume</db:synopsisinfo>
<db:synopsisinfo role="signature">float volume() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current volume of this sound effect, from 0.0 (silent) to 1.0 (maximum volume).</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsoundeffect.xml#volume-prop">volume</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsoundeffect.xml#setVolume">setVolume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="volumeChanged">
<db:title>void QSoundEffect::volumeChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>volumeChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">volume</db:synopsisinfo>
<db:synopsisinfo role="signature">void volumeChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:code>volumeChanged</db:code> signal is emitted when the volume has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsoundeffect.xml#volume-prop">volume</db:link>. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
