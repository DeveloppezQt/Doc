<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Linux/X11 - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to configure and build Qt on Linux/X11 platforms.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>You can download the Qt sources from the <db:link xlink:href="http://qt.io/download">Downloads</db:link> page. For more information, visit the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:para>Qt for X11 has some requirements that are given in more detail in the <db:link xlink:href="linux-requirements.xml">Qt for X11 Requirements</db:link> document.</db:para>
<db:section xml:id="step-1-unpacking-the-archive">
<db:title>Step 1: Unpacking the Archive</db:title>
<db:para>Unpack the archive if you have not done so already. For example, if you have the qt-everywhere-opensource-src-%VERSION%.tar.gz package, type the following commands at a command line prompt:</db:para>
<db:programlisting language="cpp">cd /tmp
gunzip qt-everywhere-opensource-src-%VERSION%.tar.gz        # uncompress the archive
tar xvf qt-everywhere-opensource-src-%VERSION%.tar          # unpack it
</db:programlisting>
<db:para>This creates the directory /tmp/qt-everywhere-opensource-src-%VERSION% containing the files from the archive. We only support the GNU version of the tar archiving utility. Note that on some systems it is called gtar.</db:para>
</db:section>
<db:section xml:id="step-2-build-the-qt-library">
<db:title>Step 2: Build the Qt Library</db:title>
<db:para>To configure the Qt library for your machine type, run the ./configure script in the package directory.</db:para>
<db:para>By default, Qt is configured for installation in the /usr/local/Qt-%VERSION% directory, but this can be changed by using the -prefix option.</db:para>
<db:para>The <db:link xlink:href="configure-options.xml">Configure Options</db:link> page contains more information about the configure options.</db:para>
<db:programlisting language="cpp">cd /tmp/qt-everywhere-opensource-src-%VERSION%
./configure
</db:programlisting>
<db:para>The <db:link xlink:href="configure-options.xml">Configure Options</db:link> page contains more information about the configure options.</db:para>
<db:para>To create the library and compile all the examples, tools, and tutorials, type:</db:para>
<db:programlisting language="cpp">cmake --build . --parallel
</db:programlisting>
<db:para>If -prefix is outside the build directory, you need to install the library, examples, tools, and tutorials in the appropriate place. To do this (as root if necessary), type:</db:para>
<db:programlisting language="cpp">cmake --install .
</db:programlisting>
<db:para>Note that on some systems the make utility is named differently, like gmake. The configure script tells you which make utility to use.</db:para>
<db:note>
<db:para>Later, if you need to reconfigure and rebuild Qt from the same location, ensure that all traces of the previous configuration are removed. To do so, from the build directory, type make confclean before running configure again.</db:para>
</db:note>
</db:section>
<db:section xml:id="step-3-set-the-environment-variables">
<db:title>Step 3: Set the Environment Variables</db:title>
<db:para>To use Qt, some environment variables need to be extended.</db:para>
<db:programlisting language="cpp">PATH               - to locate qmake, moc and other Qt tools
</db:programlisting>
<db:para>This is done as follows:</db:para>
<db:para>In .profile (if your shell is bash, ksh, zsh or sh), add the following lines:</db:para>
<db:programlisting language="cpp">PATH=/usr/local/Qt-%VERSION%/bin:$PATH
export PATH
</db:programlisting>
<db:para>In .login (if your shell is csh or tcsh), add the following line:</db:para>
<db:programlisting language="cpp">setenv PATH /usr/local/Qt-%VERSION%/bin:$PATH
</db:programlisting>
<db:para>If you use a different shell, modify your environment variables accordingly.</db:para>
<db:para>For compilers that do not support rpath you must also extend the LD_LIBRARY_PATH environment variable to include /usr/local/Qt-%VERSION%/lib. On Linux with GCC this step is not needed.</db:para>
</db:section>
</db:article>
