<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Linux/X11 - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to configure and build Qt on Linux/X11 platforms.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page describes configuring and building <db:link xlink:href="linux.xml">Qt for Linux/X11</db:link> from sources. Note that it is typically easier to install the pre-built Qt libraries and tools via <db:link xlink:href="get-and-install-qt.xml">Qt Online Installer</db:link>. A lot of Linux distributions also provide Qt packages through their package manager. Build Qt from sources, however, if you want to customize Qt further or are using a distribution for which no binary Qt packages (in the right version) are available.</db:para>
<db:para>Distribution packagers can find further information on how to package Qt in the <db:link xlink:href="packaging-recommendations.xml">packaging recommendations</db:link>.</db:para>
<db:section xml:id="step-1-getting-the-sources">
<db:title>Step 1: Getting the Sources</db:title>
<db:para>Qt sources can be installed in Qt Online Installer. Source packages are also available <db:link xlink:href="getting-sources-from-git.xml">through Git</db:link>, as archives in the <db:link xlink:href="https://account.qt.io/">Qt Account</db:link> (commercial users), and on <db:link xlink:href="https://download.qt.io/official_releases/qt/">download.qt.io</db:link> (open-source users).</db:para>
<db:para>If you install the sources through Qt Online Installer, they will be available in the Qt installation directory, for example <db:code>$HOME/Qt/6.7.2/Src</db:code>.</db:para>
<db:para>If you downloaded the single source archive, extract it to a directory of your choice:</db:para>
<db:programlisting language="cpp" role="bad">cd /tmp
tar xf ~/Downloads/qt-everywhere-src-6.7.2.tar.xz
</db:programlisting>
</db:section>
<db:section xml:id="step-2-install-build-requirements">
<db:title>Step 2: Install Build Requirements</db:title>
<db:para>Building Qt requires a build environment with tools, compilers, and development packages.</db:para>
<db:section xml:id="build-tools">
<db:title>Build Tools</db:title>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Tool</db:para>
</db:th>
<db:th>
<db:para>Supported Versions</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>CMake</db:para>
</db:td>
<db:td>
<db:para>Version 3.16 and newer (3.21 and newer for -static builds).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ninja</db:para>
</db:td>
<db:td>
<db:para>-</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Python</db:para>
</db:td>
<db:td>
<db:para>Version 3</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>configure always uses the <db:emphasis role="bold">Ninja</db:emphasis> generator and build tool if a ninja executable is available. Ninja is cross-platform, feature-rich, performant, and recommended on all platforms. The use of other generators might work but is not officially supported.</db:para>
</db:note>
</db:section>
<db:section xml:id="compilers-development-packages">
<db:title>Compilers &amp; Development Packages</db:title>
<db:para>The following compilers and configurations are supported in Qt 6.7:</db:para>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Distribution</db:para>
</db:th>
<db:th>
<db:para>Architecture</db:para>
</db:th>
<db:th>
<db:para>Compiler</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Red Hat 8.6</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>GCC 10 (toolset)</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Red Hat 8.8</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>GCC 10 (toolset)</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Red Hat 9.2</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>GCC 11</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>openSUSE 15.5</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>GCC 9</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SUSE Linux Enterprise Server 15 SP5</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>GCC 10</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ubuntu 22.04</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>GCC as provided by Canonical, GCC 11.x</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Debian 11.6 on ARM</db:para>
</db:td>
<db:td>
<db:para>arm64</db:para>
</db:td>
<db:td>
<db:para>GCC 10</db:para>
</db:td>
<db:td>
<db:para>Technology Preview</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Other compilers and configurations might work but are not actively tested.</db:para>
<db:para>Qt also relies on the availability of various libraries and development packages, which are typically installed by the package manager of the respective resolution. See <db:link xlink:href="linux-requirements.xml">Qt for X11 Requirements</db:link> for the details.</db:para>
</db:section>
</db:section>
<db:section xml:id="step-3-build-the-qt-libraries-and-tools">
<db:title>Step 3: Build the Qt Libraries and Tools</db:title>
<db:para>To configure your build, create a build directory and run the ./configure script in this directory:</db:para>
<db:programlisting language="cpp" role="bad">mkdir -p ~/dev/qt-build
cd ~/dev/qt-build
/tmp/qt-everywhere-src-6.7.2/configure
</db:programlisting>
<db:para>By default, Qt is configured for installation in the <db:code>/usr/local/Qt-6.7.2</db:code> directory. This can be changed by using the -prefix option. See the list of <db:link xlink:href="configure-options.xml">configure options</db:link> to tweak further.</db:para>
<db:para>Did configure run successfully? Then proceed with building the libraries and tools:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build . --parallel
</db:programlisting>
<db:para>After building, you need to install the libraries and tools in the appropriate place (unless you enabled a <db:link xlink:href="configure-options.xml#developer-builds">developer build</db:link>):</db:para>
<db:programlisting language="cpp" role="bad">cmake --install .
</db:programlisting>
<db:para>Note that this might require root access.</db:para>
</db:section>
<db:section xml:id="step-4-using-qt">
<db:title>Step 4: Using Qt</db:title>
<db:para>After Qt is installed, you can start building applications with it.</db:para>
<db:para>If you work from the command line, consider adding the Qt tools to your default PATH. This is done as follows:</db:para>
<db:para>In .profile (if your shell is bash, ksh, zsh or sh), add the following lines:</db:para>
<db:programlisting language="cpp" role="bad">PATH=/usr/local/Qt-6.7.2/bin:$PATH
export PATH
</db:programlisting>
<db:para>In .login (if your shell is csh or tcsh), add the following line:</db:para>
<db:programlisting language="cpp" role="bad">setenv PATH /usr/local/Qt-6.7.2/bin:$PATH
</db:programlisting>
<db:para>If you plan to use Qt from an IDE, you need to register the Qt version explicitly there. For Qt Creator, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-project-qmake.html">Qt Creator: Adding Qt Versions</db:link>.</db:para>
</db:section>
</db:article>
