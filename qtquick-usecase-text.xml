<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Use Case - Displaying Text In QML</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to display text in QML To display text the Text type is provided by the <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module. For related uses, the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> and <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> types provide editable text controls. For full HTML markup, see the <db:link xlink:href="">Qt WebEngine</db:link> module.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="displaying-and-formatting-text">
<db:title>Displaying and Formatting Text</db:title>
<db:para>To display text in QML, create a Text item and set the text property to the text you wish to display. The Text item will now display that text.</db:para>
<db:para>Several properties can be set on the Text item to style the entire block of text. These include color, font family, font size, bold and italic. For a full list of properties, consult the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> type documentation.</db:para>
<db:para>Rich text like markup can be used to selectively style specific sections of text with a Text item. Set <db:link xlink:href="qml-qtquick-text.xml#textFormat-prop">Text::textFormat</db:link> to Text.StyledText to use this functionality. More details are available in the documentation of the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> type.</db:para>
</db:section>
<db:section xml:id="laying-out-text">
<db:title>Laying Out Text</db:title>
<db:para>By default, Text will display the text as a single line unless it contains embedded newlines. To wrap the line, set the wrapMode property and give the text an explicit width for it to wrap to. If the width or height is not explicitly set, reading these properties will return the parameters of the bounding rect of the text (if you have explicitly set width or height, you can still use paintedWidth and paintedHeight). With these parameters in mind, the Text can be positioned like any other Item.</db:para>
</db:section>
<db:section xml:id="example-code">
<db:title>Example Code</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    id: root
    width: 480
    height: 320

    Rectangle {
        color: &quot;#272822&quot;
        width: 480
        height: 320
    }

    Column {
        spacing: 20

        Text {
            text: 'I am the very model of a modern major general!'

            // color can be set on the entire element with this property
            color: &quot;yellow&quot;

        }

        Text {
            // For text to wrap, a width has to be explicitly provided
            width: root.width

            // This setting makes the text wrap at word boundaries when it goes
            // past the width of the Text object
            wrapMode: Text.WordWrap

            // You can use \ to escape quotation marks, or to add new lines (\n).
            //  Use \\ to get a \ in the string
            text: 'I am the very model of a modern major general. I\'ve information \
                  vegetable, animal and mineral. I know the kings of england and I \
                  quote the fights historical; from Marathon to Waterloo in order categorical.'

            // color can be set on the entire element with this property
            color: &quot;white&quot;

        }

        Text {
            text: 'I am the very model of a modern major general!'

            // color can be set on the entire element with this property
            color: &quot;yellow&quot;

            // font properties can be set effciently on the whole string at once
            font { family: 'Courier'; pixelSize: 20; italic: true; capitalization: Font.SmallCaps }

        }

        Text {
            // HTML like markup can also be used
            text: '&amp;lt;font color=&quot;white&quot;&amp;gt;I am the &amp;lt;b&amp;gt;very&amp;lt;/b&amp;gt; model of a modern &amp;lt;i&amp;gt;major general&amp;lt;/i&amp;gt;!&amp;lt;/font&amp;gt;'

            // This could also be written font { pointSize: 14 }. Both syntaxes are valid.
            font.pointSize: 14

            // StyledText format supports fewer tags, but is more efficient than RichText
            textFormat: Text.StyledText
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-uses-text.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="internationalization-and-scalability">
<db:title>Internationalization and Scalability</db:title>
<db:para>When dealing with texts, applications must take into account various topics such as the device's orientation and the language settings.</db:para>
<db:para>The following pages go into detail about these various topics.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-positioning-righttoleft.xml">Right-to-left User Interfaces</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-internationalization.xml">Internationalization and Localization with Qt Quick</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="scalability.xml">Scalability</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
