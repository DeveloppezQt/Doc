<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextDecoder Class</db:title>
<db:productname>QtCore5Compat</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 5 Core Compatibility APIs Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextdecoder.xml">QTextDecoder</db:link> class provides a state-based decoder.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextDecoder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core5Compat)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core5Compat)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core5compat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextDecoder is part of <db:simplelist><db:member>i18n</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A text decoder converts text from an encoded text format into Unicode using a specific codec.</db:para>
<db:para>The decoder converts text in this format into Unicode, remembering any state that is required between calls.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#makeDecoder">QTextCodec::makeDecoder</db:link>()</db:member>
<db:member><db:link xlink:href="qtextencoder.xml">QTextEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextDecoder-1">
<db:title>[explicit] QTextDecoder::QTextDecoder(const QTextCodec *<db:emphasis>codec</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextDecoder</db:methodname>
<db:methodparam>
<db:type>const QTextCodec *</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDecoder(const QTextCodec *codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a text decoder for the given <db:code role="parameter">codec</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextDecoder-2">
<db:title>[explicit] QTextDecoder::QTextDecoder(const QTextCodec *<db:emphasis>codec</db:emphasis>, QTextCodec::ConversionFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextDecoder</db:methodname>
<db:methodparam>
<db:type>const QTextCodec *</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCodec::ConversionFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDecoder(const QTextCodec *codec, QTextCodec::ConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a text decoder for the given <db:code role="parameter">codec</db:code> and conversion <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTextDecoder">
<db:title>QTextDecoder::~QTextDecoder()</db:title>
<db:destructorsynopsis>
<db:methodname>~QTextDecoder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextDecoder()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the decoder.</db:para>
</db:section>
<db:section xml:id="toUnicode">
<db:title>QString QTextDecoder::toUnicode(const char *<db:emphasis>chars</db:emphasis>, int <db:emphasis>len</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>toUnicode</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>chars</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toUnicode(const char *chars, int len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the first <db:code role="parameter">len</db:code> bytes in <db:code role="parameter">chars</db:code> to Unicode, returning the result.</db:para>
<db:para>If not all characters are used (e.g. if only part of a multi-byte encoding is at the end of the characters), the decoder remembers enough state to continue with the next call to this function.</db:para>
</db:section>
<db:section xml:id="toUnicode-1">
<db:title>QString QTextDecoder::toUnicode(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>toUnicode</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toUnicode(const QByteArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts the bytes in the byte array specified by <db:code role="parameter">ba</db:code> to Unicode and returns the result.</db:para>
</db:section>
<db:section xml:id="toUnicode-2">
<db:title>void QTextDecoder::toUnicode(QString *<db:emphasis>target</db:emphasis>, const char *<db:emphasis>chars</db:emphasis>, int <db:emphasis>len</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>toUnicode</db:methodname>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>chars</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void toUnicode(QString *target, const char *chars, int len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The converted string is returned in <db:code role="parameter">target</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
