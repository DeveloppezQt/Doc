<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>AbstractRayCaster QML Type</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An abstract base class for ray casting in 3d scenes.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt3D.Render 2.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In C++:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qabstractraycaster.xml">QAbstractRayCaster</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qt3d-render-abstractraycaster.xml">AbstractRayCaster</db:link> is an abstract base class for casting rays into a 3d scene. <db:link xlink:href="qml-qt3d-render-abstractraycaster.xml">AbstractRayCaster</db:link> can not be directly instantiated, but rather through its subclasses. QAbstractRayCaster specifies common properties for all ray casters, such as run mode and layer handling, while leaving the actual ray casting details to the subclasses.</db:para>
<db:para>Ray castings differs from picking (using <db:link xlink:href="qml-qt3d-render-objectpicker.xml">ObjectPicker</db:link>) in that it does not require mouse events to trigger.</db:para>
<db:para>By default, the instances of <db:link xlink:href="qml-qt3d-render-abstractraycaster.xml">AbstractRayCaster</db:link> are disabled. When enabled, the specified ray will be tested for intersecting objects at every frame. The <db:link xlink:href="qml-qt3d-render-abstractraycaster.xml">AbstractRayCaster</db:link>.hits property will be updated with the results of the ray casting, even if no objects are found.</db:para>
<db:para>The Qt3D.Render::PickingSettings can be used to control the ray casting, such as which primitives are tested and how the results are returned.</db:para>
<db:para>Furthermore, Qt3D.Render::Layer components can be used to control how entities, or entity sub-graphs, react to ray casting.</db:para>
<db:para>Note: components derived from <db:link xlink:href="qml-qt3d-render-abstractraycaster.xml">AbstractRayCaster</db:link> should not be shared amount multiple entities.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt3d-render-raycaster.xml">Qt3D.Render::RayCaster</db:link></db:member>
<db:member><db:link xlink:href="qml-qt3d-render-screenraycaster.xml">Qt3D.Render::ScreenRayCaster</db:link></db:member>
<db:member><db:link xlink:href="qml-qt3d-render-objectpicker.xml">Qt3D.Render::ObjectPicker</db:link></db:member>
<db:member><db:link xlink:href="qml-qt3d-render-pickingsettings.xml">Qt3D.Render::PickingSettings</db:link></db:member>
<db:member><db:link xlink:href="qml-qt3d-render-nopicking.xml">Qt3D.Render::NoPicking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="filterMode-prop">
<db:title>filterMode : enumeration</db:title>
<db:para>Holds the filter mode specifying the entities to select for ray casting tests.</db:para>
<db:para>The default value is <db:code>AbstractRayCaster.AcceptMatchingLayers</db:code>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>AcceptAnyMatchingLayers</db:para>
</db:td>
<db:td>
<db:para>Accept entities that reference one or more <db:link xlink:href="qml-qt3d-render-layer.xml">Layer</db:link> objects added to this <db:link xlink:href="qml-qt3d-render-abstractraycaster.xml">AbstractRayCaster</db:link>. This is the default</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>AcceptAllMatchingLayers</db:para>
</db:td>
<db:td>
<db:para>Accept entities that reference all the <db:link xlink:href="qml-qt3d-render-layer.xml">Layer</db:link> objects added to this <db:link xlink:href="qml-qt3d-render-abstractraycaster.xml">AbstractRayCaster</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DiscardAnyMatchingLayers</db:para>
</db:td>
<db:td>
<db:para>Discard entities that reference one or more <db:link xlink:href="qml-qt3d-render-layer.xml">Layer</db:link> objects added to this <db:link xlink:href="qml-qt3d-render-abstractraycaster.xml">AbstractRayCaster</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DiscardAllMatchingLayers</db:para>
</db:td>
<db:td>
<db:para>Discard entities that reference all <db:link xlink:href="qml-qt3d-render-layer.xml">Layer</db:link> objects added to this <db:link xlink:href="qml-qt3d-render-abstractraycaster.xml">AbstractRayCaster</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="hits-prop">
<db:title>[read-only] hits : array</db:title>
<db:para>Holds the results of last ray casting test as an array of javascript objects. The fields defined on the objects are defined below.</db:para>
<db:programlisting language="cpp">{
    type // enum value of RayCasterHit.HitType
    entity // entity that was intersected
    distance // distance from ray origin to intersection
    localIntersection.x: // coordinate of intersection in the entity's coordinate system
    localIntersection.y
    localIntersection.z
    worldIntersection.x // coordinate of intersection in the model's coordinate system
    worldIntersection.y
    worldIntersection.z
    primitiveIndex // index of the primitive (triangle, line, point) that was intersected;
                   // (undefined if the picking mode is set to bounding volume)
    vertex1Index // index of the first point of the triangle or line that was intersected
                 // (undefined if the picking mode is set to bounding volume or points)
    vertex2Index // index of the second point of the triangle or line that was intersected
                 // (undefined if the picking mode is set to bounding volume or points)
    vertex3Index // index of the second point of the triangle that was intersected
                 // (undefined if the picking mode is set to bounding volume, points or lines)
}
</db:programlisting>
<db:para>Note that even if successive tests return the exact same results (or empty results), a change notification will be emitted at every test.</db:para>
</db:section>
<db:section xml:id="runMode-prop">
<db:title>runMode : enumeration</db:title>
<db:para>Holds the run mode controlling how often ray casting tests are performed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Continuous</db:para>
</db:td>
<db:td>
<db:para>Ray casting is performed at every frame as long as the component is enabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SingleShot</db:para>
</db:td>
<db:td>
<db:para>Ray casting is done once then the component disables itself. This is the default</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
</db:article>
