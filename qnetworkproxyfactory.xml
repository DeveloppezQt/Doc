<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkProxyFactory Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link> class provides fine-grained proxy selection.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkProxyFactory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkProxyFactory is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link> is an extension to <db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link>, allowing applications to have a more fine-grained control over which proxy servers are used, depending on the socket requesting the proxy. This allows an application to apply different settings, according to the protocol or destination hostname, for instance.</db:para>
<db:para><db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link> can be set globally for an application, in which case it will override any global proxies set with <db:link xlink:href="qnetworkproxy.xml#setApplicationProxy">QNetworkProxy::setApplicationProxy</db:link>(). If set globally, any sockets created with Qt will query the factory to determine the proxy to be used.</db:para>
<db:para>A factory can also be set in certain frameworks that support multiple connections, such as <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>. When set on such object, the factory will be queried for sockets created by that framework only.</db:para>
<db:section xml:id="system-proxies">
<db:title>System Proxies</db:title>
<db:para>You can configure a factory to use the system proxy's settings. Call the <db:link xlink:href="qnetworkproxyfactory.xml#setUseSystemConfiguration">setUseSystemConfiguration</db:link>() function with true to enable this behavior, or false to disable it.</db:para>
<db:para>Similarly, you can use a factory to make queries directly to the system proxy by calling its <db:link xlink:href="qnetworkproxyfactory.xml#systemProxyForQuery">systemProxyForQuery</db:link>() function.</db:para>
<db:warning>
<db:para>Depending on the configuration of the user's system, the use of system proxy features on certain platforms may be subject to limitations. The <db:link xlink:href="qnetworkproxyfactory.xml#systemProxyForQuery">systemProxyForQuery</db:link>() documentation contains a list of these limitations for those platforms that are affected.</db:para>
</db:warning>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkProxyFactory">
<db:title>QNetworkProxyFactory::QNetworkProxyFactory()</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkProxyFactory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkProxyFactory()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link> object.</db:para>
<db:para>Since <db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link> is an abstract class, you cannot create objects of type <db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link> directly.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkProxyFactory">
<db:title>[virtual] QNetworkProxyFactory::~QNetworkProxyFactory()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QNetworkProxyFactory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNetworkProxyFactory()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link> object.</db:para>
</db:section>
<db:section xml:id="proxyForQuery">
<db:title>[static] QList&lt;QNetworkProxy&gt; QNetworkProxyFactory::proxyForQuery(const QNetworkProxyQuery &amp;<db:emphasis>query</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QNetworkProxy&gt;</db:type>
<db:methodname>proxyForQuery</db:methodname>
<db:methodparam>
<db:type>const QNetworkProxyQuery &amp;</db:type>
<db:parameter>query</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QNetworkProxy&gt; proxyForQuery(const QNetworkProxyQuery &amp;query)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function takes the query request, <db:code role="parameter">query</db:code>, examines the details of the type of socket or request and returns a list of <db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link> objects that indicate the proxy servers to be used, in order of preference.</db:para>
</db:section>
<db:section xml:id="queryProxy">
<db:title>[pure virtual] QList&lt;QNetworkProxy&gt; QNetworkProxyFactory::queryProxy(const QNetworkProxyQuery &amp;<db:emphasis>query</db:emphasis> = QNetworkProxyQuery())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QList&lt;QNetworkProxy&gt;</db:type>
<db:methodname>queryProxy</db:methodname>
<db:methodparam>
<db:type>const QNetworkProxyQuery &amp;</db:type>
<db:parameter>query</db:parameter>
<db:initializer>QNetworkProxyQuery()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QNetworkProxy&gt; queryProxy(const QNetworkProxyQuery &amp;query) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function takes the query request, <db:code role="parameter">query</db:code>, examines the details of the type of socket or request and returns a list of <db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link> objects that indicate the proxy servers to be used, in order of preference.</db:para>
<db:para>When reimplementing this class, take care to return at least one element.</db:para>
<db:para>If you cannot determine a better proxy alternative, use <db:link xlink:href="qnetworkproxy.xml#ProxyType-enum">QNetworkProxy::DefaultProxy</db:link>, which tells the code querying for a proxy to use a higher alternative. For example, if this factory is set to a <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> object, DefaultProxy will tell it to query the application-level proxy settings.</db:para>
<db:para>If this factory is set as the application proxy factory, DefaultProxy and NoProxy will have the same meaning.</db:para>
</db:section>
<db:section xml:id="setApplicationProxyFactory">
<db:title>[static] void QNetworkProxyFactory::setApplicationProxyFactory(QNetworkProxyFactory *<db:emphasis>factory</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setApplicationProxyFactory</db:methodname>
<db:methodparam>
<db:type>QNetworkProxyFactory *</db:type>
<db:parameter>factory</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setApplicationProxyFactory(QNetworkProxyFactory *factory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the application-wide proxy factory to be <db:code role="parameter">factory</db:code>. This function will take ownership of that object and will delete it when necessary.</db:para>
<db:para>The application-wide proxy is used as a last-resort when all other proxy selection requests returned <db:link xlink:href="qnetworkproxy.xml#ProxyType-enum">QNetworkProxy::DefaultProxy</db:link>. For example, <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> objects can have a proxy set with QTcpSocket::setProxy, but if none is set, the proxy factory class set with this function will be queried.</db:para>
<db:para>If you set a proxy factory with this function, any application level proxies set with <db:link xlink:href="qnetworkproxy.xml#setApplicationProxy">QNetworkProxy::setApplicationProxy</db:link> will be overridden, and <db:link xlink:href="qnetworkproxyfactory.xml#usesSystemConfiguration">usesSystemConfiguration</db:link>() will return false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxy.xml#setApplicationProxy">QNetworkProxy::setApplicationProxy</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractsocket.xml#proxy">QAbstractSocket::proxy</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractsocket.xml#setProxy">QAbstractSocket::setProxy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUseSystemConfiguration">
<db:title>[static, since 4.6] void QNetworkProxyFactory::setUseSystemConfiguration(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setUseSystemConfiguration</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUseSystemConfiguration(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables the use of the platform-specific proxy settings, and only those. See <db:link xlink:href="qnetworkproxyfactory.xml#systemProxyForQuery">systemProxyForQuery</db:link>() for more information.</db:para>
<db:para>Calling this function with <db:code role="parameter">enable</db:code> set to true resets any proxy or <db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link> that is already set.</db:para>
<db:note>
<db:para>See the <db:link xlink:href="qnetworkproxyfactory.xml#systemProxyForQuery">systemProxyForQuery</db:link>() documentation for a list of limitations related to the use of system proxies.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="systemProxyForQuery">
<db:title>[static] QList&lt;QNetworkProxy&gt; QNetworkProxyFactory::systemProxyForQuery(const QNetworkProxyQuery &amp;<db:emphasis>query</db:emphasis> = QNetworkProxyQuery())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QNetworkProxy&gt;</db:type>
<db:methodname>systemProxyForQuery</db:methodname>
<db:methodparam>
<db:type>const QNetworkProxyQuery &amp;</db:type>
<db:parameter>query</db:parameter>
<db:initializer>QNetworkProxyQuery()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QNetworkProxy&gt; systemProxyForQuery(const QNetworkProxyQuery &amp;query)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function takes the query request, <db:code role="parameter">query</db:code>, examines the details of the type of socket or request and returns a list of <db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link> objects that indicate the proxy servers to be used, in order of preference.</db:para>
<db:para>This function can be used to determine the platform-specific proxy settings. This function will use the libraries provided by the operating system to determine the proxy for a given connection, if such libraries exist. If they don't, this function will just return a <db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link> of type <db:link xlink:href="qnetworkproxy.xml#ProxyType-enum">QNetworkProxy::NoProxy</db:link>.</db:para>
<db:para>On Windows, this function will use the WinHTTP DLL functions. Despite its name, Microsoft suggests using it for all applications that require network connections, not just HTTP. This will respect the proxy settings set on the registry with the proxycfg.exe tool. If those settings are not found, this function will attempt to obtain Internet Explorer's settings and use them.</db:para>
<db:para>On macOS, this function will obtain the proxy settings using the SystemConfiguration framework from Apple. It will apply the FTP, HTTP and HTTPS proxy configurations for queries that contain the protocol tag &quot;ftp&quot;, &quot;http&quot; and &quot;https&quot;, respectively. If the SOCKS proxy is enabled in that configuration, this function will use the SOCKS server for all queries. If SOCKS isn't enabled, it will use the HTTPS proxy for all TcpSocket and UrlRequest queries.</db:para>
<db:para>On other systems, this function will pick up proxy settings from the &quot;http_proxy&quot; environment variable. This variable must be a URL using one of the following schemes: &quot;http&quot;, &quot;socks5&quot; or &quot;socks5h&quot;.</db:para>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:para>These are the limitations for the current version of this function. Future versions of Qt may lift some of the limitations listed here.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>On macOS, this function will ignore the Proxy Auto Configuration settings, since it cannot execute the associated ECMAScript code.</db:para>
</db:listitem>
<db:listitem>
<db:para>On Windows platforms, this function may take several seconds to execute depending on the configuration of the user's system.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>Notes</db:title>
</db:section>
</db:section>
<db:section xml:id="usesSystemConfiguration">
<db:title>[static, since 5.8] bool QNetworkProxyFactory::usesSystemConfiguration()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>usesSystemConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool usesSystemConfiguration()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the use of platform-specific proxy settings are enabled.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
</db:section>
</db:article>
