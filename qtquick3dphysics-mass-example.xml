<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics - Mass Example</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates different ways of setting mass and inertia of a body.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mass-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates three different ways of setting up the mass and inertia of a body. The scene consists of three bodies that consist of three spheres stacked vertically. These bodies all have the same mass but differing centers of mass and inertia tensors giving them different behavior when colliding.</db:para>
<db:section xml:id="setup">
<db:title>Setup</db:title>
<db:para>We first add our <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml">PhysicsWorld</db:link>:</db:para>
<db:programlisting language="qml">PhysicsWorld {
    running: true
    gravity: Qt.vector3d(0, -9.81, 0)
    typicalLength: 1
    typicalSpeed: 10
    scene: viewport.scene
}
</db:programlisting>
<db:para>We do the usual setup where we have an environment, camera and lights:</db:para>
<db:programlisting language="qml">environment: SceneEnvironment {
    clearColor: &quot;lightblue&quot;
    backgroundMode: SceneEnvironment.Color
}

PerspectiveCamera {
    id: camera
    position: Qt.vector3d(0, 2, 5)
    eulerRotation: Qt.vector3d(-10, 0, 0)
    clipFar: 100
    clipNear: 0.01
}

DirectionalLight {
    eulerRotation.x: -45
    eulerRotation.y: 45
    castsShadow: true
    brightness: 1
    shadowFactor: 100
}
</db:programlisting>
</db:section>
<db:section xml:id="physical-objects">
<db:title>Physical objects</db:title>
<db:para>We have our regular static plane:</db:para>
<db:programlisting language="qml">StaticRigidBody {
    position: Qt.vector3d(0, 0, 0)
    eulerRotation: Qt.vector3d(-90, 0, 0)
    collisionShapes: PlaneShape {}
    Model {
        source: &quot;#Rectangle&quot;
        materials: DefaultMaterial {
            diffuseColor: &quot;green&quot;
        }
        castsShadows: false
        receivesShadows: true
    }
}
</db:programlisting>
<db:para>We define a custom QML class for our body which we call RolyPoly since they behave like so called roly-poly toys. The RolyPoly is a <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> with three spherical collision shapes:</db:para>
<db:programlisting language="qml">DynamicRigidBody {
    property string color: &quot;blue&quot;

    collisionShapes: [
        SphereShape {
            id: sphere0
            diameter:  1
        },
        SphereShape {
            id: sphere1
            diameter:  0.8
            position: Qt.vector3d(0, 0.6, 0)
        },
        SphereShape {
            id: sphere2
            diameter:  0.6
            position: Qt.vector3d(0, 1.1, 0)
        }
    ]

    Model {
        source: &quot;#Sphere&quot;
        position: sphere0.position
        scale: Qt.vector3d(1,1,1).times(sphere0.diameter*0.01)
        materials: PrincipledMaterial {
            baseColor: color
        }
    }

    Model {
        source: &quot;#Sphere&quot;
        position: sphere1.position
        scale: Qt.vector3d(1,1,1).times(sphere1.diameter*0.01)
        materials: PrincipledMaterial {
            baseColor: color
        }
    }

    Model {
        source: &quot;#Sphere&quot;
        position: sphere2.position
        scale: Qt.vector3d(1,1,1).times(sphere2.diameter*0.01)
        materials: PrincipledMaterial {
            baseColor: color
        }
    }
}
</db:programlisting>
<db:para>We then add three roly-polys to our scene:</db:para>
<db:programlisting language="qml">RolyPoly {
    position: Qt.vector3d(-2, 0.5, 0)
    color: &quot;blue&quot;

    mass: 0.9
    centerOfMassPosition: Qt.vector3d(0, -0.5, 0)
    inertiaTensor: Qt.vector3d(0.217011, 0.0735887, 0.217011)
    massMode: DynamicRigidBody.MassAndInertiaTensor
}

RolyPoly {
    position: Qt.vector3d(0, 0.5, 0)
    color: &quot;purple&quot;

    mass: 0.9
    centerOfMassPosition: Qt.vector3d(0, -0.5, 0)
    inertiaTensor: Qt.vector3d(0.05, 100, 100)
    massMode: DynamicRigidBody.MassAndInertiaTensor
}

RolyPoly {
    position: Qt.vector3d(2, 0.5, 0)
    color: &quot;red&quot;

    mass: 0.9
    massMode: DynamicRigidBody.Mass
}
</db:programlisting>
<db:para>The purple and blue roly-poly has a custom center of mass and inertia tensor. Since bodies use uniform density by default and will calculate mass and inertia automatically we set massMode to <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link>.MassAndInertiaTensor in our purple and blue bodies to use our provided mass and inertia tensors instead. The lower center of mass will make it so the bodies will always stand up after being pushed over. The inertia tensor of the purple body makes it so it will wobble easily in one direction but hardly in the other. The red body has an automatically calculated center of mass and will therefore keep lying down after being knocked over.</db:para>
<db:section xml:id="shooting-balls">
<db:title>Shooting balls</db:title>
<db:para>To test out the behavior of the different bodies we add a Node for shooting balls:</db:para>
<db:programlisting language="qml">Node {
    id: shapeSpawner
    property var spheres: []
    property var sphereComponent: Qt.createComponent(&quot;Sphere.qml&quot;)

    function createBall(position, forward) {
        let diameter = 0.2
        let speed = 20
        let sphere = sphereComponent.createObject(shapeSpawner, {
                                                      &quot;position&quot;: position,
                                                      &quot;sphereDiameter&quot;: diameter
                                                  })
        sphere.setLinearVelocity(forward.times(speed))

        var pair = {
            &quot;sphere&quot;: sphere,
            &quot;date&quot;: Date.now()
        }

        spheres.push(pair)

        if (sphere === null) {
            console.log(&quot;Error creating object&quot;)
        }
    }

    function clean() {
        spheres = spheres.filter(sphere =&amp;gt; {
            let diff = Date.now() - sphere['date'];
            if (diff &amp;gt; 5000) {
                sphere['sphere'].destroy();
                return false;
            }
            return true;
        });
    }

    Timer {
        interval: 200
        running: true
        repeat: true
        onTriggered: shapeSpawner.clean()
    }
}
</db:programlisting>
<db:para>We then add a <db:link xlink:href="qml-qtquick3d-helpers-wasdcontroller.xml">WasdController</db:link> to be able to move the camera and aim and shoot balls at the bodies:</db:para>
<db:programlisting language="qml">WasdController {
    speed: 0.01
    controlledObject: camera
    Keys.onPressed: (event) =&amp;gt; {
        handleKeyPress(event);
        if (event.key === Qt.Key_Space) {
            shapeSpawner.createBall(camera.position, camera.forward);
        }
    }
    Keys.onReleased: (event) =&amp;gt; { handleKeyRelease(event) }
}
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="mass/CMakeLists.txt">mass/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mass/RolyPoly.qml">mass/RolyPoly.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mass/Sphere.qml">mass/Sphere.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mass/main.cpp">mass/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mass/main.qml">mass/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mass/mass.pro">mass/mass.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mass/qml.qrc">mass/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
