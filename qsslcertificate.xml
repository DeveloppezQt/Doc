<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSslCertificate Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link> class provides a convenient API for an X509 certificate.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSslCertificate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSslCertificate is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>ssl</db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link> stores an X509 certificate, and is commonly used to verify the identity and store information about the local host, a remotely connected peer, or a trusted third party Certificate Authority.</db:para>
<db:para>There are many ways to construct a <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link>. The most common way is to call <db:link xlink:href="qsslsocket.xml#peerCertificate">QSslSocket::peerCertificate</db:link>(), which returns a <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link> object, or <db:link xlink:href="qsslsocket.xml#peerCertificateChain">QSslSocket::peerCertificateChain</db:link>(), which returns a list of them. You can also load certificates from a DER (binary) or PEM (Base64) encoded bundle, typically stored as one or more local files, or in a Qt Resource.</db:para>
<db:para>You can call <db:link xlink:href="qsslcertificate.xml#isNull">isNull</db:link>() to check if your certificate is null. By default, <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link> constructs a null certificate. A null certificate is invalid, but an invalid certificate is not necessarily null. If you want to reset all contents in a certificate, call <db:link xlink:href="qsslcertificate.xml#clear">clear</db:link>().</db:para>
<db:para>After loading a certificate, you can find information about the certificate, its subject, and its issuer, by calling one of the many accessor functions, including <db:link xlink:href="qsslcertificate.xml#version">version</db:link>(), <db:link xlink:href="qsslcertificate.xml#serialNumber">serialNumber</db:link>(), <db:link xlink:href="qsslcertificate.xml#issuerInfo">issuerInfo</db:link>() and <db:link xlink:href="qsslcertificate.xml#subjectInfo">subjectInfo</db:link>(). You can call <db:link xlink:href="qsslcertificate.xml#effectiveDate">effectiveDate</db:link>() and <db:link xlink:href="qsslcertificate.xml#expiryDate">expiryDate</db:link>() to check when the certificate starts being effective and when it expires. The <db:link xlink:href="qsslcertificate.xml#publicKey">publicKey</db:link>() function returns the certificate subject's public key as a <db:link xlink:href="qsslkey.xml">QSslKey</db:link>. You can call <db:link xlink:href="qsslcertificate.xml#issuerInfo">issuerInfo</db:link>() or <db:link xlink:href="qsslcertificate.xml#subjectInfo">subjectInfo</db:link>() to get detailed information about the certificate issuer and its subject.</db:para>
<db:para>Internally, <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link> is stored as an X509 structure. You can access this handle by calling <db:link xlink:href="qsslcertificate.xml#handle">handle</db:link>(), but the results are likely to not be portable.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslsocket.xml">QSslSocket</db:link></db:member>
<db:member><db:link xlink:href="qsslkey.xml">QSslKey</db:link></db:member>
<db:member><db:link xlink:href="qsslcipher.xml">QSslCipher</db:link></db:member>
<db:member><db:link xlink:href="qsslerror.xml">QSslError</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PatternSyntax-enum">
<db:title>[since 5.15] enum QSslCertificate::PatternSyntax</db:title>
<db:enumsynopsis>
<db:enumname>PatternSyntax</db:enumname>
<db:enumitem>
<db:enumidentifier>RegularExpression</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Wildcard</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FixedString</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The syntax used to interpret the meaning of the pattern.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::<db:emphasis role="bold">PatternSyntax</db:emphasis>::RegularExpression</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A rich Perl-like pattern matching syntax.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::<db:emphasis role="bold">PatternSyntax</db:emphasis>::Wildcard</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This provides a simple pattern matching syntax similar to that used by shells (command interpreters) for &quot;file globbing&quot;. See <db:link xlink:href="qregularexpression.xml#fromWildcard">QRegularExpression::fromWildcard</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::<db:emphasis role="bold">PatternSyntax</db:emphasis>::FixedString</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The pattern is a fixed string. This is equivalent to using the RegularExpression pattern on a string in which all metacharacters are escaped using escape(). This is the default.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="SubjectInfo-enum">
<db:title>enum QSslCertificate::SubjectInfo</db:title>
<db:enumsynopsis>
<db:enumname>SubjectInfo</db:enumname>
<db:enumitem>
<db:enumidentifier>Organization</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CommonName</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocalityName</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OrganizationalUnitName</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CountryName</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StateOrProvinceName</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DistinguishedNameQualifier</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SerialNumber</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EmailAddress</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes keys that you can pass to <db:link xlink:href="qsslcertificate.xml#issuerInfo">QSslCertificate::issuerInfo</db:link>() or <db:link xlink:href="qsslcertificate.xml#subjectInfo">QSslCertificate::subjectInfo</db:link>() to get information about the certificate issuer or subject.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::Organization</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>&quot;O&quot; The name of the organization.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::CommonName</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>&quot;CN&quot; The common name; most often this is used to store the host name.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::LocalityName</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>&quot;L&quot; The locality.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::OrganizationalUnitName</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>&quot;OU&quot; The organizational unit name.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::CountryName</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>&quot;C&quot; The country.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::StateOrProvinceName</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>&quot;ST&quot; The state or province.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::DistinguishedNameQualifier</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The distinguished name qualifier</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::SerialNumber</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The certificate's serial number</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:emphasis>::EmailAddress</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The email address associated with the certificate</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSslCertificate">
<db:title>[explicit] QSslCertificate::QSslCertificate(QIODevice *<db:emphasis>device</db:emphasis>, QSsl::EncodingFormat <db:emphasis>format</db:emphasis> = QSsl::Pem)</db:title>
<db:constructorsynopsis>
<db:methodname>QSslCertificate</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::EncodingFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QSsl::Pem</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslCertificate(QIODevice *device, QSsl::EncodingFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link> by reading <db:code role="parameter">format</db:code> encoded data from <db:code role="parameter">device</db:code> and using the first certificate found. You can later call <db:link xlink:href="qsslcertificate.xml#isNull">isNull</db:link>() to see if <db:code role="parameter">device</db:code> contained a certificate, and if this certificate was loaded successfully.</db:para>
</db:section>
<db:section xml:id="QSslCertificate-1">
<db:title>[explicit] QSslCertificate::QSslCertificate(const QByteArray &amp;<db:emphasis>data</db:emphasis> = QByteArray(), QSsl::EncodingFormat <db:emphasis>format</db:emphasis> = QSsl::Pem)</db:title>
<db:constructorsynopsis>
<db:methodname>QSslCertificate</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::EncodingFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QSsl::Pem</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslCertificate(const QByteArray &amp;data, QSsl::EncodingFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link> by parsing the <db:code role="parameter">format</db:code> encoded <db:code role="parameter">data</db:code> and using the first available certificate found. You can later call <db:link xlink:href="qsslcertificate.xml#isNull">isNull</db:link>() to see if <db:code role="parameter">data</db:code> contained a certificate, and if this certificate was loaded successfully.</db:para>
</db:section>
<db:section xml:id="QSslCertificate-2">
<db:title>QSslCertificate::QSslCertificate(const QSslCertificate &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSslCertificate</db:methodname>
<db:methodparam>
<db:type>const QSslCertificate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslCertificate(const QSslCertificate &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an identical copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSslCertificate">
<db:title>QSslCertificate::~QSslCertificate()</db:title>
<db:destructorsynopsis>
<db:methodname>~QSslCertificate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSslCertificate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QSslCertificate::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the contents of this certificate, making it a null certificate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="digest">
<db:title>QByteArray QSslCertificate::digest(QCryptographicHash::Algorithm <db:emphasis>algorithm</db:emphasis> = QCryptographicHash::Md5) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>digest</db:methodname>
<db:methodparam>
<db:type>QCryptographicHash::Algorithm</db:type>
<db:parameter>algorithm</db:parameter>
<db:initializer>QCryptographicHash::Md5</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray digest(QCryptographicHash::Algorithm algorithm) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a cryptographic digest of this certificate. By default, an MD5 digest will be generated, but you can also specify a custom <db:code role="parameter">algorithm</db:code>.</db:para>
</db:section>
<db:section xml:id="effectiveDate">
<db:title>QDateTime QSslCertificate::effectiveDate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>effectiveDate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime effectiveDate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the date-time that the certificate becomes valid, or an empty <db:link xlink:href="qdatetime.xml">QDateTime</db:link> if this is a null certificate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#expiryDate">expiryDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expiryDate">
<db:title>QDateTime QSslCertificate::expiryDate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>expiryDate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime expiryDate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the date-time that the certificate expires, or an empty <db:link xlink:href="qdatetime.xml">QDateTime</db:link> if this is a null certificate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#effectiveDate">effectiveDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extensions">
<db:title>[since 5.0] QList&lt;QSslCertificateExtension&gt; QSslCertificate::extensions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QSslCertificateExtension&gt;</db:type>
<db:methodname>extensions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QSslCertificateExtension&gt; extensions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list containing the X509 extensions of this certificate.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="fromData">
<db:title>[static] QList&lt;QSslCertificate&gt; QSslCertificate::fromData(const QByteArray &amp;<db:emphasis>data</db:emphasis>, QSsl::EncodingFormat <db:emphasis>format</db:emphasis> = QSsl::Pem)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QSslCertificate&gt;</db:type>
<db:methodname>fromData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::EncodingFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QSsl::Pem</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QSslCertificate&gt; fromData(const QByteArray &amp;data, QSsl::EncodingFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for and parses all certificates in <db:code role="parameter">data</db:code> that are encoded in the specified <db:code role="parameter">format</db:code> and returns them in a list of certificates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#fromDevice">fromDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromDevice">
<db:title>[static] QList&lt;QSslCertificate&gt; QSslCertificate::fromDevice(QIODevice *<db:emphasis>device</db:emphasis>, QSsl::EncodingFormat <db:emphasis>format</db:emphasis> = QSsl::Pem)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QSslCertificate&gt;</db:type>
<db:methodname>fromDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::EncodingFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QSsl::Pem</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QSslCertificate&gt; fromDevice(QIODevice *device, QSsl::EncodingFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for and parses all certificates in <db:code role="parameter">device</db:code> that are encoded in the specified <db:code role="parameter">format</db:code> and returns them in a list of certificates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#fromData">fromData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromPath">
<db:title>[static, since 5.15] QList&lt;QSslCertificate&gt; QSslCertificate::fromPath(const QString &amp;<db:emphasis>path</db:emphasis>, QSsl::EncodingFormat <db:emphasis>format</db:emphasis> = QSsl::Pem, QSslCertificate::PatternSyntax <db:emphasis>syntax</db:emphasis> = PatternSyntax::FixedString)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QSslCertificate&gt;</db:type>
<db:methodname>fromPath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::EncodingFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QSsl::Pem</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QSslCertificate::PatternSyntax</db:type>
<db:parameter>syntax</db:parameter>
<db:initializer>PatternSyntax::FixedString</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QSslCertificate&gt; fromPath(const QString &amp;path, QSsl::EncodingFormat format, QSslCertificate::PatternSyntax syntax)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches all files in the <db:code role="parameter">path</db:code> for certificates encoded in the specified <db:code role="parameter">format</db:code> and returns them in a list. <db:code role="parameter">path</db:code> must be a file or a pattern matching one or more files, as specified by <db:code role="parameter">syntax</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">const auto certs = QSslCertificate::fromPath(&quot;C:/ssl/certificate.*.pem&quot;,
                                             QSsl::Pem, QSslCertificate::Wildcard);
for (const QSslCertificate &amp;amp;cert : certs) {
    qDebug() &amp;lt;&amp;lt; cert.issuerInfo(QSslCertificate::Organization);
}
</db:programlisting>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#fromData">fromData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handle">
<db:title>Qt::HANDLE QSslCertificate::handle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::HANDLE</db:type>
<db:methodname>handle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::HANDLE handle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the native certificate handle, if there is one, else nullptr.</db:para>
<db:para>You can use this handle, together with the native API, to access extended information about the certificate.</db:para>
<db:warning>
<db:para>Use of this function has a high probability of being non-portable, and its return value may vary from platform to platform or change from minor release to minor release.</db:para>
</db:warning>
</db:section>
<db:section xml:id="importPkcs12">
<db:title>[static, since 5.4] bool QSslCertificate::importPkcs12(QIODevice *<db:emphasis>device</db:emphasis>, QSslKey *<db:emphasis>key</db:emphasis>, QSslCertificate *<db:emphasis>certificate</db:emphasis>, QList&lt;QSslCertificate&gt; *<db:emphasis>caCertificates</db:emphasis> = nullptr, const QByteArray &amp;<db:emphasis>passPhrase</db:emphasis> = QByteArray())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>importPkcs12</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSslKey *</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSslCertificate *</db:type>
<db:parameter>certificate</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QList&lt;QSslCertificate&gt; *</db:type>
<db:parameter>caCertificates</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>passPhrase</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool importPkcs12(QIODevice *device, QSslKey *key, QSslCertificate *certificate, QList&lt;QSslCertificate&gt; *caCertificates, const QByteArray &amp;passPhrase)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Imports a PKCS#12 (pfx) file from the specified <db:code role="parameter">device</db:code>. A PKCS#12 file is a bundle that can contain a number of certificates and keys. This method reads a single <db:code role="parameter">key</db:code>, its <db:code role="parameter">certificate</db:code> and any associated <db:code role="parameter">caCertificates</db:code> from the bundle. If a <db:code role="parameter">passPhrase</db:code> is specified then this will be used to decrypt the bundle. Returns true if the PKCS#12 file was successfully loaded.</db:para>
<db:note>
<db:para>The <db:code role="parameter">device</db:code> must be open and ready to be read from.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="isBlacklisted">
<db:title>bool QSslCertificate::isBlacklisted() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBlacklisted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBlacklisted() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this certificate is blacklisted; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QSslCertificate::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this is a null certificate (i.e., a certificate with no contents); otherwise returns false.</db:para>
<db:para>By default, <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link> constructs a null certificate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSelfSigned">
<db:title>[since 5.4] bool QSslCertificate::isSelfSigned() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSelfSigned</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSelfSigned() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this certificate is self signed; otherwise returns false.</db:para>
<db:para>A certificate is considered self-signed its issuer and subject are identical.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="issuerDisplayName">
<db:title>[since 5.12] QString QSslCertificate::issuerDisplayName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>issuerDisplayName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString issuerDisplayName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a name that describes the issuer. It returns the <db:link xlink:href="qsslcertificate.xml#SubjectInfo-enum">QSslCertificate::CommonName</db:link> if available, otherwise falls back to the first <db:link xlink:href="qsslcertificate.xml#SubjectInfo-enum">QSslCertificate::Organization</db:link> or the first <db:link xlink:href="qsslcertificate.xml#SubjectInfo-enum">QSslCertificate::OrganizationalUnitName</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#issuerInfo">issuerInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="issuerInfo">
<db:title>QStringList QSslCertificate::issuerInfo(QSslCertificate::SubjectInfo <db:emphasis>subject</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>issuerInfo</db:methodname>
<db:methodparam>
<db:type>QSslCertificate::SubjectInfo</db:type>
<db:parameter>subject</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList issuerInfo(QSslCertificate::SubjectInfo subject) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the issuer information for the <db:code role="parameter">subject</db:code> from the certificate, or an empty list if there is no information for <db:code role="parameter">subject</db:code> in the certificate. There can be more than one entry of each type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#subjectInfo">subjectInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="issuerInfo-1">
<db:title>QStringList QSslCertificate::issuerInfo(const QByteArray &amp;<db:emphasis>attribute</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>issuerInfo</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>attribute</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList issuerInfo(const QByteArray &amp;attribute) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the issuer information for <db:code role="parameter">attribute</db:code> from the certificate, or an empty list if there is no information for <db:code role="parameter">attribute</db:code> in the certificate. There can be more than one entry for an attribute.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#subjectInfo">subjectInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="issuerInfoAttributes">
<db:title>[since 5.0] QList&lt;QByteArray&gt; QSslCertificate::issuerInfoAttributes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>issuerInfoAttributes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; issuerInfoAttributes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the attributes that have values in the issuer information of this certificate. The information associated with a given attribute can be accessed using the <db:link xlink:href="qsslcertificate.xml#issuerInfo">issuerInfo</db:link>() method. Note that this list may include the OIDs for any elements that are not known by the SSL backend.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#subjectInfo">subjectInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="publicKey">
<db:title>QSslKey QSslCertificate::publicKey() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSslKey</db:type>
<db:methodname>publicKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslKey publicKey() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the certificate subject's public key.</db:para>
</db:section>
<db:section xml:id="serialNumber">
<db:title>QByteArray QSslCertificate::serialNumber() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>serialNumber</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray serialNumber() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the certificate's serial number string in hexadecimal format.</db:para>
</db:section>
<db:section xml:id="subjectAlternativeNames">
<db:title>QMultiMap&lt;QSsl::AlternativeNameEntryType, QString&gt; QSslCertificate::subjectAlternativeNames() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap&lt;QSsl::AlternativeNameEntryType, QString&gt;</db:type>
<db:methodname>subjectAlternativeNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap&lt;QSsl::AlternativeNameEntryType, QString&gt; subjectAlternativeNames() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of alternative subject names for this certificate. The alternative names typically contain host names, optionally with wildcards, that are valid for this certificate.</db:para>
<db:para>These names are tested against the connected peer's host name, if either the subject information for <db:link xlink:href="qsslcertificate.xml#SubjectInfo-enum">CommonName</db:link> doesn't define a valid host name, or the subject info name doesn't match the peer's host name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#subjectInfo">subjectInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subjectDisplayName">
<db:title>[since 5.12] QString QSslCertificate::subjectDisplayName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>subjectDisplayName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString subjectDisplayName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a name that describes the subject. It returns the <db:link xlink:href="qsslcertificate.xml#SubjectInfo-enum">QSslCertificate::CommonName</db:link> if available, otherwise falls back to the first <db:link xlink:href="qsslcertificate.xml#SubjectInfo-enum">QSslCertificate::Organization</db:link> or the first <db:link xlink:href="qsslcertificate.xml#SubjectInfo-enum">QSslCertificate::OrganizationalUnitName</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#subjectInfo">subjectInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subjectInfo">
<db:title>QStringList QSslCertificate::subjectInfo(QSslCertificate::SubjectInfo <db:emphasis>subject</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>subjectInfo</db:methodname>
<db:methodparam>
<db:type>QSslCertificate::SubjectInfo</db:type>
<db:parameter>subject</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList subjectInfo(QSslCertificate::SubjectInfo subject) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the information for the <db:code role="parameter">subject</db:code>, or an empty list if there is no information for <db:code role="parameter">subject</db:code> in the certificate. There can be more than one entry of each type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#issuerInfo">issuerInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subjectInfo-1">
<db:title>QStringList QSslCertificate::subjectInfo(const QByteArray &amp;<db:emphasis>attribute</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>subjectInfo</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>attribute</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList subjectInfo(const QByteArray &amp;attribute) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the subject information for <db:code role="parameter">attribute</db:code>, or an empty list if there is no information for <db:code role="parameter">attribute</db:code> in the certificate. There can be more than one entry for an attribute.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#issuerInfo">issuerInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subjectInfoAttributes">
<db:title>[since 5.0] QList&lt;QByteArray&gt; QSslCertificate::subjectInfoAttributes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>subjectInfoAttributes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; subjectInfoAttributes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the attributes that have values in the subject information of this certificate. The information associated with a given attribute can be accessed using the <db:link xlink:href="qsslcertificate.xml#subjectInfo">subjectInfo</db:link>() method. Note that this list may include the OIDs for any elements that are not known by the SSL backend.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#subjectInfo">subjectInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QSslCertificate::swap(QSslCertificate &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QSslCertificate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QSslCertificate &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this certificate instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="toDer">
<db:title>QByteArray QSslCertificate::toDer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toDer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toDer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this certificate converted to a DER (binary) encoded representation.</db:para>
</db:section>
<db:section xml:id="toPem">
<db:title>QByteArray QSslCertificate::toPem() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toPem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toPem() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this certificate converted to a PEM (Base64) encoded representation.</db:para>
</db:section>
<db:section xml:id="toText">
<db:title>[since 5.0] QString QSslCertificate::toText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this certificate converted to a human-readable text representation.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="verify">
<db:title>[static, since 5.0] QList&lt;QSslError&gt; QSslCertificate::verify(const QList&lt;QSslCertificate&gt; &amp;<db:emphasis>certificateChain</db:emphasis>, const QString &amp;<db:emphasis>hostName</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QSslError&gt;</db:type>
<db:methodname>verify</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QSslCertificate&gt; &amp;</db:type>
<db:parameter>certificateChain</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>hostName</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QSslError&gt; verify(const QList&lt;QSslCertificate&gt; &amp;certificateChain, const QString &amp;hostName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Verifies a certificate chain. The chain to be verified is passed in the <db:code role="parameter">certificateChain</db:code> parameter. The first certificate in the list should be the leaf certificate of the chain to be verified. If <db:code role="parameter">hostName</db:code> is specified then the certificate is also checked to see if it is valid for the specified host name.</db:para>
<db:para>Note that the root (CA) certificate should not be included in the list to be verified, this will be looked up automatically using the CA list specified in the default <db:link xlink:href="qsslconfiguration.xml">QSslConfiguration</db:link>, and, in addition, if possible, CA certificates loaded on demand on Unix and Windows.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="version">
<db:title>QByteArray QSslCertificate::version() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>version</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray version() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the certificate's version string.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QSslCertificate::operator!=(const QSslCertificate &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QSslCertificate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QSslCertificate &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this certificate is not the same as <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QSslCertificate &amp;QSslCertificate::operator=(const QSslCertificate &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSslCertificate &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QSslCertificate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslCertificate &amp; operator=(const QSslCertificate &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the contents of <db:code role="parameter">other</db:code> into this certificate, making the two certificates identical.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QSslCertificate::operator==(const QSslCertificate &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QSslCertificate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QSslCertificate &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this certificate is the same as <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
