<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Command Line Writer Async Example</db:title>
<db:productname>QtSerialPort</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Port Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to send data asynchronously over serial port.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Laszlo Papp &amp;lt;lpapp@kde.org&amp;gt;
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtSerialPort module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;serialportwriter.h&quot;

#include &amp;lt;QCoreApplication&amp;gt;

SerialPortWriter::SerialPortWriter(QSerialPort *serialPort, QObject *parent) :
    QObject(parent),
    m_serialPort(serialPort),
    m_standardOutput(stdout)
{
    m_timer.setSingleShot(true);
    connect(m_serialPort, &amp;amp;QSerialPort::bytesWritten,
            this, &amp;amp;SerialPortWriter::handleBytesWritten);
    connect(m_serialPort, &amp;amp;QSerialPort::errorOccurred,
            this, &amp;amp;SerialPortWriter::handleError);
    connect(&amp;amp;m_timer, &amp;amp;QTimer::timeout, this, &amp;amp;SerialPortWriter::handleTimeout);
}

void SerialPortWriter::handleBytesWritten(qint64 bytes)
{
    m_bytesWritten += bytes;
    if (m_bytesWritten == m_writeData.size()) {
        m_bytesWritten = 0;
        m_standardOutput &amp;lt;&amp;lt; QObject::tr(&quot;Data successfully sent to port %1&quot;)
                            .arg(m_serialPort-&amp;gt;portName()) &amp;lt;&amp;lt; endl;
        QCoreApplication::quit();
    }
}

void SerialPortWriter::handleTimeout()
{
    m_standardOutput &amp;lt;&amp;lt; QObject::tr(&quot;Operation timed out for port %1, error: %2&quot;)
                        .arg(m_serialPort-&amp;gt;portName())
                        .arg(m_serialPort-&amp;gt;errorString())
                     &amp;lt;&amp;lt; endl;
    QCoreApplication::exit(1);
}

void SerialPortWriter::handleError(QSerialPort::SerialPortError serialPortError)
{
    if (serialPortError == QSerialPort::WriteError) {
        m_standardOutput &amp;lt;&amp;lt; QObject::tr(&quot;An I/O error occurred while writing&quot;
                                        &quot; the data to port %1, error: %2&quot;)
                            .arg(m_serialPort-&amp;gt;portName())
                            .arg(m_serialPort-&amp;gt;errorString())
                         &amp;lt;&amp;lt; endl;
        QCoreApplication::exit(1);
    }
}

void SerialPortWriter::write(const QByteArray &amp;amp;writeData)
{
    m_writeData = writeData;

    const qint64 bytesWritten = m_serialPort-&amp;gt;write(writeData);

    if (bytesWritten == -1) {
        m_standardOutput &amp;lt;&amp;lt; QObject::tr(&quot;Failed to write the data to port %1, error: %2&quot;)
                            .arg(m_serialPort-&amp;gt;portName())
                            .arg(m_serialPort-&amp;gt;errorString())
                         &amp;lt;&amp;lt; endl;
        QCoreApplication::exit(1);
    } else if (bytesWritten != m_writeData.size()) {
        m_standardOutput &amp;lt;&amp;lt; QObject::tr(&quot;Failed to write all the data to port %1, error: %2&quot;)
                            .arg(m_serialPort-&amp;gt;portName())
                            .arg(m_serialPort-&amp;gt;errorString())
                         &amp;lt;&amp;lt; endl;
        QCoreApplication::exit(1);
    }

    m_timer.start(5000);
}

</db:programlisting>
</db:article>
