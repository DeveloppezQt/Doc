<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ShaderImage QML Type</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides Image access to shader programs.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt3D.Render 2.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To make the content of textures available for read and write operations in a shader, they need to exposed as <db:link xlink:href="qml-qt3d-render-shaderimage.xml">ShaderImage</db:link>. Textures can be composed of several mip levels, layers and faces. Additionally declaring a <db:link xlink:href="qml-qt3d-render-shaderimage.xml">ShaderImage</db:link> allows specifying which level, layer or face of the texture content we want to access.</db:para>
<db:para><db:link xlink:href="qml-qt3d-render-shaderimage.xml">ShaderImage</db:link> has to be assigned as a Parameter's value and reference a valid Qt3D.Render.<db:link xlink:href="qml-qt3d-render-abstracttexture.xml">AbstractTexture</db:link> to work properly.</db:para>
<db:para>If the referenced texture is a one-dimensional array, two-dimensional array, three-dimensional, cube map, cube map array, or two-dimensional multisample array texture, it is possible to bind either the entire texture level or a single layer or face of the texture level. This can be controlled with the <db:link xlink:href="qml-qt3d-render-shaderimage.xml#layered-prop">layered</db:link> property.</db:para>
<db:para>Support for <db:link xlink:href="qml-qt3d-render-shaderimage.xml">ShaderImage</db:link> is only supported with OpenGL 4 and partially with OpenGL ES 3.1 and 3.2.</db:para>
<db:para>OpenGL 4 supports the following image types:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>GLSL Type</db:para>
</db:th>
<db:th>
<db:para>OpenGL Type Enum</db:para>
</db:th>
<db:th>
<db:para>Texture Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>image1D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_1D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture1d.xml">Texture1D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2d.xml">Texture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image3D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture3d.xml">Texture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DRect</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_RECT</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturerectangle.xml">TextureRectangle</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageCube</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemap.xml">TextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturebuffer.xml">TextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image1DArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_1D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture1darray.xml">Texture1DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2darray.xml">Texture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemaparray.xml">TextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DMS</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_MULTISAMPLE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2dmultisample.xml">Texture2DMultisample</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DMSArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_MULTISAMPLE_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2dmultisamplearray.xml">Texture2DMultisampleArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage1D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_1D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture1d.xml">Texture1D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2d.xml">Texture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage3D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture3d.xml">Texture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DRect</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_RECT</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturerectangle.xml">TextureRectangle</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageCube</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemap.xml">TextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturebuffer.xml">TextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage1DArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_1D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture1darray.xml">Texture1DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2darray.xml">Texture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemaparray.xml">TextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DMS</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_MULTISAMPLE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2dmultisample.xml">Texture2DMultisample</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DMSArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2dmultisamplearray.xml">Texture2DMultisampleArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage1D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_1D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture1d.xml">Texture1D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2d.xml">Texture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage3D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture3d.xml">Texture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DRect</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_RECT</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturerectangle.xml">TextureRectangle</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageCube</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemap.xml">TextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturebuffer.xml">TextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage1DArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_1D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture1darray.xml">Texture1DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2darray.xml">Texture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemaparray.xml">TextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DMS</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2dmultisample.xml">Texture2DMultisample</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DMSArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2dmultisamplearray.xml">Texture2DMultisampleArray</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>OpenGL ES 3.1 supports the following image types:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>GLSL Type</db:para>
</db:th>
<db:th>
<db:para>OpenGL Type Enum</db:para>
</db:th>
<db:th>
<db:para>Texture Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>image2D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2d.xml">Texture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image3D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture3d.xml">Texture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageCube</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemap.xml">TextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2darray.xml">Texture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2d.xml">Texture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage3D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture3d.xml">Texture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageCube</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemap.xml">TextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2darray.xml">Texture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2d.xml">Texture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage3D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture3d.xml">Texture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageCube</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemap.xml">TextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texture2darray.xml">Texture2DArray</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>OpenGL ES 3.2 supports all of the OpenGL ES 3.1 image types as well as the following:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>GLSL Type</db:para>
</db:th>
<db:th>
<db:para>OpenGL Type Enum</db:para>
</db:th>
<db:th>
<db:para>Texture Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>imageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturebuffer.xml">TextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemaparray.xml">TextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturebuffer.xml">TextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemaparray.xml">TextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturebuffer.xml">TextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt3d-render-texturecubemaparray.xml">TextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Expected use would look like:</db:para>
<db:programlisting language="cpp" role="bad">import Qt3D.Render 2.14

Entity {
...
    Texture2D {
        id: tex2D
        ...
    }

    Material {
        parameters: Parameter {
            name: &quot;imageUniformName&quot;
            value: ShaderImage {
                texture: tex2D
            }
        }
        ...
    }
 ...
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="access-prop">
<db:title>access : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>access</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the type of access we want to allow from our shader instances to the image. If a shader tries to write or read from an image that has incompatible access, the behavior is undefined.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShaderImage.ReadOnly</db:para>
</db:td>
<db:td>
<db:para>Read-only access.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderImage.WriteOnly</db:para>
</db:td>
<db:td>
<db:para>Write-only access.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderImage.ReadWrite</db:para>
</db:td>
<db:td>
<db:para>Read-write access.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:link xlink:href="qml-qt3d-render-shaderimage.xml">ShaderImage</db:link>.ReadWrite.</db:para>
</db:section>
<db:section xml:id="format-prop">
<db:title>format : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>format</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the image format, which is essentially important when storing values in the <db:link xlink:href="qml-qt3d-render-shaderimage.xml">ShaderImage</db:link> from a shader.</db:para>
<db:para>The format doesn't have to be the same as the referenced texture's format. It however has to be compatible (matching in size but not necessarily by class type). For instance a texture of format R32F (size 32bits, class 1x32) could be used with an image of format RGBA8I (size 32bits, class 4x8). Table 8.27 of the <db:link xlink:href="https://www.khronos.org/registry/OpenGL/specs/gl/glspec45.core.pdf">OpenGL specifications</db:link> shows the size and class for all supported image formats.</db:para>
<db:para>By default Qt3D will try to set the image format to match that of the referenced texture.</db:para>
<db:para>The default value is <db:link xlink:href="qml-qt3d-render-shaderimage.xml">ShaderImage</db:link>.Automatic.</db:para>
</db:section>
<db:section xml:id="layer-prop">
<db:title>layer : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>layer</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds which layer out of the referenced texture should be used for the <db:link xlink:href="qml-qt3d-render-shaderimage.xml">ShaderImage</db:link>. This property does nothing if <db:code role="parameter">layered</db:code> is set to true or if the reference texture's type isn't compatible with layers.</db:para>
<db:note>
<db:para>When the referenced texture is of type cube map or cube map array and <db:code role="parameter">ĺayered</db:code> is set to false, the face and layer are retrieved in the following manner:</db:para>
</db:note>
<db:programlisting language="cpp" role="bad">cubeMapLayer = layer / 6
cubeMapFace = layer - (cubeMapLayer * 6)
</db:programlisting>
<db:para>The default value is 0.</db:para>
</db:section>
<db:section xml:id="layered-prop">
<db:title>layered : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>layered</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>*</db:para>
<db:para>If set to true, if the referenced texture is a one-dimensional array, two-dimensional array, three-dimensional, cube map, cube map array, or two-dimensional multisample array texture, the entire level will be bound for all layers. If set to false, only the single layer specified by the <db:code role="parameter">layer</db:code> property will be bound.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="mipLevel-prop">
<db:title>mipLevel : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>mipLevel</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds which mipLevel out of the referenced texture should be used for the <db:link xlink:href="qml-qt3d-render-shaderimage.xml">ShaderImage</db:link>.</db:para>
<db:para>The default value is 0.</db:para>
</db:section>
</db:section>
</db:article>
