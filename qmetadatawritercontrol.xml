<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMetaDataWriterControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmetadatawritercontrol.xml">QMetaDataWriterControl</db:link> class provides write access to the meta-data of a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link>'s media.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMetaDataWriterControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMetaDataWriterControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>If a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> can provide write access to the meta-data of its current media it will implement <db:link xlink:href="qmetadatawritercontrol.xml">QMetaDataWriterControl</db:link>. This control provides functions for both retrieving and setting meta-data values. Meta-data may be addressed by the keys defined in the <db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link> namespace.</db:para>
<db:para>The functionality provided by this control is exposed to application code by the meta-data members of <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link>, and so meta-data access is potentially available in any of the media object classes. Any media service may implement QMetaDataControl.</db:para>
<db:para>The interface name of <db:link xlink:href="qmetadatawritercontrol.xml">QMetaDataWriterControl</db:link> is <db:code>org.qt-project.qt.metadatawritercontrol/5.0</db:code> as defined in <db:link xlink:href="qmetadatawritercontrol.xml#QMetaDataWriterControl_iid">QMetaDataWriterControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml#requestControl">QMediaService::requestControl</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaobject.xml">QMediaObject</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMetaDataWriterControl">
<db:title>[explicit protected] QMetaDataWriterControl::QMetaDataWriterControl(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Construct a <db:link xlink:href="qmetadatawritercontrol.xml">QMetaDataWriterControl</db:link> with <db:code role="parameter">parent</db:code>. This class is meant as a base class for service specific meta data providers so this constructor is protected.</db:para>
</db:section>
<db:section xml:id="dtor.QMetaDataWriterControl">
<db:title>[virtual noexcept] QMetaDataWriterControl::~QMetaDataWriterControl()</db:title>
<db:para>Destroy the meta-data writer control.</db:para>
</db:section>
<db:section xml:id="availableMetaData">
<db:title>[pure virtual] QStringList QMetaDataWriterControl::availableMetaData() const</db:title>
<db:para>Returns a list of keys there is meta-data available for.</db:para>
</db:section>
<db:section xml:id="isMetaDataAvailable">
<db:title>[pure virtual] bool QMetaDataWriterControl::isMetaDataAvailable() const</db:title>
<db:para>Identifies if meta-data is available from a media service.</db:para>
<db:para>Returns true if the meta-data is available and false otherwise.</db:para>
</db:section>
<db:section xml:id="isWritable">
<db:title>[pure virtual] bool QMetaDataWriterControl::isWritable() const</db:title>
<db:para>Identifies if a media service's meta-data can be edited.</db:para>
<db:para>Returns true if the meta-data is writable and false otherwise.</db:para>
</db:section>
<db:section xml:id="metaData">
<db:title>[pure virtual] QVariant QMetaDataWriterControl::metaData(const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:para>Returns the meta-data for the given <db:code role="parameter">key</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetadatawritercontrol.xml#setMetaData">setMetaData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metaDataAvailableChanged">
<db:title>void QMetaDataWriterControl::metaDataAvailableChanged(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:para>Signal the availability of meta-data has changed, <db:code role="parameter">available</db:code> will be true if the multimedia object has meta-data.</db:para>
</db:section>
<db:section xml:id="metaDataChanged">
<db:title>void QMetaDataWriterControl::metaDataChanged()</db:title>
<db:para>Signal the changes of meta-data.</db:para>
<db:para>If multiple meta-data elements are changed, metaDataChanged(const <db:link xlink:href="qstring.xml">QString</db:link> &amp;key, const <db:link xlink:href="qvariant.xml">QVariant</db:link> &amp;value) signal is emitted for each of them with metaDataChanged() changed emitted once.</db:para>
</db:section>
<db:section xml:id="metaDataChanged-1">
<db:title>void QMetaDataWriterControl::metaDataChanged(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Signal the changes of one meta-data element <db:code role="parameter">value</db:code> with the given <db:code role="parameter">key</db:code>.</db:para>
</db:section>
<db:section xml:id="setMetaData">
<db:title>[pure virtual] void QMetaDataWriterControl::setMetaData(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">value</db:code> of the meta-data element with the given <db:code role="parameter">key</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetadatawritercontrol.xml#metaData">metaData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writableChanged">
<db:title>void QMetaDataWriterControl::writableChanged(bool <db:emphasis>writable</db:emphasis>)</db:title>
<db:para>Signal a change in the writable status of meta-data, <db:code role="parameter">writable</db:code> will be true if meta-data elements can be added or adjusted.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QMetaDataWriterControl_iid">
<db:title>QMetaDataWriterControl_iid</db:title>
<db:para><db:code>org.qt-project.qt.metadatawritercontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qmetadatawritercontrol.xml">QMetaDataWriterControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
