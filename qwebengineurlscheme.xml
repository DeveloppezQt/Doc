<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineUrlScheme Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link> class configures a custom URL scheme.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineUrlScheme</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS WebEngineCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::WebEngineCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginecore</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A web engine URL scheme describes a URL scheme from the web engine's perspective, specifying how URLs of this scheme should be parsed, and which security restrictions should be placed on resources originating from such URLs.</db:para>
<db:para>Custom URL schemes must be configured early at application startup, before creating any Qt WebEngine classes. In general this means the schemes need to be configured before a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> or <db:link xlink:href="qapplication.xml">QApplication</db:link> instance is created.</db:para>
<db:para>Every registered scheme configuration applies globally to all profiles.</db:para>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QWebEngineUrlScheme scheme(&quot;myscheme&quot;);
    scheme.setSyntax(QWebEngineUrlScheme::Syntax::HostAndPort);
    scheme.setDefaultPort(2345);
    scheme.setFlags(QWebEngineUrlScheme::SecureScheme);
    QWebEngineUrlScheme::registerScheme(scheme);
    ...
}
</db:programlisting>
<db:para>To actually make use of the custom URL scheme, a <db:link xlink:href="qwebengineurlschemehandler.xml">QWebEngineUrlSchemeHandler</db:link> must be created and registered in a profile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlschemehandler.xml">QWebEngineUrlSchemeHandler</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Flag-enum">
<db:title>enum QWebEngineUrlScheme::Flag</db:title>
<db:bridgehead renderas="sect2">flags QWebEngineUrlScheme::Flags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Flag</db:enumname>
<db:enumitem>
<db:enumidentifier>SecureScheme</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocalScheme</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocalAccessAllowed</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoAccessAllowed</db:enumidentifier>
<db:enumvalue>0x8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ServiceWorkersAllowed</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ViewSourceAllowed</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContentSecurityPolicyIgnored</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CorsEnabled</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FetchApiAllowed</db:enumidentifier>
<db:enumvalue>0x100</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QWebEngineUrlScheme::Flags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum type specifies security options that should apply to a URL scheme.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::SecureScheme</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Indicates that the URL scheme is <db:link xlink:href="https://www.w3.org/TR/powerful-features/#is-origin-trustworthy">potentially trustworthy</db:link>. This flag should only be applied to URL schemes which ensure data authenticity, confidentiality, and integrity, either through encryption or other means. Examples of secure builtin schemes include <db:code>https</db:code> (authenticated and encrypted) and <db:code>qrc</db:code> (local resources only), whereas <db:code>http</db:code> is an example of an insecure scheme.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::LocalScheme</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Indicates that the URL scheme provides access to local resources. The purpose of this flag is to prevent network content from accessing local resources. Only schemes with the <db:code>LocalAccessAllowed</db:code> flag may load resources from a scheme with the <db:code>LocalScheme</db:code> flag. The only builtin scheme with this flag is <db:code>file</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::LocalAccessAllowed</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Indicates that content from this scheme should be allowed to load resources from schemes with the <db:code>LocalScheme</db:code> flag.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::NoAccessAllowed</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>Indicates that all content from this scheme should be forced to have unique opaque origins: no two resources will have the same origin.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::ServiceWorkersAllowed</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Indicates that the Service Workers API should be enabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::ViewSourceAllowed</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>Indicates that the View Source feature should be enabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::ContentSecurityPolicyIgnored</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>Indicates that accesses to this scheme should bypass all Content-Security-Policy checks.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::CorsEnabled</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>Enables cross-origin resource sharing (CORS) for this scheme. This flag is required in order for content to be loaded by documents of a different origin, this includes access from other schemes. The appropriate CORS headers are generated automatically by the <db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link> class. By default only <db:code>http</db:code> and <db:code>https</db:code> are CORS enabled. (Added in Qt 5.14)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::FetchApiAllowed (since Qt 6.6)</db:code></db:para>
</db:td>
<db:td><db:code>0x100</db:code></db:td>
<db:td>
<db:para>Enables a URL scheme to be used by the HTML5 fetch API and <db:code>XMLHttpRequest.send</db:code> with a body. By default only <db:code>http</db:code> and <db:code>https</db:code> can be send to using the Fetch API or with an <db:link xlink:href="qml-qtqml-xmlhttprequest.xml">XMLHttpRequest</db:link> with a body.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
</db:section>
<db:section xml:id="SpecialPort-enum">
<db:title>enum QWebEngineUrlScheme::SpecialPort</db:title>
<db:enumsynopsis>
<db:enumname>SpecialPort</db:enumname>
<db:enumitem>
<db:enumidentifier>PortUnspecified</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type defines special values for <db:link xlink:href="qwebengineurlscheme.xml#defaultPort">defaultPort</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::PortUnspecified</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Indicates that the URL scheme does not have a port element.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Syntax-enum">
<db:title>enum QWebEngineUrlScheme::Syntax</db:title>
<db:enumsynopsis>
<db:enumname>Syntax</db:enumname>
<db:enumitem>
<db:enumidentifier>HostPortAndUserInformation</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HostAndPort</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Host</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Path</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type lists types of URL syntax.</db:para>
<db:para>To apply the same-origin policy to a custom URL scheme, <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> must be able to compute the origin (host and port combination) of a URL. The <db:code>Host...</db:code> options indicate that the URL scheme conforms to the standard URL syntax (like <db:code>http</db:code>) and automatically enable the same-origin policy. The <db:code>Path</db:code> option indicates that the URL scheme uses a non-standard syntax and that the same-origin policy cannot be applied.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::<db:emphasis role="bold">Syntax</db:emphasis>::HostPortAndUserInformation</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The authority component of a URL of this type has all of the standard elements: host, port, user name, and password. A URL without a port will use the <db:link xlink:href="qwebengineurlscheme.xml#defaultPort">defaultPort</db:link> (which <db:emphasis>must</db:emphasis> not be <db:link xlink:href="qwebengineurlscheme.xml#SpecialPort-enum">PortUnspecified</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::<db:emphasis role="bold">Syntax</db:emphasis>::HostAndPort</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The authority component of a URL of this type has only the host and port elements. A URL without a port will use the <db:link xlink:href="qwebengineurlscheme.xml#defaultPort">defaultPort</db:link> (which <db:emphasis>must</db:emphasis> not be <db:link xlink:href="qwebengineurlscheme.xml#SpecialPort-enum">PortUnspecified</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::<db:emphasis role="bold">Syntax</db:emphasis>::Host</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The authority component of a URL of this type has only the host part and no port. The <db:link xlink:href="qwebengineurlscheme.xml#defaultPort">defaultPort</db:link> <db:emphasis>must</db:emphasis> be set to <db:link xlink:href="qwebengineurlscheme.xml#SpecialPort-enum">PortUnspecified</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:emphasis>::<db:emphasis role="bold">Syntax</db:emphasis>::Path</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A URL of this type has no authority component at all. Everything after scheme name and separator character (:) will be preserved as is without validation or canonicalization. All URLs of such a scheme will be considered as having the same origin (unless the <db:code>NoAccessAllowed</db:code> flag is used).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebEngineUrlScheme">
<db:title>QWebEngineUrlScheme::QWebEngineUrlScheme()</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineUrlScheme</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlScheme()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a web engine URL scheme with default values.</db:para>
</db:section>
<db:section xml:id="QWebEngineUrlScheme-1">
<db:title>[explicit] QWebEngineUrlScheme::QWebEngineUrlScheme(const QByteArray &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineUrlScheme</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlScheme(const QByteArray &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a web engine URL scheme with given <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="QWebEngineUrlScheme-2">
<db:title>QWebEngineUrlScheme::QWebEngineUrlScheme(const QWebEngineUrlScheme &amp;<db:emphasis>that</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineUrlScheme</db:methodname>
<db:methodparam>
<db:type>const QWebEngineUrlScheme &amp;</db:type>
<db:parameter>that</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlScheme(const QWebEngineUrlScheme &amp;that)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Copies <db:code role="parameter">that</db:code>.</db:para>
</db:section>
<db:section xml:id="QWebEngineUrlScheme-3">
<db:title>QWebEngineUrlScheme::QWebEngineUrlScheme(QWebEngineUrlScheme &amp;&amp;<db:emphasis>that</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineUrlScheme</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlScheme &amp;&amp;</db:type>
<db:parameter>that</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlScheme(QWebEngineUrlScheme &amp;&amp;that)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Moves <db:code role="parameter">that</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QWebEngineUrlScheme">
<db:title>QWebEngineUrlScheme::~QWebEngineUrlScheme()</db:title>
<db:destructorsynopsis>
<db:methodname>~QWebEngineUrlScheme</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebEngineUrlScheme()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs this object.</db:para>
</db:section>
<db:section xml:id="defaultPort">
<db:title>int QWebEngineUrlScheme::defaultPort() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>defaultPort</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int defaultPort() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default port of this URL scheme.</db:para>
<db:para>The default value is <db:code>PortUnspecified</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#setDefaultPort">setDefaultPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>QWebEngineUrlScheme::Flags QWebEngineUrlScheme::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineUrlScheme::Flags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlScheme::Flags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the flags for this URL scheme.</db:para>
<db:para>The default value is an empty set of flags.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#Flag-enum">Flags</db:link></db:member>
<db:member><db:link xlink:href="qwebengineurlscheme.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QByteArray QWebEngineUrlScheme::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of this URL scheme.</db:para>
<db:para>The default value is an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#setName">setName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerScheme">
<db:title>[static] void QWebEngineUrlScheme::registerScheme(const QWebEngineUrlScheme &amp;<db:emphasis>scheme</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>registerScheme</db:methodname>
<db:methodparam>
<db:type>const QWebEngineUrlScheme &amp;</db:type>
<db:parameter>scheme</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerScheme(const QWebEngineUrlScheme &amp;scheme)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers <db:code role="parameter">scheme</db:code> with the web engine's URL parser and security model.</db:para>
<db:para>It is recommended that all custom URL schemes are first registered with this function at application startup, even if the default options are to be used.</db:para>
<db:warning>
<db:para>This function must be called early at application startup, before creating any <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> classes. Late calls will be ignored.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#schemeByName">schemeByName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="schemeByName">
<db:title>[static] QWebEngineUrlScheme QWebEngineUrlScheme::schemeByName(const QByteArray &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWebEngineUrlScheme</db:type>
<db:methodname>schemeByName</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlScheme schemeByName(const QByteArray &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the web engine URL scheme with the given <db:code role="parameter">name</db:code> or the default-constructed scheme.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#registerScheme">registerScheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultPort">
<db:title>void QWebEngineUrlScheme::setDefaultPort(int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDefaultPort</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultPort(int newValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the default port of this URL scheme to <db:code role="parameter">newValue</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#defaultPort">defaultPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlags">
<db:title>void QWebEngineUrlScheme::setFlags(QWebEngineUrlScheme::Flags <db:emphasis>newValue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlags</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlScheme::Flags</db:type>
<db:parameter>newValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlags(QWebEngineUrlScheme::Flags newValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the flags for this URL scheme to <db:code role="parameter">newValue</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#Flag-enum">Flags</db:link></db:member>
<db:member><db:link xlink:href="qwebengineurlscheme.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QWebEngineUrlScheme::setName(const QByteArray &amp;<db:emphasis>newValue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setName</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>newValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setName(const QByteArray &amp;newValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name of this URL scheme to <db:code role="parameter">newValue</db:code>.</db:para>
<db:note>
<db:para>The name is automatically converted to lower case.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSyntax">
<db:title>void QWebEngineUrlScheme::setSyntax(QWebEngineUrlScheme::Syntax <db:emphasis>newValue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSyntax</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlScheme::Syntax</db:type>
<db:parameter>newValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSyntax(QWebEngineUrlScheme::Syntax newValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the syntax type of this URL scheme to <db:code role="parameter">newValue</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#Syntax-enum">Syntax</db:link></db:member>
<db:member><db:link xlink:href="qwebengineurlscheme.xml#syntax">syntax</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="syntax">
<db:title>QWebEngineUrlScheme::Syntax QWebEngineUrlScheme::syntax() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineUrlScheme::Syntax</db:type>
<db:methodname>syntax</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlScheme::Syntax syntax() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the syntax type of this URL scheme.</db:para>
<db:para>The default value is <db:code>Path</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml#Syntax-enum">Syntax</db:link></db:member>
<db:member><db:link xlink:href="qwebengineurlscheme.xml#setSyntax">setSyntax</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QWebEngineUrlScheme::operator!=(const QWebEngineUrlScheme &amp;<db:emphasis>that</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QWebEngineUrlScheme &amp;</db:type>
<db:parameter>that</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QWebEngineUrlScheme &amp;that) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this and <db:code role="parameter">that</db:code> object are not equal.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QWebEngineUrlScheme &amp;QWebEngineUrlScheme::operator=(const QWebEngineUrlScheme &amp;<db:emphasis>that</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWebEngineUrlScheme &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QWebEngineUrlScheme &amp;</db:type>
<db:parameter>that</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlScheme &amp; operator=(const QWebEngineUrlScheme &amp;that)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies <db:code role="parameter">that</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QWebEngineUrlScheme &amp;QWebEngineUrlScheme::operator=(QWebEngineUrlScheme &amp;&amp;<db:emphasis>that</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWebEngineUrlScheme &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlScheme &amp;&amp;</db:type>
<db:parameter>that</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlScheme &amp; operator=(QWebEngineUrlScheme &amp;&amp;that)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves <db:code role="parameter">that</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QWebEngineUrlScheme::operator==(const QWebEngineUrlScheme &amp;<db:emphasis>that</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QWebEngineUrlScheme &amp;</db:type>
<db:parameter>that</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QWebEngineUrlScheme &amp;that) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this and <db:code role="parameter">that</db:code> object are equal.</db:para>
</db:section>
</db:section>
</db:article>
