<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMutableLinkedListIterator Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QMutableLinkedListIterator</db:subtitle>
<db:productname>QtCore5Compat</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 5 Core Compatibility APIs Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmutablelinkedlistiterator.xml">QMutableLinkedListIterator</db:link> class provides a Java-style non-const iterator for <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMutableLinkedListIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core5Compat)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core5Compat)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core5compat</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> has both <db:link xlink:href="">Java-style iterators</db:link> and <db:link xlink:href="">STL-style iterators</db:link>. The Java-style iterators are more high-level and easier to use than the STL-style iterators; on the other hand, they are slightly less efficient.</db:para>
<db:para><db:link xlink:href="qmutablelinkedlistiterator.xml">QMutableLinkedListIterator</db:link>&lt;T&gt; allows you to iterate over a <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt; and modify the list. If you don't want to modify the list (or have a const <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>), use the slightly faster <db:link xlink:href="qlinkedlistiterator.xml">QLinkedListIterator</db:link>&lt;T&gt; instead.</db:para>
<db:para>The <db:link xlink:href="qmutablelinkedlistiterator.xml">QMutableLinkedListIterator</db:link> constructor takes a <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> as argument. After construction, the iterator is located at the very beginning of the list (before the first item). Here's how to iterate over all the elements sequentially:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;float&gt; list;
...
QMutableLinkedListIterator&lt;float&gt; i(list);
while (i.hasNext())
    qDebug() &lt;&lt; i.next();
</db:programlisting>
<db:para>The <db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>() function returns the next item in the list and advances the iterator. Unlike STL-style iterators, Java-style iterators point <db:emphasis>between</db:emphasis> items rather than directly <db:emphasis>at</db:emphasis> items. The first call to <db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>() advances the iterator to the position between the first and second item, and returns the first item; the second call to <db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>() advances the iterator to the position between the second and third item, returning the second item; and so on.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/javaiterators1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here's how to iterate over the elements in reverse order:</db:para>
<db:programlisting language="cpp">QMutableLinkedListIterator&lt;float&gt; i(list);
i.toBack();
while (i.hasPrevious())
    qDebug() &lt;&lt; i.previous();
</db:programlisting>
<db:para>If you want to find all occurrences of a particular value, use <db:link xlink:href="qmutablelinkedlistiterator.xml#findNext">findNext</db:link>() or <db:link xlink:href="qmutablelinkedlistiterator.xml#findPrevious">findPrevious</db:link>() in a loop.</db:para>
<db:para>If you want to remove items as you iterate over the list, use <db:link xlink:href="qmutablelinkedlistiterator.xml#remove">remove</db:link>(). If you want to modify the value of an item, use <db:link xlink:href="qmutablelinkedlistiterator.xml#setValue">setValue</db:link>(). If you want to insert a new item in the list, use <db:link xlink:href="qmutablelinkedlistiterator.xml#insert">insert</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMutableLinkedListIterator&lt;int&gt; i(list);
while (i.hasNext()) {
    int val = i.next();
    if (val &lt; 0) {
        i.setValue(-val);
    } else if (val == 0) {
        i.remove();
    }
}
</db:programlisting>
<db:para>The example traverses a list, replacing negative numbers with their absolute values, and eliminating zeroes.</db:para>
<db:para>Only one mutable iterator can be active on a given list at any time. Furthermore, no changes should be done directly to the list while the iterator is active (as opposed to through the iterator), since this could invalidate the iterator and lead to undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlistiterator.xml">QLinkedListIterator</db:link></db:member>
<db:member><db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMutableLinkedListIterator">
<db:title>QMutableLinkedListIterator::QMutableLinkedListIterator(QLinkedList&lt;T&gt; &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:para>Constructs an iterator for traversing <db:code role="parameter">list</db:code>. The iterator is set to be at the front of the list (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QMutableLinkedListIterator&lt;T&gt; &amp;QMutableLinkedListIterator::operator=(QLinkedList&lt;T&gt; &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:para>Makes the iterator operate on <db:code role="parameter">list</db:code>. The iterator is set to be at the front of the list (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#toFront">toFront</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#toBack">toBack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFront">
<db:title>void QMutableLinkedListIterator::toFront()</db:title>
<db:para>Moves the iterator to the front of the container (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#toBack">toBack</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toBack">
<db:title>void QMutableLinkedListIterator::toBack()</db:title>
<db:para>Moves the iterator to the back of the container (after the last item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#toFront">toFront</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasNext">
<db:title>bool QMutableLinkedListIterator::hasNext() const</db:title>
<db:para>Returns <db:code>true</db:code> if there is at least one item ahead of the iterator, i.e. the iterator is <db:emphasis>not</db:emphasis> at the back of the container; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#hasPrevious">hasPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasPrevious">
<db:title>bool QMutableLinkedListIterator::hasPrevious() const</db:title>
<db:para>Returns <db:code>true</db:code> if there is at least one item behind the iterator, i.e. the iterator is <db:emphasis>not</db:emphasis> at the front of the container; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findNext">
<db:title>bool QMutableLinkedListIterator::findNext(const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Searches for <db:code role="parameter">value</db:code> starting from the current iterator position forward. Returns <db:code>true</db:code> if <db:code role="parameter">value</db:code> is found; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>After the call, if <db:code role="parameter">value</db:code> was found, the iterator is positioned just after the matching item; otherwise, the iterator is positioned at the back of the container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#findPrevious">findPrevious</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findPrevious">
<db:title>bool QMutableLinkedListIterator::findPrevious(const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Searches for <db:code role="parameter">value</db:code> starting from the current iterator position backward. Returns <db:code>true</db:code> if <db:code role="parameter">value</db:code> is found; otherwise returns false.</db:para>
<db:para>After the call, if <db:code role="parameter">value</db:code> was found, the iterator is positioned just before the matching item; otherwise, the iterator is positioned at the front of the container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#findNext">findNext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>void QMutableLinkedListIterator::insert(const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">value</db:code> at the current iterator position. After the call, the iterator is located just after the inserted item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="next">
<db:title>T &amp;QMutableLinkedListIterator::next()</db:title>
<db:para>Returns a reference to the next item, and advances the iterator by one position.</db:para>
<db:para>Calling this function on an iterator located at the back of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#peekNext">peekNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peekNext">
<db:title>T &amp;QMutableLinkedListIterator::peekNext() const</db:title>
<db:para>Returns a reference to the next item, without moving the iterator.</db:para>
<db:para>Calling this function on an iterator located at the back of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#peekPrevious">peekPrevious</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peekPrevious">
<db:title>T &amp;QMutableLinkedListIterator::peekPrevious() const</db:title>
<db:para>Returns a reference to the previous item, without moving the iterator.</db:para>
<db:para>Calling this function on an iterator located at the front of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#hasPrevious">hasPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#previous">previous</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#peekNext">peekNext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previous">
<db:title>T &amp;QMutableLinkedListIterator::previous()</db:title>
<db:para>Returns a reference to the previous item and moves the iterator back by one position.</db:para>
<db:para>Calling this function on an iterator located at the front of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#hasPrevious">hasPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#peekPrevious">peekPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>void QMutableLinkedListIterator::remove()</db:title>
<db:para>Removes the last item that was jumped over using one of the traversal functions (<db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>(), <db:link xlink:href="qmutablelinkedlistiterator.xml#previous">previous</db:link>(), <db:link xlink:href="qmutablelinkedlistiterator.xml#findNext">findNext</db:link>(), <db:link xlink:href="qmutablelinkedlistiterator.xml#findPrevious">findPrevious</db:link>()).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMutableLinkedListIterator&lt;int&gt; i(list);
while (i.hasNext()) {
    int val = i.next();
    if (val &lt; -32768 || val &gt; 32767)
        i.remove();
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValue">
<db:title>void QMutableLinkedListIterator::setValue(const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Replaces the value of the last item that was jumped over using one of the traversal functions with <db:code role="parameter">value</db:code>.</db:para>
<db:para>The traversal functions are <db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>(), <db:link xlink:href="qmutablelinkedlistiterator.xml#previous">previous</db:link>(), <db:link xlink:href="qmutablelinkedlistiterator.xml#findNext">findNext</db:link>(), and <db:link xlink:href="qmutablelinkedlistiterator.xml#findPrevious">findPrevious</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMutableLinkedListIterator&lt;double&gt; i(list);
while (i.hasNext()) {
    double val = i.next();
    i.setValue(std::sqrt(val));
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>const T &amp;QMutableLinkedListIterator::value() const</db:title>
<db:para>Returns the value of the last item that was jumped over using one of the traversal functions (<db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>(), <db:link xlink:href="qmutablelinkedlistiterator.xml#previous">previous</db:link>(), <db:link xlink:href="qmutablelinkedlistiterator.xml#findNext">findNext</db:link>(), <db:link xlink:href="qmutablelinkedlistiterator.xml#findPrevious">findPrevious</db:link>()).</db:para>
<db:para>After a call to <db:link xlink:href="qmutablelinkedlistiterator.xml#next">next</db:link>() or <db:link xlink:href="qmutablelinkedlistiterator.xml#findNext">findNext</db:link>(), value() is equivalent to <db:link xlink:href="qmutablelinkedlistiterator.xml#peekPrevious">peekPrevious</db:link>(). After a call to <db:link xlink:href="qmutablelinkedlistiterator.xml#previous">previous</db:link>() or <db:link xlink:href="qmutablelinkedlistiterator.xml#findPrevious">findPrevious</db:link>(), value() is equivalent to <db:link xlink:href="qmutablelinkedlistiterator.xml#peekNext">peekNext</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value-1">
<db:title>T &amp;QMutableLinkedListIterator::value()</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a non-const reference to the value of the last item that was jumped over using one of the traversal functions.</db:para>
</db:section>
</db:section>
</db:article>
