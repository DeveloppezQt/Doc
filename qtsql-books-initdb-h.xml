<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Books</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use Qt SQL classes with a model/view framework.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef INITDB_H
#define INITDB_H

#include &lt;QtSql&gt;

void addBook(QSqlQuery &amp;q, const QString &amp;title, int year, const QVariant &amp;authorId,
             const QVariant &amp;genreId, int rating)
{
    q.addBindValue(title);
    q.addBindValue(year);
    q.addBindValue(authorId);
    q.addBindValue(genreId);
    q.addBindValue(rating);
    q.exec();
}

QVariant addGenre(QSqlQuery &amp;q, const QString &amp;name)
{
    q.addBindValue(name);
    q.exec();
    return q.lastInsertId();
}

QVariant addAuthor(QSqlQuery &amp;q, const QString &amp;name, const QDate &amp;birthdate)
{
    q.addBindValue(name);
    q.addBindValue(birthdate);
    q.exec();
    return q.lastInsertId();
}

QSqlError initDb()
{
    QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;);
    db.setDatabaseName(&quot;:memory:&quot;);

    if (!db.open())
        return db.lastError();

    QStringList tables = db.tables();
    if (tables.contains(&quot;books&quot;, Qt::CaseInsensitive)
        &amp;&amp; tables.contains(&quot;authors&quot;, Qt::CaseInsensitive))
        return QSqlError();

    QSqlQuery q;
    if (!q.exec(QLatin1String(&quot;create table books(id integer primary key, title varchar, author integer, genre integer, year integer, rating integer)&quot;)))
        return q.lastError();
    if (!q.exec(QLatin1String(&quot;create table authors(id integer primary key, name varchar, birthdate date)&quot;)))
        return q.lastError();
    if (!q.exec(QLatin1String(&quot;create table genres(id integer primary key, name varchar)&quot;)))
        return q.lastError();

    if (!q.prepare(QLatin1String(&quot;insert into authors(name, birthdate) values(?, ?)&quot;)))
        return q.lastError();
    QVariant asimovId = addAuthor(q, QLatin1String(&quot;Isaac Asimov&quot;), QDate(1920, 2, 1));
    QVariant greeneId = addAuthor(q, QLatin1String(&quot;Graham Greene&quot;), QDate(1904, 10, 2));
    QVariant pratchettId = addAuthor(q, QLatin1String(&quot;Terry Pratchett&quot;), QDate(1948, 4, 28));

    if (!q.prepare(QLatin1String(&quot;insert into genres(name) values(?)&quot;)))
        return q.lastError();
    QVariant sfiction = addGenre(q, QLatin1String(&quot;Science Fiction&quot;));
    QVariant fiction = addGenre(q, QLatin1String(&quot;Fiction&quot;));
    QVariant fantasy = addGenre(q, QLatin1String(&quot;Fantasy&quot;));

    if (!q.prepare(QLatin1String(&quot;insert into books(title, year, author, genre, rating) values(?, ?, ?, ?, ?)&quot;)))
        return q.lastError();
    addBook(q, QLatin1String(&quot;Foundation&quot;), 1951, asimovId, sfiction, 3);
    addBook(q, QLatin1String(&quot;Foundation and Empire&quot;), 1952, asimovId, sfiction, 4);
    addBook(q, QLatin1String(&quot;Second Foundation&quot;), 1953, asimovId, sfiction, 3);
    addBook(q, QLatin1String(&quot;Foundation's Edge&quot;), 1982, asimovId, sfiction, 3);
    addBook(q, QLatin1String(&quot;Foundation and Earth&quot;), 1986, asimovId, sfiction, 4);
    addBook(q, QLatin1String(&quot;Prelude to Foundation&quot;), 1988, asimovId, sfiction, 3);
    addBook(q, QLatin1String(&quot;Forward the Foundation&quot;), 1993, asimovId, sfiction, 3);
    addBook(q, QLatin1String(&quot;The Power and the Glory&quot;), 1940, greeneId, fiction, 4);
    addBook(q, QLatin1String(&quot;The Third Man&quot;), 1950, greeneId, fiction, 5);
    addBook(q, QLatin1String(&quot;Our Man in Havana&quot;), 1958, greeneId, fiction, 4);
    addBook(q, QLatin1String(&quot;Guards! Guards!&quot;), 1989, pratchettId, fantasy, 3);
    addBook(q, QLatin1String(&quot;Night Watch&quot;), 2002, pratchettId, fantasy, 3);
    addBook(q, QLatin1String(&quot;Going Postal&quot;), 2004, pratchettId, fantasy, 3);

    return QSqlError();
}

#endif

</db:programlisting>
</db:article>
