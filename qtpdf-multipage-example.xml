<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PDF Multipage Viewer Example</db:title>
<db:productname>QtPdf</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Pdf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick PDF viewer that allows scrolling through the pages.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/multipageviewer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>PDF Multipage Viewer</db:emphasis> demonstrates how to use the <db:link xlink:href="qml-qtquick-pdf-pdfmultipageview.xml">PdfMultiPageView</db:link> component to render PDF documents and search for text in them.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-the-main-window">
<db:title>Creating the Main Window</db:title>
<db:para>Instantiate an <db:link xlink:href="qml-qtquick-controls2-applicationwindow.xml">ApplicationWindow</db:link>, bind its title to the title of the PDF document, and create a toolbar:</db:para>
<db:programlisting language="cpp">ApplicationWindow {
    id: root
    width: 800
    height: 1024
    color: &quot;lightgrey&quot;
    title: doc.title
    visible: true
    property string source // for main.cpp

    header: ToolBar {
        RowLayout {
            anchors.fill: parent
            anchors.rightMargin: 6
</db:programlisting>
<db:para>The toolbar has buttons for most of the common actions:</db:para>
<db:programlisting language="cpp">            ToolButton {
                action: Action {
                    shortcut: StandardKey.Open
                    icon.source: &quot;qrc:/pdfviewer/resources/document-open.svg&quot;
                    onTriggered: fileDialog.open()
                }
            }
            ToolButton {
                action: Action {
                    shortcut: StandardKey.ZoomIn
                    enabled: view.renderScale &amp;lt; 10
                    icon.source: &quot;qrc:/pdfviewer/resources/zoom-in.svg&quot;
                    onTriggered: view.renderScale *= Math.sqrt(2)
                }
            }
            ToolButton {
                action: Action {
                    shortcut: StandardKey.ZoomOut
</db:programlisting>
<db:para>Declare a <db:link xlink:href="qml-qtquick-pdf-pdfdocument.xml">PdfDocument</db:link> and bind the <db:code>status</db:code> property and <db:code>passwordRequired</db:code> signal to inform the user when an error occurs or a password is required:</db:para>
<db:programlisting language="cpp">    Dialog {
        id: passwordDialog
        title: &quot;Password&quot;
        standardButtons: Dialog.Ok | Dialog.Cancel
        modal: true
        closePolicy: Popup.CloseOnEscape
        anchors.centerIn: parent
        width: 300

        contentItem: TextField {
            id: passwordField
            placeholderText: qsTr(&quot;Please provide the password&quot;)
            echoMode: TextInput.Password
            width: parent.width
            onAccepted: passwordDialog.accept()
        }
        onOpened: passwordField.forceActiveFocus()
        onAccepted: doc.password = passwordField.text
    }

    Dialog {
        id: errorDialog
        title: &quot;Error loading &quot; + doc.source
        standardButtons: Dialog.Close
        modal: true
        closePolicy: Popup.CloseOnEscape
        anchors.centerIn: parent
        width: 300
        visible: doc.status === PdfDocument.Error

        contentItem: Label {
            id: errorField
            text: doc.error
        }
    }

    PdfDocument {
        id: doc
        source: Qt.resolvedUrl(root.source)
        onPasswordRequired: passwordDialog.open()
    }
</db:programlisting>
<db:para>Add the main component, <db:link xlink:href="qml-qtquick-pdf-pdfmultipageview.xml">PdfMultiPageView</db:link>:</db:para>
<db:programlisting language="cpp">    PdfMultiPageView {
        id: view
        anchors.fill: parent
        anchors.leftMargin: sidebar.position * sidebar.width
        document: doc
        searchString: searchField.text
        onCurrentPageChanged: currentPageSB.value = view.currentPage + 1
    }

    DropArea {
        anchors.fill: parent
        keys: [&quot;text/uri-list&quot;]
        onEntered: (drag) =&amp;gt; {
            drag.accepted = (drag.proposedAction === Qt.MoveAction || drag.proposedAction === Qt.CopyAction) &amp;amp;&amp;amp;
                drag.hasUrls &amp;amp;&amp;amp; drag.urls[0].endsWith(&quot;pdf&quot;)
        }
        onDropped: (drop) =&amp;gt; {
            doc.source = drop.urls[0]
            drop.acceptProposedAction()
        }
    }
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-controls2-drawer.xml">Drawer</db:link> holds a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> to show search results from the <db:link xlink:href="qml-qtquick-pdf-pdfmultipageview.xml#searchModel-prop">searchModel</db:link>:</db:para>
<db:programlisting language="cpp">    Drawer {
        id: sidebar
        edge: Qt.LeftEdge
        modal: false
        width: 300
        y: root.header.height
        height: view.height
        dim: false
        clip: true

        TabBar {
            id: sidebarTabs
            x: -width
            rotation: -90
            transformOrigin: Item.TopRight
            currentIndex: 2 // bookmarks by default
            TabButton {
                text: qsTr(&quot;Info&quot;)
            }
            TabButton {
                text: qsTr(&quot;Search Results&quot;)
            }
            TabButton {
                text: qsTr(&quot;Bookmarks&quot;)
            }
            TabButton {
                text: qsTr(&quot;Pages&quot;)
            }
        }

        GroupBox {
            anchors.fill: parent
            anchors.leftMargin: sidebarTabs.height

            StackLayout {
                anchors.fill: parent
                currentIndex: sidebarTabs.currentIndex
                component InfoField: TextInput {
                    width: parent.width
                    selectByMouse: true
                    readOnly: true
                    wrapMode: Text.WordWrap
                }
                Column {
                    spacing: 6
                    width: parent.width - 6
                    Label { font.bold: true; text: qsTr(&quot;Title&quot;) }
                    InfoField { text: doc.title }
                    Label { font.bold: true; text: qsTr(&quot;Author&quot;) }
                    InfoField { text: doc.author }
                    Label { font.bold: true; text: qsTr(&quot;Subject&quot;) }
                    InfoField { text: doc.subject }
                    Label { font.bold: true; text: qsTr(&quot;Keywords&quot;) }
                    InfoField { text: doc.keywords }
                    Label { font.bold: true; text: qsTr(&quot;Producer&quot;) }
                    InfoField { text: doc.producer }
                    Label { font.bold: true; text: qsTr(&quot;Creator&quot;) }
                    InfoField { text: doc.creator }
                    Label { font.bold: true; text: qsTr(&quot;Creation date&quot;) }
                    InfoField { text: doc.creationDate }
                    Label { font.bold: true; text: qsTr(&quot;Modification date&quot;) }
                    InfoField { text: doc.modificationDate }
                }
                ListView {
                    id: searchResultsList
                    implicitHeight: parent.height
                    model: view.searchModel
                    currentIndex: view.searchModel.currentResult
                    ScrollBar.vertical: ScrollBar { }
                    delegate: ItemDelegate {
                        id: resultDelegate
                        required property int index
                        required property int page
                        required property string contextBefore
                        required property string contextAfter
                        width: parent ? parent.width : 0
                        RowLayout {
                            anchors.fill: parent
                            spacing: 0
                            Label {
                                text: &quot;Page &quot; + (resultDelegate.page + 1) + &quot;: &quot;
                            }
                            Label {
                                text: resultDelegate.contextBefore
                                elide: Text.ElideLeft
                                horizontalAlignment: Text.AlignRight
                                Layout.fillWidth: true
                                Layout.preferredWidth: parent.width / 2
                            }
                            Label {
                                font.bold: true
                                text: view.searchString
                                width: implicitWidth
                            }
                            Label {
                                text: resultDelegate.contextAfter
                                elide: Text.ElideRight
                                Layout.fillWidth: true
                                Layout.preferredWidth: parent.width / 2
                            }
                        }
                        highlighted: ListView.isCurrentItem
                        onClicked: view.searchModel.currentResult = resultDelegate.index
                    }
                }
                TreeView {
                    id: bookmarksTree
                    implicitHeight: parent.height
                    implicitWidth: parent.width
                    columnWidthProvider: function() { return width }
                    delegate: TreeViewDelegate {
                        required property int page
                        required property point location
                        required property real zoom
                        onClicked: view.goToLocation(page, location, zoom)
                    }
                    model: PdfBookmarkModel {
                        document: doc
                    }
                    ScrollBar.vertical: ScrollBar { }
                }
                GridView {
                    id: thumbnailsView
                    implicitWidth: parent.width
                    implicitHeight: parent.height
                    model: doc.pageModel
                    cellWidth: width / 2
                    cellHeight: cellWidth + 10
                    delegate: Item {
                        required property int index
                        required property string label
                        required property size pointSize
                        width: thumbnailsView.cellWidth
                        height: thumbnailsView.cellHeight
                        Rectangle {
                            id: paper
                            width: image.width
                            height: image.height
                            x: (parent.width - width) / 2
                            y: (parent.height - height - pageNumber.height) / 2
                            PdfPageImage {
                                id: image
                                document: doc
                                currentFrame: index
                                asynchronous: true
                                fillMode: Image.PreserveAspectFit
                                property bool landscape: pointSize.width &amp;gt; pointSize.height
                                width: landscape ? thumbnailsView.cellWidth - 6
                                                 : height * pointSize.width / pointSize.height
                                height: landscape ? width * pointSize.height / pointSize.width
                                                  : thumbnailsView.cellHeight - 14
                                sourceSize.width: width
                                sourceSize.height: height
                            }
                        }
                        Text {
                            id: pageNumber
                            anchors.bottom: parent.bottom
                            anchors.horizontalCenter: parent.horizontalCenter
                            text: label
                        }
                        TapHandler {
                            onTapped: view.goToPage(index)
                        }
                    }
                }
            }
        }
    }
</db:programlisting>
<db:para>Finally, add a second toolbar as a footer, to hold the search field, search up/down buttons and some status information:</db:para>
<db:programlisting language="cpp">    footer: ToolBar {
        height: footerRow.implicitHeight + 6
        RowLayout {
            id: footerRow
            anchors.fill: parent
            ToolButton {
                action: Action {
                    id: sidebarOpenAction
                    checkable: true
                    checked: sidebar.opened
                    icon.source: checked ? &quot;qrc:/pdfviewer/resources/sidebar-collapse-left.svg&quot; : &quot;qrc:/pdfviewer/resources/sidebar-expand-left.svg&quot;
                    onTriggered: sidebar.open()
                }
                ToolTip.visible: enabled &amp;amp;&amp;amp; hovered
                ToolTip.delay: 2000
                ToolTip.text: &quot;open sidebar&quot;
            }
            ToolButton {
                action: Action {
                    icon.source: &quot;qrc:/pdfviewer/resources/go-up-search.svg&quot;
                    shortcut: StandardKey.FindPrevious
                    onTriggered: view.searchBack()
                }
                ToolTip.visible: enabled &amp;amp;&amp;amp; hovered
                ToolTip.delay: 2000
                ToolTip.text: &quot;find previous&quot;
            }
            TextField {
                id: searchField
                placeholderText: &quot;search&quot;
                Layout.minimumWidth: 150
                Layout.fillWidth: true
                Layout.bottomMargin: 3
                onAccepted: {
                    sidebar.open()
                    sidebarTabs.setCurrentIndex(0)
                }
                Image {
                    visible: searchField.text !== &quot;&quot;
                    source: &quot;qrc:/pdfviewer/resources/edit-clear.svg&quot;
                    sourceSize.height: searchField.height - 6
                    anchors {
                        right: parent.right
                        verticalCenter: parent.verticalCenter
                        margins: 3
                    }
                    TapHandler {
                        onTapped: searchField.clear()
                    }
                }
            }
            ToolButton {
                action: Action {
                    icon.source: &quot;qrc:/pdfviewer/resources/go-down-search.svg&quot;
                    shortcut: StandardKey.FindNext
                    onTriggered: view.searchForward()
                }
                ToolTip.visible: enabled &amp;amp;&amp;amp; hovered
                ToolTip.delay: 2000
                ToolTip.text: &quot;find next&quot;
            }
            Label {
                id: statusLabel
                property size implicitPointSize: doc.pagePointSize(view.currentPage)
                text: &quot;page &quot; + (currentPageSB.value) + &quot; of &quot; + doc.pageCount +
                      &quot; scale &quot; + view.renderScale.toFixed(2) +
                      &quot; original &quot; + implicitPointSize.width.toFixed(1) + &quot;x&quot; + implicitPointSize.height.toFixed(1) + &quot; pt&quot;
                visible: doc.pageCount &amp;gt; 0
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="files-and-attributions">
<db:title>Files and Attributions</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebengine.git/tree/examples/multipage?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:section>
</db:article>
