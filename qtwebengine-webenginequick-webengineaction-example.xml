<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Action Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A simple browser implemented using WebEngineActions.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/webengineaction-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis><db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> Action Example</db:emphasis> demonstrates how to perform actions on a web page using the <db:link xlink:href="qml-qtwebengine-webengineaction.xml">WebEngineAction</db:link> type. It shows the minimum amount of code needed to bind browser functionalities to input elements and build up a custom context menu.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="working-with-web-engine-actions">
<db:title>Working With Web Engine Actions</db:title>
<db:para>An intended use of <db:link xlink:href="qml-qtwebengine-webengineaction.xml">WebEngineAction</db:link> is building a connection between UI elements and browser commands. It can be added to menus and toolbars via assigning its properties to the corresponding ones of the element.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-controls2-toolbutton.xml">ToolButton</db:link> relies on the properties provided by a <db:link xlink:href="qml-qtwebengine-webengineaction.xml">WebEngineAction</db:link>. Clicking the button triggers backwards navigation on the originating <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> of the action.</db:para>
<db:programlisting language="cpp">            ToolButton {
                property int itemAction: WebEngineView.Back
                text: webEngineView.action(itemAction).text
                enabled: webEngineView.action(itemAction).enabled
                onClicked: webEngineView.action(itemAction).trigger()
                icon.name: webEngineView.action(itemAction).iconName
                display: AbstractButton.TextUnderIcon
            }
</db:programlisting>
<db:para>The simplest way to create custom context menus is enumerating the required <db:link xlink:href="qml-qtwebengine-webengineaction.xml">WebEngineAction</db:link> types in a data model and instantiating <db:link xlink:href="qml-qtquick-controls2-menuitem.xml">MenuItem</db:link> types for them, for example using a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link>.</db:para>
<db:programlisting language="cpp">        property Menu contextMenu: Menu {
            Repeater {
                model: [
                    WebEngineView.Back,
                    WebEngineView.Forward,
                    WebEngineView.Reload,
                    WebEngineView.SavePage,
                    WebEngineView.Copy,
                    WebEngineView.Paste,
                    WebEngineView.Cut
                ]
                MenuItem {
                    text: webEngineView.action(modelData).text
                    enabled: webEngineView.action(modelData).enabled
                    onClicked: webEngineView.action(modelData).trigger()
                    icon.name: webEngineView.action(modelData).iconName
                    display: MenuItem.TextBesideIcon
                }
            }
        }
</db:programlisting>
<db:para>Assigning a <db:link xlink:href="qml-qtwebengine-webengineaction.xml">WebEngineAction</db:link> to multiple UI elements will keep them in sync. As it can be seen in the picture above, if the browser engine disables a navigation action, both corresponding menu items will be disabled.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebengine.git/tree/examples/webenginequick/webengineaction?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
