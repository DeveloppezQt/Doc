<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Playlist QML Type</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>For specifying a list of media to be played.</db:para>
<db:para>This type was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtMultimedia 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Playlist is part of <db:simplelist><db:member>multimedia_qml</db:member><db:member>multimedia_audio_qml</db:member><db:member>multimedia_video_qml</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Playlist type provides a way to play a list of media with the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link>, Audio and Video types. It can be used as a data source for view elements (such as <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>) and other elements that interact with model data (such as Repeater). When used as a data model, each playlist item's source URL can be accessed using the <db:code>source</db:code> role.</db:para>
<db:programlisting language="qml">Item {
    width: 400;
    height: 300;

    Audio {
        id: player;
        playlist: Playlist {
            id: playlist
            PlaylistItem { source: &quot;song1.ogg&quot;; }
            PlaylistItem { source: &quot;song2.ogg&quot;; }
            PlaylistItem { source: &quot;song3.ogg&quot;; }
        }
    }

    ListView {
        model: playlist;
        delegate: Text {
            font.pixelSize: 16;
            text: source;
        }
    }

    MouseArea {
        anchors.fill: parent;
        onPressed: {
            if (player.playbackState != Audio.PlayingState) {
                player.play();
            } else {
                player.pause();
            }
        }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link></db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-audio.xml">Audio</db:link></db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-video.xml">Video</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>currentIndex</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position of the current item in the playlist.</db:para>
</db:section>
<db:section xml:id="currentItemsource-prop">
<db:title>currentItemsource : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>currentItemsource</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the source URL of the current item in the playlist.</db:para>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>error</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the error condition of the playlist.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Value</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdtls.xml#QDtlsError-enum">NoError</db:link></db:para>
</db:td>
<db:td>
<db:para>No errors</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FormatError</db:para>
</db:td>
<db:td>
<db:para>Format error.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FormatNotSupportedError</db:para>
</db:td>
<db:td>
<db:para>Format not supported.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NetworkError</db:para>
</db:td>
<db:td>
<db:para>Network error.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AccessDeniedError</db:para>
</db:td>
<db:td>
<db:para>Access denied error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>errorString</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a string describing the current error condition of the playlist.</db:para>
</db:section>
<db:section xml:id="itemCount-prop">
<db:title>[read-only] itemCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>itemCount</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of items in the playlist.</db:para>
</db:section>
<db:section xml:id="playbackMode-prop">
<db:title>playbackMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>playbackMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the order in which items in the playlist are played.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Value</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>CurrentItemOnce</db:para>
</db:td>
<db:td>
<db:para>The current item is played only once.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CurrentItemInLoop</db:para>
</db:td>
<db:td>
<db:para>The current item is played repeatedly in a loop.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Sequential</db:para>
</db:td>
<db:td>
<db:para>Playback starts from the current and moves through each successive item until the last is reached and then stops. The next item is a null item when the last one is currently playing.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Loop</db:para>
</db:td>
<db:td>
<db:para>Playback restarts at the first item after the last has finished playing.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Random</db:para>
</db:td>
<db:td>
<db:para>Play items in random order.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>[read-only] readOnly : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>readOnly</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property indicates if the playlist can be modified.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="itemAboutToBeInserted-signal">
<db:title>itemAboutToBeInserted(<db:emphasis>start</db:emphasis>, <db:emphasis>end</db:emphasis>)</db:title>
<db:para>This signal is emitted when items are to be inserted into the playlist at <db:code role="parameter">start</db:code> and ending at <db:code role="parameter">end</db:code>.</db:para>
<db:para>The corresponding handler is <db:code>onItemAboutToBeInserted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onItemAboutToBeInserted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="itemAboutToBeRemoved-signal">
<db:title>itemAboutToBeRemoved(<db:emphasis>start</db:emphasis>, <db:emphasis>end</db:emphasis>)</db:title>
<db:para>This signal emitted when items are to be deleted from the playlist at <db:code role="parameter">start</db:code> and ending at <db:code role="parameter">end</db:code>.</db:para>
<db:para>The corresponding handler is <db:code>onItemAboutToBeRemoved</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onItemAboutToBeRemoved</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="itemChanged-signal">
<db:title>itemChanged(<db:emphasis>start</db:emphasis>, <db:emphasis>end</db:emphasis>)</db:title>
<db:para>This signal is emitted after items have been changed in the playlist between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions inclusive.</db:para>
<db:para>The corresponding handler is <db:code>onItemChanged</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onItemChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="itemInserted-signal">
<db:title>itemInserted(<db:emphasis>start</db:emphasis>, <db:emphasis>end</db:emphasis>)</db:title>
<db:para>This signal is emitted after items have been inserted into the playlist. The new items are those between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> inclusive.</db:para>
<db:para>The corresponding handler is <db:code>onItemInserted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onItemInserted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="itemRemoved-signal">
<db:title>itemRemoved(<db:emphasis>start</db:emphasis>, <db:emphasis>end</db:emphasis>)</db:title>
<db:para>This signal is emitted after items have been removed from the playlist. The removed items are those between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> inclusive.</db:para>
<db:para>The corresponding handler is <db:code>onMediaRemoved</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onItemRemoved</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="loadFailed-signal">
<db:title>loadFailed()</db:title>
<db:para>This signal is emitted when the playlist loading failed. <db:link xlink:href="qml-qtmultimedia-playlist.xml#error-prop">error</db:link> and <db:link xlink:href="qml-qtmultimedia-playlist.xml#errorString-prop">errorString</db:link> can be checked for more information on the failure.</db:para>
<db:para>The corresponding handler is <db:code>onLoadFailed</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLoadFailed</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="loaded-signal">
<db:title>loaded()</db:title>
<db:para>This signal is emitted when the playlist loading succeeded.</db:para>
<db:para>The corresponding handler is <db:code>onLoaded</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLoaded</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addItem-method">
<db:title>bool addItem(<db:emphasis>source</db:emphasis>)</db:title>
<db:para>Appends the <db:code role="parameter">source</db:code> URL to the playlist.</db:para>
<db:para>Returns true if the <db:code role="parameter">source</db:code> is added successfully.</db:para>
</db:section>
<db:section xml:id="addItems-method">
<db:title>[since 5.7] bool addItems(<db:emphasis>sources</db:emphasis>)</db:title>
<db:para>Appends the list of URLs in <db:code role="parameter">sources</db:code> to the playlist.</db:para>
<db:para>Returns true if the <db:code role="parameter">sources</db:code> are added successfully.</db:para>
<db:para>This method was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="clear-method">
<db:title>bool clear()</db:title>
<db:para>Removes all the items from the playlist.</db:para>
<db:para>Returns true if the operation is successful.</db:para>
</db:section>
<db:section xml:id="insertItem-method">
<db:title>bool insertItem(<db:emphasis>index</db:emphasis>, <db:emphasis>source</db:emphasis>)</db:title>
<db:para>Inserts the <db:code role="parameter">source</db:code> URL to the playlist at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>Returns true if the <db:code role="parameter">source</db:code> is added successfully.</db:para>
</db:section>
<db:section xml:id="insertItems-method">
<db:title>[since 5.7] bool insertItems(<db:emphasis>index</db:emphasis>, <db:emphasis>sources</db:emphasis>)</db:title>
<db:para>Inserts the list of URLs in <db:code role="parameter">sources</db:code> to the playlist at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>Returns true if the <db:code role="parameter">sources</db:code> are added successfully.</db:para>
<db:para>This method was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="itemSource-method">
<db:title>url itemSource(<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the source URL of the item at the given <db:code role="parameter">index</db:code> in the playlist.</db:para>
</db:section>
<db:section xml:id="load-method">
<db:title>load(<db:emphasis>location</db:emphasis>, <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Loads a playlist from the given <db:code role="parameter">location</db:code>. If <db:code role="parameter">format</db:code> is specified, it is used, otherwise the format is guessed from the location name and the data.</db:para>
<db:para>New items are appended to the playlist.</db:para>
<db:para><db:code>onloaded()</db:code> is emitted if the playlist loads successfully, otherwise <db:code>onLoadFailed()</db:code> is emitted with <db:link xlink:href="qml-qtmultimedia-playlist.xml#error-prop">error</db:link> and <db:link xlink:href="qml-qtmultimedia-playlist.xml#errorString-prop">errorString</db:link> defined accordingly.</db:para>
</db:section>
<db:section xml:id="moveItem-method">
<db:title>[since 5.7] bool moveItem(<db:emphasis>from</db:emphasis>, <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Moves the item at index position <db:code role="parameter">from</db:code> to index position <db:code role="parameter">to</db:code>.</db:para>
<db:para>Returns true if the item is moved successfully.</db:para>
<db:para>This method was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="next-method">
<db:title>next()</db:title>
<db:para>Advances to the next item in the playlist.</db:para>
</db:section>
<db:section xml:id="nextIndex-method">
<db:title>int nextIndex(<db:emphasis>steps</db:emphasis>)</db:title>
<db:para>Returns the index of the item in the playlist which would be current after calling <db:link xlink:href="qml-qtmultimedia-playlist.xml#next-method">next</db:link>() <db:code role="parameter">steps</db:code> times.</db:para>
<db:para>Returned value depends on the size of the playlist, the current position and the playback mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-playlist.xml#playbackMode-prop">playbackMode</db:link></db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-playlist.xml#previousIndex-method">previousIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previous-method">
<db:title>previous()</db:title>
<db:para>Returns to the previous item in the playlist.</db:para>
</db:section>
<db:section xml:id="previousIndex-method">
<db:title>int previousIndex(<db:emphasis>steps</db:emphasis>)</db:title>
<db:para>Returns the index of the item in the playlist which would be current after calling <db:link xlink:href="qml-qtmultimedia-playlist.xml#previous-method">previous</db:link>() <db:code role="parameter">steps</db:code> times.</db:para>
<db:para>Returned value depends on the size of the playlist, the current position and the playback mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-playlist.xml#playbackMode-prop">playbackMode</db:link></db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-playlist.xml#nextIndex-method">nextIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeItem-method">
<db:title>bool removeItem(<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removed the item at the given <db:code role="parameter">index</db:code> from the playlist.</db:para>
<db:para>Returns true if the <db:code role="parameter">source</db:code> is removed successfully.</db:para>
</db:section>
<db:section xml:id="removeItems-method">
<db:title>[since 5.7] bool removeItems(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Removes items in the playlist from <db:code role="parameter">start</db:code> to <db:code role="parameter">end</db:code> inclusive.</db:para>
<db:para>Returns true if the items are removed successfully.</db:para>
<db:para>This method was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="save-method">
<db:title>bool save(<db:emphasis>location</db:emphasis>, <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Saves the playlist to the given <db:code role="parameter">location</db:code>. If <db:code role="parameter">format</db:code> is specified, it is used, otherwise the format is guessed from the location name.</db:para>
<db:para>Returns true if the playlist is saved successfully.</db:para>
</db:section>
<db:section xml:id="shuffle-method">
<db:title>shuffle()</db:title>
<db:para>Shuffles items in the playlist.</db:para>
</db:section>
</db:section>
</db:article>
