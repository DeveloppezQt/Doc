<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Settings QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides persistent platform-independent application settings.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt.labs.settings 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Settings is part of <db:simplelist><db:member>settings</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Settings type provides persistent platform-independent application settings.</db:para>
<db:note>
<db:para>This type is made available by importing the <db:emphasis role="bold">Qt.labs.settings</db:emphasis> module. <db:emphasis>Types in the Qt.labs module are not guaranteed to remain compatible in future versions.</db:emphasis></db:para>
</db:note>
<db:para>Users normally expect an application to remember its settings (window sizes and positions, options, etc.) across sessions. The Settings type enables you to save and restore such application settings with the minimum of effort.</db:para>
<db:para>Individual setting values are specified by declaring properties within a Settings element. All <db:link xlink:href="qtqml-typesystem-basictypes.xml">basic type</db:link> properties are supported. The recommended approach is to use property aliases in order to get automatic property updates both ways. The following example shows how to use Settings to store and restore the geometry of a window.</db:para>
<db:programlisting language="qml">import QtQuick.Window 2.1
import Qt.labs.settings 1.0

Window {
    id: window

    width: 800
    height: 600

    Settings {
        property alias x: window.x
        property alias y: window.y
        property alias width: window.width
        property alias height: window.height
    }
}
</db:programlisting>
<db:para>At first application startup, the window gets default dimensions specified as 800x600. Notice that no default position is specified - we let the window manager handle that. Later when the window geometry changes, new values will be automatically stored to the persistent settings. The second application run will get initial values from the persistent settings, bringing the window back to the previous position and size.</db:para>
<db:para>A fully declarative syntax, achieved by using property aliases, comes at the cost of storing persistent settings whenever the values of aliased properties change. Normal properties can be used to gain more fine-grained control over storing the persistent settings. The following example illustrates how to save a setting on component destruction.</db:para>
<db:programlisting language="qml">import QtQuick 2.1
import Qt.labs.settings 1.0

Item {
    id: page

    state: settings.state

    states: [
        State {
            name: &quot;active&quot;
            // ...
        },
        State {
            name: &quot;inactive&quot;
            // ...
        }
    ]

    Settings {
        id: settings
        property string state: &quot;active&quot;
    }

    Component.onDestruction: {
        settings.state = page.state
    }
}
</db:programlisting>
<db:para>Notice how the default value is now specified in the persistent setting property, and the actual property is bound to the setting in order to get the initial value from the persistent settings.</db:para>
<db:section xml:id="application-identifiers">
<db:title>Application Identifiers</db:title>
<db:para>Application specific settings are identified by providing application <db:link xlink:href="qcoreapplication.xml#applicationName-prop">name</db:link>, <db:link xlink:href="qcoreapplication.xml#organizationName-prop">organization</db:link> and <db:link xlink:href="qcoreapplication.xml#organizationDomain-prop">domain</db:link>, or by specifying <db:link xlink:href="qml-qt-labs-settings-settings.xml#fileName-prop">fileName</db:link>.</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);
    app.setOrganizationName(&quot;Some Company&quot;);
    app.setOrganizationDomain(&quot;somecompany.com&quot;);
    app.setApplicationName(&quot;Amazing Application&quot;);

    QQmlApplicationEngine engine(&quot;main.qml&quot;);
    return app.exec();
}
</db:programlisting>
<db:para>These are typically specified in C++ in the beginning of <db:code>main()</db:code>, but can also be controlled in QML via the following properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#application-prop">Qt.application.name</db:link>,</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#application-prop">Qt.application.organization</db:link> and</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#application-prop">Qt.application.domain</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="categories">
<db:title>Categories</db:title>
<db:para>Application settings may be divided into logical categories by specifying a category name via the <db:link xlink:href="qml-qt-labs-settings-settings.xml#category-prop">category</db:link> property. Using logical categories not only provides a cleaner settings structure, but also prevents possible conflicts between setting keys.</db:para>
<db:para>If several categories are required, use several Settings objects, each with their own category:</db:para>
<db:programlisting language="qml">Item {
    id: panel

    visible: true

    Settings {
        category: &quot;OutputPanel&quot;
        property alias visible: panel.visible
        // ...
    }

    Settings {
        category: &quot;General&quot;
        property alias fontSize: fontSizeSpinBox.value
        // ...
    }
}
</db:programlisting>
<db:para>Instead of ensuring that all settings in the application have unique names, the settings can be divided into unique categories that may then contain settings using the same names that are used in other categories - without a conflict.</db:para>
</db:section>
<db:section xml:id="notes">
<db:title>Notes</db:title>
<db:para>The current implementation is based on <db:link xlink:href="qsettings.xml">QSettings</db:link>. This imposes certain limitations, such as missing change notifications. Writing a setting value using one instance of Settings does not update the value in another Settings instance, even if they are referring to the same setting in the same category.</db:para>
<db:para>The information is stored in the system registry on Windows, and in XML preferences files on macOS. On other Unix systems, in the absence of a standard, INI text files are used. See <db:link xlink:href="qsettings.xml">QSettings</db:link> documentation for more details.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml">QSettings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="category-prop">
<db:title>category : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>category</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the name of the settings category.</db:para>
<db:para>Categories can be used to group related settings together.</db:para>
</db:section>
<db:section xml:id="fileName-prop">
<db:title>[since Qt 5.12] fileName : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>fileName</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the path to the settings file. If the file doesn't already exist, it is created.</db:para>
<db:para>This property was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#fileName">QSettings::fileName</db:link></db:member>
<db:member><db:link xlink:href="qsettings.xml#Format-enum">QSettings::IniFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="setValue-method">
<db:title>[since Qt 5.12] setValue(string <db:emphasis>key</db:emphasis>, var <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the value of setting key to value. If the key already exists, the previous value is overwritten.</db:para>
<db:para>This method was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-settings-settings.xml#value-method">value</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#setValue">QSettings::setValue</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value-method">
<db:title>[since Qt 5.12] var value(string <db:emphasis>key</db:emphasis>, var <db:emphasis>defaultValue</db:emphasis>)</db:title>
<db:para>Returns the value for setting <db:code role="parameter">key</db:code>. If the setting doesn't exist, returns <db:code role="parameter">defaultValue</db:code>.</db:para>
<db:para>This method was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-settings-settings.xml#setValue-method">setValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#value">QSettings::value</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
