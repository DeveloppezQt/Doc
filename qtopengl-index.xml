<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt OpenGL</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt OpenGL module offers classes that make it easy to use OpenGL in Qt applications.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt has two main approaches to UI development: <db:link xlink:href="">Qt Quick</db:link> and <db:link xlink:href="">Qt Widgets</db:link>. They exist to support different types of user interfaces, and build on separate graphics engines that have been optimized for each of these types.</db:para>
<db:para>It is possible to combine code written in the OpenGL graphics API with both of these user interface types in Qt. This can be useful when the application has its own OpenGL-dependent code, or when it is integrating with a third-party OpenGL-based renderer.</db:para>
<db:para>The Qt OpenGL module contains convenience classes to make this type of integration easier and faster.</db:para>
<db:section xml:id="qt-opengl-and-qt-widgets">
<db:title>Qt OpenGL and Qt Widgets</db:title>
<db:para><db:link xlink:href="">Qt Widgets</db:link> is typically rendered by a highly optimized and accurate software rasterizer, and the final content reproduced on screen using a method appropriate for the platform where the application is running.</db:para>
<db:para>But it is also possible to combine <db:link xlink:href="">Qt Widgets</db:link> with OpenGL. The main entry point for this is the <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> class. This class can be used to enable OpenGL rendering for a certain part of the widget tree, and the classes in the Qt OpenGL module can be used to facilitate any application-side OpenGL code.</db:para>
</db:section>
<db:section xml:id="qt-opengl-and-qt-quick">
<db:title>Qt OpenGL and Qt Quick</db:title>
<db:para><db:link xlink:href="">Qt Quick</db:link> is optimized for hardware-accelerated rendering. By default, it will be built on the low-level graphics API most appropriate for the target platform.</db:para>
<db:para>For instance, it will default to <db:code>Direct3D</db:code> on Windows, whereas on macOS, it will default to <db:code>Metal</db:code>. But it is also possible to manually select OpenGL as the active graphics API on platforms where this is supported.</db:para>
<db:para>For more details on enabling OpenGL with <db:link xlink:href="">Qt Quick</db:link>, see <db:link xlink:href="">scenegraph renderer documentation</db:link>.</db:para>
</db:section>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module's C++ API requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link> and <db:link xlink:href="resources.xml#qmake">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module component in the <db:code>Qt6</db:code> package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS OpenGL)
target_link_libraries(mytarget PRIVATE Qt6::OpenGL)
</db:programlisting>
<db:para>For more details, see the <db:link xlink:href="">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the <db:code>QT</db:code> variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT += opengl
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="examples-widgets-opengl.xml">Qt OpenGL Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="reference">
<db:title>Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtopengl-module.xml">C++ Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="module-evolution">
<db:title>Module Evolution</db:title>
<db:para><db:link xlink:href="opengl-changes-qt6.xml">Changes to Qt OpenGL</db:link> lists important changes in the module API and functionality that were done for the Qt 6 series of Qt.</db:para>
</db:section>
<db:section xml:id="licenses-and-trademarks">
<db:title>Licenses and Trademarks</db:title>
<db:para>The Qt OpenGL module is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under free software licenses: The <db:link xlink:href="">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="">GNU General Public License, version 2</db:link>. See <db:link xlink:href="">Qt Licensing</db:link> for further details.</db:para>
<db:para>OpenGL\sup{&#174;} is a trademark of Silicon Graphics, Inc. in the United States and other countries.</db:para>
</db:section>
</db:article>
