<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Applications</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Essential documentation for QML application developers.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QML is a declarative language that allows user interfaces to be described in terms of their visual components and how they interact and relate with one another. It is a highly readable language that was designed to enable components to be interconnected in a dynamic manner, and it allows components to be easily reused and customized within a user interface. Using the QtQuick module, designers and developers can easily build fluid animated user interfaces in QML, and have the option of connecting these user interfaces to any back-end C++ libraries.</db:para>
<db:section xml:id="what-is-qml">
<db:title>What is QML?</db:title>
<db:para>QML is a user interface specification and programming language. It allows developers and designers alike to create highly performant, fluidly animated and visually appealing applications. QML offers a highly readable, declarative, JSON-like syntax with support for imperative JavaScript expressions combined with dynamic property bindings.</db:para>
<db:para>The QML language and engine infrastructure is provided by the <db:link xlink:href="qtqml-index.xml">Qt QML</db:link> module. For in-depth information about the QML language, please see the <db:link xlink:href="qtqml-index.xml">Qt QML</db:link> module documentation.</db:para>
<db:para>The following pages contain more information about QML:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmlfirststeps.xml">First Steps with QML</db:link> - begin using QML with these examples</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/quick-projects.html">Creating Qt Quick Projects in Qt Creator</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlreference.xml">The QML Reference</db:link> - reference about the QML constructs and features</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-codingconventions.xml">QML Coding Conventions</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-glossary.xml">Glossary of QML Terms</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="what-is-qt-quick">
<db:title>What is Qt Quick?</db:title>
<db:para>Qt Quick is the standard library of types and functionality for QML. It includes visual types, interactive types, animations, models and views, particle effects and shader effects. A QML application developer can get access to all of that functionality with a single import statement.</db:para>
<db:para>The QtQuick QML library is provided by the <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module. For in-depth information about the various QML types and other functionality provided by Qt Quick, please see the <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module documentation.</db:para>
</db:section>
<db:section xml:id="qml-user-interfaces">
<db:title>QML User Interfaces</db:title>
<db:para>For creating or customizing graphical user interfaces, Qt Quick adds visual types, animation types, and other QML types in addition to the standard QML types from Qt QML. <db:link xlink:href="http://doc.qt.io/qtcreator/creator-using-qt-quick-designer.html">Qt Quick Designer</db:link> is integrated within Qt Creator and supports QtQuick 2 from Qt Creator version 2.7 and onwards.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-visual.xml">Visual types in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-userinput.xml">Responding to User Input in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-animations.xml">Animations in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-text.xml">Displaying Text in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-layouts.xml">Layouts in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-styling.xml">Style and Theme Support</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-integratingjs.xml">Integrating JavaScript in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="scalability.xml">Scalability</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="buttons-menus-and-other-controls">
<db:title>Buttons, Menus, and other Controls</db:title>
<db:para>For a set of basic UI controls, the <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> module implements several controls such as buttons, menus, and views. These controls come with several built-in styles that can be used, and also support the creation of custom styles.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols2-guidelines.xml">Qt Quick Controls Guidelines</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquicktemplates2-index.xml">Qt Quick Templates 2</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="special-effects">
<db:title>Special Effects</db:title>
<db:para>Several Qt modules provide types for creating special effects in applications. Their respective pages contain more information about specific uses.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-effects-particles.xml">Particle Effects</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="graphicaleffects.xml">Graphical Effects</db:link> - for creating image composition effects.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewing-web-content-in-qml-applications">
<db:title>Viewing Web Content in QML Applications</db:title>
<db:para>The QML types, <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> and <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link>, render and display dynamic web content. The only difference between the two is that the latter uses a native web view if available. Both these types can load a URL or an HTML string. To read more about them and view code samples, see <db:link xlink:href="qtwebengine-index.xml">Qt WebEngine</db:link> and <db:link xlink:href="qtwebview-index.xml">Qt WebView</db:link>.</db:para>
</db:section>
<db:section xml:id="sensors-gestures-and-touch-interfaces">
<db:title>Sensors, Gestures, and Touch Interfaces</db:title>
<db:para>The <db:link xlink:href="qtsensors-index.xml">Qt Sensors</db:link> module allows applications to read information from sensors such as accelerometers and tilt sensors. There is a common QML API for different platforms and can be extended in C++.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtsensors-qmlmodule.xml">Qt Sensors QML Types</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtsensors-examples.xml">Qt Sensors Examples</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="compatmap.xml">Compatibility Map</db:link> - lists support level for different mobile platforms</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="multimedia-content">
<db:title>Multimedia Content</db:title>
<db:para>The <db:link xlink:href="qtmultimedia-index.xml">Qt Multimedia</db:link> module enables applications to handle various media content with a convenient set of QML types. These QML types can be extended in C++.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt5-intro.xml#multimedia">Multimedia</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="audiooverview.xml">Audio Overview</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="videooverview.xml">Video Overview</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cameraoverview.xml">Camera Overview</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="radiooverview.xml">Radio Overview</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtaudioengine-qmlmodule.xml">Qt Audio Engine</db:link> - for 3D positional audio playback and content management.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="mobile-devices">
<db:title>Mobile Devices</db:title>
<db:para>Several Qt modules provide QML APIs for networked and mobile devices. The QML types provide access to the Bluetooth, Near-Field Communications (NFC), and GPS-enabled devices.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtpositioning-index.xml">Qt Positioning</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtlocation-index.xml">Qt Location</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtbluetooth-index.xml">Qt Bluetooth</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtnfc-index.xml">Qt NFC</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more information, visit the <db:link xlink:href="topics-network-connectivity.xml">Networking and Connectivity</db:link> and <db:link xlink:href="mobiledevelopment.xml">Mobile APIs</db:link> pages.</db:para>
</db:section>
<db:section xml:id="code-samples-and-demos">
<db:title>Code Samples and Demos</db:title>
<db:para>To learn more about uses of QML code, there are several code samples which show how QML types are used. In addition, there are several demos which show how QML code is used in applications.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtdoc-tutorials-alarms-example.xml">Getting Started Programming with Qt Quick</db:link> - a tutorial showing the creation of a simple QML text editor.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-codesamples.xml">Qt Quick Examples and Tutorials</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="advanced-application-development-topics">
<db:title>Advanced Application Development Topics</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-topic.xml">Integrating QML and C++</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-deployment.xml">Deploying QML Applications</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-bestpractices.xml">Best Practices for QML and Qt Quick</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-performance.xml">Performance Considerations and Suggestions</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-internationalization.xml">Internationalization and Localization</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Testing and Debugging</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-qmlscene.xml">Prototyping with qmlscene</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-debugging.xml">Debugging QML Applications</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquicktest-index.xml">Qt Quick Test: QML Unit Testing Framework</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="other-qml-modules">
<db:title>Other QML Modules</db:title>
<db:para>Qt Quick only provides basic visual types and much of Qt's functionality is exposed to QML through other modules. If you require the functionality of those modules, you should browse their QML documentation.</db:para>
<db:para>The <db:link xlink:href="modules-qml.xml">All QML APIs by Module</db:link> contains a list of all QML modules in Qt 5.</db:para>
</db:section>
<db:section xml:id="related-topics">
<db:title>Related Topics</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-porting-qt5.xml">Porting QML Applications to Qt 5</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
