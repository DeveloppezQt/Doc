<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusAbstractInterface Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusabstractinterface.xml">QDBusAbstractInterface</db:link> class is the base class for all D-Bus interfaces in the Qt D-Bus binding, allowing access to remote interfaces.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusAbstractInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdbusconnectioninterface.xml" xlink:role="class">QDBusConnectionInterface</db:link> and <db:link xlink:href="qdbusinterface.xml" xlink:role="class">QDBusInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Generated-code classes also derive from <db:link xlink:href="qdbusabstractinterface.xml">QDBusAbstractInterface</db:link>, all methods described here are also valid for generated-code classes. In addition to those described here, generated-code classes provide member functions for the remote methods, which allow for compile-time checking of the correct parameters and return values, as well as property type-matching and signal parameter-matching.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusxml2cpp.xml">The QDBus compiler</db:link></db:member>
<db:member><db:link xlink:href="qdbusinterface.xml">QDBusInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QDBusAbstractInterface">
<db:title>[virtual noexcept] QDBusAbstractInterface::~QDBusAbstractInterface()</db:title>
<db:para>Releases this object's resources.</db:para>
</db:section>
<db:section xml:id="asyncCall">
<db:title>[since 4.5] QDBusPendingCall QDBusAbstractInterface::asyncCall(const QString &amp;<db:emphasis>method</db:emphasis>, const QVariant &amp;<db:emphasis>arg1</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg2</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg3</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg4</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg5</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg6</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg7</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg8</db:emphasis> = QVariant())</db:title>
<db:para>Calls the method <db:code role="parameter">method</db:code> on this interface and passes the parameters to this function to the method.</db:para>
<db:para>The parameters to <db:code>call</db:code> are passed on to the remote function via D-Bus as input arguments. The returned <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> object can be used to find out information about the reply.</db:para>
<db:para>This function can be used with up to 8 parameters, passed in arguments <db:code role="parameter">arg1</db:code>, <db:code role="parameter">arg2</db:code>, <db:code role="parameter">arg3</db:code>, <db:code role="parameter">arg4</db:code>, <db:code role="parameter">arg5</db:code>, <db:code role="parameter">arg6</db:code>, <db:code role="parameter">arg7</db:code> and <db:code role="parameter">arg8</db:code>. If you need more than 8 parameters or if you have a variable number of parameters to be passed, use <db:link xlink:href="qdbusabstractinterface.xml#asyncCallWithArgumentList">asyncCallWithArgumentList</db:link>().</db:para>
<db:para>It can be used the following way:</db:para>
<db:programlisting language="cpp">QString value = retrieveValue();
QDBusPendingCall pcall = interface-&gt;asyncCall(QLatin1String(&quot;Process&quot;), value);

QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(pcall, this);

QObject::connect(watcher, SIGNAL(finished(QDBusPendingCallWatcher*)),
                 this, SLOT(callFinishedSlot(QDBusPendingCallWatcher*)));
</db:programlisting>
<db:para>This example illustrates function calling with 0, 1 and 2 parameters and illustrates different parameter types passed in each (the first call to <db:code>&quot;ProcessWorkUnicode&quot;</db:code> will contain one Unicode string, the second call to <db:code>&quot;ProcessWork&quot;</db:code> will contain one string and one byte array).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="asyncCallWithArgumentList">
<db:title>[since 4.5] QDBusPendingCall QDBusAbstractInterface::asyncCallWithArgumentList(const QString &amp;<db:emphasis>method</db:emphasis>, const QList&lt;QVariant&gt; &amp;<db:emphasis>args</db:emphasis>)</db:title>
<db:para>Places a call to the remote method specified by <db:code role="parameter">method</db:code> on this interface, using <db:code role="parameter">args</db:code> as arguments. This function returns a <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> object that can be used to track the status of the reply and access its contents once it has arrived.</db:para>
<db:para>Normally, you should place calls using <db:link xlink:href="qdbusabstractinterface.xml#asyncCall">asyncCall</db:link>().</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="call">
<db:title>QDBusMessage QDBusAbstractInterface::call(const QString &amp;<db:emphasis>method</db:emphasis>, const QVariant &amp;<db:emphasis>arg1</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg2</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg3</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg4</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg5</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg6</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg7</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg8</db:emphasis> = QVariant())</db:title>
<db:para>Calls the method <db:code role="parameter">method</db:code> on this interface and passes the parameters to this function to the method.</db:para>
<db:para>The parameters to <db:code>call</db:code> are passed on to the remote function via D-Bus as input arguments. Output arguments are returned in the <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> reply. If the reply is an error reply, <db:link xlink:href="qdbusabstractinterface.xml#lastError">lastError</db:link>() will also be set to the contents of the error message.</db:para>
<db:para>This function can be used with up to 8 parameters, passed in arguments <db:code role="parameter">arg1</db:code>, <db:code role="parameter">arg2</db:code>, <db:code role="parameter">arg3</db:code>, <db:code role="parameter">arg4</db:code>, <db:code role="parameter">arg5</db:code>, <db:code role="parameter">arg6</db:code>, <db:code role="parameter">arg7</db:code> and <db:code role="parameter">arg8</db:code>. If you need more than 8 parameters or if you have a variable number of parameters to be passed, use <db:link xlink:href="qdbusabstractinterface.xml#callWithArgumentList">callWithArgumentList</db:link>().</db:para>
<db:para>It can be used the following way:</db:para>
<db:programlisting language="cpp">QString value = retrieveValue();
QDBusMessage reply;

QDBusReply&lt;int&gt; api = interface-&gt;call(QLatin1String(&quot;GetAPIVersion&quot;));
if (api &gt;= 14)
  reply = interface-&gt;call(QLatin1String(&quot;ProcessWorkUnicode&quot;), value);
else
  reply = interface-&gt;call(QLatin1String(&quot;ProcessWork&quot;), QLatin1String(&quot;UTF-8&quot;), value.toUtf8());
</db:programlisting>
<db:para>This example illustrates function calling with 0, 1 and 2 parameters and illustrates different parameter types passed in each (the first call to <db:code>&quot;ProcessWorkUnicode&quot;</db:code> will contain one Unicode string, the second call to <db:code>&quot;ProcessWork&quot;</db:code> will contain one string and one byte array).</db:para>
</db:section>
<db:section xml:id="call-1">
<db:title>QDBusMessage QDBusAbstractInterface::call(QDBus::CallMode <db:emphasis>mode</db:emphasis>, const QString &amp;<db:emphasis>method</db:emphasis>, const QVariant &amp;<db:emphasis>arg1</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg2</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg3</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg4</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg5</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg6</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg7</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>arg8</db:emphasis> = QVariant())</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Calls the method <db:code role="parameter">method</db:code> on this interface and passes the parameters to this function to the method. If <db:code role="parameter">mode</db:code> is <db:code>NoWaitForReply</db:code>, then this function will return immediately after placing the call, without waiting for a reply from the remote method. Otherwise, <db:code role="parameter">mode</db:code> indicates whether this function should activate the Qt Event Loop while waiting for the reply to arrive.</db:para>
<db:para>This function can be used with up to 8 parameters, passed in arguments <db:code role="parameter">arg1</db:code>, <db:code role="parameter">arg2</db:code>, <db:code role="parameter">arg3</db:code>, <db:code role="parameter">arg4</db:code>, <db:code role="parameter">arg5</db:code>, <db:code role="parameter">arg6</db:code>, <db:code role="parameter">arg7</db:code> and <db:code role="parameter">arg8</db:code>. If you need more than 8 parameters or if you have a variable number of parameters to be passed, use <db:link xlink:href="qdbusabstractinterface.xml#callWithArgumentList">callWithArgumentList</db:link>().</db:para>
<db:para>If this function reenters the Qt event loop in order to wait for the reply, it will exclude user input. During the wait, it may deliver signals and other method calls to your application. Therefore, it must be prepared to handle a reentrancy whenever a call is placed with <db:link xlink:href="qdbusabstractinterface.xml#call">call</db:link>().</db:para>
</db:section>
<db:section xml:id="callWithArgumentList">
<db:title>QDBusMessage QDBusAbstractInterface::callWithArgumentList(QDBus::CallMode <db:emphasis>mode</db:emphasis>, const QString &amp;<db:emphasis>method</db:emphasis>, const QList&lt;QVariant&gt; &amp;<db:emphasis>args</db:emphasis>)</db:title>
<db:para>Places a call to the remote method specified by <db:code role="parameter">method</db:code> on this interface, using <db:code role="parameter">args</db:code> as arguments. This function returns the message that was received as a reply, which can be a normal <db:link xlink:href="qdbusmessage.xml#MessageType-enum">QDBusMessage::ReplyMessage</db:link> (indicating success) or <db:link xlink:href="qdbusmessage.xml#MessageType-enum">QDBusMessage::ErrorMessage</db:link> (if the call failed). The <db:code role="parameter">mode</db:code> parameter specifies how this call should be placed.</db:para>
<db:para>If the call succeeds, <db:link xlink:href="qdbusabstractinterface.xml#lastError">lastError</db:link>() will be cleared; otherwise, it will contain the error this call produced.</db:para>
<db:para>Normally, you should place calls using <db:link xlink:href="qdbusabstractinterface.xml#call">call</db:link>().</db:para>
<db:warning>
<db:para>If you use <db:code>UseEventLoop</db:code>, your code must be prepared to deal with any reentrancy: other method calls and signals may be delivered before this function returns, as well as other Qt queued signals and events.</db:para>
</db:warning>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="callWithCallback">
<db:title>[since 4.3] bool QDBusAbstractInterface::callWithCallback(const QString &amp;<db:emphasis>method</db:emphasis>, const QList&lt;QVariant&gt; &amp;<db:emphasis>args</db:emphasis>, QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>returnMethod</db:emphasis>, const char *<db:emphasis>errorMethod</db:emphasis>)</db:title>
<db:para>Places a call to the remote method specified by <db:code role="parameter">method</db:code> on this interface, using <db:code role="parameter">args</db:code> as arguments. This function returns immediately after queueing the call. The reply from the remote function is delivered to the <db:code role="parameter">returnMethod</db:code> on object <db:code role="parameter">receiver</db:code>. If an error occurs, the <db:code role="parameter">errorMethod</db:code> on object <db:code role="parameter">receiver</db:code> is called instead.</db:para>
<db:para>This function returns <db:code>true</db:code> if the queueing succeeds. It does not indicate that the executed call succeeded. If it fails, the <db:code role="parameter">errorMethod</db:code> is called. If the queueing failed, this function returns <db:code>false</db:code> and no slot will be called.</db:para>
<db:para>The <db:code role="parameter">returnMethod</db:code> must have as its parameters the types returned by the function call. Optionally, it may have a <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> parameter as its last or only parameter. The <db:code role="parameter">errorMethod</db:code> must have a <db:link xlink:href="qdbuserror.xml">QDBusError</db:link> as its only parameter.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuserror.xml">QDBusError</db:link></db:member>
<db:member><db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="callWithCallback-1">
<db:title>bool QDBusAbstractInterface::callWithCallback(const QString &amp;<db:emphasis>method</db:emphasis>, const QList&lt;QVariant&gt; &amp;<db:emphasis>args</db:emphasis>, QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>slot</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function is deprecated. Please use the overloaded version.</db:para>
<db:para>Places a call to the remote method specified by <db:code role="parameter">method</db:code> on this interface, using <db:code role="parameter">args</db:code> as arguments. This function returns immediately after queueing the call. The reply from the remote function or any errors emitted by it are delivered to the <db:code role="parameter">slot</db:code> slot on object <db:code role="parameter">receiver</db:code>.</db:para>
<db:para>This function returns <db:code>true</db:code> if the queueing succeeded: it does not indicate that the call succeeded. If it failed, the slot will be called with an error message. <db:link xlink:href="qdbusabstractinterface.xml#lastError">lastError</db:link>() will not be set under those circumstances.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuserror.xml">QDBusError</db:link></db:member>
<db:member><db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connection">
<db:title>QDBusConnection QDBusAbstractInterface::connection() const</db:title>
<db:para>Returns the connection this interface is associated with.</db:para>
</db:section>
<db:section xml:id="interface">
<db:title>QString QDBusAbstractInterface::interface() const</db:title>
<db:para>Returns the name of this interface.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QDBusAbstractInterface::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if this is a valid reference to a remote object. It returns <db:code>false</db:code> if there was an error during the creation of this interface (for instance, if the remote application does not exist).</db:para>
<db:para>Note: when dealing with remote objects, it is not always possible to determine if it exists when creating a <db:link xlink:href="qdbusinterface.xml">QDBusInterface</db:link>.</db:para>
</db:section>
<db:section xml:id="lastError">
<db:title>QDBusError QDBusAbstractInterface::lastError() const</db:title>
<db:para>Returns the error the last operation produced, or an invalid error if the last operation did not produce an error.</db:para>
</db:section>
<db:section xml:id="path">
<db:title>QString QDBusAbstractInterface::path() const</db:title>
<db:para>Returns the object path that this interface is associated with.</db:para>
</db:section>
<db:section xml:id="service">
<db:title>QString QDBusAbstractInterface::service() const</db:title>
<db:para>Returns the name of the service this interface is associated with.</db:para>
</db:section>
<db:section xml:id="setTimeout">
<db:title>[since 4.8] void QDBusAbstractInterface::setTimeout(int <db:emphasis>timeout</db:emphasis>)</db:title>
<db:para>Sets the timeout in milliseconds for all future DBus calls to <db:code role="parameter">timeout</db:code>. -1 means the default DBus timeout (usually 25 seconds).</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusabstractinterface.xml#timeout">timeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeout">
<db:title>[since 4.8] int QDBusAbstractInterface::timeout() const</db:title>
<db:para>Returns the current value of the timeout in milliseconds. -1 means the default DBus timeout (usually 25 seconds).</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusabstractinterface.xml#setTimeout">setTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
