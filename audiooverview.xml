<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Audio Overview</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Playback, recording and processing of Audio.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/sound-wave-small.jpg"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:section xml:id="audio-features">
<db:title>Audio Features</db:title>
<db:para>Qt Multimedia offers a range of audio classes that cover both low and high level approaches to: audio input, output and processing.</db:para>
</db:section>
<db:section xml:id="audio-implementation-details">
<db:title>Audio Implementation Details</db:title>
<db:section xml:id="playing-compressed-audio">
<db:title>Playing Compressed Audio</db:title>
<db:para>For playing media or audio files that are not simple, uncompressed audio, you can use the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> C++ class, or the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> QML type. The <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class and associated QML types are also capable of playing <db:link xlink:href="videooverview.xml#multimedia-playing-video">video</db:link>, if required.</db:para>
<db:para>See <db:link xlink:href="videooverview.xml#supported-media-formats">Supported Media Formats</db:link> for more detail.</db:para>
<db:para>The media player needs to be connected to a <db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link> object (or the QML <db:link xlink:href="qml-qtmultimedia-audiooutput.xml">AudioOutput</db:link> element) to play back audio.</db:para>
<db:para>Here is how you play a local file using C++:</db:para>
<db:programlisting language="cpp">player = new QMediaPlayer;
audioOutput = new QAudioOutput;
player-&amp;gt;setAudioOutput(audioOutput);
// ...
player-&amp;gt;setSource(QUrl::fromLocalFile(&quot;/Users/me/Music/coolsong.mp3&quot;));
audioOutput-&amp;gt;setVolume(50);
player-&amp;gt;play();
</db:programlisting>
<db:para>The same functionality in QML:</db:para>
<db:programlisting language="qml">MediaPlayer {
    audioOutput: AudioOutput {}
    source: &quot;file:///path/to/my/music.mp3&quot;
    Component.onCompleted: { play() }
}
</db:programlisting>
</db:section>
<db:section xml:id="recording-audio-to-a-file">
<db:title>Recording Audio to a File</db:title>
<db:para>To record audio to a file, you need to create a capture session and connect to it an audio input and a recorder. These elements are implemented with the <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link>, <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link>, and <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> classes. The default constructed <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> selects the system default audio input. The recorder controls the recording process with a simple record() and stop() functions. Additionally, you can use it to select the output location, audio encoder, or file container format.</db:para>
<db:para>A session recording audio from the default microphone would look as follows in C++:</db:para>
<db:programlisting language="cpp">QMediaCaptureSession session;
QAudioInput audioInput;
session.setAudioInput(&amp;amp;input);
QMediaRecorder recorder;
session.setRecorder(&amp;amp;recorder);
recorder.setQuality(QMediaRecorder::HighQuality);
recorder.setOutputLocation(QUrl::fromLocalFile(&quot;test.mp3&quot;));
recorder.record();
</db:programlisting>
<db:para>In QML, the same can be achieved by:</db:para>
<db:programlisting language="qml">CaptureSession {
    audioInput: AudioInput {}
    mediaRecorder: MediaRecorder {
        id: recorder
        outputLocation: &quot;file:///path/to/test.mp3&quot;
    }
    Component.onCompleted: { recorder.record() }
}
</db:programlisting>
<db:para><db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> also provides support for more complex use cases such as image capturing or video recording.</db:para>
</db:section>
<db:section xml:id="low-latency-sound-effects">
<db:title>Low Latency Sound Effects</db:title>
<db:para>In addition to <db:link xlink:href="audiooverview.xml#raw-access">raw access</db:link> to sound devices, the <db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link> class (and <db:link xlink:href="qml-qtmultimedia-soundeffect.xml">SoundEffect</db:link> QML type) offers a more abstract way to play sounds. This class allows you to specify a <db:emphasis role="bold">WAV format</db:emphasis> file, which can then be played with low latency when necessary.</db:para>
<db:para>You can adjust the:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qsoundeffect.xml#loopCount">Number of loops</db:link> in which a sound effect is played.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsoundeffect.xml#setVolume">Volume</db:link> of the sound effect.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsoundeffect.xml#setMuted">Muting</db:link> of the sound effect.</db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="raw-access"/>
</db:section>
<db:section xml:id="low-level-audio-playback-and-recording">
<db:title>Low Level Audio Playback and Recording</db:title>
<db:para>The C++ API of Qt Multimedia offers classes for raw access to audio input and output facilities, allowing applications to receive raw data from devices like microphones, and to write raw data to speakers or other devices. Generally these classes do not do any audio decoding, or other processing, but they can support different types of raw audio data.</db:para>
<db:para>The <db:link xlink:href="qaudiosink.xml">QAudioSink</db:link> class offers raw audio data output, while <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> offers raw audio data input. The available hardware determines what audio outputs and inputs are available.</db:para>
<db:section xml:id="push-and-pull">
<db:title>Push and Pull</db:title>
<db:para>The low level audio classes can operate in two modes - <db:code>push</db:code> and <db:code>pull</db:code>. In <db:code>pull</db:code> mode, the audio device is started by giving it a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>. For an output device, the <db:link xlink:href="qaudiosink.xml">QAudioSink</db:link> class will pull data from the <db:link xlink:href="qiodevice.xml">QIODevice</db:link> (using <db:link xlink:href="qiodevice.xml#read">QIODevice::read</db:link>()) when more audio data is required. Conversely, for <db:code>pull</db:code> mode with <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link>, when audio data is available then the data will be written directly to the <db:link xlink:href="qiodevice.xml">QIODevice</db:link>.</db:para>
<db:para>In <db:code>push</db:code> mode, the audio device provides a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> instance that can be written or read to as needed. Typically, this results in simpler code but more buffering, which may affect latency.</db:para>
</db:section>
</db:section>
<db:section xml:id="decoding-compressed-audio-to-memory">
<db:title>Decoding Compressed Audio to Memory</db:title>
<db:para>In some cases you may want to decode a compressed audio file and do further processing yourself. For example, mixing multiple samples or using custom digital signal processing algorithms. <db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link> supports decoding local files or data streams from <db:link xlink:href="qiodevice.xml">QIODevice</db:link> instances.</db:para>
<db:para>Here's an example of decoding a local file:</db:para>
<db:programlisting language="cpp">QAudioFormat desiredFormat;
desiredFormat.setChannelCount(2);
desiredFormat.setSampleFormat(QAudioFormat::Int16);
desiredFormat.setSampleRate(48000);

QAudioDecoder *decoder = new QAudioDecoder(this);
decoder-&amp;gt;setAudioFormat(desiredFormat);
decoder-&amp;gt;setSource(&quot;level1.mp3&quot;);

connect(decoder, &amp;amp;QAudioDecoder::bufferReady, this, &amp;amp;AudioDecodingExample::readBuffer);
decoder-&amp;gt;start();

// Now wait for bufferReady() signal and call decoder-&amp;gt;read()
</db:programlisting>
</db:section>
<db:section xml:id="spatial-audio">
<db:title>Spatial Audio</db:title>
<db:para>The <db:link xlink:href="qtspatialaudio-index.xml">Qt Spatial Audio</db:link> module provides an API for implementation sound fields in 3D space.</db:para>
</db:section>
</db:section>
<db:section xml:id="reference-documentation">
<db:title>Reference Documentation</db:title>
<db:section xml:id="c-classes">
<db:title>C++ Classes</db:title>
<db:variablelist role="multimedia_audio">
<db:varlistentry>
<db:term><db:link xlink:href="qambientsound.xml" xlink:role="class">QAmbientSound</db:link></db:term>
<db:listitem>
<db:para>A stereo overlay sound.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudio.xml" xlink:role="namespace">QAudio</db:link></db:term>
<db:listitem>
<db:para>The QAudio namespace contains enums used by the audio classes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudiobuffer.xml" xlink:role="class">QAudioBuffer</db:link></db:term>
<db:listitem>
<db:para>The QAudioBuffer class represents a collection of audio samples with a specific format and sample rate.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudiodecoder.xml" xlink:role="class">QAudioDecoder</db:link></db:term>
<db:listitem>
<db:para>The QAudioDecoder class implements decoding audio.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudiodevice.xml" xlink:role="class">QAudioDevice</db:link></db:term>
<db:listitem>
<db:para>The QAudioDevice class provides an information about audio devices and their functionality.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudioengine.xml" xlink:role="class">QAudioEngine</db:link></db:term>
<db:listitem>
<db:para>QAudioEngine manages a three dimensional sound field.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudioformat.xml" xlink:role="class">QAudioFormat</db:link></db:term>
<db:listitem>
<db:para>The QAudioFormat class stores audio stream parameter information.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudioinput.xml" xlink:role="class">QAudioInput</db:link></db:term>
<db:listitem>
<db:para>Represents an input channel for audio.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudiolistener.xml" xlink:role="class">QAudioListener</db:link></db:term>
<db:listitem>
<db:para>Defines the position and orientation of the person listening to a sound field defined by QAudioEngine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudiooutput.xml" xlink:role="class">QAudioOutput</db:link></db:term>
<db:listitem>
<db:para>Represents an output channel for audio.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudioroom.xml" xlink:role="class">QAudioRoom</db:link></db:term>
<db:listitem>
<db:para></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudiosink.xml" xlink:role="class">QAudioSink</db:link></db:term>
<db:listitem>
<db:para>The QAudioSink class provides an interface for sending audio data to an audio output device.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaudiosource.xml" xlink:role="class">QAudioSource</db:link></db:term>
<db:listitem>
<db:para>The QAudioSource class provides an interface for receiving audio data from an audio input device.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmediacapturesession.xml" xlink:role="class">QMediaCaptureSession</db:link></db:term>
<db:listitem>
<db:para>The QMediaCaptureSession class allows capturing of audio and video content.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmediarecorder.xml" xlink:role="class">QMediaRecorder</db:link></db:term>
<db:listitem>
<db:para>The QMediaRecorder class is used for encoding and recording a capture session.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsoundeffect.xml" xlink:role="class">QSoundEffect</db:link></db:term>
<db:listitem>
<db:para>The QSoundEffect class provides a way to play low latency sound effects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qspatialsound.xml" xlink:role="class">QSpatialSound</db:link></db:term>
<db:listitem>
<db:para>A sound object in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qml-types">
<db:title>QML Types</db:title>
<db:variablelist role="multimedia_audio_qml">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick3d-spatialaudio-ambientsound.xml" xlink:role="">AmbientSound</db:link></db:term>
<db:listitem>
<db:para>A stereo overlay sound.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick3d-spatialaudio-audioengine.xml" xlink:role="">AudioEngine</db:link></db:term>
<db:listitem>
<db:para>AudioEngine manages sound objects inside a 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-audioinput.xml" xlink:role="">AudioInput</db:link></db:term>
<db:listitem>
<db:para>An audio input to be used for capturing audio in a capture session.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick3d-spatialaudio-audiolistener.xml" xlink:role="">AudioListener</db:link></db:term>
<db:listitem>
<db:para>defines the position and orientation of the person listening to a sound field defined by a AudioEngine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-audiooutput.xml" xlink:role="">AudioOutput</db:link></db:term>
<db:listitem>
<db:para>An audio output to be used for playback or monitoring of a capture session.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick3d-spatialaudio-audioroom.xml" xlink:role="">AudioRoom</db:link></db:term>
<db:listitem>
<db:para></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-capturesession.xml" xlink:role="">CaptureSession</db:link></db:term>
<db:listitem>
<db:para>Allows capturing of audio and video content.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml" xlink:role="">MediaPlayer</db:link></db:term>
<db:listitem>
<db:para>Adds media playback to a scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-mediarecorder.xml" xlink:role="">MediaRecorder</db:link></db:term>
<db:listitem>
<db:para>For encoding and recording media generated in a CaptureSession.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-soundeffect.xml" xlink:role="">SoundEffect</db:link></db:term>
<db:listitem>
<db:para>The SoundEffect type provides a way to play sound effects in QML.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick3d-spatialaudio-spatialsound.xml" xlink:role="">SpatialSound</db:link></db:term>
<db:listitem>
<db:para>A sound object in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-audiodevice.xml" xlink:role="">audioDevice</db:link></db:term>
<db:listitem>
<db:para>Describes an audio device.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-mediametadata.xml" xlink:role="">mediaMetaData</db:link></db:term>
<db:listitem>
<db:para>Provides meta-data for media files.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:variablelist role="audio_examples">
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-audiodevices-example.xml" xlink:role="page">Audio Devices Example</db:link></db:term>
<db:listitem>
<db:para>Testing the available audio devices and their configuration.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-audiooutput-example.xml" xlink:role="page">Audio Output Example</db:link></db:term>
<db:listitem>
<db:para>Enabling audio playback using the QAudioSink class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-audiorecorder-example.xml" xlink:role="page">Audio Recorder Example</db:link></db:term>
<db:listitem>
<db:para>Discovering the available devices and supported codecs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-audiosource-example.xml" xlink:role="page">Audio Source Example</db:link></db:term>
<db:listitem>
<db:para>Recording audio using the QAudioSource class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtspatialaudio-audiopanning-example.xml" xlink:role="page">Spatial Audio Panning Example</db:link></db:term>
<db:listitem>
<db:para>Shows some of the capabilities of the spatial audio engine in Qt.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
