<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCanBusFrame Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> is a container class representing a single CAN frame.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCanBusFrame</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> can use <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> for read and write operations. It contains the frame identifier and the data payload. <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> contains the timestamp of the moment it was read.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe-timestamp.xml">QCanBusFrame::TimeStamp</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FrameError-enum">
<db:title>enum QCanBusFrame::FrameError</db:title>
<db:bridgehead renderas="sect2">flags QCanBusFrame::FrameErrors</db:bridgehead>
<db:para>This enum describes the possible error types.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::TransmissionTimeoutError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 0)</db:code></db:td>
<db:td>
<db:para>The transmission has timed out.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::LostArbitrationError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 1)</db:code></db:td>
<db:td>
<db:para>The frame could not be sent due to lost arbitration on the bus.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::ControllerError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 2)</db:code></db:td>
<db:td>
<db:para>The controller encountered an error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::ProtocolViolationError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 3)</db:code></db:td>
<db:td>
<db:para>A protocol violation has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::TransceiverError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 4)</db:code></db:td>
<db:td>
<db:para>A transceiver error occurred</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::MissingAcknowledgmentError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 5)</db:code></db:td>
<db:td>
<db:para>The transmission received no acknowledgment.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::BusOffError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 6)</db:code></db:td>
<db:td>
<db:para>The CAN bus is offline.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::BusError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 7)</db:code></db:td>
<db:td>
<db:para>A CAN bus error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::ControllerRestartError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 8)</db:code></db:td>
<db:td>
<db:para>The controller restarted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 9)</db:code></db:td>
<db:td>
<db:para>An unknown error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::AnyError</db:code></db:para>
</db:td>
<db:td><db:code>0x1FFFFFFFU</db:code></db:td>
<db:td>
<db:para>Matches every other error type.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FrameErrors</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FrameError&gt;. </db:code>It stores an OR combination of <db:code>FrameError</db:code> values.</db:para>
</db:section>
<db:section xml:id="FrameType-enum">
<db:title>enum QCanBusFrame::FrameType</db:title>
<db:para>This enum describes the type of the CAN frame.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::UnknownFrame</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>The frame type is unknown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::DataFrame</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>This value represents a data frame.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::ErrorFrame</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>This value represents an error frame.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::RemoteRequestFrame</db:code></db:para>
</db:td>
<db:td><db:code>0x3</db:code></db:td>
<db:td>
<db:para>This value represents a remote request.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:emphasis>::InvalidFrame</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>This value represents an invalid frame. This type is used for error reporting.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#setFrameType">setFrameType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCanBusFrame">
<db:title>[explicit noexcept] QCanBusFrame::QCanBusFrame(QCanBusFrame::FrameType <db:emphasis>type</db:emphasis> = DataFrame)</db:title>
<db:para>Constructs a CAN frame of the specified <db:code role="parameter">type</db:code>.</db:para>
</db:section>
<db:section xml:id="QCanBusFrame-1">
<db:title>[explicit] QCanBusFrame::QCanBusFrame(quint32 <db:emphasis>identifier</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Constructs a CAN frame using <db:code role="parameter">identifier</db:code> as the frame identifier and <db:code role="parameter">data</db:code> as the payload.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>[noexcept] QCanBusFrame::FrameErrors QCanBusFrame::error() const</db:title>
<db:para>Returns the error of the current error frame. If the frame is not an <db:link xlink:href="qcanbusframe.xml#FrameType-enum">ErrorFrame</db:link>, this function returns <db:link xlink:href="qcanbusframe.xml#FrameError-enum">NoError</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#setError">setError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameId">
<db:title>[noexcept] quint32 QCanBusFrame::frameId() const</db:title>
<db:para>Returns the CAN frame identifier. If the CAN frame uses the extended frame format, the identifier has a maximum of 29 bits; otherwise 11 bits.</db:para>
<db:para>If the frame is of <db:link xlink:href="qcanbusframe.xml#FrameType-enum">ErrorFrame</db:link> type, this ID is always 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#setFrameId">setFrameId</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusframe.xml#hasExtendedFrameFormat">hasExtendedFrameFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameType">
<db:title>[noexcept] QCanBusFrame::FrameType QCanBusFrame::frameType() const</db:title>
<db:para>Returns the type of the frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#setFrameType">setFrameType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasExtendedFrameFormat">
<db:title>[noexcept] bool QCanBusFrame::hasExtendedFrameFormat() const</db:title>
<db:para>Returns <db:code>true</db:code> if the CAN frame uses a 29bit identifier; otherwise <db:code>false</db:code>, implying an 11bit identifier.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#setExtendedFrameFormat">setExtendedFrameFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusframe.xml#frameId">frameId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFlexibleDataRateFormat">
<db:title>[noexcept] bool QCanBusFrame::hasFlexibleDataRateFormat() const</db:title>
<db:para>Returns <db:code>true</db:code> if the CAN frame uses <db:emphasis>Flexible Data-Rate</db:emphasis> which allows up to 64 data bytes, otherwise <db:code>false</db:code>, implying at most 8 byte of payload.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#setFlexibleDataRateFormat">setFlexibleDataRateFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusframe.xml#payload">payload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[noexcept] bool QCanBusFrame::isValid() const</db:title>
<db:para>Returns <db:code>false</db:code> if the <db:link xlink:href="qcanbusframe.xml#frameType">frameType</db:link>() is <db:link xlink:href="qcanbusframe.xml#FrameType-enum">InvalidFrame</db:link>, the <db:link xlink:href="qcanbusframe.xml#hasExtendedFrameFormat">hasExtendedFrameFormat</db:link>() is not set although <db:link xlink:href="qcanbusframe.xml#frameId">frameId</db:link>() is longer than 11 bit or the payload is longer than the maximal permitted payload length of 64 byte if <db:emphasis>Flexible Data-Rate</db:emphasis> mode is enabled or 8 byte if it is disabled. If <db:link xlink:href="qcanbusframe.xml#frameType">frameType</db:link>() is <db:link xlink:href="qcanbusframe.xml#FrameType-enum">RemoteRequestFrame</db:link> and the <db:emphasis>Flexible Data-Rate</db:emphasis> mode is enabled at the same time <db:code>false</db:code> is also returned.</db:para>
<db:para>Otherwise this function returns <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="payload">
<db:title>QByteArray QCanBusFrame::payload() const</db:title>
<db:para>Returns the data payload of the frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#setPayload">setPayload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setError">
<db:title>void QCanBusFrame::setError(QCanBusFrame::FrameErrors <db:emphasis>error</db:emphasis>)</db:title>
<db:para>Sets the frame's <db:code role="parameter">error</db:code> type. This function does nothing if <db:link xlink:href="qcanbusframe.xml#frameType">frameType</db:link>() is not an <db:link xlink:href="qcanbusframe.xml#FrameType-enum">ErrorFrame</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExtendedFrameFormat">
<db:title>[noexcept] void QCanBusFrame::setExtendedFrameFormat(bool <db:emphasis>isExtended</db:emphasis>)</db:title>
<db:para>Sets the extended frame format flag to <db:code role="parameter">isExtended</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#hasExtendedFrameFormat">hasExtendedFrameFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlexibleDataRateFormat">
<db:title>[noexcept] void QCanBusFrame::setFlexibleDataRateFormat(bool <db:emphasis>isFlexibleData</db:emphasis>)</db:title>
<db:para>Sets the <db:emphasis>Flexible Data-Rate</db:emphasis> flag to <db:code role="parameter">isFlexibleData</db:code>. Those frames can be sent using a higher speed on supporting controllers. Additionally the payload length limit is raised to 64 byte.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#hasFlexibleDataRateFormat">hasFlexibleDataRateFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFrameId">
<db:title>void QCanBusFrame::setFrameId(quint32 <db:emphasis>newFrameId</db:emphasis>)</db:title>
<db:para>Sets the identifier of the CAN frame to <db:code role="parameter">newFrameId</db:code>. The maximum size of a CAN frame identifier is 11 bits, which can be extended up to 29 bits by supporting the <db:emphasis>CAN extended frame format</db:emphasis>. The <db:emphasis>CAN extended frame format</db:emphasis> setting is automatically adapted to match <db:code role="parameter">newFrameId</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#frameId">frameId</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusframe.xml#hasExtendedFrameFormat">hasExtendedFrameFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFrameType">
<db:title>[noexcept] void QCanBusFrame::setFrameType(QCanBusFrame::FrameType <db:emphasis>newType</db:emphasis>)</db:title>
<db:para>Sets the type of the frame to <db:code role="parameter">newType</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#frameType">frameType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPayload">
<db:title>void QCanBusFrame::setPayload(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">data</db:code> as the payload for the CAN frame. The maximum size of payload is 8 bytes, which can be extended up to 64 bytes by supporting <db:emphasis>Flexible Data-Rate</db:emphasis>. If <db:code role="parameter">data</db:code> contains more than 8 byte the <db:emphasis>Flexible Data-Rate</db:emphasis> flag is automatically set. Flexible Data-Rate has to be enabled on the <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> by setting the <db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::CanFdKey</db:link>.</db:para>
<db:para>Frames of type <db:link xlink:href="qcanbusframe.xml#FrameType-enum">RemoteRequestFrame</db:link> (RTR) do not have a payload. However they have to provide an indication of the responses expected payload length. To set the length expection it is necessary to set a fake payload whose length matches the expected payload length of the response. One way of doing this might be as follows:</db:para>
<db:programlisting language="cpp">QCanBusFrame frame(QCanBusFrame::RemoteRequestFrame);
int expectedResponseLength = ...;
frame.setPayload(QByteArray(expectedResponseLength, 0));
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#payload">payload</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusframe.xml#hasFlexibleDataRateFormat">hasFlexibleDataRateFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimeStamp">
<db:title>[noexcept] void QCanBusFrame::setTimeStamp(QCanBusFrame::TimeStamp <db:emphasis>ts</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">ts</db:code> as the timestamp for the CAN frame. Usually, this function is not needed, because the timestamp is created during the read operation and not needed during the write operation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#timeStamp">timeStamp</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusframe-timestamp.xml">QCanBusFrame::TimeStamp</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeStamp">
<db:title>[noexcept] QCanBusFrame::TimeStamp QCanBusFrame::timeStamp() const</db:title>
<db:para>Returns the timestamp of the frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe-timestamp.xml">QCanBusFrame::TimeStamp</db:link></db:member>
<db:member><db:link xlink:href="qcanbusframe.xml#setTimeStamp">QCanBusFrame::setTimeStamp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QCanBusFrame::toString() const</db:title>
<db:para>Returns the CAN frame as a formatted string.</db:para>
<db:para>The output contains the CAN identfier in hexadecimal format, right adjusted to 32 bit, followed by the data length in square brackets and the payload in hexadecimal format.</db:para>
<db:para>Standard identifiers are filled with spaces while extended identifiers are filled with zeros.</db:para>
<db:para>Typical outputs are:</db:para>
<db:programlisting language="cpp">(Error)                                  - error frame
     7FF   [1]  01                       - data frame with standard identifier
1FFFFFFF   [8]  01 23 45 67 89 AB CD EF  - data frame with extended identifier
     400  [10]  01 23 45 67 ... EF 01 23 - CAN FD frame
     123   [5]  Remote Request           - remote frame with standard identifier
00000234   [0]  Remote Request           - remote frame with extended identifier
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QCanBusFrame &amp;<db:emphasis>frame</db:emphasis>)</db:title>
<db:para>Writes a <db:code role="parameter">frame</db:code> to the stream (<db:code role="parameter">out</db:code>) and returns a reference to the it.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QCanBusFrame &amp;<db:emphasis>frame</db:emphasis>)</db:title>
<db:para>Reads a <db:code role="parameter">frame</db:code> from the stream (<db:code role="parameter">in</db:code>) and returns a reference to the it.</db:para>
</db:section>
</db:section>
</db:article>
