<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Window and Dialog Widgets</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Windows and Dialogs in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>A <db:link xlink:href="widgets-tutorial.xml">widget</db:link> that is not embedded in a parent widget is called a window. (Usually, windows have a frame and a title bar, although it is also possible to create windows without such decoration using suitable window flags). In Qt, QMainWindow and the various subclasses of QDialog are the most common window types.</db:para>
<db:para>In applications, windows provide the screen space upon which the user interface is built. Windows separate applications visually from each other and usually provide a window decoration that allows the user to resize and position the applications according to his preferences. Windows are typically integrated into the desktop environment and to some degree managed by the window management system that the desktop environment provides. For instance, selected windows of an application are represented in the task bar.</db:para>
<db:section xml:id="primary-and-secondary-windows">
<db:title>Primary and Secondary Windows</db:title>
<db:para>Any QWidget that has no parent will become a window, and will on most platforms be listed in the desktop's task bar. This is usually only wanted for one window in the application, the <db:emphasis>primary window</db:emphasis>.</db:para>
<db:para>In addition, a QWidget that has a parent can become a window by setting the Qt::Window flag. Depending on the window management system such <db:emphasis>secondary windows</db:emphasis> are usually stacked on top of their respective parent window, and not have a task bar entry of their own.</db:para>
<db:para>The QMainWindow class sets the Qt::Window flag in its constructor, as it is designed to be used as a window and provides facilities that are not wanted for child widgets.</db:para>
</db:section>
<db:section xml:id="main-windows-and-dialogs">
<db:title>Main Windows and Dialogs</db:title>
<db:para>The <db:link xlink:href="mainwindow.xml">Application Main Window</db:link> provides the framework for building the application's main user interface, and are created by subclassing QMainWindow. QMainWindow has its own layout to which you can add a <db:link xlink:href="">menu bar</db:link>, <db:link xlink:href="">tool bars</db:link>, <db:link xlink:href="">dockable widgets</db:link> and a <db:link xlink:href="">status bar</db:link>. The center area can be occupied by any kind of QWidget.</db:para>
<db:para><db:link xlink:href="dialogs.xml">Dialog Windows</db:link> are used as secondary windows that present the user with options and choices. Dialogs are created by subclassing QDialog and using <db:link xlink:href="graphicsview.xml#widgets-and-layouts">widgets and layouts</db:link> to implement the user interface. In addition, Qt provides a number of ready-made standard dialogs that can be used for standard tasks like file or font selection.</db:para>
<db:para>Both main windows and dialogs can be created with Qt Designer, Qt's visual design tool. Using Qt Designer is a lot faster than hand-coding, and makes it easy to test different design ideas. Creating designs visually and reading the code generated by <db:link xlink:href="uic.xml">uic</db:link> is a great way to learn Qt!</db:para>
</db:section>
<db:section xml:id="window-geometry">
<db:title>Window Geometry</db:title>
<db:para>QWidget provides several functions that deal with a widget's geometry. Some of these functions operate on the pure client area (i.e. the window excluding the window frame), others include the window frame. The differentiation is done in a way that covers the most common usage transparently.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Including the window frame:</db:emphasis> <db:link xlink:href="">x()</db:link>, <db:link xlink:href="">y()</db:link>, <db:link xlink:href="">frameGeometry()</db:link>, <db:link xlink:href="">pos()</db:link>, and <db:link xlink:href="">move()</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Excluding the window frame:</db:emphasis> <db:link xlink:href="">geometry()</db:link>, <db:link xlink:href="">width()</db:link>, <db:link xlink:href="">height()</db:link>, <db:link xlink:href="">rect()</db:link>, and <db:link xlink:href="">size()</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note that the distinction only matters for decorated top-level widgets. For all child widgets, the frame geometry is equal to the widget's client geometry.</db:para>
<db:para>This diagram shows most of the functions in use:</db:para>
<db:mediaobject>
<db:alt>Geometry diagram</db:alt>
<db:imageobject>
<db:imagedata fileref="images/geometry.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="x11-peculiarities">
<db:title>X11 Peculiarities</db:title>
<db:para>On X11, a window does not have a frame until the window manager decorates it. This happens asynchronously at some point in time after calling QWidget::show() and the first paint event the window receives, or it does not happen at all. Bear in mind that X11 is policy-free (others call it flexible). Thus you cannot make any safe assumption about the decoration frame your window will get. Basic rule: There's always one user who uses a window manager that breaks your assumption, and who will complain to you.</db:para>
<db:para>Furthermore, a toolkit cannot simply place windows on the screen. All Qt can do is to send certain hints to the window manager. The window manager, a separate process, may either obey, ignore or misunderstand them. Due to the partially unclear Inter-Client Communication Conventions Manual (ICCCM), window placement is handled quite differently in existing window managers.</db:para>
<db:para>X11 provides no standard or easy way to get the frame geometry once the window is decorated. Qt solves this problem with nifty heuristics and clever code that works on a wide range of window managers that exist today. Don't be surprised if you find one where QWidget::frameGeometry() returns wrong results though.</db:para>
<db:para>Nor does X11 provide a way to maximize a window. QWidget::showMaximized() has to emulate the feature. Its result depends on the result of QWidget::frameGeometry() and the capability of the window manager to do proper window placement, neither of which can be guaranteed.</db:para>
</db:section>
</db:section>
</db:article>
