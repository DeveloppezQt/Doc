<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFileDialog Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> class provides a dialog that allow users to select files or directories.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFileDialog</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFileDialog is part of <db:simplelist><db:member><db:link xlink:href="standard-dialogs.xml">Standard Dialogs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> class enables a user to traverse the file system in order to select one or many files or a directory.</db:para>
<db:para>The easiest way to create a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> is to use the static functions.</db:para>
<db:programlisting language="cpp">fileName = QFileDialog::getOpenFileName(this,
    tr(&quot;Open Image&quot;), &quot;/home/jana&quot;, tr(&quot;Image Files (*.png *.jpg *.bmp)&quot;));
</db:programlisting>
<db:para>In the above example, a modal <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> is created using a static function. The dialog initially displays the contents of the &quot;/home/jana&quot; directory, and displays files matching the patterns given in the string &quot;Image Files (*.png *.jpg *.bmp)&quot;. The parent of the file dialog is set to <db:emphasis>this</db:emphasis>, and the window title is set to &quot;Open Image&quot;.</db:para>
<db:para>If you want to use multiple filters, separate each one with <db:emphasis>two</db:emphasis> semicolons. For example:</db:para>
<db:programlisting language="cpp">&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)&quot;
</db:programlisting>
<db:para>You can create your own <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> without using the static functions. By calling <db:link xlink:href="qfiledialog.xml#fileMode-prop">setFileMode</db:link>(), you can specify what the user must select in the dialog:</db:para>
<db:programlisting language="cpp">QFileDialog dialog(this);
dialog.setFileMode(QFileDialog::AnyFile);
</db:programlisting>
<db:para>In the above example, the mode of the file dialog is set to <db:link xlink:href="qfiledialog.xml#FileMode-enum">AnyFile</db:link>, meaning that the user can select any file, or even specify a file that doesn't exist. This mode is useful for creating a &quot;Save As&quot; file dialog. Use <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFile</db:link> if the user must select an existing file, or <db:link xlink:href="qfiledialog.xml#FileMode-enum">Directory</db:link> if only a directory may be selected. See the <db:link xlink:href="qfiledialog.xml#FileMode-enum">QFileDialog::FileMode</db:link> enum for the complete list of modes.</db:para>
<db:para>The <db:link xlink:href="qfiledialog.xml#fileMode-prop">fileMode</db:link> property contains the mode of operation for the dialog; this indicates what types of objects the user is expected to select. Use <db:link xlink:href="qfiledialog.xml#setNameFilter">setNameFilter</db:link>() to set the dialog's file filter. For example:</db:para>
<db:programlisting language="cpp">dialog.setNameFilter(tr(&quot;Images (*.png *.xpm *.jpg)&quot;));
</db:programlisting>
<db:para>In the above example, the filter is set to <db:code>&quot;Images (*.png *.xpm *.jpg)&quot;</db:code>, this means that only files with the extension <db:code>png</db:code>, <db:code>xpm</db:code>, or <db:code>jpg</db:code> will be shown in the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. You can apply several filters by using <db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>(). Use <db:link xlink:href="qfiledialog.xml#selectNameFilter">selectNameFilter</db:link>() to select one of the filters you've given as the file dialog's default filter.</db:para>
<db:para>The file dialog has two view modes: <db:link xlink:href="qfiledialog.xml#ViewMode-enum">List</db:link> and <db:link xlink:href="qfiledialog.xml#ViewMode-enum">Detail</db:link>. <db:link xlink:href="qfiledialog.xml#ViewMode-enum">List</db:link> presents the contents of the current directory as a list of file and directory names. <db:link xlink:href="qfiledialog.xml#ViewMode-enum">Detail</db:link> also displays a list of file and directory names, but provides additional information alongside each name, such as the file size and modification date. Set the mode with <db:link xlink:href="qfiledialog.xml#viewMode-prop">setViewMode</db:link>():</db:para>
<db:programlisting language="cpp">dialog.setViewMode(QFileDialog::Detail);
</db:programlisting>
<db:para>The last important function you will need to use when creating your own file dialog is <db:link xlink:href="qfiledialog.xml#selectedFiles">selectedFiles</db:link>().</db:para>
<db:programlisting language="cpp">QStringList fileNames;
if (dialog.exec())
    fileNames = dialog.selectedFiles();
</db:programlisting>
<db:para>In the above example, a modal file dialog is created and shown. If the user clicked OK, the file they selected is put in <db:code>fileName</db:code>.</db:para>
<db:para>The dialog's working directory can be set with <db:link xlink:href="qfiledialog.xml#setDirectory">setDirectory</db:link>(). Each file in the current directory can be selected using the <db:link xlink:href="qfiledialog.xml#selectFile">selectFile</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs</db:link> example shows how to use <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> as well as other built-in Qt dialogs.</db:para>
<db:para>By default, a platform-native file dialog will be used if the platform has one. In that case, the widgets which would otherwise be used to construct the dialog will not be instantiated, so related accessors such as <db:link xlink:href="qwidget.xml#layout">layout</db:link>() and <db:link xlink:href="qfiledialog.xml#itemDelegate">itemDelegate</db:link>() will return null. You can set the <db:link xlink:href="qfiledialog.xml#Option-enum">DontUseNativeDialog</db:link> option to ensure that the widget-based implementation will be used instead of the native dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qcolordialog.xml">QColorDialog</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AcceptMode-enum">
<db:title>enum QFileDialog::AcceptMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::AcceptOpen</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::AcceptSave</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="DialogLabel-enum">
<db:title>enum QFileDialog::DialogLabel</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::LookIn</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::FileName</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::FileType</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::Accept</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::Reject</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="FileMode-enum">
<db:title>enum QFileDialog::FileMode</db:title>
<db:para>This enum is used to indicate what the user may select in the file dialog; i.e. what the dialog will return if the user clicks OK.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::AnyFile</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The name of a file, whether it exists or not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::ExistingFile</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The name of a single existing file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::Directory</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The name of a directory. Both files and directories are displayed. However, the native Windows file dialog does not support displaying files in the directory chooser.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::ExistingFiles</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The names of zero or more existing files.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This value is obsolete since Qt 4.5:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DirectoryOnly</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Use <db:code>Directory</db:code> and <db:link xlink:href="qfiledialog.xml#setOption">setOption</db:link>(<db:link xlink:href="qfiledialog.xml#Option-enum">ShowDirsOnly</db:link>, true) instead.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#fileMode-prop">setFileMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Option-enum">
<db:title>enum QFileDialog::Option</db:title>
<db:bridgehead renderas="sect2">flags QFileDialog::Options</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::ShowDirsOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Only show directories in the file dialog. By default both files and directories are shown. (Valid only in the <db:link xlink:href="qfiledialog.xml#FileMode-enum">Directory</db:link> file mode.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DontResolveSymlinks</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Don't resolve symlinks in the file dialog. By default symlinks are resolved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DontConfirmOverwrite</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Don't ask for confirmation if an existing file is selected. By default confirmation is requested.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DontUseNativeDialog</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Don't use the native file dialog. By default, the native file dialog is used unless you use a subclass of <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> that contains the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro, or the platform does not have a native dialog of the type that you require.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Indicates that the model is readonly.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::HideNameFilterDetails</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>Indicates if the file name filter details are hidden or not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DontUseSheet</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>In previous versions of Qt, the static functions would create a sheet by default if the static function was given a parent. This is no longer supported and does nothing in Qt 4.5, The static functions will always be an application modal dialog. If you want to use sheets, use <db:link xlink:href="qfiledialog.xml#open">QFileDialog::open</db:link>() instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DontUseCustomDirectoryIcons</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>Always use the default directory icon. Some platforms allow the user to set a different icon. Custom icon lookup cause a big performance impact over network or removable drives. Setting this will enable the <db:link xlink:href="qfileiconprovider.xml#Option-enum">QFileIconProvider::DontUseCustomDirectoryIcons</db:link> option in the icon provider. This enum value was added in Qt 5.2.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Options</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Option&gt;. </db:code>It stores an OR combination of <db:code>Option</db:code> values.</db:para>
</db:section>
<db:section xml:id="ViewMode-enum">
<db:title>enum QFileDialog::ViewMode</db:title>
<db:para>This enum describes the view mode of the file dialog; i.e. what information about each file will be displayed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::Detail</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Displays an icon, a name, and details for each item in the directory.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::List</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Displays only an icon and a name for each item in the directory.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#viewMode-prop">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptMode-prop">
<db:title>acceptMode : AcceptMode</db:title>
<db:para>This property holds the accept mode of the dialog</db:para>
<db:para>The action mode defines whether the dialog is for opening or saving files.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qfiledialog.xml#AcceptMode-enum">AcceptOpen</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfiledialog.xml#AcceptMode-enum">QFileDialog::AcceptMode</db:link></db:type> <db:emphasis role="bold">acceptMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAcceptMode</db:emphasis>(<db:type><db:link xlink:href="qfiledialog.xml#AcceptMode-enum">QFileDialog::AcceptMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#AcceptMode-enum">AcceptMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultSuffix-prop">
<db:title>defaultSuffix : QString</db:title>
<db:para>suffix added to the filename if no other suffix was specified</db:para>
<db:para>This property specifies a string that will be added to the filename if it has no suffix already. The suffix is typically used to indicate the file type (e.g. &quot;txt&quot; indicates a text file).</db:para>
<db:para>If the first character is a dot ('.'), it is removed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">defaultSuffix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDefaultSuffix</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>suffix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="fileMode-prop">
<db:title>fileMode : FileMode</db:title>
<db:para>This property holds the file mode of the dialog</db:para>
<db:para>The file mode defines the number and type of items that the user is expected to select in the dialog.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qfiledialog.xml#FileMode-enum">AnyFile</db:link>.</db:para>
<db:para>This function will set the labels for the <db:link xlink:href="qfiledialog.xml#DialogLabel-enum">FileName</db:link> and <db:link xlink:href="qfiledialog.xml#DialogLabel-enum">Accept</db:link> <db:link xlink:href="qfiledialog.xml#DialogLabel-enum">DialogLabel</db:link>s. It is possible to set custom text after the call to setFileMode().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfiledialog.xml#FileMode-enum">QFileDialog::FileMode</db:link></db:type> <db:emphasis role="bold">fileMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFileMode</db:emphasis>(<db:type><db:link xlink:href="qfiledialog.xml#FileMode-enum">QFileDialog::FileMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#FileMode-enum">FileMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="options-prop">
<db:title>[since 4.5] options : Options</db:title>
<db:para>This property holds the various options that affect the look and feel of the dialog</db:para>
<db:para>By default, all options are disabled.</db:para>
<db:para>Options should be set before showing the dialog. Setting them while the dialog is visible is not guaranteed to have an immediate effect on the dialog (depending on the option and on the platform).</db:para>
<db:para>This property was introduced in Qt 4.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Options</db:link></db:type> <db:emphasis role="bold">options</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOptions</db:emphasis>(<db:type><db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Options</db:link></db:type> <db:emphasis>options</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedSchemes-prop">
<db:title>[since 5.6] supportedSchemes : QStringList</db:title>
<db:para>This property holds the URL schemes that the file dialog should allow navigating to.</db:para>
<db:para>Setting this property allows to restrict the type of URLs the user will be able to select. It is a way for the application to declare the protocols it will support to fetch the file content. An empty list means that no restriction is applied (the default). Supported for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>This property was introduced in Qt 5.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">supportedSchemes</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSupportedSchemes</db:emphasis>(const <db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> &amp;<db:emphasis>schemes</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewMode-prop">
<db:title>viewMode : ViewMode</db:title>
<db:para>This property holds the way files and directories are displayed in the dialog</db:para>
<db:para>By default, the <db:code>Detail</db:code> mode is used to display information about files and directories.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfiledialog.xml#ViewMode-enum">QFileDialog::ViewMode</db:link></db:type> <db:emphasis role="bold">viewMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewMode</db:emphasis>(<db:type><db:link xlink:href="qfiledialog.xml#ViewMode-enum">QFileDialog::ViewMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#ViewMode-enum">ViewMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFileDialog">
<db:title>QFileDialog::QFileDialog(QWidget *<db:emphasis>parent</db:emphasis>, Qt::WindowFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Constructs a file dialog with the given <db:code role="parameter">parent</db:code> and widget <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="QFileDialog-1">
<db:title>[explicit] QFileDialog::QFileDialog(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>directory</db:emphasis> = QString(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString())</db:title>
<db:para>Constructs a file dialog with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">caption</db:code> that initially displays the contents of the specified <db:code role="parameter">directory</db:code>. The contents of the directory are filtered before being shown in the dialog, using a semicolon-separated list of filters specified by <db:code role="parameter">filter</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFileDialog">
<db:title>[virtual noexcept] QFileDialog::~QFileDialog()</db:title>
<db:para>Destroys the file dialog.</db:para>
</db:section>
<db:section xml:id="accept">
<db:title>[override virtual protected] void QFileDialog::accept()</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#accept" role="function">QDialog::accept()</db:link>.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QFileDialog::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="currentChanged">
<db:title>void QFileDialog::currentChanged(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>When the current file changes for local operations, this signal is emitted with the new file name as the <db:code role="parameter">path</db:code> parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#filesSelected">filesSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentUrlChanged">
<db:title>[since 5.2] void QFileDialog::currentUrlChanged(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>When the current file changes, this signal is emitted with the new file URL as the <db:code role="parameter">url</db:code> parameter.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#urlsSelected">urlsSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directory">
<db:title>QDir QFileDialog::directory() const</db:title>
<db:para>Returns the directory currently being displayed in the dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setDirectory">setDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directoryEntered">
<db:title>[since 4.3] void QFileDialog::directoryEntered(const QString &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:para>This signal is emitted for local operations when the user enters a <db:code role="parameter">directory</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="directoryUrl">
<db:title>[since 5.2] QUrl QFileDialog::directoryUrl() const</db:title>
<db:para>Returns the url of the directory currently being displayed in the dialog.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setDirectoryUrl">setDirectoryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directoryUrlEntered">
<db:title>[since 5.2] void QFileDialog::directoryUrlEntered(const QUrl &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user enters a <db:code role="parameter">directory</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="done">
<db:title>[override virtual protected] void QFileDialog::done(int <db:emphasis>result</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#done" role="function">QDialog::done(int r)</db:link>.</db:para>
</db:section>
<db:section xml:id="fileSelected">
<db:title>void QFileDialog::fileSelected(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>When the selection changes for local operations and the dialog is accepted, this signal is emitted with the (possibly empty) selected <db:code role="parameter">file</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#currentChanged">currentChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesSelected">
<db:title>void QFileDialog::filesSelected(const QStringList &amp;<db:emphasis>selected</db:emphasis>)</db:title>
<db:para>When the selection changes for local operations and the dialog is accepted, this signal is emitted with the (possibly empty) list of <db:code role="parameter">selected</db:code> files.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#currentChanged">currentChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter">
<db:title>[since 4.4] QDir::Filters QFileDialog::filter() const</db:title>
<db:para>Returns the filter that is used when displaying files.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setFilter">setFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterSelected">
<db:title>[since 4.3] void QFileDialog::filterSelected(const QString &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user selects a <db:code role="parameter">filter</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="getExistingDirectory">
<db:title>[static] QString QFileDialog::getExistingDirectory(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>dir</db:emphasis> = QString(), QFileDialog::Options <db:emphasis>options</db:emphasis> = ShowDirsOnly)</db:title>
<db:para>This is a convenience static function that will return an existing directory selected by the user.</db:para>
<db:programlisting language="cpp">QString dir = QFileDialog::getExistingDirectory(this, tr(&quot;Open Directory&quot;),
                                                &quot;/home&quot;,
                                                QFileDialog::ShowDirsOnly
                                                | QFileDialog::DontResolveSymlinks);
</db:programlisting>
<db:para>This function creates a modal file dialog with the given <db:code role="parameter">parent</db:code> widget. If <db:code role="parameter">parent</db:code> is not 0, the dialog will be shown centered over the parent widget.</db:para>
<db:para>The dialog's working directory is set to <db:code role="parameter">dir</db:code>, and the caption is set to <db:code role="parameter">caption</db:code>. Either of these may be an empty string in which case the current directory and a default caption will be used respectively.</db:para>
<db:para>The <db:code role="parameter">options</db:code> argument holds various options about how to run the dialog, see the <db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Option</db:link> enum for more information on the flags you can pass. To ensure a native file dialog, <db:link xlink:href="qfiledialog.xml#Option-enum">ShowDirsOnly</db:link> must be set.</db:para>
<db:para>On Windows and macOS, this static function will use the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. However, the native Windows file dialog does not support displaying files in the directory chooser. You need to pass <db:link xlink:href="qfiledialog.xml#Option-enum">DontUseNativeDialog</db:link> to display files using a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. On Windows CE, if the device has no native file dialog, a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> will be used.</db:para>
<db:para>On Unix/X11, the normal behavior of the file dialog is to resolve and follow symlinks. For example, if <db:code>/usr/tmp</db:code> is a symlink to <db:code>/var/tmp</db:code>, the file dialog will change to <db:code>/var/tmp</db:code> after entering <db:code>/usr/tmp</db:code>. If <db:code role="parameter">options</db:code> includes <db:link xlink:href="qfiledialog.xml#Option-enum">DontResolveSymlinks</db:link>, the file dialog will treat symlinks as regular directories.</db:para>
<db:para>On Windows, the dialog will spin a blocking modal event loop that will not dispatch any QTimers, and if <db:code role="parameter">parent</db:code> is not 0 then it will position the dialog just below the parent's title bar.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileNames">getOpenFileNames</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileName">getSaveFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getExistingDirectoryUrl">
<db:title>[static, since 5.2] QUrl QFileDialog::getExistingDirectoryUrl(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>dir</db:emphasis> = QUrl(), QFileDialog::Options <db:emphasis>options</db:emphasis> = ShowDirsOnly, const QStringList &amp;<db:emphasis>supportedSchemes</db:emphasis> = QStringList())</db:title>
<db:para>This is a convenience static function that will return an existing directory selected by the user. If the user presses Cancel, it returns an empty url.</db:para>
<db:para>The function is used similarly to <db:link xlink:href="qfiledialog.xml#getExistingDirectory">QFileDialog::getExistingDirectory</db:link>(). In particular <db:code role="parameter">parent</db:code>, <db:code role="parameter">caption</db:code>, <db:code role="parameter">dir</db:code> and <db:code role="parameter">options</db:code> are used in the exact same way.</db:para>
<db:para>The main difference with <db:link xlink:href="qfiledialog.xml#getExistingDirectory">QFileDialog::getExistingDirectory</db:link>() comes from the ability offered to the user to select a remote directory. That's why the return type and the type of <db:code role="parameter">dir</db:code> is <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:para>The <db:code role="parameter">supportedSchemes</db:code> argument allows to restrict the type of URLs the user will be able to select. It is a way for the application to declare the protocols it will support to fetch the file content. An empty list means that no restriction is applied (the default). Supported for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>When possible, this static function will use the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. On platforms which don't support selecting remote files, Qt will allow to select only local files.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectory">getExistingDirectory</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrl">getOpenFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrls">getOpenFileUrls</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileUrl">getSaveFileUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getOpenFileName">
<db:title>[static] QString QFileDialog::getOpenFileName(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>dir</db:emphasis> = QString(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = Q_NULLPTR, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options())</db:title>
<db:para>This is a convenience static function that returns an existing file selected by the user. If the user presses Cancel, it returns a null string.</db:para>
<db:programlisting language="cpp">QString fileName = QFileDialog::getOpenFileName(this, tr(&quot;Open File&quot;),
                                                &quot;/home&quot;,
                                                tr(&quot;Images (*.png *.xpm *.jpg)&quot;));
</db:programlisting>
<db:para>The function creates a modal file dialog with the given <db:code role="parameter">parent</db:code> widget. If <db:code role="parameter">parent</db:code> is not 0, the dialog will be shown centered over the parent widget.</db:para>
<db:para>The file dialog's working directory will be set to <db:code role="parameter">dir</db:code>. If <db:code role="parameter">dir</db:code> includes a file name, the file will be selected. Only files that match the given <db:code role="parameter">filter</db:code> are shown. The filter selected is set to <db:code role="parameter">selectedFilter</db:code>. The parameters <db:code role="parameter">dir</db:code>, <db:code role="parameter">selectedFilter</db:code>, and <db:code role="parameter">filter</db:code> may be empty strings. If you want multiple filters, separate them with ';;', for example:</db:para>
<db:programlisting language="cpp">&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)&quot;
</db:programlisting>
<db:para>The <db:code role="parameter">options</db:code> argument holds various options about how to run the dialog, see the <db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Option</db:link> enum for more information on the flags you can pass.</db:para>
<db:para>The dialog's caption is set to <db:code role="parameter">caption</db:code>. If <db:code role="parameter">caption</db:code> is not specified then a default caption will be used.</db:para>
<db:para>On Windows, and macOS, this static function will use the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>.</db:para>
<db:para>On Windows the dialog will spin a blocking modal event loop that will not dispatch any QTimers, and if <db:code role="parameter">parent</db:code> is not 0 then it will position the dialog just below the parent's title bar.</db:para>
<db:para>On Unix/X11, the normal behavior of the file dialog is to resolve and follow symlinks. For example, if <db:code>/usr/tmp</db:code> is a symlink to <db:code>/var/tmp</db:code>, the file dialog will change to <db:code>/var/tmp</db:code> after entering <db:code>/usr/tmp</db:code>. If <db:code role="parameter">options</db:code> includes <db:link xlink:href="qfiledialog.xml#Option-enum">DontResolveSymlinks</db:link>, the file dialog will treat symlinks as regular directories.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileNames">getOpenFileNames</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileName">getSaveFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectory">getExistingDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getOpenFileNames">
<db:title>[static] QStringList QFileDialog::getOpenFileNames(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>dir</db:emphasis> = QString(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = Q_NULLPTR, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options())</db:title>
<db:para>This is a convenience static function that will return one or more existing files selected by the user.</db:para>
<db:programlisting language="cpp">QStringList files = QFileDialog::getOpenFileNames(
                        this,
                        &quot;Select one or more files to open&quot;,
                        &quot;/home&quot;,
                        &quot;Images (*.png *.xpm *.jpg)&quot;);
</db:programlisting>
<db:para>This function creates a modal file dialog with the given <db:code role="parameter">parent</db:code> widget. If <db:code role="parameter">parent</db:code> is not 0, the dialog will be shown centered over the parent widget.</db:para>
<db:para>The file dialog's working directory will be set to <db:code role="parameter">dir</db:code>. If <db:code role="parameter">dir</db:code> includes a file name, the file will be selected. The filter is set to <db:code role="parameter">filter</db:code> so that only those files which match the filter are shown. The filter selected is set to <db:code role="parameter">selectedFilter</db:code>. The parameters <db:code role="parameter">dir</db:code>, <db:code role="parameter">selectedFilter</db:code> and <db:code role="parameter">filter</db:code> may be empty strings. If you need multiple filters, separate them with ';;', for instance:</db:para>
<db:programlisting language="cpp">&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)&quot;
</db:programlisting>
<db:para>The dialog's caption is set to <db:code role="parameter">caption</db:code>. If <db:code role="parameter">caption</db:code> is not specified then a default caption will be used.</db:para>
<db:para>On Windows, and macOS, this static function will use the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>.</db:para>
<db:para>On Windows the dialog will spin a blocking modal event loop that will not dispatch any QTimers, and if <db:code role="parameter">parent</db:code> is not 0 then it will position the dialog just below the parent's title bar.</db:para>
<db:para>On Unix/X11, the normal behavior of the file dialog is to resolve and follow symlinks. For example, if <db:code>/usr/tmp</db:code> is a symlink to <db:code>/var/tmp</db:code>, the file dialog will change to <db:code>/var/tmp</db:code> after entering <db:code>/usr/tmp</db:code>. The <db:code role="parameter">options</db:code> argument holds various options about how to run the dialog, see the <db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Option</db:link> enum for more information on the flags you can pass.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileName">getSaveFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectory">getExistingDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getOpenFileUrl">
<db:title>[static, since 5.2] QUrl QFileDialog::getOpenFileUrl(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>dir</db:emphasis> = QUrl(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = Q_NULLPTR, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options(), const QStringList &amp;<db:emphasis>supportedSchemes</db:emphasis> = QStringList())</db:title>
<db:para>This is a convenience static function that returns an existing file selected by the user. If the user presses Cancel, it returns an empty url.</db:para>
<db:para>The function is used similarly to <db:link xlink:href="qfiledialog.xml#getOpenFileName">QFileDialog::getOpenFileName</db:link>(). In particular <db:code role="parameter">parent</db:code>, <db:code role="parameter">caption</db:code>, <db:code role="parameter">dir</db:code>, <db:code role="parameter">filter</db:code>, <db:code role="parameter">selectedFilter</db:code> and <db:code role="parameter">options</db:code> are used in the exact same way.</db:para>
<db:para>The main difference with <db:link xlink:href="qfiledialog.xml#getOpenFileName">QFileDialog::getOpenFileName</db:link>() comes from the ability offered to the user to select a remote file. That's why the return type and the type of <db:code role="parameter">dir</db:code> is <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:para>The <db:code role="parameter">supportedSchemes</db:code> argument allows to restrict the type of URLs the user will be able to select. It is a way for the application to declare the protocols it will support to fetch the file content. An empty list means that no restriction is applied (the default). Supported for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>When possible, this static function will use the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. On platforms which don't support selecting remote files, Qt will allow to select only local files.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrls">getOpenFileUrls</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileUrl">getSaveFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectoryUrl">getExistingDirectoryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getOpenFileUrls">
<db:title>[static, since 5.2] QList&lt;QUrl&gt; QFileDialog::getOpenFileUrls(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>dir</db:emphasis> = QUrl(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = Q_NULLPTR, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options(), const QStringList &amp;<db:emphasis>supportedSchemes</db:emphasis> = QStringList())</db:title>
<db:para>This is a convenience static function that will return or or more existing files selected by the user. If the user presses Cancel, it returns an empty list.</db:para>
<db:para>The function is used similarly to <db:link xlink:href="qfiledialog.xml#getOpenFileNames">QFileDialog::getOpenFileNames</db:link>(). In particular <db:code role="parameter">parent</db:code>, <db:code role="parameter">caption</db:code>, <db:code role="parameter">dir</db:code>, <db:code role="parameter">filter</db:code>, <db:code role="parameter">selectedFilter</db:code> and <db:code role="parameter">options</db:code> are used in the exact same way.</db:para>
<db:para>The main difference with <db:link xlink:href="qfiledialog.xml#getOpenFileNames">QFileDialog::getOpenFileNames</db:link>() comes from the ability offered to the user to select remote files. That's why the return type and the type of <db:code role="parameter">dir</db:code> are respectively <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qurl.xml">QUrl</db:link>&gt; and <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:para>The <db:code role="parameter">supportedSchemes</db:code> argument allows to restrict the type of URLs the user will be able to select. It is a way for the application to declare the protocols it will support to fetch the file content. An empty list means that no restriction is applied (the default). Supported for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>When possible, this static function will use the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. On platforms which don't support selecting remote files, Qt will allow to select only local files.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileNames">getOpenFileNames</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrl">getOpenFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileUrl">getSaveFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectoryUrl">getExistingDirectoryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getSaveFileName">
<db:title>[static] QString QFileDialog::getSaveFileName(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>dir</db:emphasis> = QString(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = Q_NULLPTR, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options())</db:title>
<db:para>This is a convenience static function that will return a file name selected by the user. The file does not have to exist.</db:para>
<db:para>It creates a modal file dialog with the given <db:code role="parameter">parent</db:code> widget. If <db:code role="parameter">parent</db:code> is not 0, the dialog will be shown centered over the parent widget.</db:para>
<db:programlisting language="cpp">QString fileName = QFileDialog::getSaveFileName(this, tr(&quot;Save File&quot;),
                           &quot;/home/jana/untitled.png&quot;,
                           tr(&quot;Images (*.png *.xpm *.jpg)&quot;));
</db:programlisting>
<db:para>The file dialog's working directory will be set to <db:code role="parameter">dir</db:code>. If <db:code role="parameter">dir</db:code> includes a file name, the file will be selected. Only files that match the <db:code role="parameter">filter</db:code> are shown. The filter selected is set to <db:code role="parameter">selectedFilter</db:code>. The parameters <db:code role="parameter">dir</db:code>, <db:code role="parameter">selectedFilter</db:code>, and <db:code role="parameter">filter</db:code> may be empty strings. Multiple filters are separated with ';;'. For instance:</db:para>
<db:programlisting language="cpp">&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)&quot;
</db:programlisting>
<db:para>The <db:code role="parameter">options</db:code> argument holds various options about how to run the dialog, see the <db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Option</db:link> enum for more information on the flags you can pass.</db:para>
<db:para>The default filter can be chosen by setting <db:code role="parameter">selectedFilter</db:code> to the desired value.</db:para>
<db:para>The dialog's caption is set to <db:code role="parameter">caption</db:code>. If <db:code role="parameter">caption</db:code> is not specified, a default caption will be used.</db:para>
<db:para>On Windows, and macOS, this static function will use the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>.</db:para>
<db:para>On Windows the dialog will spin a blocking modal event loop that will not dispatch any QTimers, and if <db:code role="parameter">parent</db:code> is not 0 then it will position the dialog just below the parent's title bar. On macOS, with its native file dialog, the filter argument is ignored.</db:para>
<db:para>On Unix/X11, the normal behavior of the file dialog is to resolve and follow symlinks. For example, if <db:code>/usr/tmp</db:code> is a symlink to <db:code>/var/tmp</db:code>, the file dialog will change to <db:code>/var/tmp</db:code> after entering <db:code>/usr/tmp</db:code>. If <db:code role="parameter">options</db:code> includes <db:link xlink:href="qfiledialog.xml#Option-enum">DontResolveSymlinks</db:link> the file dialog will treat symlinks as regular directories.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileNames">getOpenFileNames</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectory">getExistingDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getSaveFileUrl">
<db:title>[static, since 5.2] QUrl QFileDialog::getSaveFileUrl(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>dir</db:emphasis> = QUrl(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = Q_NULLPTR, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options(), const QStringList &amp;<db:emphasis>supportedSchemes</db:emphasis> = QStringList())</db:title>
<db:para>This is a convenience static function that returns a file selected by the user. The file does not have to exist. If the user presses Cancel, it returns an empty url.</db:para>
<db:para>The function is used similarly to <db:link xlink:href="qfiledialog.xml#getSaveFileName">QFileDialog::getSaveFileName</db:link>(). In particular <db:code role="parameter">parent</db:code>, <db:code role="parameter">caption</db:code>, <db:code role="parameter">dir</db:code>, <db:code role="parameter">filter</db:code>, <db:code role="parameter">selectedFilter</db:code> and <db:code role="parameter">options</db:code> are used in the exact same way.</db:para>
<db:para>The main difference with <db:link xlink:href="qfiledialog.xml#getSaveFileName">QFileDialog::getSaveFileName</db:link>() comes from the ability offered to the user to select a remote file. That's why the return type and the type of <db:code role="parameter">dir</db:code> is <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:para>The <db:code role="parameter">supportedSchemes</db:code> argument allows to restrict the type of URLs the user will be able to select. It is a way for the application to declare the protocols it will support to save the file content. An empty list means that no restriction is applied (the default). Supported for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>When possible, this static function will use the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. On platforms which don't support selecting remote files, Qt will allow to select only local files.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileName">getSaveFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrl">getOpenFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrls">getOpenFileUrls</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectoryUrl">getExistingDirectoryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="history">
<db:title>QStringList QFileDialog::history() const</db:title>
<db:para>Returns the browsing history of the filedialog as a list of paths.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setHistory">setHistory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconProvider">
<db:title>QFileIconProvider *QFileDialog::iconProvider() const</db:title>
<db:para>Returns the icon provider used by the filedialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setIconProvider">setIconProvider</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDelegate">
<db:title>QAbstractItemDelegate *QFileDialog::itemDelegate() const</db:title>
<db:para>Returns the item delegate used to render the items in the views in the filedialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setItemDelegate">setItemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelText">
<db:title>QString QFileDialog::labelText(QFileDialog::DialogLabel <db:emphasis>label</db:emphasis>) const</db:title>
<db:para>Returns the text shown in the filedialog in the specified <db:code role="parameter">label</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setLabelText">setLabelText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeTypeFilters">
<db:title>[since 5.2] QStringList QFileDialog::mimeTypeFilters() const</db:title>
<db:para>Returns the MIME type filters that are in operation on this file dialog.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setMimeTypeFilters">setMimeTypeFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nameFilters">
<db:title>[since 4.4] QStringList QFileDialog::nameFilters() const</db:title>
<db:para>Returns the file type filters that are in operation on this file dialog.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[since 4.5] void QFileDialog::open(QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function connects one of its signals to the slot specified by <db:code role="parameter">receiver</db:code> and <db:code role="parameter">member</db:code>. The specific signal depends is <db:link xlink:href="qfiledialog.xml#filesSelected">filesSelected</db:link>() if <db:link xlink:href="qfiledialog.xml#fileMode-prop">fileMode</db:link> is <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFiles</db:link> and <db:link xlink:href="qfiledialog.xml#fileSelected">fileSelected</db:link>() if <db:link xlink:href="qfiledialog.xml#fileMode-prop">fileMode</db:link> is anything else.</db:para>
<db:para>The signal will be disconnected from the slot when the dialog is closed.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="proxyModel">
<db:title>QAbstractProxyModel *QFileDialog::proxyModel() const</db:title>
<db:para>Returns the proxy model used by the file dialog. By default no proxy is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setProxyModel">setProxyModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restoreState">
<db:title>[since 4.3] bool QFileDialog::restoreState(const QByteArray &amp;<db:emphasis>state</db:emphasis>)</db:title>
<db:para>Restores the dialogs's layout, history and current directory to the <db:code role="parameter">state</db:code> specified.</db:para>
<db:para>Typically this is used in conjunction with <db:link xlink:href="qsettings.xml">QSettings</db:link> to restore the size from a past session.</db:para>
<db:para>Returns <db:code>false</db:code> if there are errors</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="saveState">
<db:title>[since 4.3] QByteArray QFileDialog::saveState() const</db:title>
<db:para>Saves the state of the dialog's layout, history and current directory.</db:para>
<db:para>Typically this is used in conjunction with <db:link xlink:href="qsettings.xml">QSettings</db:link> to remember the size for a future session. A version number is stored as part of the data.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="selectFile">
<db:title>void QFileDialog::selectFile(const QString &amp;<db:emphasis>filename</db:emphasis>)</db:title>
<db:para>Selects the given <db:code role="parameter">filename</db:code> in the file dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedFiles">selectedFiles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectMimeTypeFilter">
<db:title>[since 5.2] void QFileDialog::selectMimeTypeFilter(const QString &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:para>Sets the current MIME type <db:code role="parameter">filter</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="selectNameFilter">
<db:title>[since 4.4] void QFileDialog::selectNameFilter(const QString &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:para>Sets the current file type <db:code role="parameter">filter</db:code>. Multiple filters can be passed in <db:code role="parameter">filter</db:code> by separating them with semicolons or spaces.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setNameFilter">setNameFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#selectedNameFilter">selectedNameFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectUrl">
<db:title>[since 5.2] void QFileDialog::selectUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>Selects the given <db:code role="parameter">url</db:code> in the file dialog.</db:para>
<db:note>
<db:para>The non-native <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> supports only local files.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedUrls">selectedUrls</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedFiles">
<db:title>QStringList QFileDialog::selectedFiles() const</db:title>
<db:para>Returns a list of strings containing the absolute paths of the selected files in the dialog. If no files are selected, or the mode is not <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFiles</db:link> or <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFile</db:link>, selectedFiles() contains the current path in the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedNameFilter">selectedNameFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#selectFile">selectFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedNameFilter">
<db:title>[since 4.4] QString QFileDialog::selectedNameFilter() const</db:title>
<db:para>Returns the filter that the user selected in the file dialog.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedFiles">selectedFiles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedUrls">
<db:title>[since 5.2] QList&lt;QUrl&gt; QFileDialog::selectedUrls() const</db:title>
<db:para>Returns a list of urls containing the selected files in the dialog. If no files are selected, or the mode is not <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFiles</db:link> or <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFile</db:link>, selectedUrls() contains the current path in the viewport.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedNameFilter">selectedNameFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#selectUrl">selectUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDirectory">
<db:title>void QFileDialog::setDirectory(const QString &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:para>Sets the file dialog's current <db:code role="parameter">directory</db:code>.</db:para>
<db:note>
<db:para>On iOS, if you set <db:code role="parameter">directory</db:code> to <db:link xlink:href="qstandardpaths.xml#standardLocations">QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).last</db:link>(), a native image picker dialog will be used for accessing the user's photo album. The filename returned can be loaded using <db:link xlink:href="qfile.xml">QFile</db:link> and related APIs. For this to be enabled, the Info.plist assigned to QMAKE_INFO_PLIST in the project file must contain the key <db:code>NSPhotoLibraryUsageDescription</db:code>. See Info.plist documentation from Apple for more information regarding this key. This feature was added in Qt 5.5.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#directory">directory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDirectory-1">
<db:title>void QFileDialog::setDirectory(const QDir &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setDirectoryUrl">
<db:title>[since 5.2] void QFileDialog::setDirectoryUrl(const QUrl &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:para>Sets the file dialog's current <db:code role="parameter">directory</db:code> url.</db:para>
<db:note>
<db:para>The non-native <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> supports only local files.</db:para>
</db:note>
<db:note>
<db:para>On Windows, it is possible to pass URLs representing one of the <db:emphasis>virtual folders</db:emphasis>, such as &quot;Computer&quot; or &quot;Network&quot;. This is done by passing a <db:link xlink:href="qurl.xml">QUrl</db:link> using the scheme <db:code>clsid</db:code> followed by the CLSID value with the curly braces removed. For example the URL <db:code>clsid:374DE290-123F-4565-9164-39C4925E467B</db:code> denotes the download location. For a complete list of possible values, see the MSDN documentation on <db:link xlink:href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd378457.aspx">KNOWNFOLDERID</db:link>. This feature was added in Qt 5.5.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#directoryUrl">directoryUrl</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml">QUuid</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilter">
<db:title>[since 4.4] void QFileDialog::setFilter(QDir::Filters <db:emphasis>filters</db:emphasis>)</db:title>
<db:para>Sets the filter used by the model to <db:code role="parameter">filters</db:code>. The filter is used to specify the kind of files that should be shown.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#filter">filter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHistory">
<db:title>void QFileDialog::setHistory(const QStringList &amp;<db:emphasis>paths</db:emphasis>)</db:title>
<db:para>Sets the browsing history of the filedialog to contain the given <db:code role="parameter">paths</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#history">history</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIconProvider">
<db:title>void QFileDialog::setIconProvider(QFileIconProvider *<db:emphasis>provider</db:emphasis>)</db:title>
<db:para>Sets the icon provider used by the filedialog to the specified <db:code role="parameter">provider</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#iconProvider">iconProvider</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemDelegate">
<db:title>void QFileDialog::setItemDelegate(QAbstractItemDelegate *<db:emphasis>delegate</db:emphasis>)</db:title>
<db:para>Sets the item delegate used to render items in the views in the file dialog to the given <db:code role="parameter">delegate</db:code>.</db:para>
<db:warning>
<db:para>You should not share the same instance of a delegate between views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the <db:link xlink:href="qabstractitemdelegate.xml#closeEditor">closeEditor</db:link>() signal, and attempt to access, modify or close an editor that has already been closed.</db:para>
</db:warning>
<db:para>Note that the model used is <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>. It has custom item data roles, which is described by the <db:link xlink:href="qfilesystemmodel.xml#Roles-enum">Roles</db:link> enum. You can use a <db:link xlink:href="qfileiconprovider.xml">QFileIconProvider</db:link> if you only want custom icons.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#itemDelegate">itemDelegate</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#setIconProvider">setIconProvider</db:link>()</db:member>
<db:member><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLabelText">
<db:title>void QFileDialog::setLabelText(QFileDialog::DialogLabel <db:emphasis>label</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">text</db:code> shown in the filedialog in the specified <db:code role="parameter">label</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#labelText">labelText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMimeTypeFilters">
<db:title>[since 5.2] void QFileDialog::setMimeTypeFilters(const QStringList &amp;<db:emphasis>filters</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">filters</db:code> used in the file dialog, from a list of MIME types.</db:para>
<db:para>Convenience method for <db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>(). Uses <db:link xlink:href="qmimetype.xml">QMimeType</db:link> to create a name filter from the glob patterns and description defined in each MIME type.</db:para>
<db:para>Use application/octet-stream for the &quot;All files (*)&quot; filter, since that is the base MIME type for all files.</db:para>
<db:para>Calling setMimeTypeFilters overrides any previously set name filters, and changes the return value of <db:link xlink:href="qfiledialog.xml#nameFilters">nameFilters</db:link>().</db:para>
<db:programlisting language="cpp">QStringList mimeTypeFilters;
mimeTypeFilters &lt;&lt; &quot;image/jpeg&quot; // will show &quot;JPEG image (*.jpeg *.jpg *.jpe)
            &lt;&lt; &quot;image/png&quot;  // will show &quot;PNG image (*.png)&quot;
            &lt;&lt; &quot;application/octet-stream&quot;; // will show &quot;All files (*)&quot;

QFileDialog dialog(this);
dialog.setMimeTypeFilters(mimeTypeFilters);
dialog.exec();
</db:programlisting>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#mimeTypeFilters">mimeTypeFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNameFilter">
<db:title>[since 4.4] void QFileDialog::setNameFilter(const QString &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:para>Sets the filter used in the file dialog to the given <db:code role="parameter">filter</db:code>.</db:para>
<db:para>If <db:code role="parameter">filter</db:code> contains a pair of parentheses containing one or more filename-wildcard patterns, separated by spaces, then only the text contained in the parentheses is used as the filter. This means that these calls are all equivalent:</db:para>
<db:programlisting language="cpp">dialog.setNameFilter(&quot;All C++ files (*.cpp *.cc *.C *.cxx *.c++)&quot;);
dialog.setNameFilter(&quot;*.cpp *.cc *.C *.cxx *.c++&quot;);
</db:programlisting>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setMimeTypeFilters">setMimeTypeFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNameFilters">
<db:title>[since 4.4] void QFileDialog::setNameFilters(const QStringList &amp;<db:emphasis>filters</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">filters</db:code> used in the file dialog.</db:para>
<db:para>Note that the filter <db:emphasis role="bold">*.*</db:emphasis> is not portable, because the historical assumption that the file extension determines the file type is not consistent on every operating system. It is possible to have a file with no dot in its name (for example, <db:code>Makefile</db:code>). In a native Windows file dialog, <db:emphasis role="bold">*.*</db:emphasis> will match such files, while in other types of file dialogs it may not. So it is better to use <db:emphasis role="bold">*</db:emphasis> if you mean to select any file.</db:para>
<db:programlisting language="cpp">QStringList filters;
filters &lt;&lt; &quot;Image files (*.png *.xpm *.jpg)&quot;
        &lt;&lt; &quot;Text files (*.txt)&quot;
        &lt;&lt; &quot;Any files (*)&quot;;

QFileDialog dialog(this);
dialog.setNameFilters(filters);
dialog.exec();
</db:programlisting>
<db:para><db:link xlink:href="qfiledialog.xml#setMimeTypeFilters">setMimeTypeFilters</db:link>() has the advantage of providing all possible name filters for each file type. For example, JPEG images have three possible extensions; if your application can open such files, selecting the <db:code>image/jpeg</db:code> mime type as a filter will allow you to open all of them.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#nameFilters">nameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOption">
<db:title>[since 4.5] void QFileDialog::setOption(QFileDialog::Option <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:para>Sets the given <db:code role="parameter">option</db:code> to be enabled if <db:code role="parameter">on</db:code> is true; otherwise, clears the given <db:code role="parameter">option</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#options-prop">options</db:link></db:member>
<db:member><db:link xlink:href="qfiledialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProxyModel">
<db:title>[since 4.3] void QFileDialog::setProxyModel(QAbstractProxyModel *<db:emphasis>proxyModel</db:emphasis>)</db:title>
<db:para>Sets the model for the views to the given <db:code role="parameter">proxyModel</db:code>. This is useful if you want to modify the underlying model; for example, to add columns, filter data or add drives.</db:para>
<db:para>Any existing proxy model will be removed, but not deleted. The file dialog will take ownership of the <db:code role="parameter">proxyModel</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#proxyModel">proxyModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSidebarUrls">
<db:title>[since 4.3] void QFileDialog::setSidebarUrls(const QList&lt;QUrl&gt; &amp;<db:emphasis>urls</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">urls</db:code> that are located in the sidebar.</db:para>
<db:para>For instance:</db:para>
<db:programlisting language="cpp">    QList&lt;QUrl&gt; urls;
    urls &lt;&lt; QUrl::fromLocalFile(&quot;/Users/foo/Code/qt5&quot;)
         &lt;&lt; QUrl::fromLocalFile(QStandardPaths::standardLocations(QStandardPaths::MusicLocation).first());

    QFileDialog dialog;
    dialog.setSidebarUrls(urls);
    dialog.setFileMode(QFileDialog::AnyFile);
    if(dialog.exec()) {
        // ...
    }
</db:programlisting>
<db:para>The file dialog will then look like this:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/filedialogurls.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#sidebarUrls">sidebarUrls</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QFileDialog::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#setVisible" role="function">QDialog::setVisible(bool visible)</db:link>.</db:para>
</db:section>
<db:section xml:id="sidebarUrls">
<db:title>[since 4.3] QList&lt;QUrl&gt; QFileDialog::sidebarUrls() const</db:title>
<db:para>Returns a list of urls that are currently in the sidebar</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setSidebarUrls">setSidebarUrls</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testOption">
<db:title>[since 4.5] bool QFileDialog::testOption(QFileDialog::Option <db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">option</db:code> is enabled; otherwise, returns false.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#options-prop">options</db:link></db:member>
<db:member><db:link xlink:href="qfiledialog.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="urlSelected">
<db:title>[since 5.2] void QFileDialog::urlSelected(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>When the selection changes and the dialog is accepted, this signal is emitted with the (possibly empty) selected <db:code role="parameter">url</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#currentUrlChanged">currentUrlChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="urlsSelected">
<db:title>[since 5.2] void QFileDialog::urlsSelected(const QList&lt;QUrl&gt; &amp;<db:emphasis>urls</db:emphasis>)</db:title>
<db:para>When the selection changes and the dialog is accepted, this signal is emitted with the (possibly empty) list of selected <db:code role="parameter">urls</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#currentUrlChanged">currentUrlChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QFileDialog</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="confirmOverwrite-prop">
<db:title>[deprecated] confirmOverwrite : bool</db:title>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds whether the filedialog should ask before accepting a selected file, when the accept mode is <db:link xlink:href="qfiledialog.xml#AcceptMode-enum">AcceptSave</db:link></db:para>
<db:para>Use <db:link xlink:href="qfiledialog.xml#setOption">setOption</db:link>(<db:link xlink:href="qfiledialog.xml#Option-enum">DontConfirmOverwrite</db:link>, !<db:emphasis>enabled</db:emphasis>) or !<db:link xlink:href="qfiledialog.xml#testOption">testOption</db:link>(<db:link xlink:href="qfiledialog.xml#Option-enum">DontConfirmOverwrite</db:link>) instead.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">confirmOverwrite</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setConfirmOverwrite</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="nameFilterDetailsVisible-prop">
<db:title>[since 4.4, deprecated] nameFilterDetailsVisible : bool</db:title>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds whether the filter details is shown or not.</db:para>
<db:para>When this property is <db:code>true</db:code> (the default), the filter details are shown in the combo box. When the property is set to false, these are hidden.</db:para>
<db:para>Use <db:link xlink:href="qfiledialog.xml#setOption">setOption</db:link>(<db:link xlink:href="qfiledialog.xml#Option-enum">HideNameFilterDetails</db:link>, !<db:emphasis>enabled</db:emphasis>) or !<db:link xlink:href="qfiledialog.xml#testOption">testOption</db:link>(<db:link xlink:href="qfiledialog.xml#Option-enum">HideNameFilterDetails</db:link>).</db:para>
<db:para>This property was introduced in Qt 4.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isNameFilterDetailsVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setNameFilterDetailsVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>[deprecated] readOnly : bool</db:title>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds whether the filedialog is read-only</db:para>
<db:para>If this property is set to false, the file dialog will allow renaming, and deleting of files and directories and creating directories.</db:para>
<db:para>Use <db:link xlink:href="qfiledialog.xml#setOption">setOption</db:link>(<db:link xlink:href="qfiledialog.xml#Option-enum">ReadOnly</db:link>, <db:emphasis>enabled</db:emphasis>) or <db:link xlink:href="qfiledialog.xml#testOption">testOption</db:link>(<db:link xlink:href="qfiledialog.xml#Option-enum">ReadOnly</db:link>) instead.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isReadOnly</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setReadOnly</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="resolveSymlinks-prop">
<db:title>[deprecated] resolveSymlinks : bool</db:title>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds whether the filedialog should resolve shortcuts</db:para>
<db:para>If this property is set to true, the file dialog will resolve shortcuts or symbolic links.</db:para>
<db:para>Use <db:link xlink:href="qfiledialog.xml#setOption">setOption</db:link>(<db:link xlink:href="qfiledialog.xml#Option-enum">DontResolveSymlinks</db:link>, !<db:code role="parameter">enabled</db:code>) or !<db:link xlink:href="qfiledialog.xml#testOption">testOption</db:link>(<db:link xlink:href="qfiledialog.xml#Option-enum">DontResolveSymlinks</db:link>).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">resolveSymlinks</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setResolveSymlinks</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
</db:article>
