<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFileDialog Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> class provides a dialog that allows users to select files or directories.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFileDialog</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFileDialog is part of <db:simplelist><db:member><db:link xlink:href="standard-dialogs.xml">Standard Dialogs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> class enables a user to traverse the file system to select one or many files or a directory.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickdialogs-filedialog-gtk.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The easiest way to create a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> is to use the static functions, such as <db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>().</db:para>
<db:programlisting language="cpp">fileName = QFileDialog::getOpenFileName(this,
    tr(&quot;Open Image&quot;), &quot;/home/jana&quot;, tr(&quot;Image Files (*.png *.jpg *.bmp)&quot;));
</db:programlisting>
<db:para>In the above example, a modal <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> is created using a static function. The dialog initially displays the contents of the &quot;/home/jana&quot; directory, and displays files matching the patterns given in the string &quot;Image Files (*.png *.jpg *.bmp)&quot;. The parent of the file dialog is set to <db:emphasis>this</db:emphasis>, and the window title is set to &quot;Open Image&quot;.</db:para>
<db:para>If you want to use multiple filters, separate each one with <db:emphasis>two</db:emphasis> semicolons. For example:</db:para>
<db:programlisting language="cpp">&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)&quot;
</db:programlisting>
<db:para>You can create your own <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> without using the static functions. By calling <db:link xlink:href="qfiledialog.xml#fileMode-prop">setFileMode</db:link>(), you can specify what the user must select in the dialog:</db:para>
<db:programlisting language="cpp">QFileDialog dialog(this);
dialog.setFileMode(QFileDialog::AnyFile);
</db:programlisting>
<db:para>In the above example, the mode of the file dialog is set to <db:link xlink:href="qfiledialog.xml#FileMode-enum">AnyFile</db:link>, meaning that the user can select any file, or even specify a file that doesn't exist. This mode is useful for creating a &quot;Save As&quot; file dialog. Use <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFile</db:link> if the user must select an existing file, or <db:link xlink:href="qfiledialog.xml#FileMode-enum">Directory</db:link> if only a directory can be selected. See the <db:link xlink:href="qfiledialog.xml#FileMode-enum">QFileDialog::FileMode</db:link> enum for the complete list of modes.</db:para>
<db:para>The <db:link xlink:href="qfiledialog.xml#fileMode-prop">fileMode</db:link> property contains the mode of operation for the dialog; this indicates what types of objects the user is expected to select. Use <db:link xlink:href="qfiledialog.xml#setNameFilter">setNameFilter</db:link>() to set the dialog's file filter. For example:</db:para>
<db:programlisting language="cpp">dialog.setNameFilter(tr(&quot;Images (*.png *.xpm *.jpg)&quot;));
</db:programlisting>
<db:para>In the above example, the filter is set to <db:code>&quot;Images (*.png *.xpm *.jpg)&quot;</db:code>. This means that only files with the extension <db:code>png</db:code>, <db:code>xpm</db:code>, or <db:code>jpg</db:code> are shown in the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. You can apply several filters by using <db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>(). Use <db:link xlink:href="qfiledialog.xml#selectNameFilter">selectNameFilter</db:link>() to select one of the filters you've given as the file dialog's default filter.</db:para>
<db:para>The file dialog has two view modes: <db:link xlink:href="qfiledialog.xml#ViewMode-enum">List</db:link> and <db:link xlink:href="qfiledialog.xml#ViewMode-enum">Detail</db:link>. <db:link xlink:href="qfiledialog.xml#ViewMode-enum">List</db:link> presents the contents of the current directory as a list of file and directory names. <db:link xlink:href="qfiledialog.xml#ViewMode-enum">Detail</db:link> also displays a list of file and directory names, but provides additional information alongside each name, such as the file size and modification date. Set the mode with <db:link xlink:href="qfiledialog.xml#viewMode-prop">setViewMode</db:link>():</db:para>
<db:programlisting language="cpp">dialog.setViewMode(QFileDialog::Detail);
</db:programlisting>
<db:para>The last important function you need to use when creating your own file dialog is <db:link xlink:href="qfiledialog.xml#selectedFiles">selectedFiles</db:link>().</db:para>
<db:programlisting language="cpp">QStringList fileNames;
if (dialog.exec())
    fileNames = dialog.selectedFiles();
</db:programlisting>
<db:para>In the above example, a modal file dialog is created and shown. If the user clicked OK, the file they selected is put in <db:code>fileName</db:code>.</db:para>
<db:para>The dialog's working directory can be set with <db:link xlink:href="qfiledialog.xml#setDirectory">setDirectory</db:link>(). Each file in the current directory can be selected using the <db:link xlink:href="qfiledialog.xml#selectFile">selectFile</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs</db:link> example shows how to use <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> as well as other built-in Qt dialogs.</db:para>
<db:para>By default, a platform-native file dialog is used if the platform has one. In that case, the widgets that would otherwise be used to construct the dialog are not instantiated, so related accessors such as <db:link xlink:href="qwidget.xml#layout">layout</db:link>() and <db:link xlink:href="qfiledialog.xml#itemDelegate">itemDelegate</db:link>() return null. Also, not all platforms show file dialogs with a title bar, so be aware that the caption text might not be visible to the user. You can set the <db:link xlink:href="qfiledialog.xml#Option-enum">DontUseNativeDialog</db:link> option or set the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">AA_DontUseNativeDialogs</db:link> application attribute to ensure that the widget-based implementation is used instead of the native dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qcolordialog.xml">QColorDialog</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AcceptMode-enum">
<db:title>enum QFileDialog::AcceptMode</db:title>
<db:enumsynopsis>
<db:enumname>AcceptMode</db:enumname>
<db:enumitem>
<db:enumidentifier>AcceptOpen</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AcceptSave</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::AcceptOpen</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::AcceptSave</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="DialogLabel-enum">
<db:title>enum QFileDialog::DialogLabel</db:title>
<db:enumsynopsis>
<db:enumname>DialogLabel</db:enumname>
<db:enumitem>
<db:enumidentifier>LookIn</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FileName</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FileType</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Accept</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Reject</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::LookIn</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::FileName</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::FileType</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::Accept</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::Reject</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="FileMode-enum">
<db:title>enum QFileDialog::FileMode</db:title>
<db:enumsynopsis>
<db:enumname>FileMode</db:enumname>
<db:enumitem>
<db:enumidentifier>AnyFile</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExistingFile</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Directory</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExistingFiles</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to indicate what the user may select in the file dialog; that is, what the dialog returns if the user clicks OK.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::AnyFile</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The name of a file, whether it exists or not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::ExistingFile</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The name of a single existing file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::Directory</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The name of a directory. Both files and directories are displayed. However, the native Windows file dialog does not support displaying files in the directory chooser.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::ExistingFiles</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The names of zero or more existing files.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#fileMode-prop">setFileMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Option-enum">
<db:title>enum QFileDialog::Option</db:title>
<db:bridgehead renderas="sect2">flags QFileDialog::Options</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Option</db:enumname>
<db:enumitem>
<db:enumidentifier>ShowDirsOnly</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontResolveSymlinks</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontConfirmOverwrite</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontUseNativeDialog</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadOnly</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HideNameFilterDetails</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontUseCustomDirectoryIcons</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QFileDialog::Options</db:typedefname>
</db:typedefsynopsis>
<db:para>Options that influence the behavior of the dialog.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::ShowDirsOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Only show directories. By default, both files and directories are shown. This option is only effective in the <db:link xlink:href="qfiledialog.xml#FileMode-enum">Directory</db:link> file mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DontResolveSymlinks</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Don't resolve symlinks. By default, symlinks are resolved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DontConfirmOverwrite</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Don't ask for confirmation if an existing file is selected. By default, confirmation is requested. This option is only effective if <db:link xlink:href="qfiledialog.xml#acceptMode-prop">acceptMode</db:link> is <db:link xlink:href="qfiledialog.xml#AcceptMode-enum">AcceptSave</db:link>). It is furthermore not used on macOS for native file dialogs.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DontUseNativeDialog</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Don't use a platform-native file dialog, but the widget-based one provided by Qt. By default, a native file dialog is shown unless you use a subclass of <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> that contains the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro, the global <db:link xlink:href="qt.xml#ApplicationAttribute-enum">AA_DontUseNativeDialogs</db:link> application attribute is set, or the platform does not have a native dialog of the type that you require. For the option to be effective, you must set it before changing other properties of the dialog, or showing the dialog.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Indicates that the model is read-only.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::HideNameFilterDetails</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Indicates if the file name filter details are hidden or not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::DontUseCustomDirectoryIcons</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>Always use the default directory icon. Some platforms allow the user to set a different icon, but custom icon lookup might cause significant performance issues over network or removable drives. Setting this will enable the <db:link xlink:href="qabstractfileiconprovider.xml#Option-enum">DontUseCustomDirectoryIcons</db:link> option in <db:link xlink:href="qfiledialog.xml#iconProvider">iconProvider</db:link>(). This enum value was added in Qt 5.2.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Options</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Option&gt;. </db:code>It stores an OR combination of <db:code>Option</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qfiledialog.xml#testOption">testOption</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ViewMode-enum">
<db:title>enum QFileDialog::ViewMode</db:title>
<db:enumsynopsis>
<db:enumname>ViewMode</db:enumname>
<db:enumitem>
<db:enumidentifier>Detail</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>List</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the view mode of the file dialog; that is, what information about each file is displayed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::Detail</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Displays an icon, a name, and details for each item in the directory.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:emphasis>::List</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Displays only an icon and a name for each item in the directory.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#viewMode-prop">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptMode-prop">
<db:title>acceptMode : AcceptMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>AcceptMode</db:type>
<db:varname>acceptMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">acceptMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setAcceptMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the accept mode of the dialog.</db:para>
<db:para>The action mode defines whether the dialog is for opening or saving files.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qfiledialog.xml#AcceptMode-enum">AcceptOpen</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfiledialog.xml#AcceptMode-enum">QFileDialog::AcceptMode</db:link></db:type> <db:emphasis role="bold">acceptMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAcceptMode</db:emphasis>(<db:type><db:link xlink:href="qfiledialog.xml#AcceptMode-enum">QFileDialog::AcceptMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#AcceptMode-enum">AcceptMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultSuffix-prop">
<db:title>defaultSuffix : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>defaultSuffix</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">defaultSuffix</db:synopsisinfo>
<db:synopsisinfo role="setter">setDefaultSuffix</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Suffix added to the filename if no other suffix was specified.</db:para>
<db:para>This property specifies a string that is added to the filename if it has no suffix yet. The suffix is typically used to indicate the file type (e.g. &quot;txt&quot; indicates a text file).</db:para>
<db:para>If the first character is a dot ('.'), it is removed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">defaultSuffix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDefaultSuffix</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>suffix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="fileMode-prop">
<db:title>fileMode : FileMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>FileMode</db:type>
<db:varname>fileMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">fileMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setFileMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the file mode of the dialog.</db:para>
<db:para>The file mode defines the number and type of items that the user is expected to select in the dialog.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qfiledialog.xml#FileMode-enum">AnyFile</db:link>.</db:para>
<db:para>This function sets the labels for the <db:link xlink:href="qfiledialog.xml#DialogLabel-enum">FileName</db:link> and <db:link xlink:href="qfiledialog.xml#DialogLabel-enum">Accept</db:link> <db:link xlink:href="qfiledialog.xml#DialogLabel-enum">DialogLabel</db:link>s. It is possible to set custom text after the call to setFileMode().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfiledialog.xml#FileMode-enum">QFileDialog::FileMode</db:link></db:type> <db:emphasis role="bold">fileMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFileMode</db:emphasis>(<db:type><db:link xlink:href="qfiledialog.xml#FileMode-enum">QFileDialog::FileMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#FileMode-enum">FileMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="options-prop">
<db:title>options : Options</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Options</db:type>
<db:varname>options</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">options</db:synopsisinfo>
<db:synopsisinfo role="setter">setOptions</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the various options that affect the look and feel of the dialog.</db:para>
<db:para>By default, all options are disabled.</db:para>
<db:para>Options (particularly the <db:link xlink:href="qfiledialog.xml#Option-enum">DontUseNativeDialog</db:link> option) should be set before changing dialog properties or showing the dialog.</db:para>
<db:para>Setting options while the dialog is visible is not guaranteed to have an immediate effect on the dialog (depending on the option and on the platform).</db:para>
<db:para>Setting options after changing other properties may cause these values to have no effect.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Options</db:link></db:type> <db:emphasis role="bold">options</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOptions</db:emphasis>(<db:type><db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Options</db:link></db:type> <db:emphasis>options</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedSchemes-prop">
<db:title>supportedSchemes : QStringList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QStringList</db:type>
<db:varname>supportedSchemes</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">supportedSchemes</db:synopsisinfo>
<db:synopsisinfo role="setter">setSupportedSchemes</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL schemes that the file dialog should allow navigating to.</db:para>
<db:para>Setting this property allows to restrict the type of URLs the user can select. It is a way for the application to declare the protocols it supports to fetch the file content. An empty list means that no restriction is applied (the default). Support for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">supportedSchemes</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSupportedSchemes</db:emphasis>(const <db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> &amp;<db:emphasis>schemes</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewMode-prop">
<db:title>viewMode : ViewMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ViewMode</db:type>
<db:varname>viewMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">viewMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setViewMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the way files and directories are displayed in the dialog.</db:para>
<db:para>By default, the <db:code>Detail</db:code> mode is used to display information about files and directories.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfiledialog.xml#ViewMode-enum">QFileDialog::ViewMode</db:link></db:type> <db:emphasis role="bold">viewMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewMode</db:emphasis>(<db:type><db:link xlink:href="qfiledialog.xml#ViewMode-enum">QFileDialog::ViewMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#ViewMode-enum">ViewMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFileDialog">
<db:title>QFileDialog::QFileDialog(QWidget *<db:emphasis>parent</db:emphasis>, Qt::WindowFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileDialog</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileDialog(QWidget *parent, Qt::WindowFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a file dialog with the given <db:code role="parameter">parent</db:code> and widget <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="QFileDialog-1">
<db:title>[explicit] QFileDialog::QFileDialog(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>directory</db:emphasis> = QString(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString())</db:title>
<db:constructorsynopsis>
<db:methodname>QFileDialog</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>caption</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>directory</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileDialog(QWidget *parent, const QString &amp;caption, const QString &amp;directory, const QString &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a file dialog with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">caption</db:code> that initially displays the contents of the specified <db:code role="parameter">directory</db:code>. The contents of the directory are filtered before being shown in the dialog, using a semicolon-separated list of filters specified by <db:code role="parameter">filter</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFileDialog">
<db:title>[virtual] QFileDialog::~QFileDialog()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QFileDialog</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QFileDialog()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the file dialog.</db:para>
</db:section>
<db:section xml:id="accept">
<db:title>[override virtual protected] void QFileDialog::accept()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>accept</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void accept() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#accept" role="function">QDialog::accept()</db:link>.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QFileDialog::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="currentChanged">
<db:title>void QFileDialog::currentChanged(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentChanged(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When the current file changes for local operations, this signal is emitted with the new file name as the <db:code role="parameter">path</db:code> parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#filesSelected">filesSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentUrlChanged">
<db:title>void QFileDialog::currentUrlChanged(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentUrlChanged</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentUrlChanged(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When the current file changes, this signal is emitted with the new file URL as the <db:code role="parameter">url</db:code> parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#urlsSelected">urlsSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directory">
<db:title>QDir QFileDialog::directory() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDir</db:type>
<db:methodname>directory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDir directory() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the directory currently being displayed in the dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setDirectory">setDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directoryEntered">
<db:title>void QFileDialog::directoryEntered(const QString &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>directoryEntered</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>directory</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void directoryEntered(const QString &amp;directory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted for local operations when the user enters a <db:code role="parameter">directory</db:code>.</db:para>
</db:section>
<db:section xml:id="directoryUrl">
<db:title>QUrl QFileDialog::directoryUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>directoryUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl directoryUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the url of the directory currently being displayed in the dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setDirectoryUrl">setDirectoryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directoryUrlEntered">
<db:title>void QFileDialog::directoryUrlEntered(const QUrl &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>directoryUrlEntered</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>directory</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void directoryUrlEntered(const QUrl &amp;directory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user enters a <db:code role="parameter">directory</db:code>.</db:para>
</db:section>
<db:section xml:id="done">
<db:title>[override virtual protected] void QFileDialog::done(int <db:emphasis>result</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>done</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>result</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void done(int result) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#done" role="function">QDialog::done(int r)</db:link>.</db:para>
</db:section>
<db:section xml:id="fileSelected">
<db:title>void QFileDialog::fileSelected(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fileSelected</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fileSelected(const QString &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When the selection changes for local operations and the dialog is accepted, this signal is emitted with the (possibly empty) selected <db:code role="parameter">file</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#currentChanged">currentChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesSelected">
<db:title>void QFileDialog::filesSelected(const QStringList &amp;<db:emphasis>selected</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>filesSelected</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>selected</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void filesSelected(const QStringList &amp;selected)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When the selection changes for local operations and the dialog is accepted, this signal is emitted with the (possibly empty) list of <db:code role="parameter">selected</db:code> files.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#currentChanged">currentChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter">
<db:title>QDir::Filters QFileDialog::filter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDir::Filters</db:type>
<db:methodname>filter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDir::Filters filter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the filter that is used when displaying files.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setFilter">setFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterSelected">
<db:title>void QFileDialog::filterSelected(const QString &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>filterSelected</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void filterSelected(const QString &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user selects a <db:code role="parameter">filter</db:code>.</db:para>
</db:section>
<db:section xml:id="getExistingDirectory">
<db:title>[static] QString QFileDialog::getExistingDirectory(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>dir</db:emphasis> = QString(), QFileDialog::Options <db:emphasis>options</db:emphasis> = ShowDirsOnly)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>getExistingDirectory</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>caption</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>dir</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QFileDialog::Options</db:type>
<db:parameter>options</db:parameter>
<db:initializer>ShowDirsOnly</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString getExistingDirectory(QWidget *parent, const QString &amp;caption, const QString &amp;dir, QFileDialog::Options options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that returns an existing directory selected by the user.</db:para>
<db:programlisting language="cpp">QString dir = QFileDialog::getExistingDirectory(this, tr(&quot;Open Directory&quot;),
                                                &quot;/home&quot;,
                                                QFileDialog::ShowDirsOnly
                                                | QFileDialog::DontResolveSymlinks);
</db:programlisting>
<db:para>This function creates a modal file dialog with the given <db:code role="parameter">parent</db:code> widget. If <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code>, the dialog is shown centered over the parent widget.</db:para>
<db:para>The dialog's working directory is set to <db:code role="parameter">dir</db:code>, and the caption is set to <db:code role="parameter">caption</db:code>. Either of these can be an empty string in which case the current directory and a default caption are used respectively.</db:para>
<db:para>The <db:code role="parameter">options</db:code> argument holds various options about how to run the dialog. See the <db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Option</db:link> enum for more information on the flags you can pass. To ensure a native file dialog, <db:link xlink:href="qfiledialog.xml#Option-enum">ShowDirsOnly</db:link> must be set.</db:para>
<db:para>On Windows and macOS, this static function uses the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. However, the native Windows file dialog does not support displaying files in the directory chooser. You need to pass the <db:link xlink:href="qfiledialog.xml#Option-enum">DontUseNativeDialog</db:link> option, or set the global \l{Qt::}{AA_DontUseNativeDialogs} application attribute to display files using a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>.</db:para>
<db:para>Note that the macOS native file dialog does not show a title bar.</db:para>
<db:para>On Unix/X11, the normal behavior of the file dialog is to resolve and follow symlinks. For example, if <db:code>/usr/tmp</db:code> is a symlink to <db:code>/var/tmp</db:code>, the file dialog changes to <db:code>/var/tmp</db:code> after entering <db:code>/usr/tmp</db:code>. If <db:code role="parameter">options</db:code> includes <db:link xlink:href="qfiledialog.xml#Option-enum">DontResolveSymlinks</db:link>, the file dialog treats symlinks as regular directories.</db:para>
<db:para>On Windows, the dialog spins a blocking modal event loop that does not dispatch any QTimers, and if <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code> then it positions the dialog just below the parent's title bar.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you must create the dialog yourself using one of the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileNames">getOpenFileNames</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileName">getSaveFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getExistingDirectoryUrl">
<db:title>[static] QUrl QFileDialog::getExistingDirectoryUrl(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>dir</db:emphasis> = QUrl(), QFileDialog::Options <db:emphasis>options</db:emphasis> = ShowDirsOnly, const QStringList &amp;<db:emphasis>supportedSchemes</db:emphasis> = QStringList())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>getExistingDirectoryUrl</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>caption</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>dir</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QFileDialog::Options</db:type>
<db:parameter>options</db:parameter>
<db:initializer>ShowDirsOnly</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>supportedSchemes</db:parameter>
<db:initializer>QStringList()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl getExistingDirectoryUrl(QWidget *parent, const QString &amp;caption, const QUrl &amp;dir, QFileDialog::Options options, const QStringList &amp;supportedSchemes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that returns an existing directory selected by the user. If the user presses Cancel, it returns an empty url.</db:para>
<db:para>The function is used similarly to <db:link xlink:href="qfiledialog.xml#getExistingDirectory">QFileDialog::getExistingDirectory</db:link>(). In particular <db:code role="parameter">parent</db:code>, <db:code role="parameter">caption</db:code>, <db:code role="parameter">dir</db:code> and <db:code role="parameter">options</db:code> are used in exactly the same way.</db:para>
<db:para>The main difference with <db:link xlink:href="qfiledialog.xml#getExistingDirectory">QFileDialog::getExistingDirectory</db:link>() comes from the ability offered to the user to select a remote directory. That's why the return type and the type of <db:code role="parameter">dir</db:code> is <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:para>The <db:code role="parameter">supportedSchemes</db:code> argument allows to restrict the type of URLs the user is able to select. It is a way for the application to declare the protocols it supports to fetch the file content. An empty list means that no restriction is applied (the default). Support for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>When possible, this static function uses the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. On platforms that don't support selecting remote files, Qt allows to select only local files.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectory">getExistingDirectory</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrl">getOpenFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrls">getOpenFileUrls</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileUrl">getSaveFileUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getOpenFileContent">
<db:title>[static] void QFileDialog::getOpenFileContent(const QString &amp;<db:emphasis>nameFilter</db:emphasis>, const std::function&lt;void (const QString &amp;, const QByteArray &amp;)&gt; &amp;<db:emphasis>fileOpenCompleted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>getOpenFileContent</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nameFilter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const std::function&lt;void (const QString &amp;, const QByteArray &amp;)&gt; &amp;</db:type>
<db:parameter>fileOpenCompleted</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getOpenFileContent(const QString &amp;nameFilter, const std::function&lt;void (const QString &amp;, const QByteArray &amp;)&gt; &amp;fileOpenCompleted)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that returns the content of a file selected by the user.</db:para>
<db:para>This function is used to access local files on Qt for WebAssembly, where the web sandbox places restrictions on how such access can happen. Its implementation will make the browser display a native file dialog, where the user makes the file selection based on the parameter <db:code role="parameter">nameFilter</db:code>.</db:para>
<db:para>It can also be used on other platforms, where it falls back to using <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>.</db:para>
<db:para>The function is asynchronous and returns immediately. The <db:code role="parameter">fileOpenCompleted</db:code> callback will be called when a file has been selected and its contents have been read into memory.</db:para>
<db:programlisting language="cpp">auto fileContentReady = [](const QString &amp;amp;fileName, const QByteArray &amp;amp;fileContent) {
    if (fileName.isEmpty()) {
        // No file was selected
    } else {
        // Use fileName and fileContent
    }
};
QFileDialog::getOpenFileContent(&quot;Images (*.png *.xpm *.jpg)&quot;,  fileContentReady);
</db:programlisting>
</db:section>
<db:section xml:id="getOpenFileName">
<db:title>[static] QString QFileDialog::getOpenFileName(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>dir</db:emphasis> = QString(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = nullptr, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>getOpenFileName</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>caption</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>dir</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>selectedFilter</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QFileDialog::Options</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Options()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString getOpenFileName(QWidget *parent, const QString &amp;caption, const QString &amp;dir, const QString &amp;filter, QString *selectedFilter, QFileDialog::Options options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that returns an existing file selected by the user. If the user presses Cancel, it returns a null string.</db:para>
<db:programlisting language="cpp">QString fileName = QFileDialog::getOpenFileName(this, tr(&quot;Open File&quot;),
                                                &quot;/home&quot;,
                                                tr(&quot;Images (*.png *.xpm *.jpg)&quot;));
</db:programlisting>
<db:para>The function creates a modal file dialog with the given <db:code role="parameter">parent</db:code> widget. If <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code>, the dialog is shown centered over the parent widget.</db:para>
<db:para>The file dialog's working directory is set to <db:code role="parameter">dir</db:code>. If <db:code role="parameter">dir</db:code> includes a file name, the file is selected. Only files that match the given <db:code role="parameter">filter</db:code> are shown. The selected filter is set to <db:code role="parameter">selectedFilter</db:code>. The parameters <db:code role="parameter">dir</db:code>, <db:code role="parameter">selectedFilter</db:code>, and <db:code role="parameter">filter</db:code> may be empty strings. If you want multiple filters, separate them with ';;', for example:</db:para>
<db:programlisting language="cpp">&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)&quot;
</db:programlisting>
<db:para>The <db:code role="parameter">options</db:code> argument holds various options about how to run the dialog. See the <db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Option</db:link> enum for more information on the flags you can pass.</db:para>
<db:para>The dialog's caption is set to <db:code role="parameter">caption</db:code>. If <db:code role="parameter">caption</db:code> is not specified, then a default caption will be used.</db:para>
<db:para>On Windows, and macOS, this static function uses the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. Note that the macOS native file dialog does not show a title bar.</db:para>
<db:para>On Windows the dialog spins a blocking modal event loop that does not dispatch any QTimers, and if <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code> then it positions the dialog just below the parent's title bar.</db:para>
<db:para>On Unix/X11, the normal behavior of the file dialog is to resolve and follow symlinks. For example, if <db:code>/usr/tmp</db:code> is a symlink to <db:code>/var/tmp</db:code>, the file dialog changes to <db:code>/var/tmp</db:code> after entering <db:code>/usr/tmp</db:code>. If <db:code role="parameter">options</db:code> includes <db:link xlink:href="qfiledialog.xml#Option-enum">DontResolveSymlinks</db:link>, the file dialog treats symlinks as regular directories.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you must create the dialog yourself using one of the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileNames">getOpenFileNames</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileName">getSaveFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectory">getExistingDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getOpenFileNames">
<db:title>[static] QStringList QFileDialog::getOpenFileNames(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>dir</db:emphasis> = QString(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = nullptr, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>getOpenFileNames</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>caption</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>dir</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>selectedFilter</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QFileDialog::Options</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Options()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList getOpenFileNames(QWidget *parent, const QString &amp;caption, const QString &amp;dir, const QString &amp;filter, QString *selectedFilter, QFileDialog::Options options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that returns one or more existing files selected by the user.</db:para>
<db:programlisting language="cpp">QStringList files = QFileDialog::getOpenFileNames(
                        this,
                        &quot;Select one or more files to open&quot;,
                        &quot;/home&quot;,
                        &quot;Images (*.png *.xpm *.jpg)&quot;);
</db:programlisting>
<db:para>This function creates a modal file dialog with the given <db:code role="parameter">parent</db:code> widget. If <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code>, the dialog is shown centered over the parent widget.</db:para>
<db:para>The file dialog's working directory is set to <db:code role="parameter">dir</db:code>. If <db:code role="parameter">dir</db:code> includes a file name, the file is selected. The filter is set to <db:code role="parameter">filter</db:code> so that only those files which match the filter are shown. The filter selected is set to <db:code role="parameter">selectedFilter</db:code>. The parameters <db:code role="parameter">dir</db:code>, <db:code role="parameter">selectedFilter</db:code> and <db:code role="parameter">filter</db:code> can be empty strings. If you need multiple filters, separate them with ';;', for instance:</db:para>
<db:programlisting language="cpp">&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)&quot;
</db:programlisting>
<db:para>The dialog's caption is set to <db:code role="parameter">caption</db:code>. If <db:code role="parameter">caption</db:code> is not specified, then a default caption is used.</db:para>
<db:para>On Windows and macOS, this static function uses the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. Note that the macOS native file dialog does not show a title bar.</db:para>
<db:para>On Windows the dialog spins a blocking modal event loop that does not dispatch any QTimers, and if <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code> then it positions the dialog just below the parent's title bar.</db:para>
<db:para>On Unix/X11, the normal behavior of the file dialog is to resolve and follow symlinks. For example, if <db:code>/usr/tmp</db:code> is a symlink to <db:code>/var/tmp</db:code>, the file dialog will change to <db:code>/var/tmp</db:code> after entering <db:code>/usr/tmp</db:code>. The <db:code role="parameter">options</db:code> argument holds various options about how to run the dialog, see the <db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Option</db:link> enum for more information on the flags you can pass.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you must create the dialog yourself using one of the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileName">getSaveFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectory">getExistingDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getOpenFileUrl">
<db:title>[static] QUrl QFileDialog::getOpenFileUrl(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>dir</db:emphasis> = QUrl(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = nullptr, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options(), const QStringList &amp;<db:emphasis>supportedSchemes</db:emphasis> = QStringList())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>getOpenFileUrl</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>caption</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>dir</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>selectedFilter</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QFileDialog::Options</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Options()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>supportedSchemes</db:parameter>
<db:initializer>QStringList()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl getOpenFileUrl(QWidget *parent, const QString &amp;caption, const QUrl &amp;dir, const QString &amp;filter, QString *selectedFilter, QFileDialog::Options options, const QStringList &amp;supportedSchemes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that returns an existing file selected by the user. If the user presses Cancel, it returns an empty url.</db:para>
<db:para>The function is used similarly to <db:link xlink:href="qfiledialog.xml#getOpenFileName">QFileDialog::getOpenFileName</db:link>(). In particular <db:code role="parameter">parent</db:code>, <db:code role="parameter">caption</db:code>, <db:code role="parameter">dir</db:code>, <db:code role="parameter">filter</db:code>, <db:code role="parameter">selectedFilter</db:code> and <db:code role="parameter">options</db:code> are used in exactly the same way.</db:para>
<db:para>The main difference with <db:link xlink:href="qfiledialog.xml#getOpenFileName">QFileDialog::getOpenFileName</db:link>() comes from the ability offered to the user to select a remote file. That's why the return type and the type of <db:code role="parameter">dir</db:code> is <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:para>The <db:code role="parameter">supportedSchemes</db:code> argument allows to restrict the type of URLs the user is able to select. It is a way for the application to declare the protocols it will support to fetch the file content. An empty list means that no restriction is applied (the default). Support for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>When possible, this static function uses the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. On platforms that don't support selecting remote files, Qt will allow to select only local files.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrls">getOpenFileUrls</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileUrl">getSaveFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectoryUrl">getExistingDirectoryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getOpenFileUrls">
<db:title>[static] QList&lt;QUrl&gt; QFileDialog::getOpenFileUrls(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>dir</db:emphasis> = QUrl(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = nullptr, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options(), const QStringList &amp;<db:emphasis>supportedSchemes</db:emphasis> = QStringList())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QUrl&gt;</db:type>
<db:methodname>getOpenFileUrls</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>caption</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>dir</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>selectedFilter</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QFileDialog::Options</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Options()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>supportedSchemes</db:parameter>
<db:initializer>QStringList()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QUrl&gt; getOpenFileUrls(QWidget *parent, const QString &amp;caption, const QUrl &amp;dir, const QString &amp;filter, QString *selectedFilter, QFileDialog::Options options, const QStringList &amp;supportedSchemes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that returns one or more existing files selected by the user. If the user presses Cancel, it returns an empty list.</db:para>
<db:para>The function is used similarly to <db:link xlink:href="qfiledialog.xml#getOpenFileNames">QFileDialog::getOpenFileNames</db:link>(). In particular <db:code role="parameter">parent</db:code>, <db:code role="parameter">caption</db:code>, <db:code role="parameter">dir</db:code>, <db:code role="parameter">filter</db:code>, <db:code role="parameter">selectedFilter</db:code> and <db:code role="parameter">options</db:code> are used in exactly the same way.</db:para>
<db:para>The main difference with <db:link xlink:href="qfiledialog.xml#getOpenFileNames">QFileDialog::getOpenFileNames</db:link>() comes from the ability offered to the user to select remote files. That's why the return type and the type of <db:code role="parameter">dir</db:code> are respectively <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qurl.xml">QUrl</db:link>&gt; and <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:para>The <db:code role="parameter">supportedSchemes</db:code> argument allows to restrict the type of URLs the user can select. It is a way for the application to declare the protocols it supports to fetch the file content. An empty list means that no restriction is applied (the default). Support for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>When possible, this static function uses the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. On platforms that don't support selecting remote files, Qt will allow to select only local files.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileNames">getOpenFileNames</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrl">getOpenFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileUrl">getSaveFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectoryUrl">getExistingDirectoryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getSaveFileName">
<db:title>[static] QString QFileDialog::getSaveFileName(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QString &amp;<db:emphasis>dir</db:emphasis> = QString(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = nullptr, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>getSaveFileName</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>caption</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>dir</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>selectedFilter</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QFileDialog::Options</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Options()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString getSaveFileName(QWidget *parent, const QString &amp;caption, const QString &amp;dir, const QString &amp;filter, QString *selectedFilter, QFileDialog::Options options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that returns a file name selected by the user. The file does not have to exist.</db:para>
<db:para>It creates a modal file dialog with the given <db:code role="parameter">parent</db:code> widget. If <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code>, the dialog will be shown centered over the parent widget.</db:para>
<db:programlisting language="cpp">QString fileName = QFileDialog::getSaveFileName(this, tr(&quot;Save File&quot;),
                           &quot;/home/jana/untitled.png&quot;,
                           tr(&quot;Images (*.png *.xpm *.jpg)&quot;));
</db:programlisting>
<db:para>The file dialog's working directory is set to <db:code role="parameter">dir</db:code>. If <db:code role="parameter">dir</db:code> includes a file name, the file is selected. Only files that match the <db:code role="parameter">filter</db:code> are shown. The filter selected is set to <db:code role="parameter">selectedFilter</db:code>. The parameters <db:code role="parameter">dir</db:code>, <db:code role="parameter">selectedFilter</db:code>, and <db:code role="parameter">filter</db:code> may be empty strings. Multiple filters are separated with ';;'. For instance:</db:para>
<db:programlisting language="cpp">&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)&quot;
</db:programlisting>
<db:para>The <db:code role="parameter">options</db:code> argument holds various options about how to run the dialog, see the <db:link xlink:href="qfiledialog.xml#Option-enum">QFileDialog::Option</db:link> enum for more information on the flags you can pass.</db:para>
<db:para>The default filter can be chosen by setting <db:code role="parameter">selectedFilter</db:code> to the desired value.</db:para>
<db:para>The dialog's caption is set to <db:code role="parameter">caption</db:code>. If <db:code role="parameter">caption</db:code> is not specified, a default caption is used.</db:para>
<db:para>On Windows, and macOS, this static function uses the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>.</db:para>
<db:para>On Windows the dialog spins a blocking modal event loop that does not dispatch any QTimers, and if <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code> then it positions the dialog just below the parent's title bar. On macOS, with its native file dialog, the filter argument is ignored.</db:para>
<db:para>On Unix/X11, the normal behavior of the file dialog is to resolve and follow symlinks. For example, if <db:code>/usr/tmp</db:code> is a symlink to <db:code>/var/tmp</db:code>, the file dialog changes to <db:code>/var/tmp</db:code> after entering <db:code>/usr/tmp</db:code>. If <db:code role="parameter">options</db:code> includes <db:link xlink:href="qfiledialog.xml#Option-enum">DontResolveSymlinks</db:link>, the file dialog treats symlinks as regular directories.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you must create the dialog yourself using one of the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileNames">getOpenFileNames</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectory">getExistingDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getSaveFileUrl">
<db:title>[static] QUrl QFileDialog::getSaveFileUrl(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>caption</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>dir</db:emphasis> = QUrl(), const QString &amp;<db:emphasis>filter</db:emphasis> = QString(), QString *<db:emphasis>selectedFilter</db:emphasis> = nullptr, QFileDialog::Options <db:emphasis>options</db:emphasis> = Options(), const QStringList &amp;<db:emphasis>supportedSchemes</db:emphasis> = QStringList())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>getSaveFileUrl</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>caption</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>dir</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>selectedFilter</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QFileDialog::Options</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Options()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>supportedSchemes</db:parameter>
<db:initializer>QStringList()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl getSaveFileUrl(QWidget *parent, const QString &amp;caption, const QUrl &amp;dir, const QString &amp;filter, QString *selectedFilter, QFileDialog::Options options, const QStringList &amp;supportedSchemes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that returns a file selected by the user. The file does not have to exist. If the user presses Cancel, it returns an empty url.</db:para>
<db:para>The function is used similarly to <db:link xlink:href="qfiledialog.xml#getSaveFileName">QFileDialog::getSaveFileName</db:link>(). In particular <db:code role="parameter">parent</db:code>, <db:code role="parameter">caption</db:code>, <db:code role="parameter">dir</db:code>, <db:code role="parameter">filter</db:code>, <db:code role="parameter">selectedFilter</db:code> and <db:code role="parameter">options</db:code> are used in exactly the same way.</db:para>
<db:para>The main difference with <db:link xlink:href="qfiledialog.xml#getSaveFileName">QFileDialog::getSaveFileName</db:link>() comes from the ability offered to the user to select a remote file. That's why the return type and the type of <db:code role="parameter">dir</db:code> is <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:para>The <db:code role="parameter">supportedSchemes</db:code> argument allows to restrict the type of URLs the user can select. It is a way for the application to declare the protocols it supports to save the file content. An empty list means that no restriction is applied (the default). Support for local files (&quot;file&quot; scheme) is implicit and always enabled; it is not necessary to include it in the restriction.</db:para>
<db:para>When possible, this static function uses the native file dialog and not a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. On platforms that don't support selecting remote files, Qt will allow to select only local files.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#getSaveFileName">getSaveFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrl">getOpenFileUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getOpenFileUrls">getOpenFileUrls</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#getExistingDirectoryUrl">getExistingDirectoryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="history">
<db:title>QStringList QFileDialog::history() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>history</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList history() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the browsing history of the filedialog as a list of paths.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setHistory">setHistory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconProvider">
<db:title>QAbstractFileIconProvider *QFileDialog::iconProvider() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractFileIconProvider *</db:type>
<db:methodname>iconProvider</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractFileIconProvider * iconProvider() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the icon provider used by the filedialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setIconProvider">setIconProvider</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDelegate">
<db:title>QAbstractItemDelegate *QFileDialog::itemDelegate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemDelegate *</db:type>
<db:methodname>itemDelegate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemDelegate * itemDelegate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item delegate used to render the items in the views in the filedialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setItemDelegate">setItemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelText">
<db:title>QString QFileDialog::labelText(QFileDialog::DialogLabel <db:emphasis>label</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>labelText</db:methodname>
<db:methodparam>
<db:type>QFileDialog::DialogLabel</db:type>
<db:parameter>label</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString labelText(QFileDialog::DialogLabel label) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text shown in the filedialog in the specified <db:code role="parameter">label</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setLabelText">setLabelText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeTypeFilters">
<db:title>QStringList QFileDialog::mimeTypeFilters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>mimeTypeFilters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList mimeTypeFilters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the MIME type filters that are in operation on this file dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setMimeTypeFilters">setMimeTypeFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nameFilters">
<db:title>QStringList QFileDialog::nameFilters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>nameFilters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList nameFilters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file type filters that are in operation on this file dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>void QFileDialog::open(QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void open(QObject *receiver, const char *member)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function shows the dialog, and connects the slot specified by <db:code role="parameter">receiver</db:code> and <db:code role="parameter">member</db:code> to the signal that informs about selection changes. If the <db:link xlink:href="qfiledialog.xml#fileMode-prop">fileMode</db:link> is <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFiles</db:link>, this is the <db:link xlink:href="qfiledialog.xml#filesSelected">filesSelected</db:link>() signal, otherwise it is the <db:link xlink:href="qfiledialog.xml#fileSelected">fileSelected</db:link>() signal.</db:para>
<db:para>The signal is disconnected from the slot when the dialog is closed.</db:para>
</db:section>
<db:section xml:id="proxyModel">
<db:title>QAbstractProxyModel *QFileDialog::proxyModel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractProxyModel *</db:type>
<db:methodname>proxyModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractProxyModel * proxyModel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the proxy model used by the file dialog. By default no proxy is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setProxyModel">setProxyModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restoreState">
<db:title>bool QFileDialog::restoreState(const QByteArray &amp;<db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>restoreState</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool restoreState(const QByteArray &amp;state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Restores the dialogs's layout, history and current directory to the <db:code role="parameter">state</db:code> specified.</db:para>
<db:para>Typically this is used in conjunction with <db:link xlink:href="qsettings.xml">QSettings</db:link> to restore the size from a past session.</db:para>
<db:para>Returns <db:code>false</db:code> if there are errors</db:para>
</db:section>
<db:section xml:id="saveFileContent">
<db:title>[static] void QFileDialog::saveFileContent(const QByteArray &amp;<db:emphasis>fileContent</db:emphasis>, const QString &amp;<db:emphasis>fileNameHint</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>saveFileContent</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>fileContent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileNameHint</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void saveFileContent(const QByteArray &amp;fileContent, const QString &amp;fileNameHint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience static function that saves <db:code role="parameter">fileContent</db:code> to a file, using a file name and location chosen by the user. <db:code role="parameter">fileNameHint</db:code> can be provided to suggest a file name to the user.</db:para>
<db:para>This function is used to save files to the local file system on Qt for WebAssembly, where the web sandbox places restrictions on how such access can happen. Its implementation will make the browser display a native file dialog, where the user makes the file selection.</db:para>
<db:para>It can also be used on other platforms, where it falls back to using <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>.</db:para>
<db:para>The function is asynchronous and returns immediately.</db:para>
<db:programlisting language="cpp">QByteArray imageData; // obtained from e.g. QImage::save()
QFileDialog::saveFileContent(imageData, &quot;myimage.png&quot;); // with filename hint
// OR
QFileDialog::saveFileContent(imageData); // no filename hint
</db:programlisting>
</db:section>
<db:section xml:id="saveState">
<db:title>QByteArray QFileDialog::saveState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>saveState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray saveState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Saves the state of the dialog's layout, history and current directory.</db:para>
<db:para>Typically this is used in conjunction with <db:link xlink:href="qsettings.xml">QSettings</db:link> to remember the size for a future session. A version number is stored as part of the data.</db:para>
</db:section>
<db:section xml:id="selectFile">
<db:title>void QFileDialog::selectFile(const QString &amp;<db:emphasis>filename</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filename</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectFile(const QString &amp;filename)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Selects the given <db:code role="parameter">filename</db:code> in the file dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedFiles">selectedFiles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectMimeTypeFilter">
<db:title>void QFileDialog::selectMimeTypeFilter(const QString &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectMimeTypeFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectMimeTypeFilter(const QString &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current MIME type <db:code role="parameter">filter</db:code>.</db:para>
</db:section>
<db:section xml:id="selectNameFilter">
<db:title>void QFileDialog::selectNameFilter(const QString &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectNameFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectNameFilter(const QString &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current file type <db:code role="parameter">filter</db:code>. Multiple filters can be passed in <db:code role="parameter">filter</db:code> by separating them with semicolons or spaces.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setNameFilter">setNameFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#selectedNameFilter">selectedNameFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectUrl">
<db:title>void QFileDialog::selectUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectUrl(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Selects the given <db:code role="parameter">url</db:code> in the file dialog.</db:para>
<db:note>
<db:para>The non-native <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> supports only local files.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedUrls">selectedUrls</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedFiles">
<db:title>QStringList QFileDialog::selectedFiles() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>selectedFiles</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList selectedFiles() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of strings containing the absolute paths of the selected files in the dialog. If no files are selected, or the mode is not <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFiles</db:link> or <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFile</db:link>, selectedFiles() contains the current path in the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedNameFilter">selectedNameFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#selectFile">selectFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedMimeTypeFilter">
<db:title>QString QFileDialog::selectedMimeTypeFilter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>selectedMimeTypeFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString selectedMimeTypeFilter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns The mimetype of the file that the user selected in the file dialog.</db:para>
</db:section>
<db:section xml:id="selectedNameFilter">
<db:title>QString QFileDialog::selectedNameFilter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>selectedNameFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString selectedNameFilter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the filter that the user selected in the file dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedFiles">selectedFiles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedUrls">
<db:title>QList&lt;QUrl&gt; QFileDialog::selectedUrls() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QUrl&gt;</db:type>
<db:methodname>selectedUrls</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QUrl&gt; selectedUrls() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of urls containing the selected files in the dialog. If no files are selected, or the mode is not <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFiles</db:link> or <db:link xlink:href="qfiledialog.xml#FileMode-enum">ExistingFile</db:link>, selectedUrls() contains the current path in the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#selectedNameFilter">selectedNameFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#selectUrl">selectUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDirectory">
<db:title>void QFileDialog::setDirectory(const QString &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDirectory</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>directory</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDirectory(const QString &amp;directory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the file dialog's current <db:code role="parameter">directory</db:code>.</db:para>
<db:note>
<db:para>On iOS, if you set <db:code role="parameter">directory</db:code> to <db:link xlink:href="qstandardpaths.xml#standardLocations">QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).last</db:link>(), a native image picker dialog is used for accessing the user's photo album. The filename returned can be loaded using <db:link xlink:href="qfile.xml">QFile</db:link> and related APIs. For this to be enabled, the Info.plist assigned to QMAKE_INFO_PLIST in the project file must contain the key <db:code>NSPhotoLibraryUsageDescription</db:code>. See Info.plist documentation from Apple for more information regarding this key. This feature was added in Qt 5.5.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#directory">directory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDirectory-1">
<db:title>void QFileDialog::setDirectory(const QDir &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDirectory</db:methodname>
<db:methodparam>
<db:type>const QDir &amp;</db:type>
<db:parameter>directory</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDirectory(const QDir &amp;directory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setDirectoryUrl">
<db:title>void QFileDialog::setDirectoryUrl(const QUrl &amp;<db:emphasis>directory</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDirectoryUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>directory</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDirectoryUrl(const QUrl &amp;directory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the file dialog's current <db:code role="parameter">directory</db:code> url.</db:para>
<db:note>
<db:para>The non-native <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> supports only local files.</db:para>
</db:note>
<db:note>
<db:para>On Windows, it is possible to pass URLs representing one of the <db:emphasis>virtual folders</db:emphasis>, such as &quot;Computer&quot; or &quot;Network&quot;. This is done by passing a <db:link xlink:href="qurl.xml">QUrl</db:link> using the scheme <db:code>clsid</db:code> followed by the CLSID value with the curly braces removed. For example the URL <db:code>clsid:374DE290-123F-4565-9164-39C4925E467B</db:code> denotes the download location. For a complete list of possible values, see the MSDN documentation on <db:link xlink:href="https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid">KNOWNFOLDERID</db:link>. This feature was added in Qt 5.5.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#directoryUrl">directoryUrl</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml">QUuid</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilter">
<db:title>void QFileDialog::setFilter(QDir::Filters <db:emphasis>filters</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFilter</db:methodname>
<db:methodparam>
<db:type>QDir::Filters</db:type>
<db:parameter>filters</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFilter(QDir::Filters filters)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the filter used by the model to <db:code role="parameter">filters</db:code>. The filter is used to specify the kind of files that should be shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#filter">filter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHistory">
<db:title>void QFileDialog::setHistory(const QStringList &amp;<db:emphasis>paths</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHistory</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>paths</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHistory(const QStringList &amp;paths)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the browsing history of the filedialog to contain the given <db:code role="parameter">paths</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#history">history</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIconProvider">
<db:title>void QFileDialog::setIconProvider(QAbstractFileIconProvider *<db:emphasis>provider</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIconProvider</db:methodname>
<db:methodparam>
<db:type>QAbstractFileIconProvider *</db:type>
<db:parameter>provider</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIconProvider(QAbstractFileIconProvider *provider)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the icon provider used by the filedialog to the specified <db:code role="parameter">provider</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#iconProvider">iconProvider</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemDelegate">
<db:title>void QFileDialog::setItemDelegate(QAbstractItemDelegate *<db:emphasis>delegate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItemDelegate</db:methodname>
<db:methodparam>
<db:type>QAbstractItemDelegate *</db:type>
<db:parameter>delegate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItemDelegate(QAbstractItemDelegate *delegate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item delegate used to render items in the views in the file dialog to the given <db:code role="parameter">delegate</db:code>.</db:para>
<db:para>Any existing delegate will be removed, but not deleted. <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> does not take ownership of <db:code role="parameter">delegate</db:code>.</db:para>
<db:warning>
<db:para>You should not share the same instance of a delegate between views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the <db:link xlink:href="qabstractitemdelegate.xml#closeEditor">closeEditor</db:link>() signal, and attempt to access, modify or close an editor that has already been closed.</db:para>
</db:warning>
<db:para>Note that the model used is <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>. It has custom item data roles, which is described by the <db:link xlink:href="qfilesystemmodel.xml#Roles-enum">Roles</db:link> enum. You can use a <db:link xlink:href="qfileiconprovider.xml">QFileIconProvider</db:link> if you only want custom icons.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#itemDelegate">itemDelegate</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#setIconProvider">setIconProvider</db:link>()</db:member>
<db:member><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLabelText">
<db:title>void QFileDialog::setLabelText(QFileDialog::DialogLabel <db:emphasis>label</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLabelText</db:methodname>
<db:methodparam>
<db:type>QFileDialog::DialogLabel</db:type>
<db:parameter>label</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLabelText(QFileDialog::DialogLabel label, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">text</db:code> shown in the filedialog in the specified <db:code role="parameter">label</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#labelText">labelText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMimeTypeFilters">
<db:title>void QFileDialog::setMimeTypeFilters(const QStringList &amp;<db:emphasis>filters</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMimeTypeFilters</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>filters</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMimeTypeFilters(const QStringList &amp;filters)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">filters</db:code> used in the file dialog, from a list of MIME types.</db:para>
<db:para>Convenience method for <db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>(). Uses <db:link xlink:href="qmimetype.xml">QMimeType</db:link> to create a name filter from the glob patterns and description defined in each MIME type.</db:para>
<db:para>Use application/octet-stream for the &quot;All files (*)&quot; filter, since that is the base MIME type for all files.</db:para>
<db:para>Calling setMimeTypeFilters overrides any previously set name filters, and changes the return value of <db:link xlink:href="qfiledialog.xml#nameFilters">nameFilters</db:link>().</db:para>
<db:programlisting language="cpp">QStringList mimeTypeFilters({&quot;image/jpeg&quot;, // will show &quot;JPEG image (*.jpeg *.jpg *.jpe)
                             &quot;image/png&quot;,  // will show &quot;PNG image (*.png)&quot;
                             &quot;application/octet-stream&quot; // will show &quot;All files (*)&quot;
                            });

QFileDialog dialog(this);
dialog.setMimeTypeFilters(mimeTypeFilters);
dialog.exec();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#mimeTypeFilters">mimeTypeFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNameFilter">
<db:title>void QFileDialog::setNameFilter(const QString &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNameFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNameFilter(const QString &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the filter used in the file dialog to the given <db:code role="parameter">filter</db:code>.</db:para>
<db:para>If <db:code role="parameter">filter</db:code> contains a pair of parentheses containing one or more filename-wildcard patterns, separated by spaces, then only the text contained in the parentheses is used as the filter. This means that these calls are all equivalent:</db:para>
<db:programlisting language="cpp">dialog.setNameFilter(&quot;All C++ files (*.cpp *.cc *.C *.cxx *.c++)&quot;);
dialog.setNameFilter(&quot;*.cpp *.cc *.C *.cxx *.c++&quot;);
</db:programlisting>
<db:note>
<db:para>With Android's native file dialog, the mime type matching the given name filter is used because only mime types are supported.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setMimeTypeFilters">setMimeTypeFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qfiledialog.xml#setNameFilters">setNameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNameFilters">
<db:title>void QFileDialog::setNameFilters(const QStringList &amp;<db:emphasis>filters</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNameFilters</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>filters</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNameFilters(const QStringList &amp;filters)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">filters</db:code> used in the file dialog.</db:para>
<db:para>Note that the filter <db:emphasis role="bold">*.*</db:emphasis> is not portable, because the historical assumption that the file extension determines the file type is not consistent on every operating system. It is possible to have a file with no dot in its name (for example, <db:code>Makefile</db:code>). In a native Windows file dialog, <db:emphasis role="bold">*.*</db:emphasis> matches such files, while in other types of file dialogs it might not match. So, it's better to use <db:emphasis role="bold">*</db:emphasis> if you mean to select any file.</db:para>
<db:programlisting language="cpp">const QStringList filters({&quot;Image files (*.png *.xpm *.jpg)&quot;,
                           &quot;Text files (*.txt)&quot;,
                           &quot;Any files (*)&quot;
                          });
QFileDialog dialog(this);
dialog.setNameFilters(filters);
dialog.exec();
</db:programlisting>
<db:para><db:link xlink:href="qfiledialog.xml#setMimeTypeFilters">setMimeTypeFilters</db:link>() has the advantage of providing all possible name filters for each file type. For example, JPEG images have three possible extensions; if your application can open such files, selecting the <db:code>image/jpeg</db:code> mime type as a filter allows you to open all of them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#nameFilters">nameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOption">
<db:title>void QFileDialog::setOption(QFileDialog::Option <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOption</db:methodname>
<db:methodparam>
<db:type>QFileDialog::Option</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOption(QFileDialog::Option option, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given <db:code role="parameter">option</db:code> to be enabled if <db:code role="parameter">on</db:code> is true; otherwise, clears the given <db:code role="parameter">option</db:code>.</db:para>
<db:para>Options (particularly the <db:link xlink:href="qfiledialog.xml#Option-enum">DontUseNativeDialog</db:link> option) should be set before changing dialog properties or showing the dialog.</db:para>
<db:para>Setting options while the dialog is visible is not guaranteed to have an immediate effect on the dialog (depending on the option and on the platform).</db:para>
<db:para>Setting options after changing other properties may cause these values to have no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qfiledialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProxyModel">
<db:title>void QFileDialog::setProxyModel(QAbstractProxyModel *<db:emphasis>proxyModel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProxyModel</db:methodname>
<db:methodparam>
<db:type>QAbstractProxyModel *</db:type>
<db:parameter>proxyModel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProxyModel(QAbstractProxyModel *proxyModel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the model for the views to the given <db:code role="parameter">proxyModel</db:code>. This is useful if you want to modify the underlying model; for example, to add columns, filter data or add drives.</db:para>
<db:para>Any existing proxy model is removed, but not deleted. The file dialog takes ownership of the <db:code role="parameter">proxyModel</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#proxyModel">proxyModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSidebarUrls">
<db:title>void QFileDialog::setSidebarUrls(const QList&lt;QUrl&gt; &amp;<db:emphasis>urls</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSidebarUrls</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QUrl&gt; &amp;</db:type>
<db:parameter>urls</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSidebarUrls(const QList&lt;QUrl&gt; &amp;urls)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">urls</db:code> that are located in the sidebar.</db:para>
<db:para>For instance:</db:para>
<db:programlisting language="cpp">    QList&amp;lt;QUrl&amp;gt; urls;
    urls &amp;lt;&amp;lt; QUrl::fromLocalFile(&quot;/Users/foo/Code/qt5&quot;)
         &amp;lt;&amp;lt; QUrl::fromLocalFile(QStandardPaths::standardLocations(QStandardPaths::MusicLocation).first());

    QFileDialog dialog;
    dialog.setSidebarUrls(urls);
    dialog.setFileMode(QFileDialog::AnyFile);
    if (dialog.exec()) {
        // ...
    }
</db:programlisting>
<db:para>Then the file dialog looks like this:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/filedialogurls.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#sidebarUrls">sidebarUrls</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QFileDialog::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setVisible</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisible(bool visible) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#setVisible" role="function">QDialog::setVisible(bool visible)</db:link>.</db:para>
</db:section>
<db:section xml:id="sidebarUrls">
<db:title>QList&lt;QUrl&gt; QFileDialog::sidebarUrls() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QUrl&gt;</db:type>
<db:methodname>sidebarUrls</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QUrl&gt; sidebarUrls() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of urls that are currently in the sidebar</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#setSidebarUrls">setSidebarUrls</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testOption">
<db:title>bool QFileDialog::testOption(QFileDialog::Option <db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>testOption</db:methodname>
<db:methodparam>
<db:type>QFileDialog::Option</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool testOption(QFileDialog::Option option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">option</db:code> is enabled; otherwise, returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qfiledialog.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="urlSelected">
<db:title>void QFileDialog::urlSelected(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>urlSelected</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void urlSelected(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When the selection changes and the dialog is accepted, this signal is emitted with the (possibly empty) selected <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#currentUrlChanged">currentUrlChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="urlsSelected">
<db:title>void QFileDialog::urlsSelected(const QList&lt;QUrl&gt; &amp;<db:emphasis>urls</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>urlsSelected</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QUrl&gt; &amp;</db:type>
<db:parameter>urls</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void urlsSelected(const QList&lt;QUrl&gt; &amp;urls)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When the selection changes and the dialog is accepted, this signal is emitted with the (possibly empty) list of selected <db:code role="parameter">urls</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledialog.xml#currentUrlChanged">currentUrlChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
