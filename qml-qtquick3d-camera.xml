<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Camera QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Defines an abstract base for Cameras.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-customcamera.xml" xlink:role="">CustomCamera</db:link>, <db:link xlink:href="qml-qtquick3d-orthographiccamera.xml" xlink:role="">OrthographicCamera</db:link>, and <db:link xlink:href="qml-qtquick3d-perspectivecamera.xml" xlink:role="">PerspectiveCamera</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Node</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A Camera defines how the content of the 3D scene is projected onto a 2D surface, such as a <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>. A scene needs at least one Camera in order to visualize its contents.</db:para>
<db:para>It is possible to position and rotate the Camera like any other spatial <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link> in the scene. The <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link>'s location and orientation determines where the Camera is in the scene, and what direction it is facing. The default orientation of the camera has its forward vector pointing along the negative Z axis and its up vector along the positive Y axis.</db:para>
<db:para>Together with the position and orientation, the frustum defines which parts of a scene are visible to the Camera and how they are projected onto the 2D surface. The different Camera subtypes provide multiple options to determine the shape of the Camera's frustum.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-perspectivecamera.xml">PerspectiveCamera</db:link> provides a camera with a pyramid-shaped frustum, where objects are projected so that those further away from the camera appear to be smaller. This is the most commonly used camera type, and corresponds to how most real world cameras work.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-orthographiccamera.xml">OrthographicCamera</db:link> provides a camera where the lines of the frustum are parallel, making the perceived scale of an object unaffected by its distance to the camera. Typical use cases for this type of camera are CAD (Computer-Assisted Design) applications and cartography.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-frustumcamera.xml">FrustumCamera</db:link> is a perspective camera type where the frustum can be freely customized by the coordinates of its intersection with the near plane. It can be useful if an asymmetrical camera frustum is needed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-customcamera.xml">CustomCamera</db:link> is a camera type where the projection matrix can be freely customized, and can be useful for advanced users who wish to calculate their own projection matrix.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To illustrate the difference, these screenshots show the same scene as projected by a <db:link xlink:href="qml-qtquick3d-perspectivecamera.xml">PerspectiveCamera</db:link> and an <db:link xlink:href="qml-qtquick3d-orthographiccamera.xml">OrthographicCamera</db:link>. Notice how the red box is smaller than the green box in the image rendered using the perspective projection.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Perspective camera</db:para>
</db:th>
<db:th>
<db:para>Orthographic camera</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/perspectivecamera.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/orthographiccamera.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick3d-view3d-example.xml">Qt Quick 3D - View3D Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="frustumCullingEnabled-prop">
<db:title>frustumCullingEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>frustumCullingEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is <db:code>true</db:code>, objects outside the camera frustum will be culled, meaning they will not be passed to the renderer. By default this property is set to <db:code>false</db:code>. For scenes where all or most objects are inside the camera frustum, frustum culling is an unnecessary performance overhead. But for complex scenes where large parts are located outside the camera's view, enabling frustum culling may improve performance.</db:para>
</db:section>
<db:section xml:id="lookAtNode-prop">
<db:title>lookAtNode : Node</db:title>
<db:fieldsynopsis>
<db:type>Node</db:type>
<db:varname>lookAtNode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is set to a <db:code>non-null</db:code> value, the rotation of this camera is automatically updated so that this camera keeps looking at the specified node whenever the scene position of this camera or the specified node changes. By default this property is set to <db:code>null</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-camera.xml#lookAt-method">lookAt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="lookAt-method">
<db:title>[since 5.15] vector3d lookAt(vector3d <db:emphasis>scenePos</db:emphasis>)</db:title>
<db:para>Sets the rotation value of the Camera so that it is pointing at <db:code role="parameter">scenePos</db:code>.</db:para>
<db:para>This method was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="lookAt-method-1">
<db:title>[since 5.15] vector3d lookAt(QtQuick3D::Node <db:emphasis>node</db:emphasis>)</db:title>
<db:para>Sets the rotation value of the Camera so that it is pointing at <db:code role="parameter">node</db:code>.</db:para>
<db:para>This method was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="mapFromViewport-method">
<db:title>vector3d mapFromViewport(vector3d <db:emphasis>viewportPos</db:emphasis>)</db:title>
<db:para>Transforms <db:code role="parameter">viewportPos</db:code> from viewport space (2D) into global scene space (3D).</db:para>
<db:para>The x- and y-values of <db:code role="parameter">viewportPos</db:code> must be normalized, with the top-left of the viewport at [0, 0] and the bottom-right at [1, 1]. The z-value is interpreted as the distance from the near clip plane of the frustum (clipNear).</db:para>
<db:para>If <db:code role="parameter">viewportPos</db:code> cannot successfully be mapped to a position in the scene, a position of [0, 0, 0] is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-camera.xml#mapToViewport-method">mapToViewport</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-view3d.xml#mapTo3DScene-method">View3D.mapTo3DScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToViewport-method">
<db:title>vector3d mapToViewport(vector3d <db:emphasis>scenePos</db:emphasis>)</db:title>
<db:para>Transforms <db:code role="parameter">scenePos</db:code> from global scene space (3D) into viewport space (2D).</db:para>
<db:para>The returned position is normalized, with the top-left of the viewport at [0, 0] and the bottom-right at [1, 1]. The returned z-value will contain the distance from the near clip plane of the frustum (clipNear) to <db:code role="parameter">scenePos</db:code> in scene coordinates. If the distance is negative, the point is behind camera.</db:para>
<db:para>If <db:code role="parameter">scenePos</db:code> cannot successfully be mapped to a position in the viewport, a position of [0, 0, 0] is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-camera.xml#mapFromViewport-method">mapFromViewport</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick3d-view3d.xml#mapFrom3DScene-method">View3D.mapFrom3DScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
