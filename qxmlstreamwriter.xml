<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlStreamWriter Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> class provides an XML writer with a simple streaming API.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlStreamWriter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlStreamWriter is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> is the counterpart to <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> for writing XML. Like its related class, it operates on a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> specified with <db:link xlink:href="qxmlstreamwriter.xml#setDevice">setDevice</db:link>(). The API is simple and straightforward: for every XML token or event you want to write, the writer provides a specialized function.</db:para>
<db:para>You start a document with <db:link xlink:href="qxmlstreamwriter.xml#writeStartDocument-1">writeStartDocument</db:link>() and end it with <db:link xlink:href="qxmlstreamwriter.xml#writeEndDocument">writeEndDocument</db:link>(). This will implicitly close all remaining open tags.</db:para>
<db:para>Element tags are opened with <db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>() followed by <db:link xlink:href="qxmlstreamwriter.xml#writeAttribute">writeAttribute</db:link>() or <db:link xlink:href="qxmlstreamwriter.xml#writeAttributes">writeAttributes</db:link>(), element content, and then <db:link xlink:href="qxmlstreamwriter.xml#writeEndElement">writeEndElement</db:link>(). A shorter form <db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>() can be used to write empty elements, followed by <db:link xlink:href="qxmlstreamwriter.xml#writeAttributes">writeAttributes</db:link>().</db:para>
<db:para>Element content consists of either characters, entity references or nested elements. It is written with <db:link xlink:href="qxmlstreamwriter.xml#writeCharacters">writeCharacters</db:link>(), which also takes care of escaping all forbidden characters and character sequences, <db:link xlink:href="qxmlstreamwriter.xml#writeEntityReference">writeEntityReference</db:link>(), or subsequent calls to <db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>(). A convenience method <db:link xlink:href="qxmlstreamwriter.xml#writeTextElement">writeTextElement</db:link>() can be used for writing terminal elements that contain nothing but text.</db:para>
<db:para>The following abridged code snippet shows the basic use of the class to write formatted XML with indentation:</db:para>
<db:programlisting language="cpp">    QXmlStreamWriter stream(&amp;amp;output);
    stream.setAutoFormatting(true);
    stream.writeStartDocument();
    ...
    stream.writeStartElement(&quot;bookmark&quot;);
    stream.writeAttribute(&quot;href&quot;, &quot;http://qt-project.org/&quot;);
    stream.writeTextElement(&quot;title&quot;, &quot;Qt Project&quot;);
    stream.writeEndElement(); // bookmark
    ...
    stream.writeEndDocument();
</db:programlisting>
<db:para><db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> takes care of prefixing namespaces, all you have to do is specify the namespaceUri when writing elements or attributes. If you must conform to certain prefixes, you can force the writer to use them by declaring the namespaces manually with either <db:link xlink:href="qxmlstreamwriter.xml#writeNamespace">writeNamespace</db:link>() or <db:link xlink:href="qxmlstreamwriter.xml#writeDefaultNamespace">writeDefaultNamespace</db:link>(). Alternatively, you can bypass the stream writer's namespace support and use overloaded methods that take a qualified name instead. The namespace <db:emphasis>http://www.w3.org/XML/1998/namespace</db:emphasis> is implicit and mapped to the prefix <db:emphasis>xml</db:emphasis>.</db:para>
<db:para>The stream writer can automatically format the generated XML data by adding line-breaks and indentation to empty sections between elements, making the XML data more readable for humans and easier to work with for most source code management systems. The feature can be turned on with the <db:link xlink:href="qxmlstreamwriter.xml#autoFormatting">autoFormatting</db:link> property, and customized with the <db:link xlink:href="qxmlstreamwriter.xml#autoFormattingIndent-prop">autoFormattingIndent</db:link> property.</db:para>
<db:para>Other functions are <db:link xlink:href="qxmlstreamwriter.xml#writeCDATA">writeCDATA</db:link>(), <db:link xlink:href="qxmlstreamwriter.xml#writeComment">writeComment</db:link>(), <db:link xlink:href="qxmlstreamwriter.xml#writeProcessingInstruction">writeProcessingInstruction</db:link>(), and <db:link xlink:href="qxmlstreamwriter.xml#writeDTD">writeDTD</db:link>(). Chaining of XML streams is supported with <db:link xlink:href="qxmlstreamwriter.xml#writeCurrentToken">writeCurrentToken</db:link>().</db:para>
<db:para>By default, <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> encodes XML in UTF-8. Different encodings can be enforced using <db:link xlink:href="qxmlstreamwriter.xml#setCodec">setCodec</db:link>().</db:para>
<db:para>If an error occurs while writing to the underlying device, <db:link xlink:href="qxmlstreamwriter.xml#hasError">hasError</db:link>() starts returning true and subsequent writes are ignored.</db:para>
<db:para>The <db:link xlink:href="qtxml-streambookmarks-example.xml">QXmlStream Bookmarks Example</db:link> illustrates how to use a stream writer to write an XML bookmark file (XBEL) that was previously read in by a <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link>.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoFormatting-prop">
<db:title>[since 4.4] autoFormatting : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoFormatting</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoFormatting</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoFormatting</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The auto-formatting flag of the stream writer</db:para>
<db:para>This property controls whether or not the stream writer automatically formats the generated XML data. If enabled, the writer automatically adds line-breaks and indentation to empty sections between elements (ignorable whitespace). The main purpose of auto-formatting is to split the data into several lines, and to increase readability for a human reader. The indentation depth can be controlled through the <db:link xlink:href="qxmlstreamwriter.xml#autoFormattingIndent-prop">autoFormattingIndent</db:link> property.</db:para>
<db:para>By default, auto-formatting is disabled.</db:para>
<db:para>This property was introduced in Qt 4.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qxmlstreamwriter.xml#autoFormatting">autoFormatting</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qxmlstreamwriter.xml#setAutoFormatting">setAutoFormatting</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="autoFormattingIndent-prop">
<db:title>[since 4.4] autoFormattingIndent : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>autoFormattingIndent</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoFormattingIndent</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoFormattingIndent</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of spaces or tabs used for indentation when auto-formatting is enabled. Positive numbers indicate spaces, negative numbers tabs.</db:para>
<db:para>The default indentation is 4.</db:para>
<db:para>This property was introduced in Qt 4.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">autoFormattingIndent</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoFormattingIndent</db:emphasis>(<db:type>int</db:type> <db:emphasis>spacesOrTabs</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#autoFormatting">autoFormatting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlStreamWriter">
<db:title>QXmlStreamWriter::QXmlStreamWriter()</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamWriter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamWriter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a stream writer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QXmlStreamWriter-1">
<db:title>[explicit] QXmlStreamWriter::QXmlStreamWriter(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamWriter</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamWriter(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a stream writer that writes into <db:code role="parameter">device</db:code>;</db:para>
</db:section>
<db:section xml:id="QXmlStreamWriter-2">
<db:title>[explicit] QXmlStreamWriter::QXmlStreamWriter(QByteArray *<db:emphasis>array</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamWriter</db:methodname>
<db:methodparam>
<db:type>QByteArray *</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamWriter(QByteArray *array)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a stream writer that writes into <db:code role="parameter">array</db:code>. This is the same as creating an xml writer that operates on a <db:link xlink:href="qbuffer.xml">QBuffer</db:link> device which in turn operates on <db:code role="parameter">array</db:code>.</db:para>
</db:section>
<db:section xml:id="QXmlStreamWriter-3">
<db:title>[explicit] QXmlStreamWriter::QXmlStreamWriter(QString *<db:emphasis>string</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamWriter</db:methodname>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamWriter(QString *string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a stream writer that writes into <db:code role="parameter">string</db:code>.</db:para>
<db:para>Note that when writing to <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> ignores the codec set with <db:link xlink:href="qxmlstreamwriter.xml#setCodec">setCodec</db:link>(). See that function for more information.</db:para>
</db:section>
<db:section xml:id="dtor.QXmlStreamWriter">
<db:title>QXmlStreamWriter::~QXmlStreamWriter()</db:title>
<db:destructorsynopsis>
<db:methodname>~QXmlStreamWriter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QXmlStreamWriter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="autoFormatting">
<db:title>[since 4.4] bool QXmlStreamWriter::autoFormatting() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>autoFormatting</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">autoFormatting</db:synopsisinfo>
<db:synopsisinfo role="signature">bool autoFormatting() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if auto formattting is enabled, otherwise false.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qxmlstreamwriter.xml#autoFormatting-prop">autoFormatting</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#setAutoFormatting">setAutoFormatting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="codec">
<db:title>QTextCodec *QXmlStreamWriter::codec() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codec() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the codec that is currently assigned to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#setCodec">setCodec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QXmlStreamWriter::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current device associated with the <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link>, or 0 if no device has been assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasError">
<db:title>bool QXmlStreamWriter::hasError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if writing failed.</db:para>
<db:para>This can happen if the stream failed to write to the underlying device or if the data to be written contained invalid characters.</db:para>
<db:para>The error status is never reset. Writes happening after the error occurred may be ignored, even if the error condition is cleared.</db:para>
</db:section>
<db:section xml:id="setAutoFormatting">
<db:title>[since 4.4] void QXmlStreamWriter::setAutoFormatting(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAutoFormatting</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">autoFormatting</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAutoFormatting(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables auto formatting if <db:code role="parameter">enable</db:code> is true, otherwise disables it.</db:para>
<db:para>The default value is false.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qxmlstreamwriter.xml#autoFormatting-prop">autoFormatting</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#autoFormatting">autoFormatting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCodec">
<db:title>void QXmlStreamWriter::setCodec(QTextCodec *<db:emphasis>codec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCodec</db:methodname>
<db:methodparam>
<db:type>QTextCodec *</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCodec(QTextCodec *codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the codec for this stream to <db:code role="parameter">codec</db:code>. The codec is used for encoding any data that is written. By default, <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> uses UTF-8.</db:para>
<db:para>The encoding information is stored in the initial xml tag which gets written when you call <db:link xlink:href="qxmlstreamwriter.xml#writeStartDocument-1">writeStartDocument</db:link>(). Call this function before calling <db:link xlink:href="qxmlstreamwriter.xml#writeStartDocument-1">writeStartDocument</db:link>().</db:para>
<db:note>
<db:para>When writing the XML to a <db:link xlink:href="qstring.xml">QString</db:link>, the codec information is ignored and the XML header will not include any encoding information, since all QStrings are UTF-16. If you later convert the <db:link xlink:href="qstring.xml">QString</db:link> to an 8-bit format, you must arrange for the encoding information to be transmitted out-of-band.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#codec">codec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCodec-1">
<db:title>void QXmlStreamWriter::setCodec(const char *<db:emphasis>codecName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCodec</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>codecName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCodec(const char *codecName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the codec for this stream to the <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> for the encoding specified by <db:code role="parameter">codecName</db:code>. Common values for codecName include &quot;ISO 8859-1&quot;, &quot;UTF-8&quot;, and &quot;UTF-16&quot;. If the encoding isn't recognized, nothing happens.</db:para>
<db:note>
<db:para>When writing the XML to a <db:link xlink:href="qstring.xml">QString</db:link>, the codec information is ignored and the XML header will not include any encoding information, since all QStrings are UTF-16. If you later convert the <db:link xlink:href="qstring.xml">QString</db:link> to an 8-bit format, you must arrange for the encoding information to be transmitted out-of-band.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#codecForName">QTextCodec::codecForName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QXmlStreamWriter::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevice(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current device to <db:code role="parameter">device</db:code>. If you want the stream to write into a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, you can create a <db:link xlink:href="qbuffer.xml">QBuffer</db:link> device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeAttribute">
<db:title>void QXmlStreamWriter::writeAttribute(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeAttribute(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes an attribute with <db:code role="parameter">name</db:code> and <db:code role="parameter">value</db:code>, prefixed for the specified <db:code role="parameter">namespaceUri</db:code>. If the namespace has not been declared yet, <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> will generate a namespace declaration for it.</db:para>
<db:para>This function can only be called after <db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>() before any content is written, or after <db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>().</db:para>
</db:section>
<db:section xml:id="writeAttribute-1">
<db:title>void QXmlStreamWriter::writeAttribute(const QString &amp;<db:emphasis>qualifiedName</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeAttribute(const QString &amp;qualifiedName, const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes an attribute with <db:code role="parameter">qualifiedName</db:code> and <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function can only be called after <db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>() before any content is written, or after <db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>().</db:para>
</db:section>
<db:section xml:id="writeAttribute-2">
<db:title>void QXmlStreamWriter::writeAttribute(const QXmlStreamAttribute &amp;<db:emphasis>attribute</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeAttribute</db:methodname>
<db:methodparam>
<db:type>const QXmlStreamAttribute &amp;</db:type>
<db:parameter>attribute</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeAttribute(const QXmlStreamAttribute &amp;attribute)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the <db:code role="parameter">attribute</db:code>.</db:para>
<db:para>This function can only be called after <db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>() before any content is written, or after <db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>().</db:para>
</db:section>
<db:section xml:id="writeAttributes">
<db:title>void QXmlStreamWriter::writeAttributes(const QXmlStreamAttributes &amp;<db:emphasis>attributes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeAttributes</db:methodname>
<db:methodparam>
<db:type>const QXmlStreamAttributes &amp;</db:type>
<db:parameter>attributes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeAttributes(const QXmlStreamAttributes &amp;attributes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the attribute vector <db:code role="parameter">attributes</db:code>. If a namespace referenced in an attribute not been declared yet, <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> will generate a namespace declaration for it.</db:para>
<db:para>This function can only be called after <db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>() before any content is written, or after <db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeAttribute">writeAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeNamespace">writeNamespace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeCDATA">
<db:title>void QXmlStreamWriter::writeCDATA(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeCDATA</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeCDATA(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">text</db:code> as CDATA section. If <db:code role="parameter">text</db:code> contains the forbidden character sequence &quot;]]&gt;&quot;, it is split into different CDATA sections.</db:para>
<db:para>This function mainly exists for completeness. Normally you should not need use it, because <db:link xlink:href="qxmlstreamwriter.xml#writeCharacters">writeCharacters</db:link>() automatically escapes all non-content characters.</db:para>
</db:section>
<db:section xml:id="writeCharacters">
<db:title>void QXmlStreamWriter::writeCharacters(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeCharacters</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeCharacters(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">text</db:code>. The characters &quot;&lt;&quot;, &quot;&amp;&quot;, and &quot;&quot;&quot; are escaped as entity references &quot;&amp;lt;&quot;, &quot;&amp;amp;, and &quot;&quot;&quot;. To avoid the forbidden sequence &quot;]]&gt;&quot;, &quot;&gt;&quot; is also escaped as &quot;&amp;gt;&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeEntityReference">writeEntityReference</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeComment">
<db:title>void QXmlStreamWriter::writeComment(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeComment</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeComment(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">text</db:code> as XML comment, where <db:code role="parameter">text</db:code> must not contain the forbidden sequence &quot;–&quot; or end with &quot;-&quot;. Note that XML does not provide any way to escape &quot;-&quot; in a comment.</db:para>
</db:section>
<db:section xml:id="writeCurrentToken">
<db:title>void QXmlStreamWriter::writeCurrentToken(const QXmlStreamReader &amp;<db:emphasis>reader</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeCurrentToken</db:methodname>
<db:methodparam>
<db:type>const QXmlStreamReader &amp;</db:type>
<db:parameter>reader</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeCurrentToken(const QXmlStreamReader &amp;reader)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the current state of the <db:code role="parameter">reader</db:code>. All possible valid states are supported.</db:para>
<db:para>The purpose of this function is to support chained processing of XML data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#tokenType">QXmlStreamReader::tokenType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeDTD">
<db:title>void QXmlStreamWriter::writeDTD(const QString &amp;<db:emphasis>dtd</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeDTD</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>dtd</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeDTD(const QString &amp;dtd)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a DTD section. The <db:code role="parameter">dtd</db:code> represents the entire doctypedecl production from the XML 1.0 specification.</db:para>
</db:section>
<db:section xml:id="writeDefaultNamespace">
<db:title>void QXmlStreamWriter::writeDefaultNamespace(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeDefaultNamespace</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeDefaultNamespace(const QString &amp;namespaceUri)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a default namespace declaration for <db:code role="parameter">namespaceUri</db:code>.</db:para>
<db:para>If <db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>() or <db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>() was called, the declaration applies to the current element; otherwise it applies to the next child element.</db:para>
<db:para>Note that the namespaces <db:emphasis>http://www.w3.org/XML/1998/namespace</db:emphasis> (bound to <db:emphasis>xmlns</db:emphasis>) and <db:emphasis>http://www.w3.org/2000/xmlns/</db:emphasis> (bound to <db:emphasis>xml</db:emphasis>) by definition cannot be declared as default.</db:para>
</db:section>
<db:section xml:id="writeEmptyElement">
<db:title>void QXmlStreamWriter::writeEmptyElement(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeEmptyElement</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeEmptyElement(const QString &amp;namespaceUri, const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes an empty element with <db:code role="parameter">name</db:code>, prefixed for the specified <db:code role="parameter">namespaceUri</db:code>. If the namespace has not been declared, <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> will generate a namespace declaration for it. Subsequent calls to <db:link xlink:href="qxmlstreamwriter.xml#writeAttribute">writeAttribute</db:link>() will add attributes to this element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeNamespace">writeNamespace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeEmptyElement-1">
<db:title>void QXmlStreamWriter::writeEmptyElement(const QString &amp;<db:emphasis>qualifiedName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeEmptyElement</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeEmptyElement(const QString &amp;qualifiedName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes an empty element with qualified name <db:code role="parameter">qualifiedName</db:code>. Subsequent calls to <db:link xlink:href="qxmlstreamwriter.xml#writeAttribute">writeAttribute</db:link>() will add attributes to this element.</db:para>
</db:section>
<db:section xml:id="writeEndDocument">
<db:title>void QXmlStreamWriter::writeEndDocument()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeEndDocument</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeEndDocument()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes all remaining open start elements and writes a newline.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeStartDocument-1">writeStartDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeEndElement">
<db:title>void QXmlStreamWriter::writeEndElement()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeEndElement</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeEndElement()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the previous start element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeEntityReference">
<db:title>void QXmlStreamWriter::writeEntityReference(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeEntityReference</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeEntityReference(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the entity reference <db:code role="parameter">name</db:code> to the stream, as &quot;&amp;<db:code role="parameter">name</db:code>;&quot;.</db:para>
</db:section>
<db:section xml:id="writeNamespace">
<db:title>void QXmlStreamWriter::writeNamespace(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>prefix</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeNamespace</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>prefix</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeNamespace(const QString &amp;namespaceUri, const QString &amp;prefix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a namespace declaration for <db:code role="parameter">namespaceUri</db:code> with <db:code role="parameter">prefix</db:code>. If <db:code role="parameter">prefix</db:code> is empty, <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> assigns a unique prefix consisting of the letter 'n' followed by a number.</db:para>
<db:para>If <db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>() or <db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>() was called, the declaration applies to the current element; otherwise it applies to the next child element.</db:para>
<db:para>Note that the prefix <db:emphasis>xml</db:emphasis> is both predefined and reserved for <db:emphasis>http://www.w3.org/XML/1998/namespace</db:emphasis>, which in turn cannot be bound to any other prefix. The prefix <db:emphasis>xmlns</db:emphasis> and its URI <db:emphasis>http://www.w3.org/2000/xmlns/</db:emphasis> are used for the namespace mechanism itself and thus completely forbidden in declarations.</db:para>
</db:section>
<db:section xml:id="writeProcessingInstruction">
<db:title>void QXmlStreamWriter::writeProcessingInstruction(const QString &amp;<db:emphasis>target</db:emphasis>, const QString &amp;<db:emphasis>data</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeProcessingInstruction</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>data</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeProcessingInstruction(const QString &amp;target, const QString &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes an XML processing instruction with <db:code role="parameter">target</db:code> and <db:code role="parameter">data</db:code>, where <db:code role="parameter">data</db:code> must not contain the sequence &quot;?&gt;&quot;.</db:para>
</db:section>
<db:section xml:id="writeStartDocument">
<db:title>void QXmlStreamWriter::writeStartDocument(const QString &amp;<db:emphasis>version</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeStartDocument</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeStartDocument(const QString &amp;version)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a document start with the XML version number <db:code role="parameter">version</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeEndDocument">writeEndDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeStartDocument-1">
<db:title>[since 4.5] void QXmlStreamWriter::writeStartDocument()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeStartDocument</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeStartDocument()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a document start with XML version number &quot;1.0&quot;. This also writes the encoding information.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeEndDocument">writeEndDocument</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamwriter.xml#setCodec">setCodec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeStartDocument-2">
<db:title>[since 4.5] void QXmlStreamWriter::writeStartDocument(const QString &amp;<db:emphasis>version</db:emphasis>, bool <db:emphasis>standalone</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeStartDocument</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>standalone</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeStartDocument(const QString &amp;version, bool standalone)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a document start with the XML version number <db:code role="parameter">version</db:code> and a standalone attribute <db:code role="parameter">standalone</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeEndDocument">writeEndDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeStartElement">
<db:title>void QXmlStreamWriter::writeStartElement(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeStartElement</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeStartElement(const QString &amp;namespaceUri, const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a start element with <db:code role="parameter">name</db:code>, prefixed for the specified <db:code role="parameter">namespaceUri</db:code>. If the namespace has not been declared yet, <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> will generate a namespace declaration for it. Subsequent calls to <db:link xlink:href="qxmlstreamwriter.xml#writeAttribute">writeAttribute</db:link>() will add attributes to this element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeNamespace">writeNamespace</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeEndElement">writeEndElement</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeStartElement-1">
<db:title>void QXmlStreamWriter::writeStartElement(const QString &amp;<db:emphasis>qualifiedName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeStartElement</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeStartElement(const QString &amp;qualifiedName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a start element with <db:code role="parameter">qualifiedName</db:code>. Subsequent calls to <db:link xlink:href="qxmlstreamwriter.xml#writeAttribute">writeAttribute</db:link>() will add attributes to this element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeEndElement">writeEndElement</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeTextElement">
<db:title>void QXmlStreamWriter::writeTextElement(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeTextElement</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeTextElement(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a text element with <db:code role="parameter">name</db:code>, prefixed for the specified <db:code role="parameter">namespaceUri</db:code>, and <db:code role="parameter">text</db:code>. If the namespace has not been declared, <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> will generate a namespace declaration for it.</db:para>
<db:para>This is a convenience function equivalent to:</db:para>
<db:programlisting language="cpp">        writeStartElement(namespaceUri, name);
        writeCharacters(text);
        writeEndElement();
</db:programlisting>
</db:section>
<db:section xml:id="writeTextElement-1">
<db:title>void QXmlStreamWriter::writeTextElement(const QString &amp;<db:emphasis>qualifiedName</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeTextElement</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeTextElement(const QString &amp;qualifiedName, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a text element with <db:code role="parameter">qualifiedName</db:code> and <db:code role="parameter">text</db:code>.</db:para>
<db:para>This is a convenience function equivalent to:</db:para>
<db:programlisting language="cpp">        writeStartElement(qualifiedName);
        writeCharacters(text);
        writeEndElement();
</db:programlisting>
</db:section>
</db:section>
</db:article>
