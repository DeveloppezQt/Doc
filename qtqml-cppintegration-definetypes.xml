<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Defining QML Types from C++</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of ways to define QML object types from C++ code.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>When extending QML with C++ code, a C++ class can be registered with the QML type system to enable the class to be used as a data type within QML code. While the properties, methods and signals of any <db:link xlink:href="qobject.xml">QObject</db:link>-derived class are accessible from QML, as discussed in <db:link xlink:href="qtqml-cppintegration-exposecppattributes.xml">Exposing Attributes of C++ Types to QML</db:link>, such a class cannot be used as a data type from QML until it is registered with the type system. Additionally registration can provide other features, such as allowing a class to be used as an instantiable <db:link xlink:href="qtqml-typesystem-objecttypes.xml">QML object type</db:link> from QML, or enabling a singleton instance of the class to be imported and used from QML.</db:para>
<db:para>Additionally, the <db:link xlink:href="qtqml-index.xml">Qt Qml</db:link> module provides mechanisms for implementing QML-specific features such as <db:emphasis>attached properties</db:emphasis> and <db:emphasis>default properties</db:emphasis> in C++.</db:para>
<db:para>(Note that a number of the important concepts covered in this document are demonstrated in the <db:link xlink:href="qtqml-tutorials-extending-qml-example.xml">Writing QML Extensions with C++</db:link> tutorial.)</db:para>
<db:para><db:emphasis role="bold">NOTE:</db:emphasis> All headers that declare QML types need to be accessible without any prefix from the project's include path.</db:para>
<db:para>For more information about C++ and the different QML integration methods, see the <db:link xlink:href="qtqml-cppintegration-overview.xml">C++ and QML integration overview</db:link> page.</db:para>
<db:section xml:id="registering-c-types-with-the-qml-type-system">
<db:title>Registering C++ Types with the QML Type System</db:title>
<db:para>A <db:link xlink:href="qobject.xml">QObject</db:link>-derived class can be registered with the QML type system to enable the type to be used as a data type from within QML code.</db:para>
<db:para>The engine allows the registration of both instantiable and non-instantiable types. Registering an instantiable type enables a C++ class to be used as the definition of a QML object type, allowing it to be used in object declarations from QML code to create objects of this type. Registration also provides the engine with additional type metadata, enabling the type (and any enums declared by the class) to be used as a data type for property values, method parameters and return values, and signal parameters that are exchanged between QML and C++.</db:para>
<db:para>Registering a non-instantiable type also registers the class as a data type in this manner, but the type cannot be used instantiated as a QML object type from QML. This is useful, for example, if a type has enums that should be exposed to QML but the type itself should not be instantiable.</db:para>
<db:para>For a quick guide to choosing the correct approach to expose C++ types to QML, see <db:link xlink:href="qtqml-cppintegration-overview.xml#choosing-the-correct-integration-method-between-c-and-qml">Choosing the Correct Integration Method Between C++ and QML</db:link>.</db:para>
<db:section xml:id="preconditions">
<db:title>Preconditions</db:title>
<db:para>All the macros mentioned below are available from the <db:link xlink:href="">qqmlintegration.h</db:link> header file from the QtQmlIntegration module.</db:para>
<db:para>You need to add the following code to the files using them in order to make the macros available:</db:para>
<db:programlisting language="cpp">#include &lt;QtQmlIntegration/qqmlintegration.h&gt;
</db:programlisting>
<db:para>If you are already linking to the <db:link xlink:href="qtqml-qmlmodule.xml">QtQml</db:link> module, you can instead use the <db:link xlink:href="">qqmlregistration.h</db:link> header file, which will include <db:link xlink:href="">qqmlintegration.h</db:link>, as follows:</db:para>
<db:programlisting language="cpp">#include &lt;QtQml/qqmlregistration.h&gt;
</db:programlisting>
<db:para>Furthermore, your class declarations have to live in headers reachable via your project's include path. The declarations are used to generate registration code at compile time, and the registration code needs to include the headers that contain the declarations.</db:para>
</db:section>
<db:section xml:id="registering-an-instantiable-object-type">
<db:title>Registering an Instantiable Object Type</db:title>
<db:para><db:emphasis role="bold">Any <db:link xlink:href="qobject.xml">QObject</db:link>-derived C++ class can be registered as the definition of a <db:link xlink:href="qtqml-typesystem-objecttypes.xml">QML object type</db:link></db:emphasis>. Once a class is registered with the QML type system, the class can be declared and instantiated like any other object type from QML code. Once created, a class instance can be manipulated from QML; as <db:link xlink:href="qtqml-cppintegration-exposecppattributes.xml">Exposing Attributes of C++ Types to QML</db:link> explains, the properties, methods and signals of any <db:link xlink:href="qobject.xml">QObject</db:link>-derived class are accessible from QML code.</db:para>
<db:para>To register a <db:link xlink:href="qobject.xml">QObject</db:link>-derived class as an instantiable QML object type, add QML_ELEMENT or QML_NAMED_ELEMENT(&lt;name&gt;) to the class declaration. You also need to make adjustments in the build system. For qmake, add CONFIG += qmltypes, a QML_IMPORT_NAME, and a QML_IMPORT_MAJOR_VERSION to your project file. For CMake, the file containing the class should be part of a target set-up with <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link>. This will register the class into the type namespace under the given major version, using either the class name or an explicitly given name as QML type name. The minor version(s) will be derived from any revisions attached to properties, methods, or signals. The default minor version is 0. You can explicitly restrict the type to be available only from specific minor versions by adding the QML_ADDED_IN_VERSION() macro to the class declaration. Clients can import suitable versions of the namespace in order to use the type.</db:para>
<db:para>For example, suppose there is a Message class with author and creationDate properties:</db:para>
<db:programlisting language="cpp">class Message : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString author READ author WRITE setAuthor NOTIFY authorChanged)
    Q_PROPERTY(QDateTime creationDate READ creationDate WRITE setCreationDate NOTIFY creationDateChanged)
    QML_ELEMENT
public:
    // ...
};
</db:programlisting>
<db:para>This type can be registered by adding an appropriate type namespace and version number to the project file. For example, to make the type available in the com.mycompany.messaging namespace with version 1.0:</db:para>
<db:section xml:id="using-cmake">
<db:title>Using CMake</db:title>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(messaging
    URI com.mycompany.messaging
    VERSION 1.0
    SOURCES
        message.cpp message.h
)
</db:programlisting>
</db:section>
<db:section xml:id="using-qmake">
<db:title>Using QMake</db:title>
<db:programlisting language="cpp" role="bad">CONFIG += qmltypes
QML_IMPORT_NAME = com.mycompany.messaging
QML_IMPORT_MAJOR_VERSION = 1
</db:programlisting>
<db:para>If the header the class is declared in is not accessible from your project's include path, you may have to amend the include path so that the generated registration code can be compiled.</db:para>
<db:programlisting language="cpp" role="bad">INCLUDEPATH += com/mycompany/messaging
</db:programlisting>
<db:para>The type can be used in an <db:link xlink:href="qtqml-syntax-basics.xml#object-declarations">object declaration</db:link> from QML, and its properties can be read and written to, as per the example below:</db:para>
<db:programlisting language="qml">import com.mycompany.messaging

Message {
    author: &quot;Amelie&quot;
    creationDate: new Date()
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="registering-value-types">
<db:title>Registering Value Types</db:title>
<db:para>Any type with a <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link> macro can the registered as a <db:link xlink:href="qtqml-typesystem-valuetypes.xml">QML value type</db:link>. Once such a type is registered with the QML type system it can be used as property type in QML code. Such an instance can be manipulated from QML; as <db:link xlink:href="qtqml-cppintegration-exposecppattributes.xml">Exposing Attributes of C++ Types to QML</db:link> explains, the properties and methods of any value type are accessible from QML code.</db:para>
<db:para>In contrast to object types, value types require <db:emphasis role="bold">lower case</db:emphasis> names. The preferred way to register them is using the <db:link xlink:href="qqmlintegration-h.xml#QML_VALUE_TYPE">QML_VALUE_TYPE</db:link> or <db:link xlink:href="qqmlintegration-h.xml#QML_ANONYMOUS">QML_ANONYMOUS</db:link> macros. There is no equivalent to <db:link xlink:href="qqmlintegration-h.xml#QML_ELEMENT">QML_ELEMENT</db:link> as your C++ classes are typically going to have upper case names. Otherwise the registration is very similar to the registration of object types.</db:para>
<db:para>For example, suppose you want to register a value type person that consists of two strings for first and last name:</db:para>
<db:programlisting language="cpp">class Person
{
    Q_GADGET
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName)
    QML_VALUE_TYPE(person)
public:
    // ...
};
</db:programlisting>
<db:para>There are some further limitations on what you can do with value types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Value types cannot be singletons.</db:para>
</db:listitem>
<db:listitem>
<db:para>Value types need to be default-constructible and copy-constructible.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using <db:link xlink:href="qproperty.xml">QProperty</db:link> as a member of a value type is problematic. Value types get copied, and you would need to decide what to do with any bindings on the <db:link xlink:href="qproperty.xml">QProperty</db:link> at that point. You should not use <db:link xlink:href="qproperty.xml">QProperty</db:link> in value types.</db:para>
</db:listitem>
<db:listitem>
<db:para>Value types cannot provide attached properties.</db:para>
</db:listitem>
<db:listitem>
<db:para>The API to define extensions to value types (<db:link xlink:href="qqmlintegration-h.xml#QML_EXTENDED">QML_EXTENDED</db:link>) is not public and subject to future changes.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="value-types-with-enumerations">
<db:title>Value Types with Enumerations</db:title>
<db:para>Exposing enumerations from a value type to QML requires some extra steps.</db:para>
<db:para>Value types have lower case names in QML and types with lower case names are generally not addressable in JavaScript code (unless you specify <db:link xlink:href="qtqml-documents-structure.xml#valuetypebehavior">pragma ValueTypeBehavior: Addressable</db:link>). If you have a value type in C++ with an enumeration you want to expose to QML, you need to expose the enumeration separately.</db:para>
<db:para>This can be solved by using <db:link xlink:href="qqmlintegration-h.xml#QML_FOREIGN_NAMESPACE">QML_FOREIGN_NAMESPACE</db:link>. First, derive from your value type to create a separate C++ type:</db:para>
<db:programlisting language="cpp">class Person
{
    Q_GADGET
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName)
    QML_VALUE_TYPE(person)
public:
    enum TheEnum { A, B, C };
    Q_ENUM(TheEnum)
    //...
};

class PersonDerived: public Person
{
    Q_GADGET
};
</db:programlisting>
<db:para>Then expose the derived type as a foreign namespace:</db:para>
<db:programlisting language="cpp">namespace PersonDerivedForeign
{
    Q_NAMESPACE
    QML_NAMED_ELEMENT(Person)
    QML_FOREIGN_NAMESPACE(PersonDerived)
}
</db:programlisting>
<db:para>This produces a <db:link xlink:href="qtqml-typesystem-namespaces.xml">QML Namespace</db:link> called Person (upper case) with an enumeration called TheEnum and values A, B, and C. Then you can write the following in QML:</db:para>
<db:programlisting language="qml">someProperty: Person.A
</db:programlisting>
<db:para>At the same time you can still use your value type called person (lower case) exactly as before.</db:para>
</db:section>
<db:section xml:id="registering-non-instantiable-types">
<db:title>Registering Non-Instantiable Types</db:title>
<db:para>Sometimes a <db:link xlink:href="qobject.xml">QObject</db:link>-derived class may need to be registered with the QML type system but not as an instantiable type. For example, this is the case if a C++ class:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>is an interface type that should not be instantiable</db:para>
</db:listitem>
<db:listitem>
<db:para>is a base class type that does not need to be exposed to QML</db:para>
</db:listitem>
<db:listitem>
<db:para>declares some enum that should be accessible from QML, but otherwise should not be instantiable</db:para>
</db:listitem>
<db:listitem>
<db:para>is a type that should be provided to QML through a singleton instance, and should not be instantiable from QML</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qtqml-index.xml">Qt Qml</db:link> module provides several macros for registering non-instantiable types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qqmlintegration-h.xml#QML_ANONYMOUS">QML_ANONYMOUS</db:link> registers a C++ type that is not instantiable and cannot be referred to from QML. This enables the engine to coerce any inherited types that are instantiable from QML.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qqmlintegration-h.xml#QML_INTERFACE">QML_INTERFACE</db:link> registers an existing Qt interface type. The type is not instantiable from QML, and you cannot declare QML properties with it. Using C++ properties of this type from QML will do the expected interface casts, though.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qqmlintegration-h.xml#QML_UNCREATABLE">QML_UNCREATABLE</db:link>(reason) combined with with <db:link xlink:href="qqmlintegration-h.xml#QML_ELEMENT">QML_ELEMENT</db:link> or <db:link xlink:href="qqmlintegration-h.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link> registers a named C++ type that is not instantiable but should be identifiable as a type to the QML type system. This is useful if a type's enums or attached properties should be accessible from QML but the type itself should not be instantiable. The parameter should be an error message to be emitted if an attempt at creating an instance of the type is detected.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qqmlintegration-h.xml#QML_SINGLETON">QML_SINGLETON</db:link> combined with <db:link xlink:href="qqmlintegration-h.xml#QML_ELEMENT">QML_ELEMENT</db:link> or <db:link xlink:href="qqmlintegration-h.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link> registers a singleton type that can be imported from QML, as discussed below.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note that all C++ types registered with the QML type system must be <db:link xlink:href="qobject.xml">QObject</db:link>-derived, even if they are non-instantiable.</db:para>
<db:section xml:id="registering-singleton-objects-with-a-singleton-type">
<db:title>Registering Singleton Objects with a Singleton Type</db:title>
<db:para>A singleton type enables properties, signals and methods to be exposed in a namespace without requiring the client to manually instantiate an object instance. <db:link xlink:href="qobject.xml">QObject</db:link> singleton types in particular are an efficient and convenient way to provide functionality or global property values.</db:para>
<db:para>Note that singleton types do not have an associated <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> as they are shared across all contexts in an engine. <db:link xlink:href="qobject.xml">QObject</db:link> singleton type instances are constructed and owned by the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>, and will be destroyed when the engine is destroyed.</db:para>
<db:para>A <db:link xlink:href="qobject.xml">QObject</db:link> singleton type can be interacted with in a manner similar to any other <db:link xlink:href="qobject.xml">QObject</db:link> or instantiated type, except that only one (engine constructed and owned) instance will exist, and it must be referenced by type name rather than id. Q_PROPERTYs of <db:link xlink:href="qobject.xml">QObject</db:link> singleton types may be bound to, and <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link> functions of <db:link xlink:href="qobject.xml">QObject</db:link> module APIs may be used in signal handler expressions. This makes singleton types an ideal way to implement styling or theming, and they can also be used instead of &quot;.pragma library&quot; script imports to store global state or to provide global functionality.</db:para>
<db:para>Once registered, a <db:link xlink:href="qobject.xml">QObject</db:link> singleton type may be imported and used like any other <db:link xlink:href="qobject.xml">QObject</db:link> instance exposed to QML. The following example assumes that a <db:link xlink:href="qobject.xml">QObject</db:link> singleton type was registered into the &quot;MyThemeModule&quot; namespace with version 1.0, where that <db:link xlink:href="qobject.xml">QObject</db:link> has a <db:link xlink:href="qcolor.xml">QColor</db:link> &quot;color&quot; <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>:</db:para>
<db:programlisting language="qml">import MyThemeModule 1.0 as Theme

Rectangle {
    color: Theme.color // binding.
}
</db:programlisting>
<db:para>A <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> may also be exposed as a singleton type, however clients should be aware that properties of such a singleton type cannot be bound to.</db:para>
<db:para>See <db:link xlink:href="qqmlintegration-h.xml#QML_SINGLETON">QML_SINGLETON</db:link> for more information on how implement and register a new singleton type, and how to use an existing singleton type. See <db:link xlink:href="qml-singleton.xml">Singletons in QML</db:link> for more in-depth information about singletons.</db:para>
<db:note>
<db:para>Enum values for registered types in QML should start with a capital.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="final-properties">
<db:title>Final properties</db:title>
<db:para>Properties declared final using the FINAL modifier to <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> cannot be overridden. This means that any properties or functions of the same name, declared either in QML or in C++ on derived types, are ignored by the QML engine. You should declare properties FINAL when possible, in order to avoid accidental overrides. An override of a property is visible not only in derived classes, but also to QML code executing the context of the base class. Such QML code, typically expects the original property, though. This is a frequent source of mistakes.</db:para>
<db:para>Properties declared FINAL can also not be overridden by functions in QML, or by <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link> methods in C++.</db:para>
</db:section>
<db:section xml:id="type-revisions-and-versions">
<db:title>Type Revisions and Versions</db:title>
<db:para>Many of the type registration functions require versions to be specified for the registered type. Type revisions and versions allow new properties or methods to exist in the new version while remaining compatible with previous versions.</db:para>
<db:para>Consider these two QML files:</db:para>
<db:programlisting language="cpp">// main.qml
import QtQuick 1.0

Item {
    id: root
    MyType {}
}
</db:programlisting>
<db:programlisting language="cpp">// MyType.qml
import MyTypes 1.0

CppType {
    value: root.x
}
</db:programlisting>
<db:para>where CppType maps to the C++ class CppType.</db:para>
<db:para>If the author of CppType adds a root property to CppType in a new version of their type definition, root.x now resolves to a different value because root is also the id of the top level component. The author could specify that the new root property is available from a specific minor version. This permits new properties and features to be added to existing types without breaking existing programs.</db:para>
<db:para>The REVISION tag is used to mark the root property as added in revision 1 of the type. Methods such as <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link>'s, signals and slots can also be tagged for a revision using the <db:link xlink:href="qobject.xml#Q_REVISION">Q_REVISION</db:link> macro:</db:para>
<db:programlisting language="cpp">class CppType : public BaseType
{
    Q_OBJECT
    Q_PROPERTY(int root READ root WRITE setRoot NOTIFY rootChanged REVISION(1, 0))
    QML_ELEMENT

signals:
    Q_REVISION(1, 0) void rootChanged();
};
</db:programlisting>
<db:para>The revisions given this way are automatically interpreted as minor versions to the major version given in the project file. In this case, root is only available when MyTypes version 1.1 or higher is imported. Imports of MyTypes version 1.0 remain unaffected.</db:para>
<db:para>For the same reason, new types introduced in later versions should be tagged with the <db:link xlink:href="qqmlintegration-h.xml#QML_ADDED_IN_VERSION">QML_ADDED_IN_VERSION</db:link> macro.</db:para>
<db:para>This feature of the language allows for behavioural changes to be made without breaking existing applications. Consequently QML module authors should always remember to document what changed between minor versions, and QML module users should check that their application still runs correctly before deploying an updated import statement.</db:para>
<db:para>Revisions of a base class that your type depends upon are automatically registered when registering the type itself. This is useful when deriving from base classes provided by other authors, e.g. when extending classes from the Qt Quick module.</db:para>
<db:note>
<db:para>The QML engine does not support revisions for properties or signals of grouped and attached property objects.</db:para>
</db:note>
</db:section>
<db:section xml:id="registering-extension-objects">
<db:title>Registering Extension Objects</db:title>
<db:para>When integrating existing classes and technology into QML, APIs will often need tweaking to fit better into the declarative environment. Although the best results are usually obtained by modifying the original classes directly, if this is either not possible or is complicated by some other concerns, extension objects allow limited extension possibilities without direct modifications.</db:para>
<db:para><db:emphasis>Extension objects</db:emphasis> add additional properties to an existing type. An extended type definition allows the programmer to supply an additional type, known as the <db:emphasis>extension type</db:emphasis>, when registering the class. Its members are transparently merged with the original target class when used from within QML. For example:</db:para>
<db:programlisting language="qml">QLineEdit {
    leftMargin: 20
}
</db:programlisting>
<db:para>The leftMargin property is a new property added to an existing C++ type, <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, without modifying its source code.</db:para>
<db:para>The <db:link xlink:href="qqmlintegration-h.xml#QML_EXTENDED">QML_EXTENDED</db:link>(extension) macro is for registering extended types. The argument is the name of another class to be used as extension.</db:para>
<db:para>You can also use <db:link xlink:href="qqmlintegration-h.xml#QML_EXTENDED_NAMESPACE">QML_EXTENDED_NAMESPACE</db:link>(namespace) to register a namespace, and especially the enumerations declared within, as an extension to a type. If the type you are extending is itself a namespace, you need to use <db:link xlink:href="qqmlengine.xml#QML_NAMESPACE_EXTENDED">QML_NAMESPACE_EXTENDED</db:link>(namespace) instead.</db:para>
<db:para>An extension class is a regular <db:link xlink:href="qobject.xml">QObject</db:link>, with a constructor that takes a <db:link xlink:href="qobject.xml">QObject</db:link> pointer. However, the extension class creation is delayed until the first extended property is accessed. The extension class is created and the target object is passed in as the parent. When the property on the original is accessed, the corresponding property on the extension object is used instead.</db:para>
</db:section>
<db:section xml:id="registering-foreign-types">
<db:title>Registering Foreign Types</db:title>
<db:para>There may be C++ types that cannot be modified to hold the above mentioned macros. Those may be types from 3rdparty libraries, or types that need to fulfill some contract that contradicts the presence of those macros. You can still expose those types to QML, though, using the <db:link xlink:href="qqmlintegration-h.xml#QML_FOREIGN">QML_FOREIGN</db:link> macro. In order to do this, create a separate struct that consists entirely of the registration macros, like this:</db:para>
<db:programlisting language="cpp">// Contains class Immutable3rdParty
#include &lt;3rdpartyheader.h&gt;

struct Foreign
{
    Q_GADGET
    QML_FOREIGN(Immutable3rdParty)
    QML_NAMED_ELEMENT(Accessible3rdParty)
    QML_ADDED_IN_VERSION(2, 4)
    // QML_EXTENDED, QML_SINGLETON ...
};
</db:programlisting>
<db:para>From this code, you get a QML type with the methods and properties of Immutable3rdParty, and the QML traits (e.g.: singleton, extended) specified in Foreign.</db:para>
</db:section>
</db:section>
<db:section xml:id="defining-qml-specific-types-and-attributes">
<db:title>Defining QML-Specific Types and Attributes</db:title>
<db:section xml:id="providing-attached-properties">
<db:title>Providing Attached Properties</db:title>
<db:para>In the QML language syntax, there is a notion of <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers"><db:emphasis>attached properties</db:emphasis> and <db:emphasis>attached signal handlers</db:emphasis></db:link>, which are additional attributes that are attached to an object. Essentially, such attributes are implemented and provided by an <db:emphasis>attaching type</db:emphasis>, and these attributes may be <db:emphasis>attached</db:emphasis> to an object of another type. This contrasts with ordinary object properties which are provided by the object type itself (or the object's inherited type).</db:para>
<db:para>For example, the Item below uses attached properties and attached handlers:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    width: 100; height: 100

    focus: true
    Keys.enabled: false
    Keys.onReturnPressed: console.log(&quot;Return key was pressed&quot;)
}
</db:programlisting>
<db:para>Here, the Item object is able to access and set the values of Keys.enabled and Keys.onReturnPressed. This allows the Item object to access these extra attributes as an extension to its own existing attributes.</db:para>
<db:section xml:id="steps-for-implementing-attached-objects">
<db:title>Steps for Implementing Attached Objects</db:title>
<db:para>When considering the above example, there are several parties involved:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>There is an instance of an anonymous <db:emphasis>attached object type</db:emphasis>, with an enabled property and a returnPressed signal, that has been attached to the Item object to enable it to access and set these attributes.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Item object is the <db:emphasis>attachee</db:emphasis>, to which the instance of the <db:emphasis>attached object type</db:emphasis> has been attached.</db:para>
</db:listitem>
<db:listitem>
<db:para>Keys is the <db:emphasis>attaching type</db:emphasis>, which provides the <db:emphasis>attachee</db:emphasis> with a named qualifier, &quot;Keys&quot;, through which it may access the attributes of the <db:emphasis>attached object type</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When the QML engine processes this code, it creates a single instance of the <db:emphasis>attached object type</db:emphasis> and attaches this instance to the Item object, thereby providing it with access to the enabled and returnPressed attributes of the instance.</db:para>
<db:para>The mechanisms for providing attached objects can be implemented from C++ by providing classes for the <db:emphasis>attached object type</db:emphasis> and <db:emphasis>attaching type</db:emphasis>. For the <db:emphasis>attached object type</db:emphasis>, provide a <db:link xlink:href="qobject.xml">QObject</db:link>-derived class that defines the attributes to be made accessible to <db:emphasis>attachee</db:emphasis> objects. For the <db:emphasis>attaching type</db:emphasis>, provide a <db:link xlink:href="qobject.xml">QObject</db:link>-derived class that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>implements a static qmlAttachedProperties() with the following signature:</db:para>
<db:programlisting language="cpp">static &lt;AttachedPropertiesType&gt; *qmlAttachedProperties(QObject *object);
</db:programlisting>
<db:para>This method should return an instance of the <db:emphasis>attached object type</db:emphasis>.</db:para>
<db:para>The QML engine invokes this method in order to attach an instance of the attached object type to the <db:emphasis>attachee</db:emphasis> specified by the object parameter. It is customary, though not strictly required, for this method implementation to parent the returned instance to object in order to prevent memory leaks.</db:para>
<db:para>This method is called at most once by the engine for each attachee object instance, as the engine caches the returned instance pointer for subsequent attached property accesses. Consequently the attachment object may not be deleted until the attachee object is destroyed.</db:para>
</db:listitem>
<db:listitem>
<db:para>is declared as an attaching type, by adding the <db:link xlink:href="qqmlintegration-h.xml#QML_ATTACHED">QML_ATTACHED</db:link>(attached) macro to the class declaration. The argument is the name of the <db:emphasis>attached object type</db:emphasis></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="implementing-attached-objects-an-example">
<db:title>Implementing Attached Objects: An Example</db:title>
<db:para>For example, take the Message type described in an <db:link xlink:href="qtqml-cppintegration-definetypes.xml#registering-an-instantiable-object-type">earlier example</db:link>:</db:para>
<db:programlisting language="cpp">class Message : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString author READ author WRITE setAuthor NOTIFY authorChanged)
    Q_PROPERTY(QDateTime creationDate READ creationDate WRITE setCreationDate NOTIFY creationDateChanged)
    QML_ELEMENT
public:
    // ...
};
</db:programlisting>
<db:para>Suppose it is necessary to trigger a signal on a Message when it is published to a message board, and also track when the message has expired on the message board. Since it doesn't make sense to add these attributes directly to a Message, as the attributes are more relevant to the message board context, they could be implemented as <db:emphasis>attached</db:emphasis> attributes on a Message object that are provided through a &quot;MessageBoard&quot; qualifier. In terms of the concepts described earlier, the parties involved here are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An instance of an anonymous <db:emphasis>attached object type</db:emphasis>, which provides a published signal and an expired property. This type is implemented by MessageBoardAttachedType below</db:para>
</db:listitem>
<db:listitem>
<db:para>A Message object, which will be the <db:emphasis>attachee</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para>The MessageBoard type, which will be the <db:emphasis>attaching type</db:emphasis> that is used by Message objects to access the attached attributes</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Following is an example implementation. First, there needs to be an <db:emphasis>attached object type</db:emphasis> with the necessary properties and signals that will be accessible to the <db:emphasis>attachee</db:emphasis>:</db:para>
<db:programlisting language="cpp">class MessageBoardAttachedType : public QObject
{
    Q_OBJECT
    Q_PROPERTY(bool expired READ expired WRITE setExpired NOTIFY expiredChanged)
    QML_ANONYMOUS
public:
    MessageBoardAttachedType(QObject *parent);
    bool expired() const;
    void setExpired(bool expired);
signals:
    void published();
    void expiredChanged();
};
</db:programlisting>
<db:para>Then the <db:emphasis>attaching type</db:emphasis>, MessageBoard, must declare a qmlAttachedProperties() method that returns an instance of the <db:emphasis>attached object type</db:emphasis> as implemented by MessageBoardAttachedType. Additionally, MessageBoard must be declared as an attaching type via the <db:link xlink:href="qqmlintegration-h.xml#QML_ATTACHED">QML_ATTACHED</db:link>() macro:</db:para>
<db:programlisting language="cpp">class MessageBoard : public QObject
{
    Q_OBJECT
    QML_ATTACHED(MessageBoardAttachedType)
    QML_ELEMENT
public:
    static MessageBoardAttachedType *qmlAttachedProperties(QObject *object)
    {
        return new MessageBoardAttachedType(object);
    }
};
</db:programlisting>
<db:para>Now, a Message type can access the properties and signals of the attached object type:</db:para>
<db:programlisting language="qml">Message {
    author: &quot;Amelie&quot;
    creationDate: new Date()

    MessageBoard.expired: creationDate &lt; new Date(&quot;January 01, 2015 10:45:00&quot;)
    MessageBoard.onPublished: console.log(&quot;Message by&quot;, author, &quot;has been
published!&quot;)
}
</db:programlisting>
<db:para>Additionally, the C++ implementation may access the attached object instance that has been attached to any object by calling the <db:link xlink:href="qqml-h.xml#qmlAttachedPropertiesObject">qmlAttachedPropertiesObject</db:link>() function.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">Message *msg = someMessageInstance();
MessageBoardAttachedType *attached =
        qobject_cast&lt;MessageBoardAttachedType*&gt;(qmlAttachedPropertiesObject&lt;MessageBoard&gt;(msg));

qDebug() &lt;&lt; &quot;Value of MessageBoard.expired:&quot; &lt;&lt; attached-&gt;expired();
</db:programlisting>
</db:section>
<db:section xml:id="propagating-attached-properties">
<db:title>Propagating Attached Properties</db:title>
<db:para>QQuickAttachedPropertyPropagator can be subclassed to propagate attached properties from a parent object to its children, similar to font and palette propagation. It supports propagation through items, popups, and <db:link xlink:href="qt3dextras-module.xml#window" role="deprecated">windows</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-modifier-types">
<db:title>Property Modifier Types</db:title>
<db:para>A property modifier type is a special kind of QML object type. A property modifier type instance affects a property (of a QML object instance) which it is applied to. There are two different kinds of property modifier types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>property value write interceptors</db:para>
</db:listitem>
<db:listitem>
<db:para>property value sources</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A property value write interceptor can be used to filter or modify values as they are written to properties. Currently, the only supported property value write interceptor is the Behavior type provided by the QtQuick import.</db:para>
<db:para>A property value source can be used to automatically update the value of a property over time. Clients can define their own property value source types. The various <db:link xlink:href="">property animation</db:link> types provided by the QtQuick import are examples of property value sources.</db:para>
<db:para>Property modifier type instances can be created and applied to a property of a QML object through the &quot;&lt;ModifierType&gt; on &lt;propertyName&gt;&quot; syntax, as the following example shows:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    width: 400
    height: 50

    Rectangle {
        width: 50
        height: 50
        color: &quot;red&quot;

        NumberAnimation on x {
            from: 0
            to: 350
            loops: Animation.Infinite
            duration: 2000
        }
    }
}
</db:programlisting>
<db:para>This is commonly referred to as &quot;on&quot; syntax.</db:para>
<db:para>Clients can register their own property value source types, but currently not property value write interceptors.</db:para>
<db:section xml:id="property-value-sources">
<db:title>Property Value Sources</db:title>
<db:para><db:emphasis>Property value sources</db:emphasis> are QML types that can automatically update the value of a property over time, using the &lt;PropertyValueSource&gt; on &lt;property&gt; syntax. For example, the various <db:link xlink:href="">property animation</db:link> types provided by the QtQuick module are examples of property value sources.</db:para>
<db:para>A property value source can be implemented in C++ by subclassing <db:link xlink:href="qqmlpropertyvaluesource.xml">QQmlPropertyValueSource</db:link> and providing an implementation that writes different values to a property over time. When the property value source is applied to a property using the &lt;PropertyValueSource&gt; on &lt;property&gt; syntax in QML, it is given a reference to this property by the engine so that the property value can be updated.</db:para>
<db:para>For example, suppose there is a RandomNumberGenerator class to be made available as a property value source, so that when applied to a QML property, it will update the property value to a different random number every 500 milliseconds. Additionally, a maxValue can be provided to this random number generator. This class can be implemented as follows:</db:para>
<db:programlisting language="cpp">class RandomNumberGenerator : public QObject, public QQmlPropertyValueSource
{
    Q_OBJECT
    Q_INTERFACES(QQmlPropertyValueSource)
    Q_PROPERTY(int maxValue READ maxValue WRITE setMaxValue NOTIFY maxValueChanged);
    QML_ELEMENT
public:
    RandomNumberGenerator(QObject *parent)
        : QObject(parent), m_maxValue(100)
    {
        QObject::connect(&amp;m_timer, SIGNAL(timeout()), SLOT(updateProperty()));
        m_timer.start(500);
    }

    int maxValue() const;
    void setMaxValue(int maxValue);

    virtual void setTarget(const QQmlProperty &amp;prop) { m_targetProperty = prop; }

signals:
    void maxValueChanged();

private slots:
    void updateProperty() {
        m_targetProperty.write(QRandomGenerator::global()-&gt;bounded(m_maxValue));
    }

private:
    QQmlProperty m_targetProperty;
    QTimer m_timer;
    int m_maxValue;
};
</db:programlisting>
<db:para>When the QML engine encounters a use of RandomNumberGenerator as a property value source, it invokes RandomNumberGenerator::setTarget() to provide the type with the property to which the value source has been applied. When the internal timer in RandomNumberGenerator triggers every 500 milliseconds, it will write a new number value to that specified property.</db:para>
<db:para>Once the RandomNumberGenerator class has been registered with the QML type system, it can be used from QML as a property value source. Below, it is used to change the width of a Rectangle every 500 milliseconds:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    width: 300; height: 300

    Rectangle {
        RandomNumberGenerator on width { maxValue: 300 }

        height: 100
        color: &quot;red&quot;
    }
}
</db:programlisting>
<db:para>In all other respects, property value sources are regular QML types that can have properties, signals methods and so on, but with the added capability that they can be used to change property values using the &lt;PropertyValueSource&gt; on &lt;property&gt; syntax.</db:para>
<db:para>When a property value source object is assigned to a property, QML first tries to assign it normally, as though it were a regular QML type. Only if this assignment fails does the engine call the <db:link xlink:href="qqmlpropertyvaluesource.xml#setTarget">setTarget</db:link>() method. This allows the type to also be used in contexts other than just as a value source.</db:para>
</db:section>
</db:section>
<db:section xml:id="specifying-default-and-parent-properties-for-qml-object-types">
<db:title>Specifying Default and Parent Properties for QML Object Types</db:title>
<db:para>Any <db:link xlink:href="qobject.xml">QObject</db:link>-derived type that is registered as an instantiable QML object type can optionally specify a <db:emphasis>default property</db:emphasis> for the type. A default property is the property to which an object's children are automatically assigned if they are not assigned to any specific property.</db:para>
<db:para>The default property can be set by calling the <db:link xlink:href="qobject.xml#Q_CLASSINFO">Q_CLASSINFO</db:link>() macro for a class with a specific &quot;DefaultProperty&quot; value. For example, the MessageBoard class below specifies its messages property as the default property for the class:</db:para>
<db:programlisting language="cpp">class MessageBoard : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QQmlListProperty&lt;Message&gt; messages READ messages)
    Q_CLASSINFO(&quot;DefaultProperty&quot;, &quot;messages&quot;)
    QML_ELEMENT
public:
    QQmlListProperty&lt;Message&gt; messages();

private:
    QList&lt;Message *&gt; m_messages;
};
</db:programlisting>
<db:para>This enables children of a MessageBoard object to be automatically assigned to its messages property if they are not assigned to a specific property. For example:</db:para>
<db:programlisting language="qml">MessageBoard {
    Message { author: &quot;Naomi&quot; }
    Message { author: &quot;Clancy&quot; }
}
</db:programlisting>
<db:para>If messages was not set as the default property, then any Message objects would have to be explicitly assigned to the messages property instead, as follows:</db:para>
<db:programlisting language="qml">MessageBoard {
    messages: [
        Message { author: &quot;Naomi&quot; },
        Message { author: &quot;Clancy&quot; }
    ]
}
</db:programlisting>
<db:para>(Incidentally, the <db:link xlink:href="">Item::data</db:link> property is its default property. Any Item objects added to this data property are also added to the list of <db:link xlink:href="">Item::children</db:link>, so the use of the default property enables visual children to be declared for an item without explicitly assigning them to the children property.)</db:para>
<db:para>Additionally, you can declare a &quot;ParentProperty&quot; <db:link xlink:href="qobject.xml#Q_CLASSINFO">Q_CLASSINFO</db:link>() to inform the QML engine which property should denote the parent object in the QML hierarchy. For example, the Message type might be declared as follows:</db:para>
<db:programlisting language="cpp">class Message : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QObject* board READ board BINDABLE boardBindable)
    Q_PROPERTY(QString author READ author BINDABLE authorBindable)
    Q_CLASSINFO(&quot;ParentProperty&quot;, &quot;board&quot;)
    QML_ELEMENT

public:
    Message(QObject *parent = nullptr) : QObject(parent) { m_board = parent; }

    QObject *board() const { return m_board.value(); }
    QBindable&lt;QObject *&gt; boardBindable() { return QBindable&lt;QObject *&gt;(&amp;m_board); }

    QString author() const { return m_author.value(); }
    QBindable&lt;QString&gt; authorBindable() { return QBindable&lt;QString&gt;(&amp;m_author); }

private:
    QProperty&lt;QObject *&gt; m_board;
    QProperty&lt;QString&gt; m_author;
};
</db:programlisting>
<db:para>Defining the parent property affords <db:link xlink:href="qtqml-tooling-qmllint.xml">qmllint</db:link> and other tools better insight into the intention of your code and avoids false positive warnings on some property accesses.</db:para>
</db:section>
<db:section xml:id="defining-visual-items-with-the-qt-quick-module">
<db:title>Defining Visual Items with the Qt Quick Module</db:title>
<db:para>When building user interfaces with the <db:link xlink:href="">Qt Quick</db:link> module, all QML objects that are to be visually rendered must derive from the Item type, as it is the base type for all visual objects in <db:link xlink:href="">Qt Quick</db:link>. This Item type is implemented by the QQuickItem C++ class, which is provided by the <db:link xlink:href="">Qt Quick</db:link> module. Therefore, this class should be subclassed when it is necessary to implement a visual type in C++ that can be integrated into a QML-based user interface.</db:para>
<db:para>See the QQuickItem documentation for more information. Additionally, the <db:link xlink:href="qtqml-tutorials-extending-qml-example.xml">Writing QML Extensions with C++</db:link> tutorial demonstrates how a QQuickItem-based visual item can be implemented in C++ and integrated into a Qt Quick-based user interface.</db:para>
</db:section>
</db:section>
<db:section xml:id="receiving-notifications-for-object-initialization">
<db:title>Receiving Notifications for Object Initialization</db:title>
<db:para>For some custom QML object types, it may be beneficial to delay the initialization of particular data until the object has been created and all of its properties have been set. For example, this may be the case if the initialization is costly, or if the initialization should not be performed until all property values have been initialized.</db:para>
<db:para>The <db:link xlink:href="qtqml-index.xml">Qt Qml</db:link> module provides the <db:link xlink:href="qqmlparserstatus.xml">QQmlParserStatus</db:link> to be subclassed for these purposes. It defines a number of virtual methods that are invoked at various stages during component instantiation. To receive these notifications, a C++ class should inherit <db:link xlink:href="qqmlparserstatus.xml">QQmlParserStatus</db:link> and also notify the Qt meta system using the <db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">class MyQmlType : public QObject, public QQmlParserStatus
{
    Q_OBJECT
    Q_INTERFACES(QQmlParserStatus)
    QML_ELEMENT
public:
    virtual void componentComplete()
    {
        // Perform some initialization here now that the object is fully created
    }
};
</db:programlisting>
</db:section>
</db:article>
