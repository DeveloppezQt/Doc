<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QSet::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qset-iterator.xml">QSet::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qset.xml">QSet</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qset.xml">QSet</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qset.xml">QSet</db:link>&lt;T&gt;::iterator allows you to iterate over a <db:link xlink:href="qset.xml">QSet</db:link> and to remove items (using QSet::erase()) while you iterate. (<db:link xlink:href="qset.xml">QSet</db:link> doesn't let you <db:emphasis>modify</db:emphasis> a value through an iterator, because that would potentially require moving the value in the internal hash table used by <db:link xlink:href="qset.xml">QSet</db:link>.) If you want to iterate over a const <db:link xlink:href="qset.xml">QSet</db:link>, you should use <db:link xlink:href="qset-const-iterator.xml">QSet::const_iterator</db:link>. It is generally good practice to use <db:link xlink:href="qset-const-iterator.xml">QSet::const_iterator</db:link> on a non-const <db:link xlink:href="qset.xml">QSet</db:link> as well, unless you need to change the <db:link xlink:href="qset.xml">QSet</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qset-iterator.xml">QSet::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a function like QSet::begin(), QSet::end(), or QSet::insert() before you can start iterating. Here's a typical loop that prints all the items stored in a set:</db:para>
<db:programlisting language="cpp">QSet&lt;QString&gt; set;
set &lt;&lt; &quot;January&quot; &lt;&lt; &quot;February&quot; &lt;&lt; ... &lt;&lt; &quot;December&quot;;

QSet&lt;QString&gt;::iterator i;
for (i = set.begin(); i != set.end(); ++i)
    qDebug() &lt;&lt; *i;
</db:programlisting>
<db:para>Here's a loop that removes certain items (all those that start with 'J') from a set while iterating:</db:para>
<db:programlisting language="cpp">QSet&lt;QString&gt; set;
set &lt;&lt; &quot;January&quot; &lt;&lt; &quot;February&quot; &lt;&lt; ... &lt;&lt; &quot;December&quot;;

QSet&lt;QString&gt;::iterator i = set.begin();
while (i != set.end()) {
    if ((*i).startsWith('J')) {
        i = set.erase(i);
    } else {
        ++i;
    }
}
</db:programlisting>
<db:para>STL-style iterators can be used as arguments to <db:link xlink:href="">generic algorithms</db:link>. For example, here's how to find an item in the set using the qFind() algorithm:</db:para>
<db:programlisting language="cpp">QSet&lt;QString&gt; set;
...
QSet&lt;QString&gt;::iterator it = qFind(set.begin(), set.end(), &quot;Jeanette&quot;);
if (it != set.end())
    cout &lt;&lt; &quot;Found Jeanette&quot; &lt;&lt; endl;
</db:programlisting>
<db:para>Multiple iterators can be used on the same set.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qset-const-iterator.xml">QSet::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml">QMutableSetIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>iterator::iterator_category</db:title>
<db:para>Synonyms for <db:emphasis>std::bidirectional_iterator_tag</db:emphasis> indicating these iterators are bidirectional iterators.</db:para>
</db:section>
</db:section>
</db:article>
