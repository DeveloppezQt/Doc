<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QSet::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qset-iterator.xml">QSet::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qset.xml">QSet</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qset.xml">QSet</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="java-style-iterators.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qset.xml">QSet</db:link>&lt;T&gt;::iterator allows you to iterate over a <db:link xlink:href="qset.xml">QSet</db:link> and to remove items (using <db:link xlink:href="qset.xml#erase">QSet::erase</db:link>()) while you iterate. (<db:link xlink:href="qset.xml">QSet</db:link> doesn't let you <db:emphasis>modify</db:emphasis> a value through an iterator, because that would potentially require moving the value in the internal hash table used by <db:link xlink:href="qset.xml">QSet</db:link>.) If you want to iterate over a const <db:link xlink:href="qset.xml">QSet</db:link>, you should use <db:link xlink:href="qset-const-iterator.xml">QSet::const_iterator</db:link>. It is generally good practice to use <db:link xlink:href="qset-const-iterator.xml">QSet::const_iterator</db:link> on a non-const <db:link xlink:href="qset.xml">QSet</db:link> as well, unless you need to change the <db:link xlink:href="qset.xml">QSet</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qset-iterator.xml">QSet::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a function like <db:link xlink:href="qset.xml#begin">QSet::begin</db:link>(), <db:link xlink:href="qset.xml#end">QSet::end</db:link>(), or <db:link xlink:href="qset.xml#insert">QSet::insert</db:link>() before you can start iterating. Here's a typical loop that prints all the items stored in a set:</db:para>
<db:programlisting language="cpp">QSet&amp;lt;QString&amp;gt; set;
set &amp;lt;&amp;lt; &quot;January&quot; &amp;lt;&amp;lt; &quot;February&quot; &amp;lt;&amp;lt; ... &amp;lt;&amp;lt; &quot;December&quot;;

QSet&amp;lt;QString&amp;gt;::iterator i;
for (i = set.begin(); i != set.end(); ++i)
    qDebug() &amp;lt;&amp;lt; *i;
</db:programlisting>
<db:para>Here's a loop that removes certain items (all those that start with 'J') from a set while iterating:</db:para>
<db:programlisting language="cpp">QSet&amp;lt;QString&amp;gt; set;
set &amp;lt;&amp;lt; &quot;January&quot; &amp;lt;&amp;lt; &quot;February&quot; &amp;lt;&amp;lt; ... &amp;lt;&amp;lt; &quot;December&quot;;

QSet&amp;lt;QString&amp;gt;::iterator i = set.begin();
while (i != set.end()) {
    if ((*i).startsWith('J')) {
        i = set.erase(i);
    } else {
        ++i;
    }
}
</db:programlisting>
<db:para>STL-style iterators can be used as arguments to <db:link xlink:href="qtalgorithms.xml">generic algorithms</db:link>. For example, here's how to find an item in the set using the qFind() algorithm:</db:para>
<db:programlisting language="cpp">QSet&amp;lt;QString&amp;gt; set;
...
const auto predicate = [](const QString &amp;amp;s) { return s.compare(&quot;Jeanette&quot;, Qt::CaseInsensitive) == 0; };
QSet&amp;lt;QString&amp;gt;::iterator it = std::find_if(set.begin(), set.end(), predicate);
if (it != set.end())
    cout &amp;lt;&amp;lt; &quot;Found Jeanette&quot; &amp;lt;&amp;lt; endl;
</db:programlisting>
<db:para>Multiple iterators can be used on the same set.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qset-const-iterator.xml">QSet::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml">QMutableSetIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>iterator::iterator_category</db:title>
<db:para>Synonyms for <db:emphasis>std::bidirectional_iterator_tag</db:emphasis> indicating these iterators are bidirectional iterators.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="iterator">
<db:title>iterator::iterator()</db:title>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qset.xml#begin">QSet::begin</db:link>()</db:member>
<db:member><db:link xlink:href="qset.xml#end">QSet::end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iterator-2">
<db:title>iterator::iterator(const iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>iterator &amp;iterator::operator=(const iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this iterator.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>const T &amp;iterator::operator*() const</db:title>
<db:para>Returns a reference to the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qset-iterator.xml#operator--gt">operator-&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--gt">
<db:title>const T *iterator::operator-&gt;() const</db:title>
<db:para>Returns a pointer to the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qset-iterator.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool iterator::operator==(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qset-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool iterator::operator!=(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq-1">bool iterator::operator==(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool iterator::operator!=(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qset-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>iterator &amp;iterator::operator++()</db:title>
<db:para>The prefix ++ operator (++it) advances the iterator to the next item in the set and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qset.xml">QSet</db:link>&lt;T&gt;::constEnd() leads to undefined results.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>iterator iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (it++) advances the iterator to the next item in the set and returns an iterator to the previously current item.</db:para>
</db:section>
</db:section>
</db:article>
