<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScopedArrayPointer Class</db:title>
<db:subtitle>template &lt;typename T, typename Cleanup&gt; class QScopedArrayPointer</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscopedarraypointer.xml">QScopedArrayPointer</db:link> class stores a pointer to a dynamically allocated array of objects, and deletes it upon destruction.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScopedArrayPointer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qscopedpointer.xml" xlink:role="class">QScopedPointer</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScopedArrayPointer is part of <db:simplelist><db:member>misc</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qscopedarraypointer.xml">QScopedArrayPointer</db:link> is a <db:link xlink:href="qscopedpointer.xml">QScopedPointer</db:link> that defaults to deleting the object it is pointing to with the delete[] operator. It also features operator[] for convenience, so we can write:</db:para>
<db:programlisting language="cpp">void foo()
{
    QScopedArrayPointer&amp;lt;int&amp;gt; i(new int[10]);
    i[2] = 42;
    ...
    return; // our integer array is now deleted using delete[]
}
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScopedArrayPointer">
<db:title>QScopedArrayPointer::QScopedArrayPointer()</db:title>
<db:constructorsynopsis>
<db:methodname>QScopedArrayPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QScopedArrayPointer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qscopedarraypointer.xml">QScopedArrayPointer</db:link> instance.</db:para>
</db:section>
<db:section xml:id="QScopedArrayPointer-1">
<db:title>[explicit] QScopedArrayPointer::QScopedArrayPointer(D *<db:emphasis>p</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QScopedArrayPointer</db:methodname>
<db:methodparam>
<db:type>D *</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QScopedArrayPointer(D *p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qscopedarraypointer.xml">QScopedArrayPointer</db:link> and stores the array of objects pointed to by <db:code role="parameter">p</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>T &amp;QScopedArrayPointer::operator[](qsizetype <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T &amp;</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; operator[](qsizetype i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Provides access to entry <db:code role="parameter">i</db:code> of the scoped pointer's array of objects.</db:para>
<db:para>If the contained pointer is nullptr, behavior is undefined.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.5, <db:code role="parameter">i</db:code> was of type int, not qsizetype, possibly causing truncation on 64-bit platforms.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscopedpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>const T &amp;QScopedArrayPointer::operator[](qsizetype <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T &amp;</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const T &amp; operator[](qsizetype i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Provides access to entry <db:code role="parameter">i</db:code> of the scoped pointer's array of objects.</db:para>
<db:para>If the contained pointer is nullptr behavior is undefined.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.5, <db:code role="parameter">i</db:code> was of type int, not qsizetype, possibly causing truncation on 64-bit platforms.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscopedpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QScopedArrayPointer</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qscopedarraypointer.xml">QScopedArrayPointer</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="swap">
<db:title>void QScopedArrayPointer::swap(QScopedArrayPointer&lt;T, Cleanup&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QScopedArrayPointer&lt;T, Cleanup&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QScopedArrayPointer&lt;T, Cleanup&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.1. We strongly advise against using it in new code.</db:para>
<db:para>Use std::unique_ptr instead; this function may let a pointer escape its scope.</db:para>
<db:para>Swap this pointer with <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
