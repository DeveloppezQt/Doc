<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProxyStyle Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link> class is a convenience class that simplifies dynamically overriding <db:link xlink:href="qstyle.xml">QStyle</db:link> elements.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProxyStyle</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcommonstyle.xml" xlink:role="class">QCommonStyle</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link> wraps a <db:link xlink:href="qstyle.xml">QStyle</db:link> (usually the default system style) for the purpose of dynamically overriding painting or other specific style behavior.</db:para>
<db:para>The following example shows how to override the shortcut underline behavior on any platform:</db:para>
<db:programlisting language="cpp">#include &quot;textedit.h&quot;
#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QProxyStyle&amp;gt;

class MyProxyStyle : public QProxyStyle
{
  public:
    int styleHint(StyleHint hint, const QStyleOption *option = nullptr,
                  const QWidget *widget = nullptr, QStyleHintReturn *returnData = nullptr) const override
    {
        if (hint == QStyle::SH_UnderlineShortcut)
            return 0;
        return QProxyStyle::styleHint(hint, option, widget, returnData);
    }
};

int main(int argc, char **argv)
{
    Q_INIT_RESOURCE(textedit);

    QApplication a(argc, argv);
    a.setStyle(new MyProxyStyle);
    TextEdit mw;
    mw.resize(700, 800);
    mw.show();
    //...
}
</db:programlisting>
<db:para>Warning: The <db:link xlink:href="qcommonstyle.xml">common styles</db:link> provided by Qt will respect this hint, because they call <db:link xlink:href="qstyle.xml#proxy">QStyle::proxy</db:link>(), but there is no guarantee that <db:link xlink:href="qstyle.xml#proxy">QStyle::proxy</db:link>() will be called for user defined or system controlled styles. It would not work on a Mac, for example, where menus are handled by the operating system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProxyStyle">
<db:title>QProxyStyle::QProxyStyle(QStyle *<db:emphasis>style</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QProxyStyle</db:methodname>
<db:methodparam>
<db:type>QStyle *</db:type>
<db:parameter>style</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QProxyStyle(QStyle *style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link> object for overriding behavior in the specified <db:code role="parameter">style</db:code>, or in the default native <db:link xlink:href="qapplication.xml#style">style</db:link> if <db:code role="parameter">style</db:code> is not specified.</db:para>
<db:para>Ownership of <db:code role="parameter">style</db:code> is transferred to <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link>.</db:para>
</db:section>
<db:section xml:id="QProxyStyle-1">
<db:title>QProxyStyle::QProxyStyle(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QProxyStyle</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QProxyStyle(const QString &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link> object for overriding behavior in the base style specified by style <db:code role="parameter">key</db:code>, or in the current <db:link xlink:href="qapplication.xml#style">application style</db:link> if the specified style <db:code role="parameter">key</db:code> is unrecognized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylefactory.xml#create">QStyleFactory::create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QProxyStyle">
<db:title>[virtual] QProxyStyle::~QProxyStyle()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QProxyStyle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QProxyStyle()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link> object.</db:para>
</db:section>
<db:section xml:id="baseStyle">
<db:title>QStyle *QProxyStyle::baseStyle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStyle *</db:type>
<db:methodname>baseStyle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStyle * baseStyle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the proxy base style object. If no base style is set on the proxy style, <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link> will create an instance of the application style instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qproxystyle.xml#setBaseStyle">setBaseStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawComplexControl">
<db:title>[override virtual] void QProxyStyle::drawComplexControl(QStyle::ComplexControl <db:emphasis>control</db:emphasis>, const QStyleOptionComplex *<db:emphasis>option</db:emphasis>, QPainter *<db:emphasis>painter</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>drawComplexControl</db:methodname>
<db:methodparam>
<db:type>QStyle::ComplexControl</db:type>
<db:parameter>control</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOptionComplex *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawComplexControl(QStyle::ComplexControl control, const QStyleOptionComplex *option, QPainter *painter, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#drawComplexControl" role="function">QCommonStyle::drawComplexControl(QStyle::ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="drawControl">
<db:title>[override virtual] void QProxyStyle::drawControl(QStyle::ControlElement <db:emphasis>element</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis>, QPainter *<db:emphasis>painter</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>drawControl</db:methodname>
<db:methodparam>
<db:type>QStyle::ControlElement</db:type>
<db:parameter>element</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawControl(QStyle::ControlElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#drawControl" role="function">QCommonStyle::drawControl(QStyle::ControlElement element, const QStyleOption *opt, QPainter *p, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="drawItemPixmap">
<db:title>[override virtual] void QProxyStyle::drawItemPixmap(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>alignment</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>drawItemPixmap</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawItemPixmap(QPainter *painter, const QRect &amp;rect, int alignment, const QPixmap &amp;pixmap) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#drawItemPixmap" role="function">QStyle::drawItemPixmap(QPainter *painter, const QRect &amp;rectangle, int alignment, const QPixmap &amp;pixmap) const</db:link>.</db:para>
</db:section>
<db:section xml:id="drawItemText">
<db:title>[override virtual] void QProxyStyle::drawItemText(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QPalette &amp;<db:emphasis>pal</db:emphasis>, bool <db:emphasis>enabled</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QPalette::ColorRole <db:emphasis>textRole</db:emphasis> = QPalette::NoRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>drawItemText</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>pal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPalette::ColorRole</db:type>
<db:parameter>textRole</db:parameter>
<db:initializer>QPalette::NoRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawItemText(QPainter *painter, const QRect &amp;rect, int flags, const QPalette &amp;pal, bool enabled, const QString &amp;text, QPalette::ColorRole textRole) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#drawItemText" role="function">QStyle::drawItemText(QPainter *painter, const QRect &amp;rectangle, int alignment, const QPalette &amp;palette, bool enabled, const QString &amp;text, QPalette::ColorRole textRole) const</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPrimitive">
<db:title>[override virtual] void QProxyStyle::drawPrimitive(QStyle::PrimitiveElement <db:emphasis>element</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis>, QPainter *<db:emphasis>painter</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>drawPrimitive</db:methodname>
<db:methodparam>
<db:type>QStyle::PrimitiveElement</db:type>
<db:parameter>element</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPrimitive(QStyle::PrimitiveElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#drawPrimitive" role="function">QCommonStyle::drawPrimitive(QStyle::PrimitiveElement pe, const QStyleOption *opt, QPainter *p, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QProxyStyle::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="generatedIconPixmap">
<db:title>[override virtual] QPixmap QProxyStyle::generatedIconPixmap(QIcon::Mode <db:emphasis>iconMode</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QStyleOption *<db:emphasis>opt</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>generatedIconPixmap</db:methodname>
<db:methodparam>
<db:type>QIcon::Mode</db:type>
<db:parameter>iconMode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>opt</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &amp;pixmap, const QStyleOption *opt) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#generatedIconPixmap" role="function">QCommonStyle::generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &amp;pixmap, const QStyleOption *opt) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hitTestComplexControl">
<db:title>[override virtual] QStyle::SubControl QProxyStyle::hitTestComplexControl(QStyle::ComplexControl <db:emphasis>control</db:emphasis>, const QStyleOptionComplex *<db:emphasis>option</db:emphasis>, const QPoint &amp;<db:emphasis>pos</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QStyle::SubControl</db:type>
<db:methodname>hitTestComplexControl</db:methodname>
<db:methodparam>
<db:type>QStyle::ComplexControl</db:type>
<db:parameter>control</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOptionComplex *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStyle::SubControl hitTestComplexControl(QStyle::ComplexControl control, const QStyleOptionComplex *option, const QPoint &amp;pos, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#hitTestComplexControl" role="function">QCommonStyle::hitTestComplexControl(QStyle::ComplexControl cc, const QStyleOptionComplex *opt, const QPoint &amp;pt, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="itemPixmapRect">
<db:title>[override virtual] QRect QProxyStyle::itemPixmapRect(const QRect &amp;<db:emphasis>r</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>itemPixmapRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect itemPixmapRect(const QRect &amp;r, int flags, const QPixmap &amp;pixmap) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#itemPixmapRect" role="function">QStyle::itemPixmapRect(const QRect &amp;rectangle, int alignment, const QPixmap &amp;pixmap) const</db:link>.</db:para>
</db:section>
<db:section xml:id="itemTextRect">
<db:title>[override virtual] QRect QProxyStyle::itemTextRect(const QFontMetrics &amp;<db:emphasis>fm</db:emphasis>, const QRect &amp;<db:emphasis>r</db:emphasis>, int <db:emphasis>flags</db:emphasis>, bool <db:emphasis>enabled</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>itemTextRect</db:methodname>
<db:methodparam>
<db:type>const QFontMetrics &amp;</db:type>
<db:parameter>fm</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect itemTextRect(const QFontMetrics &amp;fm, const QRect &amp;r, int flags, bool enabled, const QString &amp;text) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#itemTextRect" role="function">QStyle::itemTextRect(const QFontMetrics &amp;metrics, const QRect &amp;rectangle, int alignment, bool enabled, const QString &amp;text) const</db:link>.</db:para>
</db:section>
<db:section xml:id="layoutSpacing">
<db:title>[override virtual] int QProxyStyle::layoutSpacing(QSizePolicy::ControlType <db:emphasis>control1</db:emphasis>, QSizePolicy::ControlType <db:emphasis>control2</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis> = nullptr, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>layoutSpacing</db:methodname>
<db:methodparam>
<db:type>QSizePolicy::ControlType</db:type>
<db:parameter>control1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSizePolicy::ControlType</db:type>
<db:parameter>control2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>option</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int layoutSpacing(QSizePolicy::ControlType control1, QSizePolicy::ControlType control2, Qt::Orientation orientation, const QStyleOption *option, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#layoutSpacing" role="function">QCommonStyle::layoutSpacing(QSizePolicy::ControlType control1, QSizePolicy::ControlType control2, Qt::Orientation orientation, const QStyleOption *option, const QWidget *widget) const</db:link>.</db:para>
<db:para>This slot is called by layoutSpacing() to determine the spacing that should be used between <db:code role="parameter">control1</db:code> and <db:code role="parameter">control2</db:code> in a layout. <db:code role="parameter">orientation</db:code> specifies whether the controls are laid out side by side or stacked vertically. The <db:code role="parameter">option</db:code> parameter can be used to pass extra information about the parent widget. The <db:code role="parameter">widget</db:code> parameter is optional and can also be used if <db:code role="parameter">option</db:code> is nullptr.</db:para>
<db:para>The default implementation returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml#combinedLayoutSpacing">combinedLayoutSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelMetric">
<db:title>[override virtual] int QProxyStyle::pixelMetric(QStyle::PixelMetric <db:emphasis>metric</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis> = nullptr, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>pixelMetric</db:methodname>
<db:methodparam>
<db:type>QStyle::PixelMetric</db:type>
<db:parameter>metric</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>option</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int pixelMetric(QStyle::PixelMetric metric, const QStyleOption *option, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#pixelMetric" role="function">QCommonStyle::pixelMetric(QStyle::PixelMetric m, const QStyleOption *opt, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="polish">
<db:title>[override virtual] void QProxyStyle::polish(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>polish</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void polish(QWidget *widget) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#polish-2" role="function">QCommonStyle::polish(QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="polish-1">
<db:title>[override virtual] void QProxyStyle::polish(QPalette &amp;<db:emphasis>pal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>polish</db:methodname>
<db:methodparam>
<db:type>QPalette &amp;</db:type>
<db:parameter>pal</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void polish(QPalette &amp;pal) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#polish" role="function">QCommonStyle::polish(QPalette &amp;pal)</db:link>.</db:para>
</db:section>
<db:section xml:id="polish-2">
<db:title>[override virtual] void QProxyStyle::polish(QApplication *<db:emphasis>app</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>polish</db:methodname>
<db:methodparam>
<db:type>QApplication *</db:type>
<db:parameter>app</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void polish(QApplication *app) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#polish-1" role="function">QCommonStyle::polish(QApplication *app)</db:link>.</db:para>
</db:section>
<db:section xml:id="setBaseStyle">
<db:title>void QProxyStyle::setBaseStyle(QStyle *<db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBaseStyle</db:methodname>
<db:methodparam>
<db:type>QStyle *</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBaseStyle(QStyle *style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the base style that should be proxied.</db:para>
<db:para>Ownership of <db:code role="parameter">style</db:code> is transferred to <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link>.</db:para>
<db:para>If style is nullptr, a desktop-dependent style will be assigned automatically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qproxystyle.xml#baseStyle">baseStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeFromContents">
<db:title>[override virtual] QSize QProxyStyle::sizeFromContents(QStyle::ContentsType <db:emphasis>type</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeFromContents</db:methodname>
<db:methodparam>
<db:type>QStyle::ContentsType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeFromContents(QStyle::ContentsType type, const QStyleOption *option, const QSize &amp;size, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#sizeFromContents" role="function">QCommonStyle::sizeFromContents(QStyle::ContentsType ct, const QStyleOption *opt, const QSize &amp;csz, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="standardIcon">
<db:title>[override virtual] QIcon QProxyStyle::standardIcon(QStyle::StandardPixmap <db:emphasis>standardIcon</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis> = nullptr, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QIcon</db:type>
<db:methodname>standardIcon</db:methodname>
<db:methodparam>
<db:type>QStyle::StandardPixmap</db:type>
<db:parameter>standardIcon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>option</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIcon standardIcon(QStyle::StandardPixmap standardIcon, const QStyleOption *option, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#standardIcon" role="function">QStyle::standardIcon(QStyle::StandardPixmap standardIcon, const QStyleOption *option, const QWidget *widget) const</db:link>.</db:para>
<db:para>Returns an icon for the given <db:code role="parameter">standardIcon</db:code>.</db:para>
<db:para>Reimplement this slot to provide your own icons in a <db:link xlink:href="qstyle.xml">QStyle</db:link> subclass. The <db:code role="parameter">option</db:code> argument can be used to pass extra information required to find the appropriate icon. The <db:code role="parameter">widget</db:code> argument is optional and can also be used to help find the icon.</db:para>
</db:section>
<db:section xml:id="standardPalette">
<db:title>[override virtual] QPalette QProxyStyle::standardPalette() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPalette</db:type>
<db:methodname>standardPalette</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPalette standardPalette() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#standardPalette" role="function">QStyle::standardPalette() const</db:link>.</db:para>
</db:section>
<db:section xml:id="standardPixmap">
<db:title>[override virtual] QPixmap QProxyStyle::standardPixmap(QStyle::StandardPixmap <db:emphasis>standardPixmap</db:emphasis>, const QStyleOption *<db:emphasis>opt</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>standardPixmap</db:methodname>
<db:methodparam>
<db:type>QStyle::StandardPixmap</db:type>
<db:parameter>standardPixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>opt</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap standardPixmap(QStyle::StandardPixmap standardPixmap, const QStyleOption *opt, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#standardPixmap" role="function">QCommonStyle::standardPixmap(QStyle::StandardPixmap sp, const QStyleOption *option, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="styleHint">
<db:title>[override virtual] int QProxyStyle::styleHint(QStyle::StyleHint <db:emphasis>hint</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis> = nullptr, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr, QStyleHintReturn *<db:emphasis>returnData</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>styleHint</db:methodname>
<db:methodparam>
<db:type>QStyle::StyleHint</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>option</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QStyleHintReturn *</db:type>
<db:parameter>returnData</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int styleHint(QStyle::StyleHint hint, const QStyleOption *option, const QWidget *widget, QStyleHintReturn *returnData) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#styleHint" role="function">QCommonStyle::styleHint(QStyle::StyleHint sh, const QStyleOption *opt, const QWidget *widget, QStyleHintReturn *hret) const</db:link>.</db:para>
</db:section>
<db:section xml:id="subControlRect">
<db:title>[override virtual] QRect QProxyStyle::subControlRect(QStyle::ComplexControl <db:emphasis>cc</db:emphasis>, const QStyleOptionComplex *<db:emphasis>option</db:emphasis>, QStyle::SubControl <db:emphasis>sc</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>subControlRect</db:methodname>
<db:methodparam>
<db:type>QStyle::ComplexControl</db:type>
<db:parameter>cc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOptionComplex *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStyle::SubControl</db:type>
<db:parameter>sc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect subControlRect(QStyle::ComplexControl cc, const QStyleOptionComplex *option, QStyle::SubControl sc, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#subControlRect" role="function">QCommonStyle::subControlRect(QStyle::ComplexControl cc, const QStyleOptionComplex *opt, QStyle::SubControl sc, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="subElementRect">
<db:title>[override virtual] QRect QProxyStyle::subElementRect(QStyle::SubElement <db:emphasis>element</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>subElementRect</db:methodname>
<db:methodparam>
<db:type>QStyle::SubElement</db:type>
<db:parameter>element</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect subElementRect(QStyle::SubElement element, const QStyleOption *option, const QWidget *widget) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#subElementRect" role="function">QCommonStyle::subElementRect(QStyle::SubElement sr, const QStyleOption *opt, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="unpolish">
<db:title>[override virtual] void QProxyStyle::unpolish(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>unpolish</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unpolish(QWidget *widget) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#unpolish" role="function">QCommonStyle::unpolish(QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="unpolish-1">
<db:title>[override virtual] void QProxyStyle::unpolish(QApplication *<db:emphasis>app</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>unpolish</db:methodname>
<db:methodparam>
<db:type>QApplication *</db:type>
<db:parameter>app</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void unpolish(QApplication *app) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcommonstyle.xml#unpolish-1" role="function">QCommonStyle::unpolish(QApplication *application)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
