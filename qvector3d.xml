<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVector3D Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvector3d.xml">QVector3D</db:link> class represents a vector or vertex in 3D space.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVector3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVector3D is part of <db:simplelist><db:member><db:link xlink:href="painting-3d.xml">Rendering in 3D</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Vectors are one of the main building blocks of 3D representation and drawing. They consist of three coordinates, traditionally called x, y, and z.</db:para>
<db:para>The <db:link xlink:href="qvector3d.xml">QVector3D</db:link> class can also be used to represent vertices in 3D space. We therefore do not need to provide a separate vertex class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml">QVector2D</db:link></db:member>
<db:member><db:link xlink:href="qvector4d.xml">QVector4D</db:link></db:member>
<db:member><db:link xlink:href="qquaternion.xml">QQuaternion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVector3D">
<db:title>QVector3D::QVector3D()</db:title>
<db:para>Constructs a null vector, i.e. with coordinates (0, 0, 0).</db:para>
</db:section>
<db:section xml:id="QVector3D-1">
<db:title>[explicit] QVector3D::QVector3D(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Constructs a vector with x and y coordinates from a 2D <db:code role="parameter">point</db:code>, and a z coordinate of 0.</db:para>
</db:section>
<db:section xml:id="QVector3D-2">
<db:title>[explicit] QVector3D::QVector3D(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Constructs a vector with x and y coordinates from a 2D <db:code role="parameter">point</db:code>, and a z coordinate of 0.</db:para>
</db:section>
<db:section xml:id="QVector3D-3">
<db:title>QVector3D::QVector3D(const QVector2D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Constructs a 3D vector from the specified 2D <db:code role="parameter">vector</db:code>. The z coordinate is set to zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#toVector2D">toVector2D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QVector3D-4">
<db:title>[explicit] QVector3D::QVector3D(const QVector4D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Constructs a 3D vector from the specified 4D <db:code role="parameter">vector</db:code>. The w coordinate is dropped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#toVector4D">toVector4D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QVector3D-5">
<db:title>QVector3D::QVector3D(const QVector2D &amp;<db:emphasis>vector</db:emphasis>, float <db:emphasis>zpos</db:emphasis>)</db:title>
<db:para>Constructs a 3D vector from the specified 2D <db:code role="parameter">vector</db:code>. The z coordinate is set to <db:code role="parameter">zpos</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#toVector2D">toVector2D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QVector3D-6">
<db:title>QVector3D::QVector3D(float <db:emphasis>xpos</db:emphasis>, float <db:emphasis>ypos</db:emphasis>, float <db:emphasis>zpos</db:emphasis>)</db:title>
<db:para>Constructs a vector with coordinates (<db:code role="parameter">xpos</db:code>, <db:code role="parameter">ypos</db:code>, <db:code role="parameter">zpos</db:code>).</db:para>
</db:section>
<db:section xml:id="crossProduct">
<db:title>[static] QVector3D QVector3D::crossProduct(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Returns the cross-product of vectors <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>, which corresponds to the normal vector of a plane defined by <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#normal">normal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="distanceToLine">
<db:title>float QVector3D::distanceToLine(const QVector3D &amp;<db:emphasis>point</db:emphasis>, const QVector3D &amp;<db:emphasis>direction</db:emphasis>) const</db:title>
<db:para>Returns the distance that this vertex is from a line defined by <db:code role="parameter">point</db:code> and the unit vector <db:code role="parameter">direction</db:code>.</db:para>
<db:para>If <db:code role="parameter">direction</db:code> is a null vector, then it does not define a line. In that case, the distance from <db:code role="parameter">point</db:code> to this vertex is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#distanceToPlane">distanceToPlane</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="distanceToPlane">
<db:title>float QVector3D::distanceToPlane(const QVector3D &amp;<db:emphasis>plane</db:emphasis>, const QVector3D &amp;<db:emphasis>normal</db:emphasis>) const</db:title>
<db:para>Returns the distance from this vertex to a plane defined by the vertex <db:code role="parameter">plane</db:code> and a <db:code role="parameter">normal</db:code> unit vector. The <db:code role="parameter">normal</db:code> parameter is assumed to have been normalized to a unit vector.</db:para>
<db:para>The return value will be negative if the vertex is below the plane, or zero if it is on the plane.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#normal">normal</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#distanceToLine">distanceToLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="distanceToPlane-1">
<db:title>float QVector3D::distanceToPlane(const QVector3D &amp;<db:emphasis>plane1</db:emphasis>, const QVector3D &amp;<db:emphasis>plane2</db:emphasis>, const QVector3D &amp;<db:emphasis>plane3</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the distance from this vertex a plane defined by the vertices <db:code role="parameter">plane1</db:code>, <db:code role="parameter">plane2</db:code> and <db:code role="parameter">plane3</db:code>.</db:para>
<db:para>The return value will be negative if the vertex is below the plane, or zero if it is on the plane.</db:para>
<db:para>The two vectors that define the plane are <db:code role="parameter">plane2</db:code> - <db:code role="parameter">plane1</db:code> and <db:code role="parameter">plane3</db:code> - <db:code role="parameter">plane1</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#normal">normal</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#distanceToLine">distanceToLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="distanceToPoint">
<db:title>[since 5.1] float QVector3D::distanceToPoint(const QVector3D &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns the distance from this vertex to a point defined by the vertex <db:code role="parameter">point</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#distanceToPlane">distanceToPlane</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#distanceToLine">distanceToLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dotProduct">
<db:title>[static] float QVector3D::dotProduct(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Returns the dot product of <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QVector3D::isNull() const</db:title>
<db:para>Returns <db:code>true</db:code> if the x, y, and z coordinates are set to 0.0, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>float QVector3D::length() const</db:title>
<db:para>Returns the length of the vector from the origin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#lengthSquared">lengthSquared</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lengthSquared">
<db:title>float QVector3D::lengthSquared() const</db:title>
<db:para>Returns the squared length of the vector from the origin. This is equivalent to the dot product of the vector with itself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#dotProduct">dotProduct</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normal">
<db:title>[static] QVector3D QVector3D::normal(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Returns the normal vector of a plane defined by vectors <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>, normalized to be a unit vector.</db:para>
<db:para>Use <db:link xlink:href="qvector3d.xml#crossProduct">crossProduct</db:link>() to compute the cross-product of <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code> if you do not need the result to be normalized to a unit vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#crossProduct">crossProduct</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#distanceToPlane">distanceToPlane</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normal-1">
<db:title>[static] QVector3D QVector3D::normal(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>, const QVector3D &amp;<db:emphasis>v3</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the normal vector of a plane defined by vectors <db:code role="parameter">v2</db:code> - <db:code role="parameter">v1</db:code> and <db:code role="parameter">v3</db:code> - <db:code role="parameter">v1</db:code>, normalized to be a unit vector.</db:para>
<db:para>Use <db:link xlink:href="qvector3d.xml#crossProduct">crossProduct</db:link>() to compute the cross-product of <db:code role="parameter">v2</db:code> - <db:code role="parameter">v1</db:code> and <db:code role="parameter">v3</db:code> - <db:code role="parameter">v1</db:code> if you do not need the result to be normalized to a unit vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#crossProduct">crossProduct</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#distanceToPlane">distanceToPlane</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalize">
<db:title>void QVector3D::normalize()</db:title>
<db:para>Normalizes the currect vector in place. Nothing happens if this vector is a null vector or the length of the vector is very close to 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalized">
<db:title>QVector3D QVector3D::normalized() const</db:title>
<db:para>Returns the normalized unit vector form of this vector.</db:para>
<db:para>If this vector is null, then a null vector is returned. If the length of the vector is very close to 1, then the vector will be returned as-is. Otherwise the normalized form of the vector of length 1 will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#normalize">normalize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="project">
<db:title>[since 5.5] QVector3D QVector3D::project(const QMatrix4x4 &amp;<db:emphasis>modelView</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>projection</db:emphasis>, const QRect &amp;<db:emphasis>viewport</db:emphasis>) const</db:title>
<db:para>Returns the window coordinates of this vector initially in object/model coordinates using the model view matrix <db:code role="parameter">modelView</db:code>, the projection matrix <db:code role="parameter">projection</db:code> and the viewport dimensions <db:code role="parameter">viewport</db:code>.</db:para>
<db:para>When transforming from clip to normalized space, a division by the w component on the vector components takes place. To prevent dividing by 0 if w equals to 0, it is set to 1.</db:para>
<db:note>
<db:para>the returned y coordinates are in OpenGL orientation. OpenGL expects the bottom to be 0 whereas for Qt top is 0.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#unproject">unproject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setX">
<db:title>void QVector3D::setX(float <db:emphasis>x</db:emphasis>)</db:title>
<db:para>Sets the x coordinate of this point to the given <db:code role="parameter">x</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#setZ">setZ</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setY">
<db:title>void QVector3D::setY(float <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the y coordinate of this point to the given <db:code role="parameter">y</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#setZ">setZ</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setZ">
<db:title>void QVector3D::setZ(float <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Sets the z coordinate of this point to the given <db:code role="parameter">z</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#z">z</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#setY">setY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPoint">
<db:title>QPoint QVector3D::toPoint() const</db:title>
<db:para>Returns the <db:link xlink:href="qpoint.xml">QPoint</db:link> form of this 3D vector. The z coordinate is dropped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#toPointF">toPointF</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#toVector2D">toVector2D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPointF">
<db:title>QPointF QVector3D::toPointF() const</db:title>
<db:para>Returns the <db:link xlink:href="qpointf.xml">QPointF</db:link> form of this 3D vector. The z coordinate is dropped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#toPoint">toPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#toVector2D">toVector2D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toVector2D">
<db:title>QVector2D QVector3D::toVector2D() const</db:title>
<db:para>Returns the 2D vector form of this 3D vector, dropping the z coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#toVector4D">toVector4D</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#toPoint">toPoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toVector4D">
<db:title>QVector4D QVector3D::toVector4D() const</db:title>
<db:para>Returns the 4D form of this 3D vector, with the w coordinate set to zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#toVector2D">toVector2D</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#toPoint">toPoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unproject">
<db:title>[since 5.5] QVector3D QVector3D::unproject(const QMatrix4x4 &amp;<db:emphasis>modelView</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>projection</db:emphasis>, const QRect &amp;<db:emphasis>viewport</db:emphasis>) const</db:title>
<db:para>Returns the object/model coordinates of this vector initially in window coordinates using the model view matrix <db:code role="parameter">modelView</db:code>, the projection matrix <db:code role="parameter">projection</db:code> and the viewport dimensions <db:code role="parameter">viewport</db:code>.</db:para>
<db:para>When transforming from clip to normalized space, a division by the w component of the vector components takes place. To prevent dividing by 0 if w equals to 0, it is set to 1.</db:para>
<db:note>
<db:para>y coordinates in <db:code role="parameter">viewport</db:code> should use OpenGL orientation. OpenGL expects the bottom to be 0 whereas for Qt top is 0.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#project">project</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>float QVector3D::x() const</db:title>
<db:para>Returns the x coordinate of this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#z">z</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>float QVector3D::y() const</db:title>
<db:para>Returns the y coordinate of this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#z">z</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="z">
<db:title>float QVector3D::z() const</db:title>
<db:para>Returns the z coordinate of this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#setZ">setZ</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qvector3d.xml#y">y</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QVector3D::operator QVariant() const</db:title>
<db:para>Returns the 3D vector as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>QVector3D &amp;QVector3D::operator*=(float <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Multiplies this vector's coordinates by the given <db:code role="parameter">factor</db:code>, and returns a reference to this vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator-2f-eq">operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-eq-1">
<db:title>QVector3D &amp;QVector3D::operator*=(const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies the components of this vector by the corresponding components in <db:code role="parameter">vector</db:code>.</db:para>
<db:para>Note: this is not the same as the <db:link xlink:href="qvector3d.xml#crossProduct">crossProduct</db:link>() of this vector and <db:code role="parameter">vector</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#crossProduct">crossProduct</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QVector3D &amp;QVector3D::operator+=(const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">vector</db:code> to this vector and returns a reference to this vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QVector3D &amp;QVector3D::operator-=(const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Subtracts the given <db:code role="parameter">vector</db:code> from this vector and returns a reference to this vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-eq">
<db:title>[since 5.5] QVector3D &amp;QVector3D::operator/=(const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Divides the components of this vector by the corresponding components in <db:code role="parameter">vector</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator-2a-eq">operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-eq-1">
<db:title>QVector3D &amp;QVector3D::operator/=(float <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Divides this vector's coordinates by the given <db:code role="parameter">divisor</db:code>, and returns a reference to this vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator-2a-eq">operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>[since 5.2] float &amp;QVector3D::operator[](int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Returns the component of the vector at index position <db:code role="parameter">i</db:code> as a modifiable reference.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the vector (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; 3).</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>[since 5.2] float QVector3D::operator[](int <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>Returns the component of the vector at index position <db:code role="parameter">i</db:code>.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the vector (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; 3).</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qFuzzyCompare-1">
<db:title>bool qFuzzyCompare(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code> are equal, allowing for a small fuzziness factor for floating-point comparisons; false otherwise.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">v1</db:code> is not equal to <db:code role="parameter">v2</db:code>; otherwise returns <db:code>false</db:code>. This operator uses an exact floating-point comparison.</db:para>
</db:section>
<db:section xml:id="operator-2a-5">
<db:title>const QVector3D operator*(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Multiplies the components of <db:code role="parameter">v1</db:code> by the corresponding components in <db:code role="parameter">v2</db:code>.</db:para>
<db:para>Note: this is not the same as the <db:link xlink:href="qvector3d.xml#crossProduct">crossProduct</db:link>() of <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#crossProduct">QVector3D::crossProduct</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-6">
<db:title>const QVector3D operator*(const QVector3D &amp;<db:emphasis>vector</db:emphasis>, float <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">vector</db:code>, multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator-2a-eq">QVector3D::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-7">
<db:title>const QVector3D operator*(float <db:emphasis>factor</db:emphasis>, const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">vector</db:code>, multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator-2a-eq">QVector3D::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>const QVector3D operator+(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qvector3d.xml">QVector3D</db:link> object that is the sum of the given vectors, <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>; each component is added separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator-2b-eq">QVector3D::operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--2">
<db:title>const QVector3D operator-(const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qvector3d.xml">QVector3D</db:link> object that is formed by changing the sign of all three components of the given <db:code role="parameter">vector</db:code>.</db:para>
<db:para>Equivalent to <db:code>QVector3D(0,0,0) - vector</db:code>.</db:para>
</db:section>
<db:section xml:id="operator--3">
<db:title>const QVector3D operator-(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qvector3d.xml">QVector3D</db:link> object that is formed by subtracting <db:code role="parameter">v2</db:code> from <db:code role="parameter">v1</db:code>; each component is subtracted separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator--eq">QVector3D::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-2">
<db:title>[since 5.5] const QVector3D operator/(const QVector3D &amp;<db:emphasis>vector</db:emphasis>, const QVector3D &amp;<db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qvector3d.xml">QVector3D</db:link> object formed by dividing components of the given <db:code role="parameter">vector</db:code> by a respective components of the given <db:code role="parameter">divisor</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator-2f-eq">QVector3D::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-3">
<db:title>const QVector3D operator/(const QVector3D &amp;<db:emphasis>vector</db:emphasis>, float <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qvector3d.xml">QVector3D</db:link> object formed by dividing all three components of the given <db:code role="parameter">vector</db:code> by the given <db:code role="parameter">divisor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml#operator-2f-eq">QVector3D::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-22">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">vector</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QVector3D &amp;<db:emphasis>v1</db:emphasis>, const QVector3D &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">v1</db:code> is equal to <db:code role="parameter">v2</db:code>; otherwise returns <db:code>false</db:code>. This operator uses an exact floating-point comparison.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-22">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Reads a 3D vector from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">vector</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
