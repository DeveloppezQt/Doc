<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_add_translations</db:title>
<db:productname>QtLinguist</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Linguist Manual</db:titleabbrev>
<db:abstract>
<db:para>Add targets to update and transform Qt Linguist .ts files into .qm files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-add-translations"/>
<db:para>Add targets to update and transform Qt Linguist .ts files into .qm files.</db:para>
<db:para>The command is defined in the <db:code>LinguistTools</db:code> component of the <db:code>Qt6</db:code> package. Load the package with:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS LinguistTools)
</db:programlisting>
<db:para>This command was introduced in Qt 6.2.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:para>Since Qt 6.7:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_translations([target]
                    [TARGETS target1 [target2...]]
                    [SOURCE_TARGETS target1 [target2...]]
                    [TS_FILE_BASE name]
                    [TS_FILE_DIR directory]
                    [TS_FILES file1.ts [file2.ts ...]]
                    [PLURALS_TS_FILE file.ts]
                    [NO_GENERATE_PLURALS_TS_FILE]
                    [RESOURCE_PREFIX prefix]
                    [OUTPUT_TARGETS variable-name]
                    [QM_FILES_OUTPUT_VARIABLE variable-name]
                    [SOURCES source1.cpp [sources2.cpp ...]]
                    [INCLUDE_DIRECTORIES directory1 [directory2 ...]]
                    [LUPDATE_TARGET target-name]
                    [LUPDATE_OPTIONS ...]
                    [LRELEASE_TARGET target-name]
                    [LRELEASE_OPTIONS ...]
                    [IMMEDIATE_CALL])
</db:programlisting>
<db:para>Since Qt 6.2 (deprecated):</db:para>
<db:programlisting language="cpp" role="bad">qt_add_translations(target TS_FILES file1.ts [file2.ts ...]
                    [RESOURCE_PREFIX prefix]
                    [OUTPUT_TARGETS variable-name]
                    [QM_FILES_OUTPUT_VARIABLE variable-name]
                    [SOURCES source1.cpp [sources2.cpp ...]]
                    [INCLUDE_DIRECTORIES directory1 [directory2 ...]]
                    [LUPDATE_OPTIONS ...]
                    [LRELEASE_OPTIONS ...])
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use <db:code>qt6_add_translations()</db:code> instead. It supports the same set of arguments as this command.</db:para>
<db:warning>
<db:para>Calling <db:code>qt_add_translations</db:code> in a directory scope different than the target directory scope requires at least CMake version 3.18.</db:para>
</db:warning>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Creates targets for updating Qt Linguist <db:code>.ts</db:code> files and for transforming them into <db:code>.qm</db:code> files. This function is a convenience wrapper around <db:link xlink:href="qtlinguist-cmake-qt-add-lupdate.xml#qt6-add-lupdate">qt_add_lupdate</db:link> and <db:link xlink:href="qtlinguist-cmake-qt-add-lrelease.xml#qt6-add-lrelease">qt_add_lrelease</db:link> and aims to offer the most common usage of both functions with one call.</db:para>
<db:para>The parameter <db:code>TARGETS</db:code> specifies a list of targets that intend to load the generated <db:code>.qm</db:code> files at run time. If there's only one such target, you may directly pass the target's name as the first argument.</db:para>
<db:para>The parameter <db:code>SOURCE_TARGETS</db:code> specifies a list of executable or library targets that contain sources with translatable strings. From the sources of these targets, <db:code>.ts</db:code> files will be created.</db:para>
<db:para>If <db:code>SOURCE_TARGETS</db:code> is not given, targets are automatically gathered by calling <db:link xlink:href="qtlinguist-cmake-qt-collect-targets-for-translation.xml#qt6-collect-translation-source-targets">qt_collect_translation_source_targets</db:link> at the end of the directory scope of <db:code>PROJECT_SOURCE_DIR</db:code>. This functionality requires CMake 3.19 or newer. This functionality can be turned off with the argument <db:code>IMMEDIATE_CALL</db:code>.</db:para>
<db:para>This function will create the target <db:code>update_translations</db:code> that scans all source files with <db:code>lupdate</db:code> and creates and updates the <db:code>.ts</db:code> files.</db:para>
<db:para>This function will create the target <db:code>release_translations</db:code> that generates the <db:code>.qm</db:code> files from the <db:code>.ts</db:code> files. This target is built by default.</db:para>
<db:para>The <db:code>.ts</db:code> files may be specified with the argument <db:code>TS_FILES</db:code>, but it's more convenient to let <db:code>qt_add_translations</db:code> figure out the file paths automatically. See <db:link xlink:href="qtlinguist-cmake-qt-add-translations.xml#automatic-determination-of-ts-file-paths">Automatic Determination of .ts File Paths</db:link> for details.</db:para>
</db:section>
<db:section xml:id="sources-and-include-directories">
<db:title>Sources and Include Directories</db:title>
<db:para>With <db:code>SOURCES</db:code> you can explicitly specify additional source files that contain translatable strings.</db:para>
<db:para>You can use <db:code>INCLUDE_DIRECTORIES</db:code> to explicitly specify include directories for those source files.</db:para>
</db:section>
<db:section xml:id="automatic-determination-of-ts-file-paths">
<db:title>Automatic Determination of .ts File Paths</db:title>
<db:para>The paths of the <db:code>.ts</db:code> files that are used as input for <db:code>qt_add_translations</db:code> can be automatically determined if <db:link xlink:href="cmake-variable-qt-i18n-languages.xml">QT_I18N_TRANSLATED_LANGUAGES</db:link> has been set. This variable can be conveniently set with <db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup</db:link>.</db:para>
<db:para>The following project setup is usually enough:</db:para>
<db:programlisting language="cpp">project(myproject)
cmake_minimum_required(VERSION 3.19)
qt_standard_project_setup(I18N_TRANSLATED_LANGUAGES de fr)

add_subdirectory(libs)
add_subdirectory(apps)

qt_add_translations(TARGETS myapp)
</db:programlisting>
<db:para>This will create the files <db:code>myproject_de.ts</db:code> and <db:code>myproject_fr.ts</db:code> in the project's source directory.</db:para>
<db:para>By default, the <db:code>.ts</db:code> files are created in <db:code>CMAKE_CURRENT_SOURCE_DIR</db:code>. You can change the location by passing a different directory with the <db:code>TS_FILE_DIR</db:code> argument.</db:para>
<db:para>By default, the <db:code>.ts</db:code> file names are constructed from <db:code>PROJECT_NAME</db:code>. You can specify a different base name with the <db:code>TS_FILE_BASE</db:code> argument.</db:para>
</db:section>
<db:section xml:id="plural-forms">
<db:title>Plural Forms</db:title>
<db:para><db:link xlink:href="cmake-variable-qt-i18n-native-language.xml">QT_I18N_SOURCE_LANGUAGE</db:link> specifies the language in which the source code strings are written. For handling plural forms correctly, create an additional <db:code>.ts</db:code> file for that language that only contains translatable strings for plural forms. See <db:link xlink:href="i18n-source-translation.xml#handle-plural-forms">Handle Plural Forms</db:link> for details.</db:para>
<db:para>With <db:code>PLURALS_TS_FILE</db:code> you can specify the <db:code>.ts</db:code> file for the source language. This file will only contain plural forms.</db:para>
<db:para>A plurals-only <db:code>.ts</db:code> is automatically generated unless the option <db:code>NO_GENERATE_PLURALS_TS_FILE</db:code> is specified.</db:para>
<db:para>For example,</db:para>
<db:programlisting language="cpp" role="bad">project(myapp)
qt_standard_project_setup(
    I18N_SOURCE_LANGUAGE en         # optional - this is the default
    I18N_TRANSLATED_LANGUAGES de
)
qt_add_executable(myapp ...)
...
qt_add_translations(myapp)
</db:programlisting>
<db:para>creates the full translation file <db:code>myapp_de.ts</db:code> and the plurals-only file <db:code>myapp_en.ts</db:code>.</db:para>
<db:para>If you need a full translation of the source language, add it to <db:link xlink:href="cmake-variable-qt-i18n-languages.xml">QT_I18N_TRANSLATED_LANGUAGES</db:link></db:para>
<db:para>For example,</db:para>
<db:programlisting language="cpp" role="bad">project(myapp)
qt_standard_project_setup(I18N_TRANSLATED_LANGUAGES en de)
qt_add_executable(myapp ...)
...
qt_add_translations(myapp)
</db:programlisting>
<db:para>creates the full translation files</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>myapp_en.ts</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>myapp_de.ts</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="options">
<db:title>Options</db:title>
<db:para>You can specify the name of the custom target that calls lupdate with the <db:code>LUPDATE_TARGET</db:code> option. Likewise, <db:code>LRELEASE_TARGET</db:code> controls the name of the custom target that drives the call to <db:code>lrelease</db:code>.</db:para>
<db:para>You can set additional options for <db:link xlink:href="linguist-lupdate.xml#lupdate">lupdate</db:link> and <db:link xlink:href="linguist-lrelease.xml#lrelease">lrelease</db:link> with <db:code>LUPDATE_OPTIONS</db:code> and <db:code>LRELEASE_OPTIONS</db:code>. You can find possible options in the <db:link xlink:href="linguist-lupdate.xml#lupdate-options">lupdate options</db:link> and <db:link xlink:href="linguist-lrelease.xml#lrelease-options">lrelease options</db:link>.</db:para>
<db:para>For example, to use <db:link xlink:href="linguist-id-based-i18n.xml">ID based translations</db:link>, you need to pass <db:code>LRELEASE_OPTIONS -idbased</db:code> to <db:code>qt_add_translations</db:code>.</db:para>
<db:para>By default, the <db:code>.qm</db:code> files will be placed in the current build directory (<db:code>CMAKE_CURRENT_BINARY_DIR</db:code>). To change this, you can set <db:code>OUTPUT_LOCATION</db:code> as a property of the source <db:code>.ts</db:code> file.</db:para>
<db:para>For example, with the following code, the <db:code>.qm</db:code> files are generated in a <db:code>translations</db:code> directory below the current build directory.</db:para>
<db:programlisting language="cpp">set_source_files_properties(app_en.ts app_de.ts
    PROPERTIES OUTPUT_LOCATION &quot;${CMAKE_CURRENT_BINARY_DIR}/translations&quot;)
</db:programlisting>
</db:section>
<db:section xml:id="embedding-generated-qm-files-in-resources">
<db:title>Embedding Generated .qm Files in Resources</db:title>
<db:para>By default, the generated <db:code>.qm</db:code> files are embedded in a Qt resource that will be linked into the targets passed with <db:code>TARGETS</db:code>. The files in the resource are accessible under the resource prefix <db:code>&quot;/i18n&quot;</db:code>.</db:para>
<db:para>You can set the resource prefix with <db:code>RESOURCE_PREFIX</db:code>.</db:para>
<db:para>In a static Qt build, when a resource target is created, additional targets can be created. You can instruct <db:code>qt_add_translations</db:code> to store these targets in a variable, by passing <db:code>OUTPUT_TARGETS &lt;variable-name&gt;</db:code>.</db:para>
<db:para>If <db:code>OUTPUT_TARGETS</db:code> is used, either <db:code>IMMEDIATE_CALL</db:code> or <db:code>SOURCE_TARGETS</db:code> must be specified.</db:para>
<db:para>The automatic resource embedding can be turned off by giving the <db:code>QM_FILES_OUTPUT_VARIABLE</db:code> option, followed by the name of a variable in which the command should store the list of generated <db:code>.qm</db:code> files.</db:para>
</db:section>
<db:section xml:id="qt-add-translations-before-qt-6-7">
<db:title><db:code>qt_add_translations</db:code> before Qt 6.7</db:title>
<db:para>Before Qt 6.7, this command accepted only one target as the first argument. This target was used for both, extracting translatable sources and embedding <db:code>.qm</db:code> files.</db:para>
<db:para>Since Qt 6.7, the target in the first argument is not used for source extraction anymore.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Add a German and a French translation to the target <db:code>frogger</db:code> using <db:code>qt_add_translations</db:code>:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.28)
project(frogger)
find_package(Qt6 COMPONENTS OpenGLWidgets)
qt_standard_project_setup(I18N_TRANSLATED_LANGUAGES de fr)

# The CMake files in the 'src' subdirectory create
# the targets 'frogger_game' and 'frogger_level_editor'.
add_subdirectory(src)

# Add translations to the 'frogger_game' target.
qt_add_translations(frogger_game)
</db:programlisting>
<db:para>This will create the <db:code>.ts</db:code> files <db:code>frogger_de.ts</db:code> and <db:code>frogger_fr.ts</db:code> in the source directory. <db:link xlink:href="linguist-lupdate.xml#lupdate">lupdate</db:link> sees the source files of all targets that are eligible for translation, according to the rules of <db:link xlink:href="qtlinguist-cmake-qt-collect-targets-for-translation.xml">qt_collect_translation_source_targets</db:link>.</db:para>
<db:para>The <db:code>.qm</db:code> files that are created from the <db:code>.ts</db:code> files are embedded in the <db:code>frogger_game</db:code> target under the resource prefix <db:code>&quot;i18n&quot;</db:code>.</db:para>
<db:para>The <db:code>qt_add_translations</db:code> call in the above example is roughly equivalent to the following:</db:para>
<db:programlisting language="cpp">qt_collect_translation_source_targets(i18n_targets)
qt_add_lupdate(
    SOURCE_TARGETS ${i18n_targets}
    TS_FILES frogger_de.ts frogger_fr.ts)
qt_add_lrelease(
    TS_FILES frogger_de.ts frogger_fr.ts
    QM_FILES_OUTPUT_VARIABLE qm_files)
qt_add_resources(frogger_game &quot;translations&quot;
    PREFIX &quot;/i18n&quot;
    BASE &quot;${CMAKE_CURRENT_BINARY_DIR}&quot;
    FILES &quot;${qm_files}&quot;
)
</db:programlisting>
<db:section xml:id="excluding-directories-targets-and-sources">
<db:title>Excluding directories, targets, and sources</db:title>
<db:para>You can exclude targets and directories from the automatic collection of source targets. The following excludes the target <db:code>helper_lib</db:code> and everything under the <db:code>tests</db:code> directory. See the <db:link xlink:href="cmake-directory-property-qt-exclude-from-translation.xml">directory property QT_EXCLUDE_FROM_TRANSLATION</db:link> and the <db:link xlink:href="cmake-target-property-qt-exclude-from-translation.xml">target property QT_EXCLUDE_FROM_TRANSLATION</db:link>.</db:para>
<db:programlisting language="cpp" role="bad"># &amp;lt;project_root&amp;gt;/CMakeLists.txt
qt_add_translations(frogger_game)
</db:programlisting>
<db:programlisting language="cpp" role="bad"># &amp;lt;project_root&amp;gt;/src/helper_lib/CMakeLists.txt
qt_add_library(helper_lib STATIC helpers.cpp)
set_property(TARGET helper_lib PROPERTY QT_EXCLUDE_FROM_TRANSLATION ON)
</db:programlisting>
<db:programlisting language="cpp" role="bad"># &amp;lt;project_root&amp;gt;/tests/CMakeLists.txt
add_subdirectory(behavior_tests)
add_subdirectory(physics_tests)
set_directory_properties(PROPERTIES QT_EXCLUDE_FROM_TRANSLATION ON)
</db:programlisting>
<db:para>In the following example, we exclude source files that are part of the <db:code>frogger_game</db:code> target using the <db:link xlink:href="cmake-target-property-qt-exclude-sources-from-translation.xml">QT_EXCLUDE_SOURCES_FROM_TRANSLATION</db:link> target property:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_executable(frogger_game
    main.cpp
    3rdparty/jumpsim.cpp
    3rdparty/frogmath.cpp
)
set_property(TARGET frogger_game
    PROPERTY QT_EXCLUDE_SOURCES_FROM_TRANSLATION &quot;3rdparty/*&quot;
)
</db:programlisting>
</db:section>
<db:section xml:id="explicit-specification-of-source-targets">
<db:title>Explicit specification of source targets</db:title>
<db:para>If you don't want to use the automatic collection of source targets you can specify the source targets explicitly:</db:para>
<db:programlisting language="cpp">qt_add_translations(frogger_game
    SOURCE_TARGETS frogger_game
)
</db:programlisting>
</db:section>
<db:section xml:id="custom-resource-prefix">
<db:title>Custom resource prefix</db:title>
<db:para>Now, let's embed the <db:code>.qm</db:code> files in <db:code>frogger_game</db:code> and <db:code>frogger_level_editor</db:code> and set a custom resource prefix.</db:para>
<db:programlisting language="cpp">qt_add_translations(
    TARGETS frogger_game frogger_level_editor
    RESOURCE_PREFIX &quot;/translations&quot;
)
</db:programlisting>
</db:section>
<db:section xml:id="installing-qm-files">
<db:title>Installing .qm files</db:title>
<db:para>Instead of embedding the <db:code>.qm</db:code> files we can install them as regular files:</db:para>
<db:programlisting language="cpp">qt_add_translations(
    TARGETS frogger_game frogger_level_editor
    QM_FILES_OUTPUT_VARIABLE qm_files
)
install(FILES ${qm_files} DESTINATION &quot;translations&quot;)
</db:programlisting>
</db:section>
<db:section xml:id="influencing-the-names-of-the-ts-files">
<db:title>Influencing the names of the .ts files</db:title>
<db:para>Place the <db:code>.ts</db:code> files in a <db:code>translations</db:code> directory and change the base name to <db:code>frogger_i18n</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">qt_standard_project_setup(I18N_TRANSLATED_LANGUAGES de fr)
...
qt_add_translations(frogger
    TS_FILE_BASE froggo
    TS_FILE_DIR translations
)
</db:programlisting>
<db:para>This creates the following files</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>translations/froggo_de.ts</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>translations/froggo_fr.ts</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can also specify the paths explicitly:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_translations(frogger
    TS_FILES translations/froggo_de.ts translations/froggo_fr.ts
)
</db:programlisting>
</db:section>
</db:section>
</db:article>
