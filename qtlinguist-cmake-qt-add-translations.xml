<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_add_translations</db:title>
<db:productname>QtLinguist</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Linguist Manual</db:titleabbrev>
<db:abstract>
<db:para>Add targets to update and transform Qt Linguist .ts files into .qm files.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-add-translations"/>
<db:para>Add targets to update and transform Qt Linguist .ts files into .qm files.</db:para>
<db:para>The command is defined in the <db:code>LinguistTools</db:code> component of the <db:code>Qt6</db:code> package. Load the package with:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS LinguistTools)
</db:programlisting>
<db:para>This command was introduced in Qt 6.2.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_add_translations(target TS_FILES file1.ts [file2.ts ...]
                    [RESOURCE_PREFIX [OUTPUT_TARGETS variable-name]]
                    [QM_FILES_OUTPUT_VARIABLE variable-name]
                    [SOURCES]
                    [INCLUDE_DIRECTORIES]
                    [LUPDATE_OPTIONS]
                    [LRELEASE_OPTIONS])
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use <db:code>qt6_add_translations()</db:code> instead. It supports the same set of arguments as this command.</db:para>
<db:note>
<db:para>This command is in technology preview and may change in future releases.</db:para>
</db:note>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Creates targets for updating Qt Linguist <db:code>.ts</db:code> files and for transforming them into <db:code>.qm</db:code> files. This function is a convenience wrapper around <db:link xlink:href="qtlinguist-cmake-qt-add-lupdate.xml#qt6-add-lupdate">qt_add_lupdate</db:link> and <db:link xlink:href="qtlinguist-cmake-qt-add-lrelease.xml#qt6-add-lrelease">qt_add_lrelease</db:link> and aims to offer the most common usage of both functions with one call.</db:para>
<db:para>The parameter <db:code>target</db:code> is an existing executable or library target that contains sources with translatable strings. This function will create the targets <db:code>${target}_lupdate</db:code>, <db:code>${target}_lrelease</db:code>, <db:code>update_translations</db:code> and <db:code>release_translations</db:code>. The latter targets are umbrella targets that build all <db:code>${target}_lupdate</db:code> and <db:code>${target}</db:code>_lrelease targets.</db:para>
<db:para><db:code>${target}_lrelease</db:code> is built automatically whenever <db:code>${target}</db:code> needs to be built.</db:para>
<db:para>The <db:code>.ts</db:code> files must be specified with the argument <db:code>TS_FILES</db:code>.</db:para>
</db:section>
<db:section xml:id="options">
<db:title>Options</db:title>
<db:para>You can set additional options for <db:link xlink:href="linguist-manager.xml#lupdate">lupdate</db:link> and <db:link xlink:href="linguist-manager.xml#lrelease">lrelease</db:link> with <db:code>LUPDATE_OPTIONS</db:code> and <db:code>LRELEASE_OPTIONS</db:code>. You can find possible options in the <db:link xlink:href="qmake-variable-reference.xml#translations">translations documentation</db:link>.</db:para>
<db:para>By default, the <db:code>.qm</db:code> files will be placed in the current build directory (<db:code>CMAKE_CURRENT_BINARY_DIR</db:code>). To change this, you can set <db:code>OUTPUT_LOCATION</db:code> as a property of the source <db:code>.ts</db:code> file.</db:para>
<db:para>For example, with the following code, the <db:code>.qm</db:code> files are generated in a <db:code>translations</db:code> directory below the current build directory.</db:para>
<db:programlisting language="cpp">set_source_files_properties(app_en.ts app_de.ts
    PROPERTIES OUTPUT_LOCATION &quot;${CMAKE_CURRENT_BINARY_DIR}/translations&quot;)
</db:programlisting>
</db:section>
<db:section xml:id="embedding-generated-qm-files-in-resources">
<db:title>Embedding Generated .qm Files in Resources</db:title>
<db:para>By default, the generated <db:code>.qm</db:code> files are embedded in a Qt resource that will be linked into <db:code>${target}</db:code>. The files in the resource are accessible under the resource prefix <db:code>&quot;/i18n&quot;</db:code>.</db:para>
<db:para>You can set the resource prefix with <db:code>RESOURCE_PREFIX</db:code>.</db:para>
<db:para>In a static Qt build, when a resource target is created, additional targets can be created. You can instruct <db:code>qt_add_translations</db:code> to store these targets in a variable, by passing <db:code>OUTPUT_TARGETS &lt;variable-name&gt;</db:code>.</db:para>
<db:para>The automatic resource embedding can be turned off by giving the <db:code>QM_FILES_OUTPUT_VARIABLE</db:code> option, followed by the name of a variable in which the command should store the list of generated <db:code>.qm</db:code> files.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Add a German translation to a target <db:code>super_calc</db:code> using <db:code>qt_add_translations</db:code>.</db:para>
<db:programlisting language="cpp">qt_add_translations(super_calc TS_FILES super_calc_de.ts)
</db:programlisting>
<db:para>This is roughly equivalent to the following.</db:para>
<db:programlisting language="cpp">qt_add_lupdate(super_calc TS_FILES super_calc_de.ts)
qt_add_lrelease(super_calc
    TS_FILES super_calc_de.ts
    QM_FILES_OUTPUT_VARIABLE qm_files)
qt_add_resources(super_calc &quot;translations&quot;
    PREFIX &quot;/i18n&quot;
    BASE &quot;${CMAKE_CURRENT_BINARY_DIR}&quot;
    FILES &quot;${qm_files}&quot;)
</db:programlisting>
<db:para>Add a Norwegian translation to <db:code>frogger_game</db:code> with a custom resource prefix.</db:para>
<db:programlisting language="cpp">qt_add_translations(frogger_game
    TS_FILES frogger_game_no.ts
    RESOURCE_PREFIX &quot;/translations&quot;)
</db:programlisting>
<db:para>Add a Finnish translation to <db:code>business_logic</db:code>, and install the generated <db:code>.qm</db:code> files.</db:para>
<db:programlisting language="cpp">qt_add_translations(business_logic
    TS_FILES myapp_fi.ts
    QM_FILES_OUTPUT_VARIABLE qm_files)
install(FILES ${qm_files} DESTINATION &quot;translations&quot;)
</db:programlisting>
</db:section>
</db:article>
