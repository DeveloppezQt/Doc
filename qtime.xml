<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTime Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtime.xml">QTime</db:link> class provides clock time functions.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTime</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qtime.xml">QTime</db:link> object contains a clock time, which it can express as the numbers of hours, minutes, seconds, and milliseconds since midnight. It provides functions for comparing times and for manipulating a time by adding a number of milliseconds.</db:para>
<db:para><db:link xlink:href="qtime.xml">QTime</db:link> uses the 24-hour clock format; it has no concept of AM/PM. Unlike <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, <db:link xlink:href="qtime.xml">QTime</db:link> knows nothing about time zones or daylight-saving time (DST).</db:para>
<db:para>A <db:link xlink:href="qtime.xml">QTime</db:link> object is typically created either by giving the number of hours, minutes, seconds, and milliseconds explicitly, or by using the static function <db:link xlink:href="qtime.xml#currentTime">currentTime</db:link>(), which creates a <db:link xlink:href="qtime.xml">QTime</db:link> object that represents the system's local time.</db:para>
<db:para>The <db:link xlink:href="qtime.xml#hour">hour</db:link>(), <db:link xlink:href="qtime.xml#minute">minute</db:link>(), <db:link xlink:href="qtime.xml#second">second</db:link>(), and <db:link xlink:href="qtime.xml#msec">msec</db:link>() functions provide access to the number of hours, minutes, seconds, and milliseconds of the time. The same information is provided in textual format by the <db:link xlink:href="qtime.xml#toString">toString</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qtime.xml#addSecs">addSecs</db:link>() and <db:link xlink:href="qtime.xml#addMSecs">addMSecs</db:link>() functions provide the time a given number of seconds or milliseconds later than a given time. Correspondingly, the number of seconds or milliseconds between two times can be found using <db:link xlink:href="qtime.xml#secsTo">secsTo</db:link>() or <db:link xlink:href="qtime.xml#msecsTo">msecsTo</db:link>().</db:para>
<db:para><db:link xlink:href="qtime.xml">QTime</db:link> provides a full set of operators to compare two <db:link xlink:href="qtime.xml">QTime</db:link> objects; an earlier time is considered smaller than a later one; if A.<db:link xlink:href="qtime.xml#msecsTo">msecsTo</db:link>(B) is positive, then A &lt; B.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml">QDate</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="toString-2">
<db:title>QString QTime::toString(QStringView <db:emphasis>format</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="toString">QString QTime::toString(const QString &amp;<db:emphasis>format</db:emphasis>) const</db:bridgehead>
<db:para>Returns the time as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the result string.</db:para>
<db:para>These expressions may be used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>h</db:para>
</db:td>
<db:td>
<db:para>The hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh</db:para>
</db:td>
<db:td>
<db:para>The hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>H</db:para>
</db:td>
<db:td>
<db:para>The hour without a leading zero (0 to 23, even with AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HH</db:para>
</db:td>
<db:td>
<db:para>The hour with a leading zero (00 to 23, even with AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>m</db:para>
</db:td>
<db:td>
<db:para>The minute without a leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mm</db:para>
</db:td>
<db:td>
<db:para>The minute with a leading zero (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>s</db:para>
</db:td>
<db:td>
<db:para>The whole second, without any leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ss</db:para>
</db:td>
<db:td>
<db:para>The whole second, with a leading zero where applicable (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>z</db:para>
</db:td>
<db:td>
<db:para>The fractional part of the second, to go after a decimal point, without trailing zeroes (0 to 999). Thus &quot;s.z&quot; reports the seconds to full available (millisecond) precision without trailing zeroes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>zzz</db:para>
</db:td>
<db:td>
<db:para>The fractional part of the second, to millisecond precision, including trailing zeroes where applicable (000 to 999).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AP or A</db:para>
</db:td>
<db:td>
<db:para>Use AM/PM display. <db:emphasis>A/AP</db:emphasis> will be replaced by an upper-case version of either <db:link xlink:href="qlocale.xml#amText">QLocale::amText</db:link>() or <db:link xlink:href="qlocale.xml#pmText">QLocale::pmText</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ap or a</db:para>
</db:td>
<db:td>
<db:para>Use am/pm display. <db:emphasis>a/ap</db:emphasis> will be replaced by a lower-case version of either <db:link xlink:href="qlocale.xml#amText">QLocale::amText</db:link>() or <db:link xlink:href="qlocale.xml#pmText">QLocale::pmText</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>t</db:para>
</db:td>
<db:td>
<db:para>The timezone (for example &quot;CEST&quot;)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Any non-empty sequence of characters enclosed in single quotes will be included verbatim in the output string (stripped of the quotes), even if it contains formatting characters. Two consecutive single quotes (&quot;''&quot;) are replaced by a single quote in the output. All other characters in the format string are included verbatim in the output string.</db:para>
<db:para>Formats without separators (e.g. &quot;ddMM&quot;) are supported but must be used with care, as the resulting strings aren't always reliably readable (e.g. if &quot;dM&quot; produces &quot;212&quot; it could mean either the 2nd of December or the 21st of February).</db:para>
<db:para>Example format strings (assuming that the <db:link xlink:href="qtime.xml">QTime</db:link> is 14:13:09.042 and the system locale is en_US)</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>hh:mm:ss.zzz</db:para>
</db:td>
<db:td>
<db:para>14:13:09.042</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>h:m:s ap</db:para>
</db:td>
<db:td>
<db:para>2:13:9 pm</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>H:m:s a</db:para>
</db:td>
<db:td>
<db:para>14:13:9 pm</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the time is invalid, an empty string will be returned. If <db:code role="parameter">format</db:code> is empty, the default format &quot;hh:mm:ss&quot; is used.</db:para>
<db:note>
<db:para>If localized forms of am or pm (the AP, ap, A or a formats) are desired, please switch to using <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().<db:link xlink:href="qtime.xml#toString">toString</db:link>() as <db:link xlink:href="qtime.xml">QTime</db:link> methods shall change to use English (C locale) at Qt 6.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString-1">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTime-1">
<db:title>QTime::QTime()</db:title>
<db:constructorsynopsis>
<db:methodname>QTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null time object. For a null time, <db:link xlink:href="qtime.xml#isNull">isNull</db:link>() returns true and <db:link xlink:href="qtime.xml#isValid">isValid</db:link>() returns false. If you need a zero time, use <db:link xlink:href="qtime.xml">QTime</db:link>(0, 0). For the start of a day, see <db:link xlink:href="qdate.xml#startOfDay">QDate::startOfDay</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTime-2">
<db:title>QTime::QTime(int <db:emphasis>h</db:emphasis>, int <db:emphasis>m</db:emphasis>, int <db:emphasis>s</db:emphasis> = 0, int <db:emphasis>ms</db:emphasis> = 0)</db:title>
<db:constructorsynopsis>
<db:methodname>QTime</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>s</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ms</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime(int h, int m, int s, int ms)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a time with hour <db:code role="parameter">h</db:code>, minute <db:code role="parameter">m</db:code>, seconds <db:code role="parameter">s</db:code> and milliseconds <db:code role="parameter">ms</db:code>.</db:para>
<db:para><db:code role="parameter">h</db:code> must be in the range 0 to 23, <db:code role="parameter">m</db:code> and <db:code role="parameter">s</db:code> must be in the range 0 to 59, and <db:code role="parameter">ms</db:code> must be in the range 0 to 999.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMSecs">
<db:title>QTime QTime::addMSecs(int <db:emphasis>ms</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTime</db:type>
<db:methodname>addMSecs</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ms</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime addMSecs(int ms) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qtime.xml">QTime</db:link> object containing a time <db:code role="parameter">ms</db:code> milliseconds later than the time of this object (or earlier if <db:code role="parameter">ms</db:code> is negative).</db:para>
<db:para>Note that the time will wrap if it passes midnight. See <db:link xlink:href="qtime.xml#addSecs">addSecs</db:link>() for an example.</db:para>
<db:para>Returns a null time if this time is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#msecsTo">msecsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">QDateTime::addMSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSecs">
<db:title>QTime QTime::addSecs(int <db:emphasis>s</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTime</db:type>
<db:methodname>addSecs</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime addSecs(int s) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qtime.xml">QTime</db:link> object containing a time <db:code role="parameter">s</db:code> seconds later than the time of this object (or earlier if <db:code role="parameter">s</db:code> is negative).</db:para>
<db:para>Note that the time will wrap if it passes midnight.</db:para>
<db:para>Returns a null time if this time is invalid.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QTime n(14, 0, 0);                // n == 14:00:00
QTime t;
t = n.addSecs(70);                // t == 14:01:10
t = n.addSecs(-70);               // t == 13:58:50
t = n.addSecs(10 * 60 * 60 + 5);  // t == 00:00:05
t = n.addSecs(-15 * 60 * 60);     // t == 23:00:00
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#addMSecs">addMSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#secsTo">secsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">QDateTime::addSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentTime">
<db:title>[static] QTime QTime::currentTime()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTime</db:type>
<db:methodname>currentTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime currentTime()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current time as reported by the system clock.</db:para>
<db:para>Note that the accuracy depends on the accuracy of the underlying operating system; not all systems provide 1-millisecond accuracy.</db:para>
<db:para>Furthermore, currentTime() only increases within each day; it shall drop by 24 hours each time midnight passes; and, beside this, changes in it may not correspond to elapsed time, if a daylight-saving transition intervenes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime">QDateTime::currentDateTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#currentDateTimeUtc">QDateTime::currentDateTimeUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elapsed">
<db:title>int QTime::elapsed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>elapsed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int elapsed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of milliseconds that have elapsed since the last time <db:link xlink:href="qtime.xml#start">start</db:link>() or <db:link xlink:href="qtime.xml#restart">restart</db:link>() was called.</db:para>
<db:para>Note that the counter wraps to zero 24 hours after the last call to <db:link xlink:href="qtime.xml#start">start</db:link>() or restart.</db:para>
<db:para>Note that the accuracy depends on the accuracy of the underlying operating system; not all systems provide 1-millisecond accuracy.</db:para>
<db:warning>
<db:para>If the system's clock setting has been changed since the last time <db:link xlink:href="qtime.xml#start">start</db:link>() or <db:link xlink:href="qtime.xml#restart">restart</db:link>() was called, the result is undefined. This can happen when daylight-saving time is turned on or off.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#restart">restart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMSecsSinceStartOfDay">
<db:title>[static] QTime QTime::fromMSecsSinceStartOfDay(int <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTime</db:type>
<db:methodname>fromMSecsSinceStartOfDay</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime fromMSecsSinceStartOfDay(int msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qtime.xml">QTime</db:link> instance with the time set to the number of <db:code role="parameter">msecs</db:code> since the start of the day, i.e. since 00:00:00.</db:para>
<db:para>If <db:code role="parameter">msecs</db:code> falls outside the valid range an invalid <db:link xlink:href="qtime.xml">QTime</db:link> will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#msecsSinceStartOfDay">msecsSinceStartOfDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QTime QTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTime</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DateFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>Qt::TextDate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime fromString(const QString &amp;string, Qt::DateFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the time represented in the <db:code role="parameter">string</db:code> as a <db:link xlink:href="qtime.xml">QTime</db:link> using the <db:code role="parameter">format</db:code> given, or an invalid time if this is not possible.</db:para>
<db:para>Note that fromString() uses a &quot;C&quot; locale encoded string to convert milliseconds to a float value. If the default locale is not &quot;C&quot;, this may result in two conversion attempts (if the conversion fails for the default locale). This should be considered an implementation detail.</db:para>
<db:note>
<db:para>Support for localized dates, including the format options <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleShortDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleLongDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::LocaleDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleShortDate</db:link>, and <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleLongDate</db:link>, shall be removed in Qt 6. Use <db:link xlink:href="qlocale.xml#toTime">QLocale::toTime</db:link>() instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toTime">QLocale::toTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString-1">
<db:title>[static] QTime QTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTime</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime fromString(const QString &amp;string, const QString &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qtime.xml">QTime</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid time if the string cannot be parsed.</db:para>
<db:para>These expressions may be used for the format:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>h</db:para>
</db:td>
<db:td>
<db:para>The hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh</db:para>
</db:td>
<db:td>
<db:para>The hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>H</db:para>
</db:td>
<db:td>
<db:para>The hour without a leading zero (0 to 23, even with AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HH</db:para>
</db:td>
<db:td>
<db:para>The hour with a leading zero (00 to 23, even with AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>m</db:para>
</db:td>
<db:td>
<db:para>The minute without a leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mm</db:para>
</db:td>
<db:td>
<db:para>The minute with a leading zero (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>s</db:para>
</db:td>
<db:td>
<db:para>The whole second, without any leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ss</db:para>
</db:td>
<db:td>
<db:para>The whole second, with a leading zero where applicable (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>z</db:para>
</db:td>
<db:td>
<db:para>The fractional part of the second, to go after a decimal point, without trailing zeroes (0 to 999). Thus &quot;s.z&quot; reports the seconds to full available (millisecond) precision without trailing zeroes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>zzz</db:para>
</db:td>
<db:td>
<db:para>The fractional part of the second, to millisecond precision, including trailing zeroes where applicable (000 to 999).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AP or A</db:para>
</db:td>
<db:td>
<db:para>Interpret as an AM/PM time. <db:emphasis>A/AP</db:emphasis> will match an upper-case version of either <db:link xlink:href="qlocale.xml#amText">QLocale::amText</db:link>() or <db:link xlink:href="qlocale.xml#pmText">QLocale::pmText</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ap or a</db:para>
</db:td>
<db:td>
<db:para>Interpret as an am/pm time. <db:emphasis>a/ap</db:emphasis> will match a lower-case version of either <db:link xlink:href="qlocale.xml#amText">QLocale::amText</db:link>() or <db:link xlink:href="qlocale.xml#pmText">QLocale::pmText</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>t</db:para>
</db:td>
<db:td>
<db:para>the timezone (for example &quot;CEST&quot;)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All other input characters will be treated as text. Any non-empty sequence of characters enclosed in single quotes will also be treated (stripped of the quotes) as text and not be interpreted as expressions.</db:para>
<db:programlisting language="cpp">QTime time = QTime::fromString(&quot;1mm12car00&quot;, &quot;m'mm'hcarss&quot;);
// time is 12:01.00
</db:programlisting>
<db:para>If the format is not satisfied, an invalid <db:link xlink:href="qtime.xml">QTime</db:link> is returned. Expressions that do not expect leading zeroes to be given (h, m, s and z) are greedy. This means that they will use two digits even if this puts them outside the range of accepted values and leaves too few digits for other sections. For example, the following string could have meant 00:07:10, but the m will grab two digits, resulting in an invalid time:</db:para>
<db:programlisting language="cpp">QTime time = QTime::fromString(&quot;00:710&quot;, &quot;hh:ms&quot;); // invalid
</db:programlisting>
<db:para>Any field that is not represented in the format will be set to zero. For example:</db:para>
<db:programlisting language="cpp">QTime time = QTime::fromString(&quot;1.30&quot;, &quot;m.s&quot;);
// time is 00:01:30.000
</db:programlisting>
<db:note>
<db:para>If localized forms of am or pm (the AP, ap, A or a formats) are used, please switch to using <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().toTime() as <db:link xlink:href="qtime.xml">QTime</db:link> methods shall change to only recognize English (C locale) at Qt 6.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromString">QDateTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#fromString">QDate::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toTime">QLocale::toTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hour">
<db:title>int QTime::hour() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hour</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hour() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hour part (0 to 23) of the time.</db:para>
<db:para>Returns -1 if the time is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#minute">minute</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#second">second</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#msec">msec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QTime::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the time is null (i.e., the <db:link xlink:href="qtime.xml">QTime</db:link> object was constructed using the default constructor); otherwise returns false. A null time is also an invalid time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTime::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the time is valid; otherwise returns false. For example, the time 23:30:55.746 is valid, but 24:12:30 is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid-1">
<db:title>[static] bool QTime::isValid(int <db:emphasis>h</db:emphasis>, int <db:emphasis>m</db:emphasis>, int <db:emphasis>s</db:emphasis>, int <db:emphasis>ms</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ms</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid(int h, int m, int s, int ms)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the specified time is valid; otherwise returns false.</db:para>
<db:para>The time is valid if <db:code role="parameter">h</db:code> is in the range 0 to 23, <db:code role="parameter">m</db:code> and <db:code role="parameter">s</db:code> are in the range 0 to 59, and <db:code role="parameter">ms</db:code> is in the range 0 to 999.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QTime::isValid(21, 10, 30); // returns true
QTime::isValid(22, 5,  62); // returns false
</db:programlisting>
</db:section>
<db:section xml:id="minute">
<db:title>int QTime::minute() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minute</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minute() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minute part (0 to 59) of the time.</db:para>
<db:para>Returns -1 if the time is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#hour">hour</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#second">second</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#msec">msec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="msec">
<db:title>int QTime::msec() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>msec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int msec() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the millisecond part (0 to 999) of the time.</db:para>
<db:para>Returns -1 if the time is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#hour">hour</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#minute">minute</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#second">second</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="msecsSinceStartOfDay">
<db:title>int QTime::msecsSinceStartOfDay() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>msecsSinceStartOfDay</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int msecsSinceStartOfDay() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of msecs since the start of the day, i.e. since 00:00:00.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#fromMSecsSinceStartOfDay">fromMSecsSinceStartOfDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="msecsTo">
<db:title>int QTime::msecsTo(const QTime &amp;<db:emphasis>t</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>msecsTo</db:methodname>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int msecsTo(const QTime &amp;t) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of milliseconds from this time to <db:code role="parameter">t</db:code>. If <db:code role="parameter">t</db:code> is earlier than this time, the number of milliseconds returned is negative.</db:para>
<db:para>Because <db:link xlink:href="qtime.xml">QTime</db:link> measures time within a day and there are 86400 seconds in a day, the result is always between -86400000 and 86400000 ms.</db:para>
<db:para>Returns 0 if either time is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#secsTo">secsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#addMSecs">addMSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#msecsTo">QDateTime::msecsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restart">
<db:title>int QTime::restart()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>restart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int restart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this time to the current time and returns the number of milliseconds that have elapsed since the last time <db:link xlink:href="qtime.xml#start">start</db:link>() or restart() was called.</db:para>
<db:para>This function is guaranteed to be atomic and is thus very handy for repeated measurements. Call <db:link xlink:href="qtime.xml#start">start</db:link>() to start the first measurement, and restart() for each later measurement.</db:para>
<db:para>Note that the counter wraps to zero 24 hours after the last call to <db:link xlink:href="qtime.xml#start">start</db:link>() or restart().</db:para>
<db:warning>
<db:para>If the system's clock setting has been changed since the last time <db:link xlink:href="qtime.xml#start">start</db:link>() or restart() was called, the result is undefined. This can happen when daylight-saving time is turned on or off.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#elapsed">elapsed</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#currentTime">currentTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="second">
<db:title>int QTime::second() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>second</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int second() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the second part (0 to 59) of the time.</db:para>
<db:para>Returns -1 if the time is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#hour">hour</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#minute">minute</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#msec">msec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="secsTo">
<db:title>int QTime::secsTo(const QTime &amp;<db:emphasis>t</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>secsTo</db:methodname>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int secsTo(const QTime &amp;t) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of seconds from this time to <db:code role="parameter">t</db:code>. If <db:code role="parameter">t</db:code> is earlier than this time, the number of seconds returned is negative.</db:para>
<db:para>Because <db:link xlink:href="qtime.xml">QTime</db:link> measures time within a day and there are 86400 seconds in a day, the result is always between -86400 and 86400.</db:para>
<db:para>secsTo() does not take into account any milliseconds.</db:para>
<db:para>Returns 0 if either time is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#secsTo">QDateTime::secsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHMS">
<db:title>bool QTime::setHMS(int <db:emphasis>h</db:emphasis>, int <db:emphasis>m</db:emphasis>, int <db:emphasis>s</db:emphasis>, int <db:emphasis>ms</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setHMS</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ms</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setHMS(int h, int m, int s, int ms)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the time to hour <db:code role="parameter">h</db:code>, minute <db:code role="parameter">m</db:code>, seconds <db:code role="parameter">s</db:code> and milliseconds <db:code role="parameter">ms</db:code>.</db:para>
<db:para><db:code role="parameter">h</db:code> must be in the range 0 to 23, <db:code role="parameter">m</db:code> and <db:code role="parameter">s</db:code> must be in the range 0 to 59, and <db:code role="parameter">ms</db:code> must be in the range 0 to 999. Returns true if the set time is valid; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QTime::start()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this time to the current time. This is practical for timing:</db:para>
<db:programlisting language="cpp">QTime t;
t.start();
some_lengthy_task();
qDebug(&quot;Time elapsed: %d ms&quot;, t.elapsed());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#restart">restart</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#elapsed">elapsed</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#currentTime">currentTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-1">
<db:title>QString QTime::toString(Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:methodparam>
<db:type>Qt::DateFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>Qt::TextDate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString(Qt::DateFormat format) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the time as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the string.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>, the string format is HH:mm:ss; e.g. 1 second before midnight would be &quot;23:59:59&quot;.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link>, the string format corresponds to the ISO 8601 extended specification for representations of dates, represented by HH:mm:ss. To include milliseconds in the ISO 8601 date, use the <db:code role="parameter">format</db:code> <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODateWithMs</db:link>, which corresponds to HH:mm:ss.zzz.</db:para>
<db:para>The <db:code role="parameter">format</db:code> options <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleDate</db:link>:, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleShortDate</db:link> and <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleLongDate</db:link> shall be removed in Qt 6. Their use should be replaced with: <db:link xlink:href="qlocale.xml#toString">QLocale::system().toString</db:link>(time, QLocale::ShortFormat) or <db:link xlink:href="qlocale.xml#toString">QLocale::system().toString</db:link>(time, QLocale::LongFormat).</db:para>
<db:para>The <db:code role="parameter">format</db:code> options <db:link xlink:href="qt.xml#DateFormat-enum">Qt::LocaleDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleShortDate</db:link> and <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleLongDate</db:link> shall be removed in Qt 6. Their use should be replaced with: <db:link xlink:href="qlocale.xml#toString">QLocale().toString</db:link>(time, QLocale::ShortFormat) or <db:link xlink:href="qlocale.xml#toString">QLocale().toString</db:link>(time, QLocale::LongFormat).</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::RFC2822Date</db:link>, the string is formatted in an <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc2822.txt">RFC 2822</db:link> compatible way. An example of this formatting is &quot;23:59:20&quot;.</db:para>
<db:para>If the time is invalid, an empty string will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString-1">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QTime::operator!=(const QTime &amp;<db:emphasis>t</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QTime &amp;t) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this time is different from <db:code role="parameter">t</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QTime::operator&lt;(const QTime &amp;<db:emphasis>t</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QTime &amp;t) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this time is earlier than <db:code role="parameter">t</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>bool QTime::operator&lt;=(const QTime &amp;<db:emphasis>t</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QTime &amp;t) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this time is earlier than or equal to <db:code role="parameter">t</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QTime::operator==(const QTime &amp;<db:emphasis>t</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QTime &amp;t) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this time is equal to <db:code role="parameter">t</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool QTime::operator&gt;(const QTime &amp;<db:emphasis>t</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QTime &amp;t) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this time is later than <db:code role="parameter">t</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>bool QTime::operator&gt;=(const QTime &amp;<db:emphasis>t</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QTime &amp;t) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this time is later than or equal to <db:code role="parameter">t</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QTime &amp;<db:emphasis>time</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QTime &amp;time)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">time</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QTime &amp;<db:emphasis>time</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTime &amp;</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QTime &amp;time)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a time from stream <db:code role="parameter">in</db:code> into the given <db:code role="parameter">time</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
