<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHelpEngineCore Class</db:title>
<db:productname>QtHelp</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Help Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link> class provides the core functionality of the help system.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHelpEngineCore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Help)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Help)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += help</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qhelpengine.xml" xlink:role="class">QHelpEngine</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Before the help engine can be used, it must be initialized by calling <db:link xlink:href="qhelpenginecore.xml#setupData">setupData</db:link>(). At the beginning of the setup process the signal <db:link xlink:href="qhelpenginecore.xml#setupStarted">setupStarted</db:link>() is emitted. From this point on until the signal <db:link xlink:href="qhelpenginecore.xml#setupFinished">setupFinished</db:link>() is emitted, is the help data in an undefined meaning unusable state.</db:para>
<db:para>The core help engine can be used to perform different tasks. By calling <db:link xlink:href="qhelpenginecore.xml#documentsForIdentifier">documentsForIdentifier</db:link>() the engine returns URLs specifying the file locations inside the help system. The actual file data can then be retrieved by calling <db:link xlink:href="qhelpenginecore.xml#fileData">fileData</db:link>().</db:para>
<db:para>The help engine can contain any number of custom filters. The management of the filters, including adding new filters, changing filter definitions, or removing existing filters, is done through the <db:link xlink:href="qhelpfilterengine.xml">QHelpFilterEngine</db:link> class, which can be accessed by the <db:link xlink:href="qhelpenginecore.xml#filterEngine">filterEngine</db:link>() method.</db:para>
<db:note>
<db:para><db:link xlink:href="qhelpfilterengine.xml">QHelpFilterEngine</db:link> replaces the older filter API that is deprecated since Qt 5.13. Call <db:link xlink:href="qhelpenginecore.xml#setUsesFilterEngine">setUsesFilterEngine</db:link>() with <db:code>true</db:code> to enable the new functionality.</db:para>
</db:note>
<db:para>The core help engine has two modes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Read-only mode, where the help collection file is not changed unless explicitly requested. This also works if the collection file is in a read-only location, and is the default.</db:para>
</db:listitem>
<db:listitem>
<db:para>Fully writable mode, which requires the help collection file to be writable.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The mode can be changed by calling <db:link xlink:href="qhelpenginecore.xml#readOnly-prop">setReadOnly</db:link>() method, prior to calling <db:link xlink:href="qhelpenginecore.xml#setupData">setupData</db:link>().</db:para>
<db:para>The help engine also offers the possibility to set and read values in a persistent way comparable to ini files or Windows registry entries. For more information see setValue() or value().</db:para>
<db:para>This class does not offer any GUI components or functionality for indices or contents. If you need one of those use <db:link xlink:href="qhelpengine.xml">QHelpEngine</db:link> instead.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoSaveFilter-prop">
<db:title>autoSaveFilter : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoSaveFilter</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoSaveFilter</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoSaveFilter</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether <db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link> is in auto save filter mode or not.</db:para>
<db:para>If <db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link> is in auto save filter mode, the current filter is automatically saved when it is changed by the <db:link xlink:href="qhelpfilterengine.xml#setActiveFilter">QHelpFilterEngine::setActiveFilter</db:link>() function. The filter is saved persistently in the help collection file.</db:para>
<db:para>By default, this mode is on.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoSaveFilter</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoSaveFilter</db:emphasis>(<db:type>bool</db:type> <db:emphasis>save</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="collectionFile-prop">
<db:title>collectionFile : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>collectionFile</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">collectionFile</db:synopsisinfo>
<db:synopsisinfo role="setter">setCollectionFile</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the absolute file name of the collection file currently used.</db:para>
<db:para>Setting this property leaves the help engine in an invalid state. It is important to invoke <db:link xlink:href="qhelpenginecore.xml#setupData">setupData</db:link>() or any getter function in order to setup the help engine again.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">collectionFile</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCollectionFile</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>fileName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>[since 6.0] readOnly : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>readOnly</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isReadOnly</db:synopsisinfo>
<db:synopsisinfo role="setter">setReadOnly</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the help engine is read-only.</db:para>
<db:para>In read-only mode, the user can use the help engine with a collection file installed in a read-only location. In this case, some functionality won't be accessible, like registering additional documentation, filter editing, or any action that would require changes to the collection file. Setting it to <db:code>false</db:code> enables the full functionality of the help engine.</db:para>
<db:para>By default, this property is <db:code>true</db:code>.</db:para>
<db:para>This property was introduced in Qt 6.0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isReadOnly</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setReadOnly</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHelpEngineCore">
<db:title>[explicit] QHelpEngineCore::QHelpEngineCore(const QString &amp;<db:emphasis>collectionFile</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QHelpEngineCore</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>collectionFile</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHelpEngineCore(const QString &amp;collectionFile, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new core help engine with a <db:code role="parameter">parent</db:code>. The help engine uses the information stored in the <db:code role="parameter">collectionFile</db:code> to provide help. If the collection file does not exist yet, it'll be created.</db:para>
</db:section>
<db:section xml:id="dtor.QHelpEngineCore">
<db:title>[virtual] QHelpEngineCore::~QHelpEngineCore()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QHelpEngineCore</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHelpEngineCore()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the help engine.</db:para>
</db:section>
<db:section xml:id="copyCollectionFile">
<db:title>bool QHelpEngineCore::copyCollectionFile(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>copyCollectionFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool copyCollectionFile(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates the file <db:code role="parameter">fileName</db:code> and copies all contents from the current collection file into the newly created file, and returns true if successful; otherwise returns false.</db:para>
<db:para>The copying process makes sure that file references to Qt Collection files (<db:code>.qch</db:code>) files are updated accordingly.</db:para>
</db:section>
<db:section xml:id="customValue">
<db:title>QVariant QHelpEngineCore::customValue(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>defaultValue</db:emphasis> = QVariant()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>customValue</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
<db:initializer>QVariant()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant customValue(const QString &amp;key, const QVariant &amp;defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value assigned to the <db:code role="parameter">key</db:code>. If the requested key does not exist, the specified <db:code role="parameter">defaultValue</db:code> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#setCustomValue">setCustomValue</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#removeCustomValue">removeCustomValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentationFileName">
<db:title>QString QHelpEngineCore::documentationFileName(const QString &amp;<db:emphasis>namespaceName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>documentationFileName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString documentationFileName(const QString &amp;namespaceName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the absolute file name of the Qt compressed help file (.qch) identified by the <db:code role="parameter">namespaceName</db:code>. If there is no Qt compressed help file with the specified namespace registered, an empty string is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#namespaceName">namespaceName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentsForIdentifier">
<db:title>QList&lt;QHelpLink&gt; QHelpEngineCore::documentsForIdentifier(const QString &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QHelpLink&gt;</db:type>
<db:methodname>documentsForIdentifier</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QHelpLink&gt; documentsForIdentifier(const QString &amp;id) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the document links found for the <db:code role="parameter">id</db:code>. The returned list contents depend on the current filter, and therefore only the keywords registered for the current filter will be returned.</db:para>
</db:section>
<db:section xml:id="documentsForIdentifier-1">
<db:title>QList&lt;QHelpLink&gt; QHelpEngineCore::documentsForIdentifier(const QString &amp;<db:emphasis>id</db:emphasis>, const QString &amp;<db:emphasis>filterName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QHelpLink&gt;</db:type>
<db:methodname>documentsForIdentifier</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QHelpLink&gt; documentsForIdentifier(const QString &amp;id, const QString &amp;filterName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the document links found for the <db:code role="parameter">id</db:code>, filtered by <db:code role="parameter">filterName</db:code>. The returned list contents depend on the passed filter, and therefore only the keywords registered for this filter will be returned. If you want to get all results unfiltered, pass empty string as <db:code role="parameter">filterName</db:code>.</db:para>
</db:section>
<db:section xml:id="documentsForKeyword">
<db:title>QList&lt;QHelpLink&gt; QHelpEngineCore::documentsForKeyword(const QString &amp;<db:emphasis>keyword</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QHelpLink&gt;</db:type>
<db:methodname>documentsForKeyword</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>keyword</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QHelpLink&gt; documentsForKeyword(const QString &amp;keyword) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the document links found for the <db:code role="parameter">keyword</db:code>. The returned list contents depend on the current filter, and therefore only the keywords registered for the current filter will be returned.</db:para>
</db:section>
<db:section xml:id="documentsForKeyword-1">
<db:title>QList&lt;QHelpLink&gt; QHelpEngineCore::documentsForKeyword(const QString &amp;<db:emphasis>keyword</db:emphasis>, const QString &amp;<db:emphasis>filterName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QHelpLink&gt;</db:type>
<db:methodname>documentsForKeyword</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>keyword</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QHelpLink&gt; documentsForKeyword(const QString &amp;keyword, const QString &amp;filterName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the document links found for the <db:code role="parameter">keyword</db:code>, filtered by <db:code role="parameter">filterName</db:code>. The returned list contents depend on the passed filter, and therefore only the keywords registered for this filter will be returned. If you want to get all results unfiltered, pass empty string as <db:code role="parameter">filterName</db:code>.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QString QHelpEngineCore::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a description of the last error that occurred.</db:para>
</db:section>
<db:section xml:id="fileData">
<db:title>QByteArray QHelpEngineCore::fileData(const QUrl &amp;<db:emphasis>url</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>fileData</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray fileData(const QUrl &amp;url) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data of the file specified by <db:code role="parameter">url</db:code>. If the file does not exist, an empty <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#findFile">findFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="files-1">
<db:title>QList&lt;QUrl&gt; QHelpEngineCore::files(const QString <db:emphasis>namespaceName</db:emphasis>, const QString &amp;<db:emphasis>filterName</db:emphasis>, const QString &amp;<db:emphasis>extensionFilter</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QUrl&gt;</db:type>
<db:methodname>files</db:methodname>
<db:methodparam>
<db:type>const QString</db:type>
<db:parameter>namespaceName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>extensionFilter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QUrl&gt; files(const QString namespaceName, const QString &amp;filterName, const QString &amp;extensionFilter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of files contained in the Qt compressed help file for <db:code role="parameter">namespaceName</db:code>. The files can be filtered by <db:code role="parameter">filterName</db:code> as well as by their extension <db:code role="parameter">extensionFilter</db:code> (for example, 'html').</db:para>
</db:section>
<db:section xml:id="filterEngine">
<db:title>QHelpFilterEngine *QHelpEngineCore::filterEngine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHelpFilterEngine *</db:type>
<db:methodname>filterEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHelpFilterEngine * filterEngine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the filter engine associated with this help engine. The filter engine allows for adding, changing, and removing existing filters for this help engine. To use the engine you also have to call <db:link xlink:href="qhelpenginecore.xml#setUsesFilterEngine">setUsesFilterEngine</db:link>() set to <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="findFile">
<db:title>QUrl QHelpEngineCore::findFile(const QUrl &amp;<db:emphasis>url</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>findFile</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl findFile(const QUrl &amp;url) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the corrected URL for the <db:code role="parameter">url</db:code> that may refer to a different namespace defined by the virtual folder defined as a part of the <db:code role="parameter">url</db:code>. If the virtual folder matches the namespace of the <db:code role="parameter">url</db:code>, the method just checks if the file exists and returns the same <db:code role="parameter">url</db:code>. When the virtual folder doesn't match the namespace of the <db:code role="parameter">url</db:code>, it tries to find the best matching namespace according to the active filter. When the namespace is found, it returns the corrected URL if the file exists, otherwise it returns an invalid URL.</db:para>
</db:section>
<db:section xml:id="metaData">
<db:title>[static] QVariant QHelpEngineCore::metaData(const QString &amp;<db:emphasis>documentationFileName</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>metaData</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>documentationFileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant metaData(const QString &amp;documentationFileName, const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta data for the Qt compressed help file <db:code role="parameter">documentationFileName</db:code>. If there is no data available for <db:code role="parameter">name</db:code>, an invalid QVariant() is returned. The meta data is defined when creating the Qt compressed help file and cannot be modified later. Common meta data includes e.g. the author of the documentation.</db:para>
</db:section>
<db:section xml:id="namespaceName">
<db:title>[static] QString QHelpEngineCore::namespaceName(const QString &amp;<db:emphasis>documentationFileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>namespaceName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>documentationFileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString namespaceName(const QString &amp;documentationFileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the namespace name defined for the Qt compressed help file (.qch) specified by its <db:code role="parameter">documentationFileName</db:code>. If the file is not valid, an empty string is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#documentationFileName">documentationFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerDocumentation">
<db:title>bool QHelpEngineCore::registerDocumentation(const QString &amp;<db:emphasis>documentationFileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>registerDocumentation</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>documentationFileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool registerDocumentation(const QString &amp;documentationFileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the Qt compressed help file (.qch) contained in the file <db:code role="parameter">documentationFileName</db:code>. One compressed help file, uniquely identified by its namespace can only be registered once. True is returned if the registration was successful, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#unregisterDocumentation">unregisterDocumentation</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registeredDocumentations">
<db:title>QStringList QHelpEngineCore::registeredDocumentations() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>registeredDocumentations</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList registeredDocumentations() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all registered Qt compressed help files of the current collection file. The returned names are the namespaces of the registered Qt compressed help files (.qch).</db:para>
</db:section>
<db:section xml:id="removeCustomValue">
<db:title>bool QHelpEngineCore::removeCustomValue(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removeCustomValue</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeCustomValue(const QString &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the <db:code role="parameter">key</db:code> from the settings section in the collection file. Returns true if the value was removed successfully, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#customValue">customValue</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#setCustomValue">setCustomValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCustomValue">
<db:title>bool QHelpEngineCore::setCustomValue(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setCustomValue</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setCustomValue(const QString &amp;key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Save the <db:code role="parameter">value</db:code> under the <db:code role="parameter">key</db:code>. If the key already exist, the value will be overwritten. Returns true if the value was saved successfully, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#customValue">customValue</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#removeCustomValue">removeCustomValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUsesFilterEngine">
<db:title>void QHelpEngineCore::setUsesFilterEngine(bool <db:emphasis>uses</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUsesFilterEngine</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>uses</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUsesFilterEngine(bool uses)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables or disables the new filter engine functionality inside the help engine, according to the passed <db:code role="parameter">uses</db:code> parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#usesFilterEngine">usesFilterEngine</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#filterEngine">filterEngine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setupData">
<db:title>bool QHelpEngineCore::setupData()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setupData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setupData()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets up the help engine by processing the information found in the collection file and returns true if successful; otherwise returns false.</db:para>
<db:para>By calling the function, the help engine is forced to initialize itself immediately. Most of the times, this function does not have to be called explicitly because getter functions which depend on a correctly set up help engine do that themselves.</db:para>
<db:note>
<db:para><db:code>qsqlite4.dll</db:code> needs to be deployed with the application as the help system uses the sqlite driver when loading help collections.</db:para>
</db:note>
</db:section>
<db:section xml:id="setupFinished">
<db:title>void QHelpEngineCore::setupFinished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setupFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setupFinished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the setup is complete.</db:para>
</db:section>
<db:section xml:id="setupStarted">
<db:title>void QHelpEngineCore::setupStarted()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setupStarted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setupStarted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when setup is started.</db:para>
</db:section>
<db:section xml:id="unregisterDocumentation">
<db:title>bool QHelpEngineCore::unregisterDocumentation(const QString &amp;<db:emphasis>namespaceName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>unregisterDocumentation</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool unregisterDocumentation(const QString &amp;namespaceName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unregisters the Qt compressed help file (.qch) identified by its <db:code role="parameter">namespaceName</db:code> from the help collection. Returns true on success, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#registerDocumentation">registerDocumentation</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="usesFilterEngine">
<db:title>bool QHelpEngineCore::usesFilterEngine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>usesFilterEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool usesFilterEngine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the help engine uses the new filter functionality.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#setUsesFilterEngine">setUsesFilterEngine</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#filterEngine">filterEngine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="warning">
<db:title>void QHelpEngineCore::warning(const QString &amp;<db:emphasis>msg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>warning</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>msg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void warning(const QString &amp;msg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a non critical error occurs. The warning message is stored in <db:code role="parameter">msg</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QHelpEngineCore</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="currentFilter-prop">
<db:title>currentFilter : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>currentFilter</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentFilter</db:synopsisinfo>
<db:synopsisinfo role="setter">setCurrentFilter</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds the name of the custom filter currently applied.</db:para>
<db:para><db:link xlink:href="qhelpfilterengine.xml#activeFilter">QHelpFilterEngine::activeFilter</db:link>() should be used instead.</db:para>
<db:para>Setting this property will save the new custom filter permanently in the help collection file. To set a custom filter without saving it permanently, disable the auto save filter mode.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">currentFilter</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentFilter</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>filterName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#autoSaveFilter-prop">autoSaveFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="addCustomFilter">
<db:title>bool QHelpEngineCore::addCustomFilter(const QString &amp;<db:emphasis>filterName</db:emphasis>, const QStringList &amp;<db:emphasis>attributes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addCustomFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>attributes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addCustomFilter(const QString &amp;filterName, const QStringList &amp;attributes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para><db:link xlink:href="qhelpfilterengine.xml#setFilterData">QHelpFilterEngine::setFilterData</db:link>() should be used instead.</db:para>
<db:para>Adds the new custom filter <db:code role="parameter">filterName</db:code>. The filter attributes are specified by <db:code role="parameter">attributes</db:code>. If the filter already exists, its attribute set is replaced. The function returns true if the operation succeeded, otherwise it returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#customFilters">customFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#removeCustomFilter">removeCustomFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentFilterChanged">
<db:title>void QHelpEngineCore::currentFilterChanged(const QString &amp;<db:emphasis>newFilter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentFilterChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newFilter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentFilterChanged(const QString &amp;newFilter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para><db:link xlink:href="qhelpfilterengine.xml#filterActivated">QHelpFilterEngine::filterActivated</db:link>() should be used instead.</db:para>
<db:para>This signal is emitted when the current filter is changed to <db:code role="parameter">newFilter</db:code>.</db:para>
</db:section>
<db:section xml:id="customFilters">
<db:title>QStringList QHelpEngineCore::customFilters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>customFilters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList customFilters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para><db:link xlink:href="qhelpfilterengine.xml#filters">QHelpFilterEngine::filters</db:link>() should be used instead.</db:para>
<db:para>Returns a list of custom filters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#addCustomFilter">addCustomFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#removeCustomFilter">removeCustomFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="files">
<db:title>QList&lt;QUrl&gt; QHelpEngineCore::files(const QString <db:emphasis>namespaceName</db:emphasis>, const QStringList &amp;<db:emphasis>filterAttributes</db:emphasis>, const QString &amp;<db:emphasis>extensionFilter</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QUrl&gt;</db:type>
<db:methodname>files</db:methodname>
<db:methodparam>
<db:type>const QString</db:type>
<db:parameter>namespaceName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>filterAttributes</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>extensionFilter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QUrl&gt; files(const QString namespaceName, const QStringList &amp;filterAttributes, const QString &amp;extensionFilter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>files() should be used instead.</db:para>
<db:para>Returns a list of files contained in the Qt compressed help file <db:code role="parameter">namespaceName</db:code>. The files can be filtered by <db:code role="parameter">filterAttributes</db:code> as well as by their extension <db:code role="parameter">extensionFilter</db:code> (e.g. 'html').</db:para>
</db:section>
<db:section xml:id="filterAttributeSets">
<db:title>QList&lt;QStringList&gt; QHelpEngineCore::filterAttributeSets(const QString &amp;<db:emphasis>namespaceName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QStringList&gt;</db:type>
<db:methodname>filterAttributeSets</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QStringList&gt; filterAttributeSets(const QString &amp;namespaceName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para><db:link xlink:href="qhelpfilterengine.xml#filterData">QHelpFilterEngine::filterData</db:link>() should be used instead.</db:para>
<db:para>Returns a list of filter attributes for the different filter sections defined in the Qt compressed help file with the given namespace <db:code role="parameter">namespaceName</db:code>.</db:para>
</db:section>
<db:section xml:id="filterAttributes">
<db:title>QStringList QHelpEngineCore::filterAttributes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>filterAttributes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList filterAttributes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para><db:link xlink:href="qhelpfilterengine.xml#availableComponents">QHelpFilterEngine::availableComponents</db:link>() should be used instead.</db:para>
<db:para>Returns a list of all defined filter attributes.</db:para>
</db:section>
<db:section xml:id="filterAttributes-1">
<db:title>QStringList QHelpEngineCore::filterAttributes(const QString &amp;<db:emphasis>filterName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>filterAttributes</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList filterAttributes(const QString &amp;filterName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para><db:link xlink:href="qhelpfilterengine.xml#filterData">QHelpFilterEngine::filterData</db:link>() should be used instead.</db:para>
<db:para>Returns a list of filter attributes used by the custom filter <db:code role="parameter">filterName</db:code>.</db:para>
</db:section>
<db:section xml:id="readersAboutToBeInvalidated">
<db:title>void QHelpEngineCore::readersAboutToBeInvalidated()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>readersAboutToBeInvalidated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void readersAboutToBeInvalidated()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
</db:section>
<db:section xml:id="removeCustomFilter">
<db:title>bool QHelpEngineCore::removeCustomFilter(const QString &amp;<db:emphasis>filterName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removeCustomFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeCustomFilter(const QString &amp;filterName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para><db:link xlink:href="qhelpfilterengine.xml#removeFilter">QHelpFilterEngine::removeFilter</db:link>() should be used instead.</db:para>
<db:para>Returns true if the filter <db:code role="parameter">filterName</db:code> was removed successfully, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#addCustomFilter">addCustomFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#customFilters">customFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
