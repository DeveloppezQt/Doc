<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHelpEngineCore Class</db:title>
<db:productname>QtHelp</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Help Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link> class provides the core functionality of the help system.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHelpEngineCore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += help</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qhelpengine.xml" xlink:role="class">QHelpEngine</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Before the help engine can be used, it must be initialized by calling <db:link xlink:href="qhelpenginecore.xml#setupData">setupData</db:link>(). At the beginning of the setup process the signal <db:link xlink:href="qhelpenginecore.xml#setupStarted">setupStarted</db:link>() is emitted. From this point on until the signal <db:link xlink:href="qhelpenginecore.xml#setupFinished">setupFinished</db:link>() is emitted, is the help data in an undefined meaning unusable state.</db:para>
<db:para>The core help engine can be used to perform different tasks. By calling <db:link xlink:href="qhelpenginecore.xml#linksForIdentifier">linksForIdentifier</db:link>() the engine returns urls specifying the file locations inside the help system. The actual file data can then be retrived by calling <db:link xlink:href="qhelpenginecore.xml#fileData">fileData</db:link>(). In contrast to all other functions in this class, <db:link xlink:href="qhelpenginecore.xml#linksForIdentifier">linksForIdentifier</db:link>() depends on the currently set custom filter. Depending on the filter, the function may return different hits.</db:para>
<db:para>Every help engine can contain any number of custom filters. A custom filter is defined by a name and set of filter attributes and can be added to the help engine by calling <db:link xlink:href="qhelpenginecore.xml#addCustomFilter">addCustomFilter</db:link>(). Analogous, it is removed by calling <db:link xlink:href="qhelpenginecore.xml#removeCustomFilter">removeCustomFilter</db:link>(). <db:link xlink:href="qhelpenginecore.xml#customFilters">customFilters</db:link>() returns all defined filters.</db:para>
<db:para>The help engine also offers the possibility to set and read values in a persistant way comparable to ini files or Windows registry entries. For more information see setValue() or value().</db:para>
<db:para>This class does not offer any GUI components or functionality for indices or contents. If you need one of those use <db:link xlink:href="qhelpengine.xml">QHelpEngine</db:link> instead.</db:para>
<db:para>When creating a custom help viewer the viewer can be configured by writing a custom collection file which could contain various keywords to be used to configure the help engine. These keywords and values and their meaning can be found in the help information for <db:link xlink:href="assistant-custom-help-viewer.xml#creating-a-custom-help-collection-file">creating a custom help collection file</db:link> for Assistant.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoSaveFilter-prop">
<db:title>[since 4.5] autoSaveFilter : bool</db:title>
<db:para>This property holds whether <db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link> is in auto save filter mode or not.</db:para>
<db:para>If <db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link> is in auto save filter mode, the current filter is automatically saved when it is changed by the <db:link xlink:href="qhelpenginecore.xml#currentFilter-prop">setCurrentFilter</db:link>() function. The filter is saved persistently in the help collection file.</db:para>
<db:para>By default, this mode is on.</db:para>
<db:para>This property was introduced in Qt 4.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoSaveFilter</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoSaveFilter</db:emphasis>(<db:type>bool</db:type> <db:emphasis>save</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="collectionFile-prop">
<db:title>[since 4.5] collectionFile : QString</db:title>
<db:para>This property holds the absolute file name of the collection file currently used.</db:para>
<db:para>Setting this property leaves the help engine in an invalid state. It is important to invoke <db:link xlink:href="qhelpenginecore.xml#setupData">setupData</db:link>() or any getter function in order to setup the help engine again.</db:para>
<db:para>This property was introduced in Qt 4.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">collectionFile</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCollectionFile</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>fileName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentFilter-prop">
<db:title>[since 4.5] currentFilter : QString</db:title>
<db:para>This property holds the name of the custom filter currently applied.</db:para>
<db:para>Setting this property will save the new custom filter permanently in the help collection file. To set a custom filter without saving it permanently, disable the auto save filter mode.</db:para>
<db:para>This property was introduced in Qt 4.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">currentFilter</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentFilter</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>filterName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#autoSaveFilter-prop">autoSaveFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHelpEngineCore">
<db:title>[explicit] QHelpEngineCore::QHelpEngineCore(const QString &amp;<db:emphasis>collectionFile</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new core help engine with a <db:code role="parameter">parent</db:code>. The help engine uses the information stored in the <db:code role="parameter">collectionFile</db:code> to provide help. If the collection file does not exist yet, it'll be created.</db:para>
</db:section>
<db:section xml:id="dtor.QHelpEngineCore">
<db:title>[virtual noexcept] QHelpEngineCore::~QHelpEngineCore()</db:title>
<db:para>Destructs the help engine.</db:para>
</db:section>
<db:section xml:id="addCustomFilter">
<db:title>bool QHelpEngineCore::addCustomFilter(const QString &amp;<db:emphasis>filterName</db:emphasis>, const QStringList &amp;<db:emphasis>attributes</db:emphasis>)</db:title>
<db:para>Adds the new custom filter <db:code role="parameter">filterName</db:code>. The filter attributes are specified by <db:code role="parameter">attributes</db:code>. If the filter already exists, its attribute set is replaced. The function returns true if the operation succeeded, otherwise it returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#customFilters">customFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#removeCustomFilter">removeCustomFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copyCollectionFile">
<db:title>bool QHelpEngineCore::copyCollectionFile(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Creates the file <db:code role="parameter">fileName</db:code> and copies all contents from the current collection file into the newly created file, and returns true if successful; otherwise returns false.</db:para>
<db:para>The copying process makes sure that file references to Qt Collection files (<db:code>.qch</db:code>) files are updated accordingly.</db:para>
</db:section>
<db:section xml:id="currentFilterChanged">
<db:title>void QHelpEngineCore::currentFilterChanged(const QString &amp;<db:emphasis>newFilter</db:emphasis>)</db:title>
<db:para>This signal is emitted when the current filter is changed to <db:code role="parameter">newFilter</db:code>.</db:para>
</db:section>
<db:section xml:id="customFilters">
<db:title>QStringList QHelpEngineCore::customFilters() const</db:title>
<db:para>Returns a list of custom filters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#addCustomFilter">addCustomFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#removeCustomFilter">removeCustomFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="customValue">
<db:title>QVariant QHelpEngineCore::customValue(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>defaultValue</db:emphasis> = QVariant()) const</db:title>
<db:para>Returns the value assigned to the <db:code role="parameter">key</db:code>. If the requested key does not exist, the specified <db:code role="parameter">defaultValue</db:code> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#setCustomValue">setCustomValue</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#removeCustomValue">removeCustomValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentationFileName">
<db:title>QString QHelpEngineCore::documentationFileName(const QString &amp;<db:emphasis>namespaceName</db:emphasis>)</db:title>
<db:para>Returns the absolute file name of the Qt compressed help file (.qch) identified by the <db:code role="parameter">namespaceName</db:code>. If there is no Qt compressed help file with the specified namespace registered, an empty string is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#namespaceName">namespaceName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QString QHelpEngineCore::error() const</db:title>
<db:para>Returns a description of the last error that occurred.</db:para>
</db:section>
<db:section xml:id="fileData">
<db:title>QByteArray QHelpEngineCore::fileData(const QUrl &amp;<db:emphasis>url</db:emphasis>) const</db:title>
<db:para>Returns the data of the file specified by <db:code role="parameter">url</db:code>. If the file does not exist, an empty <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#findFile">findFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="files">
<db:title>QList&lt;QUrl&gt; QHelpEngineCore::files(const QString <db:emphasis>namespaceName</db:emphasis>, const QStringList &amp;<db:emphasis>filterAttributes</db:emphasis>, const QString &amp;<db:emphasis>extensionFilter</db:emphasis> = QString())</db:title>
<db:para>Returns a list of files contained in the Qt compressed help file <db:code role="parameter">namespaceName</db:code>. The files can be filtered by <db:code role="parameter">filterAttributes</db:code> as well as by their extension <db:code role="parameter">extensionFilter</db:code> (e.g. 'html').</db:para>
</db:section>
<db:section xml:id="filterAttributeSets">
<db:title>QList&lt;QStringList&gt; QHelpEngineCore::filterAttributeSets(const QString &amp;<db:emphasis>namespaceName</db:emphasis>) const</db:title>
<db:para>Returns a list of filter attributes for the different filter sections defined in the Qt compressed help file with the given namespace <db:code role="parameter">namespaceName</db:code>.</db:para>
</db:section>
<db:section xml:id="filterAttributes">
<db:title>QStringList QHelpEngineCore::filterAttributes() const</db:title>
<db:para>Returns a list of all defined filter attributes.</db:para>
</db:section>
<db:section xml:id="filterAttributes-1">
<db:title>QStringList QHelpEngineCore::filterAttributes(const QString &amp;<db:emphasis>filterName</db:emphasis>) const</db:title>
<db:para>Returns a list of filter attributes used by the custom filter <db:code role="parameter">filterName</db:code>.</db:para>
</db:section>
<db:section xml:id="findFile">
<db:title>QUrl QHelpEngineCore::findFile(const QUrl &amp;<db:emphasis>url</db:emphasis>) const</db:title>
<db:para>Returns an invalid URL if the file <db:code role="parameter">url</db:code> cannot be found. If the file exists, either the same url is returned or a different url if the file is located in a different namespace which is merged via a common virtual folder.</db:para>
</db:section>
<db:section xml:id="linksForIdentifier">
<db:title>QMap&lt;QString, QUrl&gt; QHelpEngineCore::linksForIdentifier(const QString &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:para>Returns a map of hits found for the <db:code role="parameter">id</db:code>. A hit contains the title of the document and the url where the keyword is located. The result depends on the current filter, meaning only the keywords registered for the current filter will be returned.</db:para>
</db:section>
<db:section xml:id="metaData">
<db:title>[static] QVariant QHelpEngineCore::metaData(const QString &amp;<db:emphasis>documentationFileName</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Returns the meta data for the Qt compressed help file <db:code role="parameter">documentationFileName</db:code>. If there is no data available for <db:code role="parameter">name</db:code>, an invalid QVariant() is returned. The meta data is defined when creating the Qt compressed help file and cannot be modified later. Common meta data includes e.g. the author of the documentation.</db:para>
</db:section>
<db:section xml:id="namespaceName">
<db:title>[static] QString QHelpEngineCore::namespaceName(const QString &amp;<db:emphasis>documentationFileName</db:emphasis>)</db:title>
<db:para>Returns the namespace name defined for the Qt compressed help file (.qch) specified by its <db:code role="parameter">documentationFileName</db:code>. If the file is not valid, an empty string is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#documentationFileName">documentationFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerDocumentation">
<db:title>bool QHelpEngineCore::registerDocumentation(const QString &amp;<db:emphasis>documentationFileName</db:emphasis>)</db:title>
<db:para>Registers the Qt compressed help file (.qch) contained in the file <db:code role="parameter">documentationFileName</db:code>. One compressed help file, uniquely identified by its namespace can only be registered once. True is returned if the registration was successful, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#unregisterDocumentation">unregisterDocumentation</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registeredDocumentations">
<db:title>QStringList QHelpEngineCore::registeredDocumentations() const</db:title>
<db:para>Returns a list of all registered Qt compressed help files of the current collection file. The returned names are the namespaces of the registered Qt compressed help files (.qch).</db:para>
</db:section>
<db:section xml:id="removeCustomFilter">
<db:title>bool QHelpEngineCore::removeCustomFilter(const QString &amp;<db:emphasis>filterName</db:emphasis>)</db:title>
<db:para>Returns true if the filter <db:code role="parameter">filterName</db:code> was removed successfully, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#addCustomFilter">addCustomFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#customFilters">customFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeCustomValue">
<db:title>bool QHelpEngineCore::removeCustomValue(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:para>Removes the <db:code role="parameter">key</db:code> from the settings section in the collection file. Returns true if the value was removed successfully, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#customValue">customValue</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#setCustomValue">setCustomValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCustomValue">
<db:title>bool QHelpEngineCore::setCustomValue(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Save the <db:code role="parameter">value</db:code> under the <db:code role="parameter">key</db:code>. If the key already exist, the value will be overwritten. Returns true if the value was saved successfully, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#customValue">customValue</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#removeCustomValue">removeCustomValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setupData">
<db:title>bool QHelpEngineCore::setupData()</db:title>
<db:para>Sets up the help engine by processing the information found in the collection file and returns true if successful; otherwise returns false.</db:para>
<db:para>By calling the function, the help engine is forced to initialize itself immediately. Most of the times, this function does not have to be called explicitly because getter functions which depend on a correctly set up help engine do that themselves.</db:para>
<db:note>
<db:para><db:code>qsqlite4.dll</db:code> needs to be deployed with the application as the help system uses the sqlite driver when loading help collections.</db:para>
</db:note>
</db:section>
<db:section xml:id="setupFinished">
<db:title>void QHelpEngineCore::setupFinished()</db:title>
<db:para>This signal is emitted when the setup is complete.</db:para>
</db:section>
<db:section xml:id="setupStarted">
<db:title>void QHelpEngineCore::setupStarted()</db:title>
<db:para>This signal is emitted when setup is started.</db:para>
</db:section>
<db:section xml:id="unregisterDocumentation">
<db:title>bool QHelpEngineCore::unregisterDocumentation(const QString &amp;<db:emphasis>namespaceName</db:emphasis>)</db:title>
<db:para>Unregisters the Qt compressed help file (.qch) identified by its <db:code role="parameter">namespaceName</db:code> from the help collection. Returns true on success, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml#registerDocumentation">registerDocumentation</db:link>()</db:member>
<db:member><db:link xlink:href="qhelpenginecore.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="warning">
<db:title>void QHelpEngineCore::warning(const QString &amp;<db:emphasis>msg</db:emphasis>)</db:title>
<db:para>This signal is emitted when a non critical error occurs. The warning message is stored in <db:code role="parameter">msg</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
