<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlatformGraphicsBufferHelper Namespace</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="bindSWToTexture">
<db:title>bool QPlatformGraphicsBufferHelper::bindSWToTexture(const int *<db:emphasis>graphicsBuffer</db:emphasis>, bool *<db:emphasis>swizzleRandB</db:emphasis> = Q_NULLPTR, bool *<db:emphasis>premultipliedB</db:emphasis> = Q_NULLPTR, const QRect &amp;<db:emphasis>subRect</db:emphasis> = QRect())</db:title>
<db:para>Convenience function that uploads the current raster content to the currently bound texture.</db:para>
<db:para><db:code role="parameter">swizzleRandB</db:code> is suppose to be used by the caller to figure out if the Red and Blue color channels need to be swizzled when rendering. This is an optimization. Qt often renders to software buffers interpreting pixels as unsigned ints. When these buffers are uploaded to textures and each color channel per pixel is interpreted as a byte (read sequentially), then the Red and Blue channels are swapped. Conveniently the Alpha buffer will be correct since Qt historically has had the alpha channel as the first channel, while OpenGL typically expects the alpha channel to be the last channel.</db:para>
<db:para><db:code role="parameter">subRect</db:code> is the subrect which is desired to be bounded to the texture. This argument has a no less than semantic, meaning more (if not all) of the buffer can be bounded to the texture. An empty <db:link xlink:href="qrect.xml">QRect</db:link> is interpreted as entire buffer should be bound.</db:para>
<db:para>This function fails for buffers not capable of locking to SWAccess.</db:para>
<db:para>Returns true on success, otherwise false.</db:para>
</db:section>
<db:section xml:id="lockAndBindToTexture">
<db:title>bool QPlatformGraphicsBufferHelper::lockAndBindToTexture(int *<db:emphasis>graphicsBuffer</db:emphasis>, bool *<db:emphasis>swizzle</db:emphasis>, bool *<db:emphasis>premultiplied</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis> = QRect())</db:title>
<db:para>Convenience function to both lock and bind the buffer to a texture. This function will first try and lock with texture read and texture write access. If this succeeds it will use the bindToTexture function to bind the content to the currently bound texture. If this fail it will try and lock with SWReadAccess and then use the <db:link xlink:href="qplatformgraphicsbufferhelper-sub-qtgui.xml#bindSWToTexture">bindSWToTexture</db:link> convenience function.</db:para>
<db:para><db:code role="parameter">swizzle</db:code> is suppose to be used by the caller to figure out if the Red and Blue color channels need to be swizzled when rendering.</db:para>
<db:para><db:code role="parameter">rect</db:code> is the subrect which is desired to be bounded to the texture. This argument has a no less than semantic, meaning more (if not all) of the buffer can be bounded to the texture. An empty <db:link xlink:href="qrect.xml">QRect</db:link> is interpreted as entire buffer should be bound.</db:para>
<db:para>The user should use the AccessTypes returned by isLocked to figure out what lock has been obtained.</db:para>
<db:para>returns true if the buffer has successfully been bound to the currently bound texture, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
