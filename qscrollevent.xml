<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScrollEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link> class is sent when scrolling.</db:para>
<db:para>This class was introduced in Qt 4.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScrollEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qevent.xml" xlink:role="class">QEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScrollEvent is part of <db:simplelist><db:member>events</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The scroll event is sent to indicate that the receiver should be scrolled. Usually the receiver should be something visual like <db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link>.</db:para>
<db:para>Some care should be taken that no conflicting QScrollEvents are sent from two sources. Using <db:link xlink:href="qscroller.xml#scrollTo">QScroller::scrollTo</db:link> is save however.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscrollprepareevent.xml">QScrollPrepareEvent</db:link></db:member>
<db:member><db:link xlink:href="qscroller.xml">QScroller</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ScrollState-enum">
<db:title>enum QScrollEvent::ScrollState</db:title>
<db:enumsynopsis>
<db:enumname>ScrollState</db:enumname>
<db:enumitem>
<db:enumidentifier>ScrollStarted</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ScrollUpdated</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ScrollFinished</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the states a scroll event can have.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link></db:emphasis>::ScrollStarted</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Set for the first scroll event of a scroll activity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link></db:emphasis>::ScrollUpdated</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Set for all but the first and the last scroll event of a scroll activity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link></db:emphasis>::ScrollFinished</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Set for the last scroll event of a scroll activity.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscrollevent.xml#scrollState">QScrollEvent::scrollState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScrollEvent">
<db:title>QScrollEvent::QScrollEvent(const QPointF &amp;<db:emphasis>contentPos</db:emphasis>, const QPointF &amp;<db:emphasis>overshootDistance</db:emphasis>, QScrollEvent::ScrollState <db:emphasis>scrollState</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QScrollEvent</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>contentPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>overshootDistance</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QScrollEvent::ScrollState</db:type>
<db:parameter>scrollState</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QScrollEvent(const QPointF &amp;contentPos, const QPointF &amp;overshootDistance, QScrollEvent::ScrollState scrollState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new <db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link> <db:code role="parameter">contentPos</db:code> is the new content position, <db:code role="parameter">overshootDistance</db:code> is the new overshoot distance while <db:code role="parameter">scrollState</db:code> indicates if this scroll event is the first one, the last one or some event in between.</db:para>
</db:section>
<db:section xml:id="dtor.QScrollEvent">
<db:title>[virtual] QScrollEvent::~QScrollEvent()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QScrollEvent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QScrollEvent()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys <db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link>.</db:para>
</db:section>
<db:section xml:id="contentPos">
<db:title>QPointF QScrollEvent::contentPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>contentPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF contentPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the new scroll position.</db:para>
</db:section>
<db:section xml:id="overshootDistance">
<db:title>QPointF QScrollEvent::overshootDistance() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>overshootDistance</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF overshootDistance() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the new overshoot distance. See <db:link xlink:href="qscroller.xml">QScroller</db:link> for an explanation of the term overshoot.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml">QScroller</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollState">
<db:title>QScrollEvent::ScrollState QScrollEvent::scrollState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QScrollEvent::ScrollState</db:type>
<db:methodname>scrollState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScrollEvent::ScrollState scrollState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current scroll state as a combination of ScrollStateFlag values. <db:link xlink:href="qscrollevent.xml#ScrollState-enum">ScrollStarted</db:link> (or <db:link xlink:href="qscrollevent.xml#ScrollState-enum">ScrollFinished</db:link>) will be set, if this scroll event is the first (or last) event in a scrolling activity. Please note that both values can be set at the same time, if the activity consists of a single <db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link>. All other scroll events in between will have their state set to <db:link xlink:href="qscrollevent.xml#ScrollState-enum">ScrollUpdated</db:link>.</db:para>
<db:para>A widget could for example revert selections when scrolling is started and stopped.</db:para>
</db:section>
</db:section>
</db:article>
