<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MapItemView Transitions (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to use transitions together with <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:informalfigure>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/itemview_transitions.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:informalfigure>
<db:para><db:emphasis><db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link> Transitions</db:emphasis> demonstrates how to use the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> item to render a map. It shows the minimum amount of code needed to display the map, and can be used as a basis for further experimentation.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="qml-code">
<db:title>QML Code</db:title>
<db:para>In <db:code>main.qml</db:code>, two <db:emphasis><db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link></db:emphasis> elements are used, to add to the map the administrative districts for the Oslo region, and to add a marker upon long-press.</db:para>
<db:programlisting language="qml">MapItemView {
    id: mivMarker

    add: Transition {
        NumberAnimation {
            property: &quot;slideIn&quot;
            from: 50
            to: 0
            duration: 500
            easing.type: Easing.OutBounce
            easing.amplitude: 3.0
        }
    }

    remove: Transition {
        NumberAnimation {
            property: &quot;opacity&quot;
            to: 0.1
            duration: 50
        }
    }

    model: ListModel {
        id: markerModel
    }
    delegate: Component {
        MapQuickItem {
            coordinate: QtPositioning.coordinate(latitude, longitude)
            anchorPoint: Qt.point(e1.width * 0.5, e1.height + slideIn)
            property real slideIn : 0
            sourceItem: Shape {
                id: e1
                vendorExtensionsEnabled: false
                width: 32
                height: 32
                visible: true

                transform: Scale {
                    origin.y: e1.height * 0.5
                    yScale: -1
                }

                ShapePath {
                    id: c_sp1
                    strokeWidth: -1
                    fillColor: Qt.rgba(1,0,1,1.0)

                    property real half: e1.width * 0.5
                    property real quarter: e1.width * 0.25
                    property point center: Qt.point(e1.x + e1.width * 0.5 , e1.y + e1.height * 0.5)

                    property point top: Qt.point(center.x, center.y - half )
                    property point bottomLeft: Qt.point(center.x - half, center.y + half )
                    property point bottomRight: Qt.point(center.x + half, center.y + half )

                    startX: center.x;
                    startY: center.y + half

                    PathLine { x: c_sp1.bottomLeft.x; y: c_sp1.bottomLeft.y }
                    PathLine { x: c_sp1.top.x; y: c_sp1.top.y }
                    PathLine { x: c_sp1.bottomRight.x; y: c_sp1.bottomRight.y }
                    PathLine { x: c_sp1.center.x; y: c_sp1.center.y + c_sp1.half }
                }
            }
        }
    }
}
</db:programlisting>
<db:para>The marker view specifies both the add and the remove transition, to create a bouncing marker effect.</db:para>
<db:programlisting language="qml">MapItemView {
    id: miv
    model: OsloListModel {
        id: osloListModel
    }
    add: Transition {
        NumberAnimation {
            property: &quot;animationScale&quot;
            from: 0.2
            to: 1
            duration: 800
            easing.type: Easing.OutCubic
        }
    }
    delegate: Component {
        MapPolygon {
            function fromMercator(l, centroid) {
                var res = []
                for (var i  = 0; i &amp;lt; l.length; i++) {
                    var vtx = l[i]
                    var offset = Qt.point((vtx.x - centroid.x) * animationScale,
                                          (vtx.y - centroid.y) * animationScale)
                    var pt = Qt.point(centroid.x + offset.x, centroid.y + offset.y)
                    res.push( QtPositioning.mercatorToCoord(pt) )
                }
                return res;
            }

            path: fromMercator(osloListModel.geometries[name+&quot;_&quot;+adminLevel]
                               , osloListModel.centroids[name+&quot;_&quot;+adminLevel] )
            color: ((adminLevel &amp;gt; 4) ? &quot;lightsteelblue&quot; : 'firebrick')
            property real animationScale : 1
            opacity: ((adminLevel &amp;lt; 9) ? 0.1 : 0.8)
            visible: true
        }
    }
}
</db:programlisting>
<db:para>The administrative districts view specifies only the add transition, to create a district growing effect.</db:para>
</db:section>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:para>The example requires a working internet connection to download <db:code>OpenStreetMap</db:code> map tiles. An optional system proxy should be picked up automatically.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="itemview_transitions/OsloListModel.qml">itemview_transitions/OsloListModel.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemview_transitions/itemview_transitions.pro">itemview_transitions/itemview_transitions.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemview_transitions/main.cpp">itemview_transitions/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemview_transitions/main.qml">itemview_transitions/main.qml</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
