<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLegend Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlegend.xml">QLegend</db:link> class displays the legend of a chart.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLegend</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtcharts-legend.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicswidget.xml" xlink:role="class">QGraphicsWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A legend is a graphical object that displays the legend of a chart. The legend state is updated by <db:link xlink:href="qchart.xml">QChart</db:link> when series change. By default, the legend is attached to the chart, but it can be detached to make it independent of chart layout. Legend objects cannot be created or deleted, but they can be referenced via the <db:link xlink:href="qchart.xml">QChart</db:link> class.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_percentbarchart_legend.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml">QChart</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MarkerShape-enum">
<db:title>enum QLegend::MarkerShape</db:title>
<db:enumsynopsis>
<db:enumname>MarkerShape</db:enumname>
<db:enumitem>
<db:enumidentifier>MarkerShapeDefault</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MarkerShapeRectangle</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MarkerShapeCircle</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MarkerShapeFromSeries</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MarkerShapeRotatedRectangle</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MarkerShapeTriangle</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MarkerShapeStar</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MarkerShapePentagon</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the shape used when rendering legend marker items.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlegend.xml">QLegend</db:link></db:emphasis>::MarkerShapeDefault</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Default shape determined by <db:link xlink:href="qlegend.xml">QLegend</db:link> is used for the marker. This value is supported only for individual <db:link xlink:href="qlegendmarker.xml">QLegendMarker</db:link> items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlegend.xml">QLegend</db:link></db:emphasis>::MarkerShapeRectangle</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Rectangular markers are used. Marker size is determined by font size.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlegend.xml">QLegend</db:link></db:emphasis>::MarkerShapeCircle</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Circular markers are used. Marker size is determined by font size.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlegend.xml">QLegend</db:link></db:emphasis>::MarkerShapeRotatedRectangle</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Rotated rectangle shaped markers are used. Marker size is determined by font size.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlegend.xml">QLegend</db:link></db:emphasis>::MarkerShapeTriangle</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Triangular markers are used. Marker size is determined by font size.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlegend.xml">QLegend</db:link></db:emphasis>::MarkerShapeStar</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Star shaped markers are used. Marker size is determined by font size.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlegend.xml">QLegend</db:link></db:emphasis>::MarkerShapePentagon</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Pentagon shaped markers are used. Marker size is determined by font size.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlegend.xml">QLegend</db:link></db:emphasis>::MarkerShapeFromSeries</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The marker shape is determined by the series. In case of a scatter series, the legend marker looks like a scatter dot and is the same size as the dot. In case of a line or spline series, the legend marker looks like a small segment of the line. For other series types, rectangular markers are shown. If a <db:code>lightMarker</db:code> is specified for a series, the <db:code>lightMarker</db:code> will be shown and its size will be determined by the series marker size.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#markerShape-prop">markerShape</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alignment-prop">
<db:title>alignment : Qt::Alignment</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:varname>alignment</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">alignment</db:synopsisinfo>
<db:synopsisinfo role="setter">setAlignment</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>How the legend is aligned with the chart.</db:para>
<db:para>Can be <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link>, <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link>, <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link>, <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link>. If you set more than one flag, the result is undefined.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">alignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAlignment</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis>alignment</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="backgroundVisible-prop">
<db:title>backgroundVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>backgroundVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isBackgroundVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setBackgroundVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">backgroundVisibleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the legend background is visible.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#isBackgroundVisible">isBackgroundVisible</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#setBackgroundVisible">setBackgroundVisible</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#backgroundVisibleChanged">backgroundVisibleChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="borderColor-prop">
<db:title>borderColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>borderColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">borderColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setBorderColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">borderColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the line color of the legend.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">borderColor</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBorderColor</db:emphasis>(<db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#borderColorChanged">borderColorChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="color-prop">
<db:title>color : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>color</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">color</db:synopsisinfo>
<db:synopsisinfo role="setter">setColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">colorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the background (brush) color of the legend.</db:para>
<db:para>If you change the color of the legend, the style of the legend brush is set to <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::SolidPattern</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">color</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setColor</db:emphasis>(<db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#colorChanged">colorChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="font-prop">
<db:title>font : QFont</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QFont</db:type>
<db:varname>font</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">font</db:synopsisinfo>
<db:synopsisinfo role="getter">font</db:synopsisinfo>
<db:synopsisinfo role="setter">setFont</db:synopsisinfo>
<db:synopsisinfo role="setter">setFont</db:synopsisinfo>
<db:synopsisinfo role="notifier">fontChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the font of the markers used by the legend.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicswidget.xml#font-prop">font</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> <db:emphasis role="bold">font</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicswidget.xml#font-prop">setFont</db:link></db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFont</db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#fontChanged">fontChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> <db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="labelColor-prop">
<db:title>labelColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>labelColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">labelColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setLabelColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">labelColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color of the brush used to draw labels.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">labelColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLabelColor</db:emphasis>(<db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#labelColorChanged">labelColorChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="markerShape-prop">
<db:title>[since 5.9] markerShape : MarkerShape</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>MarkerShape</db:type>
<db:varname>markerShape</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">markerShape</db:synopsisinfo>
<db:synopsisinfo role="setter">setMarkerShape</db:synopsisinfo>
<db:synopsisinfo role="notifier">markerShapeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The default shape of the legend markers. The default value is <db:code>MarkerShapeRectangle</db:code>.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlegend.xml#MarkerShape-enum">QLegend::MarkerShape</db:link></db:type> <db:emphasis role="bold">markerShape</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMarkerShape</db:emphasis>(<db:type><db:link xlink:href="qlegend.xml#MarkerShape-enum">QLegend::MarkerShape</db:link></db:type> <db:emphasis>shape</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">markerShapeChanged</db:emphasis>(<db:type><db:link xlink:href="qlegend.xml#MarkerShape-enum">QLegend::MarkerShape</db:link></db:type> <db:emphasis>shape</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="reverseMarkers-prop">
<db:title>reverseMarkers : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>reverseMarkers</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">reverseMarkers</db:synopsisinfo>
<db:synopsisinfo role="setter">setReverseMarkers</db:synopsisinfo>
<db:synopsisinfo role="notifier">reverseMarkersChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether reverse order is used for the markers in the legend.</db:para>
<db:para>This property is <db:code>false</db:code> by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">reverseMarkers</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setReverseMarkers</db:emphasis>(<db:type>bool</db:type> <db:emphasis>reverseMarkers</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#reverseMarkersChanged">reverseMarkersChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>reverseMarkers</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="showToolTips-prop">
<db:title>showToolTips : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>showToolTips</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">showToolTips</db:synopsisinfo>
<db:synopsisinfo role="setter">setShowToolTips</db:synopsisinfo>
<db:synopsisinfo role="notifier">showToolTipsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether tooltips are shown when the text is truncated.</db:para>
<db:para>This property is <db:code>false</db:code> by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#showToolTips">showToolTips</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#setShowToolTips">setShowToolTips</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>show</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlegend.xml#showToolTipsChanged">showToolTipsChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>showToolTips</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QLegend">
<db:title>[virtual] QLegend::~QLegend()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QLegend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QLegend()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the legend object. The legend is always owned by a <db:link xlink:href="qchart.xml">QChart</db:link>, so an application should never call this function.</db:para>
</db:section>
<db:section xml:id="attachToChart">
<db:title>void QLegend::attachToChart()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>attachToChart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void attachToChart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attaches the legend to a chart. The chart may adjust the layout of the legend.</db:para>
</db:section>
<db:section xml:id="attachedToChartChanged">
<db:title>[since 6.2] void QLegend::attachedToChartChanged(bool <db:emphasis>attached</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>attachedToChartChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>attached</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void attachedToChartChanged(bool attached)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the legend is <db:code role="parameter">attached</db:code> to or detached from the chart.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="backgroundVisibleChanged">
<db:title>void QLegend::backgroundVisibleChanged(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>backgroundVisibleChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">backgroundVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void backgroundVisibleChanged(bool visible)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the visibility of the legend background changes to <db:code role="parameter">visible</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qlegend.xml#backgroundVisible-prop">backgroundVisible</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="borderColorChanged">
<db:title>void QLegend::borderColorChanged(QColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>borderColorChanged</db:methodname>
<db:methodparam>
<db:type>QColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">borderColor</db:synopsisinfo>
<db:synopsisinfo role="signature">void borderColorChanged(QColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the border color of the legend background changes to <db:code role="parameter">color</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qlegend.xml#borderColor-prop">borderColor</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="brush">
<db:title>QBrush QLegend::brush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>brush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush brush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used by the legend.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#setBrush">setBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorChanged">
<db:title>void QLegend::colorChanged(QColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>colorChanged</db:methodname>
<db:methodparam>
<db:type>QColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">color</db:synopsisinfo>
<db:synopsisinfo role="signature">void colorChanged(QColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the color of the legend background changes to <db:code role="parameter">color</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qlegend.xml#color-prop">color</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="detachFromChart">
<db:title>void QLegend::detachFromChart()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>detachFromChart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void detachFromChart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Detaches the legend from the chart. The chart will no longer adjust the layout of the legend.</db:para>
</db:section>
<db:section xml:id="fontChanged">
<db:title>void QLegend::fontChanged(QFont <db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fontChanged</db:methodname>
<db:methodparam>
<db:type>QFont</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">font</db:synopsisinfo>
<db:synopsisinfo role="signature">void fontChanged(QFont font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the font of the markers of the legend changes to <db:code role="parameter">font</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qlegend.xml#font-prop">font</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isAttachedToChart">
<db:title>bool QLegend::isAttachedToChart()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isAttachedToChart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAttachedToChart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code>, if the legend is attached to a chart.</db:para>
</db:section>
<db:section xml:id="isBackgroundVisible">
<db:title>bool QLegend::isBackgroundVisible() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBackgroundVisible</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">backgroundVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBackgroundVisible() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the visibility of the legend background.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qlegend.xml#backgroundVisible-prop">backgroundVisible</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isInteractive">
<db:title>[since 6.2] bool QLegend::isInteractive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isInteractive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isInteractive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the legend can be dragged or resized using a mouse when it is detached.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#setInteractive">QLegend::setInteractive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelBrush">
<db:title>QBrush QLegend::labelBrush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>labelBrush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush labelBrush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to draw labels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#setLabelBrush">setLabelBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelColorChanged">
<db:title>void QLegend::labelColorChanged(QColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>labelColorChanged</db:methodname>
<db:methodparam>
<db:type>QColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">labelColor</db:synopsisinfo>
<db:synopsisinfo role="signature">void labelColorChanged(QColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the color of the brush used to draw the legend labels changes to <db:code role="parameter">color</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qlegend.xml#labelColor-prop">labelColor</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="markers">
<db:title>QList&lt;QLegendMarker *&gt; QLegend::markers(QAbstractSeries *<db:emphasis>series</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QLegendMarker *&gt;</db:type>
<db:methodname>markers</db:methodname>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QLegendMarker *&gt; markers(QAbstractSeries *series) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of markers in the legend. The list can be filtered by specifying the <db:code role="parameter">series</db:code> for which the markers are returned.</db:para>
</db:section>
<db:section xml:id="pen">
<db:title>QPen QLegend::pen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPen</db:type>
<db:methodname>pen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen pen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen used by the legend.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reverseMarkersChanged">
<db:title>void QLegend::reverseMarkersChanged(bool <db:emphasis>reverseMarkers</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reverseMarkersChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>reverseMarkers</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">reverseMarkers</db:synopsisinfo>
<db:synopsisinfo role="signature">void reverseMarkersChanged(bool reverseMarkers)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the use of reverse order for the markers in the legend is changed to <db:code role="parameter">reverseMarkers</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qlegend.xml#reverseMarkers-prop">reverseMarkers</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="setBackgroundVisible">
<db:title>void QLegend::setBackgroundVisible(bool <db:emphasis>visible</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBackgroundVisible</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">backgroundVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBackgroundVisible(bool visible)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the visibility of the legend background to <db:code role="parameter">visible</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qlegend.xml#backgroundVisible-prop">backgroundVisible</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#isBackgroundVisible">isBackgroundVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBrush">
<db:title>void QLegend::setBrush(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrush(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">brush</db:code> that is used to draw the background of the legend.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInteractive">
<db:title>[since 6.2] void QLegend::setInteractive(bool <db:emphasis>interactive</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInteractive</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>interactive</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInteractive(bool interactive)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When <db:code role="parameter">interactive</db:code> is <db:code>true</db:code> and the legend is detached, the legend is able to be moved and resized with a mouse in a similar way to a window.</db:para>
<db:para>The legend will automatically attach to an edge of the chart by dragging it off of that edge. Double clicking an attached legend will detach it. This is <db:code>false</db:code> by default.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#isInteractive">QLegend::isInteractive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLabelBrush">
<db:title>void QLegend::setLabelBrush(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLabelBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLabelBrush(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush used to draw the legend labels to <db:code role="parameter">brush</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#labelBrush">labelBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPen">
<db:title>void QLegend::setPen(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPen</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPen(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">pen</db:code> that is used to draw the legend borders.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#pen">pen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShowToolTips">
<db:title>void QLegend::setShowToolTips(bool <db:emphasis>show</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setShowToolTips</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>show</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">showToolTips</db:synopsisinfo>
<db:synopsisinfo role="signature">void setShowToolTips(bool show)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When <db:code role="parameter">show</db:code> is <db:code>true</db:code>, the legend labels will show a tooltip when the mouse hovers over them if the label itself is shown elided. This is <db:code>false</db:code> by default.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qlegend.xml#showToolTips-prop">showToolTips</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#showToolTips">showToolTips</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showToolTips">
<db:title>bool QLegend::showToolTips() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>showToolTips</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">showToolTips</db:synopsisinfo>
<db:synopsisinfo role="signature">bool showToolTips() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the tooltips are shown for the legend labels when they are elided.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qlegend.xml#showToolTips-prop">showToolTips</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlegend.xml#setShowToolTips">setShowToolTips</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showToolTipsChanged">
<db:title>void QLegend::showToolTipsChanged(bool <db:emphasis>showToolTips</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showToolTipsChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>showToolTips</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">showToolTips</db:synopsisinfo>
<db:synopsisinfo role="signature">void showToolTipsChanged(bool showToolTips)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the visibility of tooltips is changed to <db:code role="parameter">showToolTips</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qlegend.xml#showToolTips-prop">showToolTips</db:link>. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
