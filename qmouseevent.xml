<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMouseEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link> class contains parameters that describe a mouse event.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMouseEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsinglepointevent.xml" xlink:role="class">QSinglePointEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMouseEvent is part of <db:simplelist><db:member>events</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Mouse events occur when a mouse button is pressed or released inside a widget, or when the mouse cursor is moved.</db:para>
<db:para>Mouse move events will occur only when a mouse button is pressed down, unless mouse tracking has been enabled with <db:link xlink:href="qwidget.xml#mouseTracking-prop">QWidget::setMouseTracking</db:link>().</db:para>
<db:para>Qt automatically grabs the mouse when a mouse button is pressed inside a widget; the widget will continue to receive mouse events until the last mouse button is released.</db:para>
<db:para>A mouse event contains a special accept flag that indicates whether the receiver wants the event. You should call <db:link xlink:href="qevent.xml#ignore">ignore</db:link>() if the mouse event is not handled by your widget. A mouse event is propagated up the parent widget chain until a widget accepts it with <db:link xlink:href="qevent.xml#accept">accept</db:link>(), or an event filter consumes it.</db:para>
<db:note>
<db:para>If a mouse event is propagated to a <db:link xlink:href="qwidget.xml">widget</db:link> for which <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_NoMousePropagation</db:link> has been set, that mouse event will not be propagated further up the parent widget chain.</db:para>
</db:note>
<db:para>The state of the keyboard modifier keys can be found by calling the <db:link xlink:href="qinputevent.xml#modifiers">modifiers</db:link>() function, inherited from <db:link xlink:href="qinputevent.xml">QInputEvent</db:link>.</db:para>
<db:para>The <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>() function gives the cursor position relative to the widget or item that receives the mouse event. If you move the widget as a result of the mouse event, use the global position returned by <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>() to avoid a shaking motion.</db:para>
<db:para>The <db:link xlink:href="qwidget.xml#enabled-prop">QWidget::setEnabled</db:link>() function can be used to enable or disable mouse and keyboard events for a widget.</db:para>
<db:para>Reimplement the <db:link xlink:href="qwidget.xml">QWidget</db:link> event handlers, <db:link xlink:href="qwidget.xml#mousePressEvent">QWidget::mousePressEvent</db:link>(), <db:link xlink:href="qwidget.xml#mouseReleaseEvent">QWidget::mouseReleaseEvent</db:link>(), <db:link xlink:href="qwidget.xml#mouseDoubleClickEvent">QWidget::mouseDoubleClickEvent</db:link>(), and <db:link xlink:href="qwidget.xml#mouseMoveEvent">QWidget::mouseMoveEvent</db:link>() to receive mouse events in your own widgets.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#mouseTracking-prop">QWidget::setMouseTracking</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#grabMouse">QWidget::grabMouse</db:link>()</db:member>
<db:member><db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMouseEvent-3">
<db:title>QMouseEvent::QMouseEvent(QEvent::Type <db:emphasis>type</db:emphasis>, const QPointF &amp;<db:emphasis>localPos</db:emphasis>, const QPointF &amp;<db:emphasis>globalPos</db:emphasis>, Qt::MouseButton <db:emphasis>button</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, const QPointingDevice *<db:emphasis>device</db:emphasis> = QPointingDevice::primaryPointingDevice())</db:title>
<db:constructorsynopsis>
<db:methodname>QMouseEvent</db:methodname>
<db:methodparam>
<db:type>QEvent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>localPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>globalPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MouseButton</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MouseButtons</db:type>
<db:parameter>buttons</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::KeyboardModifiers</db:type>
<db:parameter>modifiers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointingDevice *</db:type>
<db:parameter>device</db:parameter>
<db:initializer>QPointingDevice::primaryPointingDevice()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QMouseEvent(QEvent::Type type, const QPointF &amp;localPos, const QPointF &amp;globalPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, const QPointingDevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a mouse event object originating from <db:code role="parameter">device</db:code>.</db:para>
<db:para>The <db:code role="parameter">type</db:code> parameter must be <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonPress</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonRelease</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonDblClick</db:link>, or <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseMove</db:link>.</db:para>
<db:para>The <db:code role="parameter">localPos</db:code> is the mouse cursor's position relative to the receiving widget or item. The cursor's position in screen coordinates is specified by <db:code role="parameter">globalPos</db:code>. The window position is set to the same value as <db:code role="parameter">localPos</db:code>. The <db:code role="parameter">button</db:code> that caused the event is given as a value from the <db:link xlink:href="qt.xml#MouseButton-enum">Qt::MouseButton</db:link> enum. If the event <db:code role="parameter">type</db:code> is <db:link xlink:href="qevent.xml#Type-enum">MouseMove</db:link>, the appropriate button for this event is <db:link xlink:href="qt.xml#MouseButton-enum">Qt::NoButton</db:link>. <db:code role="parameter">buttons</db:code> is the state of all buttons at the time of the event, <db:code role="parameter">modifiers</db:code> the state of all keyboard modifiers.</db:para>
</db:section>
<db:section xml:id="QMouseEvent-4">
<db:title>QMouseEvent::QMouseEvent(QEvent::Type <db:emphasis>type</db:emphasis>, const QPointF &amp;<db:emphasis>localPos</db:emphasis>, const QPointF &amp;<db:emphasis>scenePos</db:emphasis>, const QPointF &amp;<db:emphasis>globalPos</db:emphasis>, Qt::MouseButton <db:emphasis>button</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, const QPointingDevice *<db:emphasis>device</db:emphasis> = QPointingDevice::primaryPointingDevice())</db:title>
<db:constructorsynopsis>
<db:methodname>QMouseEvent</db:methodname>
<db:methodparam>
<db:type>QEvent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>localPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>scenePos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>globalPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MouseButton</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MouseButtons</db:type>
<db:parameter>buttons</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::KeyboardModifiers</db:type>
<db:parameter>modifiers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointingDevice *</db:type>
<db:parameter>device</db:parameter>
<db:initializer>QPointingDevice::primaryPointingDevice()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QMouseEvent(QEvent::Type type, const QPointF &amp;localPos, const QPointF &amp;scenePos, const QPointF &amp;globalPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, const QPointingDevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a mouse event object.</db:para>
<db:para>The <db:code role="parameter">type</db:code> parameter must be <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonPress</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonRelease</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonDblClick</db:link>, or <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseMove</db:link>.</db:para>
<db:para>The points <db:code role="parameter">localPos</db:code>, <db:code role="parameter">scenePos</db:code> and <db:code role="parameter">globalPos</db:code> specify the mouse cursor's position relative to the receiving widget or item, window, and screen or desktop, respectively.</db:para>
<db:para>The <db:code role="parameter">button</db:code> that caused the event is given as a value from the <db:link xlink:href="qt.xml#MouseButton-enum">Qt::MouseButton</db:link> enum. If the event <db:code role="parameter">type</db:code> is <db:link xlink:href="qevent.xml#Type-enum">MouseMove</db:link>, the appropriate button for this event is <db:link xlink:href="qt.xml#MouseButton-enum">Qt::NoButton</db:link>. <db:code role="parameter">buttons</db:code> is the state of all buttons at the time of the event, <db:code role="parameter">modifiers</db:code> is the state of all keyboard modifiers.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>Qt::MouseEventFlags QMouseEvent::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::MouseEventFlags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::MouseEventFlags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mouse event flags.</db:para>
<db:para>The mouse event flags provide additional information about a mouse event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#MouseEventFlag-enum">Qt::MouseEventFlag</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsscenemouseevent.xml#flags">QGraphicsSceneMouseEvent::flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QMouseEvent</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QMouseEvent-2">
<db:title>QMouseEvent::QMouseEvent(QEvent::Type <db:emphasis>type</db:emphasis>, const QPointF &amp;<db:emphasis>localPos</db:emphasis>, Qt::MouseButton <db:emphasis>button</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, const QPointingDevice *<db:emphasis>device</db:emphasis> = QPointingDevice::primaryPointingDevice())</db:title>
<db:constructorsynopsis>
<db:methodname>QMouseEvent</db:methodname>
<db:methodparam>
<db:type>QEvent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>localPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MouseButton</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MouseButtons</db:type>
<db:parameter>buttons</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::KeyboardModifiers</db:type>
<db:parameter>modifiers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointingDevice *</db:type>
<db:parameter>device</db:parameter>
<db:initializer>QPointingDevice::primaryPointingDevice()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMouseEvent(QEvent::Type type, const QPointF &amp;localPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, const QPointingDevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This function is deprecated since 6.4. We strongly advise against using it in new code.</db:para>
<db:para>Use another constructor instead (global position is required).</db:para>
<db:para>Constructs a mouse event object originating from <db:code role="parameter">device</db:code>.</db:para>
<db:para>The <db:code role="parameter">type</db:code> parameter must be one of <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonPress</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonRelease</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonDblClick</db:link>, or <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseMove</db:link>.</db:para>
<db:para>The <db:code role="parameter">localPos</db:code> is the mouse cursor's position relative to the receiving widget or item. The window position is set to the same value as <db:code role="parameter">localPos</db:code>. The <db:code role="parameter">button</db:code> that caused the event is given as a value from the <db:link xlink:href="qt.xml#MouseButton-enum">Qt::MouseButton</db:link> enum. If the event <db:code role="parameter">type</db:code> is <db:link xlink:href="qevent.xml#Type-enum">MouseMove</db:link>, the appropriate button for this event is <db:link xlink:href="qt.xml#MouseButton-enum">Qt::NoButton</db:link>. The mouse and keyboard states at the time of the event are specified by <db:code role="parameter">buttons</db:code> and <db:code role="parameter">modifiers</db:code>.</db:para>
<db:para>The <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>() is initialized to <db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>(), which may not be appropriate. Use the other constructor to specify the global position explicitly.</db:para>
</db:section>
<db:section xml:id="globalPos">
<db:title>QPoint QMouseEvent::globalPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>globalPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint globalPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>().toPoint() instead.</db:para>
<db:para>Returns the global position of the mouse cursor <db:emphasis>at the time of the event</db:emphasis>. This is important on asynchronous window systems like X11. Whenever you move your widgets around in response to mouse events, globalPos() may differ a lot from the current pointer position <db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>(), and from <db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>(<db:link xlink:href="qmouseevent.xml#pos">pos</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml#globalX">globalX</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#globalY">globalY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalX">
<db:title>int QMouseEvent::globalX() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>globalX</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int globalX() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>().<db:link xlink:href="qmouseevent.xml#x">x</db:link>() instead.</db:para>
<db:para>Returns the global x position of the mouse cursor at the time of the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml#globalY">globalY</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#globalPos">globalPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalY">
<db:title>int QMouseEvent::globalY() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>globalY</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int globalY() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>().<db:link xlink:href="qmouseevent.xml#y">y</db:link>() instead.</db:para>
<db:para>Returns the global y position of the mouse cursor at the time of the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml#globalX">globalX</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#globalPos">globalPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localPos">
<db:title>QPointF QMouseEvent::localPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>localPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF localPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>() instead.</db:para>
<db:para>Returns the position of the mouse cursor as a <db:link xlink:href="qpointf.xml">QPointF</db:link>, relative to the widget or item that received the event.</db:para>
<db:para>If you move the widget as a result of the mouse event, use the screen position returned by <db:link xlink:href="qmouseevent.xml#screenPos">screenPos</db:link>() to avoid a shaking motion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#windowPos">windowPos</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#screenPos">screenPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pos">
<db:title>QPoint QMouseEvent::pos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>pos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint pos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>() instead.</db:para>
<db:para>Returns the position of the mouse cursor, relative to the widget that received the event.</db:para>
<db:para>If you move the widget as a result of the mouse event, use the global position returned by <db:link xlink:href="qmouseevent.xml#globalPos">globalPos</db:link>() to avoid a shaking motion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#globalPos">globalPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screenPos">
<db:title>QPointF QMouseEvent::screenPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>screenPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF screenPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>() instead.</db:para>
<db:para>Returns the position of the mouse cursor as a <db:link xlink:href="qpointf.xml">QPointF</db:link>, relative to the screen that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#localPos">localPos</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#windowPos">windowPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source">
<db:title>Qt::MouseEventSource QMouseEvent::source() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::MouseEventSource</db:type>
<db:methodname>source</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::MouseEventSource source() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qpointerevent.xml#pointingDevice">pointingDevice</db:link>() instead.</db:para>
<db:para>Returns information about the mouse event source.</db:para>
<db:para>The mouse event source can be used to distinguish between genuine and artificial mouse events. The latter are events that are synthesized from touch events by the operating system or Qt itself. This enum tells you from where it was synthesized; but often it's more useful to know from which device it was synthesized, so try to use <db:link xlink:href="qpointerevent.xml#pointingDevice">pointingDevice</db:link>() instead.</db:para>
<db:note>
<db:para>Many platforms provide no such information. On such platforms <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventNotSynthesized</db:link> is returned always.</db:para>
</db:note>
<db:note>
<db:para>In Qt 5-based code, source() was often used to attempt to distinguish mouse events from an actual mouse vs. those that were synthesized because some legacy <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> or <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass did not react to a <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link>. However, you could not tell whether it was synthesized from a <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> or a <db:link xlink:href="qtabletevent.xml">QTabletEvent</db:link>, and other information was lost. <db:link xlink:href="qpointerevent.xml#pointingDevice">pointingDevice</db:link>() tells you the specific device that it came from, so you might check <db:code>pointingDevice()-&gt;type()</db:code> or <db:code>pointingDevice()-&gt;capabilities()</db:code> to decide how to react to this event. But it's even better to react to the original event rather than handling only mouse events.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventSource</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsscenemouseevent.xml#source">QGraphicsSceneMouseEvent::source</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowPos">
<db:title>QPointF QMouseEvent::windowPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>windowPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF windowPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#scenePosition">scenePosition</db:link>() instead.</db:para>
<db:para>Returns the position of the mouse cursor as a <db:link xlink:href="qpointf.xml">QPointF</db:link>, relative to the window that received the event.</db:para>
<db:para>If you move the widget as a result of the mouse event, use the global position returned by <db:link xlink:href="qmouseevent.xml#globalPos">globalPos</db:link>() to avoid a shaking motion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#localPos">localPos</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#screenPos">screenPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>int QMouseEvent::x() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>x</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int x() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>().x() instead.</db:para>
<db:para>Returns the x position of the mouse cursor, relative to the widget that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#pos">pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>int QMouseEvent::y() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>y</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int y() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>().y() instead.</db:para>
<db:para>Returns the y position of the mouse cursor, relative to the widget that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qmouseevent.xml#pos">pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
