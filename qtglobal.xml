<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtGlobal&gt; - Global Qt Declarations</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The &lt;QtGlobal&gt; header file includes the fundamental global declarations. It is included by most other Qt header files.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtGlobal</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>&lt;QtGlobal&gt; is part of <db:simplelist><db:member>funclists</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The global declarations include <db:link xlink:href="qtglobal.xml#types">types</db:link>, <db:link xlink:href="qtglobal.xml#functions">functions</db:link> and <db:link xlink:href="qtglobal.xml#macros">macros</db:link>.</db:para>
<db:para>The type definitions are partly convenience definitions for basic types (some of which guarantee certain bit-sizes on all platforms supported by Qt), partly types related to Qt message handling. The functions are related to generating messages, Qt version handling and comparing and adjusting object values. And finally, some of the declared macros enable programmers to add compiler or platform specific code to their applications, while others are convenience macros for larger operations.</db:para>
<db:section xml:id="types">
<db:title>Types</db:title>
<db:para>The header file declares several type definitions that guarantee a specified bit-size on all platforms supported by Qt for various basic types, for example <db:link xlink:href="qtglobal.xml#qint8-typedef">qint8</db:link> which is a signed char guaranteed to be 8-bit on all platforms supported by Qt. The header file also declares the <db:link xlink:href="qtglobal.xml#qlonglong-typedef">qlonglong</db:link> type definition for long long int (__int64 on Windows).</db:para>
<db:para>Several convenience type definitions are declared: <db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link> for double, <db:link xlink:href="qtglobal.xml#uchar-typedef">uchar</db:link> for unsigned char, <db:link xlink:href="qtglobal.xml#uint-typedef">uint</db:link> for unsigned int, <db:link xlink:href="qtglobal.xml#ulong-typedef">ulong</db:link> for unsigned long and <db:link xlink:href="qtglobal.xml#ushort-typedef">ushort</db:link> for unsigned short.</db:para>
<db:para>Finally, the <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link> definition identifies the various messages that can be generated and sent to a Qt message handler; <db:link xlink:href="qtglobal.xml#QtMessageHandler-typedef">QtMessageHandler</db:link> is a type definition for a pointer to a function with the signature void myMessageHandler(QtMsgType, const QMessageLogContext &amp;, const char *). <db:link xlink:href="qmessagelogcontext.xml">QMessageLogContext</db:link> class contains the line, file, and function the message was logged at. This information is created by the <db:link xlink:href="qmessagelogger.xml">QMessageLogger</db:link> class.</db:para>
</db:section>
<db:section xml:id="functions">
<db:title>Functions</db:title>
<db:para>The &lt;QtGlobal&gt; header file contains several functions comparing and adjusting an object's value. These functions take a template type as argument: You can retrieve the absolute value of an object using the <db:link xlink:href="qtglobal.xml#qAbs">qAbs</db:link>() function, and you can bound a given object's value by given minimum and maximum values using the qBound() function. You can retrieve the minimum and maximum of two given objects using <db:link xlink:href="qtglobal.xml#qMin">qMin</db:link>() and <db:link xlink:href="qtglobal.xml#qMax">qMax</db:link>() respectively. All these functions return a corresponding template type; the template types can be replaced by any other type.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int myValue = 10;
int minValue = 2;
int maxValue = 6;

int boundedValue = qBound(minValue, myValue, maxValue);
// boundedValue == 6
</db:programlisting>
<db:para>&lt;QtGlobal&gt; also contains functions that generate messages from the given string argument: <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>(), <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>(), and <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>(). These functions call the message handler with the given message.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">if (!driver()-&gt;isOpen() || driver()-&gt;isOpenError()) {
    qWarning(&quot;QSqlQuery::exec: database not open&quot;);
    return false;
}
</db:programlisting>
<db:para>The remaining functions are <db:link xlink:href="qtglobal.xml#qRound">qRound</db:link>() and <db:link xlink:href="qtglobal.xml#qRound64">qRound64</db:link>(), which both accept a <db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link> value as their argument returning the value rounded up to the nearest integer and 64-bit integer respectively, the <db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>() function which installs the given <db:link xlink:href="qtglobal.xml#QtMessageHandler-typedef">QtMessageHandler</db:link>, and the <db:link xlink:href="qtglobal.xml#qVersion">qVersion</db:link>() function which returns the version number of Qt at run-time as a string.</db:para>
</db:section>
<db:section xml:id="macros">
<db:title>Macros</db:title>
<db:para>The &lt;QtGlobal&gt; header file provides a range of macros (Q_CC_*) that are defined if the application is compiled using the specified platforms. For example, the <db:link xlink:href="qtglobal.xml#Q_CC_SUN">Q_CC_SUN</db:link> macro is defined if the application is compiled using Forte Developer, or Sun Studio C++. The header file also declares a range of macros (Q_OS_*) that are defined for the specified platforms. For example, <db:link xlink:href="qtglobal.xml#Q_OS_UNIX">Q_OS_UNIX</db:link> which is defined for the Unix-based systems.</db:para>
<db:para>The purpose of these macros is to enable programmers to add compiler or platform specific code to their application.</db:para>
<db:para>The remaining macros are convenience macros for larger operations: The <db:link xlink:href="qtglobal.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link>() and <db:link xlink:href="qtglobal.xml#QT_TR_NOOP">QT_TR_NOOP</db:link>() macros provide the possibility of marking text for dynamic translation, i.e. translation without changing the stored source text. The <db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>() and <db:link xlink:href="qtglobal.xml#Q_ASSERT_X">Q_ASSERT_X</db:link>() enables warning messages of various level of refinement. The <db:link xlink:href="qtglobal.xml#Q_FOREACH">Q_FOREACH</db:link>() and <db:link xlink:href="qtglobal.xml#foreach">foreach</db:link>() macros implement Qt's foreach loop.</db:para>
<db:para>The <db:link xlink:href="qtglobal.xml#Q_INT64_C">Q_INT64_C</db:link>() and <db:link xlink:href="qtglobal.xml#Q_UINT64_C">Q_UINT64_C</db:link>() macros wrap signed and unsigned 64-bit integer literals in a platform-independent way. The <db:link xlink:href="qtglobal.xml#Q_CHECK_PTR">Q_CHECK_PTR</db:link>() macro prints a warning containing the source code's file name and line number, saying that the program ran out of memory, if the pointer is 0. The <db:link xlink:href="qtglobal.xml#qPrintable">qPrintable</db:link>() and <db:link xlink:href="qtglobal.xml#qUtf8Printable">qUtf8Printable</db:link>() macros represent an easy way of printing text.</db:para>
<db:para>Finally, the <db:link xlink:href="qtglobal.xml#QT_POINTER_SIZE">QT_POINTER_SIZE</db:link> macro expands to the size of a pointer in bytes, and the <db:link xlink:href="qtglobal.xml#QT_VERSION">QT_VERSION</db:link> and <db:link xlink:href="qtglobal.xml#QT_VERSION_STR">QT_VERSION_STR</db:link> macros expand to a numeric value or a string, respectively, specifying Qt's version number, i.e the version the application is compiled against.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtalgorithms.xml">&lt;QtAlgorithms&gt;</db:link></db:member>
<db:member><db:link xlink:href="qsysinfo.xml">QSysInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="QFunctionPointer-typedef">
<db:title>QFunctionPointer</db:title>
<db:para>This is a typedef for void (*)(), a pointer to a function that takes no arguments and returns void.</db:para>
</db:section>
<db:section xml:id="QtMessageHandler-typedef">
<db:title>[since 5.0] QtMessageHandler</db:title>
<db:para>This is a typedef for a pointer to a function with the following signature:</db:para>
<db:programlisting language="cpp">void myMessageHandler(QtMsgType, const QMessageLogContext &amp;, const QString &amp;);
</db:programlisting>
<db:para>This typedef was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QtMsgType-enum">
<db:title>enum QtMsgType</db:title>
<db:para>This enum describes the messages that can be sent to a message handler (<db:link xlink:href="qtglobal.xml#QtMessageHandler-typedef">QtMessageHandler</db:link>). You can use the enum to identify and associate the various message types with the appropriate actions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code>QtDebugMsg</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code>QtInfoMsg</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code>QtWarningMsg</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code>QtCriticalMsg</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code>QtFatalMsg</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code>QtSystemMsg</db:code></db:para>
</db:td>
<db:td><db:code>QtCriticalMsg</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:para>QtInfoMsg was added in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QtMessageHandler-typedef">QtMessageHandler</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qint8-typedef">
<db:title>qint8</db:title>
<db:para>Typedef for signed char. This type is guaranteed to be 8-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="qint16-typedef">
<db:title>qint16</db:title>
<db:para>Typedef for signed short. This type is guaranteed to be 16-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="qint32-typedef">
<db:title>qint32</db:title>
<db:para>Typedef for signed int. This type is guaranteed to be 32-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="qint64-typedef">
<db:title>qint64</db:title>
<db:para>Typedef for long long int (__int64 on Windows). This type is guaranteed to be 64-bit on all platforms supported by Qt.</db:para>
<db:para>Literals of this type can be created using the <db:link xlink:href="qtglobal.xml#Q_INT64_C">Q_INT64_C</db:link>() macro:</db:para>
<db:programlisting language="cpp">qint64 value = Q_INT64_C(932838457459459);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_INT64_C">Q_INT64_C</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#quint64-typedef">quint64</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qlonglong-typedef">qlonglong</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qintptr-typedef">
<db:title>qintptr</db:title>
<db:para>Integral type for representing pointers in a signed integer (useful for hashing, etc.).</db:para>
<db:para>Typedef for either qint32 or qint64. This type is guaranteed to be the same size as a pointer on all platforms supported by Qt. On a system with 32-bit pointers, qintptr is a typedef for qint32; on a system with 64-bit pointers, qintptr is a typedef for qint64.</db:para>
<db:para>Note that qintptr is signed. Use quintptr for unsigned values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qptrdiff-typedef">qptrdiff</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qint32-typedef">qint32</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qlonglong-typedef">
<db:title>qlonglong</db:title>
<db:para>Typedef for long long int (__int64 on Windows). This is the same as <db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qulonglong-typedef">qulonglong</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qptrdiff-typedef">
<db:title>qptrdiff</db:title>
<db:para>Integral type for representing pointer differences.</db:para>
<db:para>Typedef for either qint32 or qint64. This type is guaranteed to be the same size as a pointer on all platforms supported by Qt. On a system with 32-bit pointers, quintptr is a typedef for quint32; on a system with 64-bit pointers, quintptr is a typedef for quint64.</db:para>
<db:para>Note that qptrdiff is signed. Use quintptr for unsigned values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#quintptr-typedef">quintptr</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qint32-typedef">qint32</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qreal-typedef">
<db:title>qreal</db:title>
<db:para>Typedef for double unless Qt is configured with the -qreal float option.</db:para>
</db:section>
<db:section xml:id="quint8-typedef">
<db:title>quint8</db:title>
<db:para>Typedef for unsigned char. This type is guaranteed to be 8-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="quint16-typedef">
<db:title>quint16</db:title>
<db:para>Typedef for unsigned short. This type is guaranteed to be 16-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="quint32-typedef">
<db:title>quint32</db:title>
<db:para>Typedef for unsigned int. This type is guaranteed to be 32-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="quint64-typedef">
<db:title>quint64</db:title>
<db:para>Typedef for unsigned long long int (unsigned __int64 on Windows). This type is guaranteed to be 64-bit on all platforms supported by Qt.</db:para>
<db:para>Literals of this type can be created using the <db:link xlink:href="qtglobal.xml#Q_UINT64_C">Q_UINT64_C</db:link>() macro:</db:para>
<db:programlisting language="cpp">quint64 value = Q_UINT64_C(932838457459459);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_UINT64_C">Q_UINT64_C</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qulonglong-typedef">qulonglong</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quintptr-typedef">
<db:title>quintptr</db:title>
<db:para>Integral type for representing pointers in an unsigned integer (useful for hashing, etc.).</db:para>
<db:para>Typedef for either quint32 or quint64. This type is guaranteed to be the same size as a pointer on all platforms supported by Qt. On a system with 32-bit pointers, quintptr is a typedef for quint32; on a system with 64-bit pointers, quintptr is a typedef for quint64.</db:para>
<db:para>Note that quintptr is unsigned. Use qptrdiff for signed values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qptrdiff-typedef">qptrdiff</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#quint32-typedef">quint32</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#quint64-typedef">quint64</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qulonglong-typedef">
<db:title>qulonglong</db:title>
<db:para>Typedef for unsigned long long int (unsigned __int64 on Windows). This is the same as <db:link xlink:href="qtglobal.xml#quint64-typedef">quint64</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#quint64-typedef">quint64</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qlonglong-typedef">qlonglong</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uchar-typedef">
<db:title>uchar</db:title>
<db:para>Convenience typedef for unsigned char.</db:para>
</db:section>
<db:section xml:id="uint-typedef">
<db:title>uint</db:title>
<db:para>Convenience typedef for unsigned int.</db:para>
</db:section>
<db:section xml:id="ulong-typedef">
<db:title>ulong</db:title>
<db:para>Convenience typedef for unsigned long.</db:para>
</db:section>
<db:section xml:id="ushort-typedef">
<db:title>ushort</db:title>
<db:para>Convenience typedef for unsigned short.</db:para>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qAbs">
<db:title>[constexpr] int qAbs(const int &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Compares <db:code role="parameter">value</db:code> to the 0 of type T and returns the absolute value. Thus if T is <db:emphasis>double</db:emphasis>, then <db:code role="parameter">value</db:code> is compared to <db:emphasis>(double) 0</db:emphasis>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int absoluteValue;
int myValue = -4;

absoluteValue = qAbs(myValue);
// absoluteValue == 4
</db:programlisting>
</db:section>
<db:section xml:id="qEnvironmentVariableIntValue">
<db:title>[noexcept, since 5.5] int qEnvironmentVariableIntValue(const char *<db:emphasis>varName</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = 0)</db:title>
<db:para>Returns the numerical value of the environment variable <db:code role="parameter">varName</db:code>. If <db:code role="parameter">ok</db:code> is not null, sets *ok to true or false depending on the success of the conversion.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">qgetenv(varName).toInt()
</db:programlisting>
<db:para>except that it's much faster, and can't throw exceptions.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qgetenv">qgetenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qEnvironmentVariableIsSet">qEnvironmentVariableIsSet</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qEnvironmentVariableIsEmpty">
<db:title>[noexcept, since 5.1] bool qEnvironmentVariableIsEmpty(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:para>Returns whether the environment variable <db:code role="parameter">varName</db:code> is empty.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">qgetenv(varName).isEmpty()
</db:programlisting>
<db:para>except that it's potentially much faster, and can't throw exceptions.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qgetenv">qgetenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qEnvironmentVariableIsSet">qEnvironmentVariableIsSet</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qEnvironmentVariableIsSet">
<db:title>[noexcept, since 5.1] bool qEnvironmentVariableIsSet(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:para>Returns whether the environment variable <db:code role="parameter">varName</db:code> is set.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">!qgetenv(varName).isNull()
</db:programlisting>
<db:para>except that it's potentially much faster, and can't throw exceptions.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qgetenv">qgetenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qEnvironmentVariableIsEmpty">qEnvironmentVariableIsEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qFloatDistance">
<db:title>[since 5.2] quint64 qFloatDistance(double <db:emphasis>a</db:emphasis>, double <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns the number of representable floating-point numbers between <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code>.</db:para>
<db:para>This function serves the same purpose as qFloatDistance(float, float), but returns the distance between two double numbers. Since the range is larger than for two float numbers ([-DBL_MAX,DBL_MAX]), the return type is quint64.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qFuzzyCompare">qFuzzyCompare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qFloatDistance-1">
<db:title>[since 5.2] quint32 qFloatDistance(float <db:emphasis>a</db:emphasis>, float <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns the number of representable floating-point numbers between <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code>.</db:para>
<db:para>This function provides an alternative way of doing approximated comparisons of floating-point numbers similar to <db:link xlink:href="qtglobal.xml#qFuzzyCompare">qFuzzyCompare</db:link>(). However, it returns the distance between two numbers, which gives the caller a possibility to choose the accepted error. Errors are relative, so for instance the distance between 1.0E-5 and 1.00001E-5 will give 110, while the distance between 1.0E36 and 1.00001E36 will give 127.</db:para>
<db:para>This function is useful if a floating point comparison requires a certain precision. Therefore, if <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code> are equal it will return 0. The maximum value it will return for 32-bit floating point numbers is 4,278,190,078. This is the distance between -FLT_MAX and +FLT_MAX.</db:para>
<db:para>The function does not give meaningful results if any of the arguments are Infinite or NaN. You can check for this by calling <db:link xlink:href="qtglobal.xml#qIsFinite">qIsFinite</db:link>().</db:para>
<db:para>The return value can be considered as the &quot;error&quot;, so if you for instance want to compare two 32-bit floating point numbers and all you need is an approximated 24-bit precision, you can use this function like this:</db:para>
<db:programlisting language="cpp">if (qFloatDistance(a, b) &lt; (1 &lt;&lt; 7)) {   // The last 7 bits are not
                                        // significant
    // precise enough
}
</db:programlisting>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qFuzzyCompare">qFuzzyCompare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qFormatLogMessage">
<db:title>[since 5.4] QString qFormatLogMessage(QtMsgType <db:emphasis>type</db:emphasis>, const QMessageLogContext &amp;<db:emphasis>context</db:emphasis>, const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Generates a formatted string out of the <db:code role="parameter">type</db:code>, <db:code role="parameter">context</db:code>, <db:code role="parameter">str</db:code> arguments.</db:para>
<db:para>qFormatLogMessage returns a <db:link xlink:href="qstring.xml">QString</db:link> that is formatted according to the current message pattern. It can be used by custom message handlers to format output similar to Qt's default message handler.</db:para>
<db:para>The function is thread-safe.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qSetMessagePattern">qSetMessagePattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qFuzzyCompare">
<db:title>[constexpr, since 4.4] bool qFuzzyCompare(double <db:emphasis>p1</db:emphasis>, double <db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Compares the floating point value <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> and returns true if they are considered equal, otherwise false.</db:para>
<db:para>Note that comparing values where either <db:code role="parameter">p1</db:code> or <db:code role="parameter">p2</db:code> is 0.0 will not work. The solution to this is to compare against values greater than or equal to 1.0.</db:para>
<db:programlisting language="cpp">        // Instead of comparing with 0.0
                qFuzzyCompare(0.0,1.0e-200); // This will return false
        // Compare adding 1 to both values will fix the problem
                qFuzzyCompare(1 + 0.0, 1 + 1.0e-200); // This will return true
</db:programlisting>
<db:para>The two numbers are compared in a relative way, where the exactness is stronger the smaller the numbers are.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="qFuzzyCompare-1">
<db:title>[constexpr, since 4.4] bool qFuzzyCompare(float <db:emphasis>p1</db:emphasis>, float <db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Compares the floating point value <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> and returns true if they are considered equal, otherwise false.</db:para>
<db:para>The two numbers are compared in a relative way, where the exactness is stronger the smaller the numbers are.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="qInf">
<db:title>double qInf()</db:title>
<db:para>Returns the bit pattern for an infinite number as a double.</db:para>
</db:section>
<db:section xml:id="qInstallMessageHandler">
<db:title>[since 5.0] QtMessageHandler qInstallMessageHandler(QtMessageHandler <db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Installs a Qt message <db:code role="parameter">handler</db:code> which has been defined previously. Returns a pointer to the previous message handler.</db:para>
<db:para>The message handler is a function that prints out debug messages, warnings, critical and fatal error messages. The Qt library (debug mode) contains hundreds of warning messages that are printed when internal errors (usually invalid function arguments) occur. Qt built in release mode also contains such warnings unless QT_NO_WARNING_OUTPUT and/or QT_NO_DEBUG_OUTPUT have been set during compilation. If you implement your own message handler, you get total control of these messages.</db:para>
<db:para>The default message handler prints the message to the standard output under X11 or to the debugger under Windows. If it is a fatal message, the application aborts immediately.</db:para>
<db:para>Only one message handler can be defined, since this is usually done on an application-wide basis to control debug output.</db:para>
<db:para>To restore the message handler, call qInstallMessageHandler(0).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#include &lt;qapplication.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void myMessageOutput(QtMsgType type, const QMessageLogContext &amp;context, const QString &amp;msg)
{
    QByteArray localMsg = msg.toLocal8Bit();
    switch (type) {
    case QtDebugMsg:
        fprintf(stderr, &quot;Debug: %s (%s:%u, %s)\n&quot;, localMsg.constData(), context.file, context.line, context.function);
        break;
    case QtInfoMsg:
        fprintf(stderr, &quot;Info: %s (%s:%u, %s)\n&quot;, localMsg.constData(), context.file, context.line, context.function);
        break;
    case QtWarningMsg:
        fprintf(stderr, &quot;Warning: %s (%s:%u, %s)\n&quot;, localMsg.constData(), context.file, context.line, context.function);
        break;
    case QtCriticalMsg:
        fprintf(stderr, &quot;Critical: %s (%s:%u, %s)\n&quot;, localMsg.constData(), context.file, context.line, context.function);
        break;
    case QtFatalMsg:
        fprintf(stderr, &quot;Fatal: %s (%s:%u, %s)\n&quot;, localMsg.constData(), context.file, context.line, context.function);
        abort();
    }
}

int main(int argc, char **argv)
{
    qInstallMessageHandler(myMessageOutput);
    QApplication app(argc, argv);
    ...
    return app.exec();
}
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QtMessageHandler-typedef">QtMessageHandler</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qIsFinite">
<db:title>bool qIsFinite(double <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Returns true if the double <db:code role="parameter">d</db:code> is a finite number.</db:para>
</db:section>
<db:section xml:id="qIsFinite-1">
<db:title>bool qIsFinite(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Returns true if the float <db:code role="parameter">f</db:code> is a finite number.</db:para>
</db:section>
<db:section xml:id="qIsInf">
<db:title>bool qIsInf(double <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Returns true if the double <db:code role="parameter">d</db:code> is equivalent to infinity.</db:para>
</db:section>
<db:section xml:id="qIsInf-1">
<db:title>bool qIsInf(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Returns true if the float <db:code role="parameter">f</db:code> is equivalent to infinity.</db:para>
</db:section>
<db:section xml:id="qIsNaN">
<db:title>bool qIsNaN(double <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Returns true if the double <db:code role="parameter">d</db:code> is not a number (NaN).</db:para>
</db:section>
<db:section xml:id="qIsNaN-1">
<db:title>bool qIsNaN(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Returns true if the float <db:code role="parameter">f</db:code> is not a number (NaN).</db:para>
</db:section>
<db:section xml:id="qMax">
<db:title>[constexpr] const int &amp;qMax(const int &amp;<db:emphasis>value1</db:emphasis>, const int &amp;<db:emphasis>value2</db:emphasis>)</db:title>
<db:para>Returns the maximum of <db:code role="parameter">value1</db:code> and <db:code role="parameter">value2</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int myValue = 6;
int yourValue = 4;

int maxValue = qMax(myValue, yourValue);
// maxValue == myValue
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qMin">qMin</db:link>()</db:member>
<db:member><db:link xlink:href="">qBound()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qMin">
<db:title>[constexpr] const int &amp;qMin(const int &amp;<db:emphasis>value1</db:emphasis>, const int &amp;<db:emphasis>value2</db:emphasis>)</db:title>
<db:para>Returns the minimum of <db:code role="parameter">value1</db:code> and <db:code role="parameter">value2</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int myValue = 6;
int yourValue = 4;

int minValue = qMin(myValue, yourValue);
// minValue == yourValue
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qMax">qMax</db:link>()</db:member>
<db:member><db:link xlink:href="">qBound()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qQNaN">
<db:title>double qQNaN()</db:title>
<db:para>Returns the bit pattern of a quiet NaN as a double.</db:para>
</db:section>
<db:section xml:id="qRound64">
<db:title>qint64 qRound64(qreal <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Rounds <db:code role="parameter">value</db:code> to the nearest 64-bit integer.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">qreal valueA = 42949672960.3;
qreal valueB = 42949672960.7;

qint64 roundedValueA = qRound64(valueA);
// roundedValueA = 42949672960
qint64 roundedValueB = qRound64(valueB);
// roundedValueB = 42949672961
</db:programlisting>
</db:section>
<db:section xml:id="qRound">
<db:title>int qRound(qreal <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Rounds <db:code role="parameter">value</db:code> to the nearest integer.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">qreal valueA = 2.3;
qreal valueB = 2.7;

int roundedValueA = qRound(valueA);
// roundedValueA = 2
int roundedValueB = qRound(valueB);
// roundedValueB = 3
</db:programlisting>
</db:section>
<db:section xml:id="qSNaN">
<db:title>double qSNaN()</db:title>
<db:para>Returns the bit pattern of a signalling NaN as a double.</db:para>
</db:section>
<db:section xml:id="qSetMessagePattern">
<db:title>[since 5.0] void qSetMessagePattern(const QString &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:para>Changes the output of the default message handler.</db:para>
<db:para>Allows to tweak the output of <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>() and <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>().</db:para>
<db:para>Following placeholders are supported:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Placeholder</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>%{appname}</db:para>
</db:td>
<db:td>
<db:para>QCoreApplication::applicationName()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{category}</db:para>
</db:td>
<db:td>
<db:para>Logging category</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{file}</db:para>
</db:td>
<db:td>
<db:para>Path to source file</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{function}</db:para>
</db:td>
<db:td>
<db:para>Function</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{line}</db:para>
</db:td>
<db:td>
<db:para>Line in source file</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{message}</db:para>
</db:td>
<db:td>
<db:para>The actual message</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{pid}</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcoreapplication.xml#applicationPid">QCoreApplication::applicationPid</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{threadid}</db:para>
</db:td>
<db:td>
<db:para>The system-wide ID of current thread (if it can be obtained)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{qthreadptr}</db:para>
</db:td>
<db:td>
<db:para>A pointer to the current <db:link xlink:href="qthread.xml">QThread</db:link> (result of <db:link xlink:href="qthread.xml#currentThread">QThread::currentThread</db:link>())</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{type}</db:para>
</db:td>
<db:td>
<db:para>&quot;debug&quot;, &quot;warning&quot;, &quot;critical&quot; or &quot;fatal&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{time process}</db:para>
</db:td>
<db:td>
<db:para>time of the message, in seconds since the process started (the token &quot;process&quot; is literal)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{time boot}</db:para>
</db:td>
<db:td>
<db:para>the time of the message, in seconds since the system boot if that can be determined (the token &quot;boot&quot; is literal). If the time since boot could not be obtained, the output is indeterminate (see <db:link xlink:href="qelapsedtimer.xml#msecsSinceReference">QElapsedTimer::msecsSinceReference</db:link>()).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{time [format]}</db:para>
</db:td>
<db:td>
<db:para>system time when the message occurred, formatted by passing the format to <db:link xlink:href="">QDateTime::toString()</db:link>. If the format is not specified, the format of <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link> is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{backtrace [depth=N] [separator=&quot;...&quot;]}</db:para>
</db:td>
<db:td>
<db:para>A backtrace with the number of frames specified by the optional depth parameter (defaults to 5), and separated by the optional separator parameter (defaults to &quot;|&quot;). This expansion is available only on some platforms (currently only platfoms using glibc). Names are only known for exported functions. If you want to see the name of every function in your application, use QMAKE_LFLAGS += -rdynamic. When reading backtraces, take into account that frames might be missing due to inlining or tail call optimization.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can also use conditionals on the type of the message using %{if-debug}, %{if-info} %{if-warning}, %{if-critical} or %{if-fatal} followed by an %{endif}. What is inside the %{if-*} and %{endif} will only be printed if the type matches.</db:para>
<db:para>Finally, text inside %{if-category} ... %{endif} is only printed if the category is not the default one.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QT_MESSAGE_PATTERN=&quot;[%{time yyyyMMdd h:mm:ss.zzz t} %{if-debug}D%{endif}%{if-info}I%{endif}%{if-warning}W%{endif}%{if-critical}C%{endif}%{if-fatal}F%{endif}] %{file}:%{line} - %{message}&quot;
</db:programlisting>
<db:para>The default <db:code role="parameter">pattern</db:code> is &quot;%{if-category}%{category}: %{endif}%{message}&quot;.</db:para>
<db:para>The <db:code role="parameter">pattern</db:code> can also be changed at runtime by setting the QT_MESSAGE_PATTERN environment variable; if both qSetMessagePattern() is called and QT_MESSAGE_PATTERN is set, the environment variable takes precedence.</db:para>
<db:para>Custom message handlers can use <db:link xlink:href="qtglobal.xml#qFormatLogMessage">qFormatLogMessage</db:link>() to take <db:code role="parameter">pattern</db:code> into account.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qVersion">
<db:title>[noexcept] const char *qVersion()</db:title>
<db:para>Returns the version number of Qt at run-time as a string (for example, &quot;4.1.2&quot;). This may be a different version than the version the application was compiled against.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QT_VERSION_STR">QT_VERSION_STR</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qgetenv">
<db:title>QByteArray qgetenv(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:para>Returns the value of the environment variable with name <db:code role="parameter">varName</db:code>. To get the variable string, use QByteArray::constData().</db:para>
<db:note>
<db:para>qgetenv() was introduced because getenv() from the standard C library was deprecated in VC2005 (and later versions). qgetenv() uses the new replacement function in VC, and calls the standard C library's implementation on all other platforms.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qputenv">qputenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qEnvironmentVariableIsSet">qEnvironmentVariableIsSet</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qEnvironmentVariableIsEmpty">qEnvironmentVariableIsEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qputenv">
<db:title>bool qputenv(const char *<db:emphasis>varName</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This function sets the <db:code role="parameter">value</db:code> of the environment variable named <db:code role="parameter">varName</db:code>. It will create the variable if it does not exist. It returns 0 if the variable could not be set.</db:para>
<db:para>Calling qputenv with an empty value removes the environment variable on Windows, and makes it set (but empty) on Unix. Prefer using <db:link xlink:href="qtglobal.xml#qunsetenv">qunsetenv</db:link>() for fully portable behavior.</db:para>
<db:note>
<db:para>qputenv() was introduced because putenv() from the standard C library was deprecated in VC2005 (and later versions). qputenv() uses the replacement function in VC, and calls the standard C library's implementation on all other platforms.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qgetenv">qgetenv</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qrand">
<db:title>[since 4.2] int qrand()</db:title>
<db:para>Thread-safe version of the standard C++ rand() function.</db:para>
<db:para>Returns a value between 0 and RAND_MAX (defined in &lt;cstdlib&gt; and &lt;stdlib.h&gt;), the next number in the current sequence of pseudo-random integers.</db:para>
<db:para>Use qsrand() to initialize the pseudo-random number generator with a seed value.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qsrand">qsrand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qsrand">
<db:title>[since 4.2] void qsrand(uint <db:emphasis>seed</db:emphasis>)</db:title>
<db:para>Thread-safe version of the standard C++ srand() function.</db:para>
<db:para>Sets the argument <db:code role="parameter">seed</db:code> to be used to generate a new random number sequence of pseudo random integers to be returned by <db:link xlink:href="qtglobal.xml#qrand">qrand</db:link>().</db:para>
<db:para>The sequence of random numbers generated is deterministic per thread. For example, if two threads call qsrand(1) and subsequently calls <db:link xlink:href="qtglobal.xml#qrand">qrand</db:link>(), the threads will get the same random number sequence.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qrand">qrand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qunsetenv">
<db:title>[since 5.1] bool qunsetenv(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:para>This function deletes the variable <db:code role="parameter">varName</db:code> from the environment.</db:para>
<db:para>Returns true on success.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qputenv">qputenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qgetenv">qgetenv</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QT_DISABLE_DEPRECATED_BEFORE">
<db:title>QT_DISABLE_DEPRECATED_BEFORE</db:title>
<db:para>This macro can be defined in the project file to disable functions deprecated in a specified version of Qt or any earlier version. The default version number is 5.0, meaning that functions deprecated in or before Qt 5.0 will not be included.</db:para>
<db:para>Examples: When using a future release of Qt 5, set QT_DISABLE_DEPRECATED_BEFORE=0x050100 to disable functions deprecated in Qt 5.1 and earlier. In any release, set QT_DISABLE_DEPRECATED_BEFORE=0x000000 to enable any functions, including the ones deprecated in Qt 5.0</db:para>
</db:section>
<db:section xml:id="QT_POINTER_SIZE">
<db:title>QT_POINTER_SIZE</db:title>
<db:para>Expands to the size of a pointer in bytes (4 or 8). This is equivalent to sizeof(void *) but can be used in a preprocessor directive.</db:para>
</db:section>
<db:section xml:id="QT_REQUIRE_VERSION">
<db:title>QT_REQUIRE_VERSION(int <db:emphasis>argc</db:emphasis>, char **<db:emphasis>argv</db:emphasis>, const char *<db:emphasis>version</db:emphasis>)</db:title>
<db:para>This macro can be used to ensure that the application is run against a recent enough version of Qt. This is especially useful if your application depends on a specific bug fix introduced in a bug-fix release (e.g., 4.0.2).</db:para>
<db:para>The <db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> parameters are the main() function's argc and argv parameters. The <db:code role="parameter">version</db:code> parameter is a string literal that specifies which version of Qt the application requires (e.g., &quot;4.0.2&quot;).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#include &lt;QApplication&gt;
#include &lt;QMessageBox&gt;

int main(int argc, char *argv[])
{
    QT_REQUIRE_VERSION(argc, argv, &quot;4.0.2&quot;)

    QApplication app(argc, argv);
    ...
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="QT_TRANSLATE_NOOP3">
<db:title>[since 4.4] QT_TRANSLATE_NOOP3(<db:emphasis>context</db:emphasis>, <db:emphasis>sourceText</db:emphasis>, <db:emphasis>comment</db:emphasis>)</db:title>
<db:para>Marks the string literal <db:code role="parameter">sourceText</db:code> for dynamic translation in the given <db:code role="parameter">context</db:code> and with <db:code role="parameter">comment</db:code>, i.e the stored <db:code role="parameter">sourceText</db:code> will not be altered. The <db:code role="parameter">context</db:code> is typically a class and also needs to be specified as string literal. The string literal <db:code role="parameter">comment</db:code> will be available for translators using e.g. Qt Linguist.</db:para>
<db:para>The macro expands to anonymous struct of the two string literals passed as <db:code role="parameter">sourceText</db:code> and <db:code role="parameter">comment</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static { const char *source; const char *comment; } greeting_strings[] =
{
    QT_TRANSLATE_NOOP3(&quot;FriendlyConversation&quot;, &quot;Hello&quot;,
                       &quot;A really friendly hello&quot;),
    QT_TRANSLATE_NOOP3(&quot;FriendlyConversation&quot;, &quot;Goodbye&quot;,
                       &quot;A really friendly goodbye&quot;)
};

QString FriendlyConversation::greeting(int type)
{
    return tr(greeting_strings[type].source,
              greeting_strings[type].comment);
}

QString global_greeting(int type)
{
    return qApp-&gt;translate(&quot;FriendlyConversation&quot;,
           greeting_strings[type].source,
           greeting_strings[type].comment);
}
</db:programlisting>
<db:para>This macro was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QT_TR_NOOP">QT_TR_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TRANSLATE_NOOP">
<db:title>QT_TRANSLATE_NOOP(<db:emphasis>context</db:emphasis>, <db:emphasis>sourceText</db:emphasis>)</db:title>
<db:para>Marks the string literal <db:code role="parameter">sourceText</db:code> for dynamic translation in the given <db:code role="parameter">context</db:code>; i.e, the stored <db:code role="parameter">sourceText</db:code> will not be altered. The <db:code role="parameter">context</db:code> is typically a class and also needs to be specified as string literal.</db:para>
<db:para>The macro expands to <db:code role="parameter">sourceText</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static const char *greeting_strings[] = {
    QT_TRANSLATE_NOOP(&quot;FriendlyConversation&quot;, &quot;Hello&quot;),
    QT_TRANSLATE_NOOP(&quot;FriendlyConversation&quot;, &quot;Goodbye&quot;)
};

QString FriendlyConversation::greeting(int type)
{
    return tr(greeting_strings[type]);
}

QString global_greeting(int type)
{
    return qApp-&gt;translate(&quot;FriendlyConversation&quot;,
           greeting_strings[type]);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QT_TR_NOOP">QT_TR_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#QT_TRANSLATE_NOOP3">QT_TRANSLATE_NOOP3</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TRID_NOOP">
<db:title>[since 4.6] QT_TRID_NOOP(<db:emphasis>id</db:emphasis>)</db:title>
<db:para>The QT_TRID_NOOP macro marks an id for dynamic translation.</db:para>
<db:para>The only purpose of this macro is to provide an anchor for attaching meta data like to qtTrId().</db:para>
<db:para>The macro expands to <db:code role="parameter">id</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static const char * const ids[] = {
    //% &quot;This is the first text.&quot;
    QT_TRID_NOOP(&quot;qtn_1st_text&quot;),
    //% &quot;This is the second text.&quot;
    QT_TRID_NOOP(&quot;qtn_2nd_text&quot;),
    0
};

void TheClass::addLabels()
{
    for (int i = 0; ids[i]; ++i)
        new QLabel(qtTrId(ids[i]), this);
}
</db:programlisting>
<db:para>This macro was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">qtTrId()</db:link></db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TR_NOOP">
<db:title>QT_TR_NOOP(<db:emphasis>sourceText</db:emphasis>)</db:title>
<db:para>Marks the string literal <db:code role="parameter">sourceText</db:code> for dynamic translation in the current context (class), i.e the stored <db:code role="parameter">sourceText</db:code> will not be altered.</db:para>
<db:para>The macro expands to <db:code role="parameter">sourceText</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString FriendlyConversation::greeting(int type)
{
static const char *greeting_strings[] = {
    QT_TR_NOOP(&quot;Hello&quot;),
    QT_TR_NOOP(&quot;Goodbye&quot;)
};
return tr(greeting_strings[type]);
}
</db:programlisting>
<db:para>The macro QT_TR_NOOP_UTF8() is identical except that it tells lupdate that the source string is encoded in UTF-8. Corresponding variants exist in the <db:link xlink:href="qtglobal.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link>() family of macros, too.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_VERSION">
<db:title>QT_VERSION</db:title>
<db:para>This macro expands a numeric value of the form 0xMMNNPP (MM = major, NN = minor, PP = patch) that specifies Qt's version number. For example, if you compile your application against Qt 4.1.2, the QT_VERSION macro will expand to 0x040102.</db:para>
<db:para>You can use QT_VERSION to use the latest Qt features where available.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#if QT_VERSION &gt;= 0x040100
    QIcon icon = style()-&gt;standardIcon(QStyle::SP_TrashIcon);
#else
    QPixmap pixmap = style()-&gt;standardPixmap(QStyle::SP_TrashIcon);
    QIcon icon(pixmap);
#endif
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QT_VERSION_STR">QT_VERSION_STR</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#qVersion">qVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_VERSION_CHECK">
<db:title>QT_VERSION_CHECK</db:title>
<db:para>Turns the major, minor and patch numbers of a version into an integer, 0xMMNNPP (MM = major, NN = minor, PP = patch). This can be compared with another similarly processed version id.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#include &lt;QtGlobal&gt;

#if (QT_VERSION &gt;= QT_VERSION_CHECK(5, 0, 0))
#include &lt;QtWidgets&gt;
#else
#include &lt;QtGui&gt;
#endif
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QT_VERSION">QT_VERSION</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_VERSION_STR">
<db:title>QT_VERSION_STR</db:title>
<db:para>This macro expands to a string that specifies Qt's version number (for example, &quot;4.1.2&quot;). This is the version against which the application is compiled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qVersion">qVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#QT_VERSION">QT_VERSION</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_ASSERT">
<db:title>void Q_ASSERT(bool <db:emphasis>test</db:emphasis>)</db:title>
<db:para>Prints a warning message containing the source code file name and line number if <db:code role="parameter">test</db:code> is false.</db:para>
<db:para>Q_ASSERT() is useful for testing pre- and post-conditions during development. It does nothing if QT_NO_DEBUG was defined during compilation.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// File: div.cpp

#include &lt;QtGlobal&gt;

int divide(int a, int b)
{
    Q_ASSERT(b != 0);
    return a / b;
}
</db:programlisting>
<db:para>If b is zero, the Q_ASSERT statement will output the following message using the <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>() function:</db:para>
<db:programlisting language="cpp">ASSERT: &quot;b != 0&quot; in file div.cpp, line 7
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_ASSERT_X">Q_ASSERT_X</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_ASSERT_X">
<db:title>void Q_ASSERT_X(bool <db:emphasis>test</db:emphasis>, const char *<db:emphasis>where</db:emphasis>, const char *<db:emphasis>what</db:emphasis>)</db:title>
<db:para>Prints the message <db:code role="parameter">what</db:code> together with the location <db:code role="parameter">where</db:code>, the source file name and line number if <db:code role="parameter">test</db:code> is false.</db:para>
<db:para>Q_ASSERT_X is useful for testing pre- and post-conditions during development. It does nothing if QT_NO_DEBUG was defined during compilation.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// File: div.cpp

#include &lt;QtGlobal&gt;

int divide(int a, int b)
{
    Q_ASSERT_X(b != 0, &quot;divide&quot;, &quot;division by zero&quot;);
    return a / b;
}
</db:programlisting>
<db:para>If b is zero, the Q_ASSERT_X statement will output the following message using the <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>() function:</db:para>
<db:programlisting language="cpp">ASSERT failure in divide: &quot;division by zero&quot;, file div.cpp, line 7
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_ASSUME">
<db:title>[since 5.0] void Q_ASSUME(bool <db:emphasis>expr</db:emphasis>)</db:title>
<db:para>Causes the compiler to assume that <db:code role="parameter">expr</db:code> is true. This macro is useful for improving code generation, by providing the compiler with hints about conditions that it would not otherwise know about. However, there is no guarantee that the compiler will actually use those hints.</db:para>
<db:para>This macro could be considered a &quot;lighter&quot; version of <db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>(). While <db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link> will abort the program's execution if the condition is false, Q_ASSUME will tell the compiler not to generate code for those conditions. Therefore, it is important that the assumptions always hold, otherwise undefined behaviour may occur.</db:para>
<db:para>If <db:code role="parameter">expr</db:code> is a constantly false condition, Q_ASSUME will tell the compiler that the current code execution cannot be reached. That is, Q_ASSUME(false) is equivalent to <db:link xlink:href="qtglobal.xml#Q_UNREACHABLE">Q_UNREACHABLE</db:link>().</db:para>
<db:para>In debug builds the condition is enforced by an assert to facilitate debugging.</db:para>
<db:note>
<db:para><db:link xlink:href="qtglobal.xml#Q_LIKELY">Q_LIKELY</db:link>() tells the compiler that the expression is likely, but not the only possibility. Q_ASSUME tells the compiler that it is the only possibility.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_UNREACHABLE">Q_UNREACHABLE</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_LIKELY">Q_LIKELY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_BIG_ENDIAN">
<db:title>Q_BIG_ENDIAN</db:title>
<db:para>This macro represents a value you can compare to the macro <db:link xlink:href="qtglobal.xml#Q_BYTE_ORDER">Q_BYTE_ORDER</db:link> to determine the endian-ness of your system. In a big-endian system, the most significant byte is stored at the lowest address. The other bytes follow in decreasing order of significance.</db:para>
<db:programlisting language="cpp">#if Q_BYTE_ORDER == Q_BIG_ENDIAN
...
#endif

</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_BYTE_ORDER">Q_BYTE_ORDER</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_LITTLE_ENDIAN">Q_LITTLE_ENDIAN</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_BYTE_ORDER">
<db:title>Q_BYTE_ORDER</db:title>
<db:para>This macro can be used to determine the byte order your system uses for storing data in memory. i.e., whether your system is little-endian or big-endian. It is set by Qt to one of the macros <db:link xlink:href="qtglobal.xml#Q_LITTLE_ENDIAN">Q_LITTLE_ENDIAN</db:link> or <db:link xlink:href="qtglobal.xml#Q_BIG_ENDIAN">Q_BIG_ENDIAN</db:link>. You normally won't need to worry about endian-ness, but you might, for example if you need to know which byte of an integer or UTF-16 character is stored in the lowest address. Endian-ness is important in networking, where computers with different values for Q_BYTE_ORDER must pass data back and forth.</db:para>
<db:para>Use this macro as in the following examples.</db:para>
<db:programlisting language="cpp">#if Q_BYTE_ORDER == Q_BIG_ENDIAN
...
#endif

or

#if Q_BYTE_ORDER == Q_LITTLE_ENDIAN
...
#endif

</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_BIG_ENDIAN">Q_BIG_ENDIAN</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_LITTLE_ENDIAN">Q_LITTLE_ENDIAN</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_CC_BOR">
<db:title>Q_CC_BOR</db:title>
<db:para>Defined if the application is compiled using Borland/Turbo C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_CDS">
<db:title>Q_CC_CDS</db:title>
<db:para>Defined if the application is compiled using Reliant C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_COMEAU">
<db:title>Q_CC_COMEAU</db:title>
<db:para>Defined if the application is compiled using Comeau C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_DEC">
<db:title>Q_CC_DEC</db:title>
<db:para>Defined if the application is compiled using DEC C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_EDG">
<db:title>Q_CC_EDG</db:title>
<db:para>Defined if the application is compiled using Edison Design Group C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_GHS">
<db:title>Q_CC_GHS</db:title>
<db:para>Defined if the application is compiled using Green Hills Optimizing C++ Compilers.</db:para>
</db:section>
<db:section xml:id="Q_CC_GNU">
<db:title>Q_CC_GNU</db:title>
<db:para>Defined if the application is compiled using GNU C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_HIGHC">
<db:title>Q_CC_HIGHC</db:title>
<db:para>Defined if the application is compiled using MetaWare High C/C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_HPACC">
<db:title>Q_CC_HPACC</db:title>
<db:para>Defined if the application is compiled using HP aC++.</db:para>
</db:section>
<db:section xml:id="Q_CC_INTEL">
<db:title>Q_CC_INTEL</db:title>
<db:para>Defined if the application is compiled using Intel C++ for Linux, Intel C++ for Windows.</db:para>
</db:section>
<db:section xml:id="Q_CC_KAI">
<db:title>Q_CC_KAI</db:title>
<db:para>Defined if the application is compiled using KAI C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_MIPS">
<db:title>Q_CC_MIPS</db:title>
<db:para>Defined if the application is compiled using MIPSpro C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_MSVC">
<db:title>Q_CC_MSVC</db:title>
<db:para>Defined if the application is compiled using Microsoft Visual C/C++, Intel C++ for Windows.</db:para>
</db:section>
<db:section xml:id="Q_CC_OC">
<db:title>Q_CC_OC</db:title>
<db:para>Defined if the application is compiled using CenterLine C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_PGI">
<db:title>Q_CC_PGI</db:title>
<db:para>Defined if the application is compiled using Portland Group C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_SUN">
<db:title>Q_CC_SUN</db:title>
<db:para>Defined if the application is compiled using Forte Developer, or Sun Studio C++.</db:para>
</db:section>
<db:section xml:id="Q_CC_SYM">
<db:title>Q_CC_SYM</db:title>
<db:para>Defined if the application is compiled using Digital Mars C/C++ (used to be Symantec C++).</db:para>
</db:section>
<db:section xml:id="Q_CC_USLC">
<db:title>Q_CC_USLC</db:title>
<db:para>Defined if the application is compiled using SCO OUDK and UDK.</db:para>
</db:section>
<db:section xml:id="Q_CC_WAT">
<db:title>Q_CC_WAT</db:title>
<db:para>Defined if the application is compiled using Watcom C++.</db:para>
</db:section>
<db:section xml:id="Q_CHECK_PTR">
<db:title>void Q_CHECK_PTR(void *<db:emphasis>pointer</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">pointer</db:code> is 0, prints a warning message containing the source code's file name and line number, saying that the program ran out of memory.</db:para>
<db:para>Q_CHECK_PTR does nothing if QT_NO_DEBUG was defined during compilation.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int *a;

Q_CHECK_PTR(a = new int[80]);   // WRONG!

a = new (nothrow) int[80];      // Right
Q_CHECK_PTR(a);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_TYPEINFO">
<db:title>Q_DECLARE_TYPEINFO(<db:emphasis>Type</db:emphasis>, <db:emphasis>Flags</db:emphasis>)</db:title>
<db:para>You can use this macro to specify information about a custom type <db:code role="parameter">Type</db:code>. With accurate type information, Qt's <db:link xlink:href="containers.xml">generic containers</db:link> can choose appropriate storage methods and algorithms.</db:para>
<db:para><db:code role="parameter">Flags</db:code> can be one of the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Q_PRIMITIVE_TYPE specifies that <db:code role="parameter">Type</db:code> is a POD (plain old data) type with no constructor or destructor, or else a type where every bit pattern is a valid object and memcpy() creates a valid independent copy of the object.</db:para>
</db:listitem>
<db:listitem>
<db:para>Q_MOVABLE_TYPE specifies that <db:code role="parameter">Type</db:code> has a constructor and/or a destructor but can be moved in memory using memcpy().</db:para>
</db:listitem>
<db:listitem>
<db:para>Q_COMPLEX_TYPE (the default) specifies that <db:code role="parameter">Type</db:code> has constructors and/or a destructor and that it may not be moved in memory.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Example of a &quot;primitive&quot; type:</db:para>
<db:programlisting language="cpp">struct Point2D
{
    int x;
    int y;
};

Q_DECLARE_TYPEINFO(Point2D, Q_PRIMITIVE_TYPE);
</db:programlisting>
<db:para>An example of a non-POD &quot;primitive&quot; type is <db:link xlink:href="quuid.xml">QUuid</db:link>: Even though <db:link xlink:href="quuid.xml">QUuid</db:link> has constructors (and therefore isn't POD), every bit pattern still represents a valid object, and memcpy() can be used to create a valid independent copy of a <db:link xlink:href="quuid.xml">QUuid</db:link> object.</db:para>
<db:para>Example of a movable type:</db:para>
<db:programlisting language="cpp">class Point2D
{
public:
    Point2D() { data = new int[2]; }
    Point2D(const Point2D &amp;other) { ... }
    ~Point2D() { delete[] data; }

    Point2D &amp;operator=(const Point2D &amp;other) { ... }

    int x() const { return data[0]; }
    int y() const { return data[1]; }

private:
    int *data;
};

Q_DECLARE_TYPEINFO(Point2D, Q_MOVABLE_TYPE);
</db:programlisting>
</db:section>
<db:section xml:id="Q_DECL_CONSTEXPR">
<db:title>Q_DECL_CONSTEXPR</db:title>
<db:para>This macro can be used to declare variable that should be constructed at compile-time, or an inline function that can be computed at compile-time.</db:para>
<db:para>It expands to &quot;constexpr&quot; if your compiler supports that C++11 keyword, or to nothing otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_RELAXED_CONSTEXPR">Q_DECL_RELAXED_CONSTEXPR</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECL_EXPORT">
<db:title>Q_DECL_EXPORT</db:title>
<db:para>This macro marks a symbol for shared library export (see <db:link xlink:href="">Creating Shared Libraries</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_IMPORT">Q_DECL_IMPORT</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECL_FINAL">
<db:title>[since 5.0] Q_DECL_FINAL</db:title>
<db:para>This macro can be used to declare an overriding virtual or a class as &quot;final&quot;, with Java semantics. Further-derived classes can then no longer override this virtual function, or inherit from this class, respectively.</db:para>
<db:para>It expands to &quot;final&quot; if your compiler supports that C++11 contextual keyword, or something non-standard if your compiler supports something close enough to the C++11 semantics, or to nothing otherwise.</db:para>
<db:para>The macro goes at the end of the function, usually after the const, if any:</db:para>
<db:programlisting language="cpp">// more-derived classes no longer permitted to override this:
virtual void MyWidget::paintEvent(QPaintEvent*) Q_DECL_FINAL;
</db:programlisting>
<db:para>For classes, it goes in front of the : in the class definition, if any:</db:para>
<db:programlisting language="cpp">class QRect Q_DECL_FINAL { // cannot be derived from
    // ...
};
</db:programlisting>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_OVERRIDE">Q_DECL_OVERRIDE</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECL_IMPORT">
<db:title>Q_DECL_IMPORT</db:title>
<db:para>This macro declares a symbol to be an import from a shared library (see <db:link xlink:href="">Creating Shared Libraries</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_EXPORT">Q_DECL_EXPORT</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECL_NOEXCEPT">
<db:title>[since 5.0] Q_DECL_NOEXCEPT</db:title>
<db:para>This macro marks a function as never throwing. If the function does nevertheless throw, the behaviour is defined: std::terminate() is called.</db:para>
<db:para>The macro expands to C++11 noexcept, if available, or to nothing otherwise.</db:para>
<db:para>If you need the operator version of C++11 noexcept, use <db:link xlink:href="qtglobal.xml#Q_DECL_NOEXCEPT_EXPR">Q_DECL_NOEXCEPT_EXPR</db:link>(x).</db:para>
<db:para>If you don't need C++11 noexcept semantics, e.g. because your function can't possibly throw, don't use this macro, use <db:link xlink:href="qtglobal.xml#Q_DECL_NOTHROW">Q_DECL_NOTHROW</db:link> instead.</db:para>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_NOTHROW">Q_DECL_NOTHROW</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_NOEXCEPT_EXPR">Q_DECL_NOEXCEPT_EXPR</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECL_NOEXCEPT_EXPR">
<db:title>[since 5.0] Q_DECL_NOEXCEPT_EXPR(<db:emphasis>x</db:emphasis>)</db:title>
<db:para>This macro marks a function as non-throwing if <db:code role="parameter">x</db:code> is true. If the function does nevertheless throw, the behaviour is defined: std::terminate() is called.</db:para>
<db:para>The macro expands to C++11 noexcept(x), if available, or to nothing otherwise.</db:para>
<db:para>If you need the always-true version of C++11 noexcept, use <db:link xlink:href="qtglobal.xml#Q_DECL_NOEXCEPT">Q_DECL_NOEXCEPT</db:link>.</db:para>
<db:para>If you don't need C++11 noexcept semantics, e.g. because your function can't possibly throw, don't use this macro, use <db:link xlink:href="qtglobal.xml#Q_DECL_NOTHROW">Q_DECL_NOTHROW</db:link> instead.</db:para>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_NOTHROW">Q_DECL_NOTHROW</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_NOEXCEPT">Q_DECL_NOEXCEPT</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECL_NOTHROW">
<db:title>[since 5.0] Q_DECL_NOTHROW</db:title>
<db:para>This macro marks a function as never throwing, under no circumstances. If the function does nevertheless throw, the behaviour is undefined.</db:para>
<db:para>The macro expands to either &quot;throw()&quot;, if that has some benefit on the compiler, or to C++11 noexcept, if available, or to nothing otherwise.</db:para>
<db:para>If you need C++11 noexcept semantics, don't use this macro, use <db:link xlink:href="qtglobal.xml#Q_DECL_NOEXCEPT">Q_DECL_NOEXCEPT</db:link>/<db:link xlink:href="qtglobal.xml#Q_DECL_NOEXCEPT_EXPR">Q_DECL_NOEXCEPT_EXPR</db:link> instead.</db:para>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_NOEXCEPT">Q_DECL_NOEXCEPT</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_NOEXCEPT_EXPR">Q_DECL_NOEXCEPT_EXPR</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECL_OVERRIDE">
<db:title>[since 5.0] Q_DECL_OVERRIDE</db:title>
<db:para>This macro can be used to declare an overriding virtual function. Use of this markup will allow the compiler to generate an error if the overriding virtual function does not in fact override anything.</db:para>
<db:para>It expands to &quot;override&quot; if your compiler supports that C++11 contextual keyword, or to nothing otherwise.</db:para>
<db:para>The macro goes at the end of the function, usually after the const, if any:</db:para>
<db:programlisting language="cpp">// generate error if this doesn't actually override anything:
virtual void MyWidget::paintEvent(QPaintEvent*) Q_DECL_OVERRIDE;
</db:programlisting>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_FINAL">Q_DECL_FINAL</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECL_RELAXED_CONSTEXPR">
<db:title>Q_DECL_RELAXED_CONSTEXPR</db:title>
<db:para>This macro can be used to declare an inline function that can be computed at compile-time according to the relaxed rules from C++14.</db:para>
<db:para>It expands to &quot;constexpr&quot; if your compiler supports C++14 relaxed constant expressions, or to nothing otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_DECL_CONSTEXPR">Q_DECL_CONSTEXPR</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_FOREACH">
<db:title>Q_FOREACH(<db:emphasis>variable</db:emphasis>, <db:emphasis>container</db:emphasis>)</db:title>
<db:para>Same as foreach(<db:code role="parameter">variable</db:code>, <db:code role="parameter">container</db:code>).</db:para>
<db:para>This macro is available even when no_keywords is specified using the .pro file's CONFIG variable.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#foreach">foreach</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_FOREVER">
<db:title>Q_FOREVER</db:title>
<db:para>Same as <db:link xlink:href="qtglobal.xml#forever">forever</db:link>.</db:para>
<db:para>This macro is available even when no_keywords is specified using the .pro file's CONFIG variable.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#foreach">foreach</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_FORWARD_DECLARE_CF_TYPE">
<db:title>[since 5.2] Q_FORWARD_DECLARE_CF_TYPE(<db:emphasis>type</db:emphasis>)</db:title>
<db:para>Forward-declares a Core Foundation <db:code role="parameter">type</db:code>. This includes the actual type and the ref type. For example, Q_FORWARD_DECLARE_CF_TYPE(CFString) declares __CFString and CFStringRef.</db:para>
<db:para>This macro was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="Q_FORWARD_DECLARE_MUTABLE_CF_TYPE">
<db:title>[since 5.2] Q_FORWARD_DECLARE_MUTABLE_CF_TYPE(<db:emphasis>type</db:emphasis>)</db:title>
<db:para>Forward-declares a mutable Core Foundation <db:code role="parameter">type</db:code>. This includes the actual type and the ref type. For example, Q_FORWARD_DECLARE_MUTABLE_CF_TYPE(CFMutableString) declares __CFMutableString and CFMutableStringRef.</db:para>
<db:para>This macro was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="Q_FORWARD_DECLARE_OBJC_CLASS">
<db:title>[since 5.2] Q_FORWARD_DECLARE_OBJC_CLASS(<db:emphasis>classname</db:emphasis>)</db:title>
<db:para>Forward-declares an Objective-C <db:code role="parameter">classname</db:code> in a manner such that it can be compiled as either Objective-C or C++.</db:para>
<db:para>This is primarily intended for use in header files that may be included by both Objective-C and C++ source files.</db:para>
<db:para>This macro was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="Q_FUNC_INFO">
<db:title>const char*Q_FUNC_INFO</db:title>
<db:para>Expands to a string that describe the function the macro resides in. How this string looks more specifically is compiler dependent. With GNU GCC it is typically the function signature, while with other compilers it might be the line and column number.</db:para>
<db:para>Q_FUNC_INFO can be conveniently used with <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>(). For example, this function:</db:para>
<db:programlisting language="cpp">template&lt;typename TInputType&gt;
const TInputType &amp;myMin(const TInputType &amp;value1, const TInputType &amp;value2)
{
    qDebug() &lt;&lt; Q_FUNC_INFO &lt;&lt; &quot;was called with value1:&quot; &lt;&lt; value1 &lt;&lt; &quot;value2:&quot; &lt;&lt; value2;

    if(value1 &lt; value2)
        return value1;
    else
        return value2;
}
</db:programlisting>
<db:para>when instantiated with the integer type, will with the GCC compiler produce:</db:para>
<db:para><db:code>const TInputType&amp; myMin(const TInputType&amp;, const TInputType&amp;) [with TInputType = int] was called with value1: 3 value2: 4</db:code></db:para>
<db:para>If this macro is used outside a function, the behavior is undefined.</db:para>
</db:section>
<db:section xml:id="Q_INT64_C">
<db:title>qint64 Q_INT64_C(<db:emphasis>literal</db:emphasis>)</db:title>
<db:para>Wraps the signed 64-bit integer <db:code role="parameter">literal</db:code> in a platform-independent way.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">qint64 value = Q_INT64_C(932838457459459);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_UINT64_C">Q_UINT64_C</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_LIKELY">
<db:title>[since 4.8] Q_LIKELY(<db:emphasis>expr</db:emphasis>)</db:title>
<db:para>Hints to the compiler that the enclosed condition, <db:code role="parameter">expr</db:code>, is likely to evaluate to true.</db:para>
<db:para>Use of this macro can help the compiler to optimize the code.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    // the condition inside the &quot;if&quot; will be successful most of the times
    for (int i = 1; i &lt;= 365; i++) {
        if (Q_LIKELY(isWorkingDay(i))) {
            ...
        }
        ...
    }
</db:programlisting>
<db:para>This macro was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_UNLIKELY">Q_UNLIKELY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_LITTLE_ENDIAN">
<db:title>Q_LITTLE_ENDIAN</db:title>
<db:para>This macro represents a value you can compare to the macro <db:link xlink:href="qtglobal.xml#Q_BYTE_ORDER">Q_BYTE_ORDER</db:link> to determine the endian-ness of your system. In a little-endian system, the least significant byte is stored at the lowest address. The other bytes follow in increasing order of significance.</db:para>
<db:programlisting language="cpp">#if Q_BYTE_ORDER == Q_LITTLE_ENDIAN
...
#endif

</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_BYTE_ORDER">Q_BYTE_ORDER</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_BIG_ENDIAN">Q_BIG_ENDIAN</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_OS_AIX">
<db:title>Q_OS_AIX</db:title>
<db:para>Defined on AIX.</db:para>
</db:section>
<db:section xml:id="Q_OS_ANDROID">
<db:title>Q_OS_ANDROID</db:title>
<db:para>Defined on Android.</db:para>
</db:section>
<db:section xml:id="Q_OS_BSD4">
<db:title>Q_OS_BSD4</db:title>
<db:para>Defined on Any BSD 4.4 system.</db:para>
</db:section>
<db:section xml:id="Q_OS_BSDI">
<db:title>Q_OS_BSDI</db:title>
<db:para>Defined on BSD/OS.</db:para>
</db:section>
<db:section xml:id="Q_OS_CYGWIN">
<db:title>Q_OS_CYGWIN</db:title>
<db:para>Defined on Cygwin.</db:para>
</db:section>
<db:section xml:id="Q_OS_DARWIN">
<db:title>Q_OS_DARWIN</db:title>
<db:para>Defined on Darwin-based operating systems such as OS X and iOS, including any open source version(s) of Darwin.</db:para>
</db:section>
<db:section xml:id="Q_OS_DGUX">
<db:title>Q_OS_DGUX</db:title>
<db:para>Defined on DG/UX.</db:para>
</db:section>
<db:section xml:id="Q_OS_DYNIX">
<db:title>Q_OS_DYNIX</db:title>
<db:para>Defined on DYNIX/ptx.</db:para>
</db:section>
<db:section xml:id="Q_OS_FREEBSD">
<db:title>Q_OS_FREEBSD</db:title>
<db:para>Defined on FreeBSD.</db:para>
</db:section>
<db:section xml:id="Q_OS_HPUX">
<db:title>Q_OS_HPUX</db:title>
<db:para>Defined on HP-UX.</db:para>
</db:section>
<db:section xml:id="Q_OS_HURD">
<db:title>Q_OS_HURD</db:title>
<db:para>Defined on GNU Hurd.</db:para>
</db:section>
<db:section xml:id="Q_OS_IOS">
<db:title>Q_OS_IOS</db:title>
<db:para>Defined on iOS.</db:para>
</db:section>
<db:section xml:id="Q_OS_IRIX">
<db:title>Q_OS_IRIX</db:title>
<db:para>Defined on SGI Irix.</db:para>
</db:section>
<db:section xml:id="Q_OS_LINUX">
<db:title>Q_OS_LINUX</db:title>
<db:para>Defined on Linux.</db:para>
</db:section>
<db:section xml:id="Q_OS_LYNX">
<db:title>Q_OS_LYNX</db:title>
<db:para>Defined on LynxOS.</db:para>
</db:section>
<db:section xml:id="Q_OS_MAC">
<db:title>Q_OS_MAC</db:title>
<db:para>Defined on Darwin-based operating systems distributed by Apple, which currently includes OS X and iOS, but not the open source versions of Darwin.</db:para>
</db:section>
<db:section xml:id="Q_OS_NETBSD">
<db:title>Q_OS_NETBSD</db:title>
<db:para>Defined on NetBSD.</db:para>
</db:section>
<db:section xml:id="Q_OS_OPENBSD">
<db:title>Q_OS_OPENBSD</db:title>
<db:para>Defined on OpenBSD.</db:para>
</db:section>
<db:section xml:id="Q_OS_OSF">
<db:title>Q_OS_OSF</db:title>
<db:para>Defined on HP Tru64 UNIX.</db:para>
</db:section>
<db:section xml:id="Q_OS_OSX">
<db:title>Q_OS_OSX</db:title>
<db:para>Defined on OS X.</db:para>
</db:section>
<db:section xml:id="Q_OS_QNX">
<db:title>Q_OS_QNX</db:title>
<db:para>Defined on QNX Neutrino.</db:para>
</db:section>
<db:section xml:id="Q_OS_RELIANT">
<db:title>Q_OS_RELIANT</db:title>
<db:para>Defined on Reliant UNIX.</db:para>
</db:section>
<db:section xml:id="Q_OS_SCO">
<db:title>Q_OS_SCO</db:title>
<db:para>Defined on SCO OpenServer 5.</db:para>
</db:section>
<db:section xml:id="Q_OS_SOLARIS">
<db:title>Q_OS_SOLARIS</db:title>
<db:para>Defined on Sun Solaris.</db:para>
</db:section>
<db:section xml:id="Q_OS_ULTRIX">
<db:title>Q_OS_ULTRIX</db:title>
<db:para>Defined on DEC Ultrix.</db:para>
</db:section>
<db:section xml:id="Q_OS_UNIX">
<db:title>Q_OS_UNIX</db:title>
<db:para>Defined on Any UNIX BSD/SYSV system.</db:para>
</db:section>
<db:section xml:id="Q_OS_UNIXWARE">
<db:title>Q_OS_UNIXWARE</db:title>
<db:para>Defined on UnixWare 7, Open UNIX 8.</db:para>
</db:section>
<db:section xml:id="Q_OS_WIN32">
<db:title>Q_OS_WIN32</db:title>
<db:para>Defined on 32-bit and 64-bit versions of Windows (not on Windows CE).</db:para>
</db:section>
<db:section xml:id="Q_OS_WIN64">
<db:title>Q_OS_WIN64</db:title>
<db:para>Defined on 64-bit versions of Windows.</db:para>
</db:section>
<db:section xml:id="Q_OS_WIN">
<db:title>Q_OS_WIN</db:title>
<db:para>Defined on all supported versions of Windows. That is, if <db:link xlink:href="qtglobal.xml#Q_OS_WIN32">Q_OS_WIN32</db:link>, <db:link xlink:href="qtglobal.xml#Q_OS_WIN64">Q_OS_WIN64</db:link>, <db:link xlink:href="qtglobal.xml#Q_OS_WINCE">Q_OS_WINCE</db:link> or <db:link xlink:href="qtglobal.xml#Q_OS_WINRT">Q_OS_WINRT</db:link> is defined.</db:para>
</db:section>
<db:section xml:id="Q_OS_WINCE">
<db:title>Q_OS_WINCE</db:title>
<db:para>Defined on Windows CE.</db:para>
</db:section>
<db:section xml:id="Q_OS_WINPHONE">
<db:title>Q_OS_WINPHONE</db:title>
<db:para>Defined on Windows Phone 8.</db:para>
</db:section>
<db:section xml:id="Q_OS_WINRT">
<db:title>Q_OS_WINRT</db:title>
<db:para>Defined for Windows Runtime (Windows Store apps) on Windows 8, Windows RT, and Windows Phone 8.</db:para>
</db:section>
<db:section xml:id="Q_PROCESSOR_X86">
<db:title>Q_PROCESSOR_X86</db:title>
<db:para>Defined if the application is compiled for x86 processors. Qt currently supports two x86 variants: <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_X86_32">Q_PROCESSOR_X86_32</db:link> and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_X86_64">Q_PROCESSOR_X86_64</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_S390">
<db:title>Q_PROCESSOR_S390</db:title>
<db:para>Defined if the application is compiled for S/390 processors. Qt supports one optional variant of S/390: <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_S390_X">Q_PROCESSOR_S390_X</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_ALPHA">
<db:title>Q_PROCESSOR_ALPHA</db:title>
<db:para>Defined if the application is compiled for Alpha processors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_ARM">
<db:title>Q_PROCESSOR_ARM</db:title>
<db:para>Defined if the application is compiled for ARM processors. Qt currently supports three optional ARM revisions: <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_ARM_V5">Q_PROCESSOR_ARM_V5</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_ARM_V6">Q_PROCESSOR_ARM_V6</db:link>, and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_ARM_V7">Q_PROCESSOR_ARM_V7</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_ARM_V5">
<db:title>Q_PROCESSOR_ARM_V5</db:title>
<db:para>Defined if the application is compiled for ARMv5 processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_ARM">Q_PROCESSOR_ARM</db:link> macro is also defined when Q_PROCESSOR_ARM_V5 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_ARM_V6">
<db:title>Q_PROCESSOR_ARM_V6</db:title>
<db:para>Defined if the application is compiled for ARMv6 processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_ARM">Q_PROCESSOR_ARM</db:link> and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_ARM_V5">Q_PROCESSOR_ARM_V5</db:link> macros are also defined when Q_PROCESSOR_ARM_V6 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_ARM_V7">
<db:title>Q_PROCESSOR_ARM_V7</db:title>
<db:para>Defined if the application is compiled for ARMv7 processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_ARM">Q_PROCESSOR_ARM</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_ARM_V5">Q_PROCESSOR_ARM_V5</db:link>, and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_ARM_V6">Q_PROCESSOR_ARM_V6</db:link> macros are also defined when Q_PROCESSOR_ARM_V7 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_AVR32">
<db:title>Q_PROCESSOR_AVR32</db:title>
<db:para>Defined if the application is compiled for AVR32 processors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_BLACKFIN">
<db:title>Q_PROCESSOR_BLACKFIN</db:title>
<db:para>Defined if the application is compiled for Blackfin processors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_IA64">
<db:title>Q_PROCESSOR_IA64</db:title>
<db:para>Defined if the application is compiled for IA-64 processors. This includes all Itanium and Itanium 2 processors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_MIPS">
<db:title>Q_PROCESSOR_MIPS</db:title>
<db:para>Defined if the application is compiled for MIPS processors. Qt currently supports seven MIPS revisions: <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_I">Q_PROCESSOR_MIPS_I</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_II">Q_PROCESSOR_MIPS_II</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_III">Q_PROCESSOR_MIPS_III</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_IV">Q_PROCESSOR_MIPS_IV</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_V">Q_PROCESSOR_MIPS_V</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_32">Q_PROCESSOR_MIPS_32</db:link>, and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_64">Q_PROCESSOR_MIPS_64</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_MIPS_32">
<db:title>Q_PROCESSOR_MIPS_32</db:title>
<db:para>Defined if the application is compiled for MIPS32 processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS">Q_PROCESSOR_MIPS</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_I">Q_PROCESSOR_MIPS_I</db:link>, and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_II">Q_PROCESSOR_MIPS_II</db:link> macros are also defined when Q_PROCESSOR_MIPS_32 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_MIPS_64">
<db:title>Q_PROCESSOR_MIPS_64</db:title>
<db:para>Defined if the application is compiled for MIPS64 processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS">Q_PROCESSOR_MIPS</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_I">Q_PROCESSOR_MIPS_I</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_II">Q_PROCESSOR_MIPS_II</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_III">Q_PROCESSOR_MIPS_III</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_IV">Q_PROCESSOR_MIPS_IV</db:link>, and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_V">Q_PROCESSOR_MIPS_V</db:link> macros are also defined when Q_PROCESSOR_MIPS_64 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_MIPS_I">
<db:title>Q_PROCESSOR_MIPS_I</db:title>
<db:para>Defined if the application is compiled for MIPS-I processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS">Q_PROCESSOR_MIPS</db:link> macro is also defined when Q_PROCESSOR_MIPS_I is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_MIPS_II">
<db:title>Q_PROCESSOR_MIPS_II</db:title>
<db:para>Defined if the application is compiled for MIPS-II processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS">Q_PROCESSOR_MIPS</db:link> and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_I">Q_PROCESSOR_MIPS_I</db:link> macros are also defined when Q_PROCESSOR_MIPS_II is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_MIPS_III">
<db:title>Q_PROCESSOR_MIPS_III</db:title>
<db:para>Defined if the application is compiled for MIPS-III processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS">Q_PROCESSOR_MIPS</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_I">Q_PROCESSOR_MIPS_I</db:link>, and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_II">Q_PROCESSOR_MIPS_II</db:link> macros are also defined when Q_PROCESSOR_MIPS_III is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_MIPS_IV">
<db:title>Q_PROCESSOR_MIPS_IV</db:title>
<db:para>Defined if the application is compiled for MIPS-IV processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS">Q_PROCESSOR_MIPS</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_I">Q_PROCESSOR_MIPS_I</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_II">Q_PROCESSOR_MIPS_II</db:link>, and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_III">Q_PROCESSOR_MIPS_III</db:link> macros are also defined when Q_PROCESSOR_MIPS_IV is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_MIPS_V">
<db:title>Q_PROCESSOR_MIPS_V</db:title>
<db:para>Defined if the application is compiled for MIPS-V processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS">Q_PROCESSOR_MIPS</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_I">Q_PROCESSOR_MIPS_I</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_II">Q_PROCESSOR_MIPS_II</db:link>, <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_III">Q_PROCESSOR_MIPS_III</db:link>, and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_MIPS_IV">Q_PROCESSOR_MIPS_IV</db:link> macros are also defined when Q_PROCESSOR_MIPS_V is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_POWER">
<db:title>Q_PROCESSOR_POWER</db:title>
<db:para>Defined if the application is compiled for POWER processors. Qt currently supports two Power variants: <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_POWER_32">Q_PROCESSOR_POWER_32</db:link> and <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_POWER_64">Q_PROCESSOR_POWER_64</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_POWER_32">
<db:title>Q_PROCESSOR_POWER_32</db:title>
<db:para>Defined if the application is compiled for 32-bit Power processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_POWER">Q_PROCESSOR_POWER</db:link> macro is also defined when Q_PROCESSOR_POWER_32 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_POWER_64">
<db:title>Q_PROCESSOR_POWER_64</db:title>
<db:para>Defined if the application is compiled for 64-bit Power processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_POWER">Q_PROCESSOR_POWER</db:link> macro is also defined when Q_PROCESSOR_POWER_64 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_S390_X">
<db:title>Q_PROCESSOR_S390_X</db:title>
<db:para>Defined if the application is compiled for S/390x processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_S390">Q_PROCESSOR_S390</db:link> macro is also defined when Q_PROCESSOR_S390_X is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_SH">
<db:title>Q_PROCESSOR_SH</db:title>
<db:para>Defined if the application is compiled for SuperH processors. Qt currently supports one SuperH revision: <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_SH_4A">Q_PROCESSOR_SH_4A</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_SH_4A">
<db:title>Q_PROCESSOR_SH_4A</db:title>
<db:para>Defined if the application is compiled for SuperH 4A processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_SH">Q_PROCESSOR_SH</db:link> macro is also defined when Q_PROCESSOR_SH_4A is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_SPARC">
<db:title>Q_PROCESSOR_SPARC</db:title>
<db:para>Defined if the application is compiled for SPARC processors. Qt currently supports one optional SPARC revision: <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_SPARC_V9">Q_PROCESSOR_SPARC_V9</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_SPARC_V9">
<db:title>Q_PROCESSOR_SPARC_V9</db:title>
<db:para>Defined if the application is compiled for SPARC V9 processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_SPARC">Q_PROCESSOR_SPARC</db:link> macro is also defined when Q_PROCESSOR_SPARC_V9 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_X86_32">
<db:title>Q_PROCESSOR_X86_32</db:title>
<db:para>Defined if the application is compiled for 32-bit x86 processors. This includes all i386, i486, i586, and i686 processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_X86">Q_PROCESSOR_X86</db:link> macro is also defined when Q_PROCESSOR_X86_32 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROCESSOR_X86_64">
<db:title>Q_PROCESSOR_X86_64</db:title>
<db:para>Defined if the application is compiled for 64-bit x86 processors. This includes all AMD64, Intel 64, and other x86_64/x64 processors. The <db:link xlink:href="qtglobal.xml#Q_PROCESSOR_X86">Q_PROCESSOR_X86</db:link> macro is also defined when Q_PROCESSOR_X86_64 is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_UINT64_C">
<db:title>quint64 Q_UINT64_C(<db:emphasis>literal</db:emphasis>)</db:title>
<db:para>Wraps the unsigned 64-bit integer <db:code role="parameter">literal</db:code> in a platform-independent way.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">quint64 value = Q_UINT64_C(932838457459459);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#quint64-typedef">quint64</db:link></db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_INT64_C">Q_INT64_C</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_UNLIKELY">
<db:title>[since 4.8] Q_UNLIKELY(<db:emphasis>expr</db:emphasis>)</db:title>
<db:para>Hints to the compiler that the enclosed condition, <db:code role="parameter">expr</db:code>, is likely to evaluate to false.</db:para>
<db:para>Use of this macro can help the compiler to optimize the code.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">bool readConfiguration(const QFile &amp;file)
{
    // We expect to be asked to read an existing file
    if (Q_UNLIKELY(!file.exists())) {
        qWarning() &lt;&lt; &quot;File not found&quot;;
        return false;
    }

    ...
    return true;
}
</db:programlisting>
<db:para>This macro was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_LIKELY">Q_LIKELY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_UNREACHABLE">
<db:title>[since 5.0] void Q_UNREACHABLE</db:title>
<db:para>Tells the compiler that the current point cannot be reached by any execution, so it may optimize any code paths leading here as dead code, as well as code continuing from here.</db:para>
<db:para>This macro is useful to mark impossible conditions. For example, given the following enum:</db:para>
<db:programlisting language="cpp">   enum Shapes {
       Rectangle,
       Triangle,
       Circle,
       NumShapes
   };
</db:programlisting>
<db:para>One can write a switch table like so:</db:para>
<db:programlisting language="cpp">   switch (shape) {
       case Rectangle:
           return rectangle();
       case Triangle:
           return triangle();
       case Circle:
           return circle();
       case NumShapes:
           Q_UNREACHABLE();
           break;
   }
</db:programlisting>
<db:para>The advantage of inserting Q_UNREACHABLE() at that point is that the compiler is told not to generate code for a shape variable containing that value. If the macro is missing, the compiler will still generate the necessary comparisons for that value. If the case label were removed, some compilers could produce a warning that some enum values were not checked.</db:para>
<db:para>By using this macro in impossible conditions, code coverage may be improved as dead code paths may be eliminated.</db:para>
<db:para>In debug builds the condition is enforced by an assert to facilitate debugging.</db:para>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#Q_ASSUME">Q_ASSUME</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_UNUSED">
<db:title>Q_UNUSED(<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Indicates to the compiler that the parameter with the specified <db:code role="parameter">name</db:code> is not used in the body of a function. This can be used to suppress compiler warnings while allowing functions to be defined with meaningful parameter names in their signatures.</db:para>
</db:section>
<db:section xml:id="foreach">
<db:title>foreach(<db:emphasis>variable</db:emphasis>, <db:emphasis>container</db:emphasis>)</db:title>
<db:para>This macro is used to implement Qt's foreach loop. The <db:code role="parameter">variable</db:code> parameter is a variable name or variable definition; the <db:code role="parameter">container</db:code> parameter is a Qt container whose value type corresponds to the type of the variable. See <db:link xlink:href="containers.xml#the-foreach-keyword">The foreach Keyword</db:link> for details.</db:para>
<db:para>If you're worried about namespace pollution, you can disable this macro by adding the following line to your .pro file:</db:para>
<db:programlisting language="cpp">CONFIG += no_keywords
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_FOREACH">Q_FOREACH</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="forever">
<db:title>forever</db:title>
<db:para>This macro is provided for convenience for writing infinite loops.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">forever {
    ...
}
</db:programlisting>
<db:para>It is equivalent to for (;;).</db:para>
<db:para>If you're worried about namespace pollution, you can disable this macro by adding the following line to your .pro file:</db:para>
<db:programlisting language="cpp">CONFIG += no_keywords
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#Q_FOREVER">Q_FOREVER</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qCritical">
<db:title>qCritical(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the critical message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows, the message is sent to the debugger. On Blackberry the message is sent to slogger2.</db:para>
<db:para>It exits if the environment variable QT_FATAL_CRITICALS is not empty.</db:para>
<db:para>This function takes a format string and a list of arguments, similar to the C printf() function. The format should be a Latin-1 string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void load(const QString &amp;fileName)
{
    QFile file(fileName);
    if (!file.exists())
        qCritical(&quot;File '%s' does not exist!&quot;, qUtf8Printable(fileName));
}
</db:programlisting>
<db:para>If you include &lt;QtDebug&gt;, a more convenient syntax is also available:</db:para>
<db:programlisting language="cpp">qCritical() &lt;&lt; &quot;Brush:&quot; &lt;&lt; myQBrush &lt;&lt; &quot;Other
value:&quot; &lt;&lt; i;
</db:programlisting>
<db:para>A space is inserted between the items, and a newline is appended at the end.</db:para>
<db:para>To suppress the output at runtime, install your own message handler with <db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDebug">
<db:title>qDebug(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the debug message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows the message is sent to the console, if it is a console application; otherwise, it is sent to the debugger. On Blackberry, the message is sent to slogger2. This function does nothing if QT_NO_DEBUG_OUTPUT was defined during compilation.</db:para>
<db:para>If you pass the function a format string and a list of arguments, it works in similar way to the C printf() function. The format should be a Latin-1 string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">qDebug(&quot;Items in list: %d&quot;, myList.size());
</db:programlisting>
<db:para>If you include &lt;QtDebug&gt;, a more convenient syntax is also available:</db:para>
<db:programlisting language="cpp">qDebug() &lt;&lt; &quot;Brush:&quot; &lt;&lt; myQBrush &lt;&lt; &quot;Other value:&quot; &lt;&lt; i;
</db:programlisting>
<db:para>With this syntax, the function returns a <db:link xlink:href="qdebug.xml">QDebug</db:link> object that is configured to use the <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtDebugMsg</db:link> message type. It automatically puts a single space between each item, and outputs a newline at the end. It supports many C++ and Qt types.</db:para>
<db:para>To suppress the output at run-time, install your own message handler with <db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qFatal">
<db:title>qFatal(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the fatal message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows, the message is sent to the debugger. On Blackberry the message is sent to slogger2.</db:para>
<db:para>If you are using the <db:emphasis role="bold">default message handler</db:emphasis> this function will abort on Unix systems to create a core dump. On Windows, for debug builds, this function will report a _CRT_ERROR enabling you to connect a debugger to the application.</db:para>
<db:para>This function takes a format string and a list of arguments, similar to the C printf() function.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int divide(int a, int b)
{
    if (b == 0)                                // program error
        qFatal(&quot;divide: cannot divide by zero&quot;);
    return a / b;
}
</db:programlisting>
<db:para>To suppress the output at runtime, install your own message handler with <db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qInfo">
<db:title>[since 5.5] qInfo(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the informational message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows, the message is sent to the console, if it is a console application; otherwise, it is sent to the debugger. On Blackberry the message is sent to slogger2. This function does nothing if QT_NO_INFO_OUTPUT was defined during compilation.</db:para>
<db:para>If you pass the function a format string and a list of arguments, it works in similar way to the C printf() function. The format should be a Latin-1 string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">qInfo(&quot;Items in list: %d&quot;, myList.size());
</db:programlisting>
<db:para>If you include &lt;QtDebug&gt;, a more convenient syntax is also available:</db:para>
<db:programlisting language="cpp">qInfo() &lt;&lt; &quot;Brush:&quot; &lt;&lt; myQBrush &lt;&lt; &quot;Other value:&quot; &lt;&lt; i;
</db:programlisting>
<db:para>With this syntax, the function returns a <db:link xlink:href="qdebug.xml">QDebug</db:link> object that is configured to use the <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtInfoMsg</db:link> message type. It automatically puts a single space between each item, and outputs a newline at the end. It supports many C++ and Qt types.</db:para>
<db:para>To suppress the output at run-time, install your own message handler with <db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
<db:para>This macro was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qMove">
<db:title>qMove(<db:emphasis>x</db:emphasis>)</db:title>
<db:para>It expands to &quot;std::move&quot; if your compiler supports that C++11 function, or to nothing otherwise.</db:para>
<db:para>qMove takes an rvalue reference to its parameter <db:code role="parameter">x</db:code>, and converts it to an xvalue.</db:para>
</db:section>
<db:section xml:id="qPrintable">
<db:title>const char *qPrintable(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">str</db:code> as a const char *. This is equivalent to <db:code role="parameter">str</db:code>.toLocal8Bit().constData().</db:para>
<db:para>The char pointer will be invalid after the statement in which qPrintable() is used. This is because the array returned by QString::toLocal8Bit() will fall out of scope.</db:para>
<db:note>
<db:para><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>(), <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>(), <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>() expect %s arguments to be UTF-8 encoded, while qPrintable() converts to local 8-bit encoding. Therefore <db:link xlink:href="qtglobal.xml#qUtf8Printable">qUtf8Printable</db:link>() should be used for logging strings instead of qPrintable().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qUtf8Printable">qUtf8Printable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qUtf8Printable">
<db:title>[since 5.4] const char *qUtf8Printable(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">str</db:code> as a const char *. This is equivalent to <db:code role="parameter">str</db:code>.toUtf8().constData().</db:para>
<db:para>The char pointer will be invalid after the statement in which qUtf8Printable() is used. This is because the array returned by QString::toUtf8() will fall out of scope.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">qWarning(&quot;%s: %s&quot;, qUtf8Printable(key), qUtf8Printable(value));
</db:programlisting>
<db:para>This macro was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qPrintable">qPrintable</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qWarning">
<db:title>qWarning(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the warning message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows, the message is sent to the debugger. On Blackberry the message is sent to slogger2. This function does nothing if QT_NO_WARNING_OUTPUT was defined during compilation; it exits if the environment variable QT_FATAL_WARNINGS is not empty.</db:para>
<db:para>This function takes a format string and a list of arguments, similar to the C printf() function. The format should be a Latin-1 string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void f(int c)
{
    if (c &gt; 200)
        qWarning(&quot;f: bad argument, c == %d&quot;, c);
}
</db:programlisting>
<db:para>If you include &lt;QtDebug&gt;, a more convenient syntax is also available:</db:para>
<db:programlisting language="cpp">qWarning() &lt;&lt; &quot;Brush:&quot; &lt;&lt; myQBrush &lt;&lt; &quot;Other value:&quot;
&lt;&lt; i;
</db:programlisting>
<db:para>This syntax inserts a space between each item, and appends a newline at the end.</db:para>
<db:para>To suppress the output at runtime, install your own message handler with <db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for &lt;QtGlobal&gt;</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtglobal.xml">&lt;QtGlobal&gt;</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-macro-documentation">
<db:title>Obsolete Macro Documentation</db:title>
<db:section xml:id="QABSx">
<db:title>[deprecated] QABS(<db:emphasis>n</db:emphasis>)</db:title>
<db:para>This macro is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qtglobal.xml#qAbs">qAbs</db:link>(<db:code role="parameter">n</db:code>) instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QMINx">QMIN</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#QMAXx">QMAX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMAXx">
<db:title>[deprecated] QMAX(<db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This macro is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qtglobal.xml#qMax">qMax</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QMINx">QMIN</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#QABSx">QABS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMINx">
<db:title>[deprecated] QMIN(<db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This macro is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qtglobal.xml#qMin">qMin</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QMAXx">QMAX</db:link>()</db:member>
<db:member><db:link xlink:href="qtglobal.xml#QABSx">QABS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
