<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Pixelator Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Pixelator example shows how delegates can be used to customize the way that items are rendered in standard item views.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pixelator-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>By default, <db:link xlink:href="qtreeview.xml">QTreeView</db:link>, <db:link xlink:href="qtableview.xml">QTableView</db:link>, and <db:link xlink:href="qlistview.xml">QListView</db:link> use a standard item delegate to display and edit a set of common data types that are sufficient for many applications. However, an application may need to represent items of data in a particular way, or provide support for rendering more specialized data types, and this often requires the use of a custom delegate.</db:para>
<db:para>In this example, we show how to use custom delegates to modify the appearance of standard views. To do this, we implement the following components:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A model which represents each pixel in an image as an item of data, where each item contains a value for the brightness of the corresponding pixel.</db:para>
</db:listitem>
<db:listitem>
<db:para>A custom delegate that uses the information supplied by the model to represent each pixel as a black circle on a white background, where the radius of the circle corresponds to the darkness of the pixel.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This example may be useful for developers who want to implement their own table models or custom delegates. The process of creating custom delegates for editing item data is covered in the <db:link xlink:href="qtwidgets-itemviews-spinboxdelegate-example.xml">Spin Box Delegate</db:link> example.</db:para>
<db:section xml:id="imagemodel-class-definition">
<db:title>ImageModel Class Definition</db:title>
<db:para>The ImageModel class is defined as follows:</db:para>
<db:programlisting language="cpp">class ImageModel : public QAbstractTableModel
{
    Q_OBJECT

public:
    ImageModel(QObject *parent = 0);

    void setImage(const QImage &amp;image);

    int rowCount(const QModelIndex &amp;parent = QModelIndex()) const override;
    int columnCount(const QModelIndex &amp;parent = QModelIndex()) const override;

    QVariant data(const QModelIndex &amp;index, int role = Qt::DisplayRole) const override;
    QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;

private:
    QImage modelImage;
};
</db:programlisting>
<db:para>Since we only require a simple, read-only table model, we only need to implement functions to indicate the dimensions of the image and supply data to other components.</db:para>
</db:section>
<db:section xml:id="imagemodel-class-implementation">
<db:title>ImageModel Class Implementation</db:title>
<db:para>The constructor is trivial:</db:para>
<db:programlisting language="cpp">ImageModel::ImageModel(QObject *parent)
    : QAbstractTableModel(parent)
{
}
</db:programlisting>
<db:para>The setImage() function sets the image that will be used by the model:</db:para>
<db:programlisting language="cpp">void ImageModel::setImage(const QImage &amp;image)
{
    beginResetModel();
    modelImage = image;
    endResetModel();
}
</db:programlisting>
<db:para>The QAbstractItemModel::reset() call tells the view(s) that the model has changed.</db:para>
<db:para>The rowCount() and columnCount() functions return the height and width of the image respectively:</db:para>
<db:programlisting language="cpp">int ImageModel::rowCount(const QModelIndex &amp; /* parent */) const
{
    return modelImage.height();
}

int ImageModel::columnCount(const QModelIndex &amp; /* parent */) const
{
    return modelImage.width();
}
</db:programlisting>
<db:para>Since the image is a simple two-dimensional structure, the parent arguments to these functions are unused. They both simply return the relevant size from the underlying image object.</db:para>
<db:para>The data() function returns data for the item that corresponds to a given model index in a format that is suitable for a particular role:</db:para>
<db:programlisting language="cpp">QVariant ImageModel::data(const QModelIndex &amp;index, int role) const
{
    if (!index.isValid() || role != Qt::DisplayRole)
        return QVariant();
    return qGray(modelImage.pixel(index.column(), index.row()));
}
</db:programlisting>
<db:para>In this implementation, we only check that the model index is valid, and that the role requested is the <db:link xlink:href="qt.xml#ItemDataRole-enum">DisplayRole</db:link>. If so, the function returns the grayscale value of the relevant pixel in the image; otherwise, a null model index is returned.</db:para>
<db:para>This model can be used with <db:link xlink:href="qtableview.xml">QTableView</db:link> to display the integer brightness values for the pixels in the image. However, we will implement a custom delegate to display this information in a more artistic way.</db:para>
<db:para>The headerData() function is also reimplemented:</db:para>
<db:programlisting language="cpp">QVariant ImageModel::headerData(int /* section */,
                                Qt::Orientation /* orientation */,
                                int role) const
{
    if (role == Qt::SizeHintRole)
        return QSize(1, 1);
    return QVariant();
}
</db:programlisting>
<db:para>We return (1, 1) as the size hint for a header item. If we didn't, the headers would default to a larger size, preventing us from displaying really small items (which can be specified using the <db:guilabel>Pixel size</db:guilabel> combobox).</db:para>
</db:section>
<db:section xml:id="pixeldelegate-class-definition">
<db:title>PixelDelegate Class Definition</db:title>
<db:para>The PixelDelegate class is defined as follows:</db:para>
<db:programlisting language="cpp">class PixelDelegate : public QAbstractItemDelegate
{
    Q_OBJECT

public:
    PixelDelegate(QObject *parent = 0);

    void paint(QPainter *painter, const QStyleOptionViewItem &amp;option,
               const QModelIndex &amp;index) const override;

    QSize sizeHint(const QStyleOptionViewItem &amp;option,
                   const QModelIndex &amp;index ) const override;

public slots:
    void setPixelSize(int size);

private:
    int pixelSize;
};
</db:programlisting>
<db:para>This class provides only basic features for a delegate so, unlike the <db:link xlink:href="qtwidgets-itemviews-spinboxdelegate-example.xml">Spin Box Delegate</db:link> example, we subclass <db:link xlink:href="qabstractitemdelegate.xml">QAbstractItemDelegate</db:link> instead of <db:link xlink:href="qitemdelegate.xml">QItemDelegate</db:link>.</db:para>
<db:para>We only need to reimplement <db:link xlink:href="qabstractitemdelegate.xml#paint">paint</db:link>() and <db:link xlink:href="qabstractitemdelegate.xml#sizeHint">sizeHint</db:link>() in this class. However, we also provide a delegate-specific setPixelSize() function so that we can change the delegate's behavior via the signals and slots mechanism.</db:para>
</db:section>
<db:section xml:id="pixeldelegate-class-implementation">
<db:title>PixelDelegate Class Implementation</db:title>
<db:para>The PixelDelegate constructor is used to set up a default value for the size of each &quot;pixel&quot; that it renders. The base class constructor is also called to ensure that the delegate is set up with a parent object, if one is supplied:</db:para>
<db:programlisting language="cpp">PixelDelegate::PixelDelegate(QObject *parent)
    : QAbstractItemDelegate(parent)
{
    pixelSize = 12;
}
</db:programlisting>
<db:para>Each item is rendered by the delegate's <db:link xlink:href="qabstractitemdelegate.xml#paint">paint</db:link>() function. The view calls this function with a ready-to-use <db:link xlink:href="qpainter.xml">QPainter</db:link> object, style information that the delegate should use to correctly draw the item, and an index to the item in the model:</db:para>
<db:programlisting language="cpp">void PixelDelegate::paint(QPainter *painter, const QStyleOptionViewItem &amp;option,
                          const QModelIndex &amp;index) const
{
    if (option.state &amp; QStyle::State_Selected)
        painter-&gt;fillRect(option.rect, option.palette.highlight());
</db:programlisting>
<db:para>The first task the delegate has to perform is to draw the item's background correctly. Usually, selected items appear differently to non-selected items, so we begin by testing the state passed in the style option and filling the background if necessary.</db:para>
<db:para>The radius of each circle is calculated in the following lines of code:</db:para>
<db:programlisting language="cpp">    int size = qMin(option.rect.width(), option.rect.height());
    int brightness = index.model()-&gt;data(index, Qt::DisplayRole).toInt();
    double radius = (size / 2.0) - (brightness / 255.0 * size / 2.0);
    if (radius == 0.0)
        return;
</db:programlisting>
<db:para>First, the largest possible radius of the circle is determined by taking the smallest dimension of the style option's rect attribute. Using the model index supplied, we obtain a value for the brightness of the relevant pixel in the image. The radius of the circle is calculated by scaling the brightness to fit within the item and subtracting it from the largest possible radius.</db:para>
<db:programlisting language="cpp">    painter-&gt;save();
    painter-&gt;setRenderHint(QPainter::Antialiasing, true);
    painter-&gt;setPen(Qt::NoPen);
</db:programlisting>
<db:para>We save the painter's state, turn on antialiasing (to obtain smoother curves), and turn off the pen.</db:para>
<db:programlisting language="cpp">    if (option.state &amp; QStyle::State_Selected)
        painter-&gt;setBrush(option.palette.highlightedText());
    else
        painter-&gt;setBrush(option.palette.text());
</db:programlisting>
<db:para>The foreground of the item (the circle representing a pixel) must be rendered using an appropriate brush. For unselected items, we will use a solid black brush; selected items are drawn using a predefined brush from the style option's palette.</db:para>
<db:programlisting language="cpp">    painter-&gt;drawEllipse(QRectF(option.rect.x() + option.rect.width() / 2 - radius,
                                option.rect.y() + option.rect.height() / 2 - radius,
                                2 * radius, 2 * radius));
    painter-&gt;restore();
}
</db:programlisting>
<db:para>Finally, we paint the circle within the rectangle specified by the style option and we call <db:link xlink:href="qpainter.xml#restore">restore</db:link>() on the painter.</db:para>
<db:para>The paint() function does not have to be particularly complicated; it is only necessary to ensure that the state of the painter when the function returns is the same as it was when it was called. This usually means that any transformations applied to the painter must be preceded by a call to <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>() and followed by a call to <db:link xlink:href="qpainter.xml#restore">QPainter::restore</db:link>().</db:para>
<db:para>The delegate's <db:link xlink:href="qabstractitemdelegate.xml#sizeHint">sizeHint</db:link>() function returns a size for the item based on the predefined pixel size, initially set up in the constructor:</db:para>
<db:programlisting language="cpp">QSize PixelDelegate::sizeHint(const QStyleOptionViewItem &amp; /* option */,
                              const QModelIndex &amp; /* index */) const
{
    return QSize(pixelSize, pixelSize);
}
</db:programlisting>
<db:para>The delegate's size is updated whenever the pixel size is changed. We provide a custom slot to do this:</db:para>
<db:programlisting language="cpp">void PixelDelegate::setPixelSize(int size)
{
    pixelSize = size;
}
</db:programlisting>
</db:section>
<db:section xml:id="using-the-custom-delegate">
<db:title>Using The Custom Delegate</db:title>
<db:para>In this example, we use a main window to display a table of data, using the custom delegate to render each cell in a particular way. Much of the MainWindow class performs tasks that are not related to item views. Here, we only quote the parts that are relevant. You can look at the rest of the implementation by following the links to the code at the top of this document.</db:para>
<db:para>In the constructor, we set up a table view, turn off its grid, and hide its headers:</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
{
    ...
    view = new QTableView;
    view-&gt;setShowGrid(false);
    view-&gt;horizontalHeader()-&gt;hide();
    view-&gt;verticalHeader()-&gt;hide();
    view-&gt;horizontalHeader()-&gt;setMinimumSectionSize(1);
    view-&gt;verticalHeader()-&gt;setMinimumSectionSize(1);
    view-&gt;setModel(model);
</db:programlisting>
<db:para>This enables the items to be drawn without any gaps between them. Removing the headers also prevents the user from adjusting the sizes of individual rows and columns.</db:para>
<db:para>We also set the minimum section size to 1 on the headers. If we didn't, the headers would default to a larger size, preventing us from displaying really small items (which can be specified using the <db:guilabel>Pixel size</db:guilabel> combobox).</db:para>
<db:para>The custom delegate is constructed with the main window as its parent, so that it will be deleted correctly later, and we set it on the table view.</db:para>
<db:programlisting language="cpp">    PixelDelegate *delegate = new PixelDelegate(this);
    view-&gt;setItemDelegate(delegate);
</db:programlisting>
<db:para>Each item in the table view will be rendered by the PixelDelegate instance.</db:para>
<db:para>We construct a spin box to allow the user to change the size of each &quot;pixel&quot; drawn by the delegate:</db:para>
<db:programlisting language="cpp">    QLabel *pixelSizeLabel = new QLabel(tr(&quot;Pixel size:&quot;));
    QSpinBox *pixelSizeSpinBox = new QSpinBox;
    pixelSizeSpinBox-&gt;setMinimum(4);
    pixelSizeSpinBox-&gt;setMaximum(32);
    pixelSizeSpinBox-&gt;setValue(12);
</db:programlisting>
<db:para>This spin box is connected to the custom slot we implemented in the PixelDelegate class. This ensures that the delegate always draws each pixel at the currently specified size:</db:para>
<db:programlisting language="cpp">    typedef void (QSpinBox::*QSpinBoxIntSignal)(int);
    connect(pixelSizeSpinBox, static_cast&lt;QSpinBoxIntSignal&gt;(&amp;QSpinBox::valueChanged),
            delegate, &amp;PixelDelegate::setPixelSize);
    connect(pixelSizeSpinBox, static_cast&lt;QSpinBoxIntSignal&gt;(&amp;QSpinBox::valueChanged),
            this, &amp;MainWindow::updateView);
    ...
}
</db:programlisting>
<db:para>We also connect the spin box to a slot in the MainWindow class. This forces the view to take into account the new size hints for each item; these are provided by the delegate in its sizeHint() function.</db:para>
<db:programlisting language="cpp">void MainWindow::updateView()
{
    view-&gt;resizeColumnsToContents();
    view-&gt;resizeRowsToContents();
}
</db:programlisting>
<db:para>We explicitly resize the columns and rows to match the <db:guilabel>Pixel size</db:guilabel> combobox.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/imagemodel.cpp">itemviews/pixelator/imagemodel.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/imagemodel.h">itemviews/pixelator/imagemodel.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/images.qrc">itemviews/pixelator/images.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/main.cpp">itemviews/pixelator/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/mainwindow.cpp">itemviews/pixelator/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/mainwindow.h">itemviews/pixelator/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/pixelator.pro">itemviews/pixelator/pixelator.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/pixeldelegate.cpp">itemviews/pixelator/pixeldelegate.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/pixeldelegate.h">itemviews/pixelator/pixeldelegate.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="itemviews/pixelator/images/qt.png">itemviews/pixelator/images/qt.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
