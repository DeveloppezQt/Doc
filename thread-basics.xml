<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Threading Basics</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="index.xml" xlink:type="arc" xlink:arcrole="start" xlink:title="Qt Reference Documentation"/></db:extendedlink>
<db:abstract>
<db:para>An introduction to threads.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="what-are-threads">
<db:title>What Are Threads?</db:title>
<db:para>Threads are about doing things in parallel, just like processes. So how do threads differ from processes? While you are making calculations on a spreadsheet, there may also be a media player running on the same desktop playing your favorite song. Here is an example of two processes working in parallel: one running the spreadsheet program; one running a media player. Multitasking is a well known term for this. A closer look at the media player reveals that there are again things going on in parallel within one single process. While the media player is sending music to the audio driver, the user interface with all its bells and whistles is being constantly updated. This is what threads are for â€“ concurrency within one single process.</db:para>
<db:para>So how is concurrency implemented? Parallel work on single core CPUs is an illusion which is somewhat similar to the illusion of moving images in cinema. For processes, the illusion is produced by interrupting the processor's work on one process after a very short time. Then the processor moves on to the next process. In order to switch between processes, the current program counter is saved and the next processor's program counter is loaded. This is not sufficient because the same needs to be done with registers and certain architecture and OS specific data.</db:para>
<db:para>Just as one CPU can power two or more processes, it is also possible to let the CPU run on two different code segments of one single process. When a process starts, it always executes one code segment and therefore the process is said to have one thread. However, the program may decide to start a second thread. Then, two different code sequences are processed simultaneously inside one process. Concurrency is achieved on single core CPUs by repeatedly saving program counters and registers then loading the next thread's program counters and registers. No cooperation from the program is required to cycle between the active threads. A thread may be in any state when the switch to the next thread occurs.</db:para>
<db:para>The current trend in CPU design is to have several cores. A typical single-threaded application can make use of only one core. However, a program with multiple threads can be assigned to multiple cores, making things happen in a truly concurrent way. As a result, distributing work to more than one thread can make a program run much faster on multicore CPUs because additional cores can be used.</db:para>
<db:section xml:id="gui-thread-and-worker-thread">
<db:title>GUI Thread and Worker Thread</db:title>
<db:para>As mentioned, each program has one thread when it is started. This thread is called the &quot;main thread&quot; (also known as the &quot;GUI thread&quot; in Qt applications). The Qt GUI must run in this thread. All widgets and several related classes, for example <db:link xlink:href="qpixmap.xml">QPixmap</db:link>, don't work in secondary threads. A secondary thread is commonly referred to as a &quot;worker thread&quot; because it is used to offload processing work from the main thread.</db:para>
</db:section>
<db:section xml:id="simultaneous-access-to-data">
<db:title>Simultaneous Access to Data</db:title>
<db:para>Each thread has its own stack, which means each thread has its own call history and local variables. Unlike processes, threads share the same address space. The following diagram shows how the building blocks of threads are located in memory. Program counter and registers of inactive threads are typically kept in kernel space. There is a shared copy of the code and a separate stack for each thread.</db:para>
<db:mediaobject>
<db:alt>&quot;Thread visualization&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/threadvisual-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If two threads have a pointer to the same object, it is possible that both threads will access that object at the same time and this can potentially destroy the object's integrity. It's easy to imagine the many things that can go wrong when two methods of the same object are executed simultaneously.</db:para>
<db:para>Sometimes it is necessary to access one object from different threads; for example, when objects living in different threads need to communicate. Since threads use the same address space, it is easier and faster for threads to exchange data than it is for processes. Data does not have to be serialized and copied. Passing pointers is possible, but there must be a strict coordination of what thread touches which object. Simultaneous execution of operations on one object must be prevented. There are several ways of achieving this and some of them are described below.</db:para>
<db:para>So what can be done safely? All objects created in a thread can be used safely within that thread provided that other threads don't have references to them and objects don't have implicit coupling with other threads. Such implicit coupling may happen when data is shared between instances as with static members, singletons or global data. Familiarize yourself with the concept of <db:link xlink:href="threads-reentrancy.xml">thread safe and reentrant</db:link> classes and functions.</db:para>
</db:section>
</db:section>
<db:section xml:id="using-threads">
<db:title>Using Threads</db:title>
<db:para>There are basically two use cases for threads:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Make processing faster by making use of multicore processors.</db:para>
</db:listitem>
<db:listitem>
<db:para>Keep the GUI thread or other time critical threads responsive by offloading long lasting processing or blocking calls to other threads.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="when-to-use-alternatives-to-threads">
<db:title>When to Use Alternatives to Threads</db:title>
<db:para>Developers need to be very careful with threads. It is easy to start other threads, but very hard to ensure that all shared data remains consistent. Problems are often hard to find because they may only show up once in a while or only on specific hardware configurations. Before creating threads to solve certain problems, possible alternatives should be considered.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Alternative</db:para>
</db:th>
<db:th>
<db:para>Comment</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qeventloop.xml#processEvents">QEventLoop::processEvents</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Calling <db:link xlink:href="qeventloop.xml#processEvents">QEventLoop::processEvents</db:link>() repeatedly during a time-consuming calculation prevents GUI blocking. However, this solution doesn't scale well because the call to processEvents() may occur too often, or not often enough, depending on hardware.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtimer.xml">QTimer</db:link></db:para>
</db:td>
<db:td>
<db:para>Background processing can sometimes be done conveniently using a timer to schedule execution of a slot at some point in the future. A timer with an interval of 0 will time out as soon as there are no more events to process.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link> <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> <db:link xlink:href="qiodevice.xml#readyRead">QIODevice::readyRead</db:link>()</db:para>
</db:td>
<db:td>
<db:para>This is an alternative to having one or multiple threads, each with a blocking read on a slow network connection. As long as the calculation in response to a chunk of network data can be executed quickly, this reactive design is better than synchronous waiting in threads. Reactive design is less error prone and energy efficient than threading. In many cases there are also performance benefits.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In general, it is recommended to only use safe and tested paths and to avoid introducing ad-hoc threading concepts. The <db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link> module provides an easy interface for distributing work to all of the processor's cores. The threading code is completely hidden in the <db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link> framework, so you don't have to take care of the details. However, <db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link> can't be used when communication with the running thread is needed, and it shouldn't be used to handle blocking operations.</db:para>
</db:section>
<db:section xml:id="which-qt-thread-technology-should-you-use">
<db:title>Which Qt Thread Technology Should You Use?</db:title>
<db:para>See the <db:link xlink:href="threads-technologies.xml">Multithreading Technologies in Qt</db:link> page for an introduction to the different approaches to multithreading to Qt, and for guidelines on how to choose among them.</db:para>
</db:section>
</db:section>
<db:section xml:id="qt-thread-basics">
<db:title>Qt Thread Basics</db:title>
<db:para>The following sections describe how QObjects interact with threads, how programs can safely access data from multiple threads, and how asynchronous execution produces results without blocking a thread.</db:para>
<db:section xml:id="qobject-and-threads">
<db:title>QObject and Threads</db:title>
<db:para>As mentioned above, developers must always be careful when calling objects' methods from other threads. <db:link xlink:href="qobject.xml#thread-affinity">Thread affinity</db:link> does not change this situation. Qt documentation marks several methods as thread-safe. <db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>() is a noteworthy example. A thread-safe method may be called from different threads simultaneously.</db:para>
<db:para>In cases where there is usually no concurrent access to methods, calling non-thread-safe methods of objects in other threads may work thousands of times before a concurrent access occurs, causing unexpected behavior. Writing test code does not entirely ensure thread correctness, but it is still important. On Linux, Valgrind and Helgrind can help detect threading errors.</db:para>
</db:section>
<db:section xml:id="protecting-the-integrity-of-data">
<db:title>Protecting the Integrity of Data</db:title>
<db:para>When writing a multithread application, extra care must be taken to avoid data corruption. See <db:link xlink:href="threads-synchronizing.xml">Synchronizing Threads</db:link> for a discussion on how to use threads safely.</db:para>
</db:section>
<db:section xml:id="dealing-with-asynchronous-execution">
<db:title>Dealing with Asynchronous Execution</db:title>
<db:para>One way to obtain a worker thread's result is by waiting for the thread to terminate. In many cases, however, a blocking wait isn't acceptable. The alternative to a blocking wait are asynchronous result deliveries with either posted events or queued signals and slots. This generates a certain overhead because an operation's result does not appear on the next source line, but in a slot located somewhere else in the source file. Qt developers are used to working with this kind of asynchronous behavior because it is much similar to the kind of event-driven programming used in GUI applications.</db:para>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Qt comes with several examples for using threads. See the class references for <db:link xlink:href="qthread.xml">QThread</db:link> and <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> for simple examples. See the <db:link xlink:href="examples-threadandconcurrent.xml">Threading and Concurrent Programming Examples</db:link> page for more advanced ones.</db:para>
</db:section>
<db:section xml:id="digging-deeper">
<db:title>Digging Deeper</db:title>
<db:para>Threading is a very complicated subject. Qt offers more classes for threading than we have presented in this tutorial. The following materials can help you go into the subject in more depth:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="threads.xml">Thread Support in Qt</db:link> document is a good starting point into the reference documentation.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt comes with several additional examples for <db:link xlink:href="examples-threadandconcurrent.xml">QThread and QtConcurrent</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Several good books describe how to work with Qt threads. The most extensive coverage can be found in <db:emphasis>Advanced Qt Programming</db:emphasis> by Mark Summerfield, Prentice Hall - roughly 70 of 500 pages cover <db:link xlink:href="qthread.xml">QThread</db:link> and <db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
