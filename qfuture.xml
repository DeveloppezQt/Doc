<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFuture Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QFuture</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfuture.xml">QFuture</db:link> class represents the result of an asynchronous computation.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link> with the following exceptions:</db:para>
<db:para>These functions are only <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qfuture-const-iterator.xml">const_iterator</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFuture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFuture is part of <db:simplelist><db:member>thread</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To start a computation, use one of the APIs in the <db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> framework.</db:para>
<db:para><db:link xlink:href="qfuture.xml">QFuture</db:link> allows threads to be synchronized against one or more results which will be ready at a later point in time. The result can be of any type that has a default constructor and a copy constructor. If a result is not available at the time of calling the result(), resultAt(), or results() functions, <db:link xlink:href="qfuture.xml">QFuture</db:link> will wait until the result becomes available. You can use the isResultReadyAt() function to determine if a result is ready or not. For <db:link xlink:href="qfuture.xml">QFuture</db:link> objects that report more than one result, the resultCount() function returns the number of continuous results. This means that it is always safe to iterate through the results from 0 to resultCount().</db:para>
<db:para><db:link xlink:href="qfuture.xml">QFuture</db:link> provides a <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterator</db:link> (<db:link xlink:href="qfutureiterator.xml">QFutureIterator</db:link>) and an <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> (<db:link xlink:href="qfuture-const-iterator.xml">QFuture::const_iterator</db:link>). Using these iterators is another way to access results in the future.</db:para>
<db:para><db:link xlink:href="qfuture.xml">QFuture</db:link> also offers ways to interact with a runnning computation. For instance, the computation can be canceled with the cancel() function. To pause the computation, use the setPaused() function or one of the pause(), resume(), or togglePaused() convenience functions. Be aware that not all asynchronous computations can be canceled or paused. For example, the future returned by QtConcurrent::run() cannot be canceled; but the future returned by QtConcurrent::mappedReduced() can.</db:para>
<db:para>Progress information is provided by the progressValue(), progressMinimum(), progressMaximum(), and progressText() functions. The waitForFinished() function causes the calling thread to block and wait for the computation to finish, ensuring that all results are available.</db:para>
<db:para>The state of the computation represented by a <db:link xlink:href="qfuture.xml">QFuture</db:link> can be queried using the isCanceled(), isStarted(), isFinished(), isRunning(), or isPaused() functions.</db:para>
<db:para><db:link xlink:href="qfuture.xml">QFuture</db:link> is a lightweight reference counted class that can be passed by value.</db:para>
<db:para><db:link xlink:href="qfuture.xml">QFuture</db:link>&lt;void&gt; is specialized to not contain any of the result fetching functions. Any <db:link xlink:href="qfuture.xml">QFuture</db:link>&lt;T&gt; can be assigned or copied into a <db:link xlink:href="qfuture.xml">QFuture</db:link>&lt;void&gt; as well. This is useful if only status or progress information is needed - not the actual result data.</db:para>
<db:para>To interact with running tasks using signals and slots, use <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link></db:member>
<db:member><db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ConstIterator-typedef">
<db:title>QFuture::ConstIterator</db:title>
<db:para>Qt-style synonym for <db:link xlink:href="qfuture-const-iterator.xml">QFuture::const_iterator</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
