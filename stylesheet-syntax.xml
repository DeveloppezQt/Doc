<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The Style Sheet Syntax</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="stylesheet.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt Style Sheets"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="stylesheet-designer.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Designer Integration"/></db:extendedlink>
<db:abstract>
<db:para>Qt Widgets Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Style Sheet terminology and syntactic rules are almost identical to those of HTML CSS. If you already know CSS, you can probably skim quickly through this section.</db:para>
<db:section xml:id="style-rules">
<db:title>Style Rules</db:title>
<db:para>Style sheets consist of a sequence of style rules. A <db:emphasis>style rule</db:emphasis> is made up of a selector and a declaration. The <db:emphasis>selector</db:emphasis> specifies which widgets are affected by the rule; the <db:emphasis>declaration</db:emphasis> specifies which properties should be set on the widget. For example:</db:para>
<db:programlisting language="cpp">QPushButton { color: red }
</db:programlisting>
<db:para>In the above style rule, QPushButton is the selector and { color: red } is the declaration. The rule specifies that <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> and its subclasses (e.g., MyPushButton) should use red as their foreground color.</db:para>
<db:para>Qt Style Sheet is generally case insensitive (i.e., color, Color, COLOR, and cOloR refer to the same property). The only exceptions are class names, <db:link xlink:href="qobject.xml#objectName-prop">object names</db:link>, and Qt property names, which are case sensitive.</db:para>
<db:para>Several selectors can be specified for the same declaration, using commas (,) to separate the selectors. For example, the rule</db:para>
<db:programlisting language="cpp">QPushButton, QLineEdit, QComboBox { color: red }
</db:programlisting>
<db:para>is equivalent to this sequence of three rules:</db:para>
<db:programlisting language="cpp">QPushButton { color: red }
QLineEdit { color: red }
QComboBox { color: red }
</db:programlisting>
<db:para>The declaration part of a style rule is a list of <db:code><db:emphasis>property</db:emphasis>: <db:emphasis>value</db:emphasis></db:code> pairs, enclosed in braces ({}) and separated with semicolons. For example:</db:para>
<db:programlisting language="cpp">QPushButton { color: red; background-color: white }
</db:programlisting>
<db:para>See the <db:link xlink:href="stylesheet-reference.xml#list-of-properties">List of Properties</db:link> section below for the list of properties provided by Qt widgets.</db:para>
</db:section>
<db:section xml:id="selector-types">
<db:title>Selector Types</db:title>
<db:para>All the examples so far used the simplest type of selector, the Type Selector. Qt Style Sheets support all the <db:link xlink:href="http://www.w3.org/TR/REC-CSS2/selector.html#q1">selectors defined in CSS2</db:link>. The table below summarizes the most useful types of selectors.</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Selector</db:para>
</db:th>
<db:th>
<db:para>Example</db:para>
</db:th>
<db:th>
<db:para>Explanation</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Universal Selector</db:para>
</db:td>
<db:td>
<db:para>*</db:para>
</db:td>
<db:td>
<db:para>Matches all widgets.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Type Selector</db:para>
</db:td>
<db:td>
<db:para>QPushButton</db:para>
</db:td>
<db:td>
<db:para>Matches instances of <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> and of its subclasses.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Property Selector</db:para>
</db:td>
<db:td>
<db:para>QPushButton[flat=&quot;false&quot;]</db:para>
</db:td>
<db:td>
<db:para>Matches instances of <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> that are not <db:link xlink:href="qpushbutton.xml#flat-prop">flat</db:link>. You may use this selector to test for any Qt <db:link xlink:href="properties.xml">property</db:link> that supports <db:link xlink:href="qvariant.xml#toString">QVariant::toString</db:link>() (see the <db:link xlink:href="qvariant.xml#toString">toString</db:link>() function documentation for details). In addition, the special class property is supported, for the name of the class.</db:para>
<db:para>This selector may also be used to test dynamic properties. For more information on customization using dynamic properties, refer to <db:link xlink:href="stylesheet-examples.xml#customizing-using-dynamic-properties">Customizing Using Dynamic Properties</db:link>.</db:para>
<db:para>Instead of =, you can also use ~= to test whether a Qt property of type <db:link xlink:href="qstringlist.xml">QStringList</db:link> contains a given <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:warning>
<db:para>If the value of the Qt property changes after the style sheet has been set, it might be necessary to force a style sheet recomputation. One way to achieve this is to unset the style sheet and set it again.</db:para>
</db:warning>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Class Selector</db:para>
</db:td>
<db:td>
<db:para>.QPushButton</db:para>
</db:td>
<db:td>
<db:para>Matches instances of <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>, but not of its subclasses.</db:para>
<db:para>This is equivalent to *[class~=&quot;QPushButton&quot;].</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ID <db:anchor xml:id="id-selector"/>
 Selector</db:para>
</db:td>
<db:td>
<db:para>QPushButton#okButton</db:para>
</db:td>
<db:td>
<db:para>Matches all <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> instances whose <db:link xlink:href="qobject.xml#objectName-prop">object name</db:link> is okButton.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Descendant Selector</db:para>
</db:td>
<db:td>
<db:para>QDialog QPushButton</db:para>
</db:td>
<db:td>
<db:para>Matches all instances of <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> that are descendants (children, grandchildren, etc.) of a <db:link xlink:href="qdialog.xml">QDialog</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Child Selector</db:para>
</db:td>
<db:td>
<db:para>QDialog &gt; QPushButton</db:para>
</db:td>
<db:td>
<db:para>Matches all instances of <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> that are direct children of a <db:link xlink:href="qdialog.xml">QDialog</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="sub-controls">
<db:title>Sub-Controls</db:title>
<db:para>For styling complex widgets, it is necessary to access subcontrols of the widget, such as the drop-down button of a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> or the up and down arrows of a <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>. Selectors may contain <db:emphasis>subcontrols</db:emphasis> that make it possible to restrict the application of a rule to specific widget subcontrols. For example:</db:para>
<db:programlisting language="cpp">QComboBox::drop-down { image: url(dropdown.png) }
</db:programlisting>
<db:para>The above rule styles the drop-down button of all <db:link xlink:href="qcombobox.xml">QComboBox</db:link>es. Although the double-colon (::) syntax is reminiscent of CSS3 Pseudo-Elements, Qt Sub-Controls differ conceptually from these and have different cascading semantics.</db:para>
<db:para>Sub-controls are always positioned with respect to another element - a reference element. This reference element could be the widget or another Sub-control. For example, the <db:link xlink:href="stylesheet-reference.xml#drop-down-sub">::drop-down</db:link> of a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> is placed, by default, in the top right corner of the Padding rectangle of the <db:link xlink:href="qcombobox.xml">QComboBox</db:link>. The <db:link xlink:href="stylesheet-reference.xml#drop-down-sub">::drop-down</db:link> is placed, by default, in the Center of the Contents rectangle of the <db:link xlink:href="stylesheet-reference.xml#drop-down-sub">::drop-down</db:link> Sub-control. See the <db:link xlink:href="stylesheet-reference.xml#list-of-stylable-widgets">List of Stylable Widgets</db:link> below for the Sub-controls to use to style a widget and their default positions.</db:para>
<db:para>The origin rectangle to be used can be changed using the <db:link xlink:href="stylesheet-reference.xml#subcontrol-origin-prop">subcontrol-origin</db:link> property. For example, if we want to place the drop-down in the margin rectangle of the <db:link xlink:href="qcombobox.xml">QComboBox</db:link> instead of the default Padding rectangle, we can specify:</db:para>
<db:programlisting language="cpp">QComboBox {
    margin-right: 20px;
}
QComboBox::drop-down {
    subcontrol-origin: margin;
}
</db:programlisting>
<db:para>The alignment of the drop-down within the Margin rectangle is changed using <db:link xlink:href="stylesheet-reference.xml#subcontrol-position-prop">subcontrol-position</db:link> property.</db:para>
<db:para>The <db:link xlink:href="stylesheet-reference.xml#width-prop">width</db:link> and <db:link xlink:href="stylesheet-reference.xml#height-prop">height</db:link> properties can be used to control the size of the Sub-control. Note that setting a <db:link xlink:href="stylesheet-reference.xml#image-prop">image</db:link> implicitly sets the size of a Sub-control.</db:para>
<db:para>The relative positioning scheme (<db:link xlink:href="stylesheet-reference.xml#position-prop">position</db:link> : relative), allows the position of the Sub-Control to be offset from its initial position. For example, when the <db:link xlink:href="qcombobox.xml">QComboBox</db:link>'s drop-down button is pressed, we might like the arrow inside to be offset to give a &quot;pressed&quot; effect. To achieve this, we can specify:</db:para>
<db:programlisting language="cpp">QComboBox::down-arrow {
    image: url(down_arrow.png);
}
QComboBox::down-arrow:pressed {
    position: relative;
    top: 1px; left: 1px;
}
</db:programlisting>
<db:para>The absolute positioning scheme (<db:link xlink:href="stylesheet-reference.xml#position-prop">position</db:link> : absolute), allows the position and size of the Sub-control to be changed with respect to the reference element.</db:para>
<db:para>Once positioned, they are treated the same as widgets and can be styled using the <db:link xlink:href="stylesheet-customizing.xml#box-model">box model</db:link>.</db:para>
<db:para>See the <db:link xlink:href="stylesheet-reference.xml#list-of-sub-controls">List of Sub-Controls</db:link> below for a list of supported sub-controls, and <db:link xlink:href="stylesheet-examples.xml#customizing-the-qpushbutton-s-menu-indicator-sub-control">Customizing the QPushButton's Menu Indicator Sub-Control</db:link> for a realistic example.</db:para>
<db:note>
<db:para>With complex widgets such as <db:link xlink:href="qcombobox.xml">QComboBox</db:link> and <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link>, if one property or sub-control is customized, <db:emphasis role="bold">all</db:emphasis> the other properties or sub-controls must be customized as well.</db:para>
</db:note>
</db:section>
<db:section xml:id="pseudo-states">
<db:title>Pseudo-States</db:title>
<db:para>Selectors may contain <db:emphasis>pseudo-states</db:emphasis> that denote that restrict the application of the rule based on the widget's state. Pseudo-states appear at the end of the selector, with a colon (:) in between. For example, the following rule applies when the mouse hovers over a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>:</db:para>
<db:programlisting language="cpp">QPushButton:hover { color: white }
</db:programlisting>
<db:para>Pseudo-states can be negated using the exclamation operator. For example, the following rule applies when the mouse does not hover over a <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link>:</db:para>
<db:programlisting language="cpp">QRadioButton:!hover { color: red }
</db:programlisting>
<db:para>Pseudo-states can be chained, in which case a logical AND is implied. For example, the following rule applies to when the mouse hovers over a checked <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>:</db:para>
<db:programlisting language="cpp">QCheckBox:hover:checked { color: white }
</db:programlisting>
<db:para>Negated Pseudo-states may appear in Pseudo-state chains. For example, the following rule applies when the mouse hovers over a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> that is not pressed:</db:para>
<db:programlisting language="cpp">QPushButton:hover:!pressed { color: blue; }
</db:programlisting>
<db:para>If needed, logical OR can be expressed using the comma operator:</db:para>
<db:programlisting language="cpp">QCheckBox:hover, QCheckBox:checked { color: white }
</db:programlisting>
<db:para>Pseudo-states can appear in combination with subcontrols. For example:</db:para>
<db:programlisting language="cpp">QComboBox::drop-down:hover { image: url(dropdown_bright.png) }
</db:programlisting>
<db:para>See the <db:link xlink:href="stylesheet-reference.xml#list-of-pseudo-states">List of Pseudo-States</db:link> section below for the list of pseudo-states provided by Qt widgets.</db:para>
</db:section>
<db:section xml:id="conflict-resolution">
<db:title>Conflict Resolution</db:title>
<db:para>Conflicts arise when several style rules specify the same properties with different values. Consider the following style sheet:</db:para>
<db:programlisting language="cpp">QPushButton#okButton { color: gray }
QPushButton { color: red }
</db:programlisting>
<db:para>Both rules match <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> instances called okButton and there is a conflict for the color property. To resolve this conflict, we must take into account the <db:emphasis>specificity</db:emphasis> of the selectors. In the above example, QPushButton#okButton is considered more specific than QPushButton, because it (usually) refers to a single object, not to all instances of a class.</db:para>
<db:para>Similarly, selectors with pseudo-states are more specific than ones that do not specify pseudo-states. Thus, the following style sheet specifies that a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> should have white text when the mouse is hovering over it, otherwise red text:</db:para>
<db:programlisting language="cpp">QPushButton:hover { color: white }
QPushButton { color: red }
</db:programlisting>
<db:para>Here's a tricky one:</db:para>
<db:programlisting language="cpp">QPushButton:hover { color: white }
QPushButton:enabled { color: red }
</db:programlisting>
<db:para>Here, both selectors have the same specificity, so if the mouse hovers over the button while it is enabled, the second rule takes precedence. If we want the text to be white in that case, we can reorder the rules like this:</db:para>
<db:programlisting language="cpp">QPushButton:enabled { color: red }
QPushButton:hover { color: white }
</db:programlisting>
<db:para>Alternatively, we can make the first rule more specific:</db:para>
<db:programlisting language="cpp">QPushButton:hover:enabled { color: white }
QPushButton:enabled { color: red }
</db:programlisting>
<db:para>A similar issue arises in conjunction with Type Selectors. Consider the following example:</db:para>
<db:programlisting language="cpp">QPushButton { color: red }
QAbstractButton { color: gray }
</db:programlisting>
<db:para>Both rules apply to <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> instances (since <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> inherits <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link>) and there is a conflict for the <db:link xlink:href="stylesheet-reference.xml#color-prop">color</db:link> property. Because <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> inherits <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link>, it might be tempting to assume that QPushButton is more specific than QAbstractButton. However, for style sheet computations, all Type Selectors have the same specificity, and the rule that appears last takes precedence. In other words, <db:link xlink:href="stylesheet-reference.xml#color-prop">color</db:link> is set to gray for all <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link>s, including <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>s. If we really want <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>s to have red text, we can always reorder the rules.</db:para>
<db:para>For determining the specificity of a rule, Qt Style Sheets follow the <db:link xlink:href="http://www.w3.org/TR/REC-CSS2/cascade.html#specificity">CSS2 Specification</db:link>:</db:para>
<db:blockquote><db:para><db:emphasis>A selector's specificity is calculated as follows:</db:emphasis></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>count the number of ID attributes in the selector (= a)</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>count the number of other attributes and pseudo-classes in the selector (= b)</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>count the number of element names in the selector (= c)</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>ignore pseudo-elements [i.e., <db:link xlink:href="stylesheet-reference.xml#subcontrols">subcontrols</db:link>].</db:emphasis></db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:emphasis>Concatenating the three numbers a-b-c (in a number system with a large base) gives the specificity.</db:emphasis></db:para>
<db:para><db:emphasis>Some examples:</db:emphasis></db:para>
<db:programlisting language="cpp">*             {}  /* a=0 b=0 c=0 -&amp;gt; specificity =   0 */
LI            {}  /* a=0 b=0 c=1 -&amp;gt; specificity =   1 */
UL LI         {}  /* a=0 b=0 c=2 -&amp;gt; specificity =   2 */
UL OL+LI      {}  /* a=0 b=0 c=3 -&amp;gt; specificity =   3 */
H1 + *[REL=up]{}  /* a=0 b=1 c=1 -&amp;gt; specificity =  11 */
UL OL LI.red  {}  /* a=0 b=1 c=3 -&amp;gt; specificity =  13 */
LI.red.level  {}  /* a=0 b=2 c=1 -&amp;gt; specificity =  21 */
#x34y         {}  /* a=1 b=0 c=0 -&amp;gt; specificity = 100 */
</db:programlisting>
</db:blockquote>
</db:section>
<db:section xml:id="cascading">
<db:title>Cascading</db:title>
<db:para>Style sheets can be set on the <db:link xlink:href="qapplication.xml">QApplication</db:link>, on parent widgets, and on child widgets. An arbitrary widget's effective style sheet is obtained by merging the style sheets set on the widget's ancestors (parent, grandparent, etc.), as well as any style sheet set on the <db:link xlink:href="qapplication.xml">QApplication</db:link>.</db:para>
<db:para>When conflicts arise, the widget's own style sheet is always preferred to any inherited style sheet, irrespective of the specificity of the conflicting rules. Likewise, the parent widget's style sheet is preferred to the grandparent's, etc.</db:para>
<db:para>One consequence of this is that setting a style rule on a widget automatically gives it precedence over other rules specified in the ancestor widgets' style sheets or the <db:link xlink:href="qapplication.xml">QApplication</db:link> style sheet. Consider the following example. First, we set a style sheet on the <db:link xlink:href="qapplication.xml">QApplication</db:link>:</db:para>
<db:programlisting language="cpp">qApp-&amp;gt;setStyleSheet(&quot;QPushButton { color: white }&quot;);
</db:programlisting>
<db:para>Then we set a style sheet on a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> object:</db:para>
<db:programlisting language="cpp">myPushButton-&amp;gt;setStyleSheet(&quot;* { color: blue }&quot;);
</db:programlisting>
<db:para>The style sheet on the <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> forces the <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> (and any child widget) to have blue text, in spite of the more specific rule set provided by the application-wide style sheet.</db:para>
<db:para>The result would have been the same if we had written</db:para>
<db:programlisting language="cpp">myPushButton-&amp;gt;setStyleSheet(&quot;color: blue&quot;);
</db:programlisting>
<db:para>except that if the <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> had children (which is unlikely), the style sheet would have no impact on them.</db:para>
<db:para>Style sheet cascading is a complex topic. Refer to the <db:link xlink:href="http://www.w3.org/TR/CSS2/cascade.html#cascade">CSS2 Specification</db:link> for the gory details. Be aware that Qt currently doesn't implement !important.</db:para>
</db:section>
<db:section xml:id="inheritance">
<db:title>Inheritance</db:title>
<db:para>In classic CSS, when font and color of an item is not explicitly set, it gets automatically inherited from the parent. By default, when using Qt Style Sheets, a widget does <db:emphasis role="bold">not</db:emphasis> automatically inherit its font and color setting from its parent widget.</db:para>
<db:para>For example, consider a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> inside a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link>:</db:para>
<db:programlisting language="cpp">qApp-&amp;gt;setStyleSheet(&quot;QGroupBox { color: red; } &quot;);
</db:programlisting>
<db:para>The <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> does not have an explicit color set. Hence, instead of inheriting color of its parent <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link>, it has the system color. If we want to set the color on a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> and its children, we can write:</db:para>
<db:programlisting language="cpp">qApp-&amp;gt;setStyleSheet(&quot;QGroupBox, QGroupBox * { color: red; }&quot;);
</db:programlisting>
<db:para>In contrast, setting a font and palette using <db:link xlink:href="qwidget.xml#font-prop">QWidget::setFont</db:link>() and <db:link xlink:href="qwidget.xml#palette-prop">QWidget::setPalette</db:link>() propagates to child widgets.</db:para>
<db:para>If you would prefer that the font and palette propagate to child widgets, you can set the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_UseStyleSheetPropagationInWidgetStyles</db:link> flag, like this:</db:para>
<db:para>Usage:</db:para>
<db:programlisting language="cpp">QCoreApplication::setAttribute(Qt::AA_UseStyleSheetPropagationInWidgetStyles, true);
</db:programlisting>
<db:para>When the widget-style font and palette propagation is enabled, font and palette changes made through Qt Style Sheets will behave as though the user had manually called the corresponding <db:link xlink:href="qwidget.xml#palette-prop">QWidget::setPalette</db:link>() and <db:link xlink:href="qwidget.xml#font-prop">QWidget::setFont</db:link>() methods on all of the QWidgets targeted by the style sheet. If this would have caused propagation in C++, it will cause propagation in style sheets and vice versa.</db:para>
</db:section>
<db:section xml:id="widgets-inside-c-namespaces">
<db:title>Widgets Inside C++ Namespaces</db:title>
<db:para>The Type Selector can be used to style widgets of a particular type. For example,</db:para>
<db:programlisting language="cpp">class MyPushButton : public QPushButton {
    // ...
}

// ...
qApp-&amp;gt;setStyleSheet(&quot;MyPushButton { background: yellow; }&quot;);
</db:programlisting>
<db:para>Qt Style Sheet uses QObject::className() of the widget to determine when to apply the Type Selector. When custom widgets are inside namespaces, the QObject::className() returns &lt;namespace&gt;::&lt;classname&gt;. This conflicts with the syntax for <db:link xlink:href="stylesheet-syntax.xml#sub-controls">Sub-Controls</db:link>. To overcome this problem, when using the Type Selector for widgets inside namespaces, we must replace the &quot;::&quot; with &quot;–&quot;. For example,</db:para>
<db:programlisting language="cpp">namespace ns {
    class MyPushButton : public QPushButton {
        // ...
    }
}

// ...
qApp-&amp;gt;setStyleSheet(&quot;ns--MyPushButton { background: yellow; }&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="setting-qobject-properties">
<db:title>Setting QObject Properties</db:title>
<db:para>From 4.3 and above, any designable <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> can be set using the qproperty-&lt;property name&gt; syntax.</db:para>
<db:para>For example,</db:para>
<db:programlisting language="cpp">MyLabel { qproperty-pixmap: url(pixmap.png); }
MyGroupBox { qproperty-titleColor: rgb(100, 200, 100); }
QPushButton { qproperty-iconSize: 20px 20px; }
</db:programlisting>
<db:para>If the property references an enum declared with Q_ENUMS, you should reference its constants by name, i.e., not their numeric value.</db:para>
<db:note>
<db:para>Use the qproperty syntax with care, as it modifies the widget that is being painted. Also, the qproperty syntax is evaluated only once, which is when the widget is polished by the style. This means that any attempt to use them in pseudo-states such as <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>:hover, will not work.</db:para>
</db:note>
</db:section>
</db:article>
