<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 2 Surface Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> in a QML application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.1
import QtQuick.Layouts 1.0
import QtDataVisualization 1.0
import &quot;.&quot;

Rectangle {
    id: mainview
    width: 1024
    height: 768
    color: surfacePlot.theme.windowColor

    Data {
        id: surfaceData
    }

    Item {
        id: surfaceView
        width: mainview.width
        height: mainview.height
        anchors.top: mainview.top
        anchors.left: mainview.left

        ColorGradient {
            id: surfaceGradient
            ColorGradientStop { position: 0.0; color: &quot;darkslategray&quot; }
            ColorGradientStop { id: middleGradient; position: 0.25; color: &quot;peru&quot; }
            ColorGradientStop { position: 1.0; color: &quot;red&quot; }
        }

        Surface3D {
            id: surfacePlot
            width: surfaceView.width
            height: surfaceView.height
            theme: Theme3D {
                type: Theme3D.ThemeStoneMoss
                font.family: &quot;STCaiyun&quot;
                font.pointSize: 35
                colorStyle: Theme3D.ColorStyleRangeGradient
                baseGradients: [surfaceGradient]
            }
            shadowQuality: AbstractGraph3D.ShadowQualityMedium
            selectionMode: AbstractGraph3D.SelectionSlice | AbstractGraph3D.SelectionItemAndRow
            scene.activeCamera.cameraPreset: Camera3D.CameraPresetIsometricLeft
            axisY.min: 0.0
            axisY.max: 500.0
            axisX.segmentCount: 10
            axisX.subSegmentCount: 2
            axisX.labelFormat: &quot;%i&quot;
            axisZ.segmentCount: 10
            axisZ.subSegmentCount: 2
            axisZ.labelFormat: &quot;%i&quot;
            axisY.segmentCount: 5
            axisY.subSegmentCount: 2
            axisY.labelFormat: &quot;%i&quot;
            axisY.title: &quot;Height&quot;
            axisX.title: &quot;Latitude&quot;
            axisZ.title: &quot;Longitude&quot;

            Surface3DSeries {
                id: surfaceSeries
                flatShadingEnabled: false
                drawMode: Surface3DSeries.DrawSurface

                ItemModelSurfaceDataProxy {
                    itemModel: surfaceData.model
                    rowRole: &quot;longitude&quot;
                    columnRole: &quot;latitude&quot;
                    yPosRole: &quot;height&quot;
                }
                onDrawModeChanged: checkState()
            }
            Surface3DSeries {
                id: heightSeries
                flatShadingEnabled: false
                drawMode: Surface3DSeries.DrawSurface
                visible: false

                HeightMapSurfaceDataProxy {
                    heightMapFile: &quot;:/heightmaps/image&quot;
                    // We don't want the default data values set by heightmap proxy.
                    minZValue: 30
                    maxZValue: 60
                    minXValue: 67
                    maxXValue: 97
                }

                onDrawModeChanged: checkState()
            }
        }
    }

    RowLayout {
        id: buttonLayout
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.right: parent.right
        opacity: 0.5

        NewButton {
            id: surfaceGridToggle
            Layout.fillWidth: true
            Layout.fillHeight: true
            text: &quot;Show Surface Grid&quot;
            onClicked: {
                if (surfaceSeries.drawMode &amp; Surface3DSeries.DrawWireframe) {
                    surfaceSeries.drawMode &amp;= ~Surface3DSeries.DrawWireframe;
                    heightSeries.drawMode &amp;= ~Surface3DSeries.DrawWireframe;
                } else {
                    surfaceSeries.drawMode |= Surface3DSeries.DrawWireframe;
                    heightSeries.drawMode |= Surface3DSeries.DrawWireframe;
                }
            }
        }

        NewButton {
            id: surfaceToggle
            Layout.fillWidth: true
            Layout.fillHeight: true
            text: &quot;Hide Surface&quot;
            onClicked: {
                if (surfaceSeries.drawMode &amp; Surface3DSeries.DrawSurface) {
                    surfaceSeries.drawMode &amp;= ~Surface3DSeries.DrawSurface;
                    heightSeries.drawMode &amp;= ~Surface3DSeries.DrawSurface;
                } else {
                    surfaceSeries.drawMode |= Surface3DSeries.DrawSurface;
                    heightSeries.drawMode |= Surface3DSeries.DrawSurface;
                }
            }
        }

        NewButton {
            id: flatShadingToggle
            Layout.fillWidth: true
            Layout.fillHeight: true
            text: surfaceSeries.flatShadingSupported ? &quot;Show Flat&quot; : &quot;Flat not supported&quot;
            enabled: surfaceSeries.flatShadingSupported
            onClicked: {
                if (surfaceSeries.flatShadingEnabled === true) {
                    surfaceSeries.flatShadingEnabled = false;
                    heightSeries.flatShadingEnabled = false;
                    text = &quot;Show Flat&quot;
                } else {
                    surfaceSeries.flatShadingEnabled = true;
                    heightSeries.flatShadingEnabled = true;
                    text = &quot;Show Smooth&quot;
                }
            }
        }

        NewButton {
            id: backgroundToggle
            Layout.fillWidth: true
            Layout.fillHeight: true
            text: &quot;Hide Background&quot;
            onClicked: {
                if (surfacePlot.theme.backgroundEnabled === true) {
                    surfacePlot.theme.backgroundEnabled = false;
                    text = &quot;Show Background&quot;
                } else {
                    surfacePlot.theme.backgroundEnabled = true;
                    text = &quot;Hide Background&quot;
                }
            }
        }

        NewButton {
            id: gridToggle
            Layout.fillWidth: true
            Layout.fillHeight: true
            text: &quot;Hide Grid&quot;
            onClicked: {
                if (surfacePlot.theme.gridEnabled === true) {
                    surfacePlot.theme.gridEnabled = false;
                    text = &quot;Show Grid&quot;
                } else {
                    surfacePlot.theme.gridEnabled = true;
                    text = &quot;Hide Grid&quot;
                }
            }
        }

        NewButton {
            id: seriesToggle
            Layout.fillWidth: true
            Layout.fillHeight: true
            text: &quot;Switch to Height Map Series&quot;
            onClicked: {
                if (surfaceSeries.visible === false) {
                    surfacePlot.axisY.max = 500.0
                    surfaceSeries.visible = true
                    heightSeries.visible = false
                    middleGradient.position = 0.25
                    text = &quot;Switch to Height Map Series&quot;
                } else {
                    surfacePlot.axisY.max = 250.0
                    surfaceSeries.visible = false
                    heightSeries.visible = true
                    middleGradient.position = 0.50
                    text = &quot;Switch to Item Model Series&quot;
                }
            }
        }
    }

    function checkState() {
        if (surfaceSeries.drawMode &amp; Surface3DSeries.DrawSurface)
            surfaceToggle.text = &quot;Hide Surface&quot;
        else
            surfaceToggle.text = &quot;Show Surface&quot;

        if (surfaceSeries.drawMode &amp; Surface3DSeries.DrawWireframe)
            surfaceGridToggle.text = &quot;Hide Surface Grid&quot;
        else
            surfaceGridToggle.text = &quot;Show Surface Grid&quot;
    }
}

</db:programlisting>
</db:article>
