<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLockFile Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlockfile.xml">QLockFile</db:link> class provides locking between processes using a file.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLockFile</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A lock file can be used to prevent multiple processes from accessing concurrently the same resource. For instance, a configuration file on disk, or a socket, a port, a region of shared memory...</db:para>
<db:para>Serialization is only guaranteed if all processes that access the shared resource use <db:link xlink:href="qlockfile.xml">QLockFile</db:link>, with the same file path.</db:para>
<db:para><db:link xlink:href="qlockfile.xml">QLockFile</db:link> supports two use cases: to protect a resource for a short-term operation (e.g. verifying if a configuration file has changed before saving new settings), and for long-lived protection of a resource (e.g. a document opened by a user in an editor) for an indefinite amount of time.</db:para>
<db:para>When protecting for a short-term operation, it is acceptable to call <db:link xlink:href="qlockfile.xml#lock">lock</db:link>() and wait until any running operation finishes. When protecting a resource over a long time, however, the application should always call <db:link xlink:href="qlockfile.xml#setStaleLockTime">setStaleLockTime</db:link>(0) and then <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() with a short timeout, in order to warn the user that the resource is locked.</db:para>
<db:para>If the process holding the lock crashes, the lock file stays on disk and can prevent any other process from accessing the shared resource, ever. For this reason, <db:link xlink:href="qlockfile.xml">QLockFile</db:link> tries to detect such a &quot;stale&quot; lock file, based on the process ID written into the file. To cover the situation that the process ID got reused meanwhile, the current process name is compared to the name of the process that corresponds to the process ID from the lock file. If the process names differ, the lock file is considered stale. Additionally, the last modification time of the lock file (30s by default, for the use case of a short-lived operation) is taken into account. If the lock file is found to be stale, it will be deleted.</db:para>
<db:para>For the use case of protecting a resource over a long time, you should therefore call <db:link xlink:href="qlockfile.xml#setStaleLockTime">setStaleLockTime</db:link>(0), and when <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() returns <db:link xlink:href="qlockfile.xml#LockError-enum">LockFailedError</db:link>, inform the user that the document is locked, possibly using <db:link xlink:href="qlockfile.xml#getLockInfo">getLockInfo</db:link>() for more details.</db:para>
<db:note>
<db:para>On Windows, this class has problems detecting a stale lock if the machine's hostname contains characters outside the US-ASCII character set.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LockError-enum">
<db:title>enum QLockFile::LockError</db:title>
<db:enumsynopsis>
<db:enumname>LockError</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LockFailedError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PermissionError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the result of the last call to <db:link xlink:href="qlockfile.xml#lock">lock</db:link>() or <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlockfile.xml">QLockFile</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The lock was acquired successfully.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlockfile.xml">QLockFile</db:link></db:emphasis>::LockFailedError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The lock could not be acquired because another process holds it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlockfile.xml">QLockFile</db:link></db:emphasis>::PermissionError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The lock file could not be created, for lack of permissions in the parent directory.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlockfile.xml">QLockFile</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Another error happened, for instance a full partition prevented writing out the lock file.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLockFile">
<db:title>QLockFile::QLockFile(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QLockFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QLockFile(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new lock file object. The object is created in an unlocked state. When calling <db:link xlink:href="qlockfile.xml#lock">lock</db:link>() or <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>(), a lock file named <db:code role="parameter">fileName</db:code> will be created, if it doesn't already exist.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlockfile.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qlockfile.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QLockFile">
<db:title>QLockFile::~QLockFile()</db:title>
<db:destructorsynopsis>
<db:methodname>~QLockFile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QLockFile()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the lock file object. If the lock was acquired, this will release the lock, by deleting the lock file.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QLockFile::LockError QLockFile::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLockFile::LockError</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLockFile::LockError error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the lock file error status.</db:para>
<db:para>If <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() returns false, this function can be called to find out the reason why the locking failed.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QLockFile::fileName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file name of the lock file</db:para>
</db:section>
<db:section xml:id="getLockInfo">
<db:title>bool QLockFile::getLockInfo(qint64 *<db:emphasis>pid</db:emphasis>, QString *<db:emphasis>hostname</db:emphasis>, QString *<db:emphasis>appname</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>getLockInfo</db:methodname>
<db:methodparam>
<db:type>qint64 *</db:type>
<db:parameter>pid</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>hostname</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>appname</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool getLockInfo(qint64 *pid, QString *hostname, QString *appname) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves information about the current owner of the lock file.</db:para>
<db:para>If <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() returns false, and <db:link xlink:href="qlockfile.xml#error">error</db:link>() returns <db:link xlink:href="qlockfile.xml#LockError-enum">LockFailedError</db:link>, this function can be called to find out more information about the existing lock file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>the PID of the application (returned in <db:code role="parameter">pid</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para>the <db:code role="parameter">hostname</db:code> it's running on (useful in case of networked filesystems),</db:para>
</db:listitem>
<db:listitem>
<db:para>the name of the application which created it (returned in <db:code role="parameter">appname</db:code>),</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note that <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() automatically deleted the file if there is no running application with this PID, so <db:link xlink:href="qlockfile.xml#LockError-enum">LockFailedError</db:link> can only happen if there is an application with this PID (it could be unrelated though).</db:para>
<db:para>This can be used to inform users about the existing lock file and give them the choice to delete it. After removing the file using <db:link xlink:href="qlockfile.xml#removeStaleLockFile">removeStaleLockFile</db:link>(), the application can call <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() again.</db:para>
<db:para>This function returns true if the information could be successfully retrieved, false if the lock file doesn't exist or doesn't contain the expected data. This can happen if the lock file was deleted between the time where <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() failed and the call to this function. Simply call <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() again if this happens.</db:para>
</db:section>
<db:section xml:id="isLocked">
<db:title>bool QLockFile::isLocked() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLocked</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLocked() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the lock was acquired by this <db:link xlink:href="qlockfile.xml">QLockFile</db:link> instance, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlockfile.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qlockfile.xml#unlock">unlock</db:link>()</db:member>
<db:member><db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lock">
<db:title>bool QLockFile::lock()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>lock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool lock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates the lock file.</db:para>
<db:para>If another process (or another thread) has created the lock file already, this function will block until that process (or thread) releases it.</db:para>
<db:para>Calling this function multiple times on the same lock from the same thread without unlocking first is not allowed. This function will <db:emphasis>dead-lock</db:emphasis> when the file is locked recursively.</db:para>
<db:para>Returns true if the lock was acquired, false if it could not be acquired due to an unrecoverable error, such as no permissions in the parent directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlockfile.xml#unlock">unlock</db:link>()</db:member>
<db:member><db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeStaleLockFile">
<db:title>bool QLockFile::removeStaleLockFile()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removeStaleLockFile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeStaleLockFile()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to forcefully remove an existing lock file.</db:para>
<db:para>Calling this is not recommended when protecting a short-lived operation: <db:link xlink:href="qlockfile.xml">QLockFile</db:link> already takes care of removing lock files after they are older than <db:link xlink:href="qlockfile.xml#staleLockTime">staleLockTime</db:link>().</db:para>
<db:para>This method should only be called when protecting a resource for a long time, i.e. with <db:link xlink:href="qlockfile.xml#staleLockTime">staleLockTime</db:link>(0), and after <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() returned <db:link xlink:href="qlockfile.xml#LockError-enum">LockFailedError</db:link>, and the user agreed on removing the lock file.</db:para>
<db:para>Returns true on success, false if the lock file couldn't be removed. This happens on Windows, when the application owning the lock is still running.</db:para>
</db:section>
<db:section xml:id="setStaleLockTime">
<db:title>void QLockFile::setStaleLockTime(int <db:emphasis>staleLockTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStaleLockTime</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>staleLockTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStaleLockTime(int staleLockTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">staleLockTime</db:code> to be the time in milliseconds after which a lock file is considered stale. The default value is 30000, i.e. 30 seconds. If your application typically keeps the file locked for more than 30 seconds (for instance while saving megabytes of data for 2 minutes), you should set a bigger value using setStaleLockTime().</db:para>
<db:para>The value of <db:code role="parameter">staleLockTime</db:code> is used by <db:link xlink:href="qlockfile.xml#lock">lock</db:link>() and <db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>() in order to determine when an existing lock file is considered stale, i.e. left over by a crashed process. This is useful for the case where the PID got reused meanwhile, so one way to detect a stale lock file is by the fact that it has been around for a long time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlockfile.xml#staleLockTime">staleLockTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="staleLockTime">
<db:title>int QLockFile::staleLockTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>staleLockTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int staleLockTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the time in milliseconds after which a lock file is considered stale.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlockfile.xml#setStaleLockTime">setStaleLockTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryLock">
<db:title>bool QLockFile::tryLock(int <db:emphasis>timeout</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>tryLock</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool tryLock(int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to create the lock file. This function returns true if the lock was obtained; otherwise it returns false. If another process (or another thread) has created the lock file already, this function will wait for at most <db:code role="parameter">timeout</db:code> milliseconds for the lock file to become available.</db:para>
<db:para>Note: Passing a negative number as the <db:code role="parameter">timeout</db:code> is equivalent to calling <db:link xlink:href="qlockfile.xml#lock">lock</db:link>(), i.e. this function will wait forever until the lock file can be locked if <db:code role="parameter">timeout</db:code> is negative.</db:para>
<db:para>If the lock was obtained, it must be released with <db:link xlink:href="qlockfile.xml#unlock">unlock</db:link>() before another process (or thread) can successfully lock it.</db:para>
<db:para>Calling this function multiple times on the same lock from the same thread without unlocking first is not allowed, this function will <db:emphasis>always</db:emphasis> return false when attempting to lock the file recursively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlockfile.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qlockfile.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unlock">
<db:title>void QLockFile::unlock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unlock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the lock, by deleting the lock file.</db:para>
<db:para>Calling unlock() without locking the file first, does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlockfile.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qlockfile.xml#tryLock">tryLock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
