<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlace Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplace.xml">QPlace</db:link> class represents a set of data about a place.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlace</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlace is part of <db:simplelist><db:member>QtLocation-places</db:member><db:member>QtLocation-places-data</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A place is a point of interest, it could be a favorite restaurant, a park or someone's home. A <db:link xlink:href="qplace.xml">QPlace</db:link> object represents a place by acting as a container for various information about that place.</db:para>
<db:para>This information can be divided into 2 broad classifications</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Details</db:para>
</db:listitem>
<db:listitem>
<db:para>Rich content</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The place details consist of properties of the place, such as the name, location, contact information and so on. When a place is returned during a search, these details are filled in. Sometimes in order to save bandwidth, there are further details about the place that can be retrieved on an individual place by place basis, if the user is interested. The <db:link xlink:href="qplace.xml#detailsFetched">QPlace::detailsFetched</db:link>() function can be queried to see if all available details have been fetched, and if not, <db:link xlink:href="qplacemanager.xml#getPlaceDetails">QPlaceManager::getPlaceDetails</db:link>() can be used to retrieve them. Precisely which details are populated during a search and which need to be fetched individually may vary from provider to provider. See <db:link xlink:href="qtlocation-index.xml#plugin-references-and-parameters">plugin documentation</db:link> for more details.</db:para>
<db:para>The rich content of a place consists of items such as images, reviews and editorials. Potentially there may be many rich content items, so they are treated separately from the place details. They can be retrieved in a paged fashion via <db:link xlink:href="qplacemanager.xml#getPlaceContent">QPlaceManager::getPlaceContent</db:link>(). If necessary, the content may be assigned to a place so it can act as a convenient container.</db:para>
<db:section xml:id="contact-information">
<db:title>Contact Information</db:title>
<db:para>The contact information of a place is based around a common set of <db:link xlink:href="qplacecontactdetail.xml#contact-types">contact types</db:link>. To retrieve all the phone numbers of a place, one would do:</db:para>
<db:programlisting language="cpp">if (place.contactTypes().contains(QPlaceContactDetail::Phone)) {
    foreach (const QPlaceContactDetail &amp;amp;number, place.contactDetails(QPlaceContactDetail::Phone))
        qDebug() &amp;lt;&amp;lt; number.label() &amp;lt;&amp;lt; &quot;:&quot; &amp;lt;&amp;lt; number.value();
}
</db:programlisting>
<db:para>The contact types are string values by design to allow for providers to introduce new contact types.</db:para>
<db:para>For convenience there are a set of functions which return the value of the first contact detail of each type.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qplace.xml#primaryPhone">QPlace::primaryPhone</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qplace.xml#primaryEmail">QPlace::primaryEmail</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qplace.xml#primaryWebsite">QPlace::primaryWebsite</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qplace.xml#primaryFax">QPlace::primaryFax</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="extended-attributes">
<db:title>Extended Attributes</db:title>
<db:para>Places may have additional attributes which are not covered in the formal API. Similar to contacts attributes are based around a common set of <db:link xlink:href="qplaceattribute.xml#attribute-types">attribute types</db:link>. To retrieve an extended attribute one would do:</db:para>
<db:programlisting language="cpp">if (place.extendedAttributeTypes().contains(QPlaceAttribute::OpeningHours))
    qDebug() &amp;lt;&amp;lt; place.extendedAttribute(QPlaceAttribute::OpeningHours).text();
</db:programlisting>
<db:para>The attribute types are string values by design to allow providers to introduce new attribute types.</db:para>
</db:section>
<db:section xml:id="content">
<db:title>Content</db:title>
<db:para>The <db:link xlink:href="qplace.xml">QPlace</db:link> object is only meant to be a convenient container to hold rich content such as images, reviews and so on. Retrieval of content should happen via <db:link xlink:href="qplacemanager.xml#getPlaceContent">QPlaceManager::getPlaceContent</db:link>().</db:para>
<db:para>The content is stored as a <db:link xlink:href="qplacecontent.xml#Collection-typedef">QPlaceContent::Collection</db:link> which contains both the index of the content, as well as the content itself. This enables developers to check whether a particular item has already been retrieved and if not, then request that content.</db:para>
<db:section xml:id="attribution">
<db:title>Attribution</db:title>
<db:para>Places have a field for a rich text attribution string. Some providers may require that the attribution be shown when a place is displayed to a user.</db:para>
</db:section>
</db:section>
<db:section xml:id="categories">
<db:title>Categories</db:title>
<db:para>Different categories may be assigned to a place to indicate that the place is associated with those categories. When saving a place, the only meaningful data is the category id, the rest of the category data is effectively ignored. The category must already exist before saving the place (it is not possible to create a new category, assign it to the place, save the place and expect the category to be created).</db:para>
</db:section>
<db:section xml:id="saving-caveats">
<db:title>Saving Caveats</db:title>
<db:para>The Places API is currently designed for only saving <db:code role="parameter">core</db:code> details. Saving rich content like images and reviews or details like supplier and rating is not a supported use case. Typically a manager will generally ignore these fields upon save and may produce a warning message if they are populated.</db:para>
<db:para>The Places API only supports saving of the following <db:emphasis>core details</db:emphasis>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>name</db:para>
</db:listitem>
<db:listitem>
<db:para>place id</db:para>
</db:listitem>
<db:listitem>
<db:para>location</db:para>
</db:listitem>
<db:listitem>
<db:para>contact details</db:para>
</db:listitem>
<db:listitem>
<db:para>icon</db:para>
</db:listitem>
<db:listitem>
<db:para>categories (tag-like names to describe a place)</db:para>
</db:listitem>
<db:listitem>
<db:para>visibility scope</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>It is possible that providers may only support a subset of these. See the <db:link xlink:href="qtlocation-index.xml#plugin-references-and-parameters">plugin documentation</db:link> for more details.</db:para>
<db:para>Saving of properties such as the rating, extended attributes, images, reviews, editorials and supplier is explicitly not supported by the Places API.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlace">
<db:title>QPlace::QPlace()</db:title>
<db:constructorsynopsis>
<db:methodname>QPlace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlace()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty place object.</db:para>
</db:section>
<db:section xml:id="QPlace-2">
<db:title>[protected] QPlace::QPlace(const QSharedDataPointer&lt;QPlacePrivate&gt; &amp;<db:emphasis>dd</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPlace</db:methodname>
<db:methodparam>
<db:type>const QSharedDataPointer&lt;QPlacePrivate&gt; &amp;</db:type>
<db:parameter>dd</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlace(const QSharedDataPointer&lt;QPlacePrivate&gt; &amp;dd)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an place object using <db:code role="parameter">dd</db:code> as private implementation.</db:para>
</db:section>
<db:section xml:id="QPlace-1">
<db:title>QPlace::QPlace(const QPlace &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPlace</db:methodname>
<db:methodparam>
<db:type>const QPlace &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlace(const QPlace &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPlace">
<db:title>QPlace::~QPlace()</db:title>
<db:destructorsynopsis>
<db:methodname>~QPlace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPlace()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this place.</db:para>
</db:section>
<db:section xml:id="appendContactDetail">
<db:title>void QPlace::appendContactDetail(const QString &amp;<db:emphasis>contactType</db:emphasis>, const QPlaceContactDetail &amp;<db:emphasis>detail</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendContactDetail</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>contactType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPlaceContactDetail &amp;</db:type>
<db:parameter>detail</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendContactDetail(const QString &amp;contactType, const QPlaceContactDetail &amp;detail)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a contact <db:code role="parameter">detail</db:code> of a specified <db:code role="parameter">contactType</db:code>.</db:para>
<db:para>See <db:link xlink:href="qplacecontactdetail.xml">QPlaceContactDetail</db:link> for a list of common <db:link xlink:href="qplacecontactdetail.xml#Email-var">contact types</db:link>.</db:para>
</db:section>
<db:section xml:id="attribution">
<db:title>QString QPlace::attribution() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>attribution</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString attribution() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a rich text attribution string of the place. Note, some providers may have a requirement where the attribution must be shown whenever a place is displayed to an end user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setAttribution">setAttribution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="categories">
<db:title>QList&lt;QPlaceCategory&gt; QPlace::categories() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPlaceCategory&gt;</db:type>
<db:methodname>categories</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPlaceCategory&gt; categories() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns categories that this place belongs to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setCategories">setCategories</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contactDetails">
<db:title>QList&lt;QPlaceContactDetail&gt; QPlace::contactDetails(const QString &amp;<db:emphasis>contactType</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPlaceContactDetail&gt;</db:type>
<db:methodname>contactDetails</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>contactType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPlaceContactDetail&gt; contactDetails(const QString &amp;contactType) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of contact details of the specified <db:code role="parameter">contactType</db:code>.</db:para>
<db:para>See <db:link xlink:href="qplacecontactdetail.xml">QPlaceContactDetail</db:link> for a list of common <db:link xlink:href="qplacecontactdetail.xml#Email-var">contact types</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setContactDetails">setContactDetails</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contactTypes">
<db:title>QStringList QPlace::contactTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>contactTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList contactTypes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of contact details this place has.</db:para>
<db:para>See <db:link xlink:href="qplacecontactdetail.xml">QPlaceContactDetail</db:link> for a list of common <db:link xlink:href="qplacecontactdetail.xml#Email-var">contact types</db:link>.</db:para>
</db:section>
<db:section xml:id="content">
<db:title>QPlaceContent::Collection QPlace::content(QPlaceContent::Type <db:emphasis>type</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceContent::Collection</db:type>
<db:methodname>content</db:methodname>
<db:methodparam>
<db:type>QPlaceContent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceContent::Collection content(QPlaceContent::Type type) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a collection of content associated with a place. This collection is a map with the key being the index of the content object and value being the content object itself.</db:para>
<db:para>The <db:code role="parameter">type</db:code> specifies which kind of content is to be retrieved.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setContent">setContent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="d">
<db:title>[protected] QSharedDataPointer&lt;QPlacePrivate&gt; &amp;QPlace::d()</db:title>
<db:methodsynopsis>
<db:type>QSharedDataPointer&lt;QPlacePrivate&gt; &amp;</db:type>
<db:methodname>d</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedDataPointer&lt;QPlacePrivate&gt; &amp; d()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the d-pointer.</db:para>
</db:section>
<db:section xml:id="detailsFetched">
<db:title>bool QPlace::detailsFetched() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>detailsFetched</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool detailsFetched() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the details of this place have been fetched, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setDetailsFetched">setDetailsFetched</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extendedAttribute">
<db:title>QPlaceAttribute QPlace::extendedAttribute(const QString &amp;<db:emphasis>attributeType</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceAttribute</db:type>
<db:methodname>extendedAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>attributeType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceAttribute extendedAttribute(const QString &amp;attributeType) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the exteded attribute corresponding to the specified <db:code role="parameter">attributeType</db:code>. If the place does not have that particular attribute type, a default constructed QPlaceExtendedAttribute is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setExtendedAttribute">setExtendedAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extendedAttributeTypes">
<db:title>QStringList QPlace::extendedAttributeTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>extendedAttributeTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList extendedAttributeTypes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the types of extended attributes that this place has.</db:para>
</db:section>
<db:section xml:id="icon">
<db:title>QPlaceIcon QPlace::icon() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceIcon</db:type>
<db:methodname>icon</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceIcon icon() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the icon of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setIcon">setIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertContent">
<db:title>void QPlace::insertContent(QPlaceContent::Type <db:emphasis>type</db:emphasis>, const QPlaceContent::Collection &amp;<db:emphasis>content</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertContent</db:methodname>
<db:methodparam>
<db:type>QPlaceContent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPlaceContent::Collection &amp;</db:type>
<db:parameter>content</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertContent(QPlaceContent::Type type, const QPlaceContent::Collection &amp;content)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a collection of <db:code role="parameter">content</db:code> of the given <db:code role="parameter">type</db:code> to the place. Any index in <db:code role="parameter">content</db:code> that already exists is overwritten.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QPlace::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a boolean indicating whether the all the fields of the place are empty or not.</db:para>
</db:section>
<db:section xml:id="location">
<db:title>QGeoLocation QPlace::location() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoLocation</db:type>
<db:methodname>location</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoLocation location() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the location of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setLocation">setLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QPlace::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setName">setName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="placeId">
<db:title>QString QPlace::placeId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>placeId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString placeId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the identifier of the place. The place identifier is only meaningful to the <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> that generated it and is not transferable between managers. The place identifier is not guaranteed to be universally unique, but unique for the manager that generated it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setPlaceId">setPlaceId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="primaryEmail">
<db:title>QString QPlace::primaryEmail() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>primaryEmail</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString primaryEmail() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the primary email address for this place. This convenience function accesses the first contact detail of the <db:link xlink:href="qplacecontactdetail.xml#Email-var">email type</db:link>. If no email addresses exist, then an empty string is returned.</db:para>
</db:section>
<db:section xml:id="primaryFax">
<db:title>QString QPlace::primaryFax() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>primaryFax</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString primaryFax() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the primary fax number for this place. This convenience function accesses the first contact detail of the <db:link xlink:href="qplacecontactdetail.xml#Fax-var">fax type</db:link>. If no fax details exist, then an empty string is returned.</db:para>
</db:section>
<db:section xml:id="primaryPhone">
<db:title>QString QPlace::primaryPhone() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>primaryPhone</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString primaryPhone() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the primary phone number for this place. This accesses the first contact detail of the <db:link xlink:href="qplacecontactdetail.xml#Phone-var">phone number type</db:link>. If no phone details exist, then an empty string is returned.</db:para>
</db:section>
<db:section xml:id="primaryWebsite">
<db:title>QUrl QPlace::primaryWebsite() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>primaryWebsite</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl primaryWebsite() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the primary website of the place. This convenience function accesses the first contact detail of the <db:link xlink:href="qplacecontactdetail.xml#Website-var">website type</db:link>. If no websites exist, then an empty string is returned.</db:para>
</db:section>
<db:section xml:id="ratings">
<db:title>QPlaceRatings QPlace::ratings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceRatings</db:type>
<db:methodname>ratings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceRatings ratings() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an aggregated rating of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setRatings">setRatings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeContactDetails">
<db:title>void QPlace::removeContactDetails(const QString &amp;<db:emphasis>contactType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeContactDetails</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>contactType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeContactDetails(const QString &amp;contactType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all the contact details of a given <db:code role="parameter">contactType</db:code>.</db:para>
<db:para>The <db:code role="parameter">contactType</db:code> is no longer returned when <db:link xlink:href="qplace.xml#contactTypes">QPlace::contactTypes</db:link>() is called.</db:para>
</db:section>
<db:section xml:id="removeExtendedAttribute">
<db:title>void QPlace::removeExtendedAttribute(const QString &amp;<db:emphasis>attributeType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeExtendedAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>attributeType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeExtendedAttribute(const QString &amp;attributeType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Remove the attribute of <db:code role="parameter">attributeType</db:code> from the place.</db:para>
<db:para>The attribute will no longer be listed by <db:link xlink:href="qplace.xml#extendedAttributeTypes">QPlace::extendedAttributeTypes</db:link>()</db:para>
</db:section>
<db:section xml:id="setAttribution">
<db:title>void QPlace::setAttribution(const QString &amp;<db:emphasis>attribution</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttribution</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>attribution</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribution(const QString &amp;attribution)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">attribution</db:code> string of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#attribution">attribution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCategories">
<db:title>void QPlace::setCategories(const QList&lt;QPlaceCategory&gt; &amp;<db:emphasis>categories</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCategories</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPlaceCategory&gt; &amp;</db:type>
<db:parameter>categories</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCategories(const QList&lt;QPlaceCategory&gt; &amp;categories)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">categories</db:code> that this place belongs to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#categories">categories</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCategory">
<db:title>void QPlace::setCategory(const QPlaceCategory &amp;<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCategory</db:methodname>
<db:methodparam>
<db:type>const QPlaceCategory &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCategory(const QPlaceCategory &amp;category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a single <db:code role="parameter">category</db:code> that this place belongs to.</db:para>
</db:section>
<db:section xml:id="setContactDetails">
<db:title>void QPlace::setContactDetails(const QString &amp;<db:emphasis>contactType</db:emphasis>, QList&lt;QPlaceContactDetail&gt; <db:emphasis>details</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContactDetails</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>contactType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QList&lt;QPlaceContactDetail&gt;</db:type>
<db:parameter>details</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContactDetails(const QString &amp;contactType, QList&lt;QPlaceContactDetail&gt; details)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contact <db:code role="parameter">details</db:code> of a specified <db:code role="parameter">contactType</db:code>.</db:para>
<db:para>If <db:code role="parameter">details</db:code> is empty, then the <db:code role="parameter">contactType</db:code> is removed from the place such that it is no longer returned by <db:link xlink:href="qplace.xml#contactTypes">QPlace::contactTypes</db:link>().</db:para>
<db:para>See <db:link xlink:href="qplacecontactdetail.xml">QPlaceContactDetail</db:link> for a list of common <db:link xlink:href="qplacecontactdetail.xml#Email-var">contact types</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#contactDetails">contactDetails</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContent">
<db:title>void QPlace::setContent(QPlaceContent::Type <db:emphasis>type</db:emphasis>, const QPlaceContent::Collection &amp;<db:emphasis>content</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContent</db:methodname>
<db:methodparam>
<db:type>QPlaceContent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPlaceContent::Collection &amp;</db:type>
<db:parameter>content</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContent(QPlaceContent::Type type, const QPlaceContent::Collection &amp;content)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a collection of <db:code role="parameter">content</db:code> for the given <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#content">content</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDetailsFetched">
<db:title>void QPlace::setDetailsFetched(bool <db:emphasis>fetched</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDetailsFetched</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>fetched</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDetailsFetched(bool fetched)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the details of this place have been <db:code role="parameter">fetched</db:code> or not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#detailsFetched">detailsFetched</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExtendedAttribute">
<db:title>void QPlace::setExtendedAttribute(const QString &amp;<db:emphasis>attributeType</db:emphasis>, const QPlaceAttribute &amp;<db:emphasis>attribute</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExtendedAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>attributeType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPlaceAttribute &amp;</db:type>
<db:parameter>attribute</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExtendedAttribute(const QString &amp;attributeType, const QPlaceAttribute &amp;attribute)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns an <db:code role="parameter">attribute</db:code> of the given <db:code role="parameter">attributeType</db:code> to a place. If the given <db:code role="parameter">attributeType</db:code> already exists in the place, then it is overwritten.</db:para>
<db:para>If <db:code role="parameter">attribute</db:code> is a default constructed <db:link xlink:href="qplaceattribute.xml">QPlaceAttribute</db:link>, then the <db:code role="parameter">attributeType</db:code> is removed from the place which means it will not be listed by <db:link xlink:href="qplace.xml#extendedAttributeTypes">QPlace::extendedAttributeTypes</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#extendedAttribute">extendedAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIcon">
<db:title>void QPlace::setIcon(const QPlaceIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIcon</db:methodname>
<db:methodparam>
<db:type>const QPlaceIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIcon(const QPlaceIcon &amp;icon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">icon</db:code> of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#icon">icon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocation">
<db:title>void QPlace::setLocation(const QGeoLocation &amp;<db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocation</db:methodname>
<db:methodparam>
<db:type>const QGeoLocation &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocation(const QGeoLocation &amp;location)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">location</db:code> of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#location">location</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QPlace::setName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">name</db:code> of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlaceId">
<db:title>void QPlace::setPlaceId(const QString &amp;<db:emphasis>identifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPlaceId</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>identifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPlaceId(const QString &amp;identifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">identifier</db:code> of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#placeId">placeId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRatings">
<db:title>void QPlace::setRatings(const QPlaceRatings &amp;<db:emphasis>rating</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRatings</db:methodname>
<db:methodparam>
<db:type>const QPlaceRatings &amp;</db:type>
<db:parameter>rating</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRatings(const QPlaceRatings &amp;rating)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the aggregated <db:code role="parameter">rating</db:code> of the place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#ratings">ratings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSupplier">
<db:title>void QPlace::setSupplier(const QPlaceSupplier &amp;<db:emphasis>supplier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSupplier</db:methodname>
<db:methodparam>
<db:type>const QPlaceSupplier &amp;</db:type>
<db:parameter>supplier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSupplier(const QPlaceSupplier &amp;supplier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the supplier of this place to <db:code role="parameter">supplier</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#supplier">supplier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTotalContentCount">
<db:title>void QPlace::setTotalContentCount(QPlaceContent::Type <db:emphasis>type</db:emphasis>, int <db:emphasis>totalCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTotalContentCount</db:methodname>
<db:methodparam>
<db:type>QPlaceContent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>totalCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTotalContentCount(QPlaceContent::Type type, int totalCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">totalCount</db:code> of content objects of the given <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#totalContentCount">totalContentCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisibility">
<db:title>void QPlace::setVisibility(QLocation::Visibility <db:emphasis>visibility</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVisibility</db:methodname>
<db:methodparam>
<db:type>QLocation::Visibility</db:type>
<db:parameter>visibility</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisibility(QLocation::Visibility visibility)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the visibility of the place to <db:code role="parameter">visibility</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#visibility">visibility</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supplier">
<db:title>QPlaceSupplier QPlace::supplier() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceSupplier</db:type>
<db:methodname>supplier</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceSupplier supplier() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the supplier of this place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setSupplier">setSupplier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="totalContentCount">
<db:title>int QPlace::totalContentCount(QPlaceContent::Type <db:emphasis>type</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>totalContentCount</db:methodname>
<db:methodparam>
<db:type>QPlaceContent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int totalContentCount(QPlaceContent::Type type) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the total count of content objects of the given <db:code role="parameter">type</db:code>. This total count indicates how many the manager/provider should have available. (As opposed to how many objects this place instance is currently assigned).</db:para>
<db:para>A negative count indicates that the total number of items is unknown. By default the total content count is set to 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setTotalContentCount">setTotalContentCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visibility">
<db:title>QLocation::Visibility QPlace::visibility() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLocation::Visibility</db:type>
<db:methodname>visibility</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLocation::Visibility visibility() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the visibility of the place.</db:para>
<db:para>The default visibility of a new place is set to QtLocatin::Unspecified visibility. If a place is saved with unspecified visibility the backend chooses an appropriate default visibility to use when saving.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplace.xml#setVisibility">setVisibility</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QPlace::operator!=(const QPlace &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QPlace &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QPlace &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> is not equal to this place, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QPlace &amp;QPlace::operator=(const QPlace &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPlace &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QPlace &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlace &amp; operator=(const QPlace &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this place and returns a reference to this place.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QPlace::operator==(const QPlace &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QPlace &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QPlace &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> is equal to this place, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
