<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLowEnergyCharacteristic Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> class stores information about a Bluetooth Low Energy service characteristic.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLowEnergyCharacteristic</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> provides information about a Bluetooth Low Energy service characteristic's <db:link xlink:href="qlowenergycharacteristic.xml#name">name</db:link>(), <db:link xlink:href="qlowenergycharacteristic.xml#uuid">uuid</db:link>(), <db:link xlink:href="qlowenergycharacteristic.xml#value">value</db:link>(), <db:link xlink:href="qlowenergycharacteristic.xml#properties">properties</db:link>(), and <db:link xlink:href="qlowenergycharacteristic.xml#descriptors">descriptors</db:link>(). To obtain the characteristic's specification and information, it is necessary to connect to the device using the <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> and <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> classes.</db:para>
<db:para>The characteristic value may be written via the <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instance that manages the service to which this characteristic belongs. The <db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">QLowEnergyService::writeCharacteristic</db:link>() function writes the new value. The <db:link xlink:href="qlowenergyservice.xml#characteristicWritten">QLowEnergyService::characteristicWritten</db:link>() signal is emitted upon success. The <db:link xlink:href="qlowenergycharacteristic.xml#value">value</db:link>() of this object is automatically updated accordingly.</db:para>
<db:para>Characteristics may contain none, one or more descriptors. They can be individually retrieved using the <db:link xlink:href="qlowenergycharacteristic.xml#descriptor">descriptor</db:link>() function. The <db:link xlink:href="qlowenergycharacteristic.xml#descriptors">descriptors</db:link>() function returns all descriptors as a list. The general purpose of a descriptor is to add contextual information to the characteristic. For example, the descriptor might provide format or range information specifying how the characteristic's value is to be interpreted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:member>
<db:member><db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PropertyType-enum">
<db:title>enum QLowEnergyCharacteristic::PropertyType</db:title>
<db:bridgehead renderas="sect2">flags QLowEnergyCharacteristic::PropertyTypes</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PropertyType</db:enumname>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>0x00</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Broadcasting</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Read</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteNoResponse</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Write</db:enumidentifier>
<db:enumvalue>0x08</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Notify</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Indicate</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteSigned</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExtendedProperty</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QLowEnergyCharacteristic::PropertyTypes</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the properties of a characteristic.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>The type is not known.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:emphasis>::Broadcasting</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Allow for the broadcasting of Generic Attributes (GATT) characteristic values.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:emphasis>::Read</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Allow the characteristic values to be read.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:emphasis>::WriteNoResponse</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Allow characteristic values without responses to be written.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:emphasis>::Write</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Allow for characteristic values to be written.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:emphasis>::Notify</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Permits notification of characteristic values.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:emphasis>::Indicate</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>Permits indications of characteristic values.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:emphasis>::WriteSigned</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>Permits signed writes of the GATT characteristic values.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:emphasis>::ExtendedProperty</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>Additional characteristic properties are defined in the characteristic's extended properties descriptor.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is not recommended to set both Notify and Indicate properties on the same characteristic as the underlying Bluetooth stack behaviors differ from platform to platform. Please see <db:link xlink:href="qlowenergycharacteristic.xml#clientCharacteristicConfiguration">QLowEnergyCharacteristic::clientCharacteristicConfiguration</db:link></db:para>
<db:para>The <db:code>PropertyTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PropertyType&gt;. </db:code>It stores an OR combination of <db:code>PropertyType</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycharacteristic.xml#properties">properties</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLowEnergyCharacteristic">
<db:title>QLowEnergyCharacteristic::QLowEnergyCharacteristic()</db:title>
<db:constructorsynopsis>
<db:methodname>QLowEnergyCharacteristic</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyCharacteristic()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a new <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link>. A default-constructed instance of this class is always invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycharacteristic.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QLowEnergyCharacteristic-1">
<db:title>QLowEnergyCharacteristic::QLowEnergyCharacteristic(const QLowEnergyCharacteristic &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QLowEnergyCharacteristic</db:methodname>
<db:methodparam>
<db:type>const QLowEnergyCharacteristic &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyCharacteristic(const QLowEnergyCharacteristic &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a new <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> that is a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>The two copies continue to share the same underlying data which does not detach upon write.</db:para>
</db:section>
<db:section xml:id="dtor.QLowEnergyCharacteristic">
<db:title>QLowEnergyCharacteristic::~QLowEnergyCharacteristic()</db:title>
<db:destructorsynopsis>
<db:methodname>~QLowEnergyCharacteristic</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QLowEnergyCharacteristic()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> object.</db:para>
</db:section>
<db:section xml:id="clientCharacteristicConfiguration">
<db:title>[since 6.2] QLowEnergyDescriptor QLowEnergyCharacteristic::clientCharacteristicConfiguration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLowEnergyDescriptor</db:type>
<db:methodname>clientCharacteristicConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyDescriptor clientCharacteristicConfiguration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Client Characteristic Configuration Descriptor or an invalid <db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link> instance if no Client Characteristic Configuration Descriptor exists.</db:para>
<db:para>BTLE characteristics can support notifications and/or indications. In both cases, the peripheral will inform the central on each change of the characteristic's value. In the BTLE attribute protocol, notification messages are not confirmed by the central, while indications are confirmed. Notifications are considered faster, but unreliable, while indications are slower and more reliable.</db:para>
<db:para>If a characteristic supports notification or indication, these can be enabled by writing special bit patterns to the Client Characteristic Configuration Descriptor. For convenience, these bit patterns are provided as <db:link xlink:href="qlowenergycharacteristic.xml#CCCDDisable-var">QLowEnergyCharacteristic::CCCDDisable</db:link>, <db:link xlink:href="qlowenergycharacteristic.xml#CCCDEnableNotification-var">QLowEnergyCharacteristic::CCCDEnableNotification</db:link>, and <db:link xlink:href="qlowenergycharacteristic.xml#CCCDEnableIndication-var">QLowEnergyCharacteristic::CCCDEnableIndication</db:link>.</db:para>
<db:para>Enabling e.g. notification for a characteristic named <db:code>mycharacteristic</db:code> in a service called <db:code>myservice</db:code> could be done using the following code.</db:para>
<db:programlisting language="cpp">auto cccd = mycharacteristic.clientCharacteristicConfiguration();
if (!cccd.isValid()) {
    // your error handling
    return error;
}
myservice-&amp;gt;writeDescriptor(cccd, QLowEnergyCharacteristic::CCCDEnableNotification);
</db:programlisting>
<db:note>
<db:para>Calling <db:code>characteristic.clientCharacteristicConfiguration()</db:code> is equivalent to calling <db:code>characteristic.descriptor(QBluetoothUuid::DescriptorType::ClientCharacteristicConfiguration)</db:code>.</db:para>
</db:note>
<db:note>
<db:para>It is not recommended to use both notifications and indications on the same characteristic. This applies to both server-side when setting up the characteristics, as well as client-side when enabling them. The bluetooth stack behavior differs from platform to platform and the cross-platform behavior will likely be inconsistent. As an example a Bluez Linux client might unconditionally try to enable both mechanisms if both are supported, whereas a macOS client might unconditionally enable just the notifications. If both are needed consider creating two separate characteristics.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycharacteristic.xml#descriptor">descriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="descriptor">
<db:title>QLowEnergyDescriptor QLowEnergyCharacteristic::descriptor(const QBluetoothUuid &amp;<db:emphasis>uuid</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLowEnergyDescriptor</db:type>
<db:methodname>descriptor</db:methodname>
<db:methodparam>
<db:type>const QBluetoothUuid &amp;</db:type>
<db:parameter>uuid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyDescriptor descriptor(const QBluetoothUuid &amp;uuid) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the descriptor for <db:code role="parameter">uuid</db:code> or an invalid <db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link> instance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycharacteristic.xml#descriptors">descriptors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="descriptors">
<db:title>QList&lt;QLowEnergyDescriptor&gt; QLowEnergyCharacteristic::descriptors() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QLowEnergyDescriptor&gt;</db:type>
<db:methodname>descriptors</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QLowEnergyDescriptor&gt; descriptors() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of descriptors belonging to this characteristic; otherwise an empty list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycharacteristic.xml#descriptor">descriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QLowEnergyCharacteristic::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> object is valid, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>An invalid characteristic object is not associated with any service (default-constructed) or the associated service is no longer valid due to a disconnect from the underlying Bluetooth Low Energy device, for example. Once the object is invalid it cannot become valid anymore.</db:para>
<db:note>
<db:para>If a <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> instance turns invalid due to a disconnect from the underlying device, the information encapsulated by the current instance remains as it was at the time of the disconnect. Therefore it can be retrieved after the disconnect event.</db:para>
</db:note>
</db:section>
<db:section xml:id="name">
<db:title>QString QLowEnergyCharacteristic::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the human-readable name of the characteristic.</db:para>
<db:para>The name is based on the characteristic's <db:link xlink:href="qlowenergycharacteristic.xml#uuid">uuid</db:link>() which must have been standardized. The complete list of characteristic types can be found under <db:link xlink:href="https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicsHome.aspx">Bluetooth.org Characteristics</db:link>.</db:para>
<db:para>The returned string is empty if the <db:link xlink:href="qlowenergycharacteristic.xml#uuid">uuid</db:link>() is unknown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothuuid.xml#characteristicToString">QBluetoothUuid::characteristicToString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="properties">
<db:title>QLowEnergyCharacteristic::PropertyTypes QLowEnergyCharacteristic::properties() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLowEnergyCharacteristic::PropertyTypes</db:type>
<db:methodname>properties</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyCharacteristic::PropertyTypes properties() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the properties of the characteristic.</db:para>
<db:para>The properties define the access permissions for the characteristic.</db:para>
</db:section>
<db:section xml:id="uuid">
<db:title>QBluetoothUuid QLowEnergyCharacteristic::uuid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothUuid</db:type>
<db:methodname>uuid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothUuid uuid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the UUID of the characteristic if <db:link xlink:href="qlowenergycharacteristic.xml#isValid">isValid</db:link>() returns <db:code>true</db:code>; otherwise a <db:link xlink:href="quuid.xml#isNull">null</db:link> UUID.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QByteArray QLowEnergyCharacteristic::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cached value of the characteristic.</db:para>
<db:para>If the characteristic's <db:link xlink:href="qlowenergycharacteristic.xml#properties">properties</db:link>() permit writing of new values, the value can be updated using <db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">QLowEnergyService::writeCharacteristic</db:link>().</db:para>
<db:para>The cache is updated during the associated service's <db:link xlink:href="qlowenergyservice.xml#discoverDetails">detail discovery</db:link>, a successful <db:link xlink:href="qlowenergyservice.xml#readCharacteristic">read</db:link>/<db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">write</db:link> operation or when an update notification is received.</db:para>
<db:para>The returned <db:link xlink:href="qbytearray.xml">QByteArray</db:link> always remains empty if the characteristic does not have the <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">read permission</db:link>. In such cases only the <db:link xlink:href="qlowenergyservice.xml#characteristicChanged">QLowEnergyService::characteristicChanged</db:link>() or <db:link xlink:href="qlowenergyservice.xml#characteristicWritten">QLowEnergyService::characteristicWritten</db:link>() may provice information about the value of this characteristic.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QLowEnergyCharacteristic &amp;QLowEnergyCharacteristic::operator=(const QLowEnergyCharacteristic &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QLowEnergyCharacteristic &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QLowEnergyCharacteristic &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyCharacteristic &amp; operator=(const QLowEnergyCharacteristic &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes a copy of <db:code role="parameter">other</db:code> and assigns it to this <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> object. The two copies continue to share the same service and controller details.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="CCCDDisable-var">
<db:title>[since 6.2] const QByteArray QLowEnergyCharacteristic::CCCDDisable</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QByteArray</db:type>
<db:varname>CCCDDisable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Bit pattern to write into Client Characteristic Configuration Descriptor to disable both notification and indication.</db:para>
<db:para>This documentation was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycharacteristic.xml#clientCharacteristicConfiguration">QLowEnergyCharacteristic::clientCharacteristicConfiguration</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="CCCDEnableIndication-var">
<db:title>[since 6.2] const QByteArray QLowEnergyCharacteristic::CCCDEnableIndication</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QByteArray</db:type>
<db:varname>CCCDEnableIndication</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Bit pattern to write into Client Characteristic Configuration Descriptor to enable indication.</db:para>
<db:para>This documentation was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycharacteristic.xml#clientCharacteristicConfiguration">QLowEnergyCharacteristic::clientCharacteristicConfiguration</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="CCCDEnableNotification-var">
<db:title>[since 6.2] const QByteArray QLowEnergyCharacteristic::CCCDEnableNotification</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QByteArray</db:type>
<db:varname>CCCDEnableNotification</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Bit pattern to write into Client Characteristic Configuration Descriptor to enable notification.</db:para>
<db:para>This documentation was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycharacteristic.xml#clientCharacteristicConfiguration">QLowEnergyCharacteristic::clientCharacteristicConfiguration</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QLowEnergyCharacteristic &amp;<db:emphasis>a</db:emphasis>, const QLowEnergyCharacteristic &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QLowEnergyCharacteristic &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QLowEnergyCharacteristic &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QLowEnergyCharacteristic &amp;a, const QLowEnergyCharacteristic &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code> are not equal; otherwise <db:code>false</db:code>.</db:para>
<db:para>Two QLowEnergyCharcteristic instances are considered to be equal if they refer to the same characteristic on the same remote Bluetooth Low Energy device or both instances have been default-constructed.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QLowEnergyCharacteristic &amp;<db:emphasis>a</db:emphasis>, const QLowEnergyCharacteristic &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QLowEnergyCharacteristic &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QLowEnergyCharacteristic &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QLowEnergyCharacteristic &amp;a, const QLowEnergyCharacteristic &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">a</db:code> is equal to <db:code role="parameter">b</db:code>, otherwise <db:code>false</db:code>.</db:para>
<db:para>Two <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> instances are considered to be equal if they refer to the same characteristic on the same remote Bluetooth Low Energy device or both instances have been default-constructed.</db:para>
</db:section>
</db:section>
</db:article>
