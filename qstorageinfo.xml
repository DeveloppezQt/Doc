<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStorageInfo Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides information about currently mounted storage and drives.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStorageInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStorageInfo is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Allows retrieving information about the volume's space, its mount point, label, and filesystem name.</db:para>
<db:para>You can create an instance of <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> by passing the path to the volume's mount point as a constructor parameter, or you can set it using the <db:link xlink:href="qstorageinfo.xml#setPath">setPath</db:link>() method. The static <db:link xlink:href="qstorageinfo.xml#mountedVolumes">mountedVolumes</db:link>() method can be used to get the list of all mounted filesystems.</db:para>
<db:para><db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> always caches the retrieved information, but you can call <db:link xlink:href="qstorageinfo.xml#refresh">refresh</db:link>() to invalidate the cache.</db:para>
<db:para>The following example retrieves the most common information about the root volume of the system, and prints information about it.</db:para>
<db:programlisting language="cpp">    QStorageInfo storage = QStorageInfo::root();

    qDebug() &amp;lt;&amp;lt; storage.rootPath();
    if (storage.isReadOnly())
        qDebug() &amp;lt;&amp;lt; &quot;isReadOnly:&quot; &amp;lt;&amp;lt; storage.isReadOnly();

    qDebug() &amp;lt;&amp;lt; &quot;name:&quot; &amp;lt;&amp;lt; storage.name();
    qDebug() &amp;lt;&amp;lt; &quot;fileSystemType:&quot; &amp;lt;&amp;lt; storage.fileSystemType();
    qDebug() &amp;lt;&amp;lt; &quot;size:&quot; &amp;lt;&amp;lt; storage.bytesTotal()/1000/1000 &amp;lt;&amp;lt; &quot;MB&quot;;
    qDebug() &amp;lt;&amp;lt; &quot;availableSize:&quot; &amp;lt;&amp;lt; storage.bytesAvailable()/1000/1000 &amp;lt;&amp;lt; &quot;MB&quot;;
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStorageInfo">
<db:title>QStorageInfo::QStorageInfo()</db:title>
<db:constructorsynopsis>
<db:methodname>QStorageInfo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStorageInfo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object.</db:para>
<db:para>Objects created with the default constructor will be invalid and therefore not ready for use.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#setPath">setPath</db:link>()</db:member>
<db:member><db:link xlink:href="qstorageinfo.xml#isReady">isReady</db:link>()</db:member>
<db:member><db:link xlink:href="qstorageinfo.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStorageInfo-1">
<db:title>[explicit] QStorageInfo::QStorageInfo(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStorageInfo</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStorageInfo(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object that gives information about the volume mounted at <db:code role="parameter">path</db:code>.</db:para>
<db:para>If you pass a directory or file, the <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object will refer to the volume where this directory or file is located. You can check if the created object is correct using the <db:link xlink:href="qstorageinfo.xml#isValid">isValid</db:link>() method.</db:para>
<db:para>The following example shows how to get the volume on which the application is located. It is recommended to always check that the volume is ready and valid.</db:para>
<db:programlisting language="cpp">    QStorageInfo storage(qApp-&amp;gt;applicationDirPath());
    if (storage.isValid() &amp;amp;&amp;amp; storage.isReady()) {
        // ...
    }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#setPath">setPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStorageInfo-2">
<db:title>[explicit] QStorageInfo::QStorageInfo(const QDir &amp;<db:emphasis>dir</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStorageInfo</db:methodname>
<db:methodparam>
<db:type>const QDir &amp;</db:type>
<db:parameter>dir</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStorageInfo(const QDir &amp;dir)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object that gives information about the volume containing the <db:code role="parameter">dir</db:code> folder.</db:para>
</db:section>
<db:section xml:id="QStorageInfo-3">
<db:title>QStorageInfo::QStorageInfo(const QStorageInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStorageInfo</db:methodname>
<db:methodparam>
<db:type>const QStorageInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QStorageInfo(const QStorageInfo &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object that is a copy of the <db:code role="parameter">other</db:code> <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object.</db:para>
</db:section>
<db:section xml:id="dtor.QStorageInfo">
<db:title>QStorageInfo::~QStorageInfo()</db:title>
<db:destructorsynopsis>
<db:methodname>~QStorageInfo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QStorageInfo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object and frees its resources.</db:para>
</db:section>
<db:section xml:id="blockSize">
<db:title>[since 5.6] int QStorageInfo::blockSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>blockSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int blockSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the optimal transfer block size for this filesystem.</db:para>
<db:para>Returns -1 if <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> could not determine the size or if the <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object is not valid.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="bytesAvailable">
<db:title>qint64 QStorageInfo::bytesAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>bytesAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 bytesAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size (in bytes) available for the current user. It returns the total size available if the user is the root user or a system administrator.</db:para>
<db:para>This size can be less than or equal to the free size returned by <db:link xlink:href="qstorageinfo.xml#bytesFree">bytesFree</db:link>() function.</db:para>
<db:para>Returns -1 if <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object is not valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#bytesTotal">bytesTotal</db:link>()</db:member>
<db:member><db:link xlink:href="qstorageinfo.xml#bytesFree">bytesFree</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesFree">
<db:title>qint64 QStorageInfo::bytesFree() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>bytesFree</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 bytesFree() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of free bytes in a volume. Note that if there are quotas on the filesystem, this value can be larger than the value returned by <db:link xlink:href="qstorageinfo.xml#bytesAvailable">bytesAvailable</db:link>().</db:para>
<db:para>Returns -1 if <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object is not valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#bytesTotal">bytesTotal</db:link>()</db:member>
<db:member><db:link xlink:href="qstorageinfo.xml#bytesAvailable">bytesAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesTotal">
<db:title>qint64 QStorageInfo::bytesTotal() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>bytesTotal</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 bytesTotal() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the total volume size in bytes.</db:para>
<db:para>Returns -1 if <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object is not valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#bytesFree">bytesFree</db:link>()</db:member>
<db:member><db:link xlink:href="qstorageinfo.xml#bytesAvailable">bytesAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QByteArray QStorageInfo::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device for this volume.</db:para>
<db:para>For example, on Unix filesystems (including macOS), this returns the devpath like /dev/sda0 for local storages. On Windows, it returns the UNC path starting with \\\\?\\ for local storages (in other words, the volume GUID).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#rootPath">rootPath</db:link>()</db:member>
<db:member><db:link xlink:href="qstorageinfo.xml#subvolume">subvolume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayName">
<db:title>QString QStorageInfo::displayName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>displayName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString displayName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the volume's name, if available, or the root path if not.</db:para>
</db:section>
<db:section xml:id="fileSystemType">
<db:title>QByteArray QStorageInfo::fileSystemType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>fileSystemType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray fileSystemType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type name of the filesystem.</db:para>
<db:para>This is a platform-dependent function, and filesystem names can vary between different operating systems. For example, on Windows filesystems they can be named NTFS, and on Linux they can be named ntfs-3g or fuseblk.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadOnly">
<db:title>bool QStorageInfo::isReadOnly() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReadOnly</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReadOnly() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the current filesystem is protected from writing; false otherwise.</db:para>
</db:section>
<db:section xml:id="isReady">
<db:title>bool QStorageInfo::isReady() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReady</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReady() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the current filesystem is ready to work; false otherwise. For example, false is returned if the CD volume is not inserted.</db:para>
<db:para>Note that <db:link xlink:href="qstorageinfo.xml#fileSystemType">fileSystemType</db:link>(), <db:link xlink:href="qstorageinfo.xml#name">name</db:link>(), <db:link xlink:href="qstorageinfo.xml#bytesTotal">bytesTotal</db:link>(), <db:link xlink:href="qstorageinfo.xml#bytesFree">bytesFree</db:link>(), and <db:link xlink:href="qstorageinfo.xml#bytesAvailable">bytesAvailable</db:link>() will return invalid data until the volume is ready.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRoot">
<db:title>bool QStorageInfo::isRoot() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isRoot</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isRoot() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> represents the system root volume; false otherwise.</db:para>
<db:para>On Unix filesystems, the root volume is a volume mounted on /. On Windows, the root volume is the volume where the OS is installed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#root">root</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QStorageInfo::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> specified by <db:link xlink:href="qstorageinfo.xml#rootPath">rootPath</db:link> exists and is mounted correctly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#isReady">isReady</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mountedVolumes">
<db:title>[static] QList&lt;QStorageInfo&gt; QStorageInfo::mountedVolumes()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QStorageInfo&gt;</db:type>
<db:methodname>mountedVolumes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QStorageInfo&gt; mountedVolumes()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> objects that corresponds to the list of currently mounted filesystems.</db:para>
<db:para>On Windows, this returns the drives visible in the <db:emphasis role="bold">My Computer</db:emphasis> folder. On Unix operating systems, it returns the list of all mounted filesystems (except for pseudo filesystems).</db:para>
<db:para>Returns all currently mounted filesystems by default.</db:para>
<db:para>The example shows how to retrieve all available filesystems, skipping read-only ones.</db:para>
<db:programlisting language="cpp">    foreach (const QStorageInfo &amp;amp;storage, QStorageInfo::mountedVolumes()) {
        if (storage.isValid() &amp;amp;&amp;amp; storage.isReady()) {
            if (!storage.isReadOnly()) {
                // ...
            }
        }
    }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#root">root</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QStorageInfo::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the human-readable name of a filesystem, usually called label.</db:para>
<db:para>Not all filesystems support this feature. In this case, the value returned by this method could be empty. An empty string is returned if the file system does not support labels, or if no label is set.</db:para>
<db:para>On Linux, retrieving the volume's label requires udev to be present in the system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#fileSystemType">fileSystemType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="refresh">
<db:title>void QStorageInfo::refresh()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>refresh</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void refresh()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link>'s internal cache.</db:para>
<db:para><db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> caches information about storage to speed up performance. <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> retrieves information during object construction and/or when calling the <db:link xlink:href="qstorageinfo.xml#setPath">setPath</db:link>() method. You have to manually reset the cache by calling this function to update storage information.</db:para>
</db:section>
<db:section xml:id="root">
<db:title>[static] QStorageInfo QStorageInfo::root()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStorageInfo</db:type>
<db:methodname>root</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStorageInfo root()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object that represents the system root volume.</db:para>
<db:para>On Unix systems this call returns the root ('/') volume; in Windows the volume where the operating system is installed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#isRoot">isRoot</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rootPath">
<db:title>QString QStorageInfo::rootPath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>rootPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString rootPath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mount point of the filesystem this <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object represents.</db:para>
<db:para>On Windows, it returns the volume letter in case the volume is not mounted to a directory.</db:para>
<db:para>Note that the value returned by rootPath() is the real mount point of a volume, and may not be equal to the value passed to the constructor or <db:link xlink:href="qstorageinfo.xml#setPath">setPath</db:link>() method. For example, if you have only the root volume in the system, and pass '/directory' to <db:link xlink:href="qstorageinfo.xml#setPath">setPath</db:link>(), then this method will return '/'.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#setPath">setPath</db:link>()</db:member>
<db:member><db:link xlink:href="qstorageinfo.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPath">
<db:title>void QStorageInfo::setPath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPath(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object to the filesystem mounted where <db:code role="parameter">path</db:code> is located.</db:para>
<db:para><db:code role="parameter">path</db:code> can either be a root path of the filesystem, a directory, or a file within that filesystem.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#rootPath">rootPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subvolume">
<db:title>[since 5.9] QByteArray QStorageInfo::subvolume() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>subvolume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray subvolume() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the subvolume name for this volume.</db:para>
<db:para>Some filesystem types allow multiple subvolumes inside one device, which may be mounted in different paths. If the subvolume could be detected, it is returned here. The format of the subvolume name is specific to each filesystem type.</db:para>
<db:para>If this volume was not mounted from a subvolume of a larger filesystem or if the subvolume could not be detected, this function returns an empty byte array.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstorageinfo.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QStorageInfo::swap(QStorageInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QStorageInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QStorageInfo &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this volume info with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QStorageInfo &amp;QStorageInfo::operator=(const QStorageInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStorageInfo &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QStorageInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QStorageInfo &amp; operator=(const QStorageInfo &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes a copy of the <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object <db:code role="parameter">other</db:code> and assigns it to this <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QStorageInfo &amp;QStorageInfo::operator=(QStorageInfo &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStorageInfo &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QStorageInfo &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStorageInfo &amp; operator=(QStorageInfo &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> instance.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QStorageInfo &amp;<db:emphasis>first</db:emphasis>, const QStorageInfo &amp;<db:emphasis>second</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QStorageInfo &amp;</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStorageInfo &amp;</db:type>
<db:parameter>second</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QStorageInfo &amp;first, const QStorageInfo &amp;second)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:code role="parameter">first</db:code> <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object refers to a different drive or volume than the <db:code role="parameter">second</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QStorageInfo &amp;<db:emphasis>first</db:emphasis>, const QStorageInfo &amp;<db:emphasis>second</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QStorageInfo &amp;</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStorageInfo &amp;</db:type>
<db:parameter>second</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QStorageInfo &amp;first, const QStorageInfo &amp;second)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:code role="parameter">first</db:code> <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> object refers to the same drive or volume as the <db:code role="parameter">second</db:code>; otherwise it returns false.</db:para>
<db:para>Note that the result of comparing two invalid <db:link xlink:href="qstorageinfo.xml">QStorageInfo</db:link> objects is always positive.</db:para>
</db:section>
</db:section>
</db:article>
