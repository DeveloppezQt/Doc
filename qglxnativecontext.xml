<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtPlatformHeaders</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Platform Headers Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A class encapsulating a GLXContext and related native handles.</db:para>
<db:para>This struct was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGLXNativeContext</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>Only <db:link xlink:href="qglxnativecontext.xml#context">context</db:link>() is guaranteed to be valid. The other handles may be all <db:code>0</db:code>. They are useful however when <db:link xlink:href="qopenglcontext.xml#setNativeHandle">QOpenGLContext::setNativeHandle</db:link>() is used to adopt a legacy context created by glXCreateContext. To adopt such a context, either the Window or VisualID that had been used to create the context needs to be known, otherwise the adoption will fail. For modern contexts created with an FBConfig, these are not necessary, the GLXContext itself is sufficient. The Display is optional.</db:para>
</db:note>
<db:note>
<db:para>There is no binary compatibility guarantee for this class, meaning that an application using it is only guaranteed to work with the Qt version it was developed against.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#setNativeHandle">QOpenGLContext::setNativeHandle</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglcontext.xml#nativeHandle">QOpenGLContext::nativeHandle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGLXNativeContext">
<db:title>QGLXNativeContext::QGLXNativeContext()</db:title>
<db:para>Construct a new instance with no handles.</db:para>
</db:section>
<db:section xml:id="QGLXNativeContext-1">
<db:title>QGLXNativeContext::QGLXNativeContext(int <db:emphasis>ctx</db:emphasis>, int *<db:emphasis>dpy</db:emphasis> = 0, int <db:emphasis>wnd</db:emphasis> = 0, int <db:emphasis>vid</db:emphasis> = 0)</db:title>
<db:para>Constructs a new instance with the provided <db:code role="parameter">ctx</db:code>, <db:code role="parameter">dpy</db:code>, <db:code role="parameter">wnd</db:code>, <db:code role="parameter">vid</db:code> handles.</db:para>
</db:section>
<db:section xml:id="context">
<db:title>int QGLXNativeContext::context() const</db:title>
<db:para>Returns the GLXContext.</db:para>
</db:section>
<db:section xml:id="display">
<db:title>int *QGLXNativeContext::display() const</db:title>
<db:para>Returns a pointer to the X11 display or <db:code>NULL</db:code> if not available.</db:para>
</db:section>
<db:section xml:id="visualId">
<db:title>int QGLXNativeContext::visualId() const</db:title>
<db:para>Returns the X11 visual ID or <db:code>0</db:code> if not available.</db:para>
</db:section>
<db:section xml:id="window">
<db:title>int QGLXNativeContext::window() const</db:title>
<db:para>Returns the X11 Window or <db:code>0</db:code> if not available.</db:para>
</db:section>
</db:section>
</db:article>
