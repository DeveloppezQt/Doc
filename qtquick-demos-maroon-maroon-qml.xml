<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Qt Quick Demo - Maroon in Trouble</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A cute game designed for touchscreens.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.0
import QtQuick.Particles 2.0
import &quot;content&quot;
import &quot;content/logic.js&quot; as Logic

Item {
    id: root
    width: 320
    height: 480
    property var gameState
    property bool passedSplash: false

    Image {
        source:&quot;content/gfx/background.png&quot;
        anchors.bottom: view.bottom

        ParticleSystem {
            id: particles
            anchors.fill: parent

            ImageParticle {
                id: bubble
                anchors.fill: parent
                source: &quot;content/gfx/catch.png&quot;
                opacity: 0.25
            }

            Wander {
                xVariance: 25;
                pace: 25;
            }

            Emitter {
                width: parent.width
                height: 150
                anchors.bottom: parent.bottom
                anchors.bottomMargin: 3
                startTime: 15000

                emitRate: 2
                lifeSpan: 15000

                acceleration: PointDirection{ y: -6; xVariation: 2; yVariation: 2 }

                size: 24
                sizeVariation: 16
            }
        }
    }

    Column {
        id: view
        y: -(height - 480)
        width: 320

        GameOverScreen { gameCanvas: canvas }

        Item {
            id: canvasArea
            width: 320
            height: 480

            Row {
                height: childrenRect.height
                Image {
                    id: wave
                    y: 30
                    source:&quot;content/gfx/wave.png&quot;
                }
                Image {
                    y: 30
                    source:&quot;content/gfx/wave.png&quot;
                }
                NumberAnimation on x { from: 0; to: -(wave.width); duration: 16000; loops: Animation.Infinite }
                SequentialAnimation on y {
                    loops: Animation.Infinite
                    NumberAnimation { from: y - 2; to: y + 2; duration: 1600; easing.type: Easing.InOutQuad }
                    NumberAnimation { from: y + 2; to: y - 2; duration: 1600; easing.type: Easing.InOutQuad }
                }
            }

            Row {
                opacity: 0.5
                Image {
                    id: wave2
                    y: 25
                    source: &quot;content/gfx/wave.png&quot;
                }
                Image {
                    y: 25
                    source: &quot;content/gfx/wave.png&quot;
                }
                NumberAnimation on x { from: -(wave2.width); to: 0; duration: 32000; loops: Animation.Infinite }
                SequentialAnimation on y {
                    loops: Animation.Infinite
                    NumberAnimation { from: y + 2; to: y - 2; duration: 1600; easing.type: Easing.InOutQuad }
                    NumberAnimation { from: y - 2; to: y + 2; duration: 1600; easing.type: Easing.InOutQuad }
                }
            }

            Image {
                source: &quot;content/gfx/sunlight.png&quot;
                opacity: 0.02
                y: 0
                anchors.horizontalCenter: parent.horizontalCenter
                transformOrigin: Item.Top
                SequentialAnimation on rotation {
                    loops: Animation.Infinite
                    NumberAnimation { from: -10; to: 10; duration: 8000; easing.type: Easing.InOutSine }
                    NumberAnimation { from: 10; to: -10; duration: 8000; easing.type: Easing.InOutSine }
                }
            }

            Image {
                source: &quot;content/gfx/sunlight.png&quot;
                opacity: 0.04
                y: 20
                anchors.horizontalCenter: parent.horizontalCenter
                transformOrigin: Item.Top
                SequentialAnimation on rotation {
                    loops: Animation.Infinite
                    NumberAnimation { from: 10; to: -10; duration: 8000; easing.type: Easing.InOutSine }
                    NumberAnimation { from: -10; to: 10; duration: 8000; easing.type: Easing.InOutSine }
                }
            }

            Image {
                source: &quot;content/gfx/grid.png&quot;
                opacity: 0.5
            }

            GameCanvas {
                id: canvas
                anchors.bottom: parent.bottom
                anchors.bottomMargin: 20
                x: 32
                focus: true
            }

            InfoBar { anchors.bottom: canvas.top; anchors.bottomMargin: 6; width: parent.width }

            //3..2..1..go
            Timer {
                id: countdownTimer
                interval: 1000
                running: root.countdown &lt; 5
                repeat: true
                onTriggered: root.countdown++
            }
            Repeater {
                model: [&quot;content/gfx/text-blank.png&quot;, &quot;content/gfx/text-3.png&quot;, &quot;content/gfx/text-2.png&quot;, &quot;content/gfx/text-1.png&quot;, &quot;content/gfx/text-go.png&quot;]
                delegate: Image {
                    visible: root.countdown &lt;= index
                    opacity: root.countdown == index ? 0.5 : 0.1
                    scale: root.countdown &gt;= index ? 1.0 : 0.0
                    source: modelData
                    Behavior on opacity { NumberAnimation {} }
                    Behavior on scale { NumberAnimation {} }
                }
            }
        }

        NewGameScreen {
            onStartButtonClicked: root.passedSplash = true
        }
    }

    property int countdown: 10
    Timer {
        id: gameStarter
        interval: 4000
        running: false
        repeat: false
        onTriggered: Logic.startGame(canvas);
    }

    states: [
        State {
            name: &quot;gameOn&quot;; when: gameState.gameOver == false &amp;&amp; passedSplash
            PropertyChanges { target: view; y: -(height - 960) }
            StateChangeScript { script: root.countdown = 0; }
            PropertyChanges { target: gameStarter; running: true }
        },
        State {
            name: &quot;gameOver&quot;; when: gameState.gameOver == true
            PropertyChanges { target: view; y: 0 }
        }
    ]

    transitions: Transition {
        NumberAnimation { properties: &quot;x,y&quot;; duration: 1200; easing.type: Easing.OutQuad }
    }

    Component.onCompleted: gameState = Logic.newGameState(canvas);
}

</db:programlisting>
</db:article>
