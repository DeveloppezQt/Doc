<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>COM App Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The COM App example shows how to use ActiveQt to develop a Qt application that can be automated via COM. Different <db:link xlink:href="qobject.xml">QObject</db:link> based classes are exposed as COM objects that communicate with the GUI of the running Qt application. The APIs of those COM objects has been designed to resemble the APIs of standard COM applications; i.e. those from Microsoft Office.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">class Application : public QObject
{
    Q_OBJECT

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{b50a71db-c4a7-4551-8d14-49983566afee}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{4a427759-16ef-4ed8-be79-59ffe5789042}&quot;)
    Q_CLASSINFO(&quot;RegisterObject&quot;, &quot;yes&quot;)

    Q_PROPERTY(DocumentList* documents READ documents)
    Q_PROPERTY(QString id READ id)
    Q_PROPERTY(bool visible READ isVisible WRITE setVisible)

public:
    explicit Application(QObject *parent = nullptr);
    DocumentList *documents() const;

    QString id() const { return objectName(); }

    void setVisible(bool on);
    bool isVisible() const;

    QTabWidget *window() const { return m_ui.data(); }

public slots:
    void quit();

private:
    QScopedPointer &amp;lt;DocumentList&amp;gt; m_docs;
    QScopedPointer &amp;lt;QTabWidget&amp;gt; m_ui;
};
</db:programlisting>
<db:para>The first class <db:code>Application</db:code> represents the application object. It exposes read-only properties <db:code>documents</db:code> and <db:code>id</db:code> to get access to the list of documents, and an identifier. A read/write property <db:code>visible</db:code> controls whether the <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>-based user interface of the application should be visible, and a slot <db:code>quit()</db:code> terminates the application.</db:para>
<db:para>The <db:emphasis>RegisterObject</db:emphasis> attribute is set to make sure that instances of this class are registered in COM's running object table (ROT) - this allows COM clients to connect to an already instantiated COM object.</db:para>
<db:programlisting language="cpp">class DocumentList : public QObject
{
    Q_OBJECT

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{496b761d-924b-4554-a18a-8f3704d2a9a6}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{6c9e30e8-3ff6-4e6a-9edc-d219d074a148}&quot;)

    Q_PROPERTY(Application* application READ application)
    Q_PROPERTY(int count READ count)

public:
    explicit DocumentList(Application *application);

    int count() const;
    Application *application() const;

public slots:
    Document *addDocument();
    Document *item(int index) const;

private:
    QList&amp;lt;Document *&amp;gt; m_list;
};
</db:programlisting>
<db:para>The <db:code>DocumentList</db:code> class stores a list of documents. It provides an API to read the number of documents, to access each document by index and to create a new document. The <db:code>application</db:code> property returns the root object.</db:para>
<db:programlisting language="cpp">class Document : public QObject
{
    Q_OBJECT

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{2b5775cd-72c2-43da-bc3b-b0e8d1e1c4f7}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{2ce1761e-07a3-415c-bd11-0eab2c7283de}&quot;)

    Q_PROPERTY(Application *application READ application)
    Q_PROPERTY(QString title READ title WRITE setTitle)

public:
    explicit Document(DocumentList *list);
    virtual ~Document();

    Application *application() const;

    QString title() const;
    void setTitle(const QString &amp;amp;title);

private:
    QScopedPointer &amp;lt;QWidget&amp;gt; m_page;
};
</db:programlisting>
<db:para>The <db:code>Document</db:code> class finally represents a document in the application. Each document is represented by a page in the application's tab widget, and has a title that is readable and writable through the document's API. The <db:code>application</db:code> property again returns the root object.</db:para>
<db:programlisting language="cpp">Document::Document(DocumentList *list)
: QObject(list)
{
    QTabWidget *tabs = list-&amp;gt;application()-&amp;gt;window();
    m_page.reset(new QWidget(tabs));
    m_page-&amp;gt;setWindowTitle(tr(&quot;Unnamed&quot;));
    tabs-&amp;gt;addTab(m_page.data(), m_page-&amp;gt;windowTitle());

    m_page-&amp;gt;show();
}

Document::~Document() = default;

Application *Document::application() const
{
    return qobject_cast&amp;lt;DocumentList *&amp;gt;(parent())-&amp;gt;application();
}

QString Document::title() const
{
    return m_page-&amp;gt;windowTitle();
}

void Document::setTitle(const QString &amp;amp;t)
{
    m_page-&amp;gt;setWindowTitle(t);

    QTabWidget *tabs = application()-&amp;gt;window();
    int index = tabs-&amp;gt;indexOf(m_page.data());
    tabs-&amp;gt;setTabText(index, m_page-&amp;gt;windowTitle());
}
</db:programlisting>
<db:para>The implementation of the <db:code>Document</db:code> class creates a new page for the tab widget, and uses the title of that page for the title property. The page is deleted when the document is deleted.</db:para>
<db:programlisting language="cpp">DocumentList::DocumentList(Application *application)
: QObject(application)
{
}

Application *DocumentList::application() const
{
    return qobject_cast&amp;lt;Application *&amp;gt;(parent());
}

int DocumentList::count() const
{
    return m_list.size();
}

Document *DocumentList::item(int index) const
{
    return m_list.value(index, nullptr);
}

Document *DocumentList::addDocument()
{
    Document *document = new Document(this);
    m_list.append(document);

    return document;
}
</db:programlisting>
<db:para>The <db:code>DocumentList</db:code> implementation is straightforward.</db:para>
<db:programlisting language="cpp">Application::Application(QObject *parent)
: QObject(parent),
  m_ui(new QTabWidget),
  m_docs(new DocumentList(this))
{
    setObjectName(QStringLiteral(&quot;From QAxFactory&quot;));
}

DocumentList *Application::documents() const
{
    return m_docs.data();
}

void Application::setVisible(bool on)
{
    m_ui-&amp;gt;setVisible(on);
}

bool Application::isVisible() const
{
    return m_ui-&amp;gt;isVisible();
}

void Application::quit()
{
    m_docs.reset();
    m_ui.reset();
    QTimer::singleShot(0 /*ms*/, qApp, &amp;amp;QCoreApplication::quit);
}

#include &quot;main.moc&quot;
</db:programlisting>
<db:para>The <db:code>Application</db:code> class initializes the user interface in the constructor, and shows and hides it in the implementation of <db:code>setVisible()</db:code>. The object name (accessible through the <db:code>id</db:code> property) is set to <db:code>&quot;From</db:code> <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link>&quot; to indicate that this COM object has been created by COM. Note that there is no destructor that would delete the <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> - this is instead done in the <db:code>quit()</db:code> slot, before calling <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>() through a single-shot-timer, which is necessary to ensure that the COM call to the slot is complete.</db:para>
<db:programlisting language="cpp">QAXFACTORY_BEGIN(&quot;{edd3e836-f537-4c6f-be7d-6014c155cc7a}&quot;, &quot;{b7da3de8-83bb-4bbe-9ab7-99a05819e201}&quot;)
   QAXCLASS(Application)
   QAXTYPE(Document)
   QAXTYPE(DocumentList)
QAXFACTORY_END()
</db:programlisting>
<db:para>The classes are exported from the server using the <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link> macros. Only <db:code>Application</db:code> objects can be instantiated from outside - the other APIs can only be used after accessing the respective objects throughout the <db:code>Application</db:code> API.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    app.setQuitOnLastWindowClosed(false);

    // started by COM - don't do anything
    if (QAxFactory::isServer())
        return app.exec();

    // started by user
    Application appobject;
    appobject.setObjectName(QStringLiteral(&quot;From Application&quot;));

    QAxFactory::startServer();
    QAxFactory::registerActiveObject(&amp;amp;appobject);

    appobject.window()-&amp;gt;setMinimumSize(300, 100);
    appobject.setVisible(true);

    QObject::connect(&amp;amp;app, &amp;amp;QGuiApplication::lastWindowClosed, &amp;amp;appobject, &amp;amp;Application::quit);

    return app.exec();
}
</db:programlisting>
<db:para>The main() entry point function creates a <db:link xlink:href="qapplication.xml">QApplication</db:link>, and just enters the event loop if the application has been started by COM. If the application has been started by the user, then the <db:code>Application</db:code> object is created and the object name is set to &quot;From Application&quot;. Then the COM server is started, and the application object is registered with COM. It is now accessible to COM clients through the client-specific APIs.</db:para>
<db:para>Application exiting is controlled explicitly - if COM started the application, then the client code has to call quit(); if the user started the application, then the application terminates when the last window has been closed.</db:para>
<db:para>Finally, the user interface is made visible, and the event loop is started.</db:para>
<db:para>A simple Visual Basic application could now access this Qt application. In VB, start a new &quot;Standard Exe&quot; project and add a project reference to the comappLib type library. Create a form with a listbox &quot;DocumentList&quot;, a static label &quot;DocumentsCount&quot; and a command button &quot;NewDocument&quot;. Finally, implement the code for the form like this:</db:para>
<db:programlisting language="cpp">Private Application As comappLib.Application
Private MyApp As Boolean

Private Sub UpdateList()
    DocumentList.Clear
    DocumentsCount.Caption = Application.documents.Count
    For Index = 0 To Application.documents.Count - 1
       DocumentList.AddItem (Application.documents.Item(Index).Title)
    Next
End Sub

Private Sub Form_Load()
    On Error GoTo CreateNew
    Set Application = GetObject(, &quot;comapp.Application&quot;)
    MyApp = False
    GoTo Initialized
CreateNew:
    On Error GoTo InitializeFailed
    Set Application = New Application
    Application.Visible = True
    MyApp = True
Initialized:
    Caption = Application.id
    UpdateList
InitializeFailed:
End Sub

Private Sub Form_Unload(Cancel As Integer)
    If MyApp Then
        Application.quit
    End If
End Sub

Private Sub NewDocument_Click()
    Application.documents.addDocument
    UpdateList
End Sub
</db:programlisting>
<db:para>To build the example you must first build the <db:link xlink:href="qaxserver-module.xml">QAxServer</db:link> library. Then run <db:code>qmake</db:code> and your make tool in <db:code>examples\activeqt\comapp</db:code>.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtactiveqt.git/tree/examples/activeqt/comapp?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
