<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Media Player Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Playing audio and video using Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlmediaplayer.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates a simple multimedia player that can play audio and video files using various codecs.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>At its core this is a QML application, see <db:link xlink:href="qtdoc-tutorials-alarms-example.xml">Getting Started Programming with Qt Quick</db:link> for information specific to that. This documentation is focused on how this example utilizes the <db:link xlink:href="qtmultimedia-qmlmodule.xml">Qt Multimedia QML Types</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/architecture-overview.gif"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="using-mediaplayer-and-videooutput">
<db:title>Using MediaPlayer and VideoOutput</db:title>
<db:para>In <db:code>main.qml</db:code> a <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> instance is connected to a <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> to play back the video:</db:para>
<db:programlisting language="cpp">    MediaPlayer {
        id: mediaPlayer

        function updateMetadata() {
            metadataInfo.clear();
            metadataInfo.read(mediaPlayer.metaData);
            metadataInfo.read(mediaPlayer.audioTracks[mediaPlayer.activeAudioTrack]);
            metadataInfo.read(mediaPlayer.videoTracks[mediaPlayer.activeVideoTrack]);
        }

        videoOutput: videoOutput
</db:programlisting>
<db:para><db:code>videoOutput</db:code> is declared like so:</db:para>
<db:programlisting language="cpp">    VideoOutput {
        id: videoOutput

        property bool fullScreen: false

        anchors.top: fullScreen ? parent.top : menuBar.bottom
        anchors.bottom: playbackControl.top
        anchors.left: parent.left
        anchors.right: parent.right

        TapHandler {
            onDoubleTapped: {
                parent.fullScreen ?  showNormal() : showFullScreen()
                parent.fullScreen = !parent.fullScreen
            }
            onTapped: {
                metadataInfo.visible = false
                audioTracksInfo.visible = false
                videoTracksInfo.visible = false
                subtitleTracksInfo.visible = false
            }
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="playermenubar">
<db:title>PlayerMenuBar</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/PlayerMenuBar.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>This QML type handles media selection from a url or local file, exiting the application, viewing meta data, and the selection of available video, audio or subtitle tracks.</db:para>
<db:para>Accessing the mediaPlayer object is done through properties:</db:para>
<db:programlisting language="cpp">    required property MediaPlayer mediaPlayer
    required property VideoOutput videoOutput
    required property MetadataInfo metadataInfo
    required property TracksInfo audioTracksInfo
    required property TracksInfo videoTracksInfo
    required property TracksInfo subtitleTracksInfo
</db:programlisting>
<db:section xml:id="filedialog">
<db:title>fileDialog</db:title>
<db:para>A <db:link xlink:href="qml-qt-labs-platform-filedialog.xml">FileDialog</db:link>, <db:code>fileDialog</db:code>, is created with an <db:code>onAccepted</db:code> function that will stop <db:code>mediaPlayer</db:code>, load the source by setting the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#source-prop">source</db:link> property and then play it automatically:</db:para>
<db:programlisting language="cpp">    FileDialog {
        id: fileDialog
        title: &quot;Please choose a file&quot;
        onAccepted: {
            mediaPlayer.stop()
            mediaPlayer.source = fileDialog.currentFile
            mediaPlayer.play()
        }
    }
</db:programlisting>
<db:para>This is triggered in the Menu <db:code>File</db:code>, which is a child of the <db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link>:</db:para>
<db:programlisting language="cpp">    MenuBar {
        id: menuBar
        anchors.left: parent.left
        anchors.right: parent.right

        Menu {
            title: qsTr(&quot;&amp;amp;File&quot;)
            Action {
                text: qsTr(&quot;&amp;amp;Open&quot;)
                onTriggered: fileDialog.open()
</db:programlisting>
</db:section>
<db:section xml:id="loadurl">
<db:title>loadUrl</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/url.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>While <db:code>urlPopup</db:code> handles prompting and capturing a url, it is the <db:code>loadUrl</db:code> function that interacts with <db:code>mediaPlayer</db:code> like so:</db:para>
<db:programlisting language="cpp">    function loadUrl(url) {
        mediaPlayer.stop()
        mediaPlayer.source = url
        mediaPlayer.play()
    }
</db:programlisting>
</db:section>
<db:section xml:id="getting-meta-data">
<db:title>Getting meta data</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/meta-data.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In the declaration of <db:code>mediaPlayer</db:code>, in <db:code>main.qml</db:code>, there is the function <db:code>updateMetadata()</db:code>:</db:para>
<db:programlisting language="cpp">        function updateMetadata() {
            metadataInfo.clear();
            metadataInfo.read(mediaPlayer.metaData);
            metadataInfo.read(mediaPlayer.audioTracks[mediaPlayer.activeAudioTrack]);
            metadataInfo.read(mediaPlayer.videoTracks[mediaPlayer.activeVideoTrack]);
</db:programlisting>
<db:para>It is called in the following places:</db:para>
<db:programlisting language="cpp">        onMetaDataChanged: { updateMetadata() }
        onTracksChanged: {
            audioTracksInfo.read(mediaPlayer.audioTracks);
            audioTracksInfo.selectedTrack = mediaPlayer.activeAudioTrack;
            videoTracksInfo.read(mediaPlayer.videoTracks);
            videoTracksInfo.selectedTrack = mediaPlayer.activeVideoTrack;
            subtitleTracksInfo.read(mediaPlayer.subtitleTracks);
            subtitleTracksInfo.selectedTrack = mediaPlayer.activeSubtitleTrack;
            updateMetadata()
        }
</db:programlisting>
<db:para>Reading MetaData is done by the <db:code>MetadataInfo</db:code> type's <db:code>read()</db:code> function</db:para>
<db:programlisting language="cpp">    function read(metadata) {
        if (metadata) {
            for (var key of metadata.keys()) {
                if (metadata.stringValue(key)) {
                    elements.append(
                                { name: metadata.metaDataKeyToString(key)
                                , value: metadata.stringValue(key)
                                })
                }
            }
        }
    }
</db:programlisting>
<db:para>The information is displayed via an <db:link xlink:href="qml-qtquick-controls-overlay.xml">Overlay</db:link> item.</db:para>
</db:section>
<db:section xml:id="tracks-information-and-control">
<db:title>Tracks information and control</db:title>
<db:mediaobject>
<db:videoobject>
<?db video="iframe"?>
<db:videodata format="youtube" fileref="OqosZsDqvzQ">
</db:videodata>
</db:videoobject>
<db:imageobject>
<db:imagedata fileref="images/OqosZsDqvzQ.jpg">
</db:imagedata>
</db:imageobject>
</db:mediaobject>
<db:para>This is defined in <db:code>TracksInfo.qml</db:code> and reading available tracks is done in a similar way to <db:code>MetadataInfo</db:code>:</db:para>
<db:programlisting language="cpp">    function read(metadataList) {
        var LanguageKey = 6;

        elements.clear()

        elements.append(
                    { language: &quot;No Selected Track&quot;
                    , trackNumber: -1
                    })

        if (!metadataList)
            return;

        metadataList.forEach(function (metadata, index) {
            var language = metadata.stringValue(LanguageKey);
            var label = language ? metadata.stringValue(LanguageKey) : &quot;track &quot; + (index + 1)
            elements.append(
                        { language: label
                        , trackNumber: index
                        })
        });
    }
</db:programlisting>
<db:para>To set a track, the property <db:code>selectedTrack</db:code> is set like so:</db:para>
<db:programlisting language="cpp">        ListView {
            id: trackList
            visible: elements.count &amp;gt; 0
            anchors.fill: parent
            model: elements
            delegate: RowLayout {
                width: trackList.width
                RadioButton {
                    checked: model.trackNumber === selectedTrack
                    text: model.language
                    ButtonGroup.group: group
                    onClicked: selectedTrack = model.trackNumber
                }
            }
        }
</db:programlisting>
<db:para>The <db:code>onSelectectedTrackChanged</db:code> signal, in each relevant <db:code>TracksInfo</db:code> instance in <db:code>main.qml</db:code>, is what makes changes to <db:code>mediaPlayer</db:code> like so:</db:para>
<db:programlisting language="cpp">        id: audioTracksInfo

        anchors.right: parent.right
        anchors.top: videoOutput.fullScreen ? parent.top : menuBar.bottom
        anchors.bottom: playbackControl.opacity ? playbackControl.bottom : parent.bottom

        visible: false
        onSelectedTrackChanged:  mediaPlayer.activeAudioTrack = audioTracksInfo.selectedTrack
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="playbackcontrolpanel">
<db:title>playbackControlPanel</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/playbackControlPanel.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>This item has controls for <db:link xlink:href="qtmultimedia-video-mediaplayer-example.xml#playback-control">Playback control</db:link>, <db:link xlink:href="qtmultimedia-video-mediaplayer-example.xml#play-pause-stop">Play Pause Stop</db:link>, <db:link xlink:href="qtmultimedia-video-mediaplayer-example.xml#playback-rate-control">Playback rate control</db:link> and <db:link xlink:href="qtmultimedia-video-mediaplayer-example.xml#playback-seek-control">Playback seek control</db:link>.</db:para>
<db:section xml:id="playback-control">
<db:title>Playback control</db:title>
<db:para>This qml type handles media playback and interacts with the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> in <db:code>main.qml</db:code>.</db:para>
<db:para>Here are the property definitions.</db:para>
<db:programlisting language="cpp">    required property MediaPlayer mediaPlayer
    property int mediaPlayerState: mediaPlayer.playbackState
</db:programlisting>
<db:para>Connections:</db:para>
<db:programlisting language="cpp">        target: mediaPlayer
        function onPlaybackStateChanged() { updateOpacity() }
        function onHasVideoChanged() { updateOpacity() }
    }
</db:programlisting>
</db:section>
<db:section xml:id="play-pause-stop">
<db:title>Play Pause Stop</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/play-pause-stop.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#play-method">Play</db:link>, <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#stop-method">stop</db:link> and <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#pause-method">pause</db:link> interactions with the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> object are done like so:</db:para>
<db:programlisting language="cpp">                    RoundButton {
                        id: pauseButton
                        radius: 50.0
                        text: &quot;\u2016&quot;;
                        onClicked: mediaPlayer.pause()
                    }

                    RoundButton {
                        id: playButton
                        radius: 50.0
                        text: &quot;\u25B6&quot;;
                        onClicked: mediaPlayer.play()
                    }

                    RoundButton {
                        id: stopButton
                        radius: 50.0
                        text: &quot;\u25A0&quot;;
                        onClicked: mediaPlayer.stop()
                    }
                }
</db:programlisting>
<db:para>Playback states done using <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#playbackState-prop">playbackstate</db:link> like so:</db:para>
<db:programlisting language="cpp">        State {
            name: &quot;playing&quot;
            when: mediaPlayerState == MediaPlayer.PlayingState
            PropertyChanges { target: pauseButton; visible: true}
            PropertyChanges { target: playButton; visible: false}
            PropertyChanges { target: stopButton; visible: true}
        },
        State {
            name: &quot;stopped&quot;
            when: mediaPlayerState == MediaPlayer.StoppedState
            PropertyChanges { target: pauseButton; visible: false}
            PropertyChanges { target: playButton; visible: true}
            PropertyChanges { target: stopButton; visible: false}
        },
        State {
            name: &quot;paused&quot;
            when: mediaPlayerState == MediaPlayer.PausedState
            PropertyChanges { target: pauseButton; visible: false}
            PropertyChanges { target: playButton; visible: true}
            PropertyChanges { target: stopButton; visible: true}
        }
    ]
</db:programlisting>
</db:section>
<db:section xml:id="playback-seek-control">
<db:title>Playback seek control</db:title>
<db:mediaobject>
<db:videoobject>
<?db video="iframe"?>
<db:videodata format="youtube" fileref="sf_yv01UtIw">
</db:videodata>
</db:videoobject>
<db:imageobject>
<db:imagedata fileref="images/sf_yv01UtIw.jpg">
</db:imagedata>
</db:imageobject>
</db:mediaobject>
<db:para>Defined in <db:code>PlaybackSeekControl.qml</db:code>, this component comprises of an item with a Text, <db:code>mediaTime</db:code>, and <db:link xlink:href="qml-qtquick-controls-slider.xml">Slider</db:link>, <db:code>mediaSlider</db:code>, in a <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml">RowLayout</db:link>.</db:para>
<db:para><db:code>mediaTime</db:code> uses <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link>'s <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#position-prop">position</db:link> property like so:</db:para>
<db:programlisting language="cpp">        Text {
            id: mediaTime
            Layout.minimumWidth: 50
            Layout.minimumHeight: 18
            horizontalAlignment: Text.AlignRight
            text: {
                var m = Math.floor(mediaPlayer.position / 60000)
                var ms = (mediaPlayer.position / 1000 - m * 60).toFixed(1)
                return `${m}:${ms.padStart(4, 0)}`
            }
        }
</db:programlisting>
<db:para><db:code>mediaSlider</db:code> uses the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#seekable-prop">seekable</db:link>, <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#duration-prop">duration</db:link>, and <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#position-prop">position</db:link> properties like so:</db:para>
<db:programlisting language="cpp">        Slider {
            id: mediaSlider
            Layout.fillWidth: true
            enabled: mediaPlayer.seekable
            to: 1.0
            value: mediaPlayer.position / mediaPlayer.duration

            onMoved: mediaPlayer.setPosition(value * mediaPlayer.duration)
        }
</db:programlisting>
</db:section>
<db:section xml:id="playback-rate-control">
<db:title>Playback rate control</db:title>
<db:mediaobject>
<db:videoobject>
<?db video="iframe"?>
<db:videodata format="youtube" fileref="nHrBbW0H-pc">
</db:videodata>
</db:videoobject>
<db:imageobject>
<db:imagedata fileref="images/nHrBbW0H-pc.jpg">
</db:imagedata>
</db:imageobject>
</db:mediaobject>
<db:para>This type is defined in <db:code>PlaybackRateControl.qml</db:code> like so:</db:para>
<db:programlisting language="cpp">        Slider {
            id: slider
            Layout.fillWidth: true
            snapMode: Slider.SnapOnRelease
            enabled: true
            from: 0.5
            to: 2.5
            stepSize: 0.5
            value: 1.0

            onMoved: { mediaPlayer.setPlaybackRate(value) }
        }
        Text {
            text: &quot;Rate &quot; + mediaPlayer.playbackRate + &quot;x&quot;
</db:programlisting>
</db:section>
<db:section xml:id="audio-control">
<db:title>Audio control</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/audio-control.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>This type is defined in <db:code>AudioControl.qml</db:code>, and utilizes the <db:link xlink:href="qml-qtmultimedia-audiooutput.xml#muted-prop">muted</db:link> and <db:link xlink:href="qml-qtmultimedia-audiooutput.xml#volume-prop">volume</db:link> properties of the <db:link xlink:href="qml-qtmultimedia-audiooutput.xml">AudioOutput</db:link> instantiated within the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link>, which is instantiated in <db:code>main.qml</db:code>.</db:para>
<db:programlisting language="cpp">    required property MediaPlayer mediaPlayer
    property bool muted: false
    property real volume: volumeSlider.value/100.

    implicitHeight: buttons.height

    RowLayout {
        anchors.fill: parent

        Item {
            id: buttons

            width: muteButton.implicitWidth
            height: muteButton.implicitHeight

            RoundButton {
                id: muteButton
                radius: 50.0
                icon.source: muted ? &quot;qrc:///Mute_Icon.svg&quot; : &quot;qrc:///Speaker_Icon.svg&quot;
                onClicked: { muted = !muted }
            }
        }

        Slider {
            id: volumeSlider
            Layout.fillWidth: true
            Layout.alignment: Qt.AlignVCenter

            enabled: true
            to: 100.0
            value: 100.0
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtmultimedia.git/tree/examples/multimedia/video/mediaplayer?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
