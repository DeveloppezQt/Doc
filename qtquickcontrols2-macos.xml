<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>macOS Style</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Controls Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The macOS style is a style that looks native on macOS. <db:link xlink:href="qtquickcontrols2-macos.xml#detailed-desc-macos">More...</db:link></db:para>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls.macOS</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:anchor xml:id="detailed-desc-macos"/>
<db:para>The macOS style is a style that looks native on macOS. The controls are drawn run-time using native frameworks, and is therefore only available for applications running on macOS.</db:para>
<db:note>
<db:para>Be aware that the apperance of this style can change from one minor Qt version to the next, to better blend in with native applications on the platform.</db:para>
</db:note>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:figure>
<db:title>The macOS style in light theme</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-macos-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
<db:td>
<db:figure>
<db:title>The macOS style in dark theme</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-macos-dark.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
</db:tr>
</db:informaltable>
<db:para>To run an application with the macOS style, see <db:link xlink:href="qtquickcontrols2-styles.xml#using-styles-in-qt-quick-controls">Using Styles in Qt Quick Controls</db:link>.</db:para>
<db:section xml:id="current-state">
<db:title>Current state</db:title>
<db:para>The macOS style is under development, and some controls are not yet supported. Those controls are: <db:link xlink:href="qml-qtquick-controls2-busyindicator.xml">BusyIndicator</db:link>, <db:link xlink:href="qml-qtquick-controls2-delaybutton.xml">DelayButton</db:link>, <db:link xlink:href="qml-qtquick-controls2-pageindicator.xml">PageIndicator</db:link>, <db:link xlink:href="qml-qtquick-controls2-rangeslider.xml">RangeSlider</db:link>, <db:link xlink:href="qml-qtquick-controls2-switch.xml">Switch</db:link>, <db:link xlink:href="qml-qtquick-controls2-tabbar.xml">TabBar</db:link> and <db:link xlink:href="qml-qtquick-controls2-tumbler.xml">Tumbler</db:link>. Those will fall back to use the <db:link xlink:href="qtquickcontrols2-fusion.xml">Fusion Style</db:link>.</db:para>
</db:section>
<db:section xml:id="customization">
<db:title>Customization</db:title>
<db:para>The goal of the macOS style is to for the controls look and feel as similar as possible to the native controls in UIKit. The style will follow the theme and colors configured globally from System Preferences, and does not come with a separate customization API on top of that.</db:para>
<db:note>
<db:para>The macOS style is not suitable for <db:link xlink:href="qtquickcontrols2-customize.xml">customizing</db:link>. The main reason is that it sometimes draw both the contents and the background onto a single background item, which will not look good together with a custom contentItem. It also tends to use padding and inset values that are different from the other styles. It is instead recommended to always base a customized control on top of a single style that is available on all platforms, e.g <db:link xlink:href="qtquickcontrols2-basic.xml">Basic Style</db:link>, <db:link xlink:href="qtquickcontrols2-fusion.xml">Fusion Style</db:link>, <db:link xlink:href="qtquickcontrols2-imagine.xml">Imagine Style</db:link>, <db:link xlink:href="qtquickcontrols2-material.xml">Material Style</db:link>, <db:link xlink:href="qtquickcontrols2-universal.xml">Universal Style</db:link>. By doing so, you are guaranteed that it will always look the same, regardless of which style the application is run with. For example:</db:para>
</db:note>
<db:programlisting language="cpp">import QtQuick.Controls.Basic as Basic

Basic.SpinBox {
    background: Rectangle { /* ... */ }
}
</db:programlisting>
<db:para><db:emphasis role="bold">See also</db:emphasis> <db:link xlink:href="qtquickcontrols2-styles.xml">Styling Qt Quick Controls</db:link></db:para>
</db:section>
</db:article>
