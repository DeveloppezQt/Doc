<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QItemEditorCreatorBase Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qitemeditorcreatorbase.xml">QItemEditorCreatorBase</db:link> class provides an abstract base class that must be subclassed when implementing new item editor creators.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QItemEditorCreatorBase</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qitemeditorcreator.xml" xlink:role="class">QItemEditorCreator</db:link> and <db:link xlink:href="qstandarditemeditorcreator.xml" xlink:role="class">QStandardItemEditorCreator</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QItemEditorCreatorBase is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qitemeditorcreatorbase.xml">QItemEditorCreatorBase</db:link> objects are specialized widget factories that provide editor widgets for one particular <db:link xlink:href="qvariant.xml">QVariant</db:link> data type. They are used by <db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link> to create editors for <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>s. Creator bases must be registered with <db:link xlink:href="qitemeditorfactory.xml#registerEditor">QItemEditorFactory::registerEditor</db:link>().</db:para>
<db:para>An editor should provide a user property for the data it edits. QItemDelagates can then access the property using Qt's <db:link xlink:href="metaobjects.xml">meta-object system</db:link> to set and retrieve the editing data. A property is set as the user property with the USER keyword:</db:para>
<db:programlisting language="cpp">Q_PROPERTY(QColor color READ color WRITE setColor USER true)
</db:programlisting>
<db:para>If the editor does not provide a user property, it must return the name of the property from <db:link xlink:href="qitemeditorcreatorbase.xml#valuePropertyName">valuePropertyName</db:link>(); delegates will then use the name to access the property. If a user property exists, item delegates will not call <db:link xlink:href="qitemeditorcreatorbase.xml#valuePropertyName">valuePropertyName</db:link>().</db:para>
<db:para><db:link xlink:href="qstandarditemeditorcreator.xml">QStandardItemEditorCreator</db:link> is a convenience template class that can be used to register widgets without the need to subclass <db:link xlink:href="qitemeditorcreatorbase.xml">QItemEditorCreatorBase</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemeditorcreator.xml">QStandardItemEditorCreator</db:link></db:member>
<db:member><db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QItemEditorCreatorBase">
<db:title>[virtual] QItemEditorCreatorBase::~QItemEditorCreatorBase()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QItemEditorCreatorBase</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QItemEditorCreatorBase()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the editor creator object.</db:para>
</db:section>
<db:section xml:id="createWidget">
<db:title>[pure virtual] QWidget *QItemEditorCreatorBase::createWidget(QWidget *<db:emphasis>parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>createWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * createWidget(QWidget *parent) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an editor widget with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>When implementing this function in subclasses of this class, you must construct and return new editor widgets with the parent widget specified.</db:para>
</db:section>
<db:section xml:id="valuePropertyName">
<db:title>[pure virtual] QByteArray QItemEditorCreatorBase::valuePropertyName() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>valuePropertyName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray valuePropertyName() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the property used to get and set values in the creator's editor widgets.</db:para>
<db:para>When implementing this function in subclasses, you must ensure that the editor widget's property specified by this function can accept the type the creator is registered for. For example, a creator which constructs <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> widgets to edit boolean values would return the <db:link xlink:href="qabstractbutton.xml#checkable-prop">checkable</db:link> property name from this function, and must be registered in the item editor factory for the <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> type.</db:para>
<db:para>Note: Since Qt 4.2 the item delegates query the user property of widgets, and only call this function if the widget has no user property. You can override this behavior by reimplementing <db:link xlink:href="qabstractitemdelegate.xml#setModelData">QAbstractItemDelegate::setModelData</db:link>() and <db:link xlink:href="qabstractitemdelegate.xml#setEditorData">QAbstractItemDelegate::setEditorData</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#userProperty">QMetaObject::userProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qitemeditorfactory.xml#registerEditor">QItemEditorFactory::registerEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
