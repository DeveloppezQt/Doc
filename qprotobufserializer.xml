<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProtobufSerializer Class</db:title>
<db:productname>QtProtobuf</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Protobuf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprotobufserializer.xml">QProtobufSerializer</db:link> class is interface that represents basic functions for serialization/deserialization.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProtobufSerializer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Protobuf)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Protobuf)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qprotobufbaseserializer.xml" xlink:role="class">QProtobufBaseSerializer</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qprotobufserializer.xml">QProtobufSerializer</db:link> class registers serializers/deserializers for classes implementing a protobuf message, inheriting <db:link xlink:href="qprotobufmessage.xml">QProtobufMessage</db:link>. These classes are generated automatically, based on a <db:code>.proto</db:code> file, using the CMake function <db:link xlink:href="qt-add-protobuf.xml">qt_add_protobuf</db:link> or by running <db:link xlink:href="qtprotobufgen-qt-tool.xml">qtprotobufgen</db:link> directly.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProtobufSerializer-2">
<db:title>QProtobufSerializer::QProtobufSerializer()</db:title>
<db:constructorsynopsis>
<db:methodname>QProtobufSerializer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QProtobufSerializer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new serializer instance.</db:para>
</db:section>
<db:section xml:id="dtor.QProtobufSerializer">
<db:title>[override virtual] QProtobufSerializer::~QProtobufSerializer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QProtobufSerializer</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QProtobufSerializer() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the serializer instance.</db:para>
</db:section>
<db:section xml:id="deserializationError">
<db:title>[override virtual] QProtobufSerializer::DeserializationError QProtobufSerializer::deserializationError() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QProtobufSerializer::DeserializationError</db:type>
<db:methodname>deserializationError</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProtobufSerializer::DeserializationError deserializationError() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last deserialization error.</db:para>
</db:section>
<db:section xml:id="deserializationErrorString">
<db:title>[override virtual] QString QProtobufSerializer::deserializationErrorString() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>deserializationErrorString</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString deserializationErrorString() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a human-readable string describing the last deserialization error. If there was no error, an empty string is returned.</db:para>
</db:section>
<db:section xml:id="shouldPreserveUnknownFields">
<db:title>[since 6.7] void QProtobufSerializer::shouldPreserveUnknownFields(bool <db:emphasis>preserveUnknownFields</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>shouldPreserveUnknownFields</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>preserveUnknownFields</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void shouldPreserveUnknownFields(bool preserveUnknownFields)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Controls whether the unknown fields received from the wire should be stored in the resulting message or if it should be omitted, based on <db:code role="parameter">preserveUnknownFields</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
</db:article>
