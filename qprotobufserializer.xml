<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProtobufSerializer Class</db:title>
<db:productname>QtProtobuf</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Protobuf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprotobufserializer.xml">QProtobufSerializer</db:link> class is interface that represents basic functions for serialization/deserialization.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProtobufSerializer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Protobuf)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Protobuf)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractprotobufserializer.xml" xlink:role="class">QAbstractProtobufSerializer</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qprotobufserializer.xml">QProtobufSerializer</db:link> class registers serializers/deserializers for classes implementing a protobuf message, inheriting <db:link xlink:href="qprotobufmessage.xml">QProtobufMessage</db:link>. These classes are generated automatically, based on a .proto file, using the cmake build macro qt6_add_protobuf or by running qtprotobufgen directly.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProtobufSerializer-2">
<db:title>QProtobufSerializer::QProtobufSerializer()</db:title>
<db:constructorsynopsis>
<db:methodname>QProtobufSerializer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QProtobufSerializer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new serializer instance.</db:para>
</db:section>
<db:section xml:id="dtor.QProtobufSerializer">
<db:title>[override virtual] QProtobufSerializer::~QProtobufSerializer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QProtobufSerializer</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QProtobufSerializer() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the serializer instance.</db:para>
</db:section>
<db:section xml:id="deserializationError">
<db:title>[override virtual] QProtobufSerializer::DeserializationError QProtobufSerializer::deserializationError() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QProtobufSerializer::DeserializationError</db:type>
<db:methodname>deserializationError</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProtobufSerializer::DeserializationError deserializationError() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last deserialization error.</db:para>
</db:section>
<db:section xml:id="deserializationErrorString">
<db:title>[override virtual] QString QProtobufSerializer::deserializationErrorString() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>deserializationErrorString</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString deserializationErrorString() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a human-readable string describing the last deserialization error. If there was no error, an empty string is returned.</db:para>
</db:section>
<db:section xml:id="deserializeEnum">
<db:title>bool QProtobufSerializer::deserializeEnum(QtProtobuf::int64 &amp;<db:emphasis>value</db:emphasis>, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;<db:emphasis>it</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>deserializeEnum</db:methodname>
<db:methodparam>
<db:type>QtProtobuf::int64 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtProtobufPrivate::QProtobufSelfcheckIterator &amp;</db:type>
<db:parameter>it</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool deserializeEnum(QtProtobuf::int64 &amp;value, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;it) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function deserializes an enum <db:code role="parameter">value</db:code> from a QProtobufSelfcheckIterator <db:code role="parameter">it</db:code>. Returns <db:code>true</db:code> if deserialization was successful, otherwise <db:code>false</db:code>.</db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
<db:section xml:id="deserializeEnumList">
<db:title>bool QProtobufSerializer::deserializeEnumList(QList&lt;QtProtobuf::int64&gt; &amp;<db:emphasis>value</db:emphasis>, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;<db:emphasis>it</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>deserializeEnumList</db:methodname>
<db:methodparam>
<db:type>QList&lt;QtProtobuf::int64&gt; &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtProtobufPrivate::QProtobufSelfcheckIterator &amp;</db:type>
<db:parameter>it</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool deserializeEnumList(QList&lt;QtProtobuf::int64&gt; &amp;value, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;it) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function deserializes a list of enum <db:code role="parameter">value</db:code> from a QProtobufSelfcheckIterator <db:code role="parameter">it</db:code>. Returns <db:code>true</db:code> if deserialization was successful, otherwise <db:code>false</db:code>.</db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
<db:section xml:id="deserializeListObject">
<db:title>bool QProtobufSerializer::deserializeListObject(QProtobufMessage *<db:emphasis>message</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;<db:emphasis>ordering</db:emphasis>, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;<db:emphasis>it</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>deserializeListObject</db:methodname>
<db:methodparam>
<db:type>QProtobufMessage *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrdering &amp;</db:type>
<db:parameter>ordering</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtProtobufPrivate::QProtobufSelfcheckIterator &amp;</db:type>
<db:parameter>it</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool deserializeListObject(QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;it) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function deserializes an <db:code role="parameter">message</db:code> from byte stream as part of list property, with <db:code role="parameter">ordering</db:code> from a QProtobufSelfcheckIterator <db:code role="parameter">it</db:code>. Returns <db:code>true</db:code> if deserialization was successful, otherwise <db:code>false</db:code>.</db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
<db:section xml:id="deserializeMapPair">
<db:title>bool QProtobufSerializer::deserializeMapPair(QVariant &amp;<db:emphasis>key</db:emphasis>, QVariant &amp;<db:emphasis>value</db:emphasis>, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;<db:emphasis>it</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>deserializeMapPair</db:methodname>
<db:methodparam>
<db:type>QVariant &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtProtobufPrivate::QProtobufSelfcheckIterator &amp;</db:type>
<db:parameter>it</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool deserializeMapPair(QVariant &amp;key, QVariant &amp;value, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;it) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function deserializes <db:link xlink:href="qmap.xml">QMap</db:link> pair of <db:code role="parameter">key</db:code> and <db:code role="parameter">value</db:code> from a QProtobufSelfcheckIterator <db:code role="parameter">it</db:code>. Returns <db:code>true</db:code> if deserialization was successful, otherwise <db:code>false</db:code>.</db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
<db:section xml:id="deserializeMessage">
<db:title>[override virtual] bool QProtobufSerializer::deserializeMessage(QProtobufMessage *<db:emphasis>message</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;<db:emphasis>ordering</db:emphasis>, QByteArrayView <db:emphasis>data</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>deserializeMessage</db:methodname>
<db:methodparam>
<db:type>QProtobufMessage *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrdering &amp;</db:type>
<db:parameter>ordering</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool deserializeMessage(QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering, QByteArrayView data) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractprotobufserializer.xml#deserializeMessage" role="function">QAbstractProtobufSerializer::deserializeMessage(QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering, QByteArrayView data) const</db:link>.</db:para>
<db:para>This is called by <db:link xlink:href="qabstractprotobufserializer.xml#deserialize">deserialize</db:link>() to deserialize a registered Protobuf message <db:code role="parameter">message</db:code> with <db:code role="parameter">ordering</db:code>, from a <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> <db:code role="parameter">data</db:code>. <db:code role="parameter">message</db:code> can be assumed to not be <db:code>nullptr</db:code>. Returns <db:code>true</db:code> if deserialization was successful, otherwise <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="deserializeObject">
<db:title>bool QProtobufSerializer::deserializeObject(QProtobufMessage *<db:emphasis>message</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;<db:emphasis>ordering</db:emphasis>, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;<db:emphasis>it</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>deserializeObject</db:methodname>
<db:methodparam>
<db:type>QProtobufMessage *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrdering &amp;</db:type>
<db:parameter>ordering</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtProtobufPrivate::QProtobufSelfcheckIterator &amp;</db:type>
<db:parameter>it</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool deserializeObject(QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering, QtProtobufPrivate::QProtobufSelfcheckIterator &amp;it) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deserialize an <db:code role="parameter">message</db:code> with <db:code role="parameter">ordering</db:code> from a QProtobufSelfcheckIterator <db:code role="parameter">it</db:code>. Returns <db:code>true</db:code> if deserialization was successful, otherwise <db:code>false</db:code>.</db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
<db:section xml:id="serializeEnum">
<db:title>QByteArray QProtobufSerializer::serializeEnum(QtProtobuf::int64 <db:emphasis>value</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;<db:emphasis>fieldInfo</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>serializeEnum</db:methodname>
<db:methodparam>
<db:type>QtProtobuf::int64</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;</db:type>
<db:parameter>fieldInfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray serializeEnum(QtProtobuf::int64 value, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;fieldInfo) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function serializes <db:code role="parameter">value</db:code> as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> for enum associated with property <db:code role="parameter">fieldInfo</db:code>.</db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
<db:section xml:id="serializeEnumList">
<db:title>QByteArray QProtobufSerializer::serializeEnumList(const QList&lt;QtProtobuf::int64&gt; &amp;<db:emphasis>value</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;<db:emphasis>fieldInfo</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>serializeEnumList</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QtProtobuf::int64&gt; &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;</db:type>
<db:parameter>fieldInfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray serializeEnumList(const QList&lt;QtProtobuf::int64&gt; &amp;value, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;fieldInfo) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function serializes a list, <db:code role="parameter">value</db:code>, as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> for enum associated with property <db:code role="parameter">fieldInfo</db:code>.</db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
<db:section xml:id="serializeListObject">
<db:title>QByteArray QProtobufSerializer::serializeListObject(const QProtobufMessage *<db:emphasis>message</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;<db:emphasis>ordering</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;<db:emphasis>fieldInfo</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>serializeListObject</db:methodname>
<db:methodparam>
<db:type>const QProtobufMessage *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrdering &amp;</db:type>
<db:parameter>ordering</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;</db:type>
<db:parameter>fieldInfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray serializeListObject(const QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;fieldInfo) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called to serialize <db:code role="parameter">message</db:code> as a part of list property with <db:code role="parameter">ordering</db:code> and <db:code role="parameter">fieldInfo</db:code>.</db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
<db:section xml:id="serializeMapPair">
<db:title>QByteArray QProtobufSerializer::serializeMapPair(const QVariant &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;<db:emphasis>fieldInfo</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>serializeMapPair</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;</db:type>
<db:parameter>fieldInfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray serializeMapPair(const QVariant &amp;key, const QVariant &amp;value, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;fieldInfo) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function serializes <db:link xlink:href="qmap.xml">QMap</db:link> pair of <db:code role="parameter">key</db:code> and <db:code role="parameter">value</db:code> with <db:code role="parameter">fieldInfo</db:code> to a <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
<db:section xml:id="serializeMessage">
<db:title>[override virtual] QByteArray QProtobufSerializer::serializeMessage(const QProtobufMessage *<db:emphasis>message</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;<db:emphasis>ordering</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>serializeMessage</db:methodname>
<db:methodparam>
<db:type>const QProtobufMessage *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrdering &amp;</db:type>
<db:parameter>ordering</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray serializeMessage(const QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractprotobufserializer.xml#serializeMessage" role="function">QAbstractProtobufSerializer::serializeMessage(const QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering) const</db:link>.</db:para>
<db:para>This is called by <db:link xlink:href="qabstractprotobufserializer.xml#serialize">serialize</db:link>() to serialize a registered Protobuf message <db:code role="parameter">message</db:code> with <db:code role="parameter">ordering</db:code>. <db:code role="parameter">message</db:code> must not be <db:code>nullptr</db:code>. Returns a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> containing the serialized message.</db:para>
</db:section>
<db:section xml:id="serializeObject">
<db:title>QByteArray QProtobufSerializer::serializeObject(const QProtobufMessage *<db:emphasis>message</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;<db:emphasis>ordering</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;<db:emphasis>fieldInfo</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>serializeObject</db:methodname>
<db:methodparam>
<db:type>const QProtobufMessage *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrdering &amp;</db:type>
<db:parameter>ordering</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;</db:type>
<db:parameter>fieldInfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray serializeObject(const QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering, const QtProtobufPrivate::QProtobufPropertyOrderingInfo &amp;fieldInfo) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Serialize an <db:code role="parameter">message</db:code> with <db:code role="parameter">ordering</db:code> and <db:code role="parameter">fieldInfo</db:code>. Returns a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> containing the serialized message.</db:para>
<db:para>You should not call this function directly.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qRegisterProtobufEnumType">
<db:title>void qRegisterProtobufEnumType()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qRegisterProtobufEnumType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qRegisterProtobufEnumType()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers serializers for enumeration type <db:code>T</db:code> in <db:link xlink:href="qtprotobuf-module.xml">QtProtobuf</db:link> global serializers registry.</db:para>
<db:para>This function is normally called by generated code.</db:para>
</db:section>
<db:section xml:id="qRegisterProtobufMapType">
<db:title>void qRegisterProtobufMapType()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qRegisterProtobufMapType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qRegisterProtobufMapType()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers a Protobuf map type <db:code>K</db:code> and <db:code>V</db:code>. <db:code>V</db:code> must be a <db:link xlink:href="qprotobufmessage.xml">QProtobufMessage</db:link>. This function is normally called by generated code.</db:para>
</db:section>
<db:section xml:id="qRegisterProtobufType">
<db:title>void qRegisterProtobufType()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qRegisterProtobufType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qRegisterProtobufType()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers a Protobuf type <db:emphasis>T</db:emphasis>. This function is normally called by generated code.</db:para>
</db:section>
</db:section>
</db:article>
