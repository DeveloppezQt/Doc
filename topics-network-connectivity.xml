<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Networking and Connectivity</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's network and connectivity features.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides classes for both high-level and low-level network communication, classes for web integration, and classes for inter-process communication (IPC).</db:para>
<db:para>For high-level network traffic, <db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link> provides an abstraction layer over the operations used, showing only high-level classes and functions. Qt Network can also handle lower level protocols like TCP and UDP. Classes like <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> and <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> enable the developer to send and receive messages using the TCP or UDP protocol. Name resolution is done with <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link>. <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> is called before creating a network connection with <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> or <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link>. Filtering and redistributing network traffic via proxies can be handled by the <db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link> class.</db:para>
<db:para>Qt provides <db:emphasis>connectivity</db:emphasis> options to connect systems or applications using modules like <db:link xlink:href="qtbluetooth-index.xml">Qt Bluetooth</db:link>, which provides connectivity between Bluetooth enabled devices. <db:link xlink:href="qtserialbus-index.xml">Qt Serial Bus</db:link> provides classes and functions to access the various industrial serial buses and protocols, and <db:link xlink:href="qtnfc-index.xml">Qt NFC</db:link> provides connectivity between NFC enabled devices. Also, <db:link xlink:href="qtserialport-index.xml">Qt Serial Port</db:link> provides the basic functionality, including configuring, I/O operations, and getting and setting the control signals of the RS-232 pinouts.</db:para>
<db:para>Qt offers functionalities for <db:link xlink:href="ipc.xml">Inter-Process Communication</db:link>. The class <db:link xlink:href="qprocess.xml">QProcess</db:link> is used to start external programs. <db:link xlink:href="qtdbus-index.xml">Qt D-Bus</db:link> provides support for D-Bus, an inter-process communication and remote procedure calling mechanism. It communicates via a central server application called a bus. However, it is also possible to let applications communicate directly with each other. <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> provides access to a shared memory segment by multiple threads and processes. However, a single process can exclusively lock that shared memory.</db:para>
<db:section xml:id="network-communication">
<db:title>Network Communication</db:title>
<db:para>Qt supports a wide range of network communication, with a focus on HTTP, TCP, and UDP.</db:para>
<db:para>At the HTTP level, the <db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link> module offers the network access API, which consists mainly of <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>, <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>, and <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> resembles an HTTP request, which gets passed to the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> to send the request on the wire; this class returns a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>, which enables parsing the HTTP reply. The network access API internally uses the socket classes mentioned below (for TCP and SSL).</db:para>
<db:para><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>, <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link>, and <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link> should be used for communication at the socket level. These classes offer a synchronous API through the waitFor* methods as well as an asynchronous API; if possible (that is if the event loop is running), the asynchronous API should always be preferred. Qt also offers <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link> to enable the server-side part of a TCP communication.</db:para>
<db:para>For secure communication via SSL, Qt Network offers a wide range of classes alongside the central <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>. For example, <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link>, <db:link xlink:href="qsslconfiguration.xml">QSslConfiguration</db:link>, and <db:link xlink:href="qsslerror.xml">QSslError</db:link>.</db:para>
<db:para>Qt also offers HTTP support in QML by either using HTTP explicitly via XmlHttpRequest, or by transparently using HTTP URLs in Image sources for example.</db:para>
<db:para>Related Topics:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtnetwork-programming.xml">Network Programming with Qt</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="ssl.xml">Secure Sockets Layer (SSL) Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-documents-networktransparency.xml">Resource Loading and Network Transparency</db:link> - network and URL transparency in QML</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtnetworkauth-index.xml">Qt Network Authorization</db:link> - set of APIs that enable Qt applications to obtain limited access to online accounts and HTTP services without exposing users' passwords.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-index.xml">Qt Remote Objects</db:link> - an inter-process communication (IPC) module that enables information exchange between processes or computers.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtmqtt-index.xml">Qt MQTT</db:link> - machine-to-machine (M2M) protocol that uses the publish-and-subscribe paradigm to provide a channel with minimal communication overhead.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtopcua-index.xml">Qt OPC UA</db:link> - server that offers access to data that is organized in a mesh of nodes connected by references. The use of different reference types and nodes containing metadata enables a client to navigate and interpret the data without knowing their structure in advance.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebsockets-index.xml">Qt WebSockets</db:link> - web-based protocol designed to enable a two-way interactive communication session between a client application and a remote host. It enables the two entities to send data back and forth if the initial handshake succeeds.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebchannel-index.xml">Qt WebChannel</db:link> - enables peer-to-peer communication between a server (QML/C++ application) and a client (HTML/JavaScript or QML application). It is supported out of the box by Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link>. In addition, it can work on all browsers that support WebSockets, enabling Qt WebChannel clients to run in any JavaScript environment (including QML). This requires implementing a custom transport based on Qt WebSockets.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtprotobuf-index.xml">Qt Protobuf</db:link> - a generator that can be used to generate Qt-based classes from <db:code>.proto</db:code> files.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtgrpc-index.xml">Qt GRPC</db:link> - allows you to define data and messages in proto files and then use the code generators, which generate code allowing accessors for fields and gRPC services in the Qt framework.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="connectivity">
<db:title>Connectivity</db:title>
<db:para>Qt supports a range of connectivity options, with a focus on <db:link xlink:href="qtserialbus-index.xml">Qt Serial Bus</db:link>, <db:link xlink:href="qtserialport-index.xml">Qt Serial Port</db:link>, <db:link xlink:href="qtbluetooth-index.xml">Qt Bluetooth</db:link> and <db:link xlink:href="qtnfc-index.xml">Qt NFC</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtserialbus-index.xml">Qt Serial Bus</db:link> - provides classes and functions to access the various industrial serial buses and protocols, such as CAN, ModBus, and others.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtserialport-index.xml">Qt Serial Port</db:link> - provides the basic functionality, which includes configuring, I/O operations, getting and setting the control signals of the RS-232 pinouts.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtbluetooth-index.xml">Qt Bluetooth</db:link> - provides classes and functions to use Bluetooth devices, which includes scanning for devices, gathering information, and exchanging data between them. Qt Bluetooth supports both Classic and Low Energy Bluetooth technologies.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtnfc-index.xml">Qt NFC</db:link> - provides classes and functions to establish connectivity between NFC enabled devices. NFC is a short-range (less than 20 centimeters) wireless technology with a maximum transfer rate of 424 Kbps. NFC is ideal for transferring small packets of data when two devices are placed together.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Related Topics:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="ipc.xml">Inter-Process Communication</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtdbus-index.xml">Qt D-Bus</db:link> - module documentation</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="usingadaptors.xml">Using Qt D-Bus Adaptors</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusdeclaringsignals.xml">Declaring Signals in D-Bus Adaptors</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusdeclaringslots.xml">Declaring Slots in D-Bus Adaptors</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbustypesystem.xml">The Qt D-Bus Type System</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusxml2cpp.xml">Qt D-Bus XML compiler (qdbusxml2cpp)</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
