<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Networking and Connectivity</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's network and connectivity features.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides classes for both high-level and low-level network communication, classes for web integration, and classes for interprocess communication.</db:para>
<db:para>For high-level network traffic, <db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link> provides an abstraction layer over the operations used, showing only high-level classes and functions. Qt Network can also handle lower level protocols like TCP and UDP. Classes like <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> and <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> enable the developer to send and receive messages using the TCP or UDP protocol.Name resolution is done with <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link>. <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> is called before creating a network connection with <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> or <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link>. Filtering and redistributing network traffic via proxies can handled by the QNetWorkProxy class.</db:para>
<db:para>Qt also offers functionalities for <db:emphasis>inter-process communication</db:emphasis> (IPC). The class <db:link xlink:href="qprocess.xml">QProcess</db:link> is used to start external programs. <db:link xlink:href="qtdbus-index.xml">Qt D-Bus</db:link> provides support for D-Bus, an interprocess communication and remoteprocedure calling mechanism. It mostly communicates via a central server application, called a bus. However, it is also possible to let applications communicate directly with each other. <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> provides access to a shared memory segment by multiple threads and processes. It is however also possible for a single process to exclusively lock that shared memory.</db:para>
<db:section xml:id="network-communication">
<db:title>Network Communication</db:title>
<db:para>Qt supports a wide range of network communication, with a focus on HTTP, TCP, and UDP.</db:para>
<db:para>At the HTTP level, the <db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link> module offers the network access API, which consists mainly of <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>, <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>, and <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. Put simply, the <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> resembles an HTTP request, which gets passed to the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> to send the request on the wire; this class returns a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>, which enables parsing the HTTP reply. The network access API uses the socket classes mentioned below (for TCP and SSL) internally.</db:para>
<db:para>For communication at the socket level, <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>, <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> and <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link> should be used. These classes offer a synchronous API through the waitFor* methods as well as an asynchronous API; if possible (i.e. if the event loop is running), the asynchronous API should always be preferred. Qt also offers <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link> to enable the server-side part of a TCP communication. Please note that there is no HTTP server class in Qt.</db:para>
<db:para>For secure communication via SSL, Qt Network offers a wide range of classes alongside the central <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>, e.g. <db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link>, <db:link xlink:href="qsslconfiguration.xml">QSslConfiguration</db:link> and <db:link xlink:href="qsslerror.xml">QSslError</db:link>. The only supported backend for SSL in Qt is OpenSSL, which needs to be installed separately.</db:para>
<db:para>Qt also offers HTTP support in QML by either using HTTP explicitly via XmlHttpRequest, or by transparently using HTTP URLs in e.g. Image sources.</db:para>
<db:para>Related Topics:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link> - module documentation</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="network.xml">Network Programming API</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtnetwork-programming.xml">Network Programming with Qt</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtnetwork-module.xml">Qt Network C++ Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="ssl.xml">Secure Sockets Layer (SSL) Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-documents-networktransparency.xml">Resource Loading and Network Transparency</db:link> - network and URL transparency in QML</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inter-process-communication">
<db:title>Inter-Process Communication</db:title>
<db:para>Qt provides several ways to implement Inter-Process Communication (IPC) in Qt applications.</db:para>
<db:para>The cross-platform <db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link> module provides classes that make network programming portable and easy. It offers high-level classes (e.g., <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>) that communicate using specific application-level protocols, and lower-level classes (e.g., <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>, <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link>, <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>) for implementing protocols.</db:para>
<db:para>The cross-platform shared memory class, <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link>, provides access to the operating system's shared memory implementation. It allows safe access to shared memory segments by multiple threads and processes. Additionally, <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> can be used to control access to resources shared by the system, as well as to communicate between processes.</db:para>
<db:para>The <db:link xlink:href="qtdbus-index.xml">Qt D-Bus</db:link> module is a cross-platform library you can use to implement IPC using the D-Bus protocol. It extends Qt's <db:link xlink:href="signalsandslots.xml">signals and slots</db:link> mechanism to the IPC level, allowing a signal emitted by one process to be connected to a slot in another process.</db:para>
<db:para>The cross-platform class <db:link xlink:href="qprocess.xml">QProcess</db:link> can be used to start external programs as child processes, and to communicate with them. It provides an API for monitoring and controlling the state of the child process. <db:link xlink:href="qprocess.xml">QProcess</db:link> gives access to the input/output channels of child process by inheriting from <db:link xlink:href="qiodevice.xml">QIODevice</db:link>.</db:para>
<db:para>The <db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link> class provides a local socket. On Windows this is a named pipe and on Unix this is a local domain socket. The <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> class provides a local socket based server. This class makes it possible to accept incoming local socket connections.</db:para>
<db:para>Related Topics:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtdbus-index.xml">Qt D-Bus</db:link> - module documentation</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="usingadaptors.xml">Using Qt D-Bus Adaptors</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusdeclaringsignals.xml">Declaring Signals in D-Bus Adaptors</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusdeclaringslots.xml">Declaring Slots in D-Bus Adaptors</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbustypesystem.xml">The Qt D-Bus Type System</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusxml2cpp.xml">Qt D-Bus XML compiler (qdbusxml2cpp)</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
