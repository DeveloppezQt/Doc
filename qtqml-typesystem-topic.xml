<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The QML Type System</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of the QML type system.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The types which may be used in the definition of an object hierarchy in a QML document can come from various sources. They may be:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>provided natively by the QML language</db:para>
</db:listitem>
<db:listitem>
<db:para>registered via C++ by QML modules</db:para>
</db:listitem>
<db:listitem>
<db:para>provided as QML documents by QML modules</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Furthermore, application developers can provide their own types, either by registering C++ types directly, or by defining reusable components in QML documents which can then be imported.</db:para>
<db:para>Wherever the type definitions come from, the engine will enforce type-safety for properties and instances of those types.</db:para>
<db:section xml:id="basic-types">
<db:title>Basic Types</db:title>
<db:para>The QML language has built-in support for various primitive types including integers, double-precision floating point numbers, strings, and boolean values. Objects may have properties of these types, and values of these types may be passed as arguments to methods of objects.</db:para>
<db:para>See the <db:link xlink:href="qtqml-typesystem-basictypes.xml">QML Basic Types</db:link> documentation for more information about basic types.</db:para>
</db:section>
<db:section xml:id="javascript-types">
<db:title>JavaScript Types</db:title>
<db:para>JavaScript objects and arrays are supported by the QML engine. Any standard JavaScript type can be created and stored using the generic <db:link xlink:href="qml-var.xml">var</db:link> type.</db:para>
<db:para>For example, the standard Date and Array types are available, as below:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    property var theArray: []
    property var theDate: new Date()

    Component.onCompleted: {
        for (var i = 0; i &amp;lt; 10; i++)
            theArray.push(&quot;Item &quot; + i)
        console.log(&quot;There are&quot;, theArray.length, &quot;items in the array&quot;)
        console.log(&quot;The time is&quot;, theDate.toUTCString())
    }
}
</db:programlisting>
<db:para>See <db:link xlink:href="qtqml-javascript-expressions.xml">JavaScript Expressions in QML Documents</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="qml-object-types">
<db:title>QML Object Types</db:title>
<db:para>A QML object type is a type from which a QML object can be instantiated. QML object types are derived from <db:link xlink:href="qml-qtqml-qtobject.xml">QtObject</db:link>, and are provided by QML modules. Applications can import these modules to use the object types they provide. The QtQuick module provides the most common object types needed to create user interfaces in QML.</db:para>
<db:para>Finally, every QML document implicitly defines a QML object type, which can be re-used in other QML documents. See the documentation about <db:link xlink:href="qtqml-typesystem-objecttypes.xml">object types in the QML type system</db:link> for in-depth information about object types.</db:para>
</db:section>
</db:article>
