<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDomDocumentFragment Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link> class is a tree of QDomNodes which is not usually a complete <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDomDocumentFragment</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Xml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Xml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdomnode.xml" xlink:role="class">QDomNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDomDocumentFragment is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>If you want to do complex tree operations it is useful to have a lightweight class to store nodes and their relations. <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link> stores a subtree of a document which does not necessarily represent a well-formed XML document.</db:para>
<db:para><db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link> is also useful if you want to group several nodes in a list and insert them all together as children of some node. In these cases <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link> can be used as a temporary container for this list of children.</db:para>
<db:para>The most important feature of <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link> is that it is treated in a special way by <db:link xlink:href="qdomnode.xml#insertAfter">QDomNode::insertAfter</db:link>(), <db:link xlink:href="qdomnode.xml#insertBefore">QDomNode::insertBefore</db:link>(), <db:link xlink:href="qdomnode.xml#replaceChild">QDomNode::replaceChild</db:link>() and <db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>(): instead of inserting the fragment itself, all the fragment's children are inserted.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDomDocumentFragment">
<db:title>QDomDocumentFragment::QDomDocumentFragment()</db:title>
<db:constructorsynopsis>
<db:methodname>QDomDocumentFragment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomDocumentFragment()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty document fragment.</db:para>
</db:section>
<db:section xml:id="QDomDocumentFragment-1">
<db:title>QDomDocumentFragment::QDomDocumentFragment(const QDomDocumentFragment &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDomDocumentFragment</db:methodname>
<db:methodparam>
<db:type>const QDomDocumentFragment &amp;</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomDocumentFragment(const QDomDocumentFragment &amp;x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">x</db:code>.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
<db:section xml:id="nodeType">
<db:title>QDomNode::NodeType QDomDocumentFragment::nodeType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDomNode::NodeType</db:type>
<db:methodname>nodeType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode::NodeType nodeType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>DocumentFragment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isDocumentFragment">isDocumentFragment</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toDocumentFragment">QDomNode::toDocumentFragment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDomDocumentFragment &amp;QDomDocumentFragment::operator=(const QDomDocumentFragment &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomDocumentFragment &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDomDocumentFragment &amp;</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomDocumentFragment &amp; operator=(const QDomDocumentFragment &amp;x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">x</db:code> to this DOM document fragment.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
