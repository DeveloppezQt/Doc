<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlName Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlname.xml">QXmlName</db:link> class represents the name of an XML node, in an efficient, namespace-aware way. <db:link xlink:href="qxmlname.xml">QXmlName</db:link> represents the name of an XML node in a way that is both efficient and safe for comparing names. Normally, an XML node represents an XML element or attribute, but <db:link xlink:href="qxmlname.xml">QXmlName</db:link> can also represent the names of other kinds of nodes, e.g., <db:link xlink:href="qabstractxmlreceiver.xml#processingInstruction">QAbstractXmlReceiver::processingInstruction</db:link>() and <db:link xlink:href="qabstractxmlreceiver.xml#namespaceBinding">QAbstractXmlReceiver::namespaceBinding</db:link>().</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlName</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlName is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The name of an XML node has three components: The <db:emphasis>namespace URI</db:emphasis>, the <db:emphasis>local name</db:emphasis>, and the <db:emphasis>prefix</db:emphasis>. To see what these refer to in XML, consider the following snippet.</db:para>
<db:programlisting language="cpp">&amp;lt;book xmlns:dc='http://purl.org/dc/elements/1.1'
      xmlns='http://example.com/MyDefault'&amp;gt;
    &amp;lt;dc:title&amp;gt;Mobey Dick&amp;lt;/dc:title&amp;gt; ...
&amp;lt;/book&amp;gt;
</db:programlisting>
<db:para>For the element named <db:emphasis>book</db:emphasis>, <db:link xlink:href="qxmlname.xml#localName">localName</db:link>() returns <db:emphasis>book</db:emphasis>, <db:link xlink:href="qxmlname.xml#namespaceUri">namespaceUri</db:link>() returns <db:emphasis>http://example.com/MyDefault</db:emphasis>, and <db:link xlink:href="qxmlname.xml#prefix">prefix</db:link>() returns an empty string. For the element named <db:emphasis>title</db:emphasis>, <db:link xlink:href="qxmlname.xml#localName">localName</db:link>() returns <db:emphasis>title</db:emphasis>, <db:link xlink:href="qxmlname.xml#namespaceUri">namespaceUri</db:link>() returns <db:emphasis>http://purl.org/dc/elements/1.1</db:emphasis>, and <db:link xlink:href="qxmlname.xml#prefix">prefix</db:link>() returns <db:emphasis>dc</db:emphasis>.</db:para>
<db:para>To ensure that operations with <db:link xlink:href="qxmlname.xml">QXmlName</db:link> are efficient, e.g., copying names and comparing them, each instance of <db:link xlink:href="qxmlname.xml">QXmlName</db:link> is associated with a <db:link xlink:href="qxmlnamepool.xml">name pool</db:link>, which must be specified at <db:link xlink:href="qxmlname.xml">QXmlName</db:link> construction time. The three components of the <db:link xlink:href="qxmlname.xml">QXmlName</db:link>, i.e., the namespace URI, the local name, and the prefix, are stored in the name pool mapped to identifiers so they can be shared. For this reason, the only way to create a valid instance of <db:link xlink:href="qxmlname.xml">QXmlName</db:link> is to use the class constructor, where the <db:link xlink:href="qxmlnamepool.xml">name pool</db:link>, local name, namespace URI, and prefix must all be specified.</db:para>
<db:para>Note that <db:link xlink:href="qxmlname.xml">QXmlName</db:link>'s default constructor constructs a null instance. It is typically used for allocating unused entries in collections of <db:link xlink:href="qxmlname.xml">QXmlName</db:link>.</db:para>
<db:para>A side effect of associating each instance of <db:link xlink:href="qxmlname.xml">QXmlName</db:link> with a <db:link xlink:href="qxmlnamepool.xml">name pool</db:link> is that each instance of <db:link xlink:href="qxmlname.xml">QXmlName</db:link> is tied to the <db:link xlink:href="qxmlnamepool.xml">QXmlNamePool</db:link> with which it was created. However, the <db:link xlink:href="qxmlname.xml">QXmlName</db:link> class does not keep track of the name pool, so all the accessor functions, e.g., <db:link xlink:href="qxmlname.xml#namespaceUri">namespaceUri</db:link>(), <db:link xlink:href="qxmlname.xml#prefix">prefix</db:link>(), <db:link xlink:href="qxmlname.xml#localName">localName</db:link>(), and <db:link xlink:href="qxmlname.xml#toClarkName">toClarkName</db:link>() require that the correct name pool be passed to them. Failure to provide the correct name pool to these accessor functions results in undefined behavior.</db:para>
<db:para>Note that a <db:link xlink:href="qxmlnamepool.xml">name pool</db:link> is <db:emphasis>not</db:emphasis> an XML namespace. One <db:link xlink:href="qxmlnamepool.xml">name pool</db:link> can represent instances of <db:link xlink:href="qxmlname.xml">QXmlName</db:link> from different XML namespaces, and the instances of <db:link xlink:href="qxmlname.xml">QXmlName</db:link> from one XML namespace can be distributed over multiple <db:link xlink:href="qxmlnamepool.xml">name pools</db:link>.</db:para>
<db:section xml:id="comparing-qxmlnames">
<db:title>Comparing QXmlNames</db:title>
<db:para>To determine what a <db:link xlink:href="qxmlname.xml">QXmlName</db:link> refers to, the <db:emphasis>namespace URI</db:emphasis> and the <db:emphasis>local name</db:emphasis> are used. The <db:emphasis>prefix</db:emphasis> is not used because the prefix is simply a shorthand name for use in place of the normally much longer namespace URI. Nor is the prefix used in name comparisons. For example, the following two element nodes represent the same element and compare equal.</db:para>
<db:programlisting language="cpp">&amp;lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;/&amp;gt;
</db:programlisting>
<db:programlisting language="cpp">&amp;lt;x:svg xmlns:x=&quot;http://www.w3.org/2000/svg&quot;/&amp;gt;
</db:programlisting>
<db:para>Although the second name has the prefix <db:emphasis>x</db:emphasis>, the two names compare equal as instances of <db:link xlink:href="qxmlname.xml">QXmlName</db:link>, because the prefix is not used in the comparison.</db:para>
<db:para>A local name can never be an empty string, although the prefix and namespace URI can. If the prefix is not empty, the namespace URI cannot be empty. Local names and prefixes must be valid <db:link xlink:href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">NCNames</db:link>, e.g., <db:emphasis>abc.def</db:emphasis> or <db:emphasis>abc123</db:emphasis>.</db:para>
<db:para><db:link xlink:href="qxmlname.xml">QXmlName</db:link> represents what is sometimes called an <db:emphasis>expanded QName</db:emphasis>, or simply a QName.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">Namespaces in XML 1.0 (Second Edition), [4] NCName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlName">
<db:title>QXmlName::QXmlName()</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlName()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an uninitialized <db:link xlink:href="qxmlname.xml">QXmlName</db:link>. To build a valid <db:link xlink:href="qxmlname.xml">QXmlName</db:link>, you normally use the other constructor, which takes a <db:link xlink:href="qxmlnamepool.xml">name pool</db:link>, namespace URI, local name, and prefix as parameters. But you can also use this constructor to build a null <db:link xlink:href="qxmlname.xml">QXmlName</db:link> and then assign an existing <db:link xlink:href="qxmlname.xml">QXmlName</db:link> to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlname.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QXmlName-1">
<db:title>QXmlName::QXmlName(QXmlNamePool &amp;<db:emphasis>namePool</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>, const QString &amp;<db:emphasis>namespaceURI</db:emphasis> = QString(), const QString &amp;<db:emphasis>prefix</db:emphasis> = QString())</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlName</db:methodname>
<db:methodparam>
<db:type>QXmlNamePool &amp;</db:type>
<db:parameter>namePool</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>localName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceURI</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>prefix</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlName(QXmlNamePool &amp;namePool, const QString &amp;localName, const QString &amp;namespaceURI, const QString &amp;prefix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qxmlname.xml">QXmlName</db:link> instance that inserts <db:code role="parameter">localName</db:code>, <db:code role="parameter">namespaceURI</db:code> and <db:code role="parameter">prefix</db:code> into <db:code role="parameter">namePool</db:code> if they aren't already there. The accessor functions <db:link xlink:href="qxmlname.xml#namespaceUri">namespaceUri</db:link>(), <db:link xlink:href="qxmlname.xml#prefix">prefix</db:link>(), <db:link xlink:href="qxmlname.xml#localName">localName</db:link>(), and <db:link xlink:href="qxmlname.xml#toClarkName">toClarkName</db:link>() must be passed the <db:code role="parameter">namePool</db:code> used here, so the <db:code role="parameter">namePool</db:code> must remain in scope while the accessor functions might be used. However, two instances can be compared with <db:emphasis>==</db:emphasis> or <db:emphasis>!=</db:emphasis> and copied without the <db:code role="parameter">namePool</db:code>.</db:para>
<db:para>The user guarantees that the string components are valid for a QName. In particular, the local name, and the prefix (if present), must be valid <db:link xlink:href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">NCNames</db:link>. The function <db:link xlink:href="qxmlname.xml#isNCName">isNCName</db:link>() can be used to test validity of these names. The namespace URI should be an absolute URI. <db:link xlink:href="qurl.xml#isRelative">QUrl::isRelative</db:link>() can be used to test whether the namespace URI is relative or absolute. Finally, providing a prefix is not valid when no namespace URI is provided.</db:para>
<db:para><db:code role="parameter">namePool</db:code> is not copied. Nor is the reference to it retained in this instance. This constructor inserts the three strings into <db:code role="parameter">namePool</db:code>.</db:para>
</db:section>
<db:section xml:id="QXmlName-2">
<db:title>[since 5.9] QXmlName::QXmlName(const QXmlName &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlName</db:methodname>
<db:methodparam>
<db:type>const QXmlName &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlName(const QXmlName &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlname.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromClarkName">
<db:title>[static, since 4.5] QXmlName QXmlName::fromClarkName(const QString &amp;<db:emphasis>clarkName</db:emphasis>, const QXmlNamePool &amp;<db:emphasis>namePool</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QXmlName</db:type>
<db:methodname>fromClarkName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clarkName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QXmlNamePool &amp;</db:type>
<db:parameter>namePool</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlName fromClarkName(const QString &amp;clarkName, const QXmlNamePool &amp;namePool)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts <db:code role="parameter">clarkName</db:code> into a <db:link xlink:href="qxmlname.xml">QXmlName</db:link>, inserts into <db:code role="parameter">namePool</db:code>, and returns it.</db:para>
<db:para>A clark name is a way to present a full QName with only one string, where the namespace cannot contain braces. Here are a couple of examples:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Clark Name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>html</db:code></db:para>
</db:td>
<db:td>
<db:para>The local name <db:code>html</db:code>, in no namespace</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>http://www.w3.org/1999/xhtml</db:code>html</db:para>
</db:td>
<db:td>
<db:para>The local name <db:code>html</db:code>, in the XHTML namespace</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>http://www.w3.org/1999/xhtml</db:code>my:html</db:para>
</db:td>
<db:td>
<db:para>The local name <db:code>html</db:code>, in the XHTML namespace, with the prefix <db:code>my</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the namespace contains braces, the returned value is either invalid or has undefined content.</db:para>
<db:para>If <db:code role="parameter">clarkName</db:code> is an invalid name, a default constructed <db:link xlink:href="qxmlname.xml">QXmlName</db:link> is returned.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlname.xml#toClarkName">toClarkName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNCName">
<db:title>[static] bool QXmlName::isNCName(const QString &amp;<db:emphasis>candidate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNCName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>candidate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNCName(const QString &amp;candidate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">candidate</db:code> is an <db:code>NCName</db:code>. An <db:code>NCName</db:code> is a string that can be used as a name in XML and XQuery, e.g., the prefix or local name in an element or attribute, or the name of a variable.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">Namespaces in XML 1.0 (Second Edition), [4] NCName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QXmlName::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qxmlname.xml">QXmlName</db:link> is not initialized with a valid combination of <db:emphasis>namespace URI</db:emphasis>, <db:emphasis>local name</db:emphasis>, and <db:emphasis>prefix</db:emphasis>.</db:para>
<db:para>A valid local name is always required. The prefix and namespace URI can be empty, but if the prefix is not empty, the namespace URI must not be empty. Local names and prefixes must be valid <db:link xlink:href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">NCNames</db:link>, e.g., <db:emphasis>abc.def</db:emphasis> or <db:emphasis>abc123</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="localName">
<db:title>QString QXmlName::localName(const QXmlNamePool &amp;<db:emphasis>namePool</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>localName</db:methodname>
<db:methodparam>
<db:type>const QXmlNamePool &amp;</db:type>
<db:parameter>namePool</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString localName(const QXmlNamePool &amp;namePool) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the local name.</db:para>
<db:para>Note that for efficiency, the local name string is not stored in the <db:link xlink:href="qxmlname.xml">QXmlName</db:link> but in the <db:link xlink:href="qxmlnamepool.xml">QXmlNamePool</db:link> that was passed to the constructor. Hence, that same <db:code role="parameter">namePool</db:code> must be passed to this function, so it can be used for looking up the local name.</db:para>
</db:section>
<db:section xml:id="namespaceUri">
<db:title>QString QXmlName::namespaceUri(const QXmlNamePool &amp;<db:emphasis>namePool</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>namespaceUri</db:methodname>
<db:methodparam>
<db:type>const QXmlNamePool &amp;</db:type>
<db:parameter>namePool</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString namespaceUri(const QXmlNamePool &amp;namePool) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the namespace URI.</db:para>
<db:para>Note that for efficiency, the namespace URI string is not stored in the <db:link xlink:href="qxmlname.xml">QXmlName</db:link> but in the <db:link xlink:href="qxmlnamepool.xml">QXmlNamePool</db:link> that was passed to the constructor. Hence, that same <db:code role="parameter">namePool</db:code> must be passed to this function, so it can be used for looking up the namespace URI.</db:para>
</db:section>
<db:section xml:id="prefix">
<db:title>QString QXmlName::prefix(const QXmlNamePool &amp;<db:emphasis>namePool</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>prefix</db:methodname>
<db:methodparam>
<db:type>const QXmlNamePool &amp;</db:type>
<db:parameter>namePool</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString prefix(const QXmlNamePool &amp;namePool) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the prefix.</db:para>
<db:para>Note that for efficiency, the prefix string is not stored in the <db:link xlink:href="qxmlname.xml">QXmlName</db:link> but in the <db:link xlink:href="qxmlnamepool.xml">QXmlNamePool</db:link> that was passed to the constructor. Hence, that same <db:code role="parameter">namePool</db:code> must be passed to this function, so it can be used for looking up the prefix.</db:para>
</db:section>
<db:section xml:id="toClarkName">
<db:title>QString QXmlName::toClarkName(const QXmlNamePool &amp;<db:emphasis>namePool</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toClarkName</db:methodname>
<db:methodparam>
<db:type>const QXmlNamePool &amp;</db:type>
<db:parameter>namePool</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toClarkName(const QXmlNamePool &amp;namePool) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this <db:link xlink:href="qxmlname.xml">QXmlName</db:link> formatted as a Clark Name. For example, if the local name is <db:code>html</db:code>, the prefix is <db:code>x</db:code>, and the namespace URI is <db:code>http://www.w3.org/1999/xhtml/</db:code>, then the Clark Name returned is:</db:para>
<db:programlisting language="cpp">{http://www.w3.org/1999/xhtml/}x:html.
</db:programlisting>
<db:para>If the local name is <db:emphasis>MyWidget</db:emphasis> and the namespace is empty, the Clark Name returned is:</db:para>
<db:programlisting language="cpp">MyWidget
</db:programlisting>
<db:para>Note that for efficiency, the namespace URI, local name, and prefix strings are not stored in the <db:link xlink:href="qxmlname.xml">QXmlName</db:link> but in the <db:link xlink:href="qxmlnamepool.xml">QXmlNamePool</db:link> that was passed to the constructor. Hence, that same <db:code role="parameter">namePool</db:code> must be passed to this function, so it can be used for looking up the three string components.</db:para>
<db:para>This function can be useful for debugging.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.jclark.com/xml/xmlns.htm">XML Namespaces, James Clark</db:link></db:member>
<db:member><db:link xlink:href="qxmlname.xml#fromClarkName">fromClarkName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QXmlName::operator!=(const QXmlName &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QXmlName &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QXmlName &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qxmlname.xml">QXmlName</db:link> is <db:emphasis>not</db:emphasis> equal to <db:code role="parameter">other</db:code>; otherwise false. Two QXmlNames are equal if their namespace URIs are the same <db:emphasis>and</db:emphasis> their local names are the same. They are not equal if either their namespace URIs differ or their local names differ. Their prefixes are ignored.</db:para>
<db:para>Note that it is meaningless to compare two instances of <db:link xlink:href="qxmlname.xml">QXmlName</db:link> that were created with different <db:link xlink:href="qxmlnamepool.xml">name pools</db:link>, but the attempt is not detected and the behavior is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlname.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QXmlName &amp;QXmlName::operator=(const QXmlName &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QXmlName &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QXmlName &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlName &amp; operator=(const QXmlName &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to <db:emphasis>this</db:emphasis> and returns <db:emphasis>this</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QXmlName::operator==(const QXmlName &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QXmlName &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QXmlName &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qxmlname.xml">QXmlName</db:link> is equal to <db:code role="parameter">other</db:code>; otherwise false. Two QXmlNames are equal if their namespace URIs are the same <db:emphasis>and</db:emphasis> their local names are the same. The prefixes are ignored.</db:para>
<db:para>Note that it is meaningless to compare two instances of <db:link xlink:href="qxmlname.xml">QXmlName</db:link> that were created with different <db:link xlink:href="qxmlnamepool.xml">name pools</db:link>, but the attempt is not detected and the behavior is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlname.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash">
<db:title>[since 4.4] uint qHash(const QXmlName &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>const QXmlName &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qHash(const QXmlName &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Computes a hash key from the local name and the namespace URI in <db:code role="parameter">name</db:code>. The prefix in <db:code role="parameter">name</db:code> is not used in the computation.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
</db:section>
</db:article>
