<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Sensors - C++ Sensor Gestures Example</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The sensor gesture example demonstrates the steps for creating a C++ application that uses sensor gestures and the included shake sensor.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtSensors module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtCore/QDebug&amp;gt;
#include &amp;lt;QtWidgets/QTreeWidget&amp;gt;

#include &quot;mainwindow.h&quot;
#include &quot;ui_mainwindow.h&quot;

#include &amp;lt;qsensorgesture.h&amp;gt;
#include &amp;lt;qsensorgesturemanager.h&amp;gt;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent),
      ui(new Ui::MainWindow)
{
    ui-&amp;gt;setupUi(this);

    QSensorGestureManager manager;

    Q_FOREACH (const QString &amp;amp;gesture, manager.gestureIds()) {

        QTreeWidgetItem *gestureId = new QTreeWidgetItem(ui-&amp;gt;treeWidget);
        QStringList recognizerSignals =  manager.recognizerSignals(gesture);
        gestureId-&amp;gt;setText(0,gesture);

        for (int i = 0; i &amp;lt; recognizerSignals.count(); i++) {
            QTreeWidgetItem *oneSignal = new QTreeWidgetItem(gestureId);
            oneSignal-&amp;gt;setText(0,recognizerSignals.at(i));
        }
        ui-&amp;gt;treeWidget-&amp;gt;insertTopLevelItem(0,gestureId);
    }

    ui-&amp;gt;textEdit-&amp;gt;setReadOnly(true);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::detectedShake(const QString &amp;amp;name)
{
    QString str = &quot;&amp;lt;font size=+2&amp;gt;&amp;lt;B&amp;gt;&quot;+name+&quot;&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;br&amp;gt;&quot;;
    ui-&amp;gt;textEdit-&amp;gt;insertHtml(str);
    ui-&amp;gt;textEdit-&amp;gt;ensureCursorVisible();
}

void MainWindow::on_pushButton_clicked()
{
    ui-&amp;gt;textEdit-&amp;gt;clear();
}

void MainWindow::onShake()
{
    QString str = &quot;&amp;lt;font size=+2&amp;gt;&amp;lt;B&amp;gt;onShake()&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;br&amp;gt;&quot;;
    ui-&amp;gt;textEdit-&amp;gt;insertHtml(str);
    ui-&amp;gt;textEdit-&amp;gt;ensureCursorVisible();
}

void MainWindow::on_startPushButton_clicked()
{
    if (ui-&amp;gt;treeWidget-&amp;gt;currentItem() == 0)
            return;
    QString currentRecognizer;

    if (ui-&amp;gt;treeWidget-&amp;gt;currentItem()-&amp;gt;childCount() == 0) {
        currentRecognizer = ui-&amp;gt;treeWidget-&amp;gt;currentItem()-&amp;gt;parent()-&amp;gt;text(0);
    } else {
        currentRecognizer = ui-&amp;gt;treeWidget-&amp;gt;currentItem()-&amp;gt;text(0);
    }

    if (recognizerMap.contains(currentRecognizer))
        return;
    QSensorGestureManager manager;
    QSensorGesture *thisGesture = new QSensorGesture(QStringList() &amp;lt;&amp;lt; currentRecognizer, this);

    if (currentRecognizer.contains(&quot;QtSensors.shake&quot;)) {
        connect(thisGesture,SIGNAL(shake()),
                this,SLOT(onShake()));
    }

    connect(thisGesture,SIGNAL(detected(QString)),
            this,SLOT(detectedShake(QString)));
    thisGesture-&amp;gt;startDetection();


    recognizerMap.insert(currentRecognizer,thisGesture);

    QString str = QString(&quot;&amp;lt;font size=+2&amp;gt;&amp;lt;B&amp;gt;Started %1&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;br&amp;gt;&quot;).arg(currentRecognizer);
    ui-&amp;gt;textEdit-&amp;gt;insertHtml(str);
    ui-&amp;gt;textEdit-&amp;gt;ensureCursorVisible();
}

void MainWindow::on_stopPushButton_clicked()
{
    if (ui-&amp;gt;treeWidget-&amp;gt;currentItem() == 0)
            return;
    QString currentRecognizer;

    if (ui-&amp;gt;treeWidget-&amp;gt;currentItem()-&amp;gt;childCount() == 0) {
        currentRecognizer = ui-&amp;gt;treeWidget-&amp;gt;currentItem()-&amp;gt;parent()-&amp;gt;text(0);
    } else {
        currentRecognizer = ui-&amp;gt;treeWidget-&amp;gt;currentItem()-&amp;gt;text(0);
    }

    if (!recognizerMap.contains(currentRecognizer))
        return;

        recognizerMap[currentRecognizer]-&amp;gt;stopDetection();

        if (currentRecognizer == &quot;QtSensors.shake&quot;) {
            disconnect(recognizerMap[currentRecognizer],SIGNAL(shake()),
                       this,SLOT(onShake()));
        }
        disconnect(recognizerMap[currentRecognizer],SIGNAL(detected(QString)),
                   this,SLOT(detectedShake(QString)));

        recognizerMap.take(currentRecognizer);

    QString str = QString(&quot;&amp;lt;font size=+2&amp;gt;&amp;lt;B&amp;gt;Stopped %1&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;br&amp;gt;&quot;).arg(currentRecognizer);
    ui-&amp;gt;textEdit-&amp;gt;insertHtml(str);
    ui-&amp;gt;textEdit-&amp;gt;ensureCursorVisible();
}

</db:programlisting>
</db:article>
