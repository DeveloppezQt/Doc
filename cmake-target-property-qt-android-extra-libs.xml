<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QT_ANDROID_EXTRA_LIBS</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Extra libraries to deploy with the target.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="cmake-target-property-qt-android-extra-libs"/>
<db:para>Extra libraries to deploy with the target.</db:para>
<db:para>This property was introduced in Qt 6.0.</db:para>
<db:note>
<db:para>This property is in technology preview and may change in future releases.</db:para>
</db:note>
<db:note>
<db:para>This property is used only if targeting the Android platform.</db:para>
</db:note>
<db:para>A list of external libraries that will be copied into your application's libs folder and loaded on start-up. This can be used, for instance, to enable OpenSSL in your application. For more information, see <db:link xlink:href="android-openssl-support.xml">Adding OpenSSL Support for Android</db:link>.</db:para>
<db:para>When adding extra libraries from the build tree of your project, it's also necessary to add dependency relations between library and the application target. Using the following project structure may cause an issue, when deploying an apk:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_executable(MyApp main.cpp)

set_target_properties(MyApp PROPERTIES
    QT_ANDROID_EXTRA_LIBS
        ${CMAKE_CURRENT_BINARY_DIR}/libMyService_${ANDROID_ABI}.so
)

# MyService library doesn't have any relations with MyApp
qt_add_library(MyService service.cpp)
</db:programlisting>
<db:para>This leads to uncertainty whether MyService library will be available before the deployment of MyApp or not. The easiest solution is adding MyService library to the MyApp dependencies:</db:para>
<db:programlisting language="cpp" role="bad">add_dependencies(MyApp MyService)
</db:programlisting>
<db:para>When adding per-architecture libraries to a multi-abi project, list all their paths explicitly, rather than rely on variables like CMAKE_ANDROID_ARCH_ABI to dynamically compute the paths.</db:para>
<db:para>Prefer:</db:para>
<db:programlisting language="cpp" role="bad">set(libs
    ${CMAKE_CURRENT_BINARY_DIR}/libA_x86so
    ${CMAKE_CURRENT_BINARY_DIR}/libA_x86_64.so
    ${CMAKE_CURRENT_BINARY_DIR}/libA_arm64-v8a.so
    ${CMAKE_CURRENT_BINARY_DIR}/libA_armeabi-v7a.so
)
set_target_properties(MyApp PROPERTIES QT_ANDROID_EXTRA_LIBS ${libs})

# When targeting precompiled libs
target_link_libraries(${CMAKE_PROJECT_NAME} PUBLIC libA_${ANDROID_ABI})
</db:programlisting>
<db:para>over:</db:para>
<db:programlisting language="cpp" role="bad">set_target_properties(MyApp PROPERTIES
    QT_ANDROID_EXTRA_LIBS
        ${CMAKE_CURRENT_BINARY_DIR}/libA_${CMAKE_ANDROID_ARCH_ABI}.so
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-android-generate-deployment-settings.xml">qt_android_generate_deployment_settings()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
