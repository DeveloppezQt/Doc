<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>FromBase64Result Class</db:title>
<db:subtitle>QByteArray::FromBase64Result</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbytearray-frombase64result.xml">QByteArray::FromBase64Result</db:link> class holds the result of a call to <db:link xlink:href="qbytearray.xml#fromBase64Encoding">QByteArray::fromBase64Encoding</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>FromBase64Result</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>FromBase64Result is part of <db:simplelist><db:member>tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Objects of this class can be used to check whether the conversion was successful, and if so, retrieve the decoded <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. The conversion operators defined for <db:link xlink:href="qbytearray-frombase64result.xml">QByteArray::FromBase64Result</db:link> make its usage straightforward:</db:para>
<db:programlisting language="cpp">void process(const QByteArray &amp;);

if (auto result = QByteArray::fromBase64Encoding(encodedData))
    process(*result);
</db:programlisting>
<db:para>Alternatively, it is possible to access the conversion status and the decoded data directly:</db:para>
<db:programlisting language="cpp">auto result = QByteArray::fromBase64Encoding(encodedData);
if (result.decodingStatus == QByteArray::Base64DecodingStatus::Ok)
    process(result.decoded);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearray.xml#fromBase64">QByteArray::fromBase64</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-bool">
<db:title>[explicit noexcept] bool FromBase64Result::operator bool() const</db:title>
<db:para>Returns whether the decoding was successful. This is equivalent to checking whether the <db:code>decodingStatus</db:code> member is equal to QByteArray::Base64DecodingStatus::Ok.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>[noexcept] const QByteArray &amp;FromBase64Result::operator*() const</db:title>
<db:para>Returns the decoded byte array.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="decoded-var">
<db:title>QByteArray FromBase64Result::decoded</db:title>
<db:para>Contains the decoded byte array.</db:para>
</db:section>
<db:section xml:id="decodingStatus-var">
<db:title>QByteArray::Base64DecodingStatus FromBase64Result::decodingStatus</db:title>
<db:para>Contains whether the decoding was successful, expressed as a value of type QByteArray::Base64DecodingStatus.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash-15">
<db:title>[noexcept] size_t qHash(const QByteArray::FromBase64Result &amp;<db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QByteArray::FromBase64Result &amp;<db:emphasis>lhs</db:emphasis>, const QByteArray::FromBase64Result &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are different, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QByteArray::FromBase64Result &amp;<db:emphasis>lhs</db:emphasis>, const QByteArray::FromBase64Result &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are equal, otherwise returns <db:code>false</db:code>.</db:para>
<db:para><db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are equal if and only if they contain the same decoding status and, if the status is QByteArray::Base64DecodingStatus::Ok, if and only if they contain the same decoded data.</db:para>
</db:section>
</db:section>
</db:article>
