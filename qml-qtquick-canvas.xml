<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Canvas QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a 2D canvas item enabling drawing via JavaScript.</db:para>
<db:para>This type was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-styles-tracecanvas.xml" xlink:role="">TraceCanvas</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Canvas is part of <db:simplelist><db:member>qtquick-canvas</db:member><db:member>qtquick-visual</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Canvas item allows drawing of straight and curved lines, simple and complex shapes, graphs, and referenced graphic images. It can also add text, colors, shadows, gradients, and patterns, and do low level pixel operations. The Canvas output may be saved as an image file or serialized to a URL.</db:para>
<db:para>Rendering to the Canvas is done using a <db:link xlink:href="qml-qtquick-context2d.xml">Context2D</db:link> object, usually as a result of the <db:link xlink:href="qml-qtquick-canvas.xml#paint-signal">paint</db:link> signal.</db:para>
<db:para>To define a drawing area in the Canvas item set the <db:code>width</db:code> and <db:code>height</db:code> properties. For example, the following code creates a Canvas item which has a drawing area with a height of 100 pixels and width of 200 pixels:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
Canvas {
    id: mycanvas
    width: 100
    height: 200
    onPaint: {
        var ctx = getContext(&quot;2d&quot;);
        ctx.fillStyle = Qt.rgba(1, 0, 0, 1);
        ctx.fillRect(0, 0, width, height);
    }
}
</db:programlisting>
<db:para>Currently the Canvas item only supports the two-dimensional rendering context.</db:para>
<db:section xml:id="threaded-rendering-and-render-target">
<db:title>Threaded Rendering and Render Target</db:title>
<db:para>In Qt 6.0 the Canvas item supports one render target: <db:code>Canvas.Image</db:code>.</db:para>
<db:para>The <db:code>Canvas.Image</db:code> render target is a <db:code role="parameter">QImage</db:code> object. This render target supports background thread rendering, allowing complex or long running painting to be executed without blocking the UI. This is the only render target that is supported by all Qt Quick backends.</db:para>
<db:para>The default render target is Canvas.Image and the default <db:link xlink:href="qml-qtquick-canvas.xml#renderStrategy-prop">renderStrategy</db:link> is Canvas.Immediate.</db:para>
</db:section>
<db:section xml:id="pixel-operations">
<db:title>Pixel Operations</db:title>
<db:para>All HTML5 2D context pixel operations are supported. In order to ensure improved pixel reading/writing performance the <db:code role="parameter">Canvas.Image</db:code> render target should be chosen.</db:para>
</db:section>
<db:section xml:id="tips-for-porting-existing-html5-canvas-applications">
<db:title>Tips for Porting Existing HTML5 Canvas Applications</db:title>
<db:para>Although the Canvas item provides an HTML5-like API, HTML5 canvas applications need to be modified to run in the Canvas item:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Replace all DOM API calls with QML property bindings or Canvas item methods.</db:para>
</db:listitem>
<db:listitem>
<db:para>Replace all HTML event handlers with the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> item.</db:para>
</db:listitem>
<db:listitem>
<db:para>Change setInterval/setTimeout function calls with the <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> item or the use of <db:link xlink:href="qml-qtquick-canvas.xml#requestAnimationFrame-method">requestAnimationFrame</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Place painting code into the <db:code>onPaint</db:code> handler and trigger painting by calling the <db:link xlink:href="qml-qtquick-canvas.xml#markDirty-method">markDirty</db:link>() or <db:link xlink:href="qml-qtquick-canvas.xml#requestPaint-method">requestPaint</db:link>() methods.</db:para>
</db:listitem>
<db:listitem>
<db:para>To draw images, load them by calling the Canvas's <db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">loadImage</db:link>() method and then request to paint them in the <db:code>onImageLoaded</db:code> handler.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Starting Qt 5.4, the Canvas is a <db:link xlink:href="qsgtextureprovider.xml">texture provider</db:link> and can be used directly in <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffects</db:link> and other classes that consume texture providers.</db:para>
<db:note>
<db:para>In general large canvases, frequent updates, and animation should be avoided with the Canvas.Image render target. This is because with accelerated graphics APIs each update will lead to a texture upload. Also, if possible, prefer <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> and implement drawing in C++ via <db:link xlink:href="qpainter.xml">QPainter</db:link> instead of the more expensive and likely less performing JavaScript and <db:link xlink:href="qml-qtquick-context2d.xml">Context2D</db:link> approach.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml">Context2D</db:link></db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="available-prop">
<db:title>[read-only] available : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>available</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Indicates when Canvas is able to provide a drawing context to operate on.</db:para>
</db:section>
<db:section xml:id="canvasSize-prop">
<db:title>canvasSize : size</db:title>
<db:fieldsynopsis>
<db:type>size</db:type>
<db:varname>canvasSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the logical canvas size that the context paints on.</db:para>
<db:para>By default, the canvas size is the same size as the current canvas item size.</db:para>
<db:para>By setting the canvasSize, tileSize and canvasWindow, the Canvas item can act as a large virtual canvas with many separately rendered tile rectangles. Only those tiles within the current canvas window are painted by the Canvas render engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#tileSize-prop" role="deprecated">tileSize</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#canvasWindow-prop" role="deprecated">canvasWindow</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="context-prop">
<db:title>[read-only] context : object</db:title>
<db:fieldsynopsis>
<db:type>object</db:type>
<db:varname>context</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the active drawing context.</db:para>
<db:para>If the canvas is ready and there has been a successful call to <db:link xlink:href="qml-qtquick-canvas.xml#getContext-method">getContext</db:link>() or the <db:link xlink:href="qml-qtquick-canvas.xml#contextType-prop">contextType</db:link> property has been set with a supported context type, this property will contain the current drawing context, otherwise null.</db:para>
</db:section>
<db:section xml:id="contextType-prop">
<db:title>contextType : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>contextType</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The type of drawing context to use.</db:para>
<db:para>This property is set to the name of the active context type.</db:para>
<db:para>If set explicitly the canvas will attempt to create a context of the named type after becoming available.</db:para>
<db:para>The type name is the same as used in the <db:link xlink:href="qml-qtquick-canvas.xml#getContext-method">getContext</db:link>() call, for the 2d canvas the value will be &quot;2d&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#getContext-method">getContext</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#available-prop">available</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderStrategy-prop">
<db:title>renderStrategy : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>renderStrategy</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current canvas rendering strategy.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Canvas.Immediate - context will perform graphics commands immediately in the main UI thread.</db:para>
</db:listitem>
<db:listitem>
<db:para>Canvas.Threaded - context will defer graphics commands to a private rendering thread.</db:para>
</db:listitem>
<db:listitem>
<db:para>Canvas.Cooperative - context will defer graphics commands to the applications global render thread.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This hint is supplied along with <db:link xlink:href="qml-qtquick-canvas.xml#renderTarget-prop">renderTarget</db:link> to the graphics context to determine the method of rendering. A renderStrategy, <db:link xlink:href="qml-qtquick-canvas.xml#renderTarget-prop">renderTarget</db:link> or a combination may not be supported by a graphics context, in which case the context will choose appropriate options and Canvas will signal the change to the properties.</db:para>
<db:para>Configuration or runtime tests may cause the QML Scene Graph to render in the GUI thread. Selecting <db:code>Canvas.Cooperative</db:code>, does not guarantee rendering will occur on a thread separate from the GUI thread.</db:para>
<db:para>The default value is <db:code>Canvas.Immediate</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#renderTarget-prop">renderTarget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderTarget-prop">
<db:title>renderTarget : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>renderTarget</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current canvas render target.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Canvas.Image - render to an in memory image buffer.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This hint is supplied along with <db:link xlink:href="qml-qtquick-canvas.xml#renderStrategy-prop">renderStrategy</db:link> to the graphics context to determine the method of rendering. A <db:link xlink:href="qml-qtquick-canvas.xml#renderStrategy-prop">renderStrategy</db:link>, renderTarget or a combination may not be supported by a graphics context, in which case the context will choose appropriate options and Canvas will signal the change to the properties.</db:para>
<db:para>The default render target is <db:code>Canvas.Image</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="imageLoaded-signal">
<db:title>imageLoaded()</db:title>
<db:para>This signal is emitted when an image has been loaded.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onImageLoaded</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">loadImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint-signal">
<db:title>paint(rect <db:emphasis>region</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:code role="parameter">region</db:code> needs to be rendered. If a context is active it can be referenced from the context property.</db:para>
<db:para>This signal can be triggered by markdirty(), <db:link xlink:href="qml-qtquick-canvas.xml#requestPaint-method">requestPaint</db:link>() or by changing the current canvas window.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPaint</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="painted-signal">
<db:title>painted()</db:title>
<db:para>This signal is emitted after all context painting commands are executed and the Canvas has been rendered.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPainted</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="cancelRequestAnimationFrame-method">
<db:title>cancelRequestAnimationFrame(int <db:emphasis>handle</db:emphasis>)</db:title>
<db:para>This function will cancel the animation callback referenced by <db:code role="parameter">handle</db:code>.</db:para>
</db:section>
<db:section xml:id="getContext-method">
<db:title>object getContext(string <db:emphasis>contextId</db:emphasis>, ... <db:emphasis>args</db:emphasis>)</db:title>
<db:para>Returns a drawing context, or <db:code>null</db:code> if no context is available.</db:para>
<db:para>The <db:code role="parameter">contextId</db:code> parameter names the required context. The Canvas item will return a context that implements the required drawing mode. After the first call to getContext, any subsequent call to getContext with the same contextId will return the same context object. Any additional arguments (<db:code role="parameter">args</db:code>) are currently ignored.</db:para>
<db:para>If the context type is not supported or the canvas has previously been requested to provide a different and incompatible context type, <db:code>null</db:code> will be returned.</db:para>
<db:para>Canvas only supports a 2d context.</db:para>
</db:section>
<db:section xml:id="isImageError-method">
<db:title>isImageError(url <db:emphasis>image</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">image</db:code> failed to load, <db:code>false</db:code> otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">loadImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isImageLoaded-method">
<db:title>isImageLoaded(url <db:emphasis>image</db:emphasis>)</db:title>
<db:para>Returns true if the <db:code role="parameter">image</db:code> is successfully loaded and ready to use.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">loadImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isImageLoading-method">
<db:title>isImageLoading(url <db:emphasis>image</db:emphasis>)</db:title>
<db:para>Returns true if the <db:code role="parameter">image</db:code> is currently loading.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">loadImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadImage-method">
<db:title>loadImage(url <db:emphasis>image</db:emphasis>)</db:title>
<db:para>Loads the given <db:code role="parameter">image</db:code> asynchronously.</db:para>
<db:para>Once the image is ready, <db:link xlink:href="qml-qtquick-canvas.xml#imageLoaded-signal">imageLoaded</db:link>() signal will be emitted. The loaded image can be unloaded with the <db:link xlink:href="qml-qtquick-canvas.xml#unloadImage-method">unloadImage</db:link>() method.</db:para>
<db:note>
<db:para>Only loaded images can be painted on the Canvas item.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#unloadImage-method">unloadImage</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#imageLoaded-signal">imageLoaded</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#isImageLoaded-method">isImageLoaded</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createImageData-method">Context2D::createImageData</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#drawImage-method">Context2D::drawImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="markDirty-method">
<db:title>markDirty(rect <db:emphasis>area</db:emphasis>)</db:title>
<db:para>Marks the given <db:code role="parameter">area</db:code> as dirty, so that when this area is visible the canvas renderer will redraw it. This will trigger the <db:code>paint</db:code> signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#paint-signal">paint</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#requestPaint-method">requestPaint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestAnimationFrame-method">
<db:title>int requestAnimationFrame(<db:emphasis>callback</db:emphasis>)</db:title>
<db:para>This function schedules <db:code role="parameter">callback</db:code> to be invoked before composing the Qt Quick scene.</db:para>
</db:section>
<db:section xml:id="requestPaint-method">
<db:title>requestPaint()</db:title>
<db:para>Request the entire visible region be re-drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#markDirty-method">markDirty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="save-method">
<db:title>bool save(string <db:emphasis>filename</db:emphasis>)</db:title>
<db:para>Saves the current canvas content into an image file <db:code role="parameter">filename</db:code>. The saved image format is automatically decided by the <db:code role="parameter">filename</db:code>'s suffix. Returns <db:code>true</db:code> on success.</db:para>
<db:note>
<db:para>Calling this method will force painting the whole canvas, not just the current canvas visible window.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#canvasWindow-prop" role="deprecated">canvasWindow</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#canvasSize-prop">canvasSize</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#toDataURL-method">toDataURL</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toDataURL-method">
<db:title>string toDataURL(string <db:emphasis>mimeType</db:emphasis>)</db:title>
<db:para>Returns a data URL for the image in the canvas.</db:para>
<db:para>The default <db:code role="parameter">mimeType</db:code> is &quot;image/png&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#save-method">save</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unloadImage-method">
<db:title>unloadImage(url <db:emphasis>image</db:emphasis>)</db:title>
<db:para>Unloads the <db:code role="parameter">image</db:code>.</db:para>
<db:para>Once an image is unloaded, it cannot be painted by the canvas context unless it is loaded again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">loadImage</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#imageLoaded-signal">imageLoaded</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#isImageLoaded-method">isImageLoaded</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createImageData-method">Context2D::createImageData</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#drawImage-method">Context2D::drawImage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for Canvas</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qtquick-canvas.xml">Canvas</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="canvasWindow-prop">
<db:title>canvasWindow : rect</db:title>
<db:fieldsynopsis>
<db:type>rect</db:type>
<db:varname>canvasWindow</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Holds the current canvas visible window.</db:para>
<db:para>By default the canvasWindow size is the same as the Canvas item size with the top-left point as (0, 0).</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-canvas.xml#canvasSize-prop">canvasSize</db:link> is different to the Canvas item size, the Canvas item can display different visible areas by changing the canvas windowSize and/or position.</db:para>
<db:para>This feature is incomplete. For details, see QTBUG-33129</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#canvasSize-prop">canvasSize</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#tileSize-prop">tileSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tileSize-prop">
<db:title>tileSize : size</db:title>
<db:fieldsynopsis>
<db:type>size</db:type>
<db:varname>tileSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Holds the canvas rendering tile size.</db:para>
<db:para>The Canvas item enters tiled mode by setting <db:link xlink:href="qml-qtquick-canvas.xml#canvasSize-prop">canvasSize</db:link>, tileSize and the <db:link xlink:href="qml-qtquick-canvas.xml#canvasWindow-prop">canvasWindow</db:link>. This can improve rendering performance by rendering and caching tiles instead of rendering the whole canvas every time.</db:para>
<db:para>Memory will be consumed only by those tiles within the current visible region.</db:para>
<db:para>By default the tileSize is the same as the <db:link xlink:href="qml-qtquick-canvas.xml#canvasSize-prop">canvasSize</db:link>.</db:para>
<db:para>This feature is incomplete. For details, see QTBUG-33129.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#canvasSize-prop">canvasSize</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#canvasWindow-prop">canvasWindow</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
