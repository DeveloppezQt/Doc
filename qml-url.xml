<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>url QML Value Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>a resource locator.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The url type refers to a resource locator (like a file name, for example). It can be either absolute, e.g. &quot;http://qt-project.org&quot;, or relative, e.g. &quot;pics/logo.png&quot;. A relative URL is resolved relative to the URL of the containing component.</db:para>
<db:para>For example, the following assigns a valid URL to the <db:link xlink:href="qml-qtquick-image.xml#source-prop">Image::source</db:link> property, which is of type url:</db:para>
<db:programlisting language="qml">Image { source: &quot;pics/logo.png&quot; }
</db:programlisting>
<db:para>When integrating with C++, note that any <db:link xlink:href="qurl.xml">QUrl</db:link> value <db:link xlink:href="qtqml-cppintegration-data.xml">passed into QML from C++</db:link> is automatically converted into a url value, and vice-versa.</db:para>
<db:section xml:id="using-the-url-type">
<db:title>Using the url Type</db:title>
<db:para>When a relative URL is written to a url type property, it is converted into a URL object, so <db:emphasis role="bold">matching the URL value against the input string value will fail</db:emphasis>. Instead, convert the string to a URL using Qt.resolvedUrl() for means of comparison, and use toString() to get the contents of the URL:</db:para>
<db:programlisting language="qml">Image {
    source: &quot;pics/logo.png&quot;

    Component.onCompleted: {
        // This prints 'false'. Although &quot;pics/logo.png&quot; was the input string,
        // it's been converted from a string to a URL, so these two are not the same.
        console.log(source == &quot;pics/logo.png&quot;)

        // This prints 'true' as Qt.resovledUrl() converts the string into a
        // URL with the correctly resolved path
        console.log(source == Qt.resolvedUrl(&quot;pics/logo.png&quot;))

        // This prints the absolute path, e.g. &quot;file:///path/to/pics/logo.png&quot;
        console.log(source.toString())
    }
}
</db:programlisting>
<db:note>
<db:para>When referring to files stored with the <db:link xlink:href="resources.xml">Qt Resource System</db:link> from within QML, you should use &quot;qrc:///&quot; instead of &quot;:/&quot; as QML requires URL paths. Relative URLs resolved from within that file will use the same protocol.</db:para>
</db:note>
<db:para>Additionally, URLs may contain encoded characters using the 'percent-encoding' scheme specified by <db:link xlink:href="http://tools.ietf.org/html/rfc3986">RFC 3986</db:link>. These characters will be preserved within properties of type url, to allow QML code to construct precise URL values. An exception to this rule is the preemptive decoding of directory-separator characters ('/') - these characters are decoded to allow the URL to be correctly classified.</db:para>
<db:para>For example, a local file containing a '#' character, which would normally be interpreted as the beginning of the URL 'fragment' element, can be accessed by encoding the characters of the file name:</db:para>
<db:programlisting language="qml">Image { source: encodeURIComponent(&quot;/tmp/test#1.png&quot;) }
</db:programlisting>
<db:para>This basic type is provided by the QML language.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-basictypes.xml">QML Basic Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
