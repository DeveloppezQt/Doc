<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>url QML Value Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>a resource locator.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The url type refers to a resource locator (like a file name, for example). It can be either absolute, e.g. &quot;http://qt-project.org&quot;, or relative, e.g. &quot;pics/logo.png&quot;. A relative URL is resolved relative to the URL of the containing component.</db:para>
<db:para>For example, the following assigns a valid URL to the <db:link xlink:href="">Image::source</db:link> property, which is of type url:</db:para>
<db:programlisting language="qml">Image { source: &quot;pics/logo.png&quot; }
</db:programlisting>
<db:para>When integrating with C++, note that any <db:link xlink:href="qurl.xml">QUrl</db:link> value <db:link xlink:href="qtqml-cppintegration-data.xml">passed into QML from C++</db:link> is automatically converted into a url value, and vice-versa.</db:para>
<db:para>Alternatively you may convert your url to a <db:link xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/URL">URL</db:link> object in order to access and modify its components:</db:para>
<db:programlisting language="qml">var urlObject = new URL(url);
</db:programlisting>
<db:note>
<db:para>In Qt 5, URLs were automatically resolved based on the current context when assigning them to any url property. This made it impossible to work with relative URLs and it created inconsistent behavior when reading back a URL previously written to a property. Therefore, the behavior was changed in Qt 6.</db:para>
</db:note>
<db:note>
<db:para>When referring to files stored with the <db:link xlink:href="resources.xml">Qt Resource System</db:link> from within QML, you should use &quot;qrc:///&quot; instead of &quot;:/&quot; as QML requires URL paths. Relative URLs resolved from within that file will use the same protocol.</db:para>
</db:note>
<db:para>Additionally, URLs may contain encoded characters using the 'percent-encoding' scheme specified by <db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc3986">RFC 3986</db:link>. These characters will be preserved within properties of type url, to allow QML code to construct precise URL values.</db:para>
<db:para>For example, a local file containing a '#' character, which would normally be interpreted as the beginning of the URL 'fragment' element, can be accessed by encoding the characters of the file name:</db:para>
<db:programlisting language="qml">Image { source: encodeURIComponent(&quot;/tmp/test#1.png&quot;) }
</db:programlisting>
<db:para>This basic type is provided by the QML language.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-basictypes.xml">QML Basic Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
