<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickImageResponse Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickimageresponse.xml">QQuickImageResponse</db:link> class provides an interface for asynchronous image loading in <db:link xlink:href="qquickasyncimageprovider.xml">QQuickAsyncImageProvider</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickImageResponse</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The purpose of an image response is to provide a way for image provider jobs to be executed in an asynchronous way.</db:para>
<db:para>Responses are deleted via <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link> once the <db:link xlink:href="qquickimageresponse.xml#finished">finished</db:link>() signal has been emitted. If you are using <db:link xlink:href="qrunnable.xml">QRunnable</db:link> as base for your <db:link xlink:href="qquickimageresponse.xml">QQuickImageResponse</db:link> ensure automatic deletion is disabled.</db:para>
<db:para>See the <db:link xlink:href="qtquick-imageresponseprovider-example.xml">Image Response Provider Example</db:link> for a complete implementation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickimageprovider.xml">QQuickImageProvider</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickImageResponse">
<db:title>QQuickImageResponse::QQuickImageResponse()</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickImageResponse</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickImageResponse()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs the image response</db:para>
</db:section>
<db:section xml:id="dtor.QQuickImageResponse">
<db:title>[override virtual] QQuickImageResponse::~QQuickImageResponse()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQuickImageResponse</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickImageResponse() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the image response</db:para>
</db:section>
<db:section xml:id="cancel">
<db:title>[virtual] void QQuickImageResponse::cancel()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>cancel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is used to communicate that the response is no longer required by the engine.</db:para>
<db:para>It may be reimplemented to cancel a request in the provider side, however, it is not mandatory.</db:para>
<db:para>A cancelled <db:link xlink:href="qquickimageresponse.xml">QQuickImageResponse</db:link> still needs to emit <db:link xlink:href="qquickimageresponse.xml#finished">finished</db:link>() so that the engine may clean up the <db:link xlink:href="qquickimageresponse.xml">QQuickImageResponse</db:link>.</db:para>
<db:note>
<db:para><db:link xlink:href="qquickimageresponse.xml#finished">finished</db:link>() should not be emitted until the response is complete, regardless of whether or not cancel() was called. If it is called prematurely, the engine may destroy the response while it is still active, leading to a crash.</db:para>
</db:note>
</db:section>
<db:section xml:id="errorString">
<db:title>[virtual] QString QQuickImageResponse::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error string for the job execution. An empty string means no error.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QQuickImageResponse::finished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the job execution has finished (be it successfully, because an error happened or because it was cancelled).</db:para>
<db:note>
<db:para>Emission of this signal must be the final action the response performs: once the signal is received, the response will subsequently be destroyed by the engine.</db:para>
</db:note>
</db:section>
<db:section xml:id="textureFactory">
<db:title>[pure virtual] QQuickTextureFactory *QQuickImageResponse::textureFactory() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QQuickTextureFactory *</db:type>
<db:methodname>textureFactory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickTextureFactory * textureFactory() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the texture factory for the job. You can use <db:link xlink:href="qquicktexturefactory.xml#textureFactoryForImage">QQuickTextureFactory::textureFactoryForImage</db:link> if your provider works with <db:link xlink:href="qimage.xml">QImage</db:link>. The engine takes ownership of the returned <db:link xlink:href="qquicktexturefactory.xml">QQuickTextureFactory</db:link>.</db:para>
<db:note>
<db:para>This method will be called only when needed. For example, it may not be called if there is an error or the job is cancelled. Therefore, allocate the <db:link xlink:href="qquicktexturefactory.xml">QQuickTextureFactory</db:link> instance only in this method or otherwise ensure its deletion.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
