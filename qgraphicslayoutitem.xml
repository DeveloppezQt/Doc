<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsLayoutItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> class can be inherited to allow your custom items to be managed by layouts.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsLayoutItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicslayout.xml" xlink:role="class">QGraphicsLayout</db:link> and <db:link xlink:href="qgraphicswidget.xml" xlink:role="class">QGraphicsWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsLayoutItem is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> is an abstract class that defines a set of virtual functions describing sizes, size policies, and size hints for any object arranged by <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link>. The API contains functions relevant for both the item itself and for the user of the item as most of <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>'s functions are also part of the subclass' public API.</db:para>
<db:para>In most cases, existing layout-aware classes such as <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> and <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> already provide the functionality you require. However, subclassing these classes will enable you to create both graphical elements that work well with layouts (<db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>) or custom layouts (<db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link>).</db:para>
<db:section xml:id="subclassing-qgraphicslayoutitem">
<db:title>Subclassing QGraphicsLayoutItem</db:title>
<db:para>If you create a subclass of <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> and reimplement its virtual functions, you will enable the layout to resize and position your item along with other QGraphicsLayoutItems including <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> and <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link>.</db:para>
<db:para>You can start by reimplementing important functions: the protected <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>() function, as well as the public <db:link xlink:href="qgraphicslayoutitem.xml#setGeometry">setGeometry</db:link>() function. If you want your items to be aware of immediate geometry changes, you can also reimplement <db:link xlink:href="qgraphicslayoutitem.xml#updateGeometry">updateGeometry</db:link>().</db:para>
<db:para>The geometry, size hint, and size policy affect the item's size and position. Calling <db:link xlink:href="qgraphicslayoutitem.xml#setGeometry">setGeometry</db:link>() will always resize and reposition the item immediately. Normally, this function is called by <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> after the layout has been activated, but it can also be called by the item's user at any time.</db:para>
<db:para>The <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>() function returns the item' minimum, preferred and maximum size hints. You can override these properties by calling <db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>(), <db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>() or <db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>(). You can also use functions such as <db:link xlink:href="qgraphicslayoutitem.xml#setMinimumWidth">setMinimumWidth</db:link>() or <db:link xlink:href="qgraphicslayoutitem.xml#setMaximumHeight">setMaximumHeight</db:link>() to set only the width or height component if desired.</db:para>
<db:para>The <db:link xlink:href="qgraphicslayoutitem.xml#effectiveSizeHint">effectiveSizeHint</db:link>() function, on the other hand, returns a size hint for any given <db:link xlink:href="qt.xml#SizeHint-enum">Qt::SizeHint</db:link>, and guarantees that the returned size is bound to the minimum and maximum sizes and size hints. You can set the item's vertical and horizontal size policy by calling <db:link xlink:href="qgraphicslayoutitem.xml#setSizePolicy">setSizePolicy</db:link>(). The <db:link xlink:href="qgraphicslayoutitem.xml#sizePolicy">sizePolicy</db:link> property is used by the layout system to describe how this item prefers to grow or shrink.</db:para>
</db:section>
<db:section xml:id="nesting-qgraphicslayoutitems">
<db:title>Nesting QGraphicsLayoutItems</db:title>
<db:para>QGraphicsLayoutItems can be nested within other QGraphicsLayoutItems, similar to layouts that can contain sublayouts. This is done either by passing a <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> pointer to <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>'s protected constructor, or by calling <db:link xlink:href="qgraphicslayoutitem.xml#setParentLayoutItem">setParentLayoutItem</db:link>(). The <db:link xlink:href="qgraphicslayoutitem.xml#parentLayoutItem">parentLayoutItem</db:link>() function returns a pointer to the item's layoutItem parent. If the item's parent is <db:code>nullptr</db:code> or if the parent does not inherit from <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, the <db:link xlink:href="qgraphicslayoutitem.xml#parentLayoutItem">parentLayoutItem</db:link>() function then returns <db:code>nullptr</db:code>. <db:link xlink:href="qgraphicslayoutitem.xml#isLayout">isLayout</db:link>() returns <db:code>true</db:code> if the <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> subclass is itself a layout, or false otherwise.</db:para>
<db:para>Qt uses <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> to provide layout functionality in the <db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link>, but in the future its use may spread throughout Qt itself.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsLayoutItem">
<db:title>QGraphicsLayoutItem::QGraphicsLayoutItem(QGraphicsLayoutItem *<db:emphasis>parent</db:emphasis> = nullptr, bool <db:emphasis>isLayout</db:emphasis> = false)</db:title>
<db:constructorsynopsis>
<db:methodname>QGraphicsLayoutItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsLayoutItem *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>isLayout</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsLayoutItem(QGraphicsLayoutItem *parent, bool isLayout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs the <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> object. <db:code role="parameter">parent</db:code> becomes the object's parent. If <db:code role="parameter">isLayout</db:code> is true the item is a layout, otherwise <db:code role="parameter">isLayout</db:code> is false.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsLayoutItem">
<db:title>[virtual] QGraphicsLayoutItem::~QGraphicsLayoutItem()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGraphicsLayoutItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGraphicsLayoutItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> object.</db:para>
</db:section>
<db:section xml:id="contentsRect">
<db:title>QRectF QGraphicsLayoutItem::contentsRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>contentsRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF contentsRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the contents rect in local coordinates.</db:para>
<db:para>The contents rect defines the subrectangle used by an associated layout when arranging subitems. This function is a convenience function that adjusts the item's <db:link xlink:href="qgraphicslayoutitem.xml#geometry">geometry</db:link>() by its contents margins. Note that <db:link xlink:href="qgraphicslayoutitem.xml#getContentsMargins">getContentsMargins</db:link>() is a virtual function that you can reimplement to return the item's contents margins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#getContentsMargins">getContentsMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="effectiveSizeHint">
<db:title>QSizeF QGraphicsLayoutItem::effectiveSizeHint(Qt::SizeHint <db:emphasis>which</db:emphasis>, const QSizeF &amp;<db:emphasis>constraint</db:emphasis> = QSizeF()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>effectiveSizeHint</db:methodname>
<db:methodparam>
<db:type>Qt::SizeHint</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>constraint</db:parameter>
<db:initializer>QSizeF()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF effectiveSizeHint(Qt::SizeHint which, const QSizeF &amp;constraint) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the effective size hint for this <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>.</db:para>
<db:para><db:code role="parameter">which</db:code> is the size hint in question. <db:code role="parameter">constraint</db:code> is an optional argument that defines a special constrain when calculating the effective size hint. By default, <db:code role="parameter">constraint</db:code> is <db:link xlink:href="qsizef.xml">QSizeF</db:link>(-1, -1), which means there is no constraint to the size hint.</db:para>
<db:para>If you want to specify the widget's size hint for a given width or height, you can provide the fixed dimension in <db:code role="parameter">constraint</db:code>. This is useful for widgets that can grow only either vertically or horizontally, and need to set either their width or their height to a special value.</db:para>
<db:para>For example, a text paragraph item fit into a column width of 200 may grow vertically. You can pass <db:link xlink:href="qsizef.xml">QSizeF</db:link>(200, -1) as a constraint to get a suitable minimum, preferred and maximum height).</db:para>
<db:para>You can adjust the effective size hint by reimplementing <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>() in a <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> subclass, or by calling one of the following functions: <db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>(), <db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>, or <db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>() (or a combination of both).</db:para>
<db:para>This function caches each of the size hints and guarantees that <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>() will be called only once for each value of <db:code role="parameter">which</db:code> - unless <db:code role="parameter">constraint</db:code> is not specified and <db:link xlink:href="qgraphicslayoutitem.xml#updateGeometry">updateGeometry</db:link>() has been called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometry">
<db:title>QRectF QGraphicsLayoutItem::geometry() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>geometry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF geometry() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's geometry (e.g., position and size) as a <db:link xlink:href="qrectf.xml">QRectF</db:link>. This function is equivalent to <db:link xlink:href="qrectf.xml">QRectF</db:link>(pos(), size()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setGeometry">setGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getContentsMargins">
<db:title>[virtual] void QGraphicsLayoutItem::getContentsMargins(qreal *<db:emphasis>left</db:emphasis>, qreal *<db:emphasis>top</db:emphasis>, qreal *<db:emphasis>right</db:emphasis>, qreal *<db:emphasis>bottom</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getContentsMargins</db:methodname>
<db:methodparam>
<db:type>qreal *</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal *</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal *</db:type>
<db:parameter>right</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal *</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getContentsMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function provides the <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code> and <db:code role="parameter">bottom</db:code> contents margins for this <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>. The default implementation assumes all contents margins are 0. The parameters point to values stored in qreals. If any of the pointers is <db:code>nullptr</db:code>, that value will not be updated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setContentsMargins">QGraphicsWidget::setContentsMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="graphicsItem">
<db:title>QGraphicsItem *QGraphicsLayoutItem::graphicsItem() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem *</db:type>
<db:methodname>graphicsItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem * graphicsItem() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> that this layout item represents. For <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> it will return itself. For custom items it can return an aggregated value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setGraphicsItem">setGraphicsItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[virtual, since 6.0] bool QGraphicsLayoutItem::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is empty, i.e whether it has no content and should not occupy any space.</db:para>
<db:para>The default implementation returns <db:code>true</db:code> true if the item has been hidden, unless its <db:link xlink:href="qgraphicslayoutitem.xml#sizePolicy">size policy</db:link> has retainSizeWhenHidden set to <db:code>true</db:code></db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizePolicy">sizePolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLayout">
<db:title>bool QGraphicsLayoutItem::isLayout() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLayout() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> is a layout (e.g., is inherited by an object that arranges other <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> objects); otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumHeight">
<db:title>qreal QGraphicsLayoutItem::maximumHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>maximumHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal maximumHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum height.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumHeight">setMaximumHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumSize">
<db:title>QSizeF QGraphicsLayoutItem::maximumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>maximumSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF maximumSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#SizeHint-enum">Qt::MaximumSize</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumWidth">
<db:title>qreal QGraphicsLayoutItem::maximumWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>maximumWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal maximumWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum width.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumWidth">setMaximumWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumHeight">
<db:title>qreal QGraphicsLayoutItem::minimumHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>minimumHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal minimumHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum height.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumHeight">setMinimumHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSize">
<db:title>QSizeF QGraphicsLayoutItem::minimumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>minimumSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF minimumSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#SizeHint-enum">Qt::MinimumSize</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumWidth">
<db:title>qreal QGraphicsLayoutItem::minimumWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>minimumWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal minimumWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum width.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumWidth">setMinimumWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ownedByLayout">
<db:title>bool QGraphicsLayoutItem::ownedByLayout() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>ownedByLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool ownedByLayout() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether a layout should delete this item in its destructor. If its true, then the layout will delete it. If its false, then it is assumed that another object has the ownership of it, and the layout won't delete this item.</db:para>
<db:para>If the item inherits both <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> and <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> (such as <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> does) the item is really part of two ownership hierarchies. This property informs what the layout should do with its child items when it is destructed. In the case of <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>, it is preferred that when the layout is deleted it won't delete its children (since they are also part of the graphics item hierarchy).</db:para>
<db:para>By default this value is initialized to false in <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>, but it is overridden by <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> to return true. This is because <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> is not normally part of the <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> hierarchy, so the parent layout should delete it. Subclasses might override this default behaviour by calling <db:link xlink:href="qgraphicslayoutitem.xml#setOwnedByLayout">setOwnedByLayout</db:link>(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setOwnedByLayout">setOwnedByLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parentLayoutItem">
<db:title>QGraphicsLayoutItem *QGraphicsLayoutItem::parentLayoutItem() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsLayoutItem *</db:type>
<db:methodname>parentLayoutItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsLayoutItem * parentLayoutItem() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parent of this <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>, or <db:code>nullptr</db:code> if there is no parent, or if the parent does not inherit from <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> (<db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> is often used through multiple inheritance with <db:link xlink:href="qobject.xml">QObject</db:link>-derived classes).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setParentLayoutItem">setParentLayoutItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preferredHeight">
<db:title>qreal QGraphicsLayoutItem::preferredHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>preferredHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal preferredHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the preferred height.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredHeight">setPreferredHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preferredSize">
<db:title>QSizeF QGraphicsLayoutItem::preferredSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>preferredSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF preferredSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the preferred size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#SizeHint-enum">Qt::PreferredSize</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preferredWidth">
<db:title>qreal QGraphicsLayoutItem::preferredWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>preferredWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal preferredWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the preferred width.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredWidth">setPreferredWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[virtual] void QGraphicsLayoutItem::setGeometry(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setGeometry</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometry(const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function sets the geometry of the <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> to <db:code role="parameter">rect</db:code>, which is in parent coordinates (e.g., the top-left corner of <db:code role="parameter">rect</db:code> is equivalent to the item's position in parent coordinates).</db:para>
<db:para>You must reimplement this function in a subclass of <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> to receive geometry updates. The layout will call this function when it does a rearrangement.</db:para>
<db:para>If <db:code role="parameter">rect</db:code> is outside of the bounds of <db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link> and <db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>, it will be adjusted to its closest size so that it is within the legal bounds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGraphicsItem">
<db:title>[protected] void QGraphicsLayoutItem::setGraphicsItem(QGraphicsItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGraphicsItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGraphicsItem(QGraphicsItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> represents a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, and it wants to take advantage of the automatic reparenting capabilities of <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> it should set this value. Note that if you delete <db:code role="parameter">item</db:code> and not delete the layout item, you are responsible of calling setGraphicsItem(<db:code>nullptr</db:code>) in order to avoid having a dangling pointer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#graphicsItem">graphicsItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumHeight">
<db:title>void QGraphicsLayoutItem::setMaximumHeight(qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumHeight</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumHeight(qreal height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum height to <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumHeight">maximumHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumSize">
<db:title>void QGraphicsLayoutItem::setMaximumSize(const QSizeF &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumSize</db:methodname>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumSize(const QSizeF &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum size to <db:code role="parameter">size</db:code>. This property overrides <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>() for <db:link xlink:href="qt.xml#SizeHint-enum">Qt::MaximumSize</db:link> and ensures that <db:link xlink:href="qgraphicslayoutitem.xml#effectiveSizeHint">effectiveSizeHint</db:link>() will never return a size larger than <db:code role="parameter">size</db:code>. In order to unset the maximum size, use an invalid size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#SizeHint-enum">Qt::MaximumSize</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumSize-1">
<db:title>void QGraphicsLayoutItem::setMaximumSize(qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumSize</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumSize(qreal w, qreal h)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>(<db:link xlink:href="qsizef.xml">QSizeF</db:link>(<db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumWidth">
<db:title>void QGraphicsLayoutItem::setMaximumWidth(qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumWidth</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumWidth(qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum width to <db:code role="parameter">width</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumWidth">maximumWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinimumHeight">
<db:title>void QGraphicsLayoutItem::setMinimumHeight(qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMinimumHeight</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMinimumHeight(qreal height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum height to <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumHeight">minimumHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinimumSize">
<db:title>void QGraphicsLayoutItem::setMinimumSize(const QSizeF &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMinimumSize</db:methodname>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMinimumSize(const QSizeF &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum size to <db:code role="parameter">size</db:code>. This property overrides <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>() for <db:link xlink:href="qt.xml#SizeHint-enum">Qt::MinimumSize</db:link> and ensures that <db:link xlink:href="qgraphicslayoutitem.xml#effectiveSizeHint">effectiveSizeHint</db:link>() will never return a size smaller than <db:code role="parameter">size</db:code>. In order to unset the minimum size, use an invalid size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#SizeHint-enum">Qt::MinimumSize</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumWidth">setMinimumWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumHeight">setMinimumHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinimumSize-1">
<db:title>void QGraphicsLayoutItem::setMinimumSize(qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMinimumSize</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMinimumSize(qreal w, qreal h)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>(<db:link xlink:href="qsizef.xml">QSizeF</db:link>(<db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinimumWidth">
<db:title>void QGraphicsLayoutItem::setMinimumWidth(qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMinimumWidth</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMinimumWidth(qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum width to <db:code role="parameter">width</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumWidth">minimumWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOwnedByLayout">
<db:title>[protected] void QGraphicsLayoutItem::setOwnedByLayout(bool <db:emphasis>ownership</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOwnedByLayout</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>ownership</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOwnedByLayout(bool ownership)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether a layout should delete this item in its destructor or not. <db:code role="parameter">ownership</db:code> must be true to in order for the layout to delete it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#ownedByLayout">ownedByLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setParentLayoutItem">
<db:title>void QGraphicsLayoutItem::setParentLayoutItem(QGraphicsLayoutItem *<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setParentLayoutItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsLayoutItem *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setParentLayoutItem(QGraphicsLayoutItem *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the parent of this <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> to <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#parentLayoutItem">parentLayoutItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreferredHeight">
<db:title>void QGraphicsLayoutItem::setPreferredHeight(qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreferredHeight</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreferredHeight(qreal height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the preferred height to <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredHeight">preferredHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredWidth">preferredWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreferredSize">
<db:title>void QGraphicsLayoutItem::setPreferredSize(const QSizeF &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreferredSize</db:methodname>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreferredSize(const QSizeF &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the preferred size to <db:code role="parameter">size</db:code>. This property overrides <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>() for <db:link xlink:href="qt.xml#SizeHint-enum">Qt::PreferredSize</db:link> and provides the default value for <db:link xlink:href="qgraphicslayoutitem.xml#effectiveSizeHint">effectiveSizeHint</db:link>(). In order to unset the preferred size, use an invalid size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#SizeHint-enum">Qt::PreferredSize</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreferredSize-1">
<db:title>void QGraphicsLayoutItem::setPreferredSize(qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreferredSize</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreferredSize(qreal w, qreal h)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>(<db:link xlink:href="qsizef.xml">QSizeF</db:link>(<db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreferredWidth">
<db:title>void QGraphicsLayoutItem::setPreferredWidth(qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreferredWidth</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreferredWidth(qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the preferred width to <db:code role="parameter">width</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredWidth">preferredWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredHeight">preferredHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSizePolicy">
<db:title>void QGraphicsLayoutItem::setSizePolicy(const QSizePolicy &amp;<db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSizePolicy</db:methodname>
<db:methodparam>
<db:type>const QSizePolicy &amp;</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSizePolicy(const QSizePolicy &amp;policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size policy to <db:code role="parameter">policy</db:code>. The size policy describes how the item should grow horizontally and vertically when arranged in a layout.</db:para>
<db:para><db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>'s default size policy is (<db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Fixed</db:link>, <db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Fixed</db:link>, <db:link xlink:href="qsizepolicy.xml#ControlType-enum">QSizePolicy::DefaultType</db:link>), but it is common for subclasses to change the default. For example, <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> defaults to (<db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Preferred</db:link>, <db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Preferred</db:link>, <db:link xlink:href="qsizepolicy.xml#ControlType-enum">QSizePolicy::DefaultType</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizePolicy">sizePolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::sizePolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSizePolicy-1">
<db:title>void QGraphicsLayoutItem::setSizePolicy(QSizePolicy::Policy <db:emphasis>hPolicy</db:emphasis>, QSizePolicy::Policy <db:emphasis>vPolicy</db:emphasis>, QSizePolicy::ControlType <db:emphasis>controlType</db:emphasis> = QSizePolicy::DefaultType)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSizePolicy</db:methodname>
<db:methodparam>
<db:type>QSizePolicy::Policy</db:type>
<db:parameter>hPolicy</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSizePolicy::Policy</db:type>
<db:parameter>vPolicy</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSizePolicy::ControlType</db:type>
<db:parameter>controlType</db:parameter>
<db:initializer>QSizePolicy::DefaultType</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSizePolicy(QSizePolicy::Policy hPolicy, QSizePolicy::Policy vPolicy, QSizePolicy::ControlType controlType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function is equivalent to calling <db:link xlink:href="qgraphicslayoutitem.xml#setSizePolicy">setSizePolicy</db:link>(<db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link>(<db:code role="parameter">hPolicy</db:code>, <db:code role="parameter">vPolicy</db:code>, <db:code role="parameter">controlType</db:code>)).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizePolicy">sizePolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::sizePolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[pure virtual protected] QSizeF QGraphicsLayoutItem::sizeHint(Qt::SizeHint <db:emphasis>which</db:emphasis>, const QSizeF &amp;<db:emphasis>constraint</db:emphasis> = QSizeF()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>sizeHint</db:methodname>
<db:methodparam>
<db:type>Qt::SizeHint</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>constraint</db:parameter>
<db:initializer>QSizeF()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF sizeHint(Qt::SizeHint which, const QSizeF &amp;constraint) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual function returns the size hint for <db:code role="parameter">which</db:code> of the <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>, using the width or height of <db:code role="parameter">constraint</db:code> to constrain the output.</db:para>
<db:para>Reimplement this function in a subclass of <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> to provide the necessary size hints for your items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#effectiveSizeHint">effectiveSizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizePolicy">
<db:title>QSizePolicy QGraphicsLayoutItem::sizePolicy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizePolicy</db:type>
<db:methodname>sizePolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizePolicy sizePolicy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current size policy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setSizePolicy">setSizePolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::sizePolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateGeometry">
<db:title>[virtual] void QGraphicsLayoutItem::updateGeometry()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateGeometry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateGeometry()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function discards any cached size hint information. You should always call this function if you change the return value of the <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">sizeHint</db:link>() function. Subclasses must always call the base implementation when reimplementing this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#effectiveSizeHint">effectiveSizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
