<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using Qt Remote Objects</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Introduction to using Qt Remote Objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Consider a sensor; a global positioning system (GPS) receiver for instance. In QtRO terms, the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> would be the process that directly interacts with the GPS hardware and derives your current location. The location would be exposed as <db:link xlink:href="qobject.xml">QObject</db:link> properties, and the periodic updates to the location would update the properties and emit property changed signals. <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>s would be created in other processes and would always know your current location, but would not need any of the logic to compute the location from the sensor data. Connecting to the location changed signal on the <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> would work as expected, as the signal emitted from the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> would trigger the signal emission on every <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>.</db:para>
<db:para>Another example of QtRO usage would be for a service (for example, access to a printer). The <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> is again the process controlling the printer directly. Here you would again likely have properties monitoring the ink levels or whether the printer is currently busy. However, the key feature, being able to print something, needs to be passed back to the printer. This aligns with the Qt slot mechanism, which QtRO uses as the way for <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>s to make calls on the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link>. In effect, properties and signals go from <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> to <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>s, while slots go from (a) <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> to the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link>. Assuming a print request is accepted, the printer status would change, which would change the status property. This would then be reported to all <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>s.</db:para>
</db:article>
