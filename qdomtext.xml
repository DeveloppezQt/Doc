<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDomText Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdomtext.xml">QDomText</db:link> class represents text data in the parsed XML document.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDomText</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Xml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Xml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdomcharacterdata.xml" xlink:role="class">QDomCharacterData</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdomcdatasection.xml" xlink:role="class">QDomCDATASection</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDomText is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can split the text in a <db:link xlink:href="qdomtext.xml">QDomText</db:link> object over two <db:link xlink:href="qdomtext.xml">QDomText</db:link> objects with <db:link xlink:href="qdomtext.xml#splitText">splitText</db:link>().</db:para>
<db:para>For further information about the Document Object Model see <db:link xlink:href="http://www.w3.org/TR/REC-DOM-Level-1/">Level 1</db:link> and <db:link xlink:href="http://www.w3.org/TR/DOM-Level-2-Core/">Level 2 Core</db:link>. For a more general introduction of the DOM implementation see the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDomText">
<db:title>QDomText::QDomText()</db:title>
<db:constructorsynopsis>
<db:methodname>QDomText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomText()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qdomtext.xml">QDomText</db:link> object.</db:para>
<db:para>To construct a <db:link xlink:href="qdomtext.xml">QDomText</db:link> with content, use <db:link xlink:href="qdomdocument.xml#createTextNode">QDomDocument::createTextNode</db:link>().</db:para>
</db:section>
<db:section xml:id="QDomText-1">
<db:title>QDomText::QDomText(const QDomText &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDomText</db:methodname>
<db:methodparam>
<db:type>const QDomText &amp;</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomText(const QDomText &amp;x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">x</db:code>.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
<db:section xml:id="nodeType">
<db:title>QDomNode::NodeType QDomText::nodeType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDomNode::NodeType</db:type>
<db:methodname>nodeType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode::NodeType nodeType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>TextNode</db:code>.</db:para>
</db:section>
<db:section xml:id="splitText">
<db:title>QDomText QDomText::splitText(int <db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomText</db:type>
<db:methodname>splitText</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomText splitText(int offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Splits this DOM text object into two <db:link xlink:href="qdomtext.xml">QDomText</db:link> objects. This object keeps its first <db:code role="parameter">offset</db:code> characters and the second (newly created) object is inserted into the document tree after this object with the remaining characters.</db:para>
<db:para>The function returns the newly created object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#normalize">QDomNode::normalize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDomText &amp;QDomText::operator=(const QDomText &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomText &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDomText &amp;</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomText &amp; operator=(const QDomText &amp;x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">x</db:code> to this DOM text.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
