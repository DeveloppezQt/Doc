<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_add_resources</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Compiles binary resources into source code.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-add-resources"/>
<db:para>Compiles binary resources into source code.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_add_resources(&amp;lt;VAR&amp;gt; file1.qrc [file2.qrc ...]
                  [OPTIONS ...])
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use qt6_add_resources() instead. It supports the same set of arguments as this command.</db:para>
<db:para>Since 6.0:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_resources(&amp;lt;TARGET&amp;gt; &amp;lt;RESOURCE_NAME&amp;gt;
                  [PREFIX &amp;lt;PATH&amp;gt;]
                  [LANG &amp;lt;LANGUAGE&amp;gt;]
                  [BASE &amp;lt;PATH&amp;gt;]
                  [OUTPUT_TARGETS &amp;lt;VARIABLE_NAME&amp;gt;]
                  [FILES ...] [OPTIONS ...])
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use qt6_add_resources() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>To add resources, you can pass either a variable name or a target as the first argument of the command.</db:para>
<db:para>When passing a variable name as first argument, qt_add_resources creates source code from Qt resource files using the <db:link xlink:href="rcc.xml">Resource Compiler (rcc)</db:link>. Paths to the generated source files are added to &lt;VAR&gt;.</db:para>
<db:para>When passing a target as first argument, the function creates a resource with the name RESOURCE_NAME, containing the specified FILES. The resource is automatically linked into TARGET.</db:para>
<db:para>For embedding bigger resources, see <db:link xlink:href="qt-add-bigresources.xml">qt_add_big_resources</db:link>.</db:para>
<db:para>See <db:link xlink:href="resources.xml">The Qt Resource System</db:link> for a general description of Qt resources.</db:para>
</db:section>
<db:section xml:id="arguments-of-the-target-based-variant">
<db:title>Arguments of the target-based variant</db:title>
<db:para>PREFIX specifies a path prefix under which all files of this resource are accessible from C++ code. This corresponds to the XML attribute prefix of the .qrc file format. If PREFIX is not given, the target property <db:link xlink:href="cmake-target-property-qt-resource-prefix.xml#cmake-target-property-qt-resource-prefix">QT_RESOURCE_PREFIX</db:link> is used.</db:para>
<db:para>LANG specifies the locale of this resource. This corresponds to the XML attribute lang of the .qrc file format.</db:para>
<db:para>BASE is a path prefix that denotes the root point of the file's alias. For example, if BASE is &quot;assets&quot; and FILES is &quot;assets/images/logo.png&quot;, then the alias of that file is &quot;images/logo.png&quot;.</db:para>
<db:para>Alias settings for files need to be set via the QT_RESOURCE_ALIAS source file property.</db:para>
<db:para>When using this command with static libraries, one or more special targets will be generated. Should you wish to perform additional processing on these targets, pass a variable name to the OUTPUT_TARGETS parameter. The qt_add_resources function stores the names of the special targets in the specified variable.</db:para>
</db:section>
<db:section xml:id="arguments-of-both-variants">
<db:title>Arguments of both variants</db:title>
<db:para>You can set additional OPTIONS that should be added to the rcc calls. You can find possible options in the <db:link xlink:href="rcc.xml">rcc documentation</db:link>.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Variable variant, using a .qrc file:</db:para>
<db:programlisting language="cpp">set(SOURCES main.cpp)
qt_add_resources(SOURCES example.qrc)
add_executable(myapp ${SOURCES})
</db:programlisting>
<db:para>Target variant, using immediate resources:</db:para>
<db:programlisting language="cpp">add_executable(myapp main.cpp)
qt_add_resources(myapp &quot;images&quot;
    PREFIX &quot;/images&quot;
    FILES image1.png image2.png)
</db:programlisting>
</db:section>
<db:section xml:id="caveats">
<db:title>Caveats</db:title>
<db:para>When adding multiple resources, RESOURCE_NAME must be unique across all resources linked into the final target.</db:para>
<db:para>This especially affects static builds. There, the same resource name in different static libraries conflict in the consuming target.</db:para>
</db:section>
</db:article>
