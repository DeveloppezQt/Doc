<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QElapsedTimer Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> class provides a fast way to calculate elapsed times.</db:para>
<db:para>This class was introduced in Qt 4.7.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QElapsedTimer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QElapsedTimer is part of <db:simplelist><db:member>tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> class is usually used to quickly calculate how much time has elapsed between two events. Its API is similar to that of <db:link xlink:href="qtime.xml">QTime</db:link>, so code that was using that can be ported quickly to the new class.</db:para>
<db:para>However, unlike <db:link xlink:href="qtime.xml">QTime</db:link>, <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> tries to use monotonic clocks if possible. This means it's not possible to convert <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> objects to a human-readable time.</db:para>
<db:para>The typical use-case for the class is to determine how much time was spent in a slow operation. The simplest example of such a case is for debugging purposes, as in the following example:</db:para>
<db:programlisting language="cpp">    QElapsedTimer timer;
    timer.start();

    slowOperation1();

    qDebug() &lt;&lt; &quot;The slow operation took&quot; &lt;&lt; timer.elapsed() &lt;&lt; &quot;milliseconds&quot;;
</db:programlisting>
<db:para>In this example, the timer is started by a call to <db:link xlink:href="qelapsedtimer.xml#start">start</db:link>() and the elapsed timer is calculated by the <db:link xlink:href="qelapsedtimer.xml#elapsed">elapsed</db:link>() function.</db:para>
<db:para>The time elapsed can also be used to recalculate the time available for another operation, after the first one is complete. This is useful when the execution must complete within a certain time period, but several steps are needed. The <db:code>waitFor</db:code>-type functions in <db:link xlink:href="qiodevice.xml">QIODevice</db:link> and its subclasses are good examples of such need. In that case, the code could be as follows:</db:para>
<db:programlisting language="cpp">void executeSlowOperations(int timeout)
{
    QElapsedTimer timer;
    timer.start();
    slowOperation1();

    int remainingTime = timeout - timer.elapsed();
    if (remainingTime &gt; 0)
        slowOperation2(remainingTime);
}
</db:programlisting>
<db:para>Another use-case is to execute a certain operation for a specific timeslice. For this, <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> provides the <db:link xlink:href="qelapsedtimer.xml#hasExpired">hasExpired</db:link>() convenience function, which can be used to determine if a certain number of milliseconds has already elapsed:</db:para>
<db:programlisting language="cpp">void executeOperationsForTime(int ms)
{
    QElapsedTimer timer;
    timer.start();

    while (!timer.hasExpired(ms))
        slowOperation1();
}
</db:programlisting>
<db:section xml:id="reference-clocks">
<db:title>Reference Clocks</db:title>
<db:para><db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> will use the platform's monotonic reference clock in all platforms that support it (see <db:link xlink:href="qelapsedtimer.xml#isMonotonic">QElapsedTimer::isMonotonic</db:link>()). This has the added benefit that <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> is immune to time adjustments, such as the user correcting the time. Also unlike <db:link xlink:href="qtime.xml">QTime</db:link>, <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> is immune to changes in the timezone settings, such as daylight saving periods.</db:para>
<db:para>On the other hand, this means <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> values can only be compared with other values that use the same reference. This is especially true if the time since the reference is extracted from the <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> object (<db:link xlink:href="qelapsedtimer.xml#msecsSinceReference">QElapsedTimer::msecsSinceReference</db:link>()) and serialised. These values should never be exchanged across the network or saved to disk, since there's no telling whether the computer node receiving the data is the same as the one originating it or if it has rebooted since.</db:para>
<db:para>It is, however, possible to exchange the value with other processes running on the same machine, provided that they also use the same reference clock. <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> will always use the same clock, so it's safe to compare with the value coming from another process in the same machine. If comparing to values produced by other APIs, you should check that the clock used is the same as <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> (see <db:link xlink:href="qelapsedtimer.xml#clockType">QElapsedTimer::clockType</db:link>()).</db:para>
<db:section xml:id="A32-bit-overflows">
<db:title>32-bit overflows</db:title>
<db:para>Some of the clocks used by <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> have a limited range and may overflow after hitting the upper limit (usually 32-bit). <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> deals with this overflow issue and presents a consistent timing. However, when extracting the time since reference from <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link>, two different processes in the same machine may have different understanding of how much time has actually elapsed.</db:para>
<db:para>The information on which clocks types may overflow and how to remedy that issue is documented along with the clock types.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
<db:member><db:link xlink:href="qtimer.xml">QTimer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ClockType-enum">
<db:title>enum QElapsedTimer::ClockType</db:title>
<db:para>This enum contains the different clock types that <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> may use.</db:para>
<db:para><db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> will always use the same clock type in a particular machine, so this value will not change during the lifetime of a program. It is provided so that <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> can be used with other non-Qt implementations, to guarantee that the same reference clock is being used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link></db:emphasis>::SystemTime</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The human-readable system time. This clock is not monotonic.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link></db:emphasis>::MonotonicClock</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The system's monotonic clock, usually found in Unix systems. This clock is monotonic and does not overflow.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link></db:emphasis>::TickCounter</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The system's tick counter, used on Windows systems. This clock may overflow.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link></db:emphasis>::MachAbsoluteTime</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The Mach kernel's absolute time (OS X and iOS). This clock is monotonic and does not overflow.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link></db:emphasis>::PerformanceCounter</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The high-resolution performance counter provided by Windows. This clock is monotonic and does not overflow.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="systemtime">
<db:title>SystemTime</db:title>
<db:para>The system time clock is purely the real time, expressed in milliseconds since Jan 1, 1970 at 0:00 UTC. It's equivalent to the value returned by the C and POSIX <db:code>time</db:code> function, with the milliseconds added. This clock type is currently only used on Unix systems that do not support monotonic clocks (see below).</db:para>
<db:para>This is the only non-monotonic clock that <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> may use.</db:para>
</db:section>
<db:section xml:id="monotonicclock">
<db:title>MonotonicClock</db:title>
<db:para>This is the system's monotonic clock, expressed in milliseconds since an arbitrary point in the past. This clock type is used on Unix systems which support POSIX monotonic clocks (<db:code>_POSIX_MONOTONIC_CLOCK</db:code>).</db:para>
<db:para>This clock does not overflow.</db:para>
</db:section>
<db:section xml:id="tickcounter">
<db:title>TickCounter</db:title>
<db:para>The tick counter clock type is based on the system's or the processor's tick counter, multiplied by the duration of a tick. This clock type is used on Windows platforms. If the high-precision performance counter is available on Windows, the <db:code>PerformanceCounter</db:code> clock type is used instead.</db:para>
<db:para>The TickCounter clock type is the only clock type that may overflow. Windows Vista and Windows Server 2008 support the extended 64-bit tick counter, which allows avoiding the overflow.</db:para>
<db:para>On Windows systems, the clock overflows after 2^32 milliseconds, which corresponds to roughly 49.7 days. This means two processes' reckoning of the time since the reference may be different by multiples of 2^32 milliseconds. When comparing such values, it's recommended that the high 32 bits of the millisecond count be masked off.</db:para>
</db:section>
<db:section xml:id="machabsolutetime">
<db:title>MachAbsoluteTime</db:title>
<db:para>This clock type is based on the absolute time presented by Mach kernels, such as that found on OS X. This clock type is presented separately from MonotonicClock since OS X and iOS are also Unix systems and may support a POSIX monotonic clock with values differing from the Mach absolute time.</db:para>
<db:para>This clock is monotonic and does not overflow.</db:para>
</db:section>
<db:section xml:id="performancecounter">
<db:title>PerformanceCounter</db:title>
<db:para>This clock uses the Windows functions <db:code>QueryPerformanceCounter</db:code> and <db:code>QueryPerformanceFrequency</db:code> to access the system's high-precision performance counter. Since this counter may not be available on all systems, <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> will fall back to the <db:code>TickCounter</db:code> clock automatically, if this clock cannot be used.</db:para>
<db:para>This clock is monotonic and does not overflow.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#clockType">clockType</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#isMonotonic">isMonotonic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QElapsedTimer">
<db:title>[since 5.4] QElapsedTimer::QElapsedTimer()</db:title>
<db:para>Constructs an invalid <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link>. A timer becomes valid once it has been started.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clockType">
<db:title>[static noexcept] QElapsedTimer::ClockType QElapsedTimer::clockType()</db:title>
<db:para>Returns the clock type that this <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> implementation uses.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#isMonotonic">isMonotonic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elapsed">
<db:title>[noexcept] qint64 QElapsedTimer::elapsed() const</db:title>
<db:para>Returns the number of milliseconds since this <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> was last started. Calling this function in a <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> that was invalidated will result in undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#restart">restart</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#invalidate">invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasExpired">
<db:title>[noexcept] bool QElapsedTimer::hasExpired(qint64 <db:emphasis>timeout</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> has already expired by <db:code role="parameter">timeout</db:code> milliseconds (that is, more than <db:code role="parameter">timeout</db:code> milliseconds have elapsed). The value of <db:code role="parameter">timeout</db:code> can be -1 to indicate that this timer does not expire, in which case this function will always return false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#elapsed">elapsed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidate">
<db:title>[noexcept] void QElapsedTimer::invalidate()</db:title>
<db:para>Marks this <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> object as invalid.</db:para>
<db:para>An invalid object can be checked with <db:link xlink:href="qelapsedtimer.xml#isValid">isValid</db:link>(). Calculations of timer elapsed since invalid data are undefined and will likely produce bizarre results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#restart">restart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isMonotonic">
<db:title>[static noexcept] bool QElapsedTimer::isMonotonic()</db:title>
<db:para>Returns true if this is a monotonic clock, false otherwise. See the information on the different clock types to understand which ones are monotonic.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#clockType">clockType</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#ClockType-enum">QElapsedTimer::ClockType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[noexcept] bool QElapsedTimer::isValid() const</db:title>
<db:para>Returns false if the timer has never been started or invalidated by a call to <db:link xlink:href="qelapsedtimer.xml#invalidate">invalidate</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#invalidate">invalidate</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#restart">restart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="msecsSinceReference">
<db:title>[noexcept] qint64 QElapsedTimer::msecsSinceReference() const</db:title>
<db:para>Returns the number of milliseconds between last time this <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> object was started and its reference clock's start.</db:para>
<db:para>This number is usually arbitrary for all clocks except the <db:link xlink:href="qelapsedtimer.xml#ClockType-enum">QElapsedTimer::SystemTime</db:link> clock. For that clock type, this number is the number of milliseconds since January 1st, 1970 at 0:00 UTC (that is, it is the Unix time expressed in milliseconds).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#clockType">clockType</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#elapsed">elapsed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="msecsTo">
<db:title>[noexcept] qint64 QElapsedTimer::msecsTo(const QElapsedTimer &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the number of milliseconds between this <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> and <db:code role="parameter">other</db:code>. If <db:code role="parameter">other</db:code> was started before this object, the returned value will be negative. If it was started later, the returned value will be positive.</db:para>
<db:para>The return value is undefined if this object or <db:code role="parameter">other</db:code> were invalidated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#secsTo">secsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#elapsed">elapsed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nsecsElapsed">
<db:title>[noexcept, since 4.8] qint64 QElapsedTimer::nsecsElapsed() const</db:title>
<db:para>Returns the number of nanoseconds since this <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> was last started. Calling this function in a <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> that was invalidated will result in undefined results.</db:para>
<db:para>On platforms that do not provide nanosecond resolution, the value returned will be the best estimate available.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#restart">restart</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#invalidate">invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restart">
<db:title>[noexcept] qint64 QElapsedTimer::restart()</db:title>
<db:para>Restarts the timer and returns the time elapsed since the previous start. This function is equivalent to obtaining the elapsed time with <db:link xlink:href="qelapsedtimer.xml#elapsed">elapsed</db:link>() and then starting the timer again with <db:link xlink:href="qelapsedtimer.xml#start">start</db:link>(), but it does so in one single operation, avoiding the need to obtain the clock value twice.</db:para>
<db:para>Restarting the timer makes it valid again.</db:para>
<db:para>The following example illustrates how to use this function to calibrate a parameter to a slow operation (for example, an iteration count) so that this operation takes at least 250 milliseconds:</db:para>
<db:programlisting language="cpp">    QElapsedTimer timer;

    int count = 1;
    timer.start();
    do {
        count *= 2;
        slowOperation2(count);
    } while (timer.restart() &lt; 250);

    return count;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#invalidate">invalidate</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#elapsed">elapsed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="secsTo">
<db:title>[noexcept] qint64 QElapsedTimer::secsTo(const QElapsedTimer &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the number of seconds between this <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> and <db:code role="parameter">other</db:code>. If <db:code role="parameter">other</db:code> was started before this object, the returned value will be negative. If it was started later, the returned value will be positive.</db:para>
<db:para>The return value is undefined if this object or <db:code role="parameter">other</db:code> were invalidated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#msecsTo">msecsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#elapsed">elapsed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>[noexcept] void QElapsedTimer::start()</db:title>
<db:para>Starts this timer. Once started, a timer value can be checked with <db:link xlink:href="qelapsedtimer.xml#elapsed">elapsed</db:link>() or <db:link xlink:href="qelapsedtimer.xml#msecsSinceReference">msecsSinceReference</db:link>().</db:para>
<db:para>Normally, a timer is started just before a lengthy operation, such as:</db:para>
<db:programlisting language="cpp">    QElapsedTimer timer;
    timer.start();

    slowOperation1();

    qDebug() &lt;&lt; &quot;The slow operation took&quot; &lt;&lt; timer.elapsed() &lt;&lt; &quot;milliseconds&quot;;
</db:programlisting>
<db:para>Also, starting a timer makes it valid again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qelapsedtimer.xml#restart">restart</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#invalidate">invalidate</db:link>()</db:member>
<db:member><db:link xlink:href="qelapsedtimer.xml#elapsed">elapsed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool QElapsedTimer::operator!=(const QElapsedTimer &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this object and <db:code role="parameter">other</db:code> contain different times.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool QElapsedTimer::operator==(const QElapsedTimer &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this object and <db:code role="parameter">other</db:code> contain the same time.</db:para>
</db:section>
</db:section>
</db:article>
