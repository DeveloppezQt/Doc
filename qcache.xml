<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCache Class</db:title>
<db:subtitle>template &lt;typename Key, typename T&gt; class QCache</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcache.xml">QCache</db:link> class is a template class that provides a cache.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCache</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCache is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcache.xml">QCache</db:link>&lt;Key, T&gt; defines a cache that stores objects of type T associated with keys of type Key. For example, here's the definition of a cache that stores objects of type Employee associated with an integer key:</db:para>
<db:programlisting language="cpp">QCache&lt;int, Employee&gt; cache;
</db:programlisting>
<db:para>Here's how to insert an object in the cache:</db:para>
<db:programlisting language="cpp">Employee *employee = new Employee;
employee-&gt;setId(37);
employee-&gt;setName(&quot;Richard Schmit&quot;);
...
cache.insert(employee-&gt;id(), employee);
</db:programlisting>
<db:para>The advantage of using <db:link xlink:href="qcache.xml">QCache</db:link> over some other key-based data structure (such as <db:link xlink:href="qmap.xml">QMap</db:link> or <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link>) is that <db:link xlink:href="qcache.xml">QCache</db:link> automatically takes ownership of the objects that are inserted into the cache and deletes them to make room for new objects, if necessary. When inserting an object into the cache, you can specify a <db:emphasis>cost</db:emphasis>, which should bear some approximate relationship to the amount of memory taken by the object. When the sum of all objects' costs (totalCost()) exceeds the cache's limit (maxCost()), <db:link xlink:href="qcache.xml">QCache</db:link> starts deleting objects in the cache to keep under the limit, starting with less recently accessed objects.</db:para>
<db:para>By default, <db:link xlink:href="qcache.xml">QCache</db:link>'s maxCost() is 100. You can specify a different value in the <db:link xlink:href="qcache.xml">QCache</db:link> constructor:</db:para>
<db:programlisting language="cpp">QCache&lt;int, MyDataStructure&gt; cache(5000);
</db:programlisting>
<db:para>Each time you call insert(), you can specify a cost as third argument (after the key and a pointer to the object to insert). After the call, the inserted object is owned by the <db:link xlink:href="qcache.xml">QCache</db:link>, which may delete it at any time to make room for other objects.</db:para>
<db:para>To look up objects in the cache, use object() or operator[](). This function looks up an object by its key, and returns either a pointer to the cached object (which is owned by the cache) or 0.</db:para>
<db:para>If you want to remove an object from the cache for a particular key, call remove(). This will also delete the object. If you want to remove an object from the cache without the <db:link xlink:href="qcache.xml">QCache</db:link> deleting it, use take().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link></db:member>
<db:member><db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link></db:member>
<db:member><db:link xlink:href="qmap.xml">QMap</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
