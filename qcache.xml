<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCache Class</db:title>
<db:subtitle>template &lt;typename Key, typename T&gt; class QCache</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcache.xml">QCache</db:link> class is a template class that provides a cache.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCache</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCache is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcache.xml">QCache</db:link>&lt;Key, T&gt; defines a cache that stores objects of type T associated with keys of type Key. For example, here's the definition of a cache that stores objects of type Employee associated with an integer key:</db:para>
<db:programlisting language="cpp">QCache&amp;lt;int, Employee&amp;gt; cache;
</db:programlisting>
<db:para>Here's how to insert an object in the cache:</db:para>
<db:programlisting language="cpp">Employee *employee = new Employee;
employee-&amp;gt;setId(37);
employee-&amp;gt;setName(&quot;Richard Schmit&quot;);
...
cache.insert(employee-&amp;gt;id(), employee);
</db:programlisting>
<db:para>The advantage of using <db:link xlink:href="qcache.xml">QCache</db:link> over some other key-based data structure (such as <db:link xlink:href="qmap.xml">QMap</db:link> or <db:link xlink:href="qhash.xml#qhash">QHash</db:link>) is that <db:link xlink:href="qcache.xml">QCache</db:link> automatically takes ownership of the objects that are inserted into the cache and deletes them to make room for new objects, if necessary. When inserting an object into the cache, you can specify a <db:emphasis>cost</db:emphasis>, which should bear some approximate relationship to the amount of memory taken by the object. When the sum of all objects' costs (<db:link xlink:href="qcache.xml#totalCost">totalCost</db:link>()) exceeds the cache's limit (<db:link xlink:href="qcache.xml#maxCost">maxCost</db:link>()), <db:link xlink:href="qcache.xml">QCache</db:link> starts deleting objects in the cache to keep under the limit, starting with less recently accessed objects.</db:para>
<db:para>By default, <db:link xlink:href="qcache.xml">QCache</db:link>'s <db:link xlink:href="qcache.xml#maxCost">maxCost</db:link>() is 100. You can specify a different value in the <db:link xlink:href="qcache.xml">QCache</db:link> constructor:</db:para>
<db:programlisting language="cpp">QCache&amp;lt;int, MyDataStructure&amp;gt; cache(5000);
</db:programlisting>
<db:para>Each time you call <db:link xlink:href="qcache.xml#insert">insert</db:link>(), you can specify a cost as third argument (after the key and a pointer to the object to insert). After the call, the inserted object is owned by the <db:link xlink:href="qcache.xml">QCache</db:link>, which may delete it at any time to make room for other objects.</db:para>
<db:para>To look up objects in the cache, use <db:link xlink:href="qcache.xml#object">object</db:link>() or operator[](). This function looks up an object by its key, and returns either a pointer to the cached object (which is owned by the cache) or nullptr.</db:para>
<db:para>If you want to remove an object from the cache for a particular key, call <db:link xlink:href="qcache.xml#remove">remove</db:link>(). This will also delete the object. If you want to remove an object from the cache without the <db:link xlink:href="qcache.xml">QCache</db:link> deleting it, use <db:link xlink:href="qcache.xml#take">take</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link></db:member>
<db:member><db:link xlink:href="qhash.xml#qhash">QHash</db:link></db:member>
<db:member><db:link xlink:href="qmap.xml">QMap</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCache-1">
<db:title>[explicit] QCache::QCache(qsizetype <db:emphasis>maxCost</db:emphasis> = 100)</db:title>
<db:constructorsynopsis>
<db:methodname>QCache</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>maxCost</db:parameter>
<db:initializer>100</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCache(qsizetype maxCost)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a cache whose contents will never have a total cost greater than <db:code role="parameter">maxCost</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QCache">
<db:title>QCache::~QCache()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCache</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCache()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the cache. Deletes all the objects in the cache.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QCache::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes all the objects in the cache.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qcache.xml#take">take</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QCache::contains(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the cache contains an object associated with key <db:code role="parameter">key</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#take">take</db:link>()</db:member>
<db:member><db:link xlink:href="qcache.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>qsizetype QCache::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qcache.xml#size">size</db:link>().</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>bool QCache::insert(const Key &amp;<db:emphasis>key</db:emphasis>, T *<db:emphasis>object</db:emphasis>, qsizetype <db:emphasis>cost</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>cost</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insert(const Key &amp;key, T *object, qsizetype cost)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">object</db:code> into the cache with key <db:code role="parameter">key</db:code> and associated cost <db:code role="parameter">cost</db:code>. Any object with the same key already in the cache will be removed.</db:para>
<db:para>After this call, <db:code role="parameter">object</db:code> is owned by the <db:link xlink:href="qcache.xml">QCache</db:link> and may be deleted at any time. In particular, if <db:code role="parameter">cost</db:code> is greater than <db:link xlink:href="qcache.xml#maxCost">maxCost</db:link>(), the object will be deleted immediately.</db:para>
<db:para>The function returns true if the object was inserted into the cache; otherwise it returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#take">take</db:link>()</db:member>
<db:member><db:link xlink:href="qcache.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QCache::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the cache contains no objects; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keys">
<db:title>QList&lt;Key&gt; QCache::keys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Key&gt;</db:type>
<db:methodname>keys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Key&gt; keys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the keys in the cache.</db:para>
</db:section>
<db:section xml:id="maxCost">
<db:title>qsizetype QCache::maxCost() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>maxCost</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype maxCost() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum allowed total cost of the cache.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#setMaxCost">setMaxCost</db:link>()</db:member>
<db:member><db:link xlink:href="qcache.xml#totalCost">totalCost</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="object">
<db:title>T *QCache::object(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>object</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * object(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the object associated with key <db:code role="parameter">key</db:code>, or nullptr if the key does not exist in the cache.</db:para>
<db:warning>
<db:para>The returned object is owned by <db:link xlink:href="qcache.xml">QCache</db:link> and may be deleted at any time.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#take">take</db:link>()</db:member>
<db:member><db:link xlink:href="qcache.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>bool QCache::remove(const Key &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool remove(const Key &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes the object associated with key <db:code role="parameter">key</db:code>. Returns true if the object was found in the cache; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#take">take</db:link>()</db:member>
<db:member><db:link xlink:href="qcache.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaxCost">
<db:title>void QCache::setMaxCost(qsizetype <db:emphasis>cost</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaxCost</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>cost</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaxCost(qsizetype cost)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum allowed total cost of the cache to <db:code role="parameter">cost</db:code>. If the current total cost is greater than <db:code role="parameter">cost</db:code>, some objects are deleted immediately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#maxCost">maxCost</db:link>()</db:member>
<db:member><db:link xlink:href="qcache.xml#totalCost">totalCost</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qsizetype QCache::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of objects in the cache.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="take">
<db:title>T *QCache::take(const Key &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T *</db:type>
<db:methodname>take</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * take(const Key &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Takes the object associated with key <db:code role="parameter">key</db:code> out of the cache without deleting it. Returns a pointer to the object taken out, or 0 if the key does not exist in the cache.</db:para>
<db:para>The ownership of the returned object is passed to the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="totalCost">
<db:title>qsizetype QCache::totalCost() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>totalCost</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype totalCost() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the total cost of the objects in the cache.</db:para>
<db:para>This value is normally below <db:link xlink:href="qcache.xml#maxCost">maxCost</db:link>(), but <db:link xlink:href="qcache.xml">QCache</db:link> makes an exception for Qt's <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link> classes. If a cached object shares its internal data with another instance, <db:link xlink:href="qcache.xml">QCache</db:link> may keep the object lying around, possibly contributing to making totalCost() larger than <db:link xlink:href="qcache.xml#maxCost">maxCost</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml#setMaxCost">setMaxCost</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>T *QCache::operator[](const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * operator[](const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the object associated with key <db:code role="parameter">key</db:code>, or nullptr if the key does not exist in the cache.</db:para>
<db:para>This is the same as <db:link xlink:href="qcache.xml#object">object</db:link>().</db:para>
<db:warning>
<db:para>The returned object is owned by <db:link xlink:href="qcache.xml">QCache</db:link> and may be deleted at any time.</db:para>
</db:warning>
</db:section>
</db:section>
</db:article>
