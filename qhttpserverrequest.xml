<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHttpServerRequest Class</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates an HTTP request.</db:para>
<db:para>This class was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHttpServerRequest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS HttpServer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::HttpServer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += httpserver</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>API for accessing the different parameters of an incoming request.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Method-enum">
<db:title>enum QHttpServerRequest::Method</db:title>
<db:bridgehead renderas="sect2">flags QHttpServerRequest::Methods</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Method</db:enumname>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Get</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Put</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Delete</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Post</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Head</db:enumidentifier>
<db:enumvalue>0x0010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Options</db:enumidentifier>
<db:enumvalue>0x0020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Patch</db:enumidentifier>
<db:enumvalue>0x0040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Connect</db:enumidentifier>
<db:enumvalue>0x0080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Trace</db:enumidentifier>
<db:enumvalue>0x0100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnyKnown</db:enumidentifier>
<db:enumvalue>Get | Put | Delete | Post | Head | Options | Patch | Connect | Trace</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QHttpServerRequest::Methods</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum type specifies an HTTP request method:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>An unknown method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Get</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>HTTP GET method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Put</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>HTTP PUT method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Delete</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>HTTP DELETE method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Post</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>HTTP POST method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Head</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>HTTP HEAD method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Options</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>HTTP OPTIONS method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Patch</db:code></db:para>
</db:td>
<db:td><db:code>0x0040</db:code></db:td>
<db:td>
<db:para>HTTP PATCH method (<db:link xlink:href="https://www.rfc-editor.org/rfc/rfc5789">RFC 5789</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Connect</db:code></db:para>
</db:td>
<db:td><db:code>0x0080</db:code></db:td>
<db:td>
<db:para>HTTP CONNECT method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::Trace</db:code></db:para>
</db:td>
<db:td><db:code>0x0100</db:code></db:td>
<db:td>
<db:para>HTTP TRACE method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:emphasis>::<db:emphasis role="bold">Method</db:emphasis>::AnyKnown</db:code></db:para>
</db:td>
<db:td><db:code>Get | Put | Delete | Post | Head | Options | Patch | Connect | Trace</db:code></db:td>
<db:td>
<db:para>Combination of all known methods.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Methods</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Method&gt;. </db:code>It stores an OR combination of <db:code>Method</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QHttpServerRequest">
<db:title>QHttpServerRequest::~QHttpServerRequest()</db:title>
<db:destructorsynopsis>
<db:methodname>~QHttpServerRequest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHttpServerRequest()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a <db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link></db:para>
</db:section>
<db:section xml:id="body">
<db:title>QByteArray QHttpServerRequest::body() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>body</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray body() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the body of the request.</db:para>
</db:section>
<db:section xml:id="headers">
<db:title>QList&lt;QPair&lt;QByteArray, QByteArray&gt;&gt; QHttpServerRequest::headers() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPair&lt;QByteArray, QByteArray&gt;&gt;</db:type>
<db:methodname>headers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPair&lt;QByteArray, QByteArray&gt;&gt; headers() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all the request headers.</db:para>
</db:section>
<db:section xml:id="localAddress">
<db:title>[since 6.5] QHostAddress QHttpServerRequest::localAddress() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHostAddress</db:type>
<db:methodname>localAddress</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostAddress localAddress() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the host address of the local socket which received the request.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="localPort">
<db:title>[since 6.5] quint16 QHttpServerRequest::localPort() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint16</db:type>
<db:methodname>localPort</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 localPort() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the port of the local socket which received the request.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="method">
<db:title>QHttpServerRequest::Method QHttpServerRequest::method() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHttpServerRequest::Method</db:type>
<db:methodname>method</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerRequest::Method method() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the method of the request.</db:para>
</db:section>
<db:section xml:id="query">
<db:title>QUrlQuery QHttpServerRequest::query() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrlQuery</db:type>
<db:methodname>query</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrlQuery query() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the query in the request.</db:para>
</db:section>
<db:section xml:id="remoteAddress">
<db:title>QHostAddress QHttpServerRequest::remoteAddress() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHostAddress</db:type>
<db:methodname>remoteAddress</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostAddress remoteAddress() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the address of the origin host of the request.</db:para>
</db:section>
<db:section xml:id="remotePort">
<db:title>[since 6.5] quint16 QHttpServerRequest::remotePort() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint16</db:type>
<db:methodname>remotePort</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 remotePort() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the port of the origin host of the request.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="sslConfiguration">
<db:title>[since 6.7] QSslConfiguration QHttpServerRequest::sslConfiguration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSslConfiguration</db:type>
<db:methodname>sslConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslConfiguration sslConfiguration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the configuration of the established TLS connection. The configurations will return true for isNull() if the connection is not using TLS.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="url">
<db:title>QUrl QHttpServerRequest::url() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>url</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl url() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the URL the request asked for.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QByteArray QHttpServerRequest::value(const QByteArray &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray value(const QByteArray &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the combined value of all headers with the named <db:code role="parameter">key</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QHttpServerRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHttpServerRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QHttpServerRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes information about <db:code role="parameter">request</db:code> to the <db:code role="parameter">debug</db:code> stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml">QDebug</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
