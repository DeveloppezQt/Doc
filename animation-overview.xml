<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The Animation Framework</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the Animation Framework.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The animation framework provides an easy way to animate your GUI elements. It enables you to animate a Qt property value of a widget or <db:link xlink:href="qobject.xml">QObject</db:link>. Most of the features offered by the framework are also available in <db:link xlink:href="">Qt Quick</db:link>, where it's possible to define animations in a declarative way.</db:para>
<db:para>This overview explains the framework's architecture, with examples that demonstrate the common techniques used for animating <db:link xlink:href="qobject.xml">QObject</db:link> and GUI elements.</db:para>
<db:section xml:id="the-animation-architecture">
<db:title>The Animation architecture</db:title>
<db:para>The following diagram shows the most important classes provided by the framework:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/animations-architecture.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>It includes the <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> class, which provides the necessary foundation for animations. This class defines the generic properties for all animations supported by the framework. For example, the ability to start, stop, and pause an animation. The class also receives the time change notifications.</db:para>
<db:para>The framework further provides the <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> and <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> classes, which build on their base case, <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>. Next in the hierarchy is <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link>, which is derived from <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link>, and it lets you animate a Qt property of a widget or <db:link xlink:href="qobject.xml">QObject</db:link>. The class performs interpolation on the property value using an easing curve. With these in place, you just need a <db:link xlink:href="qobject.xml">QObject</db:link> class with a Qt property value that you can animate.</db:para>
<db:note>
<db:para>It is required that the target object you are animating is a <db:link xlink:href="qobject.xml">QObject</db:link> or its subclass. This is necessary as the animation framework depends on the <db:link xlink:href="metaobjects.xml">meta-object system</db:link> for all the information about the object it is animating.</db:para>
</db:note>
<db:para>Complex animations can be constructed by building a tree structure of <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>s, where the tree is a <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> that contains other animations. These animation groups can also contain subgroups representing different groups or animations, such as <db:link xlink:href="qparallelanimationgroup.xml">QParallelAnimationGroup</db:link> and <db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link>.</db:para>
<db:para>Behind the scenes, all animations are controlled by a global timer, which sends <db:link xlink:href="qabstractanimation.xml#updateCurrentTime">updates</db:link> about all animations that are running.</db:para>
<db:para>For detailed information of these individual classes' and their roles in the framework, refer to their documentation.</db:para>
</db:section>
<db:section xml:id="classes-offered-by-the-framework">
<db:title>Classes offered by the framework</db:title>
<db:para>These classes provide the necessary infrastructure to create both simple and complex animations.</db:para>
<db:variablelist role="animation">
<db:varlistentry>
<db:term><db:link xlink:href="qabstractanimation.xml" xlink:role="class">QAbstractAnimation</db:link></db:term>
<db:listitem>
<db:para>The QAbstractAnimation class is the base of all animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qanimationgroup.xml" xlink:role="class">QAnimationGroup</db:link></db:term>
<db:listitem>
<db:para>The QAnimationGroup class is an abstract base class for groups of animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qeasingcurve.xml" xlink:role="class">QEasingCurve</db:link></db:term>
<db:listitem>
<db:para>The QEasingCurve class provides easing curves for controlling animation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qparallelanimationgroup.xml" xlink:role="class">QParallelAnimationGroup</db:link></db:term>
<db:listitem>
<db:para>The QParallelAnimationGroup class provides a parallel group of animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpauseanimation.xml" xlink:role="class">QPauseAnimation</db:link></db:term>
<db:listitem>
<db:para>The QPauseAnimation class provides a pause for QSequentialAnimationGroup.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpropertyanimation.xml" xlink:role="class">QPropertyAnimation</db:link></db:term>
<db:listitem>
<db:para>The QPropertyAnimation class animates Qt properties.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsequentialanimationgroup.xml" xlink:role="class">QSequentialAnimationGroup</db:link></db:term>
<db:listitem>
<db:para>The QSequentialAnimationGroup class provides a sequential group of animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtimeline.xml" xlink:role="class">QTimeLine</db:link></db:term>
<db:listitem>
<db:para>The QTimeLine class provides a timeline for controlling animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qvariantanimation.xml" xlink:role="class">QVariantAnimation</db:link></db:term>
<db:listitem>
<db:para>The QVariantAnimation class provides a base class for animations.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="animating-qt-properties">
<db:title>Animating Qt properties</db:title>
<db:para>As the <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> class can interpolate on Qt properties, it is used often. In fact, its superclass—<db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link>—provides an abstract implementation of <db:link xlink:href="qvariantanimation.xml#updateCurrentValue">updateCurrentValue</db:link>(), which does not change any value unless you change it on the <db:link xlink:href="qvariantanimation.xml#valueChanged">valueChanged signal</db:link>.</db:para>
<db:para>The framework lets you animate the Qt properties of the existing classes in Qt. For example, the QWidget class—can be embedded in a QGraphicsView—has properties for its bounds, colors, and so on. The following example demonstrates how you can animate a QPushButton widget:</db:para>
<db:programlisting language="cpp">#include &lt;QApplication&gt;
#include &lt;QPushButton&gt;
#include &lt;QPropertyAnimation&gt;

class MyButtonWidget : public QWidget
{
public:
    MyButtonWidget(QWidget *parent = nullptr);
};

MyButtonWidget::MyButtonWidget(QWidget *parent) : QWidget(parent)
{
    QPushButton *button = new QPushButton(tr(&quot;Animated Button&quot;), this);
    QPropertyAnimation *anim = new QPropertyAnimation(button, &quot;pos&quot;, this);
    anim-&gt;setDuration(10000);
    anim-&gt;setStartValue(QPoint(0, 0));
    anim-&gt;setEndValue(QPoint(100, 250));
    anim-&gt;start();
}

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    MyButtonWidget buttonAnimWidget;
    buttonAnimWidget.resize(QSize(800, 600));
    buttonAnimWidget.show();
    return a.exec();
}
</db:programlisting>
<db:para>The example animates the pos Qt property of a QPushButton, to move it from the top–left corner of the screen to the end position (250, 250), in 10 seconds (10000 milliseconds).</db:para>
<db:para>It uses the linear interpolation method to control the speed of animation between the start and end values. Try adding another value in–between the start and end value to see how they are interpolated. This time use the <db:link xlink:href="qvariantanimation.xml#setKeyValueAt">QPropertyAnimation::setKeyValueAt</db:link>() function to add these values:</db:para>
<db:programlisting language="cpp">...
anim-&gt;setDuration(10000);
anim-&gt;setKeyValueAt(0, QPoint(0, 0));
anim-&gt;setKeyValueAt(0.8, QPoint(250, 250));
anim-&gt;setKeyValueAt(1, QPoint(0, 0));
...
</db:programlisting>
<db:para>In this example, the animation moves the button to (250, 250) in 8 seconds, and moves it back to its original position in the remaining 2 seconds. The button's movement is linear-interpolated between these points.</db:para>
<db:para>You can also animate a <db:link xlink:href="qobject.xml">QObject</db:link>'s value that is not declared as a Qt property, if the value has a setter method. In such cases, derive a new class from the class that contains the value, and add a Qt property for that value with the setter.</db:para>
<db:note>
<db:para>Each Qt property requires a getter also, so you should provide a getter if that is not defined.</db:para>
</db:note>
<db:programlisting language="cpp">class MyGraphicsRectItem : public QObject, public QGraphicsRectItem
{
    Q_OBJECT
    Q_PROPERTY(QPointF pos READ pos WRITE setPos)
};
</db:programlisting>
<db:para>In this example, the MyGraphicsRectItem derives from QGraphicsRectItem and <db:link xlink:href="qobject.xml">QObject</db:link>, and defines the pos property. You can animate the item's pos even if QGraphicsRectItem does not provide the pos property.</db:para>
<db:para>For a general introduction to the Qt property system, refer to <db:link xlink:href="properties.xml">Qt's Property System</db:link>.</db:para>
</db:section>
<db:section xml:id="animations-and-the-graphics-view-framework">
<db:title>Animations and the Graphics View Framework</db:title>
<db:para><db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> can also be used to animate a QGraphicsItem, which does not inherit <db:link xlink:href="qobject.xml">QObject</db:link>. In such cases, you derive a class from the graphics item that you want to animate. This derived class should also inherit form <db:link xlink:href="qobject.xml">QObject</db:link> to enable using <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> on a QGraphicsItem. The following example shows how this is done:</db:para>
<db:programlisting language="cpp">class Pixmap : public QObject, public QGraphicsPixmapItem
{
    Q_OBJECT
    Q_PROPERTY(QPointF pos READ pos WRITE setPos)
    ...
}
</db:programlisting>
<db:note>
<db:para>You can also derive from QGraphicsWidget, which already is a <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
</db:note>
<db:para>As described in the previous section, you need to define properties that you want to animate. The derived class must inherit from <db:link xlink:href="qobject.xml">QObject</db:link> first as the meta-object system requires it.</db:para>
</db:section>
<db:section xml:id="easing-curves">
<db:title>Easing curves</db:title>
<db:para>A <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> performs linear interpolation between the start and end property values. In addition to adding more key values to the animation, you can also choose an easing curve to control the speed of interpolation between 0 and 1, without changing the path.</db:para>
<db:programlisting language="cpp">MyButtonWidget::MyButtonWidget(QWidget *parent) : QWidget(parent)
{
    QPushButton *button = new QPushButton(tr(&quot;Animated Button&quot;), this);
    QPropertyAnimation *anim = new QPropertyAnimation(button, &quot;pos&quot;, this);
    anim-&gt;setDuration(10000);
    anim-&gt;setStartValue(QPoint(0, 0));
    anim-&gt;setEndValue(QPoint(100, 250));
    anim-&gt;setEasingCurve(QEasingCurve::OutBounce);
    anim-&gt;start();
}
</db:programlisting>
<db:para>In this example, the animation follows a curve that makes the button bounce like a ball. <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link> offers a large collection of curves to choose from the <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::Type</db:link> enum. If you want to use another curve that is not available, implement one yourself and register it with <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link>.</db:para>
</db:section>
<db:section xml:id="grouping-animations">
<db:title>Grouping animations</db:title>
<db:para>An application often contains more than one animation. For example, it wants to move more than one graphics item simultaneously or move them in sequence after each other.</db:para>
<db:para>The subclasses of <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link>—<db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> and <db:link xlink:href="qparallelanimationgroup.xml">QParallelAnimationGroup</db:link>—are containers for other animations so that these animations can be animated either in sequence or parallel. The <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> does not animate properties, but it gets notified of time changes periodically. This enables it to forward those time changes to the animation groups, which control when their animations are played.</db:para>
<db:para>The two following examples demonstrate the use of both <db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> and <db:link xlink:href="qparallelanimationgroup.xml">QParallelAnimationGroup</db:link>:</db:para>
<db:programlisting language="cpp">MyButtonWidget::MyButtonWidget(QWidget *parent) : QWidget(parent)
{
    QPushButton *bonnie = new QPushButton(tr(&quot;Bonnie&quot;), this);
    QPushButton *clyde = new QPushButton(tr(&quot;Clyde&quot;), this);

    QPropertyAnimation *anim1 = new QPropertyAnimation(bonnie, &quot;pos&quot;, this);
    anim1-&gt;setDuration(3000);
    anim1-&gt;setStartValue(QPoint(0, 0));
    anim1-&gt;setEndValue(QPoint(100, 250));

    QPropertyAnimation *anim2 = new QPropertyAnimation(clyde, &quot;pos&quot;, this);
    anim2-&gt;setDuration(3000);
    anim2-&gt;setStartValue(QPoint(100, 250));
    anim2-&gt;setEndValue(QPoint(500, 500));

    QParallelAnimationGroup *parallelAnim = new QParallelAnimationGroup;
    parallelAnim-&gt;addAnimation(anim1);
    parallelAnim-&gt;addAnimation(anim2);
    parallelAnim-&gt;start();
}
</db:programlisting>
<db:para>A parallel group plays more than one animation at the same time. Its <db:link xlink:href="qabstractanimation.xml#start">start</db:link>() function starts all animations that are part of the group.</db:para>
<db:programlisting language="cpp">MyButtonWidget::MyButtonWidget(QWidget *parent) : QWidget(parent)
{
    QPushButton *bonnie = new QPushButton(tr(&quot;Bonnie&quot;), this);
    QPushButton *clyde = new QPushButton(tr(&quot;Clyde&quot;), this);

    QPropertyAnimation *anim1 = new QPropertyAnimation(bonnie, &quot;pos&quot;, this);
    anim1-&gt;setDuration(3000);
    anim1-&gt;setStartValue(QPoint(0, 0));
    anim1-&gt;setEndValue(QPoint(100, 250));

    QPropertyAnimation *anim2 = new QPropertyAnimation(clyde, &quot;pos&quot;, this);
    anim2-&gt;setDuration(3000);
    anim2-&gt;setStartValue(QPoint(0, 0));
    anim2-&gt;setEndValue(QPoint(200, 250));

    QSequentialAnimationGroup *sequenceAnim = new QSequentialAnimationGroup;
    sequenceAnim-&gt;addAnimation(anim1);
    sequenceAnim-&gt;addAnimation(anim2);
    sequenceAnim-&gt;start();
}
</db:programlisting>
<db:para>As the name suggests, a <db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> plays its animations in sequence. It starts the next animation in the list after the previous finishes.</db:para>
<db:para>A group is an animation itself, so you can add it to another group. This way, building an animation tree, which define when the animations are played in relation to each other.</db:para>
</db:section>
<db:section xml:id="object-ownership">
<db:title>Object ownership</db:title>
<db:para>A <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> should always have a parent that controls its lifespan. A typical application may include several animations that are grouped, where the animation group takes ownership of those animations. An independent <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> must be explicitly assigned a parent to control its lifespan. In the following example, you can see that an independent <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> has the QApplication instance as its parent:</db:para>
<db:programlisting language="cpp">#include &lt;QApplication&gt;
#include &lt;QPushButton&gt;
#include &lt;QPropertyAnimation&gt;

class MyButtonWidget : public QWidget
{
public:
    MyButtonWidget(QWidget *parent = nullptr);
};

MyButtonWidget::MyButtonWidget(QWidget *parent) : QWidget(parent)
{
    QPushButton *button = new QPushButton(tr(&quot;Animated Button&quot;), this);
    QPropertyAnimation *anim = new QPropertyAnimation(button, &quot;pos&quot;, this);
    anim-&gt;setDuration(10000);
    anim-&gt;setStartValue(QPoint(0, 0));
    anim-&gt;setEndValue(QPoint(100, 250));
    anim-&gt;start();
}

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    MyButtonWidget buttonAnimWidget;
    buttonAnimWidget.resize(QSize(800, 600));
    buttonAnimWidget.show();
    return a.exec();
}
</db:programlisting>
<db:note>
<db:para>You can also control the animation's lifespan by choosing a <db:link xlink:href="qabstractanimation.xml#DeletionPolicy-enum">delete policy</db:link> while starting it.</db:para>
</db:note>
</db:section>
</db:article>
