<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The Animation Framework</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the Animation Framework.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The animation framework aims to provide an easy way for creating animated and smooth GUIs. By animating Qt properties, the framework provides great freedom for animating widgets and other <db:link xlink:href="qobject.xml">QObject</db:link>s. The framework can also be used with the Graphics View framework. Many of the concepts available in the animation framework are also available in <db:link xlink:href="">Qt Quick</db:link>, where it offers a declarative way of defining animations. Much of the knowledge acquired about the animation framework can be applied to <db:link xlink:href="">Qt Quick</db:link>.</db:para>
<db:para>In this overview, we explain the basics of its architecture. We also show examples of the most common techniques that the framework allows for animating <db:link xlink:href="qobject.xml">QObject</db:link>s and graphics items.</db:para>
<db:section xml:id="the-animation-architecture">
<db:title>The Animation Architecture</db:title>
<db:para>We will in this section take a high-level look at the animation framework's architecture and how it is used to animate Qt properties. The following diagram shows the most important classes in the animation framework.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/animations-architecture.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The animation framework foundation consists of the base class <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>, and its two subclasses <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> and <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link>. <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> is the ancestor of all animations. It represents basic properties that are common for all animations in the framework; notably, the ability to start, stop, and pause an animation. It is also receives the time change notifications.</db:para>
<db:para>The animation framework further provides the <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> class, which inherits <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> and performs animation of a Qt property, which is part of Qt's <db:link xlink:href="metaobjects.xml">meta-object system</db:link>. The class performs an interpolation over the property using an easing curve. So when you want to animate a value, you can declare it as a property and make your class a <db:link xlink:href="qobject.xml">QObject</db:link>. Note that this gives us great freedom in animating already existing widgets and other <db:link xlink:href="qobject.xml">QObject</db:link>s.</db:para>
<db:para>Complex animations can be constructed by building a tree structure of <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>s. The tree is built by using <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link>s, which function as containers for other animations. Note also that the groups are subclasses of <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>, so groups can themselves contain other groups.</db:para>
<db:para>Behind the scenes, the animations are controlled by a global timer, which sends <db:link xlink:href="qabstractanimation.xml#updateCurrentTime">updates</db:link> to all animations that are playing.</db:para>
<db:para>For detailed descriptions of the classes' function and roles in the framework, please look up their class descriptions.</db:para>
</db:section>
<db:section xml:id="classes-in-the-animation-framework">
<db:title>Classes in the Animation Framework</db:title>
<db:para>These classes provide a framework for creating both simple and complex animations.</db:para>
<db:variablelist role="animation">
<db:varlistentry>
<db:term><db:link xlink:href="qabstractanimation.xml" xlink:role="class">QAbstractAnimation</db:link></db:term>
<db:listitem>
<db:para>The QAbstractAnimation class is the base of all animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qanimationgroup.xml" xlink:role="class">QAnimationGroup</db:link></db:term>
<db:listitem>
<db:para>The QAnimationGroup class is an abstract base class for groups of animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qeasingcurve.xml" xlink:role="class">QEasingCurve</db:link></db:term>
<db:listitem>
<db:para>The QEasingCurve class provides easing curves for controlling animation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qparallelanimationgroup.xml" xlink:role="class">QParallelAnimationGroup</db:link></db:term>
<db:listitem>
<db:para>The QParallelAnimationGroup class provides a parallel group of animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpauseanimation.xml" xlink:role="class">QPauseAnimation</db:link></db:term>
<db:listitem>
<db:para>The QPauseAnimation class provides a pause for QSequentialAnimationGroup.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpropertyanimation.xml" xlink:role="class">QPropertyAnimation</db:link></db:term>
<db:listitem>
<db:para>The QPropertyAnimation class animates Qt properties.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsequentialanimationgroup.xml" xlink:role="class">QSequentialAnimationGroup</db:link></db:term>
<db:listitem>
<db:para>The QSequentialAnimationGroup class provides a sequential group of animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtimeline.xml" xlink:role="class">QTimeLine</db:link></db:term>
<db:listitem>
<db:para>The QTimeLine class provides a timeline for controlling animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qvariantanimation.xml" xlink:role="class">QVariantAnimation</db:link></db:term>
<db:listitem>
<db:para>The QVariantAnimation class provides a base class for animations.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="animating-qt-properties">
<db:title>Animating Qt Properties</db:title>
<db:para>As mentioned in the previous section, the <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> class can interpolate over Qt properties. It is often this class that should be used for animation of values; in fact, its superclass, <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link>, has an empty implementation of <db:link xlink:href="qvariantanimation.xml#updateCurrentValue">updateCurrentValue</db:link>(), and does not change any value unless we change it ourselves on the <db:link xlink:href="qvariantanimation.xml#valueChanged">valueChanged signal</db:link>.</db:para>
<db:para>A major reason we chose to animate Qt properties is that it presents us with freedom to animate already existing classes in the Qt API. Notably, the QWidget class (which we can also embed in a QGraphicsView) has properties for its bounds, colors, etc. Let's look at a small example:</db:para>
<db:programlisting language="cpp">QPushButton button(&quot;Animated Button&quot;);
button.show();

QPropertyAnimation animation(&amp;amp;button, &quot;geometry&quot;);
animation.setDuration(10000);
animation.setStartValue(QRect(0, 0, 100, 30));
animation.setEndValue(QRect(250, 250, 100, 30));

animation.start();
</db:programlisting>
<db:para>This code will move button from the top left corner of the screen to the position (250, 250) in 10 seconds (10000 milliseconds).</db:para>
<db:para>The example above will do a linear interpolation between the start and end value. It is also possible to set values situated between the start and end value. The interpolation will then go by these points.</db:para>
<db:programlisting language="cpp">QPushButton button(&quot;Animated Button&quot;);
button.show();

QPropertyAnimation animation(&amp;amp;button, &quot;geometry&quot;);
animation.setDuration(10000);

animation.setKeyValueAt(0, QRect(0, 0, 100, 30));
animation.setKeyValueAt(0.8, QRect(250, 250, 100, 30));
animation.setKeyValueAt(1, QRect(0, 0, 100, 30));

animation.start();
</db:programlisting>
<db:para>In this example, the animation will take the button to (250, 250) in 8 seconds, and then move it back to its original position in the remaining 2 seconds. The movement will be linearly interpolated between these points.</db:para>
<db:para>You also have the possibility to animate values of a <db:link xlink:href="qobject.xml">QObject</db:link> that is not declared as a Qt property. The only requirement is that this value has a setter. You can then subclass the class containing the value and declare a property that uses this setter. Note that each Qt property requires a getter, so you will need to provide a getter yourself if this is not defined.</db:para>
<db:programlisting language="cpp">class MyGraphicsRectItem : public QObject, public QGraphicsRectItem
{
    Q_OBJECT
    Q_PROPERTY(QRectF geometry READ geometry WRITE setGeometry)
};
</db:programlisting>
<db:para>In the above code example, we subclass QGraphicsRectItem and define a geometry property. We can now animate the widgets geometry even if QGraphicsRectItem does not provide the geometry property.</db:para>
<db:para>For a general introduction to the Qt property system, see its <db:link xlink:href="properties.xml">overview</db:link>.</db:para>
</db:section>
<db:section xml:id="animations-and-the-graphics-view-framework">
<db:title>Animations and the Graphics View Framework</db:title>
<db:para>When you want to animate QGraphicsItems, you also use <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link>. However, QGraphicsItem does not inherit <db:link xlink:href="qobject.xml">QObject</db:link>. A good solution is to subclass the graphics item you wish to animate. This class will then also inherit <db:link xlink:href="qobject.xml">QObject</db:link>. This way, <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> can be used for QGraphicsItems. The example below shows how this is done. Another possibility is to inherit QGraphicsWidget, which already is a <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:programlisting language="cpp">class Pixmap : public QObject, public QGraphicsPixmapItem
{
    Q_OBJECT
    Q_PROPERTY(QPointF pos READ pos WRITE setPos)
    ...
</db:programlisting>
<db:para>As described in the previous section, we need to define properties that we wish to animate.</db:para>
<db:para>Note that <db:link xlink:href="qobject.xml">QObject</db:link> must be the first class inherited as the meta-object system demands this.</db:para>
</db:section>
<db:section xml:id="easing-curves">
<db:title>Easing Curves</db:title>
<db:para>As mentioned, <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> performs an interpolation between the start and end property value. In addition to adding more key values to the animation, you can also use an easing curve. Easing curves describe a function that controls how the speed of the interpolation between 0 and 1 should be, and are useful if you want to control the speed of an animation without changing the path of the interpolation.</db:para>
<db:programlisting language="cpp">QPushButton button(&quot;Animated Button&quot;);
button.show();

QPropertyAnimation animation(&amp;amp;button, &quot;geometry&quot;);
animation.setDuration(3000);
animation.setStartValue(QRect(0, 0, 100, 30));
animation.setEndValue(QRect(250, 250, 100, 30));

animation.setEasingCurve(QEasingCurve::OutBounce);

animation.start();
</db:programlisting>
<db:para>Here the animation will follow a curve that makes it bounce like a ball as if it was dropped from the start to the end position. <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link> has a large collection of curves for you to choose from. These are defined by the <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::Type</db:link> enum. If you are in need of another curve, you can also implement one yourself, and register it with <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link>.</db:para>
</db:section>
<db:section xml:id="putting-animations-together">
<db:title>Putting Animations Together</db:title>
<db:para>An application will often contain more than one animation. For instance, you might want to move more than one graphics item simultaneously or move them in sequence after each other.</db:para>
<db:para>The subclasses of <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> (<db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> and <db:link xlink:href="qparallelanimationgroup.xml">QParallelAnimationGroup</db:link>) are containers for other animations so that these animations can be animated either in sequence or parallel. The <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> is an example of an animation that does not animate properties, but it gets notified of time changes periodically. This enables it to forward those time changes to its contained animations, and thereby controlling when its animations are played.</db:para>
<db:para>Let's look at code examples that use both <db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> and <db:link xlink:href="qparallelanimationgroup.xml">QParallelAnimationGroup</db:link>, starting off with the latter.</db:para>
<db:programlisting language="cpp">QPushButton *bonnie = new QPushButton(&quot;Bonnie&quot;);
bonnie-&amp;gt;show();

QPushButton *clyde = new QPushButton(&quot;Clyde&quot;);
clyde-&amp;gt;show();

QPropertyAnimation *anim1 = new QPropertyAnimation(bonnie, &quot;geometry&quot;);
// Set up anim1

QPropertyAnimation *anim2 = new QPropertyAnimation(clyde, &quot;geometry&quot;);
// Set up anim2

QParallelAnimationGroup *group = new QParallelAnimationGroup;
group-&amp;gt;addAnimation(anim1);
group-&amp;gt;addAnimation(anim2);

group-&amp;gt;start();
</db:programlisting>
<db:para>A parallel group plays more than one animation at the same time. Calling its <db:link xlink:href="qabstractanimation.xml#start">start</db:link>() function will start all animations it governs.</db:para>
<db:programlisting language="cpp">QPushButton button(&quot;Animated Button&quot;);
button.show();

QPropertyAnimation anim1(&amp;amp;button, &quot;geometry&quot;);
anim1.setDuration(3000);
anim1.setStartValue(QRect(0, 0, 100, 30));
anim1.setEndValue(QRect(500, 500, 100, 30));

QPropertyAnimation anim2(&amp;amp;button, &quot;geometry&quot;);
anim2.setDuration(3000);
anim2.setStartValue(QRect(500, 500, 100, 30));
anim2.setEndValue(QRect(1000, 500, 100, 30));

QSequentialAnimationGroup group;

group.addAnimation(&amp;amp;anim1);
group.addAnimation(&amp;amp;anim2);

group.start();
</db:programlisting>
<db:para>As you no doubt have guessed, <db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> plays its animations in sequence. It starts the next animation in the list after the previous is finished.</db:para>
<db:para>Since an animation group is an animation itself, you can add it to another group. This way, you can build a tree structure of animations which specifies when the animations are played in relation to each other.</db:para>
</db:section>
</db:article>
