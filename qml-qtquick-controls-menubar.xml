<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MenuBar QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a window menu bar.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-container.xml">Container</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>MenuBar is part of <db:simplelist><db:member>qtquickcontrols-menus</db:member><db:member>qtquickcontrols-focusscopes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-menubar.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link> consists of drop-down menus, and is normally located at the top edge of the window.</db:para>
<db:programlisting language="cpp">ApplicationWindow {
    id: window
    width: 320
    height: 260
    visible: true

    menuBar: MenuBar {
        Menu {
            title: qsTr(&quot;&amp;File&quot;)
            Action { text: qsTr(&quot;&amp;New...&quot;) }
            Action { text: qsTr(&quot;&amp;Open...&quot;) }
            Action { text: qsTr(&quot;&amp;Save&quot;) }
            Action { text: qsTr(&quot;Save &amp;As...&quot;) }
            MenuSeparator { }
            Action { text: qsTr(&quot;&amp;Quit&quot;) }
        }
        Menu {
            title: qsTr(&quot;&amp;Edit&quot;)
            Action { text: qsTr(&quot;Cu&amp;t&quot;) }
            Action { text: qsTr(&quot;&amp;Copy&quot;) }
            Action { text: qsTr(&quot;&amp;Paste&quot;) }
        }
        Menu {
            title: qsTr(&quot;&amp;Help&quot;)
            Action { text: qsTr(&quot;&amp;About&quot;) }
        }
    }
}
</db:programlisting>
<db:para>Typically, menus are statically declared as children of the menu bar, but <db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link> also provides API to <db:link xlink:href="qml-qtquick-controls-menubar.xml#addMenu-method">add</db:link>, <db:link xlink:href="qml-qtquick-controls-menubar.xml#insertMenu-method">insert</db:link>, <db:link xlink:href="qml-qtquick-controls-menubar.xml#removeMenu-method">remove</db:link>, and <db:link xlink:href="qml-qtquick-controls-menubar.xml#takeMenu-method">take</db:link> menus dynamically. The menus in a menu bar can be accessed using <db:link xlink:href="qml-qtquick-controls-menubar.xml#menuAt-method">menuAt</db:link>().</db:para>
<db:section xml:id="native-menu-bars">
<db:title>Native menu bars</db:title>
<db:para>Since Qt 6.8, a <db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link> is implemented as a native menu bar on macOS. As a result, all Menus, MenuItems and MenuBarItems within a <db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link> will also be native. While this has the advantage that everything will look native, it also comes with the disadvantage that the delegates set on the mentioned controls will not be used for rendering. If a native <db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link> is not wanted, you can set <db:link xlink:href="qt.xml#ApplicationAttribute-enum">QGuiApplication::setAttribute(Qt::AA_DontUseNativeMenuBar)</db:link> to disable it.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-menubar">Customizing MenuBar</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-menu.xml">Menu</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-menubaritem.xml">MenuBarItem</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-menus.xml">Menu Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-focus.xml">Focus Management in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="contentHeight-prop">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] contentHeight : real</db:title>
<db:para>This property holds the content height. It is used for calculating the total implicit height of the menu bar.</db:para>
<db:note>
<db:para>This property is available in <db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link> since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.3 (Qt 5.10), but it was promoted to the Container base type in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.5 (Qt 5.12).</db:para>
</db:note>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-container.xml#contentHeight-prop">Container::contentHeight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentWidth-prop">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] contentWidth : real</db:title>
<db:para>This property holds the content width. It is used for calculating the total implicit width of the menu bar.</db:para>
<db:note>
<db:para>This property is available in <db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link> since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.3 (Qt 5.10), but it was promoted to the Container base type in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.5 (Qt 5.12).</db:para>
</db:note>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-container.xml#contentWidth-prop">Container::contentWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : Component</db:title>
<db:para>This property holds the component that is used to create menu bar items to present menus in the menu bar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-menubaritem.xml">MenuBarItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="menus-prop">
<db:title>menus : list&lt;Menu&gt;</db:title>
<db:para>This property holds the list of menus.</db:para>
<db:para>The list contains all menus that have been declared in QML as children of the menu bar, and also menus that have been dynamically added or inserted using the <db:link xlink:href="qml-qtquick-controls-menubar.xml#addMenu-method">addMenu</db:link>() and <db:link xlink:href="qml-qtquick-controls-menubar.xml#insertMenu-method">insertMenu</db:link>() methods, respectively.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addMenu-method">
<db:title>void addMenu(Menu <db:emphasis>menu</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">menu</db:code> to the end of the list of menus.</db:para>
</db:section>
<db:section xml:id="insertMenu-method">
<db:title>void insertMenu(int <db:emphasis>index</db:emphasis>, Menu <db:emphasis>menu</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">menu</db:code> at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="menuAt-method">
<db:title>Menu menuAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the menu at <db:code role="parameter">index</db:code>, or <db:code>null</db:code> if it does not exist.</db:para>
</db:section>
<db:section xml:id="removeMenu-method">
<db:title>void removeMenu(Menu <db:emphasis>menu</db:emphasis>)</db:title>
<db:para>Removes specified <db:code role="parameter">menu</db:code>. If the menu is <db:link xlink:href="qml-qtquick-controls-menu.xml#popup-method">open</db:link>, it will first be <db:link xlink:href="qml-qtquick-controls-menu.xml#dismiss-method">dismissed</db:link>. The <db:code role="parameter">menu</db:code> will eventually be deleted by the garbage collector when the application no longer holds any QML references to it.</db:para>
</db:section>
<db:section xml:id="takeMenu-method">
<db:title>Menu takeMenu(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes and returns the menu at <db:code role="parameter">index</db:code>. If the menu is <db:link xlink:href="qml-qtquick-controls-menu.xml#popup-method">open</db:link>, it will first be <db:link xlink:href="qml-qtquick-controls-menu.xml#dismiss-method">dismissed</db:link>. The menu will eventually be deleted by the garbage collector when the application no longer holds any QML references to it.</db:para>
</db:section>
</db:section>
</db:article>
