<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusConnectionInterface Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt D-Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link> class provides access to the D-Bus bus daemon service.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusConnectionInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdbusabstractinterface.xml" xlink:role="class">QDBusAbstractInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The D-Bus bus server daemon provides one special interface <db:code>org.freedesktop.DBus</db:code> that allows clients to access certain properties of the bus, such as the current list of clients connected. The <db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link> class provides access to that interface.</db:para>
<db:para>The most common uses of this class are to register and unregister service names on the bus using the <db:link xlink:href="qdbusconnectioninterface.xml#registerService">registerService</db:link>() and <db:link xlink:href="qdbusconnectioninterface.xml#unregisterService">unregisterService</db:link>() functions, query about existing names using the <db:link xlink:href="qdbusconnectioninterface.xml#isServiceRegistered">isServiceRegistered</db:link>(), <db:link xlink:href="qdbusconnectioninterface.xml#registeredServiceNames-prop">registeredServiceNames</db:link>() and <db:link xlink:href="qdbusconnectioninterface.xml#serviceOwner">serviceOwner</db:link>() functions, and to receive notification that a client has registered or de-registered through the <db:link xlink:href="qdbusconnectioninterface.xml#serviceRegistered">serviceRegistered</db:link>(), <db:link xlink:href="qdbusconnectioninterface.xml#serviceUnregistered">serviceUnregistered</db:link>() and serviceOwnerChanged() signals.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RegisterServiceReply-enum">
<db:title>enum QDBusConnectionInterface::RegisterServiceReply</db:title>
<db:para>The possible return values from <db:link xlink:href="qdbusconnectioninterface.xml#registerService">registerService</db:link>():</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link></db:emphasis>::ServiceNotRegistered</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The call failed and the service name was not registered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link></db:emphasis>::ServiceRegistered</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The caller is now the owner of the service name.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link></db:emphasis>::ServiceQueued</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The caller specified the <db:link xlink:href="qdbusconnectioninterface.xml#ServiceQueueOptions-enum">QueueService</db:link> flag and the service was already registered, so we are in queue.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qdbusconnectioninterface.xml#serviceRegistered">serviceRegistered</db:link>() signal will be emitted when the service is acquired by this application.</db:para>
</db:section>
<db:section xml:id="ServiceQueueOptions-enum">
<db:title>enum QDBusConnectionInterface::ServiceQueueOptions</db:title>
<db:para>Flags for determining how a service registration should behave, in case the service name is already registered.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link></db:emphasis>::DontQueueService</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>If an application requests a name that is already owned, no queueing will be performed. The registeredService() call will simply fail. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link></db:emphasis>::QueueService</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Attempts to register the requested service, but do not try to replace it if another application already has it registered. Instead, simply put this application in queue, until it is given up. The <db:link xlink:href="qdbusconnectioninterface.xml#serviceRegistered">serviceRegistered</db:link>() signal will be emitted when that happens.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link></db:emphasis>::ReplaceExistingService</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>If another application already has the service name registered, attempt to replace it.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusconnectioninterface.xml#ServiceReplacementOptions-enum">ServiceReplacementOptions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ServiceReplacementOptions-enum">
<db:title>enum QDBusConnectionInterface::ServiceReplacementOptions</db:title>
<db:para>Flags for determining if the D-Bus server should allow another application to replace a name that this application has registered with the <db:link xlink:href="qdbusconnectioninterface.xml#ServiceQueueOptions-enum">ReplaceExistingService</db:link> option.</db:para>
<db:para>The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link></db:emphasis>::DontAllowReplacement</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Do not allow another application to replace us. The service must be explicitly unregistered with <db:link xlink:href="qdbusconnectioninterface.xml#unregisterService">unregisterService</db:link>() for another application to acquire it. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link></db:emphasis>::AllowReplacement</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Allow other applications to replace us with the <db:link xlink:href="qdbusconnectioninterface.xml#ServiceQueueOptions-enum">ReplaceExistingService</db:link> option to <db:link xlink:href="qdbusconnectioninterface.xml#registerService">registerService</db:link>() without intervention. If that happens, the <db:link xlink:href="qdbusconnectioninterface.xml#serviceUnregistered">serviceUnregistered</db:link>() signal will be emitted.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusconnectioninterface.xml#ServiceQueueOptions-enum">ServiceQueueOptions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activatableServiceNames-prop">
<db:title>[read-only] activatableServiceNames : const QDBusReply&lt;QStringList&gt;</db:title>
<db:para>holds the activatable service names</db:para>
<db:para>Lists all names that can be activated on the bus.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdbusreply.xml">QDBusReply</db:link></db:type>&lt;<db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type>&gt; <db:emphasis role="bold">activatableServiceNames</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="registeredServiceNames-prop">
<db:title>[read-only] registeredServiceNames : const QDBusReply&lt;QStringList&gt;</db:title>
<db:para>holds the registered service names</db:para>
<db:para>Lists all names currently registered on the bus.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdbusreply.xml">QDBusReply</db:link></db:type>&lt;<db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type>&gt; <db:emphasis role="bold">registeredServiceNames</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="callWithCallbackFailed">
<db:title>void QDBusConnectionInterface::callWithCallbackFailed(const QDBusError &amp;<db:emphasis>error</db:emphasis>, const QDBusMessage &amp;<db:emphasis>call</db:emphasis>)</db:title>
<db:para>This signal is emitted when there is an error during a <db:link xlink:href="qdbusconnection.xml#callWithCallback">QDBusConnection::callWithCallback</db:link>(). <db:code role="parameter">error</db:code> specifies the error. <db:code role="parameter">call</db:code> is the message that couldn't be delivered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusconnection.xml#callWithCallback">QDBusConnection::callWithCallback</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isServiceRegistered">
<db:title>QDBusReply&lt;bool&gt; QDBusConnectionInterface::isServiceRegistered(const QString &amp;<db:emphasis>serviceName</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the service name <db:code role="parameter">serviceName</db:code> has is currently registered.</db:para>
</db:section>
<db:section xml:id="registerService">
<db:title>QDBusReply&lt;QDBusConnectionInterface::RegisterServiceReply&gt; QDBusConnectionInterface::registerService(const QString &amp;<db:emphasis>serviceName</db:emphasis>, QDBusConnectionInterface::ServiceQueueOptions <db:emphasis>qoption</db:emphasis> = DontQueueService, QDBusConnectionInterface::ServiceReplacementOptions <db:emphasis>roption</db:emphasis> = DontAllowReplacement)</db:title>
<db:para>Requests to register the service name <db:code role="parameter">serviceName</db:code> on the bus. The <db:code role="parameter">qoption</db:code> flag specifies how the D-Bus server should behave if <db:code role="parameter">serviceName</db:code> is already registered. The <db:code role="parameter">roption</db:code> flag specifies if the server should allow another application to replace our registered name.</db:para>
<db:para>If the service registration succeeds, the <db:link xlink:href="qdbusconnectioninterface.xml#serviceRegistered">serviceRegistered</db:link>() signal will be emitted. If we are placed in queue, the signal will be emitted when we obtain the name. If <db:code role="parameter">roption</db:code> is <db:link xlink:href="qdbusconnectioninterface.xml#ServiceReplacementOptions-enum">AllowReplacement</db:link>, the <db:link xlink:href="qdbusconnectioninterface.xml#serviceUnregistered">serviceUnregistered</db:link>() signal will be emitted if another application replaces this one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusconnectioninterface.xml#unregisterService">unregisterService</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceOwner">
<db:title>QDBusReply&lt;QString&gt; QDBusConnectionInterface::serviceOwner(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the unique connection name of the primary owner of the name <db:code role="parameter">name</db:code>. If the requested name doesn't have an owner, returns a <db:code>org.freedesktop.DBus.Error.NameHasNoOwner</db:code> error.</db:para>
</db:section>
<db:section xml:id="servicePid">
<db:title>QDBusReply&lt;uint&gt; QDBusConnectionInterface::servicePid(const QString &amp;<db:emphasis>serviceName</db:emphasis>) const</db:title>
<db:para>Returns the Unix Process ID (PID) for the process currently holding the bus service <db:code role="parameter">serviceName</db:code>.</db:para>
</db:section>
<db:section xml:id="serviceRegistered">
<db:title>void QDBusConnectionInterface::serviceRegistered(const QString &amp;<db:emphasis>service</db:emphasis>)</db:title>
<db:para>This signal is emitted by the D-Bus server when the bus service name (unique connection name or well-known service name) given by <db:code role="parameter">service</db:code> is acquired by this application.</db:para>
<db:para>Acquisition happens after this application has requested a name using <db:link xlink:href="qdbusconnectioninterface.xml#registerService">registerService</db:link>().</db:para>
</db:section>
<db:section xml:id="serviceUid">
<db:title>QDBusReply&lt;uint&gt; QDBusConnectionInterface::serviceUid(const QString &amp;<db:emphasis>serviceName</db:emphasis>) const</db:title>
<db:para>Returns the Unix User ID (UID) for the process currently holding the bus service <db:code role="parameter">serviceName</db:code>.</db:para>
</db:section>
<db:section xml:id="serviceUnregistered">
<db:title>void QDBusConnectionInterface::serviceUnregistered(const QString &amp;<db:emphasis>service</db:emphasis>)</db:title>
<db:para>This signal is emitted by the D-Bus server when this application loses ownership of the bus service name given by <db:code role="parameter">service</db:code>.</db:para>
</db:section>
<db:section xml:id="startService">
<db:title>QDBusReply&lt;void&gt; QDBusConnectionInterface::startService(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Requests that the bus start the service given by the name <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="unregisterService">
<db:title>QDBusReply&lt;bool&gt; QDBusConnectionInterface::unregisterService(const QString &amp;<db:emphasis>serviceName</db:emphasis>)</db:title>
<db:para>Releases the claim on the bus service name <db:code role="parameter">serviceName</db:code>, that had been previously registered with <db:link xlink:href="qdbusconnectioninterface.xml#registerService">registerService</db:link>(). If this application had ownership of the name, it will be released for other applications to claim. If it only had the name queued, it gives up its position in the queue.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QDBusConnectionInterface</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qdbusconnectioninterface.xml">QDBusConnectionInterface</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="serviceOwnerChanged">
<db:title>[deprecated] void QDBusConnectionInterface::serviceOwnerChanged(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>oldOwner</db:emphasis>, const QString &amp;<db:emphasis>newOwner</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> instead.</db:para>
<db:para>This signal is emitted by the D-Bus server whenever a service ownership change happens in the bus, including apparition and disparition of names.</db:para>
<db:para>This signal means the application <db:code role="parameter">oldOwner</db:code> lost ownership of bus name <db:code role="parameter">name</db:code> to application <db:code role="parameter">newOwner</db:code>. If <db:code role="parameter">oldOwner</db:code> is an empty string, it means the name <db:code role="parameter">name</db:code> has just been created; if <db:code role="parameter">newOwner</db:code> is empty, the name <db:code role="parameter">name</db:code> has no current owner and is no longer available.</db:para>
<db:note>
<db:para>connecting to this signal will make the application listen for and receive every single service ownership change on the bus. Depending on how many services are running, this make the application be activated to receive more signals than it needs. To avoid this problem, use the <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> class, which can listen for specific changes.</db:para>
</db:note>
</db:section>
</db:section>
</db:section>
</db:article>
