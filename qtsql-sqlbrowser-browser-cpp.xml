<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>SQL Browser</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The SQL Browser example shows how a data browser can be used to visualize the results of SQL statements on a live database.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;browser.h&quot;
#include &quot;qsqlconnectiondialog.h&quot;

#include &lt;QtWidgets&gt;
#include &lt;QtSql&gt;

Browser::Browser(QWidget *parent)
    : QWidget(parent)
{
    setupUi(this);

    table-&gt;addAction(insertRowAction);
    table-&gt;addAction(deleteRowAction);
    table-&gt;addAction(fieldStrategyAction);
    table-&gt;addAction(rowStrategyAction);
    table-&gt;addAction(manualStrategyAction);
    table-&gt;addAction(submitAction);
    table-&gt;addAction(revertAction);
    table-&gt;addAction(selectAction);

    if (QSqlDatabase::drivers().isEmpty())
        QMessageBox::information(this, tr(&quot;No database drivers found&quot;),
                                 tr(&quot;This demo requires at least one Qt database driver. &quot;
                                    &quot;Please check the documentation how to build the &quot;
                                    &quot;Qt SQL plugins.&quot;));

    emit statusMessage(tr(&quot;Ready.&quot;));
}

Browser::~Browser()
{
}

void Browser::exec()
{
    QSqlQueryModel *model = new QSqlQueryModel(table);
    model-&gt;setQuery(QSqlQuery(sqlEdit-&gt;toPlainText(), connectionWidget-&gt;currentDatabase()));
    table-&gt;setModel(model);

    if (model-&gt;lastError().type() != QSqlError::NoError)
        emit statusMessage(model-&gt;lastError().text());
    else if (model-&gt;query().isSelect())
        emit statusMessage(tr(&quot;Query OK.&quot;));
    else
        emit statusMessage(tr(&quot;Query OK, number of affected rows: %1&quot;).arg(
                           model-&gt;query().numRowsAffected()));

    updateActions();
}

QSqlError Browser::addConnection(const QString &amp;driver, const QString &amp;dbName, const QString &amp;host,
                            const QString &amp;user, const QString &amp;passwd, int port)
{
    static int cCount = 0;

    QSqlError err;
    QSqlDatabase db = QSqlDatabase::addDatabase(driver, QString(&quot;Browser%1&quot;).arg(++cCount));
    db.setDatabaseName(dbName);
    db.setHostName(host);
    db.setPort(port);
    if (!db.open(user, passwd)) {
        err = db.lastError();
        db = QSqlDatabase();
        QSqlDatabase::removeDatabase(QString(&quot;Browser%1&quot;).arg(cCount));
    }
    connectionWidget-&gt;refresh();

    return err;
}

void Browser::addConnection()
{
    QSqlConnectionDialog dialog(this);
    if (dialog.exec() != QDialog::Accepted)
        return;

    if (dialog.useInMemoryDatabase()) {
        QSqlDatabase::database(&quot;in_mem_db&quot;, false).close();
        QSqlDatabase::removeDatabase(&quot;in_mem_db&quot;);
        QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;, &quot;in_mem_db&quot;);
        db.setDatabaseName(&quot;:memory:&quot;);
        if (!db.open())
            QMessageBox::warning(this, tr(&quot;Unable to open database&quot;), tr(&quot;An error occurred while &quot;
                                                                         &quot;opening the connection: &quot;) + db.lastError().text());
        QSqlQuery q(&quot;&quot;, db);
        q.exec(&quot;drop table Movies&quot;);
        q.exec(&quot;drop table Names&quot;);
        q.exec(&quot;create table Movies (id integer primary key, Title varchar, Director varchar, Rating number)&quot;);
        q.exec(&quot;insert into Movies values (0, 'Metropolis', 'Fritz Lang', '8.4')&quot;);
        q.exec(&quot;insert into Movies values (1, 'Nosferatu, eine Symphonie des Grauens', 'F.W. Murnau', '8.1')&quot;);
        q.exec(&quot;insert into Movies values (2, 'Bis ans Ende der Welt', 'Wim Wenders', '6.5')&quot;);
        q.exec(&quot;insert into Movies values (3, 'Hardware', 'Richard Stanley', '5.2')&quot;);
        q.exec(&quot;insert into Movies values (4, 'Mitchell', 'Andrew V. McLaglen', '2.1')&quot;);
        q.exec(&quot;create table Names (id integer primary key, Firstname varchar, Lastname varchar, City varchar)&quot;);
        q.exec(&quot;insert into Names values (0, 'Sala', 'Palmer', 'Morristown')&quot;);
        q.exec(&quot;insert into Names values (1, 'Christopher', 'Walker', 'Morristown')&quot;);
        q.exec(&quot;insert into Names values (2, 'Donald', 'Duck', 'Andeby')&quot;);
        q.exec(&quot;insert into Names values (3, 'Buck', 'Rogers', 'Paris')&quot;);
        q.exec(&quot;insert into Names values (4, 'Sherlock', 'Holmes', 'London')&quot;);
        connectionWidget-&gt;refresh();
    } else {
        QSqlError err = addConnection(dialog.driverName(), dialog.databaseName(), dialog.hostName(),
                           dialog.userName(), dialog.password(), dialog.port());
        if (err.type() != QSqlError::NoError)
            QMessageBox::warning(this, tr(&quot;Unable to open database&quot;), tr(&quot;An error occurred while &quot;
                                       &quot;opening the connection: &quot;) + err.text());
    }
}

void Browser::showTable(const QString &amp;t)
{
    QSqlTableModel *model = new CustomModel(table, connectionWidget-&gt;currentDatabase());
    model-&gt;setEditStrategy(QSqlTableModel::OnRowChange);
    model-&gt;setTable(connectionWidget-&gt;currentDatabase().driver()-&gt;escapeIdentifier(t, QSqlDriver::TableName));
    model-&gt;select();
    if (model-&gt;lastError().type() != QSqlError::NoError)
        emit statusMessage(model-&gt;lastError().text());
    table-&gt;setModel(model);
    table-&gt;setEditTriggers(QAbstractItemView::DoubleClicked|QAbstractItemView::EditKeyPressed);

    connect(table-&gt;selectionModel(), SIGNAL(currentRowChanged(QModelIndex,QModelIndex)),
            this, SLOT(currentChanged()));
    updateActions();
}

void Browser::showMetaData(const QString &amp;t)
{
    QSqlRecord rec = connectionWidget-&gt;currentDatabase().record(t);
    QStandardItemModel *model = new QStandardItemModel(table);

    model-&gt;insertRows(0, rec.count());
    model-&gt;insertColumns(0, 7);

    model-&gt;setHeaderData(0, Qt::Horizontal, &quot;Fieldname&quot;);
    model-&gt;setHeaderData(1, Qt::Horizontal, &quot;Type&quot;);
    model-&gt;setHeaderData(2, Qt::Horizontal, &quot;Length&quot;);
    model-&gt;setHeaderData(3, Qt::Horizontal, &quot;Precision&quot;);
    model-&gt;setHeaderData(4, Qt::Horizontal, &quot;Required&quot;);
    model-&gt;setHeaderData(5, Qt::Horizontal, &quot;AutoValue&quot;);
    model-&gt;setHeaderData(6, Qt::Horizontal, &quot;DefaultValue&quot;);

    for (int i = 0; i &lt; rec.count(); ++i) {
        QSqlField fld = rec.field(i);
        model-&gt;setData(model-&gt;index(i, 0), fld.name());
        model-&gt;setData(model-&gt;index(i, 1), fld.typeID() == -1
                ? QString(QMetaType::typeName(fld.type()))
                : QString(&quot;%1 (%2)&quot;).arg(QMetaType::typeName(fld.type())).arg(fld.typeID()));
        model-&gt;setData(model-&gt;index(i, 2), fld.length());
        model-&gt;setData(model-&gt;index(i, 3), fld.precision());
        model-&gt;setData(model-&gt;index(i, 4), fld.requiredStatus() == -1 ? QVariant(&quot;?&quot;)
                : QVariant(bool(fld.requiredStatus())));
        model-&gt;setData(model-&gt;index(i, 5), fld.isAutoValue());
        model-&gt;setData(model-&gt;index(i, 6), fld.defaultValue());
    }

    table-&gt;setModel(model);
    table-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);

    updateActions();
}

void Browser::insertRow()
{
    QSqlTableModel *model = qobject_cast&lt;QSqlTableModel *&gt;(table-&gt;model());
    if (!model)
        return;

    QModelIndex insertIndex = table-&gt;currentIndex();
    int row = insertIndex.row() == -1 ? 0 : insertIndex.row();
    model-&gt;insertRow(row);
    insertIndex = model-&gt;index(row, 0);
    table-&gt;setCurrentIndex(insertIndex);
    table-&gt;edit(insertIndex);
}

void Browser::deleteRow()
{
    QSqlTableModel *model = qobject_cast&lt;QSqlTableModel *&gt;(table-&gt;model());
    if (!model)
        return;

    QModelIndexList currentSelection = table-&gt;selectionModel()-&gt;selectedIndexes();
    for (int i = 0; i &lt; currentSelection.count(); ++i) {
        if (currentSelection.at(i).column() != 0)
            continue;
        model-&gt;removeRow(currentSelection.at(i).row());
    }

    updateActions();
}

void Browser::updateActions()
{
    QSqlTableModel * tm = qobject_cast&lt;QSqlTableModel *&gt;(table-&gt;model());
    bool enableIns = tm;
    bool enableDel = enableIns &amp;&amp; table-&gt;currentIndex().isValid();

    insertRowAction-&gt;setEnabled(enableIns);
    deleteRowAction-&gt;setEnabled(enableDel);

    fieldStrategyAction-&gt;setEnabled(tm);
    rowStrategyAction-&gt;setEnabled(tm);
    manualStrategyAction-&gt;setEnabled(tm);
    submitAction-&gt;setEnabled(tm);
    revertAction-&gt;setEnabled(tm);
    selectAction-&gt;setEnabled(tm);

    if (tm) {
        QSqlTableModel::EditStrategy es = tm-&gt;editStrategy();
        fieldStrategyAction-&gt;setChecked(es == QSqlTableModel::OnFieldChange);
        rowStrategyAction-&gt;setChecked(es == QSqlTableModel::OnRowChange);
        manualStrategyAction-&gt;setChecked(es == QSqlTableModel::OnManualSubmit);
    }
}

void Browser::about()
{
    QMessageBox::about(this, tr(&quot;About&quot;), tr(&quot;The SQL Browser demonstration &quot;
        &quot;shows how a data browser can be used to visualize the results of SQL&quot;
                                             &quot;statements on a live database&quot;));
}

void Browser::on_fieldStrategyAction_triggered()
{
    QSqlTableModel * tm = qobject_cast&lt;QSqlTableModel *&gt;(table-&gt;model());
    if (tm)
        tm-&gt;setEditStrategy(QSqlTableModel::OnFieldChange);
}

void Browser::on_rowStrategyAction_triggered()
{
    QSqlTableModel * tm = qobject_cast&lt;QSqlTableModel *&gt;(table-&gt;model());
    if (tm)
        tm-&gt;setEditStrategy(QSqlTableModel::OnRowChange);
}

void Browser::on_manualStrategyAction_triggered()
{
    QSqlTableModel * tm = qobject_cast&lt;QSqlTableModel *&gt;(table-&gt;model());
    if (tm)
        tm-&gt;setEditStrategy(QSqlTableModel::OnManualSubmit);
}

void Browser::on_submitAction_triggered()
{
    QSqlTableModel * tm = qobject_cast&lt;QSqlTableModel *&gt;(table-&gt;model());
    if (tm)
        tm-&gt;submitAll();
}

void Browser::on_revertAction_triggered()
{
    QSqlTableModel * tm = qobject_cast&lt;QSqlTableModel *&gt;(table-&gt;model());
    if (tm)
        tm-&gt;revertAll();
}

void Browser::on_selectAction_triggered()
{
    QSqlTableModel * tm = qobject_cast&lt;QSqlTableModel *&gt;(table-&gt;model());
    if (tm)
        tm-&gt;select();
}

</db:programlisting>
</db:article>
