<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Trivial Wizard Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Trivial Wizard example illustrates how to create a linear three-page registration wizard using three instances of <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> and one instance of <db:link xlink:href="qwizard.xml">QWizard</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/trivialwizard-example-flow.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="introduction-page">
<db:title>Introduction Page</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/trivialwizard-example-introduction.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The introduction page is created with the createIntroPage() function where a <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> is created and its title is set to &quot;Introduction&quot;. A <db:link xlink:href="qlabel.xml">QLabel</db:link> is used to hold the description of page. A <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> is used to hold the label. This page is returned when the createIntroPage() function is called.</db:para>
<db:programlisting language="cpp">QWizardPage *createIntroPage()
{
    QWizardPage *page = new QWizardPage;
    page-&gt;setTitle(&quot;Introduction&quot;);

    QLabel *label = new QLabel(&quot;This wizard will help you register your copy &quot;
                               &quot;of Super Product Two.&quot;);
    label-&gt;setWordWrap(true);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(label);
    page-&gt;setLayout(layout);

    return page;
}
</db:programlisting>
</db:section>
<db:section xml:id="registration-page">
<db:title>Registration Page</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/trivialwizard-example-registration.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The registration page is created with the createRegistrationPage() function. <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> objects are used to allow the user to input a name and an e-mail address. A <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> is used to hold the <db:link xlink:href="qlabel.xml">QLabel</db:link> and <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> objects.</db:para>
<db:programlisting language="cpp">QWizardPage *createRegistrationPage()
{
    QWizardPage *page = new QWizardPage;
    page-&gt;setTitle(&quot;Registration&quot;);
    page-&gt;setSubTitle(&quot;Please fill both fields.&quot;);

    QLabel *nameLabel = new QLabel(&quot;Name:&quot;);
    QLineEdit *nameLineEdit = new QLineEdit;

    QLabel *emailLabel = new QLabel(&quot;Email address:&quot;);
    QLineEdit *emailLineEdit = new QLineEdit;

    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(nameLabel, 0, 0);
    layout-&gt;addWidget(nameLineEdit, 0, 1);
    layout-&gt;addWidget(emailLabel, 1, 0);
    layout-&gt;addWidget(emailLineEdit, 1, 1);
    page-&gt;setLayout(layout);

    return page;
}
</db:programlisting>
</db:section>
<db:section xml:id="conclusion-page">
<db:title>Conclusion Page</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/trivialwizard-example-conclusion.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The conclusion page is created in the createConclusionPage() function. This function's content is similar to createIntroPage(). A <db:link xlink:href="qlabel.xml">QLabel</db:link> is used to inform the user that the registration process has completed successfully.</db:para>
<db:programlisting language="cpp">QWizardPage *createConclusionPage()
{
    QWizardPage *page = new QWizardPage;
    page-&gt;setTitle(&quot;Conclusion&quot;);

    QLabel *label = new QLabel(&quot;You are now successfully registered. Have a &quot;
                               &quot;nice day!&quot;);
    label-&gt;setWordWrap(true);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(label);
    page-&gt;setLayout(layout);

    return page;
}
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title>main() Function</db:title>
<db:para>The main() function instantiates a <db:link xlink:href="qwizard.xml">QWizard</db:link> object, wizard, and adds all three <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> objects to it. The wizard window title is set to &quot;Trivial Wizard&quot; and its show() function is invoked to display it.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

#ifndef QT_NO_TRANSLATION
    QString translatorFileName = QLatin1String(&quot;qtbase_&quot;);
    translatorFileName += QLocale::system().name();
    QTranslator *translator = new QTranslator(&amp;app);
    if (translator-&gt;load(translatorFileName, QLibraryInfo::path(QLibraryInfo::TranslationsPath)))
        app.installTranslator(translator);
#endif

    QWizard wizard;
    wizard.addPage(createIntroPage());
    wizard.addPage(createRegistrationPage());
    wizard.addPage(createConclusionPage());

    wizard.setWindowTitle(&quot;Trivial Wizard&quot;);
    wizard.show();

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/dialogs/trivialwizard?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml">QWizard</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-licensewizard-example.xml">License Wizard Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
