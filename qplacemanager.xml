<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlaceManager Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> class provides the interface which allows clients to access places stored in a particular backend.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlaceManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlaceManager is part of <db:simplelist><db:member>QtLocation-places</db:member><db:member>QtLocation-places-manager</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The following table gives an overview of the functionality provided by the <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Functionality</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Searching for places</db:para>
</db:td>
<db:td>
<db:para>Using set of parameters such as a search term and search area, relevant places can be returned to the user.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Categories</db:para>
</db:td>
<db:td>
<db:para>Places can be classified as belonging to different categories. The manager supports access to these categories.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Search term suggestions</db:para>
</db:td>
<db:td>
<db:para>Given a partially complete search term, a list of potential search terms can be given.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Recommendations</db:para>
</db:td>
<db:td>
<db:para>Given an existing place, a set of similar recommended places can be suggested to the user.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Rich Content</db:para>
</db:td>
<db:td>
<db:para>Rich content such as images, reviews etc can be retrieved in a paged fashion.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place or Category management</db:para>
</db:td>
<db:td>
<db:para>Places and categories may be saved and removed. It is possible for notifications to be given when this happens.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Localization</db:para>
</db:td>
<db:td>
<db:para>Different locales may be specified to return place data in different languages.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="obtaining-a-qplacemanager-instance">
<db:title>Obtaining a QPlaceManager Instance</db:title>
<db:para>Creation of a <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> is facilitated by the <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link>. See <db:link xlink:href="location-places-cpp.xml#initializing-a-manager">Initializing a manager</db:link> for an example on how to create a manager.</db:para>
</db:section>
<db:section xml:id="asynchronous-interface">
<db:title>Asynchronous Interface</db:title>
<db:para>The <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> class provides an abstraction of the datastore which contains place information. The functions provided by the <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> and primarily asynchronous and follow a request-reply model. Typically a request is given to the manager, consisting of a various set of parameters and a reply object is created. The reply object has a signal to notify when the request is done, and once completed, the reply contains the results of the request, along with any errors that occurred, if any.</db:para>
<db:para>An asynchronous request is generally handled as follows:</db:para>
<db:programlisting language="cpp">//1) Make an appropriate request
QPlaceSearchRequest searchRequest;
searchRequest.setSearchTerm(&quot;ice cream&quot;);
searchRequest.setSearchArea(QGeoCircle(QGeoCoordinate(12.34, 56.78)));

//2) Use the manager to initiate a request and retrieve a reply object
QPlaceSearchReply * searchReply = manager-&amp;gt;search(searchRequest);

//3) Connect the reply object to a slot which is invoked upon operation completion
connect(searchReply, &amp;amp;QPlaceSearchReply::finished,
        this, &amp;amp;RequestHandler::processSearchReply);
    ...
    ...
//4) Have the slot appropriately process the results of the operation
void processSearchReply() {
    if (searchReply-&amp;gt;error() == QPlaceReply::NoError) {
        for (const QPlaceSearchResult &amp;amp;result : searchReply-&amp;gt;results()) {
            if (result.type() == QPlaceSearchResult::PlaceResult)
                qDebug() &amp;lt;&amp;lt; &quot;Title:&quot; &amp;lt;&amp;lt; result.title();
        }
    }

//5) Discard the rely object when done.
    searchReply-&amp;gt;deleteLater();
    searchReply = nullptr;
}
</db:programlisting>
<db:para>See <db:link xlink:href="location-places-cpp.xml#common-operations">Common Operations</db:link> for a list of examples demonstrating how the QPlaceManger is used.</db:para>
</db:section>
<db:section xml:id="category-initialization">
<db:title>Category Initialization</db:title>
<db:para>Sometime during startup of an application, the <db:link xlink:href="qplacemanager.xml#initializeCategories">initializeCategories</db:link>() function should be called to setup the categories. Initializing the categories enables the usage of the following functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qplacemanager.xml#childCategories">QPlaceManager::childCategories</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qplacemanager.xml#category">QPlaceManager::category</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qplacemanager.xml#parentCategoryId">QPlaceManager::parentCategoryId</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qplacemanager.xml#childCategoryIds">QPlaceManager::childCategoryIds</db:link>();</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the categories need to be refreshed or reloaded, the <db:link xlink:href="qplacemanager.xml#initializeCategories">initializeCategories</db:link>() function may be called again.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QPlaceManager">
<db:title>[virtual] QPlaceManager::~QPlaceManager()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPlaceManager</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPlaceManager()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the manager. This destructor is used internally by <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> and should never need to be called in application code.</db:para>
</db:section>
<db:section xml:id="category">
<db:title>QPlaceCategory QPlaceManager::category(const QString &amp;<db:emphasis>categoryId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceCategory</db:type>
<db:methodname>category</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceCategory category(const QString &amp;categoryId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the category corresponding to the given <db:code role="parameter">categoryId</db:code>.</db:para>
</db:section>
<db:section xml:id="categoryAdded">
<db:title>void QPlaceManager::categoryAdded(const QPlaceCategory &amp;<db:emphasis>category</db:emphasis>, const QString &amp;<db:emphasis>parentId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>categoryAdded</db:methodname>
<db:methodparam>
<db:type>const QPlaceCategory &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void categoryAdded(const QPlaceCategory &amp;category, const QString &amp;parentId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a <db:code role="parameter">category</db:code> has been added to the manager's datastore. The parent of the <db:code role="parameter">category</db:code> is specified by <db:code role="parameter">parentId</db:code>.</db:para>
<db:para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="categoryRemoved">
<db:title>void QPlaceManager::categoryRemoved(const QString &amp;<db:emphasis>categoryId</db:emphasis>, const QString &amp;<db:emphasis>parentId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>categoryRemoved</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void categoryRemoved(const QString &amp;categoryId, const QString &amp;parentId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the category corresponding to <db:code role="parameter">categoryId</db:code> has been removed from the manager's datastore. The parent of the removed category is specified by <db:code role="parameter">parentId</db:code>.</db:para>
<db:para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="categoryUpdated">
<db:title>void QPlaceManager::categoryUpdated(const QPlaceCategory &amp;<db:emphasis>category</db:emphasis>, const QString &amp;<db:emphasis>parentId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>categoryUpdated</db:methodname>
<db:methodparam>
<db:type>const QPlaceCategory &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void categoryUpdated(const QPlaceCategory &amp;category, const QString &amp;parentId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a <db:code role="parameter">category</db:code> has been modified in the manager's datastore. The parent of the modified category is specified by <db:code role="parameter">parentId</db:code>.</db:para>
<db:para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childCategories">
<db:title>QList&lt;QPlaceCategory&gt; QPlaceManager::childCategories(const QString &amp;<db:emphasis>parentId</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPlaceCategory&gt;</db:type>
<db:methodname>childCategories</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPlaceCategory&gt; childCategories(const QString &amp;parentId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of categories that are children of the category corresponding to <db:code role="parameter">parentId</db:code>. If <db:code role="parameter">parentId</db:code> is empty, all the top level categories are returned.</db:para>
</db:section>
<db:section xml:id="childCategoryIds">
<db:title>QStringList QPlaceManager::childCategoryIds(const QString &amp;<db:emphasis>parentId</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>childCategoryIds</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList childCategoryIds(const QString &amp;parentId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the child category identifiers of the category corresponding to <db:code role="parameter">parentId</db:code>. If <db:code role="parameter">parentId</db:code> is empty then all top level category identifiers are returned.</db:para>
</db:section>
<db:section xml:id="compatiblePlace">
<db:title>QPlace QPlaceManager::compatiblePlace(const QPlace &amp;<db:emphasis>original</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlace</db:type>
<db:methodname>compatiblePlace</db:methodname>
<db:methodparam>
<db:type>const QPlace &amp;</db:type>
<db:parameter>original</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlace compatiblePlace(const QPlace &amp;original) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pruned or modified version of the <db:code role="parameter">original</db:code> place which is suitable to be saved into this manager.</db:para>
<db:para>Only place details that are supported by this manager is present in the modified version. Manager specific data such as the place id, is not copied over from the <db:code role="parameter">original</db:code>.</db:para>
</db:section>
<db:section xml:id="dataChanged">
<db:title>void QPlaceManager::dataChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dataChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dataChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted by the manager if there are large scale changes to its underlying datastore and the manager considers these changes radical enough to require clients to reload all data.</db:para>
<db:para>If the signal is emitted, no other signals will be emitted for the associated changes.</db:para>
<db:para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</db:para>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QPlaceManager::errorOccurred(QPlaceReply *<db:emphasis>reply</db:emphasis>, QPlaceReply::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QPlaceReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPlaceReply::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QPlaceReply *reply, QPlaceReply::Error error, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error has been detected in the processing of <db:code role="parameter">reply</db:code>. The <db:link xlink:href="qplacemanager.xml#finished">QPlaceManager::finished</db:link>() signal will probably follow.</db:para>
<db:para>The error will be described by the error code <db:code role="parameter">error</db:code>. If <db:code role="parameter">errorString</db:code> is not empty it will contain a textual description of the error meant for developers and not end users.</db:para>
<db:para>This signal and <db:link xlink:href="qplacereply.xml#errorOccurred">QPlaceReply::errorOccurred</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="finished">
<db:title>void QPlaceManager::finished(QPlaceReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:methodparam>
<db:type>QPlaceReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished(QPlaceReply *reply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:code role="parameter">reply</db:code> has finished processing.</db:para>
<db:para>If reply-&gt;error() equals <db:link xlink:href="qplacereply.xml#Error-enum">QPlaceReply::NoError</db:link> then the processing finished successfully.</db:para>
<db:para>This signal and <db:link xlink:href="qplacereply.xml#finished">QPlaceReply::finished</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="getPlaceContent">
<db:title>QPlaceContentReply *QPlaceManager::getPlaceContent(const QPlaceContentRequest &amp;<db:emphasis>request</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceContentReply *</db:type>
<db:methodname>getPlaceContent</db:methodname>
<db:methodparam>
<db:type>const QPlaceContentRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceContentReply * getPlaceContent(const QPlaceContentRequest &amp;request) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves content for a place according to the parameters specified in <db:code role="parameter">request</db:code>.</db:para>
<db:para>See <db:link xlink:href="location-places-cpp.xml#fetching-rich-content">Fetching Rich Content</db:link> for an example of usage.</db:para>
</db:section>
<db:section xml:id="getPlaceDetails">
<db:title>QPlaceDetailsReply *QPlaceManager::getPlaceDetails(const QString &amp;<db:emphasis>placeId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceDetailsReply *</db:type>
<db:methodname>getPlaceDetails</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceDetailsReply * getPlaceDetails(const QString &amp;placeId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves a details of place corresponding to the given <db:code role="parameter">placeId</db:code>.</db:para>
<db:para>See <db:link xlink:href="location-places-qml.xml#fetching-place-details">Fetching Place Details</db:link> for an example of usage.</db:para>
</db:section>
<db:section xml:id="initializeCategories">
<db:title>QPlaceReply *QPlaceManager::initializeCategories()</db:title>
<db:methodsynopsis>
<db:type>QPlaceReply *</db:type>
<db:methodname>initializeCategories</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceReply * initializeCategories()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the categories of the manager.</db:para>
<db:para>See <db:link xlink:href="location-places-cpp.xml#using-categories">Using Categories</db:link> for an example of usage.</db:para>
</db:section>
<db:section xml:id="locales">
<db:title>QList&lt;QLocale&gt; QPlaceManager::locales() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QLocale&gt;</db:type>
<db:methodname>locales</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QLocale&gt; locales() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of preferred locales. The locales are used as a hint to the manager for what language place and category details should be returned in.</db:para>
<db:para>If the first specified locale cannot be accommodated, the manager falls back to the next and so forth. Some manager backends may not support a set of locales which are rigidly defined. An arbitrary example is that some places in France could have French and English localizations, while certain areas in America may only have the English localization available. In this example, the set of supported locales is context dependent on the search location.</db:para>
<db:para>If the manager cannot accommodate any of the preferred locales, the manager falls back to using a supported language that is backend specific.</db:para>
<db:para>Support for locales may vary from provider to provider. For those that do support it, by default, the global default locale is set as the manager's only locale.</db:para>
<db:para>For managers that do not support locales, the locale list is always empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml#setLocales">setLocales</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="managerName">
<db:title>QString QPlaceManager::managerName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>managerName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString managerName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the manager</db:para>
</db:section>
<db:section xml:id="managerVersion">
<db:title>int QPlaceManager::managerVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>managerVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int managerVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the manager version.</db:para>
</db:section>
<db:section xml:id="matchingPlaces">
<db:title>QPlaceMatchReply *QPlaceManager::matchingPlaces(const QPlaceMatchRequest &amp;<db:emphasis>request</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceMatchReply *</db:type>
<db:methodname>matchingPlaces</db:methodname>
<db:methodparam>
<db:type>const QPlaceMatchRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceMatchReply * matchingPlaces(const QPlaceMatchRequest &amp;request) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reply which contains a list of places which correspond/match those specified in the <db:code role="parameter">request</db:code>. The places specified in the request come from a different manager.</db:para>
</db:section>
<db:section xml:id="parentCategoryId">
<db:title>QString QPlaceManager::parentCategoryId(const QString &amp;<db:emphasis>categoryId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>parentCategoryId</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString parentCategoryId(const QString &amp;categoryId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parent category identifier of the category corresponding to <db:code role="parameter">categoryId</db:code>.</db:para>
</db:section>
<db:section xml:id="placeAdded">
<db:title>void QPlaceManager::placeAdded(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>placeAdded</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void placeAdded(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a place has been added to the manager engine's datastore. The particular added place is specified by <db:code role="parameter">placeId</db:code>.</db:para>
<db:para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="placeRemoved">
<db:title>void QPlaceManager::placeRemoved(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>placeRemoved</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void placeRemoved(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a place has been removed from the manager's datastore. The particular place that has been removed is specified by <db:code role="parameter">placeId</db:code>.</db:para>
<db:para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="placeUpdated">
<db:title>void QPlaceManager::placeUpdated(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>placeUpdated</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void placeUpdated(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a place has been modified in the manager's datastore. The particular modified place is specified by <db:code role="parameter">placeId</db:code>.</db:para>
<db:para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeCategory">
<db:title>QPlaceIdReply *QPlaceManager::removeCategory(const QString &amp;<db:emphasis>categoryId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPlaceIdReply *</db:type>
<db:methodname>removeCategory</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceIdReply * removeCategory(const QString &amp;categoryId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the category corresponding to <db:code role="parameter">categoryId</db:code> from the manager.</db:para>
<db:para>See <db:link xlink:href="location-places-cpp.xml#removing-a-category">Removing a category</db:link> for an example of usage.</db:para>
</db:section>
<db:section xml:id="removePlace">
<db:title>QPlaceIdReply *QPlaceManager::removePlace(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPlaceIdReply *</db:type>
<db:methodname>removePlace</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceIdReply * removePlace(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the place corresponding to <db:code role="parameter">placeId</db:code> from the manager.</db:para>
<db:para>See <db:link xlink:href="location-places-cpp.xml#removing-a-place-cpp">Removing a place cpp</db:link> for an example of usage.</db:para>
</db:section>
<db:section xml:id="saveCategory">
<db:title>QPlaceIdReply *QPlaceManager::saveCategory(const QPlaceCategory &amp;<db:emphasis>category</db:emphasis>, const QString &amp;<db:emphasis>parentId</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>QPlaceIdReply *</db:type>
<db:methodname>saveCategory</db:methodname>
<db:methodparam>
<db:type>const QPlaceCategory &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceIdReply * saveCategory(const QPlaceCategory &amp;category, const QString &amp;parentId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Saves a <db:code role="parameter">category</db:code> that is a child of the category specified by <db:code role="parameter">parentId</db:code>. An empty <db:code role="parameter">parentId</db:code> means <db:code role="parameter">category</db:code> is saved as a top level category.</db:para>
<db:para>See <db:link xlink:href="location-places-cpp.xml#saving-a-category">Saving a category</db:link> for an example of usage.</db:para>
</db:section>
<db:section xml:id="savePlace">
<db:title>QPlaceIdReply *QPlaceManager::savePlace(const QPlace &amp;<db:emphasis>place</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPlaceIdReply *</db:type>
<db:methodname>savePlace</db:methodname>
<db:methodparam>
<db:type>const QPlace &amp;</db:type>
<db:parameter>place</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceIdReply * savePlace(const QPlace &amp;place)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Saves a specified <db:code role="parameter">place</db:code>.</db:para>
<db:para>See <db:link xlink:href="location-places-cpp.xml#saving-a-place-cpp">Saving a place cpp</db:link> for an example of usage.</db:para>
</db:section>
<db:section xml:id="search">
<db:title>QPlaceSearchReply *QPlaceManager::search(const QPlaceSearchRequest &amp;<db:emphasis>request</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceSearchReply *</db:type>
<db:methodname>search</db:methodname>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceSearchReply * search(const QPlaceSearchRequest &amp;request) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for places according to the parameters specified in <db:code role="parameter">request</db:code>.</db:para>
<db:para>See <db:link xlink:href="location-places-cpp.xml#discovery-search">Discovery/Search</db:link> for an example of usage.</db:para>
</db:section>
<db:section xml:id="searchSuggestions">
<db:title>QPlaceSearchSuggestionReply *QPlaceManager::searchSuggestions(const QPlaceSearchRequest &amp;<db:emphasis>request</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceSearchSuggestionReply *</db:type>
<db:methodname>searchSuggestions</db:methodname>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceSearchSuggestionReply * searchSuggestions(const QPlaceSearchRequest &amp;request) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests a set of search term suggestions according to the parameters specified in <db:code role="parameter">request</db:code>. The <db:code role="parameter">request</db:code> can hold the incomplete search term, along with other data such as a search area to narrow down relevant results.</db:para>
<db:para>See <db:link xlink:href="location-places-cpp.xml#search-suggestions">Search Suggestions</db:link> for an example of usage.</db:para>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QPlaceManager::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocale</db:methodname>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocale(const QLocale &amp;locale)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function which sets the manager's list of preferred locales to a single <db:code role="parameter">locale</db:code>.</db:para>
</db:section>
<db:section xml:id="setLocales">
<db:title>void QPlaceManager::setLocales(const QList&lt;QLocale&gt; &amp;<db:emphasis>locales</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocales</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QLocale&gt; &amp;</db:type>
<db:parameter>locales</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocales(const QList&lt;QLocale&gt; &amp;locales)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the list of preferred <db:code role="parameter">locales</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml#locales">locales</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
