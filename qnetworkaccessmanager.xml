<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QNetworkAccessManager Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> class allows the application to send network requests and receive replies.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkAccessManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkAccessManager is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Network Access API is constructed around one <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> object, which holds the common configuration and settings for the requests it sends. It contains the proxy and cache configuration, as well as the signals related to such issues, and reply signals that can be used to monitor the progress of a network operation. One <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> should be enough for the whole Qt application.</db:para>
<db:para>Once a <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> object has been created, the application can use it to send requests over the network. A group of standard functions are supplied that take a request and optional data, and each return a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object. The returned object is used to obtain any data returned in response to the corresponding request.</db:para>
<db:para>A simple download off the network could be accomplished with:</db:para>
<db:programlisting language="cpp">QNetworkAccessManager *manager = new QNetworkAccessManager(this);
connect(manager, SIGNAL(finished(QNetworkReply*)),
        this, SLOT(replyFinished(QNetworkReply*)));

manager-&gt;get(QNetworkRequest(QUrl(&quot;http://qt-project.org&quot;)));
</db:programlisting>
<db:para><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> has an asynchronous API. When the <db:code>replyFinished</db:code> slot above is called, the parameter it takes is the <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object containing the downloaded data as well as meta-data (headers, etc.).</db:para>
<db:note>
<db:para>After the request has finished, it is the responsibility of the user to delete the <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object at an appropriate time. Do not directly delete it inside the slot connected to <db:link xlink:href="qnetworkaccessmanager.xml#finished">finished</db:link>(). You can use the <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() function.</db:para>
</db:note>
<db:note>
<db:para><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> queues the requests it receives. The number of requests executed in parallel is dependent on the protocol. Currently, for the HTTP protocol on desktop platforms, 6 requests are executed in parallel for one host/port combination.</db:para>
</db:note>
<db:para>A more involved example, assuming the manager is already existent, can be:</db:para>
<db:programlisting language="cpp">QNetworkRequest request;
request.setUrl(QUrl(&quot;http://qt-project.org&quot;));
request.setRawHeader(&quot;User-Agent&quot;, &quot;MyOwnBrowser 1.0&quot;);

QNetworkReply *reply = manager-&gt;get(request);
connect(reply, SIGNAL(readyRead()), this, SLOT(slotReadyRead()));
connect(reply, SIGNAL(error(QNetworkReply::NetworkError)),
        this, SLOT(slotError(QNetworkReply::NetworkError)));
connect(reply, SIGNAL(sslErrors(QList&lt;QSslError&gt;)),
        this, SLOT(slotSslErrors(QList&lt;QSslError&gt;)));
</db:programlisting>
<db:section xml:id="network-and-roaming-support">
<db:title>Network and Roaming support</db:title>
<db:para>With the addition of the <db:link xlink:href="bearer-management.xml">Bearer Management</db:link> API to Qt 4.7 <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> gained the ability to manage network connections. <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> can start the network interface if the device is offline and terminates the interface if the current process is the last one to use the uplink. Note that some platforms utilize grace periods from when the last application stops using a uplink until the system actually terminates the connectivity link. Roaming is equally transparent. Any queued/pending network requests are automatically transferred to the new access point.</db:para>
<db:para>Clients wanting to utilize this feature should not require any changes. In fact it is likely that existing platform specific connection code can simply be removed from the application.</db:para>
<db:note>
<db:para>The network and roaming support in <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> is conditional upon the platform supporting connection management. The <db:link xlink:href="qnetworkconfigurationmanager.xml#Capability-enum">QNetworkConfigurationManager::NetworkSessionRequired</db:link> can be used to detect whether <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> utilizes this feature. Currently only Meego/Harmattan platforms provide connection management support.</db:para>
</db:note>
<db:note>
<db:para>This feature cannot be used in combination with the Bearer Management API as provided by QtMobility. Applications have to migrate to the Qt version of Bearer Management.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:member>
<db:member><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:member>
<db:member><db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="NetworkAccessibility-enum">
<db:title>enum QNetworkAccessManager::NetworkAccessibility</db:title>
<db:para>Indicates whether the network is accessible via this network access manager.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:emphasis>::UnknownAccessibility</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>The network accessibility cannot be determined.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:emphasis>::NotAccessible</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The network is not currently accessible, either because there is currently no network coverage or network access has been explicitly disabled by a call to <db:link xlink:href="qnetworkaccessmanager.xml#setNetworkAccessible">setNetworkAccessible</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:emphasis>::Accessible</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The network is accessible.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#networkAccessible">networkAccessible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Operation-enum">
<db:title>[since 4.7] enum QNetworkAccessManager::Operation</db:title>
<db:para>Indicates the operation this reply is processing.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:emphasis>::HeadOperation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>retrieve headers operation (created with <db:link xlink:href="qnetworkaccessmanager.xml#head">head</db:link>())</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:emphasis>::GetOperation</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>retrieve headers and download contents (created with <db:link xlink:href="qnetworkaccessmanager.xml#get">get</db:link>())</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:emphasis>::PutOperation</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>upload contents operation (created with <db:link xlink:href="qnetworkaccessmanager.xml#put">put</db:link>())</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:emphasis>::PostOperation</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>send the contents of an HTML form for processing via HTTP POST (created with <db:link xlink:href="qnetworkaccessmanager.xml#post">post</db:link>())</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:emphasis>::DeleteOperation</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>delete contents operation (created with <db:link xlink:href="qnetworkaccessmanager.xml#deleteResource">deleteResource</db:link>())</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:emphasis>::CustomOperation</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>custom operation (created with <db:link xlink:href="qnetworkaccessmanager.xml#sendCustomRequest">sendCustomRequest</db:link>())</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#operation">QNetworkReply::operation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkAccessManager">
<db:title>[explicit] QNetworkAccessManager::QNetworkAccessManager(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> object that is the center of the Network Access API and sets <db:code role="parameter">parent</db:code> as the parent object.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkAccessManager">
<db:title>[virtual noexcept] QNetworkAccessManager::~QNetworkAccessManager()</db:title>
<db:para>Destroys the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> object and frees up any resources. Note that <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> objects that are returned from this class have this object set as their parents, which means that they will be deleted along with it if you don't call <db:link xlink:href="qobject.xml#setParent">QObject::setParent</db:link>() on them.</db:para>
</db:section>
<db:section xml:id="activeConfiguration">
<db:title>[since 4.7] QNetworkConfiguration QNetworkAccessManager::activeConfiguration() const</db:title>
<db:para>Returns the current active network configuration.</db:para>
<db:para>If the network configuration returned by <db:link xlink:href="qnetworkaccessmanager.xml#configuration">configuration</db:link>() is of type <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">QNetworkConfiguration::ServiceNetwork</db:link> this function will return the current active child network configuration of that configuration. Otherwise returns the same network configuration as <db:link xlink:href="qnetworkaccessmanager.xml#configuration">configuration</db:link>().</db:para>
<db:para>Use this function to return the actual network configuration currently in use by the network session.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#configuration">configuration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="authenticationRequired">
<db:title>void QNetworkAccessManager::authenticationRequired(QNetworkReply *<db:emphasis>reply</db:emphasis>, QAuthenticator *<db:emphasis>authenticator</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a final server requests authentication before it delivers the requested contents. The slot connected to this signal should fill the credentials for the contents (which can be determined by inspecting the <db:code role="parameter">reply</db:code> object) in the <db:code role="parameter">authenticator</db:code> object.</db:para>
<db:para><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will cache the credentials internally and will send the same values if the server requires authentication again, without emitting the authenticationRequired() signal. If it rejects the credentials, this signal will be emitted again.</db:para>
<db:note>
<db:para>To have the request not send credentials you must not call setUser() or setPassword() on the <db:code role="parameter">authenticator</db:code> object. This will result in the <db:link xlink:href="qnetworkaccessmanager.xml#finished">finished</db:link>() signal being emitted with a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> with error <db:link xlink:href="qnetworkreply.xml#NetworkError-enum">AuthenticationRequiredError</db:link>.</db:para>
</db:note>
<db:note>
<db:para>It is not possible to use a QueuedConnection to connect to this signal, as the connection will fail if the authenticator has not been filled in with new information when the signal returns.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#proxyAuthenticationRequired">proxyAuthenticationRequired</db:link>()</db:member>
<db:member><db:link xlink:href="qauthenticator.xml#setUser">QAuthenticator::setUser</db:link>()</db:member>
<db:member><db:link xlink:href="qauthenticator.xml#setPassword">QAuthenticator::setPassword</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cache">
<db:title>[since 4.5] QAbstractNetworkCache *QNetworkAccessManager::cache() const</db:title>
<db:para>Returns the cache that is used to store data obtained from the network.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setCache">setCache</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearAccessCache">
<db:title>[since 5.0] void QNetworkAccessManager::clearAccessCache()</db:title>
<db:para>Flushes the internal cache of authentication data and network connections.</db:para>
<db:para>This function is useful for doing auto tests.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="configuration">
<db:title>[since 4.7] QNetworkConfiguration QNetworkAccessManager::configuration() const</db:title>
<db:para>Returns the network configuration that will be used to create the <db:link xlink:href="qnetworksession.xml">network session</db:link> which will be used when processing network requests.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setConfiguration">setConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#activeConfiguration">activeConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cookieJar">
<db:title>QNetworkCookieJar *QNetworkAccessManager::cookieJar() const</db:title>
<db:para>Returns the <db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> that is used to store cookies obtained from the network as well as cookies that are about to be sent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setCookieJar">setCookieJar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createRequest">
<db:title>[virtual protected] QNetworkReply *QNetworkAccessManager::createRequest(QNetworkAccessManager::Operation <db:emphasis>op</db:emphasis>, const QNetworkRequest &amp;<db:emphasis>req</db:emphasis>, QIODevice *<db:emphasis>outgoingData</db:emphasis> = 0)</db:title>
<db:para>Returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object to handle the operation <db:code role="parameter">op</db:code> and request <db:code role="parameter">req</db:code>. The device <db:code role="parameter">outgoingData</db:code> is always 0 for Get and Head requests, but is the value passed to <db:link xlink:href="qnetworkaccessmanager.xml#post">post</db:link>() and <db:link xlink:href="qnetworkaccessmanager.xml#put">put</db:link>() in those operations (the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> variants will pass a <db:link xlink:href="qbuffer.xml">QBuffer</db:link> object).</db:para>
<db:para>The default implementation calls <db:link xlink:href="qnetworkcookiejar.xml#cookiesForUrl">QNetworkCookieJar::cookiesForUrl</db:link>() on the cookie jar set with <db:link xlink:href="qnetworkaccessmanager.xml#setCookieJar">setCookieJar</db:link>() to obtain the cookies to be sent to the remote server.</db:para>
<db:para>The returned object must be in an open state.</db:para>
</db:section>
<db:section xml:id="deleteResource">
<db:title>[since 4.6] QNetworkReply *QNetworkAccessManager::deleteResource(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:para>Sends a request to delete the resource identified by the URL of <db:code role="parameter">request</db:code>.</db:para>
<db:note>
<db:para>This feature is currently available for HTTP only, performing an HTTP DELETE request.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#sendCustomRequest">sendCustomRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QNetworkAccessManager::finished(QNetworkReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a pending network reply is finished. The <db:code role="parameter">reply</db:code> parameter will contain a pointer to the reply that has just finished. This signal is emitted in tandem with the <db:link xlink:href="qnetworkreply.xml#finished">QNetworkReply::finished</db:link>() signal.</db:para>
<db:para>See <db:link xlink:href="qnetworkreply.xml#finished">QNetworkReply::finished</db:link>() for information on the status that the object will be in.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#finished">QNetworkReply::finished</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#error">QNetworkReply::error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="get">
<db:title>QNetworkReply *QNetworkAccessManager::get(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:para>Posts a request to obtain the contents of the target <db:code role="parameter">request</db:code> and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object opened for reading which emits the <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() signal whenever new data arrives.</db:para>
<db:para>The contents as well as associated headers will be downloaded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#sendCustomRequest">sendCustomRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="head">
<db:title>QNetworkReply *QNetworkAccessManager::head(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:para>Posts a request to obtain the network headers for <db:code role="parameter">request</db:code> and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object which will contain such headers.</db:para>
<db:para>The function is named after the HTTP request associated (HEAD).</db:para>
</db:section>
<db:section xml:id="networkAccessible">
<db:title>[since 4.7] QNetworkAccessManager::NetworkAccessibility QNetworkAccessManager::networkAccessible() const</db:title>
<db:para>Returns the current network accessibility.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setNetworkAccessible">setNetworkAccessible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="networkAccessibleChanged">
<db:title>void QNetworkAccessManager::networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility <db:emphasis>accessible</db:emphasis>)</db:title>
<db:para>This signal is emitted when the value of the <db:link xlink:href="qnetworkaccessmanager.xml#networkAccessible">networkAccessible</db:link> property changes. <db:code role="parameter">accessible</db:code> is the new network accessibility.</db:para>
</db:section>
<db:section xml:id="post">
<db:title>QNetworkReply *QNetworkAccessManager::post(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>, QIODevice *<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Sends an HTTP POST request to the destination specified by <db:code role="parameter">request</db:code> and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object opened for reading that will contain the reply sent by the server. The contents of the <db:code role="parameter">data</db:code> device will be uploaded to the server.</db:para>
<db:para><db:code role="parameter">data</db:code> must be open for reading and must remain valid until the <db:link xlink:href="qnetworkaccessmanager.xml#finished">finished</db:link>() signal is emitted for this reply.</db:para>
<db:note>
<db:para>Sending a POST request on protocols other than HTTP and HTTPS is undefined and will probably fail.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#sendCustomRequest">sendCustomRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="post-1">
<db:title>[since 4.8] QNetworkReply *QNetworkAccessManager::post(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>, QHttpMultiPart *<db:emphasis>multiPart</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends the contents of the <db:code role="parameter">multiPart</db:code> message to the destination specified by <db:code role="parameter">request</db:code>.</db:para>
<db:para>This can be used for sending MIME multipart messages over HTTP.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link></db:member>
<db:member><db:link xlink:href="qhttppart.xml">QHttpPart</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#put">put</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="post-2">
<db:title>QNetworkReply *QNetworkAccessManager::post(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends the contents of the <db:code role="parameter">data</db:code> byte array to the destination specified by <db:code role="parameter">request</db:code>.</db:para>
</db:section>
<db:section xml:id="proxy">
<db:title>QNetworkProxy QNetworkAccessManager::proxy() const</db:title>
<db:para>Returns the <db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link> that the requests sent using this <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> object will use. The default value for the proxy is <db:link xlink:href="qnetworkproxy.xml#ProxyType-enum">QNetworkProxy::DefaultProxy</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setProxy">setProxy</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setProxyFactory">setProxyFactory</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#proxyAuthenticationRequired">proxyAuthenticationRequired</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="proxyAuthenticationRequired">
<db:title>void QNetworkAccessManager::proxyAuthenticationRequired(const QNetworkProxy &amp;<db:emphasis>proxy</db:emphasis>, QAuthenticator *<db:emphasis>authenticator</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a proxy requests authentication and <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> cannot find a valid, cached credential. The slot connected to this signal should fill in the credentials for the proxy <db:code role="parameter">proxy</db:code> in the <db:code role="parameter">authenticator</db:code> object.</db:para>
<db:para><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will cache the credentials internally. The next time the proxy requests authentication, <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will automatically send the same credential without emitting the proxyAuthenticationRequired signal again.</db:para>
<db:para>If the proxy rejects the credentials, <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will emit the signal again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#proxy">proxy</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setProxy">setProxy</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#authenticationRequired">authenticationRequired</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="proxyFactory">
<db:title>[since 4.5] QNetworkProxyFactory *QNetworkAccessManager::proxyFactory() const</db:title>
<db:para>Returns the proxy factory that this <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> object is using to determine the proxies to be used for requests.</db:para>
<db:para>Note that the pointer returned by this function is managed by <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> and could be deleted at any time.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setProxyFactory">setProxyFactory</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#proxy">proxy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="put">
<db:title>QNetworkReply *QNetworkAccessManager::put(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>, QIODevice *<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Uploads the contents of <db:code role="parameter">data</db:code> to the destination <db:code role="parameter">request</db:code> and returnes a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object that will be open for reply.</db:para>
<db:para><db:code role="parameter">data</db:code> must be opened for reading when this function is called and must remain valid until the <db:link xlink:href="qnetworkaccessmanager.xml#finished">finished</db:link>() signal is emitted for this reply.</db:para>
<db:para>Whether anything will be available for reading from the returned object is protocol dependent. For HTTP, the server may send a small HTML page indicating the upload was successful (or not). Other protocols will probably have content in their replies.</db:para>
<db:note>
<db:para>For HTTP, this request will send a PUT request, which most servers do not allow. Form upload mechanisms, including that of uploading files through HTML forms, use the POST mechanism.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#sendCustomRequest">sendCustomRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="put-1">
<db:title>[since 4.8] QNetworkReply *QNetworkAccessManager::put(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>, QHttpMultiPart *<db:emphasis>multiPart</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends the contents of the <db:code role="parameter">multiPart</db:code> message to the destination specified by <db:code role="parameter">request</db:code>.</db:para>
<db:para>This can be used for sending MIME multipart messages over HTTP.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link></db:member>
<db:member><db:link xlink:href="qhttppart.xml">QHttpPart</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#post">post</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="put-2">
<db:title>QNetworkReply *QNetworkAccessManager::put(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends the contents of the <db:code role="parameter">data</db:code> byte array to the destination specified by <db:code role="parameter">request</db:code>.</db:para>
</db:section>
<db:section xml:id="sendCustomRequest">
<db:title>[since 4.7] QNetworkReply *QNetworkAccessManager::sendCustomRequest(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>, const QByteArray &amp;<db:emphasis>verb</db:emphasis>, QIODevice *<db:emphasis>data</db:emphasis> = 0)</db:title>
<db:para>Sends a custom request to the server identified by the URL of <db:code role="parameter">request</db:code>.</db:para>
<db:para>It is the user's responsibility to send a <db:code role="parameter">verb</db:code> to the server that is valid according to the HTTP specification.</db:para>
<db:para>This method provides means to send verbs other than the common ones provided via <db:link xlink:href="qnetworkaccessmanager.xml#get">get</db:link>() or <db:link xlink:href="qnetworkaccessmanager.xml#post">post</db:link>() etc., for instance sending an HTTP OPTIONS command.</db:para>
<db:para>If <db:code role="parameter">data</db:code> is not empty, the contents of the <db:code role="parameter">data</db:code> device will be uploaded to the server; in that case, data must be open for reading and must remain valid until the <db:link xlink:href="qnetworkaccessmanager.xml#finished">finished</db:link>() signal is emitted for this reply.</db:para>
<db:note>
<db:para>This feature is currently available for HTTP(S) only.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#deleteResource">deleteResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCache">
<db:title>[since 4.5] void QNetworkAccessManager::setCache(QAbstractNetworkCache *<db:emphasis>cache</db:emphasis>)</db:title>
<db:para>Sets the manager's network cache to be the <db:code role="parameter">cache</db:code> specified. The cache is used for all requests dispatched by the manager.</db:para>
<db:para>Use this function to set the network cache object to a class that implements additional features, like saving the cookies to permanent storage.</db:para>
<db:note>
<db:para><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> takes ownership of the <db:code role="parameter">cache</db:code> object.</db:para>
</db:note>
<db:para><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> by default does not have a set cache. Qt provides a simple disk cache, <db:link xlink:href="qnetworkdiskcache.xml">QNetworkDiskCache</db:link>, which can be used.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#cache">cache</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#CacheLoadControl-enum">QNetworkRequest::CacheLoadControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setConfiguration">
<db:title>[since 4.7] void QNetworkAccessManager::setConfiguration(const QNetworkConfiguration &amp;<db:emphasis>config</db:emphasis>)</db:title>
<db:para>Sets the network configuration that will be used when creating the <db:link xlink:href="qnetworksession.xml">network session</db:link> to <db:code role="parameter">config</db:code>.</db:para>
<db:para>The network configuration is used to create and open a network session before any request that requires network access is process. If no network configuration is explicitly set via this function the network configuration returned by <db:link xlink:href="qnetworkconfigurationmanager.xml#defaultConfiguration">QNetworkConfigurationManager::defaultConfiguration</db:link>() will be used.</db:para>
<db:para>To restore the default network configuration set the network configuration to the value returned from <db:link xlink:href="qnetworkconfigurationmanager.xml#defaultConfiguration">QNetworkConfigurationManager::defaultConfiguration</db:link>().</db:para>
<db:programlisting language="cpp">QNetworkConfigurationManager manager;
networkAccessManager-&gt;setConfiguration(manager.defaultConfiguration());
</db:programlisting>
<db:para>If an invalid network configuration is set, a network session will not be created. In this case network requests will be processed regardless, but may fail. For example:</db:para>
<db:programlisting language="cpp">networkAccessManager-&gt;setConfiguration(QNetworkConfiguration());
</db:programlisting>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#configuration">configuration</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCookieJar">
<db:title>void QNetworkAccessManager::setCookieJar(QNetworkCookieJar *<db:emphasis>cookieJar</db:emphasis>)</db:title>
<db:para>Sets the manager's cookie jar to be the <db:code role="parameter">cookieJar</db:code> specified. The cookie jar is used by all requests dispatched by the manager.</db:para>
<db:para>Use this function to set the cookie jar object to a class that implements additional features, like saving the cookies to permanent storage.</db:para>
<db:note>
<db:para><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> takes ownership of the <db:code role="parameter">cookieJar</db:code> object.</db:para>
</db:note>
<db:para>If <db:code role="parameter">cookieJar</db:code> is in the same thread as this <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>, it will set the parent of the <db:code role="parameter">cookieJar</db:code> so that the cookie jar is deleted when this object is deleted as well. If you want to share cookie jars between different <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> objects, you may want to set the cookie jar's parent to 0 after calling this function.</db:para>
<db:para><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> by default does not implement any cookie policy of its own: it accepts all cookies sent by the server, as long as they are well formed and meet the minimum security requirements (cookie domain matches the request's and cookie path matches the request's). In order to implement your own security policy, override the <db:link xlink:href="qnetworkcookiejar.xml#cookiesForUrl">QNetworkCookieJar::cookiesForUrl</db:link>() and <db:link xlink:href="qnetworkcookiejar.xml#setCookiesFromUrl">QNetworkCookieJar::setCookiesFromUrl</db:link>() virtual functions. Those functions are called by <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> when it detects a new cookie.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#cookieJar">cookieJar</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookiejar.xml#cookiesForUrl">QNetworkCookieJar::cookiesForUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookiejar.xml#setCookiesFromUrl">QNetworkCookieJar::setCookiesFromUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNetworkAccessible">
<db:title>[since 4.7] void QNetworkAccessManager::setNetworkAccessible(QNetworkAccessManager::NetworkAccessibility <db:emphasis>accessible</db:emphasis>)</db:title>
<db:para>Overrides the reported network accessibility. If <db:code role="parameter">accessible</db:code> is <db:link xlink:href="qnetworkaccessmanager.xml#NetworkAccessibility-enum">NotAccessible</db:link> the reported network accessiblity will always be <db:link xlink:href="qnetworkaccessmanager.xml#NetworkAccessibility-enum">NotAccessible</db:link>. Otherwise the reported network accessibility will reflect the actual device state.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#networkAccessible">networkAccessible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProxy">
<db:title>void QNetworkAccessManager::setProxy(const QNetworkProxy &amp;<db:emphasis>proxy</db:emphasis>)</db:title>
<db:para>Sets the proxy to be used in future requests to be <db:code role="parameter">proxy</db:code>. This does not affect requests that have already been sent. The <db:link xlink:href="qnetworkaccessmanager.xml#proxyAuthenticationRequired">proxyAuthenticationRequired</db:link>() signal will be emitted if the proxy requests authentication.</db:para>
<db:para>A proxy set with this function will be used for all requests issued by <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>. In some cases, it might be necessary to select different proxies depending on the type of request being sent or the destination host. If that's the case, you should consider using <db:link xlink:href="qnetworkaccessmanager.xml#setProxyFactory">setProxyFactory</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#proxy">proxy</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#proxyAuthenticationRequired">proxyAuthenticationRequired</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProxyFactory">
<db:title>[since 4.5] void QNetworkAccessManager::setProxyFactory(QNetworkProxyFactory *<db:emphasis>factory</db:emphasis>)</db:title>
<db:para>Sets the proxy factory for this class to be <db:code role="parameter">factory</db:code>. A proxy factory is used to determine a more specific list of proxies to be used for a given request, instead of trying to use the same proxy value for all requests.</db:para>
<db:para>All queries sent by <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will have type <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::UrlRequest</db:link>.</db:para>
<db:para>For example, a proxy factory could apply the following rules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>if the target address is in the local network (for example, if the hostname contains no dots or if it's an IP address in the organization's range), return <db:link xlink:href="qnetworkproxy.xml#ProxyType-enum">QNetworkProxy::NoProxy</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>if the request is FTP, return an FTP proxy</db:para>
</db:listitem>
<db:listitem>
<db:para>if the request is HTTP or HTTPS, then return an HTTP proxy</db:para>
</db:listitem>
<db:listitem>
<db:para>otherwise, return a SOCKSv5 proxy server</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The lifetime of the object <db:code role="parameter">factory</db:code> will be managed by <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>. It will delete the object when necessary.</db:para>
<db:note>
<db:para>If a specific proxy is set with <db:link xlink:href="qnetworkaccessmanager.xml#setProxy">setProxy</db:link>(), the factory will not be used.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#proxyFactory">proxyFactory</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setProxy">setProxy</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslErrors">
<db:title>void QNetworkAccessManager::sslErrors(QNetworkReply *<db:emphasis>reply</db:emphasis>, const QList&lt;QSslError&gt; &amp;<db:emphasis>errors</db:emphasis>)</db:title>
<db:para>This signal is emitted if the SSL/TLS session encountered errors during the set up, including certificate verification errors. The <db:code role="parameter">errors</db:code> parameter contains the list of errors and <db:code role="parameter">reply</db:code> is the <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> that is encountering these errors.</db:para>
<db:para>To indicate that the errors are not fatal and that the connection should proceed, the <db:link xlink:href="qnetworkreply.xml#ignoreSslErrors">QNetworkReply::ignoreSslErrors</db:link>() function should be called from the slot connected to this signal. If it is not called, the SSL session will be torn down before any data is exchanged (including the URL).</db:para>
<db:para>This signal can be used to display an error message to the user indicating that security may be compromised and display the SSL settings (see sslConfiguration() to obtain it). If the user decides to proceed after analyzing the remote certificate, the slot should call ignoreSslErrors().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslsocket.xml#sslErrors">QSslSocket::sslErrors</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#sslErrors">QNetworkReply::sslErrors</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#sslConfiguration">QNetworkReply::sslConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#ignoreSslErrors">QNetworkReply::ignoreSslErrors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
