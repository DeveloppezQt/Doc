<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QMetaProperty Class</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link> class provides meta-data about a property.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMetaProperty</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMetaProperty is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Property meta-data is obtained from an object's meta-object. See <db:link xlink:href="qmetaobject.xml#property">QMetaObject::property</db:link>() and <db:link xlink:href="qmetaobject.xml#propertyCount">QMetaObject::propertyCount</db:link>() for details.</db:para>
<db:section xml:id="property-meta-data">
<db:title>Property Meta-Data</db:title>
<db:para>A property has a <db:link xlink:href="qmetaproperty.xml#name">name</db:link>() and a <db:link xlink:href="qmetaproperty.xml#type">type</db:link>(), as well as various attributes that specify its behavior: <db:link xlink:href="qmetaproperty.xml#isReadable">isReadable</db:link>(), <db:link xlink:href="qmetaproperty.xml#isWritable">isWritable</db:link>(), <db:link xlink:href="qmetaproperty.xml#isDesignable">isDesignable</db:link>(), <db:link xlink:href="qmetaproperty.xml#isScriptable">isScriptable</db:link>(), <db:link xlink:href="qmetaproperty.xml#revision">revision</db:link>(), and <db:link xlink:href="qmetaproperty.xml#isStored">isStored</db:link>().</db:para>
<db:para>If the property is an enumeration, <db:link xlink:href="qmetaproperty.xml#isEnumType">isEnumType</db:link>() returns true; if the property is an enumeration that is also a flag (i.e. its values can be combined using the OR operator), <db:link xlink:href="qmetaproperty.xml#isEnumType">isEnumType</db:link>() and <db:link xlink:href="qmetaproperty.xml#isFlagType">isFlagType</db:link>() both return true. The enumerator for these types is available from <db:link xlink:href="qmetaproperty.xml#enumerator">enumerator</db:link>().</db:para>
<db:para>The property's values are set and retrieved with <db:link xlink:href="qmetaproperty.xml#read">read</db:link>(), <db:link xlink:href="qmetaproperty.xml#write">write</db:link>(), and <db:link xlink:href="qmetaproperty.xml#reset">reset</db:link>(); they can also be changed through <db:link xlink:href="qobject.xml">QObject</db:link>'s set and get functions. See <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>() and <db:link xlink:href="qobject.xml#property">QObject::property</db:link>() for details.</db:para>
</db:section>
<db:section xml:id="copying-and-assignment">
<db:title>Copying and Assignment</db:title>
<db:para><db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link> objects can be copied by value. However, each copy will refer to the same underlying property meta-data.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml">QMetaObject</db:link></db:member>
<db:member><db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link></db:member>
<db:member><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:member>
<db:member><db:link xlink:href="properties.xml#qt-s-property-system">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="enumerator">
<db:title>QMetaEnum QMetaProperty::enumerator() const</db:title>
<db:para>Returns the enumerator if this property's type is an enumerator type; otherwise the returned value is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isEnumType">isEnumType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isFlagType">isFlagType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasNotifySignal">
<db:title>bool QMetaProperty::hasNotifySignal() const</db:title>
<db:para>Returns true if this property has a corresponding change notify signal; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#notifySignal">notifySignal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isConstant">
<db:title>[since 4.6] bool QMetaProperty::isConstant() const</db:title>
<db:para>Returns true if the property is constant; otherwise returns false.</db:para>
<db:para>A property is constant if the Q_PROPERTY()'s CONSTANT attribute is set.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="isDesignable">
<db:title>bool QMetaProperty::isDesignable(const QObject *<db:emphasis>object</db:emphasis> = 0) const</db:title>
<db:para>Returns true if this property is designable for the given <db:code role="parameter">object</db:code>; otherwise returns false.</db:para>
<db:para>If no <db:code role="parameter">object</db:code> is given, the function returns false if the Q_PROPERTY()'s DESIGNABLE attribute is false; otherwise returns true (if the attribute is true or is a function or expression).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isScriptable">isScriptable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isStored">isStored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEnumType">
<db:title>bool QMetaProperty::isEnumType() const</db:title>
<db:para>Returns true if the property's type is an enumeration value; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#enumerator">enumerator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isFlagType">isFlagType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFinal">
<db:title>[since 4.6] bool QMetaProperty::isFinal() const</db:title>
<db:para>Returns true if the property is final; otherwise returns false.</db:para>
<db:para>A property is final if the Q_PROPERTY()'s FINAL attribute is set.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="isFlagType">
<db:title>bool QMetaProperty::isFlagType() const</db:title>
<db:para>Returns true if the property's type is an enumeration value that is used as a flag; otherwise returns false.</db:para>
<db:para>Flags can be combined using the OR operator. A flag type is implicitly also an enum type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isEnumType">isEnumType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#enumerator">enumerator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">QMetaEnum::isFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadable">
<db:title>bool QMetaProperty::isReadable() const</db:title>
<db:para>Returns true if this property is readable; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isResettable">
<db:title>bool QMetaProperty::isResettable() const</db:title>
<db:para>Returns true if this property can be reset to a default value; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#reset">reset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isScriptable">
<db:title>bool QMetaProperty::isScriptable(const QObject *<db:emphasis>object</db:emphasis> = 0) const</db:title>
<db:para>Returns true if the property is scriptable for the given <db:code role="parameter">object</db:code>; otherwise returns false.</db:para>
<db:para>If no <db:code role="parameter">object</db:code> is given, the function returns false if the Q_PROPERTY()'s SCRIPTABLE attribute is false; otherwise returns true (if the attribute is true or is a function or expression).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isDesignable">isDesignable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isStored">isStored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isStored">
<db:title>bool QMetaProperty::isStored(const QObject *<db:emphasis>object</db:emphasis> = 0) const</db:title>
<db:para>Returns true if the property is stored for <db:code role="parameter">object</db:code>; otherwise returns false.</db:para>
<db:para>If no <db:code role="parameter">object</db:code> is given, the function returns false if the Q_PROPERTY()'s STORED attribute is false; otherwise returns true (if the attribute is true or is a function or expression).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isDesignable">isDesignable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isScriptable">isScriptable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUser">
<db:title>bool QMetaProperty::isUser(const QObject *<db:emphasis>object</db:emphasis> = 0) const</db:title>
<db:para>Returns true if this property is designated as the USER property, i.e., the one that the user can edit for <db:code role="parameter">object</db:code> or that is significant in some other way. Otherwise it returns false. e.g., the text property is the USER editable property of a QLineEdit.</db:para>
<db:para>If <db:code role="parameter">object</db:code> is null, the function returns false if the Q_PROPERTY()'s USER attribute is false. Otherwise it returns true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#userProperty">QMetaObject::userProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isDesignable">isDesignable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isScriptable">isScriptable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QMetaProperty::isValid() const</db:title>
<db:para>Returns true if this property is valid (readable); otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isReadable">isReadable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isWritable">
<db:title>bool QMetaProperty::isWritable() const</db:title>
<db:para>Returns true if this property is writable; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>const char *QMetaProperty::name() const</db:title>
<db:para>Returns this property's name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#typeName">typeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="notifySignal">
<db:title>[since 4.5] QMetaMethod QMetaProperty::notifySignal() const</db:title>
<db:para>Returns the <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> instance of the property change notifying signal if one was specified, otherwise returns an invalid <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#hasNotifySignal">hasNotifySignal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="notifySignalIndex">
<db:title>[since 4.6] int QMetaProperty::notifySignalIndex() const</db:title>
<db:para>Returns the index of the property change notifying signal if one was specified, otherwise returns -1.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#hasNotifySignal">hasNotifySignal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyIndex">
<db:title>[since 4.6] int QMetaProperty::propertyIndex() const</db:title>
<db:para>Returns this property's index.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="read">
<db:title>QVariant QMetaProperty::read(const QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:para>Reads the property's value from the given <db:code role="parameter">object</db:code>. Returns the value if it was able to read it; otherwise returns an invalid variant.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#reset">reset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isReadable">isReadable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>bool QMetaProperty::reset(QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:para>Resets the property for the given <db:code role="parameter">object</db:code> with a reset method. Returns true if the reset worked; otherwise returns false.</db:para>
<db:para>Reset methods are optional; only a few properties support them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="revision">
<db:title>[since 5.1] int QMetaProperty::revision() const</db:title>
<db:para>Returns the property revision if one was specified by REVISION, otherwise returns 0.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QVariant::Type QMetaProperty::type() const</db:title>
<db:para>Returns this property's type. The return value is one of the values of the QVariant::Type enumeration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#userType">userType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#typeName">typeName</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="typeName">
<db:title>const char *QMetaProperty::typeName() const</db:title>
<db:para>Returns the name of this property's type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userType">
<db:title>[since 4.2] int QMetaProperty::userType() const</db:title>
<db:para>Returns this property's user type. The return value is one of the values that are registered with <db:link xlink:href="qmetatype.xml">QMetaType</db:link>, or <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::UnknownType</db:link> if the type is not registered.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qmetatype.xml">QMetaType</db:link></db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#typeName">typeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>bool QMetaProperty::write(QObject *<db:emphasis>object</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Writes <db:code role="parameter">value</db:code> as the property's value to the given <db:code role="parameter">object</db:code>. Returns true if the write succeeded; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#reset">reset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isWritable">isWritable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QMetaProperty</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="isEditable">
<db:title>[deprecated] bool QMetaProperty::isEditable(const QObject *<db:emphasis>object</db:emphasis> = 0) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns true if the property is editable for the given <db:code role="parameter">object</db:code>; otherwise returns false.</db:para>
<db:para>If no <db:code role="parameter">object</db:code> is given, the function returns false if the Q_PROPERTY()'s EDITABLE attribute is false; otherwise returns true (if the attribute is true or is a function or expression).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isDesignable">isDesignable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isScriptable">isScriptable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#isStored">isStored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
