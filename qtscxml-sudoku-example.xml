<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SCXML Sudoku</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of separate javascript file with SCXML.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="sudoku-features">
<db:title>Sudoku Features</db:title>
<db:mediaobject>
<db:alt>Screenshot of the Sudoku example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/sudoku.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Our sudoku contains the following features:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Initially and when the game ends, the sudoku enters the <db:code>idle</db:code> state. In that state the players can see if their last game finished successfully or not. The state machine is then in one of two child states of the <db:code>idle</db:code> state: <db:code>solved</db:code> or <db:code>unsolved</db:code>, respectively. In the <db:code>idle</db:code> state the players can also choose the sudoku grid they would like to solve. The grid is disabled and the user interaction is ignored.</db:para>
</db:listitem>
<db:listitem>
<db:para>After players click the <db:guilabel>Start</db:guilabel> button, the sudoku enters the <db:code>playing</db:code> state and is ready for the user interaction on the board.</db:para>
</db:listitem>
<db:listitem>
<db:para>When the game is in the <db:code>playing</db:code> state and the players click the <db:guilabel>Stop</db:guilabel> button, the game ends and enters the <db:code>unsolved</db:code> child state of the <db:code>idle</db:code> state. If the players have solved the current puzzle successfully, the game automatically ends and enters the <db:code>solved</db:code> child state of the <db:code>idle</db:code> state indicating success.</db:para>
</db:listitem>
<db:listitem>
<db:para>The board consist of 81 buttons, laid out in a 9x9 grid. The buttons with initial values given remain disabled during the game. The players can only interact with buttons initially empty. Each click on the button increases its value by one.</db:para>
</db:listitem>
<db:listitem>
<db:para>During the game the <db:guilabel>Undo</db:guilabel> button is available for the players' convenience.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="scxml-part-internal-logic-description">
<db:title>SCXML Part: Internal Logic Description</db:title>
<db:para>The <db:emphasis>sudoku.scxml</db:emphasis> file describes the internal structure of the states the sudoku game can be in, defines the transitions between states, and triggers the appropriate script functions when the transitions take place. It also communicates with the GUI part by sending events and listening to the upcoming events and reacting to them.</db:para>
<db:para>We use the ECMAScript data model:</db:para>
<db:programlisting language="cpp">&amp;lt;scxml xmlns=&quot;http://www.w3.org/2005/07/scxml&quot; version=&quot;1.0&quot;
       name=&quot;Sudoku&quot; datamodel=&quot;ecmascript&quot;&amp;gt;
</db:programlisting>
<db:para>We declare the following variables:</db:para>
<db:programlisting language="cpp">    &amp;lt;datamodel&amp;gt;
        &amp;lt;data id=&quot;initState&quot;/&amp;gt;
        &amp;lt;data id=&quot;currentState&quot; expr=&quot;[[]]&quot;/&amp;gt;
        &amp;lt;data id=&quot;undoStack&quot;/&amp;gt;
    &amp;lt;/datamodel&amp;gt;
</db:programlisting>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Variable</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>initState</db:code></db:para>
</db:td>
<db:td>
<db:para>Holds the initial state of the current game. It is a two-dimensional array of 9x9 cells that contain initial sudoku numbers. The value of zero means the cell is initially empty.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>currentState</db:code></db:para>
</db:td>
<db:td>
<db:para>Holds the current state of the game being played. It is similar to the <db:code>initState</db:code> variable and initially contains the same content. However, when the players start entering the numbers into the empty cells, this variable is being updated accordingly, while the <db:code>initState</db:code> variable remains unchanged.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>undoStack</db:code></db:para>
</db:td>
<db:td>
<db:para>Holds the history of players' moves. It is a list of the cells' coordinates that were touched last. Each new modification during a game adds a pair of x and y coordinates to that list.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The variables above are shared with the script helper functions defined in the <db:code>sudoku.js</db:code> file:</db:para>
<db:programlisting language="cpp">    &amp;lt;script src=&quot;sudoku.js&quot;/&amp;gt;
</db:programlisting>
<db:para>We call some of the functions defined there when taking transitions or in reaction to the events sent by the GUI.</db:para>
<db:para>All the possible states mentioned before are defined in a root state <db:code>game</db:code>.</db:para>
<db:programlisting language="cpp">    &amp;lt;state id=&quot;game&quot;&amp;gt;
        &amp;lt;onentry&amp;gt;
            &amp;lt;raise event=&quot;restart&quot;/&amp;gt;
        &amp;lt;/onentry&amp;gt;
        &amp;lt;state id=&quot;idle&quot;&amp;gt;
            ...
            &amp;lt;state id=&quot;unsolved&quot;/&amp;gt;
            &amp;lt;state id=&quot;solved&quot;/&amp;gt;
        &amp;lt;/state&amp;gt;
        &amp;lt;state id=&quot;playing&quot;&amp;gt;
            ...
        &amp;lt;/state&amp;gt;
        ...
    &amp;lt;/state&amp;gt;
</db:programlisting>
<db:para>When the sudoku example is started, the state machine enters the <db:code>game</db:code> state and stays in this state until the application exits. When entering this state, we raise internally the <db:code>restart</db:code> event. This event is also being raised whenever the players change the current sudoku grid or when they start the game by pressing the <db:guilabel>Start</db:guilabel> button. We do not want to send it when they have finished the current game because we still want to show the filled grid from the last game play. So, this event is being raised from three different contexts and is captured internally once in a targetless transition of the <db:code>game</db:code> state:</db:para>
<db:programlisting language="cpp">        &amp;lt;transition event=&quot;restart&quot;&amp;gt;
            &amp;lt;script&amp;gt;
                restart();
            &amp;lt;/script&amp;gt;
            &amp;lt;raise event=&quot;update&quot;/&amp;gt;
        &amp;lt;/transition&amp;gt;
</db:programlisting>
<db:para>When we catch the <db:code>restart</db:code> event, we call a helper <db:code>restart()</db:code> script method, defined in the <db:code>sudoku.js</db:code> file and raise internally an additional <db:code>update</db:code> event.</db:para>
<db:programlisting language="cpp">function restart() {
    for (var i = 0; i &amp;lt; initState.length; i++)
        currentState[i] = initState[i].slice();
    undoStack = [];
}
</db:programlisting>
<db:para>The <db:code>restart()</db:code> function assigns the <db:code>initState</db:code> into the <db:code>currentState</db:code> variable and clears the <db:code>undoStack</db:code> variable.</db:para>
<db:para>The <db:code>update</db:code> event is raised internally whenever we want to notify the GUI that the grid contents have been changed and that the GUI should update itself according to the passed values. This event is caught in another targetless transition of the <db:code>game</db:code> state:</db:para>
<db:programlisting language="cpp">        &amp;lt;transition event=&quot;update&quot;&amp;gt;
            &amp;lt;send event=&quot;updateGUI&quot;&amp;gt;
                &amp;lt;param name=&quot;currentState&quot; expr=&quot;currentState&quot;/&amp;gt;
                &amp;lt;param name=&quot;initState&quot; expr=&quot;initState&quot;/&amp;gt;
            &amp;lt;/send&amp;gt;
        &amp;lt;/transition&amp;gt;
</db:programlisting>
<db:para>We send the external event <db:code>updateGUI</db:code>, which is being intercepted in the <db:link xlink:href="qtscxml-sudoku-example.xml#cpp">C++ code</db:link>. The <db:code>updateGUI</db:code> event is equipped with additional data, specified inside <db:code>&lt;param&gt;</db:code> elements. We pass two parameters, which are accessible externally through the <db:code>currentState</db:code> and <db:code>initState</db:code> names. The actual values passed for them equal the datamodel's <db:code>currentState</db:code> and <db:code>initState</db:code> variables, respectively, which are specified by the <db:code>expr</db:code> attributes.</db:para>
<db:programlisting language="cpp">        &amp;lt;state id=&quot;idle&quot;&amp;gt;
            &amp;lt;transition event=&quot;start&quot; target=&quot;playing&quot;/&amp;gt;
            &amp;lt;transition event=&quot;setup&quot; target=&quot;unsolved&quot;&amp;gt;
                &amp;lt;assign location=&quot;initState&quot; expr=&quot;_event.data.initState&quot;/&amp;gt;
                &amp;lt;raise event=&quot;restart&quot;/&amp;gt;
            &amp;lt;/transition&amp;gt;
            &amp;lt;state id=&quot;unsolved&quot;/&amp;gt;
            &amp;lt;state id=&quot;solved&quot;/&amp;gt;
        &amp;lt;/state&amp;gt;
</db:programlisting>
<db:para>When in <db:code>idle</db:code> state, we react to two events, which may be sent by the GUI part: <db:code>start</db:code> and <db:code>setup</db:code>. Whenever we receive the <db:code>start</db:code> event, we just transition to the <db:code>playing</db:code> state. When we receive the <db:code>setup</db:code> event, we expect that the GUI part has sent us the new grid to be solved. The grid's new initial state is expected to be passed through the <db:code>initState</db:code> field of <db:code>_event.data</db:code>. We assign the passed value to the <db:code>initState</db:code> variable defined in our datamodel and restart the grid's contents.</db:para>
<db:programlisting language="cpp">        &amp;lt;state id=&quot;playing&quot;&amp;gt;
            &amp;lt;onentry&amp;gt;
                &amp;lt;raise event=&quot;restart&quot;/&amp;gt;
            &amp;lt;/onentry&amp;gt;
            &amp;lt;transition event=&quot;tap&quot;&amp;gt;
                &amp;lt;if cond=&quot;isValidPosition()&quot;&amp;gt;
                    &amp;lt;script&amp;gt;
                        calculateCurrentState();
                    &amp;lt;/script&amp;gt;
                    &amp;lt;if cond=&quot;isSolved()&quot;&amp;gt;
                        &amp;lt;raise event=&quot;solved&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;
                    &amp;lt;raise event=&quot;update&quot;/&amp;gt;
                &amp;lt;/if&amp;gt;
            &amp;lt;/transition&amp;gt;
            ...
        &amp;lt;/state&amp;gt;
</db:programlisting>
<db:para>Whenever we enter the <db:code>playing</db:code> state, we reset the grid's contents since we could have been still showing the contents from the previous game play. In the <db:code>playing</db:code> state we react to possible events sent from the GUI: <db:code>tap</db:code>, <db:code>undo</db:code>, and <db:code>stop</db:code>.</db:para>
<db:para>The <db:code>tap</db:code> event is sent when the players press one of the enabled sudoku cells. This event is expected to contain additional data specifying the cell's coordinates, which are passed through the <db:code>x</db:code> and <db:code>y</db:code> fields of <db:code>_event.data</db:code>. First, we check if the passed coordinates are valid by invoking the <db:code>isValidPosition()</db:code> script function:</db:para>
<db:programlisting language="cpp">function isValidPosition() {
    var x = _event.data.x;
    var y = _event.data.y;
    if (x &amp;lt; 0 || x &amp;gt;= initState.length)
        return false;
    if (y &amp;lt; 0 || y &amp;gt;= initState.length)
        return false;
    if (initState[x][y] !== 0)
        return false;
    return true;
}
</db:programlisting>
<db:para>We ensure the coordinates are neither negative nor bigger than our grid. In addition, we check if the coordinates point to an initially empty cell, since we can not modify the cells initially given by the grid description.</db:para>
<db:para>When we have ensured the passed coordinates are correct, we call <db:code>calculateCurrentState()</db:code> script function:</db:para>
<db:programlisting language="cpp">function calculateCurrentState() {
    if (isValidPosition() === false)
        return;
    var x = _event.data.x;
    var y = _event.data.y;
    var currentValue = currentState[x][y];
    if (currentValue === initState.length)
        currentValue = 0;
    else
        currentValue += 1;
    currentState[x][y] = currentValue;
    undoStack.push([x, y]);
}
</db:programlisting>
<db:para>This function increments the value of the passed grid's cell and adds the new move to the undo stack history.</db:para>
<db:para>Right after the <db:code>calculateCurrentState()</db:code> function finishes its execution, we check whether the grid is already solved by calling the <db:code>isSolved()</db:code> script function:</db:para>
<db:programlisting language="cpp">function isOK(numbers) {
    var temp = [];
    for (var i = 0; i &amp;lt; numbers.length; i++) {
        var currentValue = numbers[i];
        if (currentValue === 0)
            return false;
        if (temp.indexOf(currentValue) &amp;gt;= 0)
            return false;
        temp.push(currentValue);
    }
    return true;
}

function isSolved() {
    for (var i = 0; i &amp;lt; currentState.length; i++) {
        if (!isOK(currentState[i]))
            return false;

        var column = [];
        var square = [];
        for (var j = 0; j &amp;lt; currentState[i].length; j++) {
            column.push(currentState[j][i]);
            square.push(currentState[Math.floor(i / 3) * 3 + Math.floor(j / 3)]
                                    [i % 3 * 3 + j % 3]);
        }

        if (!isOK(column))
            return false;
        if (!isOK(square))
            return false;
    }
    return true;
}
</db:programlisting>
<db:para>The <db:code>isSolved()</db:code> function returns <db:code>true</db:code> if the grid is properly solved. Since we need to check each row, each column, and each 3x3 square, we define the <db:code>isOK()</db:code> helper function. This function takes the list of numbers and returns <db:code>true</db:code> if the passed list contains unique numbers and no number equals zero, meaning there is no empty cell. The main loop of the <db:code>isSolved()</db:code> is invoked nine times. In every iteration, we construct three lists of numbers representing a row, a column, and a square of the grid and call <db:code>isOK()</db:code> for them. When all 27 lists are OK, the grid is solved properly and we return <db:code>true</db:code>.</db:para>
<db:para>Coming back to our SCXML file, in case <db:code>isSolved()</db:code> returns <db:code>true</db:code>, we raise the <db:code>solved</db:code> event internally. The last instruction in case of a proper move is to raise the <db:code>update</db:code> event, since we need to notify the GUI about the grid's change.</db:para>
<db:programlisting language="cpp">        &amp;lt;state id=&quot;playing&quot;&amp;gt;
            ...
            &amp;lt;transition event=&quot;undo&quot;&amp;gt;
                &amp;lt;script&amp;gt;
                    undo();
                &amp;lt;/script&amp;gt;
                &amp;lt;raise event=&quot;update&quot;/&amp;gt;
            &amp;lt;/transition&amp;gt;
            &amp;lt;transition event=&quot;stop&quot; target=&quot;idle&quot;/&amp;gt;
            &amp;lt;transition event=&quot;solved&quot; target=&quot;solved&quot;/&amp;gt;
        &amp;lt;/state&amp;gt;
</db:programlisting>
<db:para>When in the <db:code>playing</db:code> state, we also react to the <db:code>undo</db:code> event sent from the GUI. In this case, we call the <db:code>undo()</db:code> script function and notify the GUI about the need of an update.</db:para>
<db:programlisting language="cpp">function undo() {
    if (!undoStack.length)
        return;

    var lastMove = undoStack.pop();
    var x = lastMove[0];
    var y = lastMove[1];
    var currentValue = currentState[x][y];
    if (currentValue === 0)
        currentValue = initState.length;
    else
        currentValue -= 1;
    currentState[x][y] = currentValue;
}
</db:programlisting>
<db:para>The <db:code>undo()</db:code> function removes the last move from the history, if there was any, and decrements the current value for the cell described by the coordinates taken from this move.</db:para>
<db:para>The <db:code>playing</db:code> state is also ready for the <db:code>stop</db:code> event sent by the GUI when the players press the <db:guilabel>Stop</db:guilabel> button. In this case, we simply activate the <db:code>idle</db:code> state.</db:para>
<db:para>In addition, we intercept the <db:code>solved</db:code> event sent internally and activate the <db:code>solved</db:code> state in this case.</db:para>
<db:anchor xml:id="cpp"/>
</db:section>
<db:section xml:id="c-part-constructing-the-gui">
<db:title>C++ Part: Constructing the GUI</db:title>
<db:para>The C++ part of the application consists of a <db:code>MainWindow</db:code> class which constructs the GUI and glues it with the SCXML part. The class is declared in <db:emphasis>mainwindow.h</db:emphasis>.</db:para>
<db:programlisting language="cpp">class MainWindow : public QWidget
{
    Q_OBJECT

public:
    explicit MainWindow(QScxmlStateMachine *machine, QWidget *parent = nullptr);

private:
    QScxmlStateMachine *m_machine = nullptr;
    QList&amp;lt;QList&amp;lt;QToolButton *&amp;gt;&amp;gt; m_buttons;
    QToolButton *m_startButton = nullptr;
    QToolButton *m_undoButton = nullptr;
    QLabel *m_label = nullptr;
    QComboBox *m_chooser = nullptr;
};
</db:programlisting>
<db:para>The <db:code>MainWindow</db:code> class holds the pointer to the <db:code>QScxmlStateMachine *m_machine</db:code>, which is the state machine class automatically generated by Qt out of the <db:code>sudoku.scxml</db:code> file. It also holds the pointers to some GUI elements.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QScxmlStateMachine *machine, QWidget *parent) :
    QWidget(parent),
    m_machine(machine)
{
</db:programlisting>
<db:para>The constructor of the <db:code>MainWindow</db:code> class instantiates the GUI part of the application and stores the pointer to the passed state machine. It also initializes the GUI part and glues the GUI part to the state machine by connecting their communication interfaces together.</db:para>
<db:programlisting language="cpp">            connect(button, &amp;amp;QToolButton::clicked, this, [this, i, j]() {
                QVariantMap data;
                data.insert(u&quot;x&quot;_s, i);
                data.insert(u&quot;y&quot;_s, j);
                m_machine-&amp;gt;submitEvent(&quot;tap&quot;, data);
            });
</db:programlisting>
<db:para>First, we create 81 buttons and connect their <db:code>clicked</db:code> signal to a lambda expression that submits the <db:code>tap</db:code> event to the state machine passing the button's coordinates.</db:para>
<db:para>Later, we add some horizontal and vertical lines to the grid in order to group buttons in 3x3 boxes.</db:para>
<db:programlisting language="cpp">    connect(m_startButton, &amp;amp;QAbstractButton::clicked, this, [this]() {
        if (m_machine-&amp;gt;isActive(&quot;playing&quot;))
            m_machine-&amp;gt;submitEvent(&quot;stop&quot;);
        else
            m_machine-&amp;gt;submitEvent(&quot;start&quot;);
    });
</db:programlisting>
<db:para>We create the <db:guilabel>Start / Stop</db:guilabel> button and connect its clicked signal to a lambda expression which submits the <db:code>stop</db:code> or <db:code>start</db:code> event depending on whether the machine is in <db:code>playing</db:code> state or not, respectively.</db:para>
<db:para>We create a label informing whether the grid is solved or not, and an <db:guilabel>Undo</db:guilabel> button, which submits the <db:code>undo</db:code> event whenever it is clicked.</db:para>
<db:programlisting language="cpp">    connect(m_undoButton, &amp;amp;QAbstractButton::clicked, this, [this]() {
        m_machine-&amp;gt;submitEvent(&quot;undo&quot;);
    });
</db:programlisting>
<db:para>Then we create a combobox that is filled with grid names to be solved. These grids are read from the <db:code>:/data</db:code> directory of the application compiled-in resources.</db:para>
<db:programlisting language="cpp">    connect(m_chooser, &amp;amp;QComboBox::currentIndexChanged, this, [this](int index) {
        const QString sudokuFile = m_chooser-&amp;gt;itemData(index).toString();
        const QVariantMap initValues = readSudoku(sudokuFile);
        m_machine-&amp;gt;submitEvent(&quot;setup&quot;, initValues);
    });

    const QVariantMap initValues = readSudoku(
                m_chooser-&amp;gt;itemData(0).toString());
    m_machine-&amp;gt;setInitialValues(initValues);
</db:programlisting>
<db:para>Whenever the players change the grid in the combobox, we read the grid contents storing it in the variant map under the <db:code>initValues</db:code> key as a list of lists of int variants and we submit the <db:code>setup</db:code> event to the state machine passing the grid's contents. Initially, we read the first available grid from the list and pass it directly to the sudoku state machine as the initial grid.</db:para>
<db:programlisting language="cpp">    m_machine-&amp;gt;connectToState(&quot;playing&quot;, [this] (bool playing) {
        ...
    });

    m_machine-&amp;gt;connectToState(&quot;solved&quot;, [this](bool solved) {
        if (solved)
            m_label-&amp;gt;setText(tr(&quot;SOLVED !!!&quot;));
        else
            m_label-&amp;gt;setText(tr(&quot;unsolved&quot;));
    });

    m_machine-&amp;gt;connectToEvent(&quot;updateGUI&quot;, [this](const QScxmlEvent &amp;amp;event) {
        ...
    });
</db:programlisting>
<db:para>Later, we connect to the signals that are being sent whenever the machine enters or leaves the <db:code>playing</db:code> or <db:code>solved</db:code> states, and we update some GUI parts accordingly. We also connect to the state machine's <db:code>updateGUI</db:code> event and update all the buttons' values according to the passed cells' states.</db:para>
<db:programlisting language="cpp">#include &quot;mainwindow.h&quot;
#include &quot;sudoku.h&quot;

#include &amp;lt;QtWidgets/qapplication.h&amp;gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    Sudoku machine;
    MainWindow mainWindow(&amp;amp;machine);

    machine.start();
    mainWindow.show();
    return app.exec();
}
</db:programlisting>
<db:para>In the <db:code>main()</db:code> function in the <db:code>main.cpp</db:code> file, we instantiate the <db:code>app</db:code> application object, <db:code>Sudoku</db:code> state machine, and <db:code>MainWindow</db:code> GUI class. We start the state machine, show the main window, and execute the application.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtscxml.git/tree/examples/scxml/sudoku?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
