<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Starting Threads with QThread</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="threads-synchronizing.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Synchronizing Threads"/></db:extendedlink>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>Thread Support in Qt</db:para>
<db:para>A <db:link xlink:href="qthread.xml">QThread</db:link> instance represents a thread and provides the means to <db:link xlink:href="qthread.xml#start">start</db:link>() a thread, which will then execute the reimplementation of <db:link xlink:href="qthread.xml#run">QThread::run</db:link>(). The run() implementation is for a thread what the main() entry point is for the application. All code executed in a call stack that starts in the run() function is executed by the new thread, and the thread finishes when the function returns. <db:link xlink:href="qthread.xml">QThread</db:link> emits signals to indicate that the thread started or finished executing.</db:para>
<db:section xml:id="creating-a-thread">
<db:title>Creating a Thread</db:title>
<db:para>To create a thread, subclass <db:link xlink:href="qthread.xml">QThread</db:link> and reimplement its <db:link xlink:href="qthread.xml#run">run</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">class MyThread : public QThread
{
    Q_OBJECT

protected:
    void run();
};

void MyThread::run()
{
    ...
}
</db:programlisting>
</db:section>
<db:section xml:id="starting-a-thread">
<db:title>Starting a Thread</db:title>
<db:para>Then, create an instance of the thread object and call <db:link xlink:href="qthread.xml#start">QThread::start</db:link>(). Note that you must create the QApplication (or <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>) object before you can create a <db:link xlink:href="qthread.xml">QThread</db:link>.</db:para>
<db:para>The function will return immediately and the main thread will continue. The code that appears in the <db:link xlink:href="qthread.xml#run">run</db:link>() reimplementation will then be executed in a separate thread.</db:para>
<db:para>Creating threads is explained in more detail in the <db:link xlink:href="qthread.xml">QThread</db:link> documentation.</db:para>
<db:para>Note that <db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>() must always be called from the main thread (the thread that executes main()), not from a <db:link xlink:href="qthread.xml">QThread</db:link>. In GUI applications, the main thread is also called the GUI thread because it's the only thread that is allowed to perform GUI-related operations.</db:para>
</db:section>
</db:article>
