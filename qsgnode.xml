<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGNode Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgnode.xml">QSGNode</db:link> class is the base class for all nodes in the scene graph.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGNode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsgbasicgeometrynode.xml" xlink:role="class">QSGBasicGeometryNode</db:link>, <db:link xlink:href="qsgopacitynode.xml" xlink:role="class">QSGOpacityNode</db:link>, <db:link xlink:href="qsgrendernode.xml" xlink:role="class">QSGRenderNode</db:link>, and <db:link xlink:href="qsgtransformnode.xml" xlink:role="class">QSGTransformNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSGNode is part of <db:simplelist><db:member><db:link xlink:href="qtquick-scenegraph-nodes.xml">Qt Quick Scene Graph Node classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsgnode.xml">QSGNode</db:link> class can be used as a child container. Children are added with the <db:link xlink:href="qsgnode.xml#appendChildNode">appendChildNode</db:link>(), <db:link xlink:href="qsgnode.xml#prependChildNode">prependChildNode</db:link>(), <db:link xlink:href="qsgnode.xml#insertChildNodeBefore">insertChildNodeBefore</db:link>() and <db:link xlink:href="qsgnode.xml#insertChildNodeAfter">insertChildNodeAfter</db:link>(). The order of nodes is important as geometry nodes are rendered according to their ordering in the scene graph.</db:para>
<db:para>The scene graph nodes contains a mechanism to describe which parts of the scene has changed. This includes the combined matrices, accumulated opacity, changes to the node hierarchy, and so on. This information can be used for optimizations inside the scene graph renderer. For the renderer to properly render the nodes, it is important that users call <db:link xlink:href="qsgnode.xml#markDirty">QSGNode::markDirty</db:link>() with the correct flags when nodes are changed. Most of the functions on the node classes will implicitly call <db:link xlink:href="qsgnode.xml#markDirty">markDirty</db:link>(). For example, <db:link xlink:href="qsgnode.xml#appendChildNode">QSGNode::appendChildNode</db:link>() will call <db:link xlink:href="qsgnode.xml#markDirty">markDirty</db:link>() passing in <db:link xlink:href="qsgnode.xml#DirtyStateBit-enum">QSGNode::DirtyNodeAdded</db:link>.</db:para>
<db:para>If nodes change every frame, the <db:link xlink:href="qsgnode.xml#preprocess">preprocess</db:link>() function can be used to apply changes to a node for every frame it is rendered. The use of <db:link xlink:href="qsgnode.xml#preprocess">preprocess</db:link>() must be explicitly enabled by setting the <db:link xlink:href="qsgnode.xml#Flag-enum">QSGNode::UsePreprocess</db:link> flag on the node.</db:para>
<db:para>The virtual <db:link xlink:href="qsgnode.xml#isSubtreeBlocked">isSubtreeBlocked</db:link>() function can be used to disable a subtree all together. Nodes in a blocked subtree will not be preprocessed() and not rendered.</db:para>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DirtyStateBit-enum">
<db:title>enum QSGNode::DirtyStateBit</db:title>
<db:bridgehead renderas="sect2">flags QSGNode::DirtyState</db:bridgehead>
<db:para>Used in <db:link xlink:href="qsgnode.xml#markDirty">QSGNode::markDirty</db:link>() to indicate how the scene graph has changed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::DirtyMatrix</db:code></db:para>
</db:td>
<db:td><db:code>0x0100</db:code></db:td>
<db:td>
<db:para>The matrix in a <db:link xlink:href="qsgtransformnode.xml">QSGTransformNode</db:link> has changed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::DirtyNodeAdded</db:code></db:para>
</db:td>
<db:td><db:code>0x0400</db:code></db:td>
<db:td>
<db:para>A node was added.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::DirtyNodeRemoved</db:code></db:para>
</db:td>
<db:td><db:code>0x0800</db:code></db:td>
<db:td>
<db:para>A node was removed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::DirtyGeometry</db:code></db:para>
</db:td>
<db:td><db:code>0x1000</db:code></db:td>
<db:td>
<db:para>The geometry of a <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> has changed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::DirtyMaterial</db:code></db:para>
</db:td>
<db:td><db:code>0x2000</db:code></db:td>
<db:td>
<db:para>The material of a <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> has changed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::DirtyOpacity</db:code></db:para>
</db:td>
<db:td><db:code>0x4000</db:code></db:td>
<db:td>
<db:para>The opacity of a <db:link xlink:href="qsgopacitynode.xml">QSGOpacityNode</db:link> has changed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>DirtyState</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;DirtyStateBit&gt;. </db:code>It stores an OR combination of <db:code>DirtyStateBit</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgnode.xml#markDirty">QSGNode::markDirty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Flag-enum">
<db:title>enum QSGNode::Flag</db:title>
<db:bridgehead renderas="sect2">flags QSGNode::Flags</db:bridgehead>
<db:para>The QSGNode::Flag enum describes flags on the <db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::OwnedByParent</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The node is owned by its parent and will be deleted when the parent is deleted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::UsePreprocess</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The node's virtual <db:link xlink:href="qsgnode.xml#preprocess">preprocess</db:link>() function will be called before rendering starts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::OwnsGeometry</db:code></db:para>
</db:td>
<db:td><db:code>0x00010000</db:code></db:td>
<db:td>
<db:para>Only valid for <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> and <db:link xlink:href="qsgclipnode.xml">QSGClipNode</db:link>. The node has ownership over the <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> instance and will delete it when the node is destroyed or a geometry is assigned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::OwnsMaterial</db:code></db:para>
</db:td>
<db:td><db:code>0x00020000</db:code></db:td>
<db:td>
<db:para>Only valid for <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link>. The node has ownership over the material and will delete it when the node is destroyed or a material is assigned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::OwnsOpaqueMaterial</db:code></db:para>
</db:td>
<db:td><db:code>0x00040000</db:code></db:td>
<db:td>
<db:para>Only valid for <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link>. The node has ownership over the opaque material and will delete it when the node is destroyed or a material is assigned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::InternalReserved</db:code></db:para>
</db:td>
<db:td>?</db:td>
<db:td>
<db:para>Reserved for internal use.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
</db:section>
<db:section xml:id="NodeType-enum">
<db:title>enum QSGNode::NodeType</db:title>
<db:para>Can be used to figure out the type of node.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::BasicNodeType</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The type of <db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::GeometryNodeType</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The type of <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::TransformNodeType</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The type of <db:link xlink:href="qsgtransformnode.xml">QSGTransformNode</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::ClipNodeType</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The type of <db:link xlink:href="qsgclipnode.xml">QSGClipNode</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgnode.xml">QSGNode</db:link></db:emphasis>::OpacityNodeType</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The type of <db:link xlink:href="qsgopacitynode.xml">QSGOpacityNode</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgnode.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSGNode">
<db:title>QSGNode::QSGNode()</db:title>
<db:para>Constructs a new node</db:para>
</db:section>
<db:section xml:id="dtor.QSGNode">
<db:title>[virtual noexcept] QSGNode::~QSGNode()</db:title>
<db:para>Destroys the node.</db:para>
<db:para>Every child of this node that has the flag <db:link xlink:href="qsgnode.xml#Flag-enum">QSGNode::OwnedByParent</db:link> set, will also be deleted.</db:para>
</db:section>
<db:section xml:id="appendChildNode">
<db:title>void QSGNode::appendChildNode(QSGNode *<db:emphasis>node</db:emphasis>)</db:title>
<db:para>Appends <db:code role="parameter">node</db:code> to this node's list of children.</db:para>
<db:para>Ordering of nodes is important as geometry nodes will be rendered in the order they are added to the scene graph.</db:para>
</db:section>
<db:section xml:id="childAtIndex">
<db:title>QSGNode *QSGNode::childAtIndex(int <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>Returns the child at index <db:code role="parameter">i</db:code>.</db:para>
<db:para>Children are stored internally as a linked list, so iterating over the children via the index is suboptimal.</db:para>
</db:section>
<db:section xml:id="childCount">
<db:title>int QSGNode::childCount() const</db:title>
<db:para>Returns the number of child nodes.</db:para>
</db:section>
<db:section xml:id="firstChild">
<db:title>QSGNode *QSGNode::firstChild() const</db:title>
<db:para>Returns the first child of this node.</db:para>
<db:para>The children are stored in a linked list.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>QSGNode::Flags QSGNode::flags() const</db:title>
<db:para>Returns the set of flags for this node.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgnode.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertChildNodeAfter">
<db:title>void QSGNode::insertChildNodeAfter(QSGNode *<db:emphasis>node</db:emphasis>, QSGNode *<db:emphasis>after</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">node</db:code> to this node's list of children after the node specified with <db:code role="parameter">after</db:code>.</db:para>
<db:para>Ordering of nodes is important as geometry nodes will be rendered in the order they are added to the scene graph.</db:para>
</db:section>
<db:section xml:id="insertChildNodeBefore">
<db:title>void QSGNode::insertChildNodeBefore(QSGNode *<db:emphasis>node</db:emphasis>, QSGNode *<db:emphasis>before</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">node</db:code> to this node's list of children before the node specified with <db:code role="parameter">before</db:code>.</db:para>
<db:para>Ordering of nodes is important as geometry nodes will be rendered in the order they are added to the scene graph.</db:para>
</db:section>
<db:section xml:id="isSubtreeBlocked">
<db:title>[virtual] bool QSGNode::isSubtreeBlocked() const</db:title>
<db:para>Returns whether this node and its subtree is available for use.</db:para>
<db:para>Blocked subtrees will not get their dirty states updated and they will not be rendered.</db:para>
<db:para>The <db:link xlink:href="qsgopacitynode.xml">QSGOpacityNode</db:link> will return a blocked subtree when accumulated opacity is 0, for instance.</db:para>
</db:section>
<db:section xml:id="lastChild">
<db:title>QSGNode *QSGNode::lastChild() const</db:title>
<db:para>Returns the last child of this node.</db:para>
<db:para>The children are stored as a linked list.</db:para>
</db:section>
<db:section xml:id="markDirty">
<db:title>void QSGNode::markDirty(QSGNode::DirtyState <db:emphasis>bits</db:emphasis>)</db:title>
<db:para>Notifies all connected renderers that the node has dirty <db:code role="parameter">bits</db:code>.</db:para>
</db:section>
<db:section xml:id="nextSibling">
<db:title>QSGNode *QSGNode::nextSibling() const</db:title>
<db:para>Returns the node after this in the parent's list of children.</db:para>
<db:para>The children are stored as a linked list.</db:para>
</db:section>
<db:section xml:id="parent">
<db:title>QSGNode *QSGNode::parent() const</db:title>
<db:para>Returns the parent node of this node.</db:para>
</db:section>
<db:section xml:id="prependChildNode">
<db:title>void QSGNode::prependChildNode(QSGNode *<db:emphasis>node</db:emphasis>)</db:title>
<db:para>Prepends <db:code role="parameter">node</db:code> to this node's the list of children.</db:para>
<db:para>Ordering of nodes is important as geometry nodes will be rendered in the order they are added to the scene graph.</db:para>
</db:section>
<db:section xml:id="preprocess">
<db:title>[virtual] void QSGNode::preprocess()</db:title>
<db:para>Override this function to do processing on the node before it is rendered.</db:para>
<db:para>Preprocessing needs to be explicitly enabled by setting the flag <db:link xlink:href="qsgnode.xml#Flag-enum">QSGNode::UsePreprocess</db:link>. The flag needs to be set before the node is added to the scene graph and will cause the preprocess() function to be called for every frame the node is rendered.</db:para>
<db:para>The preprocess function is called before the update pass that propagates opacity and transformations through the scene graph. That means that functions like QSGOpacityNode::combinedOpacity() and QSGTransformNode::combinedMatrix() will not contain up-to-date values. If such values are changed during the preprocess, these changes will be propagated through the scene graph before it is rendered.</db:para>
<db:warning>
<db:para>Beware of deleting nodes while they are being preprocessed. It is possible, with a small performance hit, to delete a single node during its own preprocess call. Deleting a subtree which has nodes that also use preprocessing may result in a segmentation fault. This is done for performance reasons.</db:para>
</db:warning>
</db:section>
<db:section xml:id="previousSibling">
<db:title>QSGNode *QSGNode::previousSibling() const</db:title>
<db:para>Returns the node before this in the parent's list of children.</db:para>
<db:para>The children are stored as a linked list.</db:para>
</db:section>
<db:section xml:id="removeAllChildNodes">
<db:title>void QSGNode::removeAllChildNodes()</db:title>
<db:para>Removes all child nodes from this node's list of children.</db:para>
</db:section>
<db:section xml:id="removeChildNode">
<db:title>void QSGNode::removeChildNode(QSGNode *<db:emphasis>node</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">node</db:code> from this node's list of children.</db:para>
</db:section>
<db:section xml:id="setFlag">
<db:title>void QSGNode::setFlag(QSGNode::Flag <db:emphasis>f</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:para>Sets the flag <db:code role="parameter">f</db:code> on this node if <db:code role="parameter">enabled</db:code> is true; otherwise clears the flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgnode.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlags">
<db:title>void QSGNode::setFlags(QSGNode::Flags <db:emphasis>f</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:para>Sets the flags <db:code role="parameter">f</db:code> on this node if <db:code role="parameter">enabled</db:code> is true; otherwise clears the flags.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgnode.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QSGNode::NodeType QSGNode::type() const</db:title>
<db:para>Returns the type of this node. The node type must be one of the predefined types defined in <db:link xlink:href="qsgnode.xml#NodeType-enum">QSGNode::NodeType</db:link> and can safely be used to cast to the corresponding class.</db:para>
</db:section>
</db:section>
</db:article>
