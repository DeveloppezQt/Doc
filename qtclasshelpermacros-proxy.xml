<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtClassHelperMacros&gt;</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DISABLE_COPY">
<db:title>Q_DISABLE_COPY(<db:emphasis>Class</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_DISABLE_COPY</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>Class</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_DISABLE_COPY(Class)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables the use of copy constructors and assignment operators for the given <db:code role="parameter">Class</db:code>.</db:para>
<db:para>Instances of subclasses of <db:link xlink:href="qobject.xml">QObject</db:link> should not be thought of as values that can be copied or assigned, but as unique identities. This means that when you create your own subclass of <db:link xlink:href="qobject.xml">QObject</db:link> (director or indirect), you should <db:emphasis>not</db:emphasis> give it a copy constructor or an assignment operator. However, it may not enough to simply omit them from your class, because, if you mistakenly write some code that requires a copy constructor or an assignment operator (it's easy to do), your compiler will thoughtfully create it for you. You must do more.</db:para>
<db:para>The curious user will have seen that the Qt classes derived from <db:link xlink:href="qobject.xml">QObject</db:link> typically include this macro in a private section:</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
private:
    Q_DISABLE_COPY(MyClass)
};
</db:programlisting>
<db:para>It declares a copy constructor and an assignment operator in the private section, so that if you use them by mistake, the compiler will report an error.</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
private:
    MyClass(const MyClass &amp;amp;) = delete;
    MyClass &amp;amp;operator=(const MyClass &amp;amp;) = delete;
};
</db:programlisting>
<db:para>But even this might not catch absolutely every case. You might be tempted to do something like this:</db:para>
<db:programlisting language="cpp">QWidget w = QWidget();
</db:programlisting>
<db:para>First of all, don't do that. Most compilers will generate code that uses the copy constructor, so the privacy violation error will be reported, but your C++ compiler is not required to generate code for this statement in a specific way. It could generate code using <db:emphasis>neither</db:emphasis> the copy constructor <db:emphasis>nor</db:emphasis> the assignment operator we made private. In that case, no error would be reported, but your application would probably crash when you called a member function of w.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtclasshelpermacros-proxy.xml#Q_DISABLE_COPY_MOVE">Q_DISABLE_COPY_MOVE</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DISABLE_COPY_MOVE">
<db:title>Q_DISABLE_COPY_MOVE(<db:emphasis>Class</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_DISABLE_COPY_MOVE</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>Class</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_DISABLE_COPY_MOVE(Class)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>A convenience macro that disables the use of copy constructors, assignment operators, move constructors and move assignment operators for the given <db:code role="parameter">Class</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtclasshelpermacros-proxy.xml#Q_DISABLE_COPY">Q_DISABLE_COPY</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
