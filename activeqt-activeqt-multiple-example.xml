<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Multiple Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Multiple example demonstrates the implementation of a <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link> to provide multiple ActiveX controls in a single in process ActiveX server using the <db:code>QAXFACTORY_EXPORT()</db:code> macro. The ActiveX controls in this example are simple <db:link xlink:href="qwidget.xml">QWidget</db:link> subclasses that reimplement <db:link xlink:href="qwidget.xml#paintEvent">QWidget::paintEvent</db:link>().</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">class QAxWidget1 : public QWidget
{
    Q_OBJECT
    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{1D9928BD-4453-4bdd-903D-E525ED17FDE5}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{99F6860E-2C5A-42ec-87F2-43396F4BE389}&quot;)
    Q_CLASSINFO(&quot;EventsID&quot;, &quot;{0A3E9F27-E4F1-45bb-9E47-63099BCCD0E3}&quot;)

    Q_PROPERTY(QColor fillColor READ fillColor WRITE setFillColor)
public:
    explicit QAxWidget1(QWidget *parent = nullptr)
        : QWidget(parent), m_fillColor(Qt::red)
    {
    }

    QColor fillColor() const
    {
        return m_fillColor;
    }

    void setFillColor(const QColor &amp;amp;fc)
    {
        m_fillColor = fc;
        repaint();
    }

protected:
    void paintEvent(QPaintEvent *e)
    {
        QPainter paint(this);
        QRect r = rect();
        r.adjust(10, 10, -10, -10);
        paint.fillRect(r, m_fillColor);
    }

private:
    QColor m_fillColor;
};
</db:programlisting>
<db:para>The first control draws a filled rectangle. The fill color is exposed as a property. <db:code>Q_CLASSINFO()</db:code> is used to specify the COM identifiers.</db:para>
<db:programlisting language="cpp">class QAxWidget2 : public QWidget
{
    Q_OBJECT
    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{58139D56-6BE9-4b17-937D-1B1EDEDD5B71}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{B66280AB-08CC-4dcc-924F-58E6D7975B7D}&quot;)
    Q_CLASSINFO(&quot;EventsID&quot;, &quot;{D72BACBA-03C4-4480-B4BB-DE4FE3AA14A0}&quot;)
    Q_CLASSINFO(&quot;ToSuperClass&quot;, &quot;QAxWidget2&quot;)
    Q_CLASSINFO(&quot;StockEvents&quot;, &quot;yes&quot;)
    Q_CLASSINFO(&quot;Insertable&quot;, &quot;yes&quot;)

    Q_PROPERTY(int lineWidth READ lineWidth WRITE setLineWidth)
public:
    explicit QAxWidget2(QWidget *parent = nullptr)
        : QWidget(parent), m_lineWidth(1)
    {
    }

    int lineWidth() const
    {
        return m_lineWidth;
    }

    void setLineWidth(int lw)
    {
        m_lineWidth = lw;
        repaint();
    }

protected:
    void paintEvent(QPaintEvent *e)
    {
        QPainter paint(this);
        QPen pen = paint.pen();
        pen.setWidth(m_lineWidth);
        paint.setPen(pen);

        QRect r = rect();
        r.adjust(10, 10, -10, -10);
        paint.drawEllipse(r);
    }

private:
    int m_lineWidth;
};
</db:programlisting>
<db:para>The second control draws a circle. The linewith is exposed as a property. <db:code>Q_CLASSINFO()</db:code> is used to specify the COM identifiers, and to set the attributes <db:emphasis>ToSuperClass</db:emphasis> and <db:emphasis>StockEvents</db:emphasis> to expose only the API of the class itself, and to add COM stock events to the ActiveX control.</db:para>
<db:programlisting language="cpp">#include &quot;ax1.h&quot;
#include &quot;ax2.h&quot;
#include &amp;lt;QAxFactory&amp;gt;

QT_USE_NAMESPACE

QAXFACTORY_BEGIN(&quot;{98DE28B6-6CD3-4e08-B9FA-3D1DB43F1D2F}&quot;, &quot;{05828915-AD1C-47ab-AB96-D6AD1E25F0E2}&quot;)
    QAXCLASS(QAxWidget1)
    QAXCLASS(QAxWidget2)
QAXFACTORY_END()
</db:programlisting>
<db:para>The classes are exported from the server using the <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link> macros.</db:para>
<db:para>To build the example you must first build the <db:link xlink:href="qaxserver-module.xml">QAxServer</db:link> library. Then run <db:code>qmake</db:code> and your make tool in <db:code>examples/activeqt/multiple</db:code>.</db:para>
<db:para>The <db:link xlink:href="qaxserver-demo-multiple.xml">Two Simple Qt Widgets</db:link> demonstration requires your WebBrowser to support ActiveX controls, and scripting to be enabled.</db:para>
<db:programlisting language="cpp">&amp;lt;script language=&quot;javascript&quot;&amp;gt;
function setColor( form )
{
    Ax1.fillColor = form.colorEdit.value;
}

function setWidth( form )
{
    Ax2.lineWidth = form.widthEdit.value;
}
&amp;lt;/script&amp;gt;

&amp;lt;p /&amp;gt;
This is one QWidget subclass:&amp;lt;br /&amp;gt;
&amp;lt;object ID=&quot;Ax1&quot; CLASSID=&quot;CLSID:1D9928BD-4453-4bdd-903D-E525ED17FDE5&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/multipleax.cab&quot;&amp;gt;
[Object not available! Did you forget to build and register the server?]
&amp;lt;/object&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;form&amp;gt;
Fill Color: &amp;lt;input type=&quot;edit&quot; ID=&quot;colorEdit&quot; value = &quot;red&quot; /&amp;gt;
&amp;lt;input type=&quot;button&quot; value = &quot;Set&quot; onClick=&quot;setColor(this.form)&quot; /&amp;gt;
&amp;lt;input type=&quot;button&quot; value = &quot;Hide&quot; onClick=&quot;Ax1.hide()&quot; /&amp;gt;
&amp;lt;input type=&quot;button&quot; value = &quot;Show&quot; onClick=&quot;Ax1.show()&quot; /&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;p /&amp;gt;
This is another QWidget subclass:&amp;lt;br /&amp;gt;
&amp;lt;object ID=&quot;Ax2&quot; CLASSID=&quot;CLSID:58139D56-6BE9-4b17-937D-1B1EDEDD5B71&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/multipleax.cab&quot;&amp;gt;
[Object not available! Did you forget to build and register the server?]
&amp;lt;/object&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;form&amp;gt;
Line width: &amp;lt;input type=&quot;edit&quot; ID=&quot;widthEdit&quot; value = &quot;1&quot; /&amp;gt;
&amp;lt;input type=&quot;button&quot; value = &quot;Set&quot; onClick=&quot;setWidth(this.form)&quot; /&amp;gt;
&amp;lt;/form&amp;gt;
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="activeqt/multiple/ax1.h">activeqt/multiple/ax1.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/multiple/ax2.h">activeqt/multiple/ax2.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/multiple/main.cpp">activeqt/multiple/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/multiple/multiple.pro">activeqt/multiple/multiple.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
