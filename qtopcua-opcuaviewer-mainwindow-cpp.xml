<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt OPC UA Viewer</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Using the model/view approach to display all nodes of an OPC UA server in a tree view.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2018 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;mainwindow.h&quot;
#include &quot;ui_mainwindow.h&quot;
#include &quot;certificatedialog.h&quot;
#include &quot;opcuamodel.h&quot;
#include &quot;treeitem.h&quot;

#include &amp;lt;QOpcUaAuthenticationInformation&amp;gt;
#include &amp;lt;QOpcUaErrorState&amp;gt;
#include &amp;lt;QOpcUaGenericStructHandler&amp;gt;
#include &amp;lt;QOpcUaHistoryReadResponse&amp;gt;
#include &amp;lt;QOpcUaProvider&amp;gt;

#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QDir&amp;gt;
#include &amp;lt;QMessageBox&amp;gt;
#include &amp;lt;QStandardPaths&amp;gt;

using namespace Qt::Literals::StringLiterals;

static MainWindow *mainWindowGlobal = nullptr;
static QtMessageHandler oldMessageHandler = nullptr;

static void messageHandler(QtMsgType type, const QMessageLogContext &amp;amp;context, const QString &amp;amp;msg)
{
    if (!mainWindowGlobal)
        return;

   QString message;
   QColor color = Qt::black;

   switch (type) {
   case QtWarningMsg:
       message = QObject::tr(&quot;Warning&quot;);
       color = Qt::darkYellow;
       break;
   case QtCriticalMsg:
       message = QObject::tr(&quot;Critical&quot;);
       color = Qt::darkRed;
       break;
   case QtFatalMsg:
       message = QObject::tr(&quot;Fatal&quot;);
        color = Qt::darkRed;
       break;
   case QtInfoMsg:
       message = QObject::tr(&quot;Info&quot;);
       break;
   case QtDebugMsg:
       message = QObject::tr(&quot;Debug&quot;);
       break;
   }
   message += &quot;: &quot;_L1;
   message += msg;

   const QString contextStr =
       u&quot; (%1:%2, %3)&quot;_s.arg(context.file).arg(context.line).arg(context.function);

   // Logging messages from backends are sent from different threads and need to be
   // synchronized with the GUI thread.
   QMetaObject::invokeMethod(mainWindowGlobal, &quot;log&quot;, Qt::QueuedConnection,
                             Q_ARG(QString, message),
                             Q_ARG(QString, contextStr),
                             Q_ARG(QColor, color));

   if (oldMessageHandler)
       oldMessageHandler(type, context, msg);
}

MainWindow::MainWindow(const QString &amp;amp;initialUrl, QWidget *parent) : QMainWindow(parent)
  , ui(new Ui::MainWindow)
  , mOpcUaModel(new OpcUaModel(this))
  , mOpcUaProvider(new QOpcUaProvider(this))
{
    ui-&amp;gt;setupUi(this);
    ui-&amp;gt;host-&amp;gt;setText(initialUrl);
    mainWindowGlobal = this;

    connect(ui-&amp;gt;quitAction, &amp;amp;QAction::triggered, this, &amp;amp;QWidget::close);
    ui-&amp;gt;quitAction-&amp;gt;setShortcut(QKeySequence(Qt::CTRL | Qt::Key_Q));

    connect(ui-&amp;gt;aboutAction, &amp;amp;QAction::triggered, this, &amp;amp;QApplication::aboutQt);
    ui-&amp;gt;aboutAction-&amp;gt;setShortcut(QKeySequence(QKeySequence::HelpContents));

    updateUiState();

    ui-&amp;gt;opcUaPlugin-&amp;gt;addItems(QOpcUaProvider::availableBackends());
    ui-&amp;gt;treeView-&amp;gt;setModel(mOpcUaModel);
    ui-&amp;gt;treeView-&amp;gt;header()-&amp;gt;setSectionResizeMode(QHeaderView::ResizeToContents);

    if (ui-&amp;gt;opcUaPlugin-&amp;gt;count() == 0) {
        QMessageBox::critical(this, tr(&quot;No OPCUA plugins available&quot;), tr(&quot;The list of available OPCUA plugins is empty. No connection possible.&quot;));
    }

    mContextMenu = new QMenu(ui-&amp;gt;treeView);
    mContextMenuMonitoringAction = mContextMenu-&amp;gt;addAction(tr(&quot;Enable Monitoring&quot;), this, &amp;amp;MainWindow::toggleMonitoring);
    mContextMenuHistorizingAction = mContextMenu-&amp;gt;addAction(tr(&quot;Request historic data&quot;), this, &amp;amp;MainWindow::showHistorizing);

    ui-&amp;gt;treeView-&amp;gt;setContextMenuPolicy(Qt::CustomContextMenu);
    connect(ui-&amp;gt;treeView, &amp;amp;QTreeView::customContextMenuRequested, this, &amp;amp;MainWindow::openCustomContextMenu);

    connect(ui-&amp;gt;findServersButton, &amp;amp;QPushButton::clicked, this, &amp;amp;MainWindow::findServers);
    connect(ui-&amp;gt;host, &amp;amp;QLineEdit::returnPressed, this-&amp;gt;ui-&amp;gt;findServersButton,
            [this]() { this-&amp;gt;ui-&amp;gt;findServersButton-&amp;gt;animateClick(); });
    connect(ui-&amp;gt;getEndpointsButton, &amp;amp;QPushButton::clicked, this, &amp;amp;MainWindow::getEndpoints);
    connect(ui-&amp;gt;connectButton, &amp;amp;QPushButton::clicked, this, &amp;amp;MainWindow::connectToServer);
    oldMessageHandler = qInstallMessageHandler(&amp;amp;messageHandler);

    setupPkiConfiguration();

    m_identity = m_pkiConfig.applicationIdentity();
}

MainWindow::~MainWindow()
{
    delete ui;
}

static bool copyDirRecursively(const QString &amp;amp;from, const QString &amp;amp;to)
{
    const QDir srcDir(from);
    const QDir targetDir(to);
    if (!QDir().mkpath(to))
        return false;

    const QFileInfoList infos =
            srcDir.entryInfoList(QDir::Dirs | QDir::Files | QDir::NoDotAndDotDot);
    for (const QFileInfo &amp;amp;info : infos) {
        const QString srcItemPath = info.absoluteFilePath();
        const QString dstItemPath = targetDir.absoluteFilePath(info.fileName());
        if (info.isDir()) {
            if (!copyDirRecursively(srcItemPath, dstItemPath))
                return false;
        } else if (info.isFile()) {
            if (!QFile::copy(srcItemPath, dstItemPath))
                return false;
        }
    }
    return true;
}

void MainWindow::setupPkiConfiguration()
{
    const QDir pkidir =
            QDir(QStandardPaths::writableLocation(QStandardPaths::AppLocalDataLocation) + &quot;/pki&quot;);

    if (!pkidir.exists() &amp;amp;&amp;amp; !copyDirRecursively(&quot;:/pki&quot;, pkidir.path()))
        qFatal(&quot;Could not set up directory %s!&quot;, qUtf8Printable(pkidir.path()));

    m_pkiConfig.setClientCertificateFile(pkidir.absoluteFilePath(&quot;own/certs/opcuaviewer.der&quot;));
    m_pkiConfig.setPrivateKeyFile(pkidir.absoluteFilePath(&quot;own/private/opcuaviewer.pem&quot;));
    m_pkiConfig.setTrustListDirectory(pkidir.absoluteFilePath(&quot;trusted/certs&quot;));
    m_pkiConfig.setRevocationListDirectory(pkidir.absoluteFilePath(&quot;trusted/crl&quot;));
    m_pkiConfig.setIssuerListDirectory(pkidir.absoluteFilePath(&quot;issuers/certs&quot;));
    m_pkiConfig.setIssuerRevocationListDirectory(pkidir.absoluteFilePath(&quot;issuers/crl&quot;));

    const QStringList toCreate = { m_pkiConfig.issuerListDirectory(),
                                   m_pkiConfig.issuerRevocationListDirectory() };
    for (const QString &amp;amp;dir : toCreate) {
        if (!QDir().mkpath(dir))
            qFatal(&quot;Could not create directory %s!&quot;, qUtf8Printable(dir));
    }
}

void MainWindow::createClient()
{
    if (mOpcUaClient == nullptr) {
        mOpcUaClient = mOpcUaProvider-&amp;gt;createClient(ui-&amp;gt;opcUaPlugin-&amp;gt;currentText());
        if (!mOpcUaClient) {
            const QString message(tr(&quot;Connecting to the given sever failed. See the log for details.&quot;));
            log(message, QString(), Qt::red);
            QMessageBox::critical(this, tr(&quot;Failed to connect to server&quot;), message);
            return;
        }

        connect(mOpcUaClient, &amp;amp;QOpcUaClient::connectError, this, &amp;amp;MainWindow::showErrorDialog);
        mOpcUaClient-&amp;gt;setApplicationIdentity(m_identity);
        mOpcUaClient-&amp;gt;setPkiConfiguration(m_pkiConfig);

        if (mOpcUaClient-&amp;gt;supportedUserTokenTypes().contains(QOpcUaUserTokenPolicy::TokenType::Certificate)) {
            QOpcUaAuthenticationInformation authInfo;
            authInfo.setCertificateAuthentication();
            mOpcUaClient-&amp;gt;setAuthenticationInformation(authInfo);
        }

        connect(mOpcUaClient, &amp;amp;QOpcUaClient::connected, this, &amp;amp;MainWindow::clientConnected);
        connect(mOpcUaClient, &amp;amp;QOpcUaClient::disconnected, this, &amp;amp;MainWindow::clientDisconnected);
        connect(mOpcUaClient, &amp;amp;QOpcUaClient::errorChanged, this, &amp;amp;MainWindow::clientError);
        connect(mOpcUaClient, &amp;amp;QOpcUaClient::stateChanged, this, &amp;amp;MainWindow::clientState);
        connect(mOpcUaClient, &amp;amp;QOpcUaClient::endpointsRequestFinished, this, &amp;amp;MainWindow::getEndpointsComplete);
        connect(mOpcUaClient, &amp;amp;QOpcUaClient::findServersFinished, this, &amp;amp;MainWindow::findServersComplete);
    }
}

void MainWindow::findServers()
{
    QStringList localeIds;
    QStringList serverUris;
    QUrl url(ui-&amp;gt;host-&amp;gt;text());

    updateUiState();

    createClient();
    // set default port if missing
    if (url.port() == -1) url.setPort(4840);

    if (mOpcUaClient) {
        mOpcUaClient-&amp;gt;findServers(url, localeIds, serverUris);
        qDebug() &amp;lt;&amp;lt; &quot;Discovering servers on &quot; &amp;lt;&amp;lt; url.toString();
    }
}

void MainWindow::findServersComplete(const QList&amp;lt;QOpcUaApplicationDescription&amp;gt; &amp;amp;servers, QOpcUa::UaStatusCode statusCode)
{
    if (isSuccessStatus(statusCode)) {
        ui-&amp;gt;servers-&amp;gt;clear();
        for (const auto &amp;amp;server : servers) {
            const auto urls = server.discoveryUrls();
            for (const auto &amp;amp;url : std::as_const(urls))
                ui-&amp;gt;servers-&amp;gt;addItem(url);
        }
    }

    updateUiState();
}

void MainWindow::getEndpoints()
{
    ui-&amp;gt;endpoints-&amp;gt;clear();
    updateUiState();

    if (ui-&amp;gt;servers-&amp;gt;currentIndex() &amp;gt;= 0) {
        const QString serverUrl = ui-&amp;gt;servers-&amp;gt;currentText();
        createClient();
        mOpcUaClient-&amp;gt;requestEndpoints(serverUrl);
    }
}

void MainWindow::getEndpointsComplete(const QList&amp;lt;QOpcUaEndpointDescription&amp;gt; &amp;amp;endpoints, QOpcUa::UaStatusCode statusCode)
{
    if (isSuccessStatus(statusCode)) {
        mEndpointList = endpoints;

        int index = 0;
        for (const auto &amp;amp;endpoint : endpoints) {
            const QString mode = QVariant::fromValue(endpoint.securityMode()).toString();
            const QString endpointName = u&quot;%1 (%2)&quot;_s.arg(endpoint.securityPolicy(), mode);
            ui-&amp;gt;endpoints-&amp;gt;addItem(endpointName, index++);
        }
    }

    updateUiState();
}

void MainWindow::connectToServer()
{
    if (mClientConnected) {
        mOpcUaClient-&amp;gt;disconnectFromEndpoint();
        return;
    }

    if (ui-&amp;gt;endpoints-&amp;gt;currentIndex() &amp;gt;= 0) {
        m_endpoint = mEndpointList[ui-&amp;gt;endpoints-&amp;gt;currentIndex()];
        createClient();
        mOpcUaClient-&amp;gt;connectToEndpoint(m_endpoint);
    }
}

void MainWindow::clientConnected()
{
    mClientConnected = true;
    updateUiState();

    connect(mOpcUaClient, &amp;amp;QOpcUaClient::namespaceArrayUpdated, this, &amp;amp;MainWindow::namespacesArrayUpdated);
    mOpcUaClient-&amp;gt;updateNamespaceArray();
}

void MainWindow::clientDisconnected()
{
    mClientConnected = false;
    mOpcUaClient-&amp;gt;deleteLater();
    mOpcUaClient = nullptr;
    mOpcUaModel-&amp;gt;setOpcUaClient(nullptr);
    mOpcUaModel-&amp;gt;setGenericStructHandler(nullptr);
    updateUiState();
}

void MainWindow::namespacesArrayUpdated(const QStringList &amp;amp;namespaceArray)
{
    if (namespaceArray.isEmpty()) {
        qWarning() &amp;lt;&amp;lt; &quot;Failed to retrieve the namespaces array&quot;;
        return;
    }

    disconnect(mOpcUaClient, &amp;amp;QOpcUaClient::namespaceArrayUpdated, this, &amp;amp;MainWindow::namespacesArrayUpdated);

    mGenericStructHandler.reset(new QOpcUaGenericStructHandler(mOpcUaClient));
    connect(mGenericStructHandler.get(), &amp;amp;QOpcUaGenericStructHandler::initializedChanged, this, &amp;amp;MainWindow::handleGenericStructHandlerInitFinished);
    mGenericStructHandler-&amp;gt;initialize();
}

void MainWindow::handleGenericStructHandlerInitFinished(bool success)
{
    if (!success) {
        qWarning() &amp;lt;&amp;lt; &quot;Failed to initialize generic struct handler, decoding of generic structs will be unavailable&quot;;
    } else {
        mOpcUaModel-&amp;gt;setGenericStructHandler(mGenericStructHandler.get());
    }

    mOpcUaModel-&amp;gt;setOpcUaClient(mOpcUaClient);
    ui-&amp;gt;treeView-&amp;gt;header()-&amp;gt;setSectionResizeMode(1 /* Value column*/, QHeaderView::Interactive);
}

void MainWindow::clientError(QOpcUaClient::ClientError error)
{
    qDebug() &amp;lt;&amp;lt; &quot;Client error changed&quot; &amp;lt;&amp;lt; error;
}

void MainWindow::clientState(QOpcUaClient::ClientState state)
{
    qDebug() &amp;lt;&amp;lt; &quot;Client state changed&quot; &amp;lt;&amp;lt; state;
}

void MainWindow::updateUiState()
{
    // allow changing the backend only if it was not already created
    ui-&amp;gt;opcUaPlugin-&amp;gt;setEnabled(mOpcUaClient == nullptr);
    ui-&amp;gt;connectButton-&amp;gt;setText(mClientConnected ? tr(&quot;Disconnect&quot;) : tr(&quot;Connect&quot;));

    if (mClientConnected) {
        ui-&amp;gt;host-&amp;gt;setEnabled(false);
        ui-&amp;gt;servers-&amp;gt;setEnabled(false);
        ui-&amp;gt;endpoints-&amp;gt;setEnabled(false);
        ui-&amp;gt;findServersButton-&amp;gt;setEnabled(false);
        ui-&amp;gt;getEndpointsButton-&amp;gt;setEnabled(false);
        ui-&amp;gt;connectButton-&amp;gt;setEnabled(true);
    } else {
        ui-&amp;gt;host-&amp;gt;setEnabled(true);
        ui-&amp;gt;servers-&amp;gt;setEnabled(ui-&amp;gt;servers-&amp;gt;count() &amp;gt; 0);
        ui-&amp;gt;endpoints-&amp;gt;setEnabled(ui-&amp;gt;endpoints-&amp;gt;count() &amp;gt; 0);

        ui-&amp;gt;findServersButton-&amp;gt;setDisabled(ui-&amp;gt;host-&amp;gt;text().isEmpty());
        ui-&amp;gt;getEndpointsButton-&amp;gt;setEnabled(ui-&amp;gt;servers-&amp;gt;currentIndex() != -1);
        ui-&amp;gt;connectButton-&amp;gt;setEnabled(ui-&amp;gt;endpoints-&amp;gt;currentIndex() != -1);
    }

    if (!mOpcUaClient) {
        ui-&amp;gt;servers-&amp;gt;setEnabled(false);
        ui-&amp;gt;endpoints-&amp;gt;setEnabled(false);
        ui-&amp;gt;getEndpointsButton-&amp;gt;setEnabled(false);
        ui-&amp;gt;connectButton-&amp;gt;setEnabled(false);
    }
}

void MainWindow::log(const QString &amp;amp;text, const QString &amp;amp;context, const QColor &amp;amp;color)
{
    auto cf = ui-&amp;gt;log-&amp;gt;currentCharFormat();
    cf.setForeground(color);
    ui-&amp;gt;log-&amp;gt;setCurrentCharFormat(cf);
    ui-&amp;gt;log-&amp;gt;appendPlainText(text);
    if (!context.isEmpty()) {
        cf.setForeground(Qt::gray);
        ui-&amp;gt;log-&amp;gt;setCurrentCharFormat(cf);
        ui-&amp;gt;log-&amp;gt;insertPlainText(context);
    }
}

void MainWindow::log(const QString &amp;amp;text, const QColor &amp;amp;color)
{
    log(text, QString(), color);
}

void MainWindow::showErrorDialog(QOpcUaErrorState *errorState)
{
    int result = 0;

    const QString statuscode = QOpcUa::statusToString(errorState-&amp;gt;errorCode());

    QString msg = errorState-&amp;gt;isClientSideError() ? tr(&quot;The client reported: &quot;) : tr(&quot;The server reported: &quot;);

    switch (errorState-&amp;gt;connectionStep()) {
    case QOpcUaErrorState::ConnectionStep::Unknown:
        break;
    case QOpcUaErrorState::ConnectionStep::CertificateValidation: {
        CertificateDialog dlg(this);
        msg += tr(&quot;Server certificate validation failed with error 0x%1 (%2).\nClick 'Abort' to abort the connect, or 'Ignore' to continue connecting.&quot;)
                  .arg(static_cast&amp;lt;ulong&amp;gt;(errorState-&amp;gt;errorCode()), 8, 16, '0'_L1).arg(statuscode);
        result = dlg.showCertificate(msg, m_endpoint.serverCertificate(), m_pkiConfig.trustListDirectory());
        errorState-&amp;gt;setIgnoreError(result == 1);
    }
        break;
    case QOpcUaErrorState::ConnectionStep::OpenSecureChannel:
        msg += tr(&quot;OpenSecureChannel failed with error 0x%1 (%2).&quot;).arg(errorState-&amp;gt;errorCode(), 8, 16, '0'_L1).arg(statuscode);
        QMessageBox::warning(this, tr(&quot;Connection Error&quot;), msg);
        break;
    case QOpcUaErrorState::ConnectionStep::CreateSession:
        msg += tr(&quot;CreateSession failed with error 0x%1 (%2).&quot;).arg(errorState-&amp;gt;errorCode(), 8, 16, '0'_L1).arg(statuscode);
        QMessageBox::warning(this, tr(&quot;Connection Error&quot;), msg);
        break;
    case QOpcUaErrorState::ConnectionStep::ActivateSession:
        msg += tr(&quot;ActivateSession failed with error 0x%1 (%2).&quot;).arg(errorState-&amp;gt;errorCode(), 8, 16, '0'_L1).arg(statuscode);
        QMessageBox::warning(this, tr(&quot;Connection Error&quot;), msg);
        break;
    }
}

void MainWindow::openCustomContextMenu(const QPoint &amp;amp;point)
{
    QModelIndex index = ui-&amp;gt;treeView-&amp;gt;indexAt(point);
    // show the context menu only for the value column
    if (index.isValid() &amp;amp;&amp;amp; index.column() == 1) {
        TreeItem* item = static_cast&amp;lt;TreeItem *&amp;gt;(index.internalPointer());
        if (item) {
            mContextMenuMonitoringAction-&amp;gt;setData(index);
            mContextMenuMonitoringAction-&amp;gt;setEnabled(item-&amp;gt;supportsMonitoring());
            mContextMenuMonitoringAction-&amp;gt;setText(item-&amp;gt;monitoringEnabled() ? tr(&quot;Disable Monitoring&quot;) : tr(&quot;Enable Monitoring&quot;));

            mContextMenuHistorizingAction-&amp;gt;setData(index);
            QModelIndex isHistoricIndex = mOpcUaModel-&amp;gt;index(index.row(), 7, index.parent());
            mContextMenuHistorizingAction-&amp;gt;setEnabled(mOpcUaModel-&amp;gt;data(isHistoricIndex, Qt::DisplayRole).toString() == &quot;true&quot;);
            mContextMenu-&amp;gt;exec(ui-&amp;gt;treeView-&amp;gt;viewport()-&amp;gt;mapToGlobal(point));
        }
    }
}

void MainWindow::toggleMonitoring()
{
    QModelIndex index = mContextMenuMonitoringAction-&amp;gt;data().toModelIndex();
    if (index.isValid()) {
        TreeItem* item = static_cast&amp;lt;TreeItem *&amp;gt;(index.internalPointer());
        if (item) {
            item-&amp;gt;setMonitoringEnabled(!item-&amp;gt;monitoringEnabled());
        }
    }
}

void MainWindow::showHistorizing()
{
    QModelIndex modelIndex = mContextMenuHistorizingAction-&amp;gt;data().toModelIndex();
    QModelIndex nodeIdIndex = mOpcUaModel-&amp;gt;index(modelIndex.row(), 4, modelIndex.parent());
    QString nodeId = mOpcUaModel-&amp;gt;data(nodeIdIndex, Qt::DisplayRole).toString();
    auto request = QOpcUaHistoryReadRawRequest(
                {QOpcUaReadItem(nodeId)},
                QDateTime::currentDateTime(),
                QDateTime::currentDateTime().addDays(-2),
                5,
                false
                );
    mHistoryReadResponse.reset(mOpcUaClient-&amp;gt;readHistoryData(request));

    if (mHistoryReadResponse) {
        QObject::connect(mHistoryReadResponse.get(), &amp;amp;QOpcUaHistoryReadResponse::readHistoryDataFinished,
                         this, &amp;amp;MainWindow::handleReadHistoryDataFinished);
        QObject::connect(mHistoryReadResponse.get(), &amp;amp;QOpcUaHistoryReadResponse::stateChanged, this, [](QOpcUaHistoryReadResponse::State state) {
            qDebug() &amp;lt;&amp;lt; &quot;History read state changed to&quot; &amp;lt;&amp;lt; state;
        });
    } else {
        qWarning() &amp;lt;&amp;lt; &quot;Failed to request history data&quot;;
    }
}

void MainWindow::handleReadHistoryDataFinished(QList&amp;lt;QOpcUaHistoryData&amp;gt; results, QOpcUa::UaStatusCode serviceResult)
{
    if (serviceResult != QOpcUa::UaStatusCode::Good) {
        qWarning() &amp;lt;&amp;lt; &quot;readHistoryData request finished with bad status code: &quot; &amp;lt;&amp;lt; serviceResult;
        return;
    }

    for (int i = 0; i &amp;lt; results.count(); ++i) {
        qInfo() &amp;lt;&amp;lt; &quot;NodeId:&quot; &amp;lt;&amp;lt; results.at(i).nodeId() &amp;lt;&amp;lt; &quot;; statusCode:&quot; &amp;lt;&amp;lt; results.at(i).statusCode() &amp;lt;&amp;lt; &quot;; returned values:&quot; &amp;lt;&amp;lt; results.at(i).count();
        for (int j = 0; j &amp;lt; results.at(i).count(); ++j) {
            qInfo() &amp;lt;&amp;lt; j
                       &amp;lt;&amp;lt; &quot;source timestamp:&quot; &amp;lt;&amp;lt; results.at(i).result()[j].sourceTimestamp()
                       &amp;lt;&amp;lt; &quot;server timestamp:&quot; &amp;lt;&amp;lt;  results.at(i).result()[j].serverTimestamp()
                       &amp;lt;&amp;lt; &quot;value:&quot; &amp;lt;&amp;lt; results.at(i).result()[j].value();
        }
    }
}

</db:programlisting>
</db:article>
