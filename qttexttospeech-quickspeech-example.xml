<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Quick Speech Example</db:title>
<db:productname>QtTextToSpeech</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt TextToSpeech Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Quick Speech example reads out user-provided text.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/quickspeech-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:emphasis>Quick Speech</db:emphasis> example demonstrates how the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml">TextToSpeech</db:link> type can be used in a <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> application to read out text and to control the speech.</db:para>
<db:para>The example uses <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> to provide controls for the speech's pitch, volume, and rate. It also lets the user select an engine, a language, and a voice.</db:para>
<db:section xml:id="initializing-a-texttospeech">
<db:title>Initializing a TextToSpeech</db:title>
<db:para>First, we initialize the text to speech object <db:code>tts</db:code>:</db:para>
<db:programlisting language="cpp">    TextToSpeech {
        id: tts
        volume: volumeSlider.value
        pitch: pitchSlider.value
        rate: rateSlider.value
</db:programlisting>
</db:section>
<db:section xml:id="getting-the-status">
<db:title>Getting the status</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/status.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>Switch cases are used to update the Label <db:code>statusLabel</db:code> in the footer.</db:para>
<db:programlisting language="cpp">        onStateChanged: updateStateLabel(state)

        function updateStateLabel(state)
        {
            switch (state) {
                case TextToSpeech.Ready:
                    statusLabel.text = qsTr(&quot;Ready&quot;)
                    break
                case TextToSpeech.Speaking:
                    statusLabel.text = qsTr(&quot;Speaking&quot;)
                    break
                case TextToSpeech.Paused:
                    statusLabel.text = qsTr(&quot;Paused...&quot;)
                    break
                case TextToSpeech.Error:
                    statusLabel.text = qsTr(&quot;Error!&quot;)
                    break
            }
</db:programlisting>
</db:section>
<db:section xml:id="highlighting-words-as-they-are-spoken">
<db:title>Highlighting words as they are spoken</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> <db:code>input</db:code> is used to get the text to input and the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#sayingWord-signal">onSayingWord</db:link> signal as the trigger and also to know the position to highlight words as they are spoken.</db:para>
<db:programlisting language="cpp">        onSayingWord: (word, id, start, length)=&amp;gt; {
            input.select(start, start + length)
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> <db:code>input</db:code> is declared here:</db:para>
<db:programlisting language="cpp">    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 8
        id: inputForm

        TextArea {
            id: input
            wrapMode: TextEdit.WordWrap
            text: qsTr(&quot;Hello, world!&quot;)
            Layout.fillWidth: true
            Layout.minimumHeight: implicitHeight
            font.pointSize: 24
        }
</db:programlisting>
</db:section>
<db:section xml:id="controlling-speech">
<db:title>Controlling speech</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-button.xml">Button</db:link> types are arranged with a <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml">RowLayout</db:link> and configured to control the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml">TextToSpeech</db:link> <db:code>tts</db:code>.</db:para>
<db:section xml:id="the-speak-button">
<db:title>The speak button</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-controls-button.xml">Button</db:link> is created labeled &quot;Speak&quot;. It is enabled if <db:code>tts</db:code>'s state property is either <db:link xlink:href="qtexttospeech.xml#State-enum">Paused</db:link> or <db:link xlink:href="qtexttospeech.xml#State-enum">Ready</db:link>.</db:para>
<db:programlisting language="cpp">        RowLayout {
            Button {
                text: qsTr(&quot;Speak&quot;)
                enabled: [TextToSpeech.Paused, TextToSpeech.Ready].includes(tts.state)
</db:programlisting>
<db:para>When the button is clicked, the available voices on the target devices are retrieved, and <db:code>tts.voice</db:code> is set to the currently selected voice of <db:code>voicesComboBox</db:code>. Then <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#say-method">TextToSpeech::say</db:link>() is called and is passed the text in the <db:code>inputbox</db:code>.</db:para>
<db:programlisting language="cpp">                onClicked: {
//! [say0]
                    let voices = tts.availableVoices()
                    tts.voice = voices[voicesComboBox.currentIndex]
//! [say1]
                    tts.say(input.text)
                }
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="the-pause-resume-and-stop-buttons">
<db:title>The pause, resume, and stop buttons</db:title>
<db:para>These buttons are similar in implementation to the <db:code>Speak</db:code> button:</db:para>
<db:programlisting language="cpp">            Button {
                text: qsTr(&quot;Pause&quot;)
                enabled: tts.state == TextToSpeech.Speaking
                onClicked: tts.pause()
                visible: tts.engineCapabilities &amp;amp; TextToSpeech.Capabilities.PauseResume
            }
//! [pause]
//! [resume]
            Button {
                text: qsTr(&quot;Resume&quot;)
                enabled: tts.state == TextToSpeech.Paused
                onClicked: tts.resume()
                visible: tts.engineCapabilities &amp;amp; TextToSpeech.Capabilities.PauseResume
            }
//! [resume]
            Button {
                text: qsTr(&quot;Stop&quot;)
                enabled: [TextToSpeech.Speaking, TextToSpeech.Paused].includes(tts.state)
                onClicked: tts.stop()
            }
        }
</db:programlisting>
</db:section>
<db:section xml:id="selecting-text-to-speech-options">
<db:title>Selecting text to speech options</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml">GridLayout</db:link> is used to arrange the controls and labels for the selection of engine, locale, voice, volume, pitch, and rate options for text to speech synthesis.</db:para>
<db:section xml:id="selecting-engine-locale-and-voice">
<db:title>Selecting engine, locale, and voice</db:title>
<db:para>A group of <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> components are used for selecting these parameters.</db:para>
<db:para>For the engine selection <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>, <db:code>tts.availableEngines()</db:code> is used as the model.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-controls-combobox.xml#activated-signal">onActivated</db:link> triggers assigning tts.engine the current text at the ComboBoxes current index.</db:para>
<db:programlisting language="cpp">            Text {
                text: qsTr(&quot;Engine:&quot;)
            }
            ComboBox {
                id: enginesComboBox
                Layout.fillWidth: true
                model: tts.availableEngines()
                onActivated: {
                    tts.engine = textAt(currentIndex)
                    updateLocales()
                    updateVoices()
</db:programlisting>
<db:para>The last two lines in the above code snippet show that the available locales and voices are updated at this point as well, as they are dependent on the selected engine. Those functions are covered in a <db:link xlink:href="qttexttospeech-quickspeech-example.xml#updating-available-options">following section</db:link>.</db:para>
<db:para>The <db:code>localesComboBox</db:code> is implemented the same way as <db:code>engineComboBox</db:code>, but without updating the available engines.</db:para>
<db:programlisting language="cpp">                }
            }
            Text {
                text: qsTr(&quot;Locale:&quot;)
            }
            ComboBox {
                id: localesComboBox
                Layout.fillWidth: true
                onActivated: {
                    let locales = tts.availableLocales()
                    tts.locale = locales[currentIndex]
                    updateVoices()
                }
            }
            Text {
                text: qsTr(&quot;Voice:&quot;)
            }
            ComboBox {
                id: voicesComboBox
                Layout.fillWidth: true
            }
</db:programlisting>
</db:section>
<db:section xml:id="selecting-volume-pitch-and-rate">
<db:title>Selecting volume, pitch, and rate</db:title>
<db:para>These controls are implemented with <db:link xlink:href="qml-qtquick-controls-slider.xml">Sliders</db:link> as follows:</db:para>
<db:programlisting language="cpp">            Text {
                text: qsTr(&quot;Volume:&quot;)
            }
            Slider {
                id: volumeSlider
                from: 0
                to: 1.0
                stepSize: 0.2
                value: 0.8
                Layout.fillWidth: true
            }
            Text {
                text: qsTr(&quot;Pitch:&quot;)
            }
            Slider {
                id: pitchSlider
                from: -1.0
                to: 1.0
                stepSize: 0.5
                value: 0
                Layout.fillWidth: true
            }
            Text {
                text: qsTr(&quot;Rate:&quot;)
            }
            Slider {
                id: rateSlider
                from: -1.0
                to: 1.0
                stepSize: 0.5
                value: 0
                Layout.fillWidth: true
            }
        }
    }
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="updating-available-options">
<db:title>Updating available options</db:title>
<db:para>By using the <db:code>Component.onCompleted</db:code> signal, the following is done once the root <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link> has been instantiated.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:code>enginesComboBox</db:code> index is set to the currently set engine of <db:code>tts</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The available locales and voices are updated.</db:para>
</db:listitem>
<db:listitem>
<db:para>The current state of <db:code>tts</db:code> is signaled.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">    Component.onCompleted: {
        enginesComboBox.currentIndex = tts.availableEngines().indexOf(tts.engine)
        // some engines initialize asynchronously
        if (tts.state == TextToSpeech.Ready) {
            engineReady()
</db:programlisting>
<db:para>Used throughout the application, the <db:code>updateLocales()</db:code> and <db:code>updateVoice()</db:code> functions are implemented as follows:</db:para>
<db:programlisting language="cpp">        } else {
            tts.stateChanged.connect(root.engineReady)
        }

        tts.updateStateLabel(tts.state)
    }

    function engineReady() {
        tts.stateChanged.disconnect(root.engineReady)
        if (tts.state != TextToSpeech.Ready) {
            tts.updateStateLabel(tts.state)
            return;
        }
        updateLocales()
        updateVoices()
    }

    function updateLocales() {
        let allLocales = tts.availableLocales().map((locale) =&amp;gt; locale.nativeLanguageName)
        let currentLocaleIndex = allLocales.indexOf(tts.locale.nativeLanguageName)
        localesComboBox.model = allLocales
        localesComboBox.currentIndex = currentLocaleIndex
    }

    function updateVoices() {
        voicesComboBox.model = tts.availableVoices().map((voice) =&amp;gt; voice.name)
        let indexOfVoice = tts.availableVoices().indexOf(tts.voice)
        voicesComboBox.currentIndex = indexOfVoice
</db:programlisting>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtspeech.git/tree/examples/speech/quickspeech?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
