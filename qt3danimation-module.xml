<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D Animation C++ Classes</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt 3D Animation modules provides a set of prebuilt elements to help you get started with Qt 3D.</db:para>
<db:para><db:emphasis role="bold">This module is under development and is subject to change.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt 3D Animation modules provides a set of prebuilt elements to help you get started with Qt 3D.</db:para>
<db:para><db:emphasis role="bold">This module is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="namespaces">
<db:title>Namespaces</db:title>
<db:variablelist role="namespaces">
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation.xml" xlink:role="namespace">Qt3DAnimation</db:link></db:term>
<db:listitem>
<db:para>Contains classes from the Qt3DAnimation module.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="classes">
<db:title>Classes</db:title>
<db:variablelist role="classes">
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qabstractanimation.xml" xlink:role="class">Qt3DAnimation::QAbstractAnimation</db:link></db:term>
<db:listitem>
<db:para>An abstract base class for Qt3D animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qabstractanimationclip.xml" xlink:role="class">Qt3DAnimation::QAbstractAnimationClip</db:link></db:term>
<db:listitem>
<db:para>QAbstractAnimationClip is the base class for types providing key frame animation data.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qabstractclipanimator.xml" xlink:role="class">Qt3DAnimation::QAbstractClipAnimator</db:link></db:term>
<db:listitem>
<db:para>QAbstractClipAnimator is the base class for types providing animation playback capabilities.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qabstractclipblendnode.xml" xlink:role="class">Qt3DAnimation::QAbstractClipBlendNode</db:link></db:term>
<db:listitem>
<db:para>QAbstractClipBlendNode is the base class for types used to construct animation blend trees.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qadditiveclipblend.xml" xlink:role="class">Qt3DAnimation::QAdditiveClipBlend</db:link></db:term>
<db:listitem>
<db:para>Performs an additive blend of two animation clips based on an additive factor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationaspect.xml" xlink:role="class">Qt3DAnimation::QAnimationAspect</db:link></db:term>
<db:listitem>
<db:para>Provides key-frame animation capabilities to Qt 3D.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationcallback.xml" xlink:role="class">Qt3DAnimation::QAnimationCallback</db:link></db:term>
<db:listitem>
<db:para>Represents an animation callback object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationclip.xml" xlink:role="class">Qt3DAnimation::QAnimationClip</db:link></db:term>
<db:listitem>
<db:para>Specifies key frame animation data.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationclipdata.xml" xlink:role="class">Qt3DAnimation::QAnimationClipData</db:link></db:term>
<db:listitem>
<db:para>Class containing the animation data.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationcliploader.xml" xlink:role="class">Qt3DAnimation::QAnimationClipLoader</db:link></db:term>
<db:listitem>
<db:para>Enables loading key frame animation data from a file.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationcontroller.xml" xlink:role="class">Qt3DAnimation::QAnimationController</db:link></db:term>
<db:listitem>
<db:para>A controller class for animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationgroup.xml" xlink:role="class">Qt3DAnimation::QAnimationGroup</db:link></db:term>
<db:listitem>
<db:para>A class grouping animations together.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qblendedclipanimator.xml" xlink:role="class">Qt3DAnimation::QBlendedClipAnimator</db:link></db:term>
<db:listitem>
<db:para>QBlendedClipAnimator is a component providing animation playback capabilities of a tree of blend nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qcallbackmapping.xml" xlink:role="class">Qt3DAnimation::QCallbackMapping</db:link></db:term>
<db:listitem>
<db:para>Allows to map the channels within the clip onto an invocation of a callback object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qchannel.xml" xlink:role="class">Qt3DAnimation::QChannel</db:link></db:term>
<db:listitem>
<db:para>Defines a channel for a QAnimationClipData. The animation system interpolates each channel component independently except in the case the QChannel is called &quot;Rotation&quot; (case sensitive), it has four QChannelComponents and the same number of keyframes for each QChannelComponent. In that case the interpolation will be performed using SLERP.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qchannelmapper.xml" xlink:role="class">Qt3DAnimation::QChannelMapper</db:link></db:term>
<db:listitem>
<db:para>Allows to map the channels within the clip onto properties of objects in the application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qchannelmapping.xml" xlink:role="class">Qt3DAnimation::QChannelMapping</db:link></db:term>
<db:listitem>
<db:para>Allows to map the channels within the clip onto properties of objects in the application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qclipanimator.xml" xlink:role="class">Qt3DAnimation::QClipAnimator</db:link></db:term>
<db:listitem>
<db:para>QClipAnimator is a component providing simple animation playback capabilities.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qclipblendvalue.xml" xlink:role="class">Qt3DAnimation::QClipBlendValue</db:link></db:term>
<db:listitem>
<db:para>Class used for including a clip in a blend tree.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qkeyframe.xml" xlink:role="class">Qt3DAnimation::QKeyFrame</db:link></db:term>
<db:listitem>
<db:para>A base class for handling keyframes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qkeyframeanimation.xml" xlink:role="class">Qt3DAnimation::QKeyframeAnimation</db:link></db:term>
<db:listitem>
<db:para>A class implementing simple keyframe animation to a QTransform.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qlerpclipblend.xml" xlink:role="class">Qt3DAnimation::QLerpClipBlend</db:link></db:term>
<db:listitem>
<db:para>Performs a linear interpolation of two animation clips based on a normalized factor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qmorphtarget.xml" xlink:role="class">Qt3DAnimation::QMorphTarget</db:link></db:term>
<db:listitem>
<db:para>A class providing morph targets to blend-shape animation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qmorphinganimation.xml" xlink:role="class">Qt3DAnimation::QMorphingAnimation</db:link></db:term>
<db:listitem>
<db:para>A class implementing blend-shape morphing animation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qvertexblendanimation.xml" xlink:role="class">Qt3DAnimation::QVertexBlendAnimation</db:link></db:term>
<db:listitem>
<db:para>A class implementing vertex-blend morphing animation.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This module is still in development but is available as a technology preview. This means it is unstable, likely to change and provided as a convenience only.</db:para>
<db:programlisting language="cpp">#include &amp;lt;Qt3DAnimation&amp;gt;
</db:programlisting>
<db:para>To link against the corresponding C++ library, add the following to your qmake project file:</db:para>
<db:programlisting language="cpp" role="bad">QT += 3danimation
</db:programlisting>
<db:para>Classes, types, and functions are declared under the <db:link xlink:href="qt3danimation-module.xml">Qt3DAnimation</db:link> namespace.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The Qt 3D Animation module adds support for specifying and using animations that can be applied to the properties of objects in your simulation. Initially this module supports key frame based animations. That is, properties have values 'keyed' at certain times and when played back the property values are calculated by interpolating between the known values within the key frames. All of the animation evaluation within the Qt 3D Animation module takes place on the Qt 3D threadpool. This allows the animations to run smoothly and to scale up to high throughput.</db:para>
<db:section xml:id="animation-data">
<db:title>Animation Data</db:title>
<db:para>Key frame animation data can either be created programmatically via the Qt 3D Animation APIs such as Qt3DAnimation::QKeyFrameData or it can come from digital content creation (DCC) tools such as Blender, Maya or 3D Studio Max. Qt 3D provides an example export script for animation data for Blender. The format consumed by Qt 3D Animation at present is a simple JSON based format. This allows both developers and artists to easily work with animation data. More formats optimised for runtime consumption will be added later.</db:para>
<db:para>The key frame animation data can be loaded from file using the <db:link xlink:href="qt3danimation-qanimationcliploader.xml">Qt3DAnimation::QAnimationClipLoader</db:link> class. To specify animation data programmatically use the <db:link xlink:href="qt3danimation-qanimationclip.xml">Qt3DAnimation::QAnimationClip</db:link> class.</db:para>
<db:para>By default, the key frame data is specified using cubic bezier curves. This allows smooth animations to be created from a small number of key frame data points. Other interpolation types will be added later.</db:para>
</db:section>
<db:section xml:id="playing-animations">
<db:title>Playing Animations</db:title>
<db:para>In addition to the animation data containing the key frames, Qt 3D Animation also provides APIs for playing the animations and mapping the resulting property values onto properties of objects in your simulation. There are currently two ways of playing the animations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-qclipanimator.xml">Qt3DAnimation::QClipAnimator</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-qblendedclipanimator.xml">Qt3DAnimation::QBlendedClipAnimator</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Both of these are implemented as subclasses of <db:link xlink:href="qt3dcore-qcomponent.xml">Qt3DCore::QComponent</db:link> meaning that objects of these types can be aggregated by <db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link> objects to add animation capabilities to your simulated entities.</db:para>
</db:section>
<db:section xml:id="simple-animation-playback">
<db:title>Simple Animation Playback</db:title>
<db:para>The <db:link xlink:href="qt3danimation-qclipanimator.xml">Qt3DAnimation::QClipAnimator</db:link> class allows the playback of a single <db:link xlink:href="qt3danimation-qabstractanimationclip.xml">Qt3DAnimation::QAbstractAnimationClip</db:link> at a time. To add an animation to an entity, simply add an instance of the <db:link xlink:href="qt3danimation-qclipanimator.xml">Qt3DAnimation::QClipAnimator</db:link> class to your entity's <db:code>components</db:code> property.</db:para>
<db:para>The Qt 3D Animation module takes a slightly different approach to <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> and <db:link xlink:href="qml-qt3d-animation-abstractanimation.xml">AbstractAnimation</db:link>. With those animation frameworks, the animation specifies both the animation values <db:emphasis>and</db:emphasis> the target objects and properties. The animation components in Qt 3D separate these two orthogonal concepts. For example, the <db:link xlink:href="qt3danimation-qclipanimator.xml">Qt3DAnimation::QClipAnimator</db:link> component has a <db:code>clip</db:code> property for specifying the animation data (<db:link xlink:href="qt3danimation-qanimationclip.xml">Qt3DAnimation::QAnimationClip</db:link> or <db:link xlink:href="qt3danimation-qanimationcliploader.xml">Qt3DAnimation::QAnimationClipLoader</db:link>).</db:para>
<db:para>This allows calculation of the animated values, but more information is needed in order to map these values onto properties of objects. This is accomplished with the a <db:link xlink:href="qt3danimation-qchannelmapper.xml">Qt3DAnimation::QChannelMapper</db:link> which contains a list of <db:link xlink:href="qt3danimation-qchannelmapping.xml">Qt3DAnimation::QChannelMapping</db:link> objects. A <db:link xlink:href="qt3danimation-qchannelmapping.xml">Qt3DAnimation::QChannelMapping</db:link> is used to map a specific channel from an animation clip onto a named property of a target object. By separating the animation data and property mappings like this, the same animation can be applied to many objects without needing to have multiple copies of the animation data or objects. It also allows animation data to easily be retargeted to other objects.</db:para>
</db:section>
<db:section xml:id="blended-animation-playback">
<db:title>Blended Animation Playback</db:title>
<db:para>The <db:link xlink:href="qt3danimation-qblendedclipanimator.xml">Qt3DAnimation::QBlendedClipAnimator</db:link> component allows to go beyond what is possible with <db:link xlink:href="qt3danimation-qclipanimator.xml">Qt3DAnimation::QClipAnimator</db:link> by blending several animation clips together before applying the property changes to the target properties. The animator component still takes a channel mapper just like the standard <db:link xlink:href="qt3danimation-qclipanimator.xml">Qt3DAnimation::QClipAnimator</db:link> component. However, instead of specifying a single animation clip, it is necessary to set the <db:code>blendTree</db:code> property to point to the root node of a <db:emphasis>blend tree</db:emphasis>.</db:para>
<db:para>A blend tree is a data structure representing how animation clips get aggregated or blended together as the function of properties on the blend tree nodes. The currently supported set of blend tree nodes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-qclipblendvalue.xml">Qt3DAnimation::QClipBlendValue</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-qlerpclipblend.xml">Qt3DAnimation::QLerpClipBlend</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-qadditiveclipblend.xml">Qt3DAnimation::QAdditiveClipBlend</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The source animation clip inputs are specified as leaf nodes in the blend tree using instances of the <db:link xlink:href="qt3danimation-qclipblendvalue.xml">Qt3DAnimation::QClipBlendValue</db:link> class. These animation clips can be combined in a large number of ways. For now the Qt3D Animation module provides linear interpolation (LERP) and additive blend operations. More blend node types will be added over time. These are expected to include at least a generalised LERP node and a barycentric LERP node.</db:para>
<db:para>As an example consider the following blend tree:</db:para>
<db:programlisting language="cpp" role="bad">Clip0----
        |
        Lerp Node----
        |           |
Clip1----           Additive Node
                    |
            Clip2----
</db:programlisting>
<db:para>Let's assume that <db:code>Clip0</db:code> represents a walk animation cycle with a duration of 3 seconds and that <db:code>Clip1</db:code> is a run animation cycle with a duration of 2 seconds. These are both inputs (and dependencies) of the <db:code>Lerp</db:code> blend node. The result of evaluating the <db:code>Lerp</db:code> node depends upon the <db:code>blendFactor</db:code> property of the <db:code>Lerp</db:code> node. This could be bound to the speed of a humanoid character entity for example. As the speed of the character increases the animation gradually cross-fades from the walk animation in <db:code>Clip0</db:code> to the run animation in <db:code>Clip1</db:code>.</db:para>
<db:para>Furthermore, let's assume that <db:code>Clip2</db:code> represents some variation animation that can be added on (waving arms or shaking head for e.g.). The amount of this additive clip that is added can be controlled by the <db:code>additiveFactor</db:code> property on the <db:code>Additive</db:code> blend node.</db:para>
<db:para>When evaluating a blend tree, normalized time (or phase) is used so that clips of different durations can be blended together without problems. For example, even though the walk and run animation clips are of different lengths, as long as they are created by the animator such that the foot-falls line up at the same phase these can be nicely interpolated.</db:para>
<db:para>The implication of this is that the duration of the blended clip is actually a function of the blend factors of the nodes in the tree. Considering only the <db:code>Lerp</db:code> node in the above example, when the blend factor of the <db:code>Lerp</db:code> node is 0, only the walk animation in Clip0 is used resulting in a duration of 3 seconds. With a blend factor of 1 the resulting duration will be 2 seconds. For intermediate blend factors, the duration will be linearly interpolated between 3 and 2 seconds.</db:para>
<db:para>By definining your own blend trees, you have complete control over how to combine your collection of input animation clips. The blend tree can be configured by the properties on the blend nodes. Note also that the properties on the blend nodes themselves are just standard properties, so these could in turn be driven by other animations if desired.</db:para>
</db:section>
</db:section>
<db:section xml:id="reference">
<db:title>Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-module.xml">Qt 3D Animation C++ Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3d-examples.xml">Qt 3D Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
