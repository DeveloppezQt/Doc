<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WheelHandler QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Handler for the mouse wheel.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-singlepointhandler.xml">SinglePointHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>WheelHandler is part of <db:simplelist><db:member>qtquick-input-handlers</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> is a handler that is used to interactively manipulate some numeric property of an Item as the user rotates the mouse wheel. Like other Input Handlers, by default it manipulates its <db:link xlink:href="qml-qtquick-wheelhandler.xml#target-prop">target</db:link>. Declare <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> to control which target property will be manipulated:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    width: 170; height: 120
    color: &quot;green&quot;; antialiasing: true

    WheelHandler {
        property: &quot;rotation&quot;
        onWheel: (event)=&gt; console.log(&quot;rotation&quot;, event.angleDelta.y,
                                       &quot;scaled&quot;, rotation, &quot;@&quot;, point.position,
                                       &quot;=&gt;&quot;, parent.rotation)
    }
}
</db:programlisting>
<db:para><db:link xlink:href="qml-qt-labs-animation-boundaryrule.xml">BoundaryRule</db:link> is quite useful in combination with <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> (as well as with other Input Handlers) to declare the allowed range of values that the target property can have. For example it is possible to implement scrolling using a combination of <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> and <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> to manipulate the scrollable Item's <db:link xlink:href="qquickitem.xml#y-prop">y</db:link> property when the user rotates the wheel or drags the item on a touchscreen, and <db:link xlink:href="qml-qt-labs-animation-boundaryrule.xml">BoundaryRule</db:link> to limit the range of motion from the top to the bottom:</db:para>
<db:programlisting language="qml">import QtQuick
import Qt.labs.animation

Item {
    width: 320; height: 480
    Flow {
        id: content
        width: parent.width
        spacing: 2; padding: 2

        WheelHandler {
            orientation: Qt.Vertical
            property: &quot;y&quot;
            rotationScale: 15
            acceptedDevices: PointerDevice.Mouse | PointerDevice.TouchPad
            onActiveChanged: if (!active) ybr.returnToBounds()
        }

        DragHandler {
            xAxis.enabled: false
            onActiveChanged: if (!active) ybr.returnToBounds()
        }

        BoundaryRule on y {
            id: ybr
            minimum: content.parent.height - content.height
            maximum: 0
            minimumOvershoot: 400; maximumOvershoot: 400
            overshootFilter: BoundaryRule.Peak
        }

        Repeater {
            model: 1000
            Rectangle { color: &quot;gray&quot;; width: 10 + Math.random() * 100; height: 15 }
        }
    }
}
</db:programlisting>
<db:para>Alternatively, if <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> is not set or <db:link xlink:href="qt-add-ui.xml#target">target</db:link> is null, <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> will not automatically manipulate anything; but the <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> property can be used in a binding to manipulate another property, or you can implement <db:code>onWheel</db:code> and handle the wheel event directly.</db:para>
<db:para><db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> handles only a rotating mouse wheel by default; this can be changed by setting <db:link xlink:href="qml-qtquick-wheelhandler.xml#acceptedDevices-prop">acceptedDevices</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link></db:member>
<db:member><db:link xlink:href="qtquick-pointerhandlers-example.xml">Qt Quick Examples - Pointer Handlers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptedDevices-prop">
<db:title>acceptedDevices : flags</db:title>
<db:para>The types of pointing devices that can activate this handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qinputdevice.xml#DeviceType-enum">PointerDevice.Mouse</db:link>, so as to react only to events from an actual mouse wheel.</db:para>
<db:para><db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> can be made to respond to both mouse wheel and touchpad scrolling by setting acceptedDevices to <db:code>PointerDevice.Mouse | PointerDevice.TouchPad</db:code>.</db:para>
<db:note>
<db:para>Some non-mouse hardware (such as a touch-sensitive Wacom tablet, or a Linux laptop touchpad) generates real wheel events from gestures. <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> will respond to those events as wheel events even if <db:code>acceptedDevices</db:code> remains set to its default value.</db:para>
</db:note>
</db:section>
<db:section xml:id="acceptedModifiers-prop">
<db:title>acceptedModifiers : flags</db:title>
<db:para>If this property is set, it will require the given keyboard modifiers to be pressed in order to react to wheel events, and otherwise ignore them.</db:para>
<db:para>If this property is set to <db:code>Qt.KeyboardModifierMask</db:code> (the default value), the <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> ignores the modifier keys.</db:para>
<db:para>For example, an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> could have two handlers, one of which is enabled only if the required keyboard modifier is pressed, while the other ignores events if any modifier is pressed:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    width: 170; height: 120
    color: &quot;green&quot;; antialiasing: true

    WheelHandler {
        property: &quot;rotation&quot;
        acceptedModifiers: Qt.ControlModifier
    }

    WheelHandler {
        property: &quot;scale&quot;
        acceptedModifiers: Qt.NoModifier
    }
}
</db:programlisting>
<db:para>The available modifiers are as follows:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>NoModifier</db:para>
</db:td>
<db:td>
<db:para>No modifier key is allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShiftModifier</db:para>
</db:td>
<db:td>
<db:para>A Shift key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ControlModifier</db:para>
</db:td>
<db:td>
<db:para>A Ctrl key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>AltModifier</db:para>
</db:td>
<db:td>
<db:para>An Alt key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MetaModifier</db:para>
</db:td>
<db:td>
<db:para>A Meta key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeypadModifier</db:para>
</db:td>
<db:td>
<db:para>A keypad button must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>GroupSwitchModifier</db:para>
</db:td>
<db:td>
<db:para>X11 only (unless activated on Windows by a command line argument). A Mode_switch key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeyboardModifierMask</db:para>
</db:td>
<db:td>
<db:para>The handler does not care which modifiers are pressed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::KeyboardModifier</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="active-prop">
<db:title>[read-only] active : bool</db:title>
<db:para>This holds <db:code>true</db:code> whenever the <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> has recently seen a <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link>, is keeping its properties up-to-date, and actively manipulating its <db:link xlink:href="qt-add-ui.xml#target">target</db:link> (if any).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-wheelhandler.xml#activeTimeout-prop">activeTimeout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeTimeout-prop">
<db:title>activeTimeout : real</db:title>
<db:para>The amount of time in seconds after which the <db:link xlink:href="qml-qtquick-wheelhandler.xml#active-prop">active</db:link> property will revert to <db:code>false</db:code> if no more wheel events are received. The default is <db:code>0.1</db:code> (100 ms).</db:para>
<db:para>When <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> handles events that contain <db:link xlink:href="qt.xml#ScrollPhase-enum">scroll phase</db:link> information, such as events from some touchpads, the <db:link xlink:href="qml-qtquick-wheelhandler.xml#active-prop">active</db:link> property will become <db:code>false</db:code> as soon as an event with phase <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollEnd</db:link> is received; in that case the timeout is not necessary. But a conventional mouse with a wheel does not provide a scroll phase: the mouse cannot detect when the user has decided to stop scrolling, so the <db:link xlink:href="qml-qtquick-wheelhandler.xml#active-prop">active</db:link> property transitions to <db:code>false</db:code> after this much time has elapsed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#phase">QWheelEvent::phase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blocking-prop">
<db:title>[since 6.3] blocking : bool</db:title>
<db:para>Whether this handler prevents other items or handlers behind it from handling the same wheel event. This property is <db:code>true</db:code> by default.</db:para>
<db:para>This property was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:para>If a <db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> is disabled, it will reject all events and no signals will be emitted.</db:para>
</db:section>
<db:section xml:id="invertible-prop">
<db:title>invertible : bool</db:title>
<db:para>Whether or not to reverse the direction of property change if <db:link xlink:href="qwheelevent.xml#inverted">QWheelEvent::inverted</db:link> is <db:code>true</db:code>. The default is <db:code>true</db:code>.</db:para>
<db:para>If the operating system has a &quot;natural scrolling&quot; setting that causes scrolling to be in the same direction as the finger movement, then if this property is set to <db:code>true</db:code>, and <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> is directly setting a property on <db:link xlink:href="qt-add-ui.xml#target">target</db:link>, the direction of movement will correspond to the system setting. If this property is set to <db:code>false</db:code>, it will invert the <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> so that the direction of motion is always the same as the direction of finger movement.</db:para>
</db:section>
<db:section xml:id="margin-prop">
<db:title>margin : real</db:title>
<db:para>The margin beyond the bounds of the <db:link xlink:href="qml-qtquick-wheelhandler.xml#parent-prop">parent</db:link> item within which the <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> can react. For example if <db:code>margin</db:code> is set to <db:code>10</db:code>, you could place the cursor up to 10 pixels outside the visible edge of the item, and it will still react to the wheel:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    width: 170; height: 120
    color: &quot;green&quot;; antialiasing: true

    WheelHandler {
        property: &quot;rotation&quot;
        margin: 10
    }
}
</db:programlisting>
<db:para>The default value is <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>orientation : enumeration</db:title>
<db:para>Which wheel to react to. The default is <db:code>Qt.Vertical</db:code>.</db:para>
<db:para>Not every mouse has a <db:code>Horizontal</db:code> wheel; sometimes it is emulated by tilting the wheel sideways. A touchpad can usually generate both vertical and horizontal wheel events.</db:para>
</db:section>
<db:section xml:id="parent-prop">
<db:title>parent : Item</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> which is the scope of the handler; the Item in which it was declared. The handler will handle events on behalf of this Item, which means a pointer event is relevant if at least one of its <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoints</db:link> occurs within the Item's interior. Initially <db:link xlink:href="qml-qtquick-wheelhandler.xml#target-prop">target()</db:link> is the same, but it can be reassigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-wheelhandler.xml#target-prop">target</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#parent">QObject::parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="point-prop">
<db:title>[read-only] point : handlerPoint</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoint</db:link> currently being handled. When no point is currently being handled, this object is reset to default values (all coordinates are 0).</db:para>
</db:section>
<db:section xml:id="property-prop">
<db:title>property : string</db:title>
<db:para>The property to be modified on the <db:link xlink:href="qt-add-ui.xml#target">target</db:link> when the mouse wheel is rotated.</db:para>
<db:para>The default is no property (empty string). When no target property is being automatically modified, you can use bindings to react to mouse wheel rotation in arbitrary ways.</db:para>
<db:para>You can use the mouse wheel to adjust any numeric property. For example if <db:code>property</db:code> is set to <db:code>x</db:code>, the <db:link xlink:href="qt-add-ui.xml#target">target</db:link> will move horizontally as the wheel is rotated. The following properties have special behavior:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>scale</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qquickitem.xml#scale-prop">scale</db:link> will be modified in a non-linear fashion as described under <db:link xlink:href="qml-qtquick-wheelhandler.xml#targetScaleMultiplier-prop">targetScaleMultiplier</db:link>. If <db:link xlink:href="qml-qtquick-wheelhandler.xml#targetTransformAroundCursor-prop">targetTransformAroundCursor</db:link> is <db:code>true</db:code>, the <db:link xlink:href="qquickitem.xml#x-prop">x</db:link> and <db:link xlink:href="qquickitem.xml#y-prop">y</db:link> properties will be simultaneously adjusted so that the user will effectively zoom into or out of the point under the mouse cursor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>rotation</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qquickitem.xml#rotation-prop">rotation</db:link> will be set to <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link>. If <db:link xlink:href="qml-qtquick-wheelhandler.xml#targetTransformAroundCursor-prop">targetTransformAroundCursor</db:link> is <db:code>true</db:code>, the l{<db:link xlink:href="qquickitem.xml#x-prop">QQuickItem::x</db:link>}{x} and <db:link xlink:href="qquickitem.xml#y-prop">y</db:link> properties will be simultaneously adjusted so that the user will effectively rotate the item around the point under the mouse cursor.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The adjustment of the given target property is always scaled by <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotationScale-prop">rotationScale</db:link>.</db:para>
</db:section>
<db:section xml:id="rotation-prop">
<db:title>rotation : real</db:title>
<db:para>The angle through which the mouse wheel has been rotated since the last time this property was set, in wheel degrees.</db:para>
<db:para>A positive value indicates that the wheel was rotated up/right; a negative value indicates that the wheel was rotated down/left.</db:para>
<db:para>A basic mouse click-wheel works in steps of 15 degrees.</db:para>
<db:para>The default is <db:code>0</db:code> at startup. It can be programmatically set to any value at any time. The value will be adjusted from there as the user rotates the mouse wheel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-wheelhandler.xml#orientation-prop">orientation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotationScale-prop">
<db:title>rotationScale : real</db:title>
<db:para>The scaling to be applied to the <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> property, and to the <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> on the <db:link xlink:href="qt-add-ui.xml#target">target</db:link> item, if any. The default is 1, such that <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> will be in units of degrees of rotation. It can be set to a negative number to invert the effect of the direction of mouse wheel rotation.</db:para>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Item</db:title>
<db:para>The Item which this handler will manipulate.</db:para>
<db:para>By default, it is the same as the <db:link xlink:href="qml-qtquick-wheelhandler.xml#parent-prop">parent</db:link>, the Item within which the handler is declared. However, it can sometimes be useful to set the target to a different Item, in order to handle events within one item but manipulate another; or to <db:code>null</db:code>, to disable the default behavior and do something else instead.</db:para>
</db:section>
<db:section xml:id="targetScaleMultiplier-prop">
<db:title>targetScaleMultiplier : real</db:title>
<db:para>The amount by which the <db:link xlink:href="qt-add-ui.xml#target">target</db:link> <db:link xlink:href="qquickitem.xml#scale-prop">scale</db:link> is to be multiplied whenever the <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> changes by 15 degrees. This is relevant only when <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> is <db:code>&quot;scale&quot;</db:code>.</db:para>
<db:para>The <db:code>scale</db:code> will be multiplied by <db:code>targetScaleMultiplier</db:code> <db:superscript>angleDelta * <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotationScale-prop">rotationScale</db:link> / 15</db:superscript>. The default is <db:code>2</db:code> <db:superscript>1/3</db:superscript>, which means that if <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotationScale-prop">rotationScale</db:link> is left at its default value, and the mouse wheel is rotated by one &quot;click&quot; (15 degrees), the <db:link xlink:href="qt-add-ui.xml#target">target</db:link> will be scaled by approximately 1.25; after three &quot;clicks&quot; its size will be doubled or halved, depending on the direction that the wheel is rotated. If you want to make it double or halve with every 2 clicks of the wheel, set this to <db:code>2</db:code> <db:superscript>1/2</db:superscript> (1.4142). If you want to make it scale the opposite way as the wheel is rotated, set <db:code>rotationScale</db:code> to a negative value.</db:para>
</db:section>
<db:section xml:id="targetTransformAroundCursor-prop">
<db:title>targetTransformAroundCursor : bool</db:title>
<db:para>Whether the <db:link xlink:href="qt-add-ui.xml#target">target</db:link> should automatically be repositioned in such a way that it is transformed around the mouse cursor position while the <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> is adjusted. The default is <db:code>true</db:code>.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> is set to <db:code>&quot;rotation&quot;</db:code> and targetTransformAroundCursor is <db:code>true</db:code>, then as the wheel is rotated, the <db:link xlink:href="qt-add-ui.xml#target">target</db:link> item will rotate in place around the mouse cursor position. If <db:code>targetTransformAroundCursor</db:code> is <db:code>false</db:code>, it will rotate around its <db:link xlink:href="qquickitem.xml#transformOrigin-prop">transformOrigin</db:link> instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="wheel-signal">
<db:title>wheel(WheelEvent <db:emphasis>event</db:emphasis>)</db:title>
<db:para>This signal is emitted every time this handler receives an <db:code role="parameter">event</db:code> of type <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link>: that is, every time the wheel is moved or the scrolling gesture is updated.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onWheel</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
