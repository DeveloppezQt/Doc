<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WheelHandler QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Handler for the mouse wheel.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>SinglePointHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>WheelHandler is part of <db:simplelist><db:member>qtquick-input-handlers</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> is a handler that is used to interactively manipulate some numeric property of an Item as the user rotates the mouse wheel. Like other Input Handlers, by default it manipulates its <db:link xlink:href="qml-qtquick-wheelhandler.xml#target-prop">target</db:link>. Declare <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> to control which target property will be manipulated:</db:para>
<db:programlisting language="qml">import QtQuick 2.14

Rectangle {
    width: 170; height: 120
    color: &quot;green&quot;; antialiasing: true

    WheelHandler {
        property: &quot;rotation&quot;
        onWheel: (event)=&amp;gt; console.log(&quot;rotation&quot;, event.angleDelta.y,
                                       &quot;scaled&quot;, rotation, &quot;@&quot;, point.position,
                                       &quot;=&amp;gt;&quot;, parent.rotation)
    }
}
</db:programlisting>
<db:para><db:link xlink:href="qml-qt-labs-animation-boundaryrule.xml">BoundaryRule</db:link> is quite useful in combination with <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> (as well as with other Input Handlers) to declare the allowed range of values that the target property can have. For example it is possible to implement scrolling using a combination of <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> and <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> to manipulate the scrollable Item's <db:link xlink:href="qquickitem.xml#y-prop">y</db:link> property when the user rotates the wheel or drags the item on a touchscreen, and <db:link xlink:href="qml-qt-labs-animation-boundaryrule.xml">BoundaryRule</db:link> to limit the range of motion from the top to the bottom:</db:para>
<db:programlisting language="qml">import QtQuick 2.14
import Qt.labs.animation 1.0

Item {
    width: 320; height: 480
    Flow {
        id: content
        width: parent.width
        spacing: 2; padding: 2

        WheelHandler {
            orientation: Qt.Vertical
            property: &quot;y&quot;
            rotationScale: 15
            acceptedDevices: PointerDevice.Mouse | PointerDevice.TouchPad
            onActiveChanged: if (!active) ybr.returnToBounds()
        }

        DragHandler {
            xAxis.enabled: false
            onActiveChanged: if (!active) ybr.returnToBounds()
        }

        BoundaryRule on y {
            id: ybr
            minimum: content.parent.height - content.height
            maximum: 0
            minimumOvershoot: 400; maximumOvershoot: 400
            overshootFilter: BoundaryRule.Peak
        }

        Repeater {
            model: 1000
            Rectangle { color: &quot;gray&quot;; width: 10 + Math.random() * 100; height: 15 }
        }
    }
}
</db:programlisting>
<db:para>Alternatively, if <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> is not set or <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> is null, <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> will not automatically manipulate anything; but the <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> property can be used in a binding to manipulate another property, or you can implement <db:code>onWheel</db:code> and handle the wheel event directly.</db:para>
<db:para><db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> handles only a rotating mouse wheel by default; this can be changed by setting <db:link xlink:href="qml-qtquick-wheelhandler.xml#acceptedDevices-prop">acceptedDevices</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptedButtons-prop">
<db:title>acceptedButtons : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedButtons</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The mouse buttons which can activate this Pointer Handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qml-qtquick-mouseevent.xml#button-prop">Qt.LeftButton</db:link>. It can be set to an OR combination of mouse buttons, and will ignore events from other buttons.</db:para>
<db:para>For example, a control could be made to respond to left and right clicks in different ways, with two handlers:</db:para>
<db:programlisting language="qml">Item {
    TapHandler {
        onTapped: console.log(&quot;left clicked&quot;)
    }
    TapHandler {
        acceptedButtons: Qt.RightButton
        onTapped: console.log(&quot;right clicked&quot;)
    }
}
</db:programlisting>
<db:note>
<db:para>Tapping on a touchscreen or tapping the stylus on a graphics tablet emulates clicking the left mouse button. This behavior can be altered via <db:link xlink:href="qml-qtquick-wheelhandler.xml#acceptedDevices-prop">acceptedDevices</db:link> or <db:link xlink:href="qml-qtquick-wheelhandler.xml#acceptedPointerTypes-prop">acceptedPointerTypes</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="acceptedDevices-prop">
<db:title>acceptedDevices : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedDevices</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The types of pointing devices that can activate this handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qinputdevice.xml#DeviceType-enum">PointerDevice.Mouse</db:link>, so as to react only to events events from an actual mouse wheel.</db:para>
<db:para><db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> can be made to respond to both mouse wheel and touchpad scrolling by setting acceptedDevices to <db:code>PointerDevice.Mouse | PointerDevice.TouchPad</db:code>.</db:para>
<db:note>
<db:para>Some non-mouse hardware (such as a touch-sensitive Wacom tablet, or a Linux laptop touchpad) generates real wheel events from gestures. <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> will respond to those events as wheel events even if <db:code>acceptedDevices</db:code> remains set to its default value.</db:para>
</db:note>
</db:section>
<db:section xml:id="acceptedModifiers-prop">
<db:title>acceptedModifiers : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedModifiers</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is set, it will require the given keyboard modifiers to be pressed in order to react to pointer events, and otherwise ignore them.</db:para>
<db:para>If this property is set to <db:code>Qt.KeyboardModifierMask</db:code> (the default value), then the <db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> ignores the modifier keys.</db:para>
<db:para>For example, an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> could have two handlers of the same type, one of which is enabled only if the required keyboard modifiers are pressed:</db:para>
<db:programlisting language="qml">Item {
   TapHandler {
       acceptedModifiers: Qt.ControlModifier
       onTapped: console.log(&quot;control-tapped&quot;)
   }
   TapHandler {
       acceptedModifiers: Qt.NoModifier
       onTapped: console.log(&quot;tapped&quot;)
   }
}
</db:programlisting>
<db:para>If you set <db:code>acceptedModifiers</db:code> to an OR combination of modifier keys, it means <db:emphasis>all</db:emphasis> of those modifiers must be pressed to activate the handler:</db:para>
<db:programlisting language="qml">Item {
   TapHandler {
       acceptedModifiers: Qt.ControlModifier | Qt.AltModifier | Qt.ShiftModifier
       onTapped: console.log(&quot;control-alt-shift-tapped&quot;)
   }
}
</db:programlisting>
<db:para>The available modifiers are as follows:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>NoModifier</db:para>
</db:td>
<db:td>
<db:para>No modifier key is allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShiftModifier</db:para>
</db:td>
<db:td>
<db:para>A Shift key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ControlModifier</db:para>
</db:td>
<db:td>
<db:para>A Ctrl key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>AltModifier</db:para>
</db:td>
<db:td>
<db:para>An Alt key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MetaModifier</db:para>
</db:td>
<db:td>
<db:para>A Meta key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeypadModifier</db:para>
</db:td>
<db:td>
<db:para>A keypad button must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>GroupSwitchModifier</db:para>
</db:td>
<db:td>
<db:para>X11 only (unless activated on Windows by a command line argument). A Mode_switch key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeyboardModifierMask</db:para>
</db:td>
<db:td>
<db:para>The handler does not care which modifiers are pressed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If you need even more complex behavior than can be achieved with combinations of multiple handlers with multiple modifier flags, you can check the modifiers in JavaScript code:</db:para>
<db:programlisting language="qml">Item {
    TapHandler {
        onTapped:
            switch (point.modifiers) {
            case Qt.ControlModifier | Qt.AltModifier:
                console.log(&quot;CTRL+ALT&quot;);
                break;
            case Qt.ControlModifier | Qt.AltModifier | Qt.MetaModifier:
                console.log(&quot;CTRL+META+ALT&quot;);
                break;
            default:
                console.log(&quot;other modifiers&quot;, point.modifiers);
                break;
            }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::KeyboardModifier</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="acceptedPointerTypes-prop">
<db:title>acceptedPointerTypes : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedPointerTypes</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The types of pointing instruments (finger, stylus, eraser, etc.) that can activate this Pointer Handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qpointingdevice.xml#PointerType-enum">PointerDevice.AllPointerTypes</db:link>. If you set it to an OR combination of device types, it will ignore events from non-matching events.</db:para>
<db:para>For example, a control could be made to respond to mouse, touch, and stylus clicks in some way, but delete itself if tapped with an eraser tool on a graphics tablet, with two handlers:</db:para>
<db:programlisting language="qml">Rectangle {
   id: rect
   TapHandler {
       acceptedPointerTypes: PointerDevice.GenericPointer | PointerDevice.Finger | PointerDevice.Pen
       onTapped: console.log(&quot;clicked&quot;)
   }
   TapHandler {
       acceptedPointerTypes: PointerDevice.Eraser
       onTapped: rect.destroy()
   }
}
</db:programlisting>
</db:section>
<db:section xml:id="active-prop">
<db:title>[read-only] active : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds true whenever this Input Handler has taken sole responsibility for handing one or more EventPoints, by successfully taking an exclusive grab of those points. This means that it is keeping its properties up-to-date according to the movements of those Event Points and actively manipulating its <db:link xlink:href="qml-qtquick-wheelhandler.xml#target-prop">target</db:link> (if any).</db:para>
</db:section>
<db:section xml:id="activeTimeout-prop">
<db:title>activeTimeout : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>activeTimeout</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The amount of time in seconds after which the <db:link xlink:href="stylesheet-reference.xml#active">active</db:link> property will revert to <db:code>false</db:code> if no more wheel events are received. The default is <db:code>0.1</db:code> (100 ms).</db:para>
<db:para>When <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> handles events that contain <db:link xlink:href="qt.xml#ScrollPhase-enum">scroll phase</db:link> information, such as events from some touchpads, the <db:link xlink:href="stylesheet-reference.xml#active">active</db:link> property will become <db:code>false</db:code> as soon as an event with phase <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollEnd</db:link> is received; in that case the timeout is not necessary. But a conventional mouse with a wheel does not provide a scroll phase: the mouse cannot detect when the user has decided to stop scrolling, so the <db:link xlink:href="stylesheet-reference.xml#active">active</db:link> property transitions to <db:code>false</db:code> after this much time has elapsed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#phase">QWheelEvent::phase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blocking-prop">
<db:title>[since 6.3] blocking : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>blocking</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether this handler prevents other items or handlers behind it from handling the same wheel event. This property is <db:code>true</db:code> by default.</db:para>
<db:para>This property was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="cursorShape-prop">
<db:title>[since 5.15] cursorShape : Qt::CursorShape</db:title>
<db:fieldsynopsis>
<db:type>Qt::CursorShape</db:type>
<db:varname>cursorShape</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the cursor shape that will appear whenever the mouse is hovering over the <db:link xlink:href="qml-qtquick-wheelhandler.xml#parent-prop">parent</db:link> item while <db:link xlink:href="qml-qtquick-wheelhandler.xml#active-prop">active</db:link> is <db:code>true</db:code>.</db:para>
<db:para>The available cursor shapes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.UpArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.CrossCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WaitCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.IBeamCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeVerCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeHorCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeBDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeFDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeAllCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BlankCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitVCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitHCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.PointingHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ForbiddenCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WhatsThisCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BusyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.OpenHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ClosedHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragCopyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragMoveCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragLinkCursor</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default value is not set, which allows the <db:link xlink:href="qquickitem.xml#cursor">cursor</db:link> of <db:link xlink:href="qml-qtquick-wheelhandler.xml#parent-prop">parent</db:link> item to appear. This property can be reset to the same initial condition by setting it to undefined.</db:para>
<db:note>
<db:para>When this property has not been set, or has been set to <db:code>undefined</db:code>, if you read the value it will return <db:code>Qt.ArrowCursor</db:code>.</db:para>
</db:note>
<db:para>This property was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link></db:member>
<db:member><db:link xlink:href="qquickitem.xml#cursor">QQuickItem::cursor</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-hoverhandler.xml#cursorShape-prop">HoverHandler::cursorShape</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragThreshold-prop">
<db:title>[since 5.15] dragThreshold : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>dragThreshold</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The distance in pixels that the user must drag an event point in order to have it treated as a drag gesture.</db:para>
<db:para>The default value depends on the platform and screen resolution. It can be reset back to the default value by setting it to undefined. The behavior when a drag gesture begins varies in different handlers.</db:para>
<db:para>This property was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If a <db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> is disabled, it will reject all events and no signals will be emitted.</db:para>
</db:section>
<db:section xml:id="grabPermissions-prop">
<db:title>grabPermissions : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>grabPermissions</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies the permissions when this handler's logic decides to take over the exclusive grab, or when it is asked to approve grab takeover or cancellation by another handler.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PointerHandler.TakeOverForbidden</db:para>
</db:td>
<db:td>
<db:para>This handler neither takes from nor gives grab permission to any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from another handler of the same class.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any kind of handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromItems</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any type of Item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromAnything</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for another handler of the same class to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of handler to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByItems</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of Item to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesCancellation</db:para>
</db:td>
<db:td>
<db:para>This handler will allow its grab to be set to null.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByAnything</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any any type of Item or Handler to take the grab.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default is <db:code>PointerHandler.CanTakeOverFromItems | PointerHandler.CanTakeOverFromHandlersOfDifferentType | PointerHandler.ApprovesTakeOverByAnything</db:code> which allows most takeover scenarios but avoids e.g. two PinchHandlers fighting over the same touchpoints.</db:para>
</db:section>
<db:section xml:id="invertible-prop">
<db:title>invertible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>invertible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether or not to reverse the direction of property change if QQuickPointerScrollEvent::inverted is true. The default is <db:code>true</db:code>.</db:para>
<db:para>If the operating system has a &quot;natural scrolling&quot; setting that causes scrolling to be in the same direction as the finger movement, then if this property is set to <db:code>true</db:code>, and <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> is directly setting a property on <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link>, the direction of movement will correspond to the system setting. If this property is set to <db:code>false</db:code>, it will invert the <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> so that the direction of motion is always the same as the direction of finger movement.</db:para>
</db:section>
<db:section xml:id="margin-prop">
<db:title>margin : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>margin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The margin beyond the bounds of the <db:link xlink:href="qml-qtquick-wheelhandler.xml#parent-prop">parent</db:link> item within which an event point can activate this handler. For example, on a <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> where the <db:link xlink:href="qml-qtquick-wheelhandler.xml#target-prop">target</db:link> is also the <db:code>parent</db:code>, it's useful to set this to a distance at least half the width of a typical user's finger, so that if the <db:code>parent</db:code> has been scaled down to a very small size, the pinch gesture is still possible. Or, if a <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link>-based button is placed near the screen edge, it can be used to comply with Fitts's Law: react to mouse clicks at the screen edge even though the button is visually spaced away from the edge by a few pixels.</db:para>
<db:para>The default value is 0.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerHandlerMargin.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>orientation : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>orientation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Which wheel to react to. The default is <db:code>Qt.Vertical</db:code>.</db:para>
<db:para>Not every mouse has a <db:code>Horizontal</db:code> wheel; sometimes it is emulated by tilting the wheel sideways. A touchpad can usually generate both vertical and horizontal wheel events.</db:para>
</db:section>
<db:section xml:id="parent-prop">
<db:title>parent : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>parent</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> which is the scope of the handler; the Item in which it was declared. The handler will handle events on behalf of this Item, which means a pointer event is relevant if at least one of its event points occurs within the Item's interior. Initially <db:link xlink:href="qml-qtquick-wheelhandler.xml#target-prop">target()</db:link> is the same, but it can be reassigned.</db:para>
<db:note>
<db:para>When a handler is declared in a <db:link xlink:href="qtquickcontrols-chattutorial-example.xml#model">QtQuick3D.Model</db:link> object, the parent is not an Item, therefore this property is <db:code>null</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-wheelhandler.xml#target-prop">target</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#parent">QObject::parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="point-prop">
<db:title>[read-only] point : handlerPoint</db:title>
<db:fieldsynopsis>
<db:type>handlerPoint</db:type>
<db:varname>point</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The event point currently being handled. When no point is currently being handled, this object is reset to default values (all coordinates are 0).</db:para>
</db:section>
<db:section xml:id="property-prop">
<db:title>property : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>property</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The property to be modified on the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> when the mouse wheel is rotated.</db:para>
<db:para>The default is no property (empty string). When no target property is being automatically modified, you can use bindings to react to mouse wheel rotation in arbitrary ways.</db:para>
<db:para>You can use the mouse wheel to adjust any numeric property. For example if <db:code>property</db:code> is set to <db:code>x</db:code>, the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> will move horizontally as the wheel is rotated. The following properties have special behavior:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>scale</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qquickitem.xml#scale-prop">scale</db:link> will be modified in a non-linear fashion as described under <db:link xlink:href="qml-qtquick-wheelhandler.xml#targetScaleMultiplier-prop">targetScaleMultiplier</db:link>. If <db:link xlink:href="qml-qtquick-wheelhandler.xml#targetTransformAroundCursor-prop">targetTransformAroundCursor</db:link> is <db:code>true</db:code>, the <db:link xlink:href="qquickitem.xml#x-prop">x</db:link> and <db:link xlink:href="qquickitem.xml#y-prop">y</db:link> properties will be simultaneously adjusted so that the user will effectively zoom into or out of the point under the mouse cursor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>rotation</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qquickitem.xml#rotation-prop">rotation</db:link> will be set to <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link>. If <db:link xlink:href="qml-qtquick-wheelhandler.xml#targetTransformAroundCursor-prop">targetTransformAroundCursor</db:link> is <db:code>true</db:code>, the l{<db:link xlink:href="qquickitem.xml#x-prop">QQuickItem::x</db:link>}{x} and <db:link xlink:href="qquickitem.xml#y-prop">y</db:link> properties will be simultaneously adjusted so that the user will effectively rotate the item around the point under the mouse cursor.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The adjustment of the given target property is always scaled by <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotationScale-prop">rotationScale</db:link>.</db:para>
</db:section>
<db:section xml:id="rotation-prop">
<db:title>rotation : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>rotation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The angle through which the mouse wheel has been rotated since the last time this property was set, in wheel degrees.</db:para>
<db:para>A positive value indicates that the wheel was rotated up/right; a negative value indicates that the wheel was rotated down/left.</db:para>
<db:para>A basic mouse click-wheel works in steps of 15 degrees.</db:para>
<db:para>The default is <db:code>0</db:code> at startup. It can be programmatically set to any value at any time. The value will be adjusted from there as the user rotates the mouse wheel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-wheelhandler.xml#orientation-prop">orientation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotationScale-prop">
<db:title>rotationScale : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>rotationScale</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The scaling to be applied to the <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> property, and to the <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> on the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> item, if any. The default is 1, such that <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> will be in units of degrees of rotation. It can be set to a negative number to invert the effect of the direction of mouse wheel rotation.</db:para>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>target</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The Item which this handler will manipulate.</db:para>
<db:para>By default, it is the same as the <db:link xlink:href="qml-qtquick-wheelhandler.xml#parent-prop">parent</db:link>, the Item within which the handler is declared. However, it can sometimes be useful to set the target to a different Item, in order to handle events within one item but manipulate another; or to <db:code>null</db:code>, to disable the default behavior and do something else instead.</db:para>
</db:section>
<db:section xml:id="targetScaleMultiplier-prop">
<db:title>targetScaleMultiplier : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>targetScaleMultiplier</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The amount by which the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> <db:link xlink:href="qquickitem.xml#scale-prop">scale</db:link> is to be multiplied whenever the <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotation-prop">rotation</db:link> changes by 15 degrees. This is relevant only when <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> is <db:code>&quot;scale&quot;</db:code>.</db:para>
<db:para>The <db:code>scale</db:code> will be multiplied by <db:code>targetScaleMultiplier</db:code> <db:superscript>angleDelta * <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotationScale-prop">rotationScale</db:link> / 15</db:superscript>. The default is <db:code>2</db:code> <db:superscript>1/3</db:superscript>, which means that if <db:link xlink:href="qml-qtquick-wheelhandler.xml#rotationScale-prop">rotationScale</db:link> is left at its default value, and the mouse wheel is rotated by one &quot;click&quot; (15 degrees), the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> will be scaled by approximately 1.25; after three &quot;clicks&quot; its size will be doubled or halved, depending on the direction that the wheel is rotated. If you want to make it double or halve with every 2 clicks of the wheel, set this to <db:code>2</db:code> <db:superscript>1/2</db:superscript> (1.4142). If you want to make it scale the opposite way as the wheel is rotated, set <db:code>rotationScale</db:code> to a negative value.</db:para>
</db:section>
<db:section xml:id="targetTransformAroundCursor-prop">
<db:title>targetTransformAroundCursor : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>targetTransformAroundCursor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> should automatically be repositioned in such a way that it is transformed around the mouse cursor position while the <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> is adjusted. The default is <db:code>true</db:code>.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-wheelhandler.xml#property-prop">property</db:link> is set to <db:code>&quot;rotation&quot;</db:code> and targetTransformAroundCursor is <db:code>true</db:code>, then as the wheel is rotated, the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> item will rotate in place around the mouse cursor position. If <db:code>targetTransformAroundCursor</db:code> is <db:code>false</db:code>, it will rotate around its <db:link xlink:href="qquickitem.xml#transformOrigin-prop">transformOrigin</db:link> instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="canceled-signal">
<db:title>canceled(EventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>If this handler has already grabbed the given <db:code role="parameter">point</db:code>, this signal is emitted when the grab is stolen by a different Pointer Handler or Item.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCanceled</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="grabChanged-signal">
<db:title>grabChanged(GrabTransition <db:emphasis>transition</db:emphasis>, EventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>This signal is emitted when the grab has changed in some way which is relevant to this handler.</db:para>
<db:para>The <db:code role="parameter">transition</db:code> (verb) tells what happened. The <db:code role="parameter">point</db:code> (object) is the point that was grabbed or ungrabbed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onGrabChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="wheel-signal">
<db:title>wheel(WheelEvent <db:emphasis>event</db:emphasis>)</db:title>
<db:para>This signal is emitted every time this handler receives an <db:code role="parameter">event</db:code> of type <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link>: that is, every time the wheel is moved or the scrolling gesture is updated.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onWheel</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
