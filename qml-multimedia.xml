<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Multimedia QML API</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML API for the Qt Multimedia module.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The Qt Multimedia module gives developers a simplified way to use audio and video playback, and access camera functionality. The Multimedia QML API provides a QML friendly interface to these features.</db:para>
</db:section>
<db:section xml:id="types">
<db:title>Types</db:title>
<db:section xml:id="audio">
<db:title>Audio</db:title>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml">Audio</db:link> is an easy way to add audio playback to a Qt Quick scene. Qt Multimedia provides properties for control, methods (functions) and signals.</db:para>
<db:para>The code extract below shows the creation and use of an Audio instance.</db:para>
<db:programlisting language="qml">Item {
    width: 640
    height: 360

    Audio {
        id: playMusic
        source: &quot;music.wav&quot;
    }

    MouseArea {
        id: playArea
        anchors.fill: parent
        onPressed:  { playMusic.play() }
    }
}

</db:programlisting>
<db:para>The snippet above shows how the inclusion of <db:emphasis>playMusic</db:emphasis> enables audio features on the type that contains it. So that when the parent's <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is clicked the <db:link xlink:href="qml-qtmultimedia-audio.xml#play-method">play</db:link>() method of Audio is run. Other typical audio control methods are available such as <db:link xlink:href="qml-qtmultimedia-audio.xml#pause-method">pause</db:link>() and <db:link xlink:href="qml-qtmultimedia-audio.xml#stop-method">stop</db:link>().</db:para>
<db:para>Much of the getting / setting of <db:link xlink:href="qml-qtmultimedia-audio.xml">Audio</db:link> parameters is done through properties. These include</db:para>
<db:informaltable style="generic" width="70%">
<db:thead>
<db:tr>
<db:th>
<db:para>Property</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#source-prop">source</db:link></db:para>
</db:td>
<db:td>
<db:para>The source URL of the media.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#autoLoad-prop">autoLoad</db:link></db:para>
</db:td>
<db:td>
<db:para>Indicates if loading of media should begin immediately.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#playing-signal">playing</db:link></db:para>
</db:td>
<db:td>
<db:para>Indicates that the media is playing.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#paused-signal">paused</db:link></db:para>
</db:td>
<db:td>
<db:para>The media is paused.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#status-prop">status</db:link></db:para>
</db:td>
<db:td>
<db:para>The status of media loading.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#duration-prop">duration</db:link></db:para>
</db:td>
<db:td>
<db:para>Amount of time in milliseconds the media will play.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#position-prop">position</db:link></db:para>
</db:td>
<db:td>
<db:para>Current position in the media in milliseconds of play.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#volume-prop">volume</db:link></db:para>
</db:td>
<db:td>
<db:para>Audio output volume: from 0.0 (silent) to 1.0 (maximum)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#muted-prop">muted</db:link></db:para>
</db:td>
<db:td>
<db:para>Indicates audio is muted.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#bufferProgress-prop">bufferProgress</db:link></db:para>
</db:td>
<db:td>
<db:para>Indicates how full the data buffer is: 0.0 (empty) to 1.0 (full).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#seekable-prop">seekable</db:link></db:para>
</db:td>
<db:td>
<db:para>Indicates whether the audio position can be changed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#playbackRate-prop">playbackRate</db:link></db:para>
</db:td>
<db:td>
<db:para>The rate at which audio is played at as a multiple of the normal rate.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#error-signal">error</db:link></db:para>
</db:td>
<db:td>
<db:para>An error code for the error state including NoError</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#errorString-prop">errorString</db:link></db:para>
</db:td>
<db:td>
<db:para>A description of the current error condition.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The set of signals available allow the developer to create custom behavior when the following events occur,</db:para>
<db:informaltable style="generic" width="70%">
<db:thead>
<db:tr>
<db:th>
<db:para>Signal</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#playing-signal">playing</db:link></db:para>
</db:td>
<db:td>
<db:para>Called when playback is started, or when resumed from paused state.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#paused-signal">paused</db:link></db:para>
</db:td>
<db:td>
<db:para>Called when playback is paused.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#stopped-signal">stopped</db:link></db:para>
</db:td>
<db:td>
<db:para>Called when playback is stopped.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-audio.xml#error-signal">error</db:link></db:para>
</db:td>
<db:td>
<db:para>Called when the specified error occurs.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="camera">
<db:title>Camera</db:title>
<db:para><db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> enables still image and video capture using QML. It has a number of properties that help setting it up.</db:para>
<db:para>The details of using a <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> are described in further depth in the <db:link xlink:href="cameraoverview.xml">Camera Overview</db:link> and in the corresponding reference documentation.</db:para>
</db:section>
<db:section xml:id="video">
<db:title>Video</db:title>
<db:para>Adding video playback, with sound, to a Qt Quick scene is also easy. The process is very similar to that of Audio above, in fact <db:link xlink:href="qml-qtmultimedia-video.xml">Video</db:link> shares many of the property names, methods and signals. Here is the equivalent sample code to implement video playback in a scene</db:para>
<db:programlisting language="qml">Video {
    id: video
    width : 800
    height : 600
    source: &quot;video.avi&quot;

    MouseArea {
        anchors.fill: parent
        onClicked: {
            video.play()
        }
    }

    focus: true
    Keys.onSpacePressed: video.paused = !video.paused
    Keys.onLeftPressed: video.position -= 5000
    Keys.onRightPressed: video.position += 5000
}

</db:programlisting>
<db:para>There are similar features like <db:link xlink:href="qml-qtmultimedia-video.xml#play-method">play</db:link>() with new features specific to video.</db:para>
<db:para>In the above sample when the parent of <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is clicked, an area of 800x600 pixels with an id of 'video', the source &quot;video.avi&quot; will play in that area. Notice also that signals for the <db:link xlink:href="qml-qtquick-keys.xml">Keys</db:link> have been defined so that a spacebar will toggle the pause button; the left arrow will move the current position in the video to 5 seconds previously; and the right arrow will advance the current position in the video by 5 seconds.</db:para>
<db:para>Most of the differences will obviously be about video control and information. There are many properties associated with <db:link xlink:href="qml-qtmultimedia-video.xml">Video</db:link>, most of them deal with meta-data, control of the video media and aspects of presentation.</db:para>
</db:section>
<db:section xml:id="soundeffect">
<db:title>SoundEffect</db:title>
<db:para><db:link xlink:href="qml-qtmultimedia-soundeffect.xml">SoundEffect</db:link> provides a way to play short sound effects, like in video games. Multiple sound effect instances can be played simultaneously. You should use <db:link xlink:href="qml-qtmultimedia-audio.xml">Audio</db:link> for music playback.</db:para>
<db:programlisting language="qml">Item {
    width: 640
    height: 360

    SoundEffect {
        id: effect
        source: &quot;test.wav&quot;
    }
    MouseArea {
        id: playArea
        anchors.fill: parent
        onPressed:  { effect.play() }
    }
}

</db:programlisting>
<db:para>In the above sample the sound effect will be played when the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is clicked.</db:para>
<db:para>For a complete description of this type, see <db:link xlink:href="qml-qtmultimedia-soundeffect.xml">SoundEffect</db:link></db:para>
</db:section>
</db:section>
<db:section xml:id="multimedia-qml-types">
<db:title>Multimedia QML Types</db:title>
<db:variablelist role="multimedia_qml">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-audio.xml" xlink:role="">Audio</db:link></db:term>
<db:listitem>
<db:para>Add audio playback to a scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-camera.xml" xlink:role="">Camera</db:link></db:term>
<db:listitem>
<db:para>Access viewfinder frames, and take photos and movies.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-cameracapture.xml" xlink:role="">CameraCapture</db:link></db:term>
<db:listitem>
<db:para>An interface for capturing camera images</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-cameraexposure.xml" xlink:role="">CameraExposure</db:link></db:term>
<db:listitem>
<db:para>An interface for exposure related camera settings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-cameraflash.xml" xlink:role="">CameraFlash</db:link></db:term>
<db:listitem>
<db:para>An interface for flash related camera settings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-camerafocus.xml" xlink:role="">CameraFocus</db:link></db:term>
<db:listitem>
<db:para>An interface for focus related camera settings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-cameraimageprocessing.xml" xlink:role="">CameraImageProcessing</db:link></db:term>
<db:listitem>
<db:para>An interface for camera capture related settings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-camerarecorder.xml" xlink:role="">CameraRecorder</db:link></db:term>
<db:listitem>
<db:para>Controls video recording with the Camera.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml" xlink:role="">MediaPlayer</db:link></db:term>
<db:listitem>
<db:para>Add media playback to a scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-playlist.xml" xlink:role="">Playlist</db:link></db:term>
<db:listitem>
<db:para>For specifying a list of media to be played.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-playlistitem.xml" xlink:role="">PlaylistItem</db:link></db:term>
<db:listitem>
<db:para>Defines an item in a Playlist.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-qtmultimedia.xml" xlink:role="">QtMultimedia</db:link></db:term>
<db:listitem>
<db:para>Provides a global object with useful functions from Qt Multimedia.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-radio.xml" xlink:role="">Radio</db:link></db:term>
<db:listitem>
<db:para>Access radio functionality from a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-radiodata.xml" xlink:role="">RadioData</db:link></db:term>
<db:listitem>
<db:para>Access RDS data from a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-soundeffect.xml" xlink:role="">SoundEffect</db:link></db:term>
<db:listitem>
<db:para>The SoundEffect type provides a way to play sound effects in QML.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-torch.xml" xlink:role="">Torch</db:link></db:term>
<db:listitem>
<db:para>Simple control over torch functionality</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-video.xml" xlink:role="">Video</db:link></db:term>
<db:listitem>
<db:para>A convenience type for showing a specified video.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-videooutput.xml" xlink:role="">VideoOutput</db:link></db:term>
<db:listitem>
<db:para>Render video or camera viewfinder.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
