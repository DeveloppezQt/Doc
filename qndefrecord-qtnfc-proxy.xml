<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNdefRecord</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt NFC Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD">
<db:title>Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD(<db:emphasis>className</db:emphasis>, <db:emphasis>typeNameFormat</db:emphasis>, <db:emphasis>type</db:emphasis>)</db:title>
<db:para>This macro declares a template specialization for the QNdefRecord::isRecordType() function.</db:para>
<db:para>This macro should be used in the header file directly after the definition of a specialized NDEF record class.</db:para>
<db:para><db:code role="parameter">className</db:code> is the name of the specialized class, <db:code role="parameter">typeNameFormat</db:code> is the appropriate QNdefRecord::TypeNameFormat for the custom type and <db:code role="parameter">type</db:code> is the type without the NID or NSS prefixes. That is <db:emphasis>example.com:f</db:emphasis> not <db:emphasis>urn:nfc:ext:example.com:f</db:emphasis>.</db:para>
<db:para>See the secton on <db:link xlink:href="">Creating specialized NDEF record classes</db:link> for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord-qtnfc-proxy.xml#Q_DECLARE_NDEF_RECORD">Q_DECLARE_NDEF_RECORD</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_NDEF_RECORD">
<db:title>Q_DECLARE_NDEF_RECORD(<db:emphasis>className</db:emphasis>, <db:emphasis>typeNameFormat</db:emphasis>, <db:emphasis>type</db:emphasis>, <db:emphasis>initialPayload</db:emphasis>)</db:title>
<db:para>This macro declares default and copy constructors for specialized NDEF record classes.</db:para>
<db:para><db:code role="parameter">className</db:code> is the name of the specialized class, <db:code role="parameter">typeNameFormat</db:code> is the appropriate QNdefRecord::TypeNameFormat for the custom type and <db:code role="parameter">type</db:code> is the type without the NID or NSS prefixes. That is <db:emphasis>example.com:f</db:emphasis> not <db:emphasis>urn:nfc:ext:example.com:f</db:emphasis>. <db:code role="parameter">initialPayload</db:code> is the initial payload of an empty record, it must be a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> or a type that can be implicitly converted into a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>See the section on <db:link xlink:href="">Creating specialized NDEF record classes</db:link> for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord-qtnfc-proxy.xml#Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD">Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
