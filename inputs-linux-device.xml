<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Inputs on an Embedded Linux Device</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides information about working with inputs on an Embedded Linux device in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>On your Embedded Linux device, when there's no windowing system present, the mouse, keyboard, and touch input are read directly via evdev or using helper libraries such as libinput or tslib. However, this behavior requires that device nodes /dev/input/event* are readable by the user. eglfs and linuxfb have all the input handling code compiled-in.</db:para>
<db:section xml:id="use-libinput">
<db:title>Use libinput</db:title>
<db:para><db:link xlink:href="https://www.freedesktop.org/wiki/Software/libinput">libinput</db:link> is a library to handle input devices that offers an alternative to the Qt's own evdev input support. To enable using libinput, when you configure and build Qt, make sure that the development files for libudev and libinput are available. If you require keyboard support, then xkbcommon is also necessary. With eglfs and linuxfb, no further actions are necessary as these plugins use libinput by default. If libinput support is not available or the QT_QPA_EGLFS_NO_LIBINPUT environment variable is set, then Qt's own evdev handlers are used instead.</db:para>
</db:section>
<db:section xml:id="input-on-eglfs-and-linuxfb-without-libinput">
<db:title>Input on eglfs and linuxfb without libinput</db:title>
<db:para>Parameters like the device node name can be set in the QT_QPA_EVDEV_MOUSE_PARAMETERS, QT_QPA_EVDEV_KEYBOARD_PARAMETERS and QT_QPA_EVDEV_TOUCHSCREEN_PARAMETERS environment variables; separate your entries with colons. These parameters are an alternative to passing the settings in the -plugin command-line argument, and with some backends they are essential. But eglfs and linuxfb use built-in input handlers so there's no separate -plugin argument in use.</db:para>
<db:para>Additionally, the built-in input handlers can be disabled by setting QT_QPA_EGLFS_DISABLE_INPUT (for eglfs) or QT_QPA_FB_DISABLE_INPUT (for linuxfb) to 1.</db:para>
</db:section>
<db:section xml:id="mouse">
<db:title>Mouse</db:title>
<db:para>The mouse cursor shows up whenever QT_QPA_EGLFS_HIDECURSOR (for eglfs) or QT_QPA_FB_HIDECURSOR (for linuxfb) isn't set and Qt's libudev-based device discovery reports that at least one mouse is available. When libudev support is not present, the mouse cursor is always displayed; unless it's explicitly disabled via the environment variable.</db:para>
<db:para>If Qt was configured with libudev support, connecting or disconnecting an input device while the application is running (hot plugging) is supported. Then libudev development headers are present in the sysroot at configure time.</db:para>
<db:para>The evdev mouse handler supports the following extra parameters:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Parameter</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>/dev/input/...</db:para>
</db:td>
<db:td>
<db:para>Specifies the name of the input device. If unspecified, Qt looks for a suitable device either via libudev or by traversing the available nodes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>nocompress</db:para>
</db:td>
<db:td>
<db:para>By default, input events that don't lead to changing the position compared to the last Qt mouse event are compressed. A new Qt mouse event is sent only after a change in the position or button state. To disable this behavior, set the nocompress parameter.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dejitter</db:para>
</db:td>
<db:td>
<db:para>Specifies a jitter limit; disabled by default.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>grab</db:para>
</db:td>
<db:td>
<db:para>When set to 1, Qt grabs the device for exclusive use.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>abs</db:para>
</db:td>
<db:td>
<db:para>Some touchscreens report absolute coordinates and can't be differentiated from touch pads. In this case, pass abs to indicate that the device is using absolute events.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="keyboard">
<db:title>Keyboard</db:title>
<db:para>The evdev keyboard handler supports the following extra parameters:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Parameter</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>/dev/input/...</db:para>
</db:td>
<db:td>
<db:para>Specifies the name of the input device. If unspecified, Qt looks for a suitable device either via libudev or by traversing the available nodes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>grab</db:para>
</db:td>
<db:td>
<db:para>Enables grabbing the input device.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>keymap</db:para>
</db:td>
<db:td>
<db:para>Specifies the name of a custom keyboard map file.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>enable-compose</db:para>
</db:td>
<db:td>
<db:para>Enables compositing.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>repeat-delay</db:para>
</db:td>
<db:td>
<db:para>Sets a custom key repeat delay.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>repeat-rate</db:para>
</db:td>
<db:td>
<db:para>Sets a custom key repeat rate.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>On Embedded Linux systems that don't have their terminal sessions disabled, the behavior on a key press can be confusing, as the input event is processed by the Qt application and the tty. To overcome this, the following options are available:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>On application startup, EGLFS and LinuxFB attempt to disable the terminal keyboard by setting the tty's keyboard mode to K_OFF. This prevents keystrokes from being sent to the terminal. If the standard behavior is required, set the QT_QPA_ENABLE_TERMINAL_KEYBOARD environment variable to 1. Note that this works only when the application is launched from a remote console, via ssh for example, and the terminal keyboard input remains enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para>An alternative approach is to use the evdev keyboard handler's grab parameter by passing grab=1 in QT_QPA_EVDEV_KEYBOARD_PARAMETERS. This results in trying to get a grab on the input device. If the grab is successful, no other components in the system receive events from it, as long as the Qt application is running. This approach is more suitable for applications that start remotely as it doesn't need access to the tty device.</db:para>
</db:listitem>
<db:listitem>
<db:para>Finally, for many specialized Embedded Linux images it doesn't make sense to have the standard terminal sessions enabled in the first place. For more details on how to disable these terminal sessions, refer to your build environment's Documentation. For example, when generating images using the <db:link xlink:href="https://www.yoctoproject.org">Yocto Project</db:link>, unsetting SYSVINIT_ENABLED_GETTYS results in having no getty process running. This means, there's no input on any of the virtual terminals.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the default built-in keymap is not sufficient, you can specify a different one via the keymap parameter.</db:para>
<db:note>
<db:para>Special system key combinations, such as console switching (<db:guilabel>Ctrl+Alt+Fx</db:guilabel>) or zap (<db:guilabel>Ctrl+Alt+Backspace</db:guilabel>) are not currently supported and are ignored.</db:para>
</db:note>
<db:para>To generate a custom keymap, use the kmap2qmap utility, that can be found in the qttools module. The source files have to be in standard Linux kmap format, which is understood by the kernel's loadkeys command. qmap files can be generated in one of the following ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="http://lct.sourceforge.net/">Linux Console Tools (LCT)</db:link> project.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://www.x.org/">X.org</db:link> X11 keymaps can be converted to the kmap format with the ckbcomp utility.</db:para>
</db:listitem>
<db:listitem>
<db:para>As kmap files are plain-text files, they can also be hand crafted.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>kmap2qmap is a command line program, that needs at least 2 files as parameters. The last parameter is the generated .qmap file, while all the others are parsed as input .kmap files. For example:</db:para>
<db:programlisting language="cpp" role="bad">kmap2qmap i386/qwertz/de-latin1-nodeadkeys.kmap include/compose.latin1.inc de-latin1-nodeadkeys.qmap
</db:programlisting>
<db:note>
<db:para>kmap2qmap doesn't support all the (pseudo) symbols that the Linux kernel supports. Consequently, when you convert a standard keymap, there'll be a number of warnings regarding Show_Registers, Hex_A, and so on; these messages can be ignored.</db:para>
</db:note>
</db:section>
<db:section xml:id="touch">
<db:title>Touch</db:title>
<db:para>While it's not necessary for modern touchscreens, some older resistance touchscreens that only support single-touch may require that you fall back to using tslib, instead of relying on the Linux multi-touch protocol and the event devices.</db:para>
<db:para>To enable tslib support, set the QT_QPA_EGLFS_TSLIB (for eglfs) or QT_QPA_FB_TSLIB (for linuxfb) environment variable to 1. To change the device, set the TSLIB_TSDEVICE environment variable or pass the device name on the command-line. Note that the tslib input handler generates mouse events and supports single touch only, as opposed to evdevtouch which generates true multi-touch <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> events too.</db:para>
<db:para>The evdev touch handler supports the following extra parameters:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Parameter</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>/dev/input/...</db:para>
</db:td>
<db:td>
<db:para>Specifies the name of the input device. If unspecified, Qt looks for a suitable device either via libudev or by traversing the available nodes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>rotate</db:para>
</db:td>
<db:td>
<db:para>On some touch screens the coordinates must be rotated by setting rotate to 90, 180, or 270.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>invertx and inverty</db:para>
</db:td>
<db:td>
<db:para>Specifies the parameters to invert the X or Y coordinates in the input events.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, if you pass the following values to QT_QPA_EVDEV_TOUCHSCREEN_PARAMETERS before launching applications, you'd have an explicitly specified touch device with the coordinates flipped. This is useful when the orientation of the actual screen and the touch screen don't match.</db:para>
<db:programlisting language="cpp" role="bad">export QT_QPA_EVDEV_TOUCHSCREEN_PARAMETERS=/dev/input/event5:rotate=180
</db:programlisting>
</db:section>
<db:section xml:id="pen-based-tablets">
<db:title>Pen-based Tablets</db:title>
<db:para>The evdevtablet plugin provides basic support for Wacom and similar pen-based tablets. It generates <db:link xlink:href="qtabletevent.xml">QTabletEvent</db:link> events only. To enable it, pass QT_QPA_GENERIC_PLUGINS=evdevtablet in the environment or, alternatively, pass the -plugin evdevtablet argument on the command-line.</db:para>
<db:para>The plugin can take a device node parameter, such as QT_QPA_GENERIC_PLUGINS=evdevtablet:/dev/event1, if Qt's automatic device discovery (based either on libudev or traversing /dev/input/event*) isn't functional or is misbehaving.</db:para>
</db:section>
<db:section xml:id="debug-input-devices">
<db:title>Debug Input Devices</db:title>
<db:para>It's possible to print some information to the debug output by enabling the qt.qpa.input logging rule, for example by setting the QT_LOGGING_RULES environment variable to qt.qpa.input=true. This is useful for detecting which device is being used, or for troubleshooting device discovery issues.</db:para>
</db:section>
<db:section xml:id="use-custom-mouse-cursor-images">
<db:title>Use Custom Mouse Cursor Images</db:title>
<db:para>eglfs comes with its own set of 32x32-sized mouse cursor images. If these are insufficient, you can provide a custom cursor atlas by setting the QT_QPA_EGLFS_CURSOR environment variable to the name of a JSON file. This file can also be embedded into the application via <db:link xlink:href="resources.xml">The Qt Resource System</db:link>.</db:para>
<db:para>For example, an embedded cursor atlas with 8 cursor images per row can be specified as follows:</db:para>
<db:programlisting language="cpp" role="bad">{
  &quot;image&quot;: &quot;:/cursor-atlas.png&quot;,
  &quot;cursorsPerRow&quot;: 8,
  &quot;hotSpots&quot;: [
      [7, 2],
      [12, 3],
      [12, 12],
      ...
  ]
}
</db:programlisting>
<db:para>Note that the images are expected to be tightly packed in the atlas; the width and height of the cursors are determined based on the total image size and the cursorsPerRow setting. Atlases must also provide an image for all of the supported cursors.</db:para>
</db:section>
</db:article>
