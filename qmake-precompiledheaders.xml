<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using Precompiled Headers</db:title>
<db:productname>QMake</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>QMake Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-advanced-usage.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Advanced Usage"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-environment-reference.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Configuring qmake"/></db:extendedlink>
<db:abstract>
<db:para>QMake Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Precompiled headers (PCH) are a performance feature supported by some compilers to compile a stable body of code, and store the compiled state of the code in a binary file. During subsequent compilations, the compiler will load the stored state, and continue compiling the specified file. Each subsequent compilation is faster because the stable code does not need to be recompiled.</db:para>
<db:para>qmake supports the use of precompiled headers on some platforms and build environments, including:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Windows</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>nmake</db:para>
</db:listitem>
<db:listitem>
<db:para>Visual Studio projects (VS 2008 and later)</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>macOS, iOS, tvOS, and watchOS</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Makefile</db:para>
</db:listitem>
<db:listitem>
<db:para>Xcode</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Unix</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>GCC 3.4 and above</db:para>
</db:listitem>
<db:listitem>
<db:para>clang</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="adding-precompiled-headers-to-your-project">
<db:title>Adding Precompiled Headers to Your Project</db:title>
<db:para>The precompiled header must contain code which is <db:emphasis>stable</db:emphasis> and <db:emphasis>static</db:emphasis> throughout your project. A typical precompiled header might look like this:</db:para>
<db:programlisting language="cpp">// Add C includes here

#if defined __cplusplus
// Add C++ includes here
#include &lt;stdlib&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;QApplication&gt; // Qt includes
#include &lt;QPushButton&gt;
#include &lt;QLabel&gt;
#include &quot;thirdparty/include/libmain.h&quot;
#include &quot;my_stable_class.h&quot;
...
#endif
</db:programlisting>
<db:note>
<db:para>A precompiled header file needs to separate C includes from C++ includes, since the precompiled header file for C files may not contain C++ code.</db:para>
</db:note>
<db:section xml:id="project-options">
<db:title>Project Options</db:title>
<db:para>To make your project use precompiled headers, you only need to define the <db:link xlink:href="qmake-variable-reference.xml#precompiled-header">PRECOMPILED_HEADER</db:link> variable in your project file:</db:para>
<db:programlisting language="cpp">PRECOMPILED_HEADER = stable.h
</db:programlisting>
<db:para>qmake will handle the rest, to ensure the creation and use of the precompiled header file. You do not need to include the precompiled header file in <db:code>HEADERS</db:code>, as qmake will do this if the configuration supports precompiled headers.</db:para>
<db:para>The MSVC and g++ specs targeting Windows enable <db:code>precompile_header</db:code> by default.</db:para>
<db:para>Using this option, you may trigger conditional blocks in your project file to add settings when using precompiled headers. For example:</db:para>
<db:programlisting language="cpp">precompile_header:!isEmpty(PRECOMPILED_HEADER) {
DEFINES += USING_PCH
}
</db:programlisting>
<db:para>To use the precompiled header also for C files on MSVC nmake target, add <db:code>precompile_header_c</db:code> to the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable. If the header is used also for C++ and it contains C++ keywords/includes, enclose them with <db:code>#ifdef __cplusplus</db:code>).</db:para>
</db:section>
</db:section>
<db:section xml:id="notes-on-possible-issues">
<db:title>Notes on Possible Issues</db:title>
<db:para>On some platforms, the file name suffix for precompiled header files is the same as that for other object files. For example, the following declarations may cause two different object files with the same name to be generated:</db:para>
<db:programlisting language="cpp">PRECOMPILED_HEADER = window.h
SOURCES            = window.cpp
</db:programlisting>
<db:para>To avoid potential conflicts like these, give distinctive names to header files that will be precompiled.</db:para>
</db:section>
<db:section xml:id="example-project">
<db:title>Example Project</db:title>
<db:para>You can find the following source code in the <db:code>examples/qmake/precompile</db:code> directory in the Qt distribution:</db:para>
<db:section xml:id="mydialog-op-op-ui">
<db:title><db:code>mydialog.ui</db:code></db:title>
<db:para>The following image displays the mydialog.ui file in Qt Creator Design mode. You can view the code in the Edit mode.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmake-precompile-ui.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="stable-op-op-h">
<db:title><db:code>stable.h</db:code></db:title>
<db:programlisting language="cpp">/* Add C includes here */

#if defined __cplusplus
/* Add C++ includes here */

# include &lt;iostream&gt;
# include &lt;QApplication&gt;
# include &lt;QPushButton&gt;
# include &lt;QLabel&gt;
#endif
</db:programlisting>
</db:section>
<db:section xml:id="myobject-op-op-h">
<db:title><db:code>myobject.h</db:code></db:title>
<db:programlisting language="cpp">#include &lt;QObject&gt;

class MyObject : public QObject
{
public:
    MyObject();
    ~MyObject();
};
</db:programlisting>
</db:section>
<db:section xml:id="myobject-op-op-cpp">
<db:title><db:code>myobject.cpp</db:code></db:title>
<db:programlisting language="cpp">#include &lt;iostream&gt;
#include &lt;QDebug&gt;
#include &lt;QObject&gt;
#include &quot;myobject.h&quot;

MyObject::MyObject()
    : QObject()
{
    std::cout &lt;&lt; &quot;MyObject::MyObject()\n&quot;;
}
</db:programlisting>
</db:section>
<db:section xml:id="util-op-op-cpp">
<db:title><db:code>util.cpp</db:code></db:title>
<db:programlisting language="cpp">void util_function_does_nothing()
{
    // Nothing here...
    int x = 0;
    ++x;
}
</db:programlisting>
</db:section>
<db:section xml:id="main-op-op-cpp">
<db:title><db:code>main.cpp</db:code></db:title>
<db:programlisting language="cpp">#include &lt;QApplication&gt;
#include &lt;QPushButton&gt;
#include &lt;QLabel&gt;
#include &quot;myobject.h&quot;
#include &quot;mydialog.h&quot;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    MyObject obj;
    MyDialog dialog;

    dialog.connect(dialog.aButton, SIGNAL(clicked()), SLOT(close()));
    dialog.show();

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="precompile-op-op-pro">
<db:title><db:code>precompile.pro</db:code></db:title>
<db:programlisting language="cpp">TEMPLATE  = app
LANGUAGE  = C++
CONFIG   += cmdline precompile_header

# Use Precompiled headers (PCH)
PRECOMPILED_HEADER  = stable.h

HEADERS   = stable.h \
            mydialog.h \
            myobject.h
SOURCES   = main.cpp \
            mydialog.cpp \
            myobject.cpp \
            util.cpp
FORMS     = mydialog.ui
</db:programlisting>
</db:section>
</db:section>
</db:article>
