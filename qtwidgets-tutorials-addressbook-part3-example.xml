<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Part 3 - Navigating between Entries</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Explains the code that enables navigating the contacts.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The address book is now about half complete. We should add the capability to navigate the contacts, but first we must decide what sort of a data structure we need for containing these contacts.</db:para>
<db:para>In the previous section, we used a <db:link xlink:href="qmap.xml">QMap</db:link> of key-value pairs with the contact's name as the <db:emphasis>key</db:emphasis>, and the contact's address as the <db:emphasis>value</db:emphasis>. This works well for our case. However, in order to navigate and display each entry, a little bit of enhancement is needed.</db:para>
<db:para>We enhance the <db:link xlink:href="qmap.xml">QMap</db:link> by making it replicate a data structure similar to a circularly-linked list, where all elements are connected, including the first element and the last element. The figure below illustrates this data structure.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/addressbook-tutorial-part3-linkedlist.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="defining-the-addressbook-class">
<db:title>Defining the AddressBook Class</db:title>
<db:para>To add navigation functions to the address book, we must add two more slots to the AddressBook class: next() and previous() to the addressbook.h file:</db:para>
<db:programlisting language="cpp">    void next();
    void previous();
</db:programlisting>
<db:para>We also require another two <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> objects, so we declare nextButton and previousButton as private variables:</db:para>
<db:programlisting language="cpp">    QPushButton *nextButton;
    QPushButton *previousButton;
</db:programlisting>
</db:section>
<db:section xml:id="implementing-the-addressbook-class">
<db:title>Implementing the AddressBook Class</db:title>
<db:para>In the AddressBook constructor in addressbook.cpp, we instantiate nextButton and previousButton and disable them by default. This is because navigation is only enabled when there is more than one contact in the address book.</db:para>
<db:programlisting language="cpp">    nextButton = new QPushButton(tr(&quot;&amp;amp;Next&quot;));
    nextButton-&amp;gt;setEnabled(false);
    previousButton = new QPushButton(tr(&quot;&amp;amp;Previous&quot;));
    previousButton-&amp;gt;setEnabled(false);
</db:programlisting>
<db:para>We then connect these push buttons to their respective slots:</db:para>
<db:programlisting language="cpp">    connect(nextButton, SIGNAL(clicked()), this, SLOT(next()));
    connect(previousButton, SIGNAL(clicked()), this, SLOT(previous()));
</db:programlisting>
<db:para>The image below is the expected graphical user interface.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/addressbook-tutorial-part3-screenshot.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We follow basic conventions for next() and previous() functions by placing the nextButton on the right and the previousButton on the left. In order to achieve this intuitive layout, we use <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> to place the widgets side-by-side:</db:para>
<db:programlisting language="cpp">    QHBoxLayout *buttonLayout2 = new QHBoxLayout;
    buttonLayout2-&amp;gt;addWidget(previousButton);
    buttonLayout2-&amp;gt;addWidget(nextButton);
</db:programlisting>
<db:para>The <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> object, buttonLayout2, is then added to mainLayout.</db:para>
<db:programlisting language="cpp">    mainLayout-&amp;gt;addLayout(buttonLayout2, 2, 1);
</db:programlisting>
<db:para>The figure below shows the coordinates of the widgets in mainLayout.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/addressbook-tutorial-part3-labeled-layout.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Within our addContact() function, we have to disable these buttons so that the user does not attempt to navigate while adding a contact.</db:para>
<db:programlisting language="cpp">    nextButton-&amp;gt;setEnabled(false);
    previousButton-&amp;gt;setEnabled(false);
</db:programlisting>
<db:para>Also, in our submitContact() function, we enable the navigation buttons, nextButton and previousButton, depending on the size of contacts. As mentioned earlier, navigation is only enabled when there is more than one contact in the address book. The following lines of code demonstrates how to do this:</db:para>
<db:programlisting language="cpp">    int number = contacts.size();
    nextButton-&amp;gt;setEnabled(number &amp;gt; 1);
    previousButton-&amp;gt;setEnabled(number &amp;gt; 1);
</db:programlisting>
<db:para>We also include these lines of code in the cancel() function.</db:para>
<db:para>Recall that we intend to emulate a circularly-linked list with our <db:link xlink:href="qmap.xml">QMap</db:link> object, contacts. So, in the next() function, we obtain an iterator for contacts and then:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If the iterator is not at the end of contacts, we increment it by one.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the iterator is at the end of contacts, we move it to the beginning of contacts. This gives us the illusion that our <db:link xlink:href="qmap.xml">QMap</db:link> is working like a circularly-linked list.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">void AddressBook::next()
{
    QString name = nameLine-&amp;gt;text();
    QMap&amp;lt;QString, QString&amp;gt;::iterator i = contacts.find(name);

    if (i != contacts.end())
        i++;

    if (i == contacts.end())
        i = contacts.begin();

    nameLine-&amp;gt;setText(i.key());
    addressText-&amp;gt;setText(i.value());
}
</db:programlisting>
<db:para>Once we have iterated to the correct object in contacts, we display its contents on nameLine and addressText.</db:para>
<db:para>Similarly, for the previous() function, we obtain an iterator for contacts and then:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If the iterator is at the end of contacts, we clear the display and return.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the iterator is at the beginning of contacts, we move it to the end.</db:para>
</db:listitem>
<db:listitem>
<db:para>We then decrement the iterator by one.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">void AddressBook::previous()
{
    QString name = nameLine-&amp;gt;text();
    QMap&amp;lt;QString, QString&amp;gt;::iterator i = contacts.find(name);

    if (i == contacts.end()){
        nameLine-&amp;gt;clear();
        addressText-&amp;gt;clear();
        return;
    }

    if (i == contacts.begin())
        i = contacts.end();

    i--;
    nameLine-&amp;gt;setText(i.key());
    addressText-&amp;gt;setText(i.value());
}
</db:programlisting>
<db:para>Again, we display the contents of the current object in contacts.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="tutorials/addressbook/part3/addressbook.cpp">tutorials/addressbook/part3/addressbook.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/addressbook/part3/addressbook.h">tutorials/addressbook/part3/addressbook.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/addressbook/part3/main.cpp">tutorials/addressbook/part3/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/addressbook/part3/part3.pro">tutorials/addressbook/part3/part3.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
