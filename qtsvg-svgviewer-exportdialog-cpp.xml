<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SVG Viewer Example</db:title>
<db:productname>QtSvg</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt SVG Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt SVG Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;exportdialog.h&quot;

#include &lt;QApplication&gt;
#include &lt;QDesktopWidget&gt;
#include &lt;QDialogButtonBox&gt;
#include &lt;QFileDialog&gt;
#include &lt;QFormLayout&gt;
#include &lt;QHBoxLayout&gt;
#include &lt;QMessageBox&gt;
#include &lt;QLabel&gt;
#include &lt;QLineEdit&gt;
#include &lt;QPushButton&gt;
#include &lt;QSpinBox&gt;
#include &lt;QToolButton&gt;
#include &lt;QVBoxLayout&gt;

#include &lt;QImageWriter&gt;

#include &lt;QDebug&gt;

#include &lt;QDir&gt;
#include &lt;QFileInfo&gt;

enum { exportMinimumSize = 1, exportMaximumSize = 2000 };

ExportDialog::ExportDialog(QWidget *parent)
    : QDialog(parent)
    , m_fileNameLineEdit(new QLineEdit(this))
    , m_widthSpinBox(new QSpinBox(this))
    , m_heightSpinBox(new QSpinBox(this))
    , m_aspectRatio(1)
{
    typedef void (QSpinBox::*QSpinBoxIntSignal)(int);

    setWindowFlags(windowFlags() &amp; ~Qt::WindowContextHelpButtonHint);
    setWindowTitle(tr(&quot;Export&quot;));

    QFormLayout *formLayout = new QFormLayout(this);

    QHBoxLayout *fileLayout = new QHBoxLayout;
    fileLayout-&gt;addWidget(m_fileNameLineEdit);
    m_fileNameLineEdit-&gt;setMinimumWidth(QApplication::desktop()-&gt;availableGeometry(this).width() / 6);
    QPushButton *browseButton = new QPushButton(tr(&quot;Browse...&quot;), this);
    fileLayout-&gt;addWidget(browseButton);
    connect(browseButton, &amp;QAbstractButton::clicked, this, &amp;ExportDialog::browse);
    formLayout-&gt;addRow(tr(&quot;File:&quot;), fileLayout);

    QHBoxLayout *sizeLayout = new QHBoxLayout;
    sizeLayout-&gt;addStretch();
    m_widthSpinBox-&gt;setMinimum(exportMinimumSize);
    m_widthSpinBox-&gt;setMaximum(exportMaximumSize);
    connect(m_widthSpinBox, static_cast&lt;QSpinBoxIntSignal&gt;(&amp;QSpinBox::valueChanged),
            this, &amp;ExportDialog::exportWidthChanged);
    sizeLayout-&gt;addWidget(m_widthSpinBox);
    //: Multiplication, as in 32x32
    sizeLayout-&gt;addWidget(new QLabel(tr(&quot;x&quot;)));
    m_heightSpinBox-&gt;setMinimum(exportMinimumSize);
    m_heightSpinBox-&gt;setMaximum(exportMaximumSize);
    connect(m_heightSpinBox, static_cast&lt;QSpinBoxIntSignal&gt;(&amp;QSpinBox::valueChanged),
            this, &amp;ExportDialog::exportHeightChanged);
    sizeLayout-&gt;addWidget(m_heightSpinBox);
    QToolButton *resetButton = new QToolButton(this);
    resetButton-&gt;setIcon(QIcon(&quot;:/qt-project.org/styles/commonstyle/images/refresh-32.png&quot;));
    sizeLayout-&gt;addWidget(resetButton);
    connect(resetButton, &amp;QAbstractButton::clicked, this, &amp;ExportDialog::resetExportSize);
    formLayout-&gt;addRow(tr(&quot;Size:&quot;), sizeLayout);

    QDialogButtonBox *buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel, this);
    connect(buttonBox, &amp;QDialogButtonBox::accepted, this, &amp;QDialog::accept);
    connect(buttonBox, &amp;QDialogButtonBox::rejected, this, &amp;QDialog::reject);
    formLayout-&gt;addRow(buttonBox);
}

void ExportDialog::accept()
{
    const QString fileName = exportFileName();
    if (fileName.isEmpty()) {
        QMessageBox::warning(this, windowTitle(), tr(&quot;Please enter a file name&quot;));
        return;
    }
    QFileInfo fi(fileName);
    if (fi.exists()) {
        const QString question = tr(&quot;%1 already exists.\nWould you like to overwrite it?&quot;).arg(QDir::toNativeSeparators(fileName));
        if (QMessageBox::question(this, windowTitle(), question, QMessageBox::Yes | QMessageBox::No) !=  QMessageBox::Yes)
            return;
    }
    QDialog::accept();
}

QSize ExportDialog::exportSize() const
{
    return QSize(m_widthSpinBox-&gt;value(), m_heightSpinBox-&gt;value());
}

void ExportDialog::setExportSize(const QSize &amp;size)
{
    m_defaultSize = size;
    QSizeF defaultSizeF(m_defaultSize);
    m_aspectRatio = defaultSizeF.width() / defaultSizeF.height();
    setExportWidthBlocked(size.width());
    setExportHeightBlocked(size.height());
}

void ExportDialog::resetExportSize()
{
    setExportWidthBlocked(m_defaultSize.width());
    setExportHeightBlocked(m_defaultSize.height());
}

void ExportDialog::setExportWidthBlocked(int width)
{
    if (m_widthSpinBox-&gt;value() != width) {
        const bool blockSignals = m_widthSpinBox-&gt;blockSignals(true);
        m_widthSpinBox-&gt;setValue(width);
        m_widthSpinBox-&gt;blockSignals(blockSignals);
    }
}

void ExportDialog::setExportHeightBlocked(int height)
{
    if (m_heightSpinBox-&gt;value() != height) {
        const bool blockSignals = m_heightSpinBox-&gt;blockSignals(true);
        m_heightSpinBox-&gt;setValue(height);
        m_heightSpinBox-&gt;blockSignals(blockSignals);
    }
}

void ExportDialog::exportWidthChanged(int width)
{
    const bool square = m_defaultSize.width() == m_defaultSize.height();
    setExportHeightBlocked(square ? width : qRound(qreal(width) / m_aspectRatio));
}

void ExportDialog::exportHeightChanged(int height)
{
    const bool square = m_defaultSize.width() == m_defaultSize.height();
    setExportWidthBlocked(square ? height : qRound(qreal(height) * m_aspectRatio));
}

QString ExportDialog::exportFileName() const
{
    return QDir::cleanPath(m_fileNameLineEdit-&gt;text().trimmed());
}

void ExportDialog::setExportFileName(const QString &amp;f)
{
    m_fileNameLineEdit-&gt;setText(QDir::toNativeSeparators(f));
}

void ExportDialog::browse()
{
    QFileDialog fileDialog(this);
    fileDialog.setAcceptMode(QFileDialog::AcceptSave);
    const QString fileName = exportFileName();
    if (!fileName.isEmpty())
        fileDialog.setDirectory(QFileInfo(fileName).absolutePath());
    QStringList mimeTypes;
    foreach (const QByteArray &amp;mimeType, QImageWriter::supportedMimeTypes())
        mimeTypes.append(QLatin1String(mimeType));
    fileDialog.setMimeTypeFilters(mimeTypes);
    const int pngIndex = mimeTypes.indexOf(&quot;image/png&quot;);
    if (pngIndex &gt;= 0) {
        fileDialog.selectMimeTypeFilter(mimeTypes.at(pngIndex));
        fileDialog.setDefaultSuffix(&quot;png&quot;);
    }
    if (fileDialog.exec() == QDialog::Accepted)
        setExportFileName(fileDialog.selectedFiles().constFirst());
}

</db:programlisting>
</db:article>
