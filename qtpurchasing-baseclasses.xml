<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Base Classes</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Base classes are used in purchasing demo to enable cross-platform for Android and iOS.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="classes">
<db:title>Classes</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Class</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtpurchasing-baseclasses.xml#inappproduct">InAppProduct</db:link></db:para>
</db:td>
<db:td>
<db:para>A product registered in the store.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtpurchasing-baseclasses.xml#inappstore">InAppStore</db:link></db:para>
</db:td>
<db:td>
<db:para>Main entry point for managing in-app purchases.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtpurchasing-baseclasses.xml#inapptransaction">InAppTransaction</db:link></db:para>
</db:td>
<db:td>
<db:para>Contains information about a transaction in the external app store.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtpurchasing-baseclasses.xml#inapppurchasebackend">InAppPurchaseBackend</db:link></db:para>
</db:td>
<db:td>
<db:para>Communicates with the external store.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="inappproduct">
<db:title>InAppProduct</db:title>
<db:para>InAppProduct encapsulates a product in the external store after it has been registered in InAppStore and confirmed to exist. It has an identifier which matches the identifier of the product in the external store, it has a price which is retrieved from the external store, and it has a product type.</db:para>
<db:para>The product type can be Consumable or Unlockable. Consumable products can be purchased any number of times as long as each transaction is finalized explicitly by the application. Unlockable types can only be purchased once.</db:para>
<db:para>InAppProduct has 5 returnable variables price, title, description identifier and productType. All return a <db:link xlink:href="qstring.xml">QString</db:link> except productType.</db:para>
<db:para>ProductType is an enum type and returns 0 if it is Consumable and 1 if Unlockable.</db:para>
<db:programlisting language="cpp">enum ProductType
{
   Consumable,
   Unlockable
};
</db:programlisting>
<db:para>Check out the derived classes AndroidInAppProduct for Android and IosInAppProduct for iOS.</db:para>
</db:section>
<db:section xml:id="inappstore">
<db:title>InAppStore</db:title>
<db:para>The main entry point for managing in-app purchases. It is the base class for AndroidInAppProduct and IosInAppProduct.</db:para>
<db:para>InAppStore is used for managing in-app purchases in the application in a cross-platform way. Depending on the compiler, InAppStore checks what platform is available using Macros.</db:para>
<db:programlisting language="cpp">void InAppStore::setupBackend()
{
   #ifdef Q_OS_ANDROID
   d-&amp;gt;backend = new AndroidInAppPurchaseBackend;
   #endif

   #ifdef Q_OS_IOS
   d-&amp;gt;backend = new IosInAppPurchaseBackend;
   #endif

   d-&amp;gt;backend-&amp;gt;setStore(this);

   ...
</db:programlisting>
<db:section xml:id="initializing-the-store">
<db:title>Initializing the store</db:title>
<db:para>Upon going to the store page in the demo, InAppStore connects all signals to related slots in setupBackend() function. Then uses the registerProduct() function to register product ID and productType of each product registered in the external store to a <db:link xlink:href="qhash.xml#qhash">QHash</db:link> registeredProducts.</db:para>
<db:para>Registering a product is asynchronous, and will at some point yield productRegistered() signals when its found from external store.</db:para>
<db:programlisting language="cpp">void InAppStore::registerProduct(InAppProduct *product)
{
   d-&amp;gt;registeredProducts[product-&amp;gt;identifier()] = product;
   emit productRegistered(product);
}
</db:programlisting>
</db:section>
<db:section xml:id="completing-a-purchase">
<db:title>Completing a purchase</db:title>
<db:para>Once the items have been successfully registered in the store, The user can purchase them by pressing on of the products on the apps store page. QML will call product.purchase() function in AndroidInAppProduct or IosInAppProduct which will open the external store's purchasing flow.</db:para>
<db:para>When a purchase has been completed regardless of success, the transactionRedy signal will be sent to InAppProductQmlType, to notify QML to start finalize the transaction.</db:para>
</db:section>
<db:section xml:id="restoring-purchases">
<db:title>Restoring purchases</db:title>
<db:para>In the demo unlockable purchases will be saved on the apps storage. By clearing the storage the user will lose the unlockable purchase and it cannot be purchased again, as according to the external store it is already owned.</db:para>
<db:para>You can use the restore purchases button in the apps store page to restore your unlockable purchases. The restore purchases button calls the restorePurchases() function and will check the external store for already owned purchases. It emits the transactionRedy() signal to finalize and restore the purchase.</db:para>
<db:para>InAppStore has no derived classes.</db:para>
</db:section>
</db:section>
<db:section xml:id="inapptransaction">
<db:title>InAppTransaction</db:title>
<db:para>InAppTransaction contains information about a transaction in the external app store and is usually provided as a result of calling InAppProduct::purchase(). When the purchase flow has been completed by the user (confirming the purchase, for instance by entering their password), the InAppStore instance containing the product will emit a InAppStore::transactionReady() signal with data about the transaction.</db:para>
<db:para>The status() function provides information on if the transaction was successful or not. If it was successful, then the application should take appropriate action. When the necessary action has been performed, finalize() should be called. The finalize() function should be called regardless of the status of the transaction.</db:para>
<db:para>Check out the derived classes AndroidInAppTransaction for android and IosInAppTransaction for iOS.</db:para>
</db:section>
<db:section xml:id="inapppurchasebackend">
<db:title>InAppPurchaseBackend</db:title>
<db:para>InAppPurchaseBackend is used to create derived class for AndroidInAppPurchaseBackend and IosInAppPurchaseBackend.</db:para>
</db:section>
</db:article>
