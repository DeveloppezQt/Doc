<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Code Editor Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Code Editor example shows how to create a simple editor that has line numbers and that highlights the current line.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/codeeditor-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>As can be seen from the image, the editor displays the line numbers in an area to the left of the area for editing. The editor will highlight the line containing the cursor.</db:para>
<db:para>We implement the editor in <db:code>CodeEditor</db:code>, which is a widget that inherits <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link>. We keep a separate widget in <db:code>CodeEditor</db:code> (<db:code>LineNumberArea</db:code>) onto which we draw the line numbers.</db:para>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> inherits from <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link>, and editing takes place within its <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>()'s margins. We make room for our line number area by setting the left margin of the viewport to the size we need to draw the line numbers.</db:para>
<db:para>When it comes to editing code, we prefer <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> over <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> because it is optimized for handling plain text. See the <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> class description for details.</db:para>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> lets us add selections in addition to the selection the user can make with the mouse or keyboard. We use this functionality to highlight the current line. More on this later.</db:para>
<db:para>We will now move on to the definitions and implementations of <db:code>CodeEditor</db:code> and <db:code>LineNumberArea</db:code>. Let's start with the <db:code>LineNumberArea</db:code> class.</db:para>
<db:section xml:id="the-linenumberarea-class">
<db:title>The LineNumberArea Class</db:title>
<db:para>We paint the line numbers on this widget, and place it over the <db:code>CodeEditor</db:code>'s <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>()'s left margin area.</db:para>
<db:para>We need to use protected functions in <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> while painting the area. So to keep things simple, we paint the area in the <db:code>CodeEditor</db:code> class. The area also asks the editor to calculate its size hint.</db:para>
<db:para>Note that we could simply paint the line numbers directly on the code editor, and drop the LineNumberArea class. However, the <db:link xlink:href="qwidget.xml">QWidget</db:link> class helps us to <db:link xlink:href="qwidget.xml#scroll">scroll</db:link>() its contents. Also, having a separate widget is the right choice if we wish to extend the editor with breakpoints or other code editor features. The widget would then help in the handling of mouse events.</db:para>
<db:programlisting language="cpp">class LineNumberArea : public QWidget
{
public:
    LineNumberArea(CodeEditor *editor) : QWidget(editor) {
        codeEditor = editor;
    }

    QSize sizeHint() const {
        return QSize(codeEditor-&gt;lineNumberAreaWidth(), 0);
    }

protected:
    void paintEvent(QPaintEvent *event) {
        codeEditor-&gt;lineNumberAreaPaintEvent(event);
    }

private:
    CodeEditor *codeEditor;
};

</db:programlisting>
</db:section>
<db:section xml:id="codeeditor-class-definition">
<db:title>CodeEditor Class Definition</db:title>
<db:para>Here is the code editor's class definition:</db:para>
<db:programlisting language="cpp">class CodeEditor : public QPlainTextEdit
{
    Q_OBJECT

public:
    CodeEditor(QWidget *parent = 0);

    void lineNumberAreaPaintEvent(QPaintEvent *event);
    int lineNumberAreaWidth();

protected:
    void resizeEvent(QResizeEvent *event);

private slots:
    void updateLineNumberAreaWidth(int newBlockCount);
    void highlightCurrentLine();
    void updateLineNumberArea(const QRect &amp;, int);

private:
    QWidget *lineNumberArea;
};

</db:programlisting>
<db:para>In the editor we resize and draw the line numbers on the <db:code>LineNumberArea</db:code>. We need to do this when the number of lines in the editor changes, and when the editor's viewport() is scrolled. Of course, it is also done when the editor's size changes. We do this in <db:code>updateLineNumberWidth()</db:code> and <db:code>updateLineNumberArea()</db:code>.</db:para>
<db:para>Whenever, the cursor's position changes, we highlight the current line in <db:code>highlightCurrentLine()</db:code>.</db:para>
</db:section>
<db:section xml:id="codeeditor-class-implementation">
<db:title>CodeEditor Class Implementation</db:title>
<db:para>We will now go through the code editors implementation, starting off with the constructor.</db:para>
<db:programlisting language="cpp">CodeEditor::CodeEditor(QWidget *parent) : QPlainTextEdit(parent)
{
    lineNumberArea = new LineNumberArea(this);

    connect(this, SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth(int)));
    connect(this, SIGNAL(updateRequest(QRect,int)), this, SLOT(updateLineNumberArea(QRect,int)));
    connect(this, SIGNAL(cursorPositionChanged()), this, SLOT(highlightCurrentLine()));

    updateLineNumberAreaWidth(0);
    highlightCurrentLine();
}

</db:programlisting>
<db:para>In the constructor we connect our slots to signals in <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link>. It is necessary to calculate the line number area width and highlight the first line when the editor is created.</db:para>
<db:programlisting language="cpp">int CodeEditor::lineNumberAreaWidth()
{
    int digits = 1;
    int max = qMax(1, blockCount());
    while (max &gt;= 10) {
        max /= 10;
        ++digits;
    }

    int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;

    return space;
}

</db:programlisting>
<db:para>The <db:code>lineNumberAreaWidth()</db:code> function calculates the width of the <db:code>LineNumberArea</db:code> widget. We take the number of digits in the last line of the editor and multiply that with the maximum width of a digit.</db:para>
<db:programlisting language="cpp">void CodeEditor::updateLineNumberAreaWidth(int /* newBlockCount */)
{
    setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);
}

</db:programlisting>
<db:para>When we update the width of the line number area, we simply call <db:link xlink:href="qabstractscrollarea.xml#setViewportMargins">QAbstractScrollArea::setViewportMargins</db:link>().</db:para>
<db:programlisting language="cpp">void CodeEditor::updateLineNumberArea(const QRect &amp;rect, int dy)
{
    if (dy)
        lineNumberArea-&gt;scroll(0, dy);
    else
        lineNumberArea-&gt;update(0, rect.y(), lineNumberArea-&gt;width(), rect.height());

    if (rect.contains(viewport()-&gt;rect()))
        updateLineNumberAreaWidth(0);
}

</db:programlisting>
<db:para>This slot is invoked when the editors viewport has been scrolled. The <db:link xlink:href="qrect.xml">QRect</db:link> given as argument is the part of the editing area that is do be updated (redrawn). <db:code>dy</db:code> holds the number of pixels the view has been scrolled vertically.</db:para>
<db:programlisting language="cpp">void CodeEditor::resizeEvent(QResizeEvent *e)
{
    QPlainTextEdit::resizeEvent(e);

    QRect cr = contentsRect();
    lineNumberArea-&gt;setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));
}

</db:programlisting>
<db:para>When the size of the editor changes, we also need to resize the line number area.</db:para>
<db:programlisting language="cpp">void CodeEditor::highlightCurrentLine()
{
    QList&lt;QTextEdit::ExtraSelection&gt; extraSelections;

    if (!isReadOnly()) {
        QTextEdit::ExtraSelection selection;

        QColor lineColor = QColor(Qt::yellow).lighter(160);

        selection.format.setBackground(lineColor);
        selection.format.setProperty(QTextFormat::FullWidthSelection, true);
        selection.cursor = textCursor();
        selection.cursor.clearSelection();
        extraSelections.append(selection);
    }

    setExtraSelections(extraSelections);
}

</db:programlisting>
<db:para>When the cursor position changes, we highlight the current line, i.e., the line containing the cursor.</db:para>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> gives the possibility to have more than one selection at the same time. we can set the character format (<db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link>) of these selections. We clear the cursors selection before setting the new new QPlainTextEdit::ExtraSelection, else several lines would get highlighted when the user selects multiple lines with the mouse.</db:para>
<db:para>One sets the selection with a text cursor. When using the FullWidthSelection property, the current cursor text block (line) will be selected. If you want to select just a portion of the text block, the cursor should be moved with <db:link xlink:href="qtextcursor.xml#movePosition">QTextCursor::movePosition</db:link>() from a position set with <db:link xlink:href="qtextcursor.xml#setPosition">setPosition</db:link>().</db:para>
<db:programlisting language="cpp">void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *event)
{
    QPainter painter(lineNumberArea);
    painter.fillRect(event-&gt;rect(), Qt::lightGray);

</db:programlisting>
<db:para>The <db:code>lineNumberAreaPaintEvent()</db:code> is called from <db:code>LineNumberArea</db:code> whenever it receives a paint event. We start off by painting the widget's background.</db:para>
<db:programlisting language="cpp">    QTextBlock block = firstVisibleBlock();
    int blockNumber = block.blockNumber();
    int top = (int) blockBoundingGeometry(block).translated(contentOffset()).top();
    int bottom = top + (int) blockBoundingRect(block).height();
</db:programlisting>
<db:para>We will now loop through all visible lines and paint the line numbers in the extra area for each line. Notice that in a plain text edit each line will consist of one <db:link xlink:href="qtextblock.xml">QTextBlock</db:link>; though, if line wrapping is enabled, a line may span several rows in the text edit's viewport.</db:para>
<db:para>We get the top and bottom y-coordinate of the first text block, and adjust these values by the height of the current text block in each iteration in the loop.</db:para>
<db:programlisting language="cpp">    while (block.isValid() &amp;&amp; top &lt;= event-&gt;rect().bottom()) {
        if (block.isVisible() &amp;&amp; bottom &gt;= event-&gt;rect().top()) {
            QString number = QString::number(blockNumber + 1);
            painter.setPen(Qt::black);
            painter.drawText(0, top, lineNumberArea-&gt;width(), fontMetrics().height(),
                             Qt::AlignRight, number);
        }

        block = block.next();
        top = bottom;
        bottom = top + (int) blockBoundingRect(block).height();
        ++blockNumber;
    }
}
</db:programlisting>
<db:para>Notice that we check if the block is visible in addition to check if it is in the areas viewport - a block can, for example, be hidden by a window placed over the text edit.</db:para>
</db:section>
<db:section xml:id="suggestions-for-extending-the-code-editor">
<db:title>Suggestions for Extending the Code Editor</db:title>
<db:para>No self-respecting code editor is without a syntax highligther; the <db:link xlink:href="qtwidgets-richtext-syntaxhighlighter-example.xml">Syntax Highlighter Example</db:link> shows how to create one.</db:para>
<db:para>In addition to line numbers, you can add more to the extra area, for instance, break points.</db:para>
<db:para><db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> gives the possibility to add user data to each text block with <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockUserData">setCurrentBlockUserData</db:link>(). This can be used to implement parenthesis matching. In the <db:code>highlightCurrentLine()</db:code>, the data of the currentBlock() can be fetched with <db:link xlink:href="qtextblock.xml#userData">QTextBlock::userData</db:link>(). Matching parentheses can be highlighted with an extra selection. The &quot;Matching Parentheses with <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link>&quot; article in Qt Quarterly 31 implements this. You find it here: <db:link xlink:href="http://doc.qt.digia.com/qq/">http://doc.qt.digia.com/qq/</db:link>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widgets/codeeditor/codeeditor.cpp">widgets/codeeditor/codeeditor.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/codeeditor/codeeditor.h">widgets/codeeditor/codeeditor.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/codeeditor/codeeditor.pro">widgets/codeeditor/codeeditor.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/codeeditor/main.cpp">widgets/codeeditor/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
