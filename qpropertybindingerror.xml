<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPropertyBindingError Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPropertyBindingError</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPropertyBindingError is part of <db:simplelist><db:member>tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link> is used by <db:link xlink:href="properties.xml">the property system</db:link> to report errors that occurred when a binding was evaluated. Use <db:link xlink:href="qpropertybindingerror.xml#type">type</db:link>() to query which error occurred, and <db:link xlink:href="qpropertybindingerror.xml#description">description</db:link>() to extract an error message which might contain more details. If there is no error, <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link> has type QPropertyBindingError::NoError and hasError() returns false.</db:para>
<db:programlisting language="cpp">extern QProperty&lt;int&gt; prop;

QPropertyBindingError error = prop.binding().error();
if (error.hasError())
     qDebug() &lt;&lt; error.description();
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Type-enum">
<db:title>enum QPropertyBindingError::Type</db:title>
<db:para>This enum specifies which error occurred.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred while evaluating the binding.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link></db:emphasis>::BindingLoop</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Binding evaluation was stopped because a property depended on its own value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link></db:emphasis>::EvaluationError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Binding evaluation was stopped for any other reason than a binding loop. For example, this value is used in the QML engine when an exception occurs while a binding is evaluated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A generic error type used when neither of the other values is suitable. Calling <db:link xlink:href="qpropertybindingerror.xml#description">description</db:link>() might provide details.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPropertyBindingError">
<db:title>QPropertyBindingError::QPropertyBindingError()</db:title>
<db:para>Default constructs <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link>. hasError() will return false, type will return NoError and <db:link xlink:href="qpropertybindingerror.xml#description">description</db:link>() will return an empty string.</db:para>
</db:section>
<db:section xml:id="QPropertyBindingError-3">
<db:title>QPropertyBindingError::QPropertyBindingError(QPropertyBindingError::Type <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>description</db:emphasis> = QString())</db:title>
<db:para>Constructs a <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link> of type <db:code role="parameter">type</db:code> with <db:code role="parameter">description</db:code> as its description.</db:para>
</db:section>
<db:section xml:id="QPropertyBindingError-2">
<db:title>QPropertyBindingError::QPropertyBindingError(const QPropertyBindingError &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy-constructs <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link> from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QPropertyBindingError-1">
<db:title>QPropertyBindingError::QPropertyBindingError(QPropertyBindingError &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link> from <db:code role="parameter">other</db:code>. <db:code role="parameter">other</db:code> will be left in its default state.</db:para>
</db:section>
<db:section xml:id="dtor.QPropertyBindingError">
<db:title>[noexcept] QPropertyBindingError::~QPropertyBindingError()</db:title>
<db:para>Destroys the <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link>.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>QString QPropertyBindingError::description() const</db:title>
<db:para>Returns a descriptive error message for the <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link> if it has been set.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QPropertyBindingError::Type QPropertyBindingError::type() const</db:title>
<db:para>Returns the type of the <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpropertybindingerror.xml#Type-enum">QPropertyBindingError::Type</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QPropertyBindingError &amp;QPropertyBindingError::operator=(QPropertyBindingError &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link>. <db:code role="parameter">other</db:code> will be left in its default state.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QPropertyBindingError &amp;QPropertyBindingError::operator=(const QPropertyBindingError &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies <db:code role="parameter">other</db:code> to this <db:link xlink:href="qpropertybindingerror.xml">QPropertyBindingError</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
