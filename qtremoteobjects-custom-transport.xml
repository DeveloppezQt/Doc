<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>APIs for Implementing Custom Transport Backends</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Gives an overview of abstract APIs for implementing custom transport backends for Qt Remote Objects.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Remote Objects provides several abstract interfaces for implementing custom transport backends. The concept behind these classes is that there needs to be a host node, which has an address that can be connected to. Then there is a client object, which can be publicly constructed, and can connect to the server. When the server gets a connection request, it creates the server side of the connection, which communicates directly with the client. There are thus three abstractions, one for the server (<db:code>QConnectionAbstractServer</db:code>), one for the client-side of the connection (<db:code>QtROClientIoDevice</db:code>), and the third for the server-side of the connection (<db:code>QtROServerIoDevice</db:code>). The latter two inherit from <db:code>QtROIoDeviceBase</db:code>.</db:para>
<db:section xml:id="api-overview">
<db:title>API Overview</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>QtROIoDeviceBase</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QtROClientIoDevice</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QtROServerIoDevice</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QConnectionAbstractServer</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>After implementing these interfaces, you can register your custom protocol using the <db:link xlink:href="qtroserverfactory.xml#qRegisterRemoteObjectsServer">qRegisterRemoteObjectsServer</db:link>() and <db:link xlink:href="qtroclientfactory.xml#qRegisterRemoteObjectsClient">qRegisterRemoteObjectsClient</db:link>() methods.</db:para>
<db:note>
<db:para>These APIs are provided to give more flexibility for implementing custom communication protocols for Qt Remote Objects. There are no source or binary compatibility guarantees for them, meaning that the API is only guaranteed to work with the Qt version it was developed against. API changes will however only be made in minor releases. (6.1, 6.2, and so on.)</db:para>
</db:note>
</db:section>
</db:article>
