<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Presenting Data in a Table View</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="sql-model.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Using the SQL Model Classes"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="sql-forms.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Creating Data-Aware Forms"/></db:extendedlink>
<db:abstract>
<db:para>Qt SQL Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link>, <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link>, and <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> classes can be used as a data source for Qt's view classes such as <db:link xlink:href="qlistview.xml">QListView</db:link>, <db:link xlink:href="qtableview.xml">QTableView</db:link>, and <db:link xlink:href="qtreeview.xml">QTreeView</db:link>. In practice, <db:link xlink:href="qtableview.xml">QTableView</db:link> is by far the most common choice, because an SQL result set is essentially a two-dimensional data structure.</db:para>
<db:mediaobject>
<db:alt>A table view displaying a QSqlTableModel</db:alt>
<db:imageobject>
<db:imagedata fileref="images/relationaltable.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The following example creates a view based on an SQL data model:</db:para>
<db:programlisting language="cpp">    QTableView *view = new QTableView;
    view-&amp;gt;setModel(model);
    view-&amp;gt;show();
</db:programlisting>
<db:para>If the model is a read-write model (e.g., <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link>), the view lets the user edit the fields. You can disable this by calling</db:para>
<db:programlisting language="cpp">    view-&amp;gt;setEditTriggers(QAbstractItemView::NoEditTriggers);
</db:programlisting>
<db:para>You can use the same model as a data source for multiple views. If the user edits the model through one of the views, the other views will reflect the changes immediately. The <db:link xlink:href="qtsql-tablemodel-example.xml">Table Model</db:link> example shows how it works.</db:para>
<db:para>View classes display a header at the top to label the columns. To change the header texts, call <db:link xlink:href="qabstractitemmodel.xml#setHeaderData">setHeaderData</db:link>() on the model. The header's labels default to the table's field names. For example:</db:para>
<db:programlisting language="cpp">    model-&amp;gt;setHeaderData(0, Qt::Horizontal, QObject::tr(&quot;ID&quot;));
    model-&amp;gt;setHeaderData(1, Qt::Horizontal, QObject::tr(&quot;Name&quot;));
    model-&amp;gt;setHeaderData(2, Qt::Horizontal, QObject::tr(&quot;City&quot;));
    model-&amp;gt;setHeaderData(3, Qt::Horizontal, QObject::tr(&quot;Country&quot;));
</db:programlisting>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link> also has a vertical header on the left with numbers identifying the rows. If you insert rows programmatically using <db:link xlink:href="qsqltablemodel.xml#insertRows">QSqlTableModel::insertRows</db:link>(), the new rows will be marked with an asterisk (*) until they are submitted using <db:link xlink:href="qsqltablemodel.xml#submitAll">submitAll</db:link>() or automatically when the user moves to another record (assuming the <db:link xlink:href="qsqltablemodel.xml#EditStrategy-enum">edit strategy</db:link> is <db:link xlink:href="qsqltablemodel.xml#EditStrategy-enum">QSqlTableModel::OnRowChange</db:link>).</db:para>
<db:mediaobject>
<db:alt>Inserting a row in a model</db:alt>
<db:imageobject>
<db:imagedata fileref="images/insertrowinmodelview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Likewise, if you remove rows using <db:link xlink:href="qsqltablemodel.xml#removeRows">removeRows</db:link>(), the rows will be marked with an exclamation mark (!) until the change is submitted.</db:para>
<db:para>The items in the view are rendered using a delegate. The default delegate, <db:link xlink:href="qitemdelegate.xml">QItemDelegate</db:link>, handles the most common data types (<db:code>int</db:code>, <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qimage.xml">QImage</db:link>, etc.). The delegate is also responsible for providing editor widgets (e.g., a combobox) when the user starts editing an item in the view. You can create your own delegates by subclassing <db:link xlink:href="qabstractitemdelegate.xml">QAbstractItemDelegate</db:link> or <db:link xlink:href="qitemdelegate.xml">QItemDelegate</db:link>. See <db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link> for more information.</db:para>
<db:para><db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> is optimized to operate on a single table at a time. If you need a read-write model that operates on an arbitrary result set, you can subclass <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> and reimplement <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>() to make it read-write. The following two functions make fields 1 and 2 of a query model editable:</db:para>
<db:programlisting language="cpp">Qt::ItemFlags EditableSqlModel::flags(
        const QModelIndex &amp;amp;index) const
{
    Qt::ItemFlags flags = QSqlQueryModel::flags(index);
    if (index.column() == 1 || index.column() == 2)
        flags |= Qt::ItemIsEditable;
    return flags;
}

bool EditableSqlModel::setData(const QModelIndex &amp;amp;index, const QVariant &amp;amp;value, int /* role */)
{
    if (index.column() &amp;lt; 1 || index.column() &amp;gt; 2)
        return false;

    QModelIndex primaryKeyIndex = QSqlQueryModel::index(index.row(), 0);
    int id = data(primaryKeyIndex).toInt();

    clear();

    bool ok;
    if (index.column() == 1) {
        ok = setFirstName(id, value.toString());
    } else {
        ok = setLastName(id, value.toString());
    }
    refresh();
    return ok;
}
</db:programlisting>
<db:para>The setFirstName() helper function is defined as follows:</db:para>
<db:programlisting language="cpp">bool EditableSqlModel::setFirstName(int personId, const QString &amp;amp;firstName)
{
    QSqlQuery query;
    query.prepare(&quot;update person set firstname = ? where id = ?&quot;);
    query.addBindValue(firstName);
    query.addBindValue(personId);
    return query.exec();
}
</db:programlisting>
<db:para>The setLastName() function is similar. See the <db:link xlink:href="qtsql-querymodel-example.xml">Query Model</db:link> example for the complete source code.</db:para>
<db:para>Subclassing a model makes it possible to customize it in many ways: You can provide tooltips for the items, change the background color, provide calculated values, provide different values for viewing and editing, handle null values specially, and more. See <db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link> as well as the <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> reference documentation for details.</db:para>
<db:para>If all you need is to resolve a foreign key to a more human-friendly string, you can use <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link>. For best results, you should also use <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link>, a delegate that provides combobox editors for editing foreign keys.</db:para>
<db:mediaobject>
<db:alt>Editing a foreign key in a relational table</db:alt>
<db:imageobject>
<db:imagedata fileref="images/relationaltable.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qtsql-relationaltablemodel-example.xml">Relational Table Model</db:link> example illustrates how to use <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> in conjunction with <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link> to provide tables with foreign key support.</db:para>
</db:article>
