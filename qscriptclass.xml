<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScriptClass Class</db:title>
<db:productname>QtScript</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>QtScript Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> class provides an interface for defining custom behavior of (a class of) Qt Script objects.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScriptClass</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += script</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScriptClass is part of <db:simplelist><db:member><db:link xlink:href="script.xml">Scripting Classes and Overviews</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> class defines an interface for handling various aspects of interaction with the Qt Script objects associated with the class. Such objects are created by calling <db:link xlink:href="qscriptengine.xml#newObject">QScriptEngine::newObject</db:link>(), passing a pointer to the <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> as argument.</db:para>
<db:para>By subclassing <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link>, you can define precisely how access to properties of the objects that use your class is handled. This enables a fully dynamic handling of properties, e.g. it's more powerful than <db:link xlink:href="qscriptengine.xml#newQObject">QScriptEngine::newQObject</db:link>(). For example, you can use <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> to implement array-type objects (i.e. objects that handle the <db:code>length</db:code> property, and properties whose names are valid array indexes, in a special way), or to implement a &quot;live&quot; (runtime-defined) proxy to an underlying object.</db:para>
<db:para>If you just need to handle access to a set of properties that are known at the time an object is created (i.e. &quot;semi-statically&quot;), you might consider using <db:link xlink:href="qscriptvalue.xml#setProperty">QScriptValue::setProperty</db:link>() to define getter/setter functions for the relevant properties, rather than subclassing <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link>.</db:para>
<db:para>Reimplement <db:link xlink:href="qscriptclass.xml#queryProperty">queryProperty</db:link>() to specify which properties are handled in a custom way by your script class (i.e. should be <db:emphasis role="bold">delegated</db:emphasis> to the <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link>), and which properties should be handled just like normal Qt Script object properties.</db:para>
<db:para>Reimplement <db:link xlink:href="qscriptclass.xml#property">property</db:link>() and <db:link xlink:href="qscriptclass.xml#setProperty">setProperty</db:link>() to perform the actual access (read or write) to the properties that your class handles. Additionally, you can reimplement <db:link xlink:href="qscriptclass.xml#propertyFlags">propertyFlags</db:link>() to specify custom flags for your properties.</db:para>
<db:para>Reimplement <db:link xlink:href="qscriptclass.xml#newIterator">newIterator</db:link>() to provide an iterator for objects of your custom class. This is only necessary if objects of your class can have custom properties that you want to be reported when an object is used together with the <db:link xlink:href="qscriptvalueiterator.xml">QScriptValueIterator</db:link> class, or when an object is used in a for-in enumeration statement in a script.</db:para>
<db:para>When implementing custom classes of objects, you typically use <db:link xlink:href="qscriptvalue.xml#setData">QScriptValue::setData</db:link>() to store instance-specific data as part of object initialization; the data won't be accessible from scripts directly, but you can access it in e.g. your reimplementations of <db:link xlink:href="qscriptclass.xml#property">property</db:link>() and <db:link xlink:href="qscriptclass.xml#setProperty">setProperty</db:link>() (by calling <db:link xlink:href="qscriptvalue.xml#data">QScriptValue::data</db:link>()) to perform custom processing.</db:para>
<db:para>Reimplement <db:link xlink:href="qscriptclass.xml#prototype">prototype</db:link>() to provide a custom prototype object for your script class.</db:para>
<db:para>Reimplement <db:link xlink:href="qscriptclass.xml#supportsExtension">supportsExtension</db:link>() and <db:link xlink:href="qscriptclass.xml#extension">extension</db:link>() if your custom script class supports one or more of the extensions specified by the Extension enum.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptclasspropertyiterator.xml">QScriptClassPropertyIterator</db:link></db:member>
<db:member><db:link xlink:href="qscriptengine.xml#newObject">QScriptEngine::newObject</db:link>()</db:member>
<db:member><db:link xlink:href="qtscript-index.xml#defining-custom-script-classes-with-qscriptclass">Defining Custom Script Classes with QScriptClass</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Extension-enum">
<db:title>enum QScriptClass::Extension</db:title>
<db:para>This enum specifies the possible extensions to a <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptclass.xml">QScriptClass</db:link></db:emphasis>::Callable</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Instances of this class can be called as functions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptclass.xml">QScriptClass</db:link></db:emphasis>::HasInstance</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Instances of this class implement [[HasInstance]].</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptclass.xml#extension">extension</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QueryFlag-enum">
<db:title>enum QScriptClass::QueryFlag</db:title>
<db:bridgehead renderas="sect2">flags QScriptClass::QueryFlags</db:bridgehead>
<db:para>This enum describes flags that are used to query a <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> regarding how access to a property should be handled.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptclass.xml">QScriptClass</db:link></db:emphasis>::HandlesReadAccess</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> handles read access to this property.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptclass.xml">QScriptClass</db:link></db:emphasis>::HandlesWriteAccess</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> handles write access to this property.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>QueryFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;QueryFlag&gt;. </db:code>It stores an OR combination of <db:code>QueryFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptclass.xml#queryProperty">queryProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScriptClass">
<db:title>QScriptClass::QScriptClass(QScriptEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> object to be used in the given <db:code role="parameter">engine</db:code>.</db:para>
<db:para>The engine does not take ownership of the <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> object.</db:para>
</db:section>
<db:section xml:id="dtor.QScriptClass">
<db:title>[virtual noexcept] QScriptClass::~QScriptClass()</db:title>
<db:para>Destroys the <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> object.</db:para>
<db:para>If a <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> object is deleted before the associated <db:link xlink:href="qscriptclass.xml#engine">engine</db:link>(), any Qt Script objects using the <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> will be &quot;demoted&quot; to normal Qt Script objects.</db:para>
</db:section>
<db:section xml:id="engine">
<db:title>QScriptEngine *QScriptClass::engine() const</db:title>
<db:para>Returns the engine that this <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> is associated with.</db:para>
</db:section>
<db:section xml:id="extension">
<db:title>[virtual] QVariant QScriptClass::extension(QScriptClass::Extension <db:emphasis>extension</db:emphasis>, const QVariant &amp;<db:emphasis>argument</db:emphasis> = QVariant())</db:title>
<db:para>This virtual function can be reimplemented in a <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> subclass to provide support for extensions. The optional <db:code role="parameter">argument</db:code> can be provided as input to the <db:code role="parameter">extension</db:code>; the result must be returned in the form of a <db:link xlink:href="qvariant.xml">QVariant</db:link>. You can call <db:link xlink:href="qscriptclass.xml#supportsExtension">supportsExtension</db:link>() to check if an extension is supported by the <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link>. By default, no extensions are supported, and this function returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>If you implement the Callable extension, Qt Script will call this function when an instance of your class is called as a function (e.g. from a script or using <db:link xlink:href="qscriptvalue.xml#call">QScriptValue::call</db:link>()). The <db:code role="parameter">argument</db:code> will contain a pointer to the <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> that represents the function call, and you should return a <db:link xlink:href="qvariant.xml">QVariant</db:link> that holds the result of the function call. In the following example the sum of the arguments to the script function are added up and returned:</db:para>
<db:programlisting language="cpp">if (extension == Callable) {
    QScriptContext *context = qvariant_cast&lt;QScriptContext*&gt;(argument);
    QScriptEngine *engine = context-&gt;engine();
    double sum = 0;
    for (int i = 0; i &lt; context-&gt;argumentCount(); ++i)
        sum += context-&gt;argument(i).toNumber();
    return sum;
}
</db:programlisting>
<db:para>If you implement the <db:link xlink:href="qscriptclass.xml#Extension-enum">HasInstance</db:link> extension, Qt Script will call this function as part of evaluating the <db:code>instanceof</db:code> operator, as described in ECMA-262 Section 11.8.6. The <db:code role="parameter">argument</db:code> is a QScriptValueList containing two items: The first item is the object that <db:link xlink:href="qscriptclass.xml#Extension-enum">HasInstance</db:link> is being applied to (an instance of your class), and the second item can be any value. extension() should return true if the value delegates behavior to the object, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptclass.xml#supportsExtension">supportsExtension</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>[virtual] QString QScriptClass::name() const</db:title>
<db:para>Returns the name of the script class.</db:para>
<db:para>Qt Script uses this name to generate a default string representation of objects in case you do not provide a toString function.</db:para>
<db:para>The default implementation returns a null string.</db:para>
</db:section>
<db:section xml:id="newIterator">
<db:title>[virtual] QScriptClassPropertyIterator *QScriptClass::newIterator(const QScriptValue &amp;<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Returns an iterator for traversing custom properties of the given <db:code role="parameter">object</db:code>.</db:para>
<db:para>The default implementation returns 0, meaning that there are no custom properties to traverse.</db:para>
<db:para>Reimplement this function if objects of your script class can have one or more custom properties (e.g. those reported to be handled by <db:link xlink:href="qscriptclass.xml#queryProperty">queryProperty</db:link>()) that you want to appear when an object's properties are enumerated (e.g. by a for-in statement in a script).</db:para>
<db:para>Qt Script takes ownership of the new iterator object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalueiterator.xml">QScriptValueIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property">
<db:title>[virtual] QScriptValue QScriptClass::property(const QScriptValue &amp;<db:emphasis>object</db:emphasis>, const QScriptString &amp;<db:emphasis>name</db:emphasis>, uint <db:emphasis>id</db:emphasis>)</db:title>
<db:para>Returns the value of the property with the given <db:code role="parameter">name</db:code> of the given <db:code role="parameter">object</db:code>.</db:para>
<db:para>The <db:code role="parameter">id</db:code> argument is only useful if you assigned a value to it in <db:link xlink:href="qscriptclass.xml#queryProperty">queryProperty</db:link>().</db:para>
<db:para>The default implementation does nothing and returns an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptclass.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptclass.xml#propertyFlags">propertyFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyFlags">
<db:title>[virtual] QScriptValue::PropertyFlags QScriptClass::propertyFlags(const QScriptValue &amp;<db:emphasis>object</db:emphasis>, const QScriptString &amp;<db:emphasis>name</db:emphasis>, uint <db:emphasis>id</db:emphasis>)</db:title>
<db:para>Returns the flags of the property with the given <db:code role="parameter">name</db:code> of the given <db:code role="parameter">object</db:code>.</db:para>
<db:para>The <db:code role="parameter">id</db:code> argument is only useful if you assigned a value to it in <db:link xlink:href="qscriptclass.xml#queryProperty">queryProperty</db:link>().</db:para>
<db:para>The default implementation returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptclass.xml#property">property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prototype">
<db:title>[virtual] QScriptValue QScriptClass::prototype() const</db:title>
<db:para>Returns the object to be used as the prototype of new instances of this class (created with <db:link xlink:href="qscriptengine.xml#newObject">QScriptEngine::newObject</db:link>()).</db:para>
<db:para>The default implementation returns an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, meaning that the standard Object prototype will be used. Reimplement this function to provide your own custom prototype.</db:para>
<db:para>Typically you initialize your prototype object in the constructor of your class, then return it in this function.</db:para>
<db:para>See the &quot;Making Use of Prototype-Based Inheritance&quot; section in the Qt Script documentation for more information on how prototypes are used.</db:para>
</db:section>
<db:section xml:id="queryProperty">
<db:title>[virtual] QScriptClass::QueryFlags QScriptClass::queryProperty(const QScriptValue &amp;<db:emphasis>object</db:emphasis>, const QScriptString &amp;<db:emphasis>name</db:emphasis>, QScriptClass::QueryFlags <db:emphasis>flags</db:emphasis>, uint *<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Queries this script class for how access to the property with the given <db:code role="parameter">name</db:code> of the given <db:code role="parameter">object</db:code> should be handled. The given <db:code role="parameter">flags</db:code> specify the aspects of interest. This function should return a subset of <db:code role="parameter">flags</db:code> to indicate which aspects of property access should be further handled by the script class.</db:para>
<db:para>For example, if the <db:code role="parameter">flags</db:code> contain <db:link xlink:href="qscriptclass.xml#QueryFlag-enum">HandlesReadAccess</db:link>, and you would like your class to handle the reading of the property (through the <db:link xlink:href="qscriptclass.xml#property">property</db:link>() function), the returned flags should include <db:link xlink:href="qscriptclass.xml#QueryFlag-enum">HandlesReadAccess</db:link>. If the returned flags do not contain <db:link xlink:href="qscriptclass.xml#QueryFlag-enum">HandlesReadAccess</db:link>, the property will be handled as a normal script object property.</db:para>
<db:para>You can optionally use the <db:code role="parameter">id</db:code> argument to store a value that will subsequently be passed on to functions such as <db:link xlink:href="qscriptclass.xml#property">property</db:link>() and <db:link xlink:href="qscriptclass.xml#setProperty">setProperty</db:link>().</db:para>
<db:para>The default implementation of this function returns 0.</db:para>
<db:para>Note: This function is only called if the given property isn't already a normal property of the object. For example, say you advertise that you want to handle read access to property <db:code>foo</db:code>, but not write access; if <db:code>foo</db:code> is then assigned a value, it will become a normal script object property, and subsequently you will no longer be queried regarding read access to <db:code>foo</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptclass.xml#property">property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty">
<db:title>[virtual] void QScriptClass::setProperty(QScriptValue &amp;<db:emphasis>object</db:emphasis>, const QScriptString &amp;<db:emphasis>name</db:emphasis>, uint <db:emphasis>id</db:emphasis>, const QScriptValue &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the property with the given <db:code role="parameter">name</db:code> of the given <db:code role="parameter">object</db:code> to the given <db:code role="parameter">value</db:code>.</db:para>
<db:para>The <db:code role="parameter">id</db:code> argument is only useful if you assigned a value to it in <db:link xlink:href="qscriptclass.xml#queryProperty">queryProperty</db:link>().</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:para>An invalid <db:code role="parameter">value</db:code> represents a request to remove the property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptclass.xml#property">property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsExtension">
<db:title>[virtual] bool QScriptClass::supportsExtension(QScriptClass::Extension <db:emphasis>extension</db:emphasis>) const</db:title>
<db:para>Returns true if the <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link> supports the given <db:code role="parameter">extension</db:code>; otherwise, false is returned. By default, no extensions are supported.</db:para>
<db:para>Reimplement this function to indicate which extensions your custom class supports.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptclass.xml#extension">extension</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
