<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Time Server Application</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A server which shares a time object with connected clients.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Time Server Application instantiates a <db:code>MinuteTimer</db:code> object and shares it with all connected <db:link xlink:href="qtremoteobjects-clientapp-example.xml">Time Client Applications</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/remoteobjects-server-example.webp"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="defining-remote-objects-using-a-rep-file">
<db:title>Defining Remote Objects using a REP-file</db:title>
<db:para>The REP-file &quot;timemodel.rep&quot; in the parent directory of the example is used to generate the header-files used by both applications. For this application, the generated &quot;rep_timemodel_source.h&quot; file defines <db:code>MinuteTimerSource</db:code>, the the class to subclass for the implementation of <db:code>MinuteTimer</db:code>, and other related classes.</db:para>
</db:section>
<db:section xml:id="the-timemodel-class">
<db:title>The TimeModel Class</db:title>
<db:para>The <db:code>TimeModel</db:code> class in timemodel.h and timemodel.cpp implements the time object to share. It uses a <db:code>QBasicTimer</db:code> to ensure that the time is updated by calling the <db:code>timerEvent</db:code> member function.</db:para>
<db:programlisting language="cpp">void MinuteTimer::timerEvent(QTimerEvent *)
{
    QTime now = QTime::currentTime();
    if (now.second() == 59 &amp;amp;&amp;amp; now.minute() == time.minute() &amp;amp;&amp;amp; now.hour() == time.hour()) {
        // just missed time tick over, force it, wait extra 0.5 seconds
        time = time.addSecs(60);
        timer.start(60500, this);
    } else {
        time = now;
        timer.start(60000-time.second()*1000, this);
    }
    qDebug()&amp;lt;&amp;lt;&quot;Time&quot;&amp;lt;&amp;lt;time;
    setHour(time.hour());
    setMinute(time.minute());
    emit timeChanged();
}
</db:programlisting>
</db:section>
<db:section xml:id="sharing-an-instance-of-timemodel">
<db:title>Sharing an Instance of TimeModel</db:title>
<db:para>Instances of <db:code>QRemoteObjectHost</db:code> and a <db:code>QRemoteObjectRegistryHost</db:code> are created to host an object and having a registry to find it. A <db:code>MinuteTimer</db:code> object is then created and it is shared using the <db:code>enableRemoting</db:code> member function of the <db:code>QRemoteObjectRegistryHost</db:code> object.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);

    #if defined(Q_OS_UNIX) || defined(Q_OS_LINUX) || defined(Q_OS_QNX)
        signal(SIGINT, &amp;amp;unix_handler);
    #elif defined(Q_OS_WIN32)
        SetConsoleCtrlHandler((PHANDLER_ROUTINE)WinHandler, TRUE);
    #endif
    QRemoteObjectHost node(QUrl(QStringLiteral(&quot;local:replica&quot;)),QUrl(QStringLiteral(&quot;local:registry&quot;)));
    QRemoteObjectRegistryHost node2(QUrl(QStringLiteral(&quot;local:registry&quot;)));
    MinuteTimer timer;
    node2.enableRemoting(&amp;amp;timer);

    Q_UNUSED(timer)
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtremoteobjects.git/tree/examples/remoteobjects/remoteobjects_server?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtremoteobjects-clientapp-example.xml">Time Client Application</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
