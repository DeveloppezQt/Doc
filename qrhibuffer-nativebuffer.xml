<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Contains information about the underlying native resources of a buffer.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="objects-var">
<db:title>const void *[3] NativeBuffer::objects</db:title>
<db:para>This variable holds an array with pointers to the native object handles.</db:para>
<db:para>With OpenGL, the native handle is a GLuint value, so the elements in the <db:code>objects</db:code> array are pointers to a GLuint. With Vulkan, the native handle is a VkBuffer, so the elements of the array are pointers to a VkBuffer. With Direct3D 11 and Metal the elements are pointers to a ID3D11Buffer or MTLBuffer pointer, respectively. With Direct3D 12, the elements are pointers to a ID3D12Resource.</db:para>
<db:note>
<db:para>Pay attention to the fact that the elements are always pointers to the native buffer handle type, even if the native type itself is a pointer. (so the elements are <db:code>VkBuffer *</db:code> on Vulkan, even though VkBuffer itself is a pointer on 64-bit architectures).</db:para>
</db:note>
</db:section>
<db:section xml:id="slotCount-var">
<db:title>int NativeBuffer::slotCount</db:title>
<db:para>Specifies the number of valid elements in the objects array.</db:para>
<db:para>The value can be 0, 1, 2, or 3 in practice. 0 indicates that the <db:link xlink:href="qrhibuffer.xml">QRhiBuffer</db:link> is not backed by any native buffer objects. This can happen with QRhiBuffers with the usage <db:link xlink:href="qrhibuffer.xml#UsageFlag-enum">UniformBuffer</db:link> when the underlying API does not support (or the backend chooses not to use) native uniform buffers. 1 is commonly used for Immutable and Static types (but some backends may differ). 2 or 3 is typical when the type is Dynamic (but some backends may differ).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhi.xml#currentFrameSlot">QRhi::currentFrameSlot</db:link>()</db:member>
<db:member><db:link xlink:href="qrhi.xml#ResourceLimit-enum">QRhi::FramesInFlight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
