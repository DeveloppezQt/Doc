<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Advanced Tutorial 1 - Creating the Game Canvas and Blocks</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qml-advtutorial.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="QML Advanced Tutorial"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquick-tutorials-samegame-samegame2-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="QML Advanced Tutorial 2 - Populating the Game Canvas"/></db:extendedlink>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QML Advanced Tutorial</db:para>
<db:section xml:id="creating-the-application-screen">
<db:title>Creating the application screen</db:title>
<db:para>The first step is to create the basic QML items in your application.</db:para>
<db:para>To begin with, we create our Same Game application with a main screen like this:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-adv-tutorial1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This is defined by the main application file, <db:code>samegame.qml</db:code>, which looks like this:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: screen

    width: 490; height: 720

    SystemPalette { id: activePalette }

    Item {
        width: parent.width
        anchors { top: parent.top; bottom: toolBar.top }

        Image {
            id: background
            anchors.fill: parent
            source: &quot;../shared/pics/background.jpg&quot;
            fillMode: Image.PreserveAspectCrop
        }
    }

    Rectangle {
        id: toolBar
        width: parent.width; height: 30
        color: activePalette.window
        anchors.bottom: screen.bottom

        Button {
            anchors { left: parent.left; verticalCenter: parent.verticalCenter }
            text: &quot;New Game&quot;
            onClicked: console.log(&quot;This doesn't do anything yet...&quot;)
        }

        Text {
            id: score
            anchors { right: parent.right; verticalCenter: parent.verticalCenter }
            text: &quot;Score: Who knows?&quot;
        }
    }
}
</db:programlisting>
<db:para>This gives you a basic game window that includes the main canvas for the blocks, a &quot;New Game&quot; button and a score display.</db:para>
<db:para>One item you may not recognize here is the <db:link xlink:href="qml-qtquick-systempalette.xml">SystemPalette</db:link> item. This provides access to the Qt system palette and is used to give the button a more native look-and-feel.</db:para>
<db:para>Notice the anchors for the <db:code>Item</db:code>, <db:code>Button</db:code> and <db:code>Text</db:code> types are set using group (dot) notation for readability.</db:para>
</db:section>
<db:section xml:id="adding-button-and-block-components">
<db:title>Adding <db:code>Button</db:code> and <db:code>Block</db:code> components</db:title>
<db:para>The <db:code>Button</db:code> item in the code above is defined in a separate component file named <db:code>Button.qml</db:code>. To create a functional button, we use the QML types <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> and <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> inside a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>. Here is the <db:code>Button.qml</db:code> code:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: container

    property string text: &quot;Button&quot;

    signal clicked

    width: buttonLabel.width + 20; height: buttonLabel.height + 5
    border { width: 1; color: Qt.darker(activePalette.button) }
    antialiasing: true
    radius: 8

    // color the button with a gradient
    gradient: Gradient {
        GradientStop {
            position: 0.0
            color: {
                if (mouseArea.pressed)
                    return activePalette.dark
                else
                    return activePalette.light
            }
        }
        GradientStop { position: 1.0; color: activePalette.button }
    }

    MouseArea {
        id: mouseArea
        anchors.fill: parent
        onClicked: container.clicked();
    }

    Text {
        id: buttonLabel
        anchors.centerIn: container
        color: activePalette.buttonText
        text: container.text
    }
}
</db:programlisting>
<db:para>This essentially defines a rectangle that contains text and can be clicked. The <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> has an <db:code>onClicked()</db:code> handler that is implemented to emit the <db:code>clicked()</db:code> signal of the <db:code>container</db:code> when the area is clicked.</db:para>
<db:para>In Same Game, the screen is filled with small blocks when the game begins. Each block is just an item that contains an image. The block code is defined in a separate <db:code>Block.qml</db:code> file:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    id: block

    Image {
        id: img
        anchors.fill: parent
        source: &quot;../shared/pics/redStone.png&quot;
    }
}
</db:programlisting>
<db:para>At the moment, the block doesn't do anything; it is just an image. As the tutorial progresses we will animate and give behaviors to the blocks. We have not added any code yet to create the blocks; we will do this in the next chapter.</db:para>
<db:para>We have set the image to be the size of its parent Item using <db:code>anchors.fill: parent</db:code>. This means that when we dynamically create and resize the block items later on in the tutorial, the image will be scaled automatically to the correct size.</db:para>
<db:para>Notice the relative path for the Image type's <db:code>source</db:code> property. This path is relative to the location of the file that contains the <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> type. Alternatively, you could set the Image source to an absolute file path or a URL that contains an image.</db:para>
<db:para>You should be familiar with the code so far. We have just created some basic types to get started. Next, we will populate the game canvas with some blocks.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="tutorials/samegame/samegame1/Block.qml">tutorials/samegame/samegame1/Block.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/samegame/samegame1/Button.qml">tutorials/samegame/samegame1/Button.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/samegame/samegame1/samegame.qml">tutorials/samegame/samegame1/samegame.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/samegame/samegame1/samegame1.qmlproject">tutorials/samegame/samegame1/samegame1.qmlproject</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
