<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt State Machine Overview</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the State Machine framework for constructing and executing state graphs.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The State Machine framework provides classes for creating and executing state graphs. The concepts and notation are based on those from Harel's <db:link xlink:href="http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf">Statecharts: A visual formalism for complex systems</db:link>, which is also the basis of UML state diagrams. The semantics of state machine execution are based on <db:link xlink:href="http://www.w3.org/TR/scxml/">State Chart XML (SCXML)</db:link>.</db:para>
<db:para>Statecharts provide a graphical way of modeling how a system reacts to stimuli. This is done by defining the possible <db:emphasis>states</db:emphasis> that the system can be in, and how the system can move from one state to another (<db:emphasis>transitions</db:emphasis> between states). A key characteristic of event-driven systems (such as Qt applications) is that behavior often depends not only on the last or current event, but also the events that preceded it. With statecharts, this information is easy to express.</db:para>
<db:para>The State Machine framework provides an API and execution model that can be used to effectively embed the elements and semantics of statecharts in Qt applications. The framework integrates tightly with Qt's meta-object system; for example, transitions between states can be triggered by signals, and states can be configured to set properties and invoke methods on {<db:link xlink:href="qobject.xml">QObject</db:link>}s. Qt's event system is used to drive the state machines.</db:para>
<db:para>The state graph in the State Machine framework is hierarchical. States can be nested inside of other states, and the current configuration of the state machine consists of the set of states which are currently active. All the states in a valid configuration of the state machine will have a common ancestor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtstatemachine-cpp-guide.xml">Qt State Machine C++ Guide</db:link></db:member>
<db:member><db:link xlink:href="qmlstatemachine-qml-guide.xml">Qt State Machine QML Guide</db:link></db:member>
<db:member><db:link xlink:href="qtscxml-overview.xml">Qt SCXML Overview</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
