<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSplitter Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsplitter.xml">QSplitter</db:link> class implements a splitter widget.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSplitter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qframe.xml" xlink:role="class">QFrame</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSplitter is part of <db:simplelist><db:member>organizers</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A splitter lets the user control the size of child widgets by dragging the boundary between them. Any number of widgets may be controlled by a single splitter. The typical use of a <db:link xlink:href="qsplitter.xml">QSplitter</db:link> is to create several widgets and add them using <db:link xlink:href="qsplitter.xml#insertWidget">insertWidget</db:link>() or <db:link xlink:href="qsplitter.xml#addWidget">addWidget</db:link>().</db:para>
<db:para>The following example will show a <db:link xlink:href="qlistview.xml">QListView</db:link>, <db:link xlink:href="qtreeview.xml">QTreeView</db:link>, and <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> side by side, with two splitter handles:</db:para>
<db:programlisting language="cpp">    QSplitter *splitter = new QSplitter(parent);
    QListView *listview = new QListView;
    QTreeView *treeview = new QTreeView;
    QTextEdit *textedit = new QTextEdit;
    splitter-&gt;addWidget(listview);
    splitter-&gt;addWidget(treeview);
    splitter-&gt;addWidget(textedit);
</db:programlisting>
<db:para>If a widget is already inside a <db:link xlink:href="qsplitter.xml">QSplitter</db:link> when <db:link xlink:href="qsplitter.xml#insertWidget">insertWidget</db:link>() or <db:link xlink:href="qsplitter.xml#addWidget">addWidget</db:link>() is called, it will move to the new position. This can be used to reorder widgets in the splitter later. You can use <db:link xlink:href="qsplitter.xml#indexOf">indexOf</db:link>(), <db:link xlink:href="qsplitter.xml#widget">widget</db:link>(), and <db:link xlink:href="qsplitter.xml#count">count</db:link>() to get access to the widgets inside the splitter.</db:para>
<db:para>A default <db:link xlink:href="qsplitter.xml">QSplitter</db:link> lays out its children horizontally (side by side); you can use <db:link xlink:href="qsplitter.xml#orientation-prop">setOrientation</db:link>(<db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link>) to lay its children out vertically.</db:para>
<db:para>By default, all widgets can be as large or as small as the user wishes, between the <db:link xlink:href="qsplitter.xml#minimumSizeHint">minimumSizeHint</db:link>() (or <db:link xlink:href="qwidget.xml#minimumSize-prop">minimumSize</db:link>()) and <db:link xlink:href="qwidget.xml#maximumSize-prop">maximumSize</db:link>() of the widgets.</db:para>
<db:para><db:link xlink:href="qsplitter.xml">QSplitter</db:link> resizes its children dynamically by default. If you would rather have <db:link xlink:href="qsplitter.xml">QSplitter</db:link> resize the children only at the end of a resize operation, call <db:link xlink:href="qsplitter.xml#opaqueResize-prop">setOpaqueResize</db:link>(false).</db:para>
<db:para>The initial distribution of size between the widgets is determined by multiplying the initial size with the stretch factor. You can also use <db:link xlink:href="qsplitter.xml#setSizes">setSizes</db:link>() to set the sizes of all the widgets. The function <db:link xlink:href="qsplitter.xml#sizes">sizes</db:link>() returns the sizes set by the user. Alternatively, you can save and restore the sizes of the widgets from a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> using <db:link xlink:href="qsplitter.xml#saveState">saveState</db:link>() and <db:link xlink:href="qsplitter.xml#restoreState">restoreState</db:link>() respectively.</db:para>
<db:para>When you <db:link xlink:href="qwidget.xml#hide">hide</db:link>() a child, its space will be distributed among the other children. It will be reinstated when you <db:link xlink:href="qwidget.xml#show">show</db:link>() it again.</db:para>
<db:note>
<db:para>Adding a <db:link xlink:href="qlayout.xml">QLayout</db:link> to a <db:link xlink:href="qsplitter.xml">QSplitter</db:link> is not supported (either through <db:link xlink:href="qwidget.xml#setLayout">setLayout</db:link>() or making the <db:link xlink:href="qsplitter.xml">QSplitter</db:link> a parent of the <db:link xlink:href="qlayout.xml">QLayout</db:link>); use <db:link xlink:href="qsplitter.xml#addWidget">addWidget</db:link>() instead (see example above).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitterhandle.xml">QSplitterHandle</db:link></db:member>
<db:member><db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link></db:member>
<db:member><db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link></db:member>
<db:member><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="childrenCollapsible-prop">
<db:title>childrenCollapsible : bool</db:title>
<db:para>This property holds whether child widgets can be resized down to size 0 by the user</db:para>
<db:para>By default, children are collapsible. It is possible to enable and disable the collapsing of individual children using <db:link xlink:href="qsplitter.xml#setCollapsible">setCollapsible</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">childrenCollapsible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setChildrenCollapsible</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#setCollapsible">setCollapsible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handleWidth-prop">
<db:title>handleWidth : int</db:title>
<db:para>This property holds the width of the splitter handles</db:para>
<db:para>By default, this property contains a value that depends on the user's platform and style preferences.</db:para>
<db:para>If you set handleWidth to 1 or 0, the actual grab area will grow to overlap a few pixels of its respective widgets.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">handleWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHandleWidth</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="opaqueResize-prop">
<db:title>opaqueResize : bool</db:title>
<db:para>Returns true if widgets are resized dynamically (opaquely) while interactively moving the splitter. Otherwise returns false.</db:para>
<db:para>The default resize behavior is style dependent (determined by the SH_Splitter_OpaqueResize style hint). However, you can override it by calling setOpaqueResize()</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">opaqueResize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOpaqueResize</db:emphasis>(<db:type>bool</db:type> <db:emphasis>opaque</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::StyleHint</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>orientation : Qt::Orientation</db:title>
<db:para>This property holds the orientation of the splitter</db:para>
<db:para>By default, the orientation is horizontal (i.e., the widgets are laid out side by side). The possible orientations are <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> and <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link></db:type> <db:emphasis role="bold">orientation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOrientation</db:emphasis>(<db:emphasis>Qt::Orientation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitterhandle.xml#orientation">QSplitterHandle::orientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSplitter">
<db:title>[explicit] QSplitter::QSplitter(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a horizontal splitter with the <db:code role="parameter">parent</db:code> argument passed on to the <db:link xlink:href="qframe.xml">QFrame</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#orientation-prop">setOrientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSplitter-1">
<db:title>[explicit] QSplitter::QSplitter(Qt::Orientation <db:emphasis>orientation</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a splitter with the given <db:code role="parameter">orientation</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#orientation-prop">setOrientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSplitter">
<db:title>[virtual noexcept] QSplitter::~QSplitter()</db:title>
<db:para>Destroys the splitter. All children are deleted.</db:para>
</db:section>
<db:section xml:id="addWidget">
<db:title>void QSplitter::addWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">widget</db:code> to the splitter's layout after all the other items.</db:para>
<db:para>If <db:code role="parameter">widget</db:code> is already in the splitter, it will be moved to the new position.</db:para>
<db:note>
<db:para>The splitter takes ownership of the widget.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#insertWidget">insertWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#widget">widget</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QSplitter::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#changeEvent" role="function">QFrame::changeEvent(QEvent *ev)</db:link>.</db:para>
</db:section>
<db:section xml:id="childEvent">
<db:title>[override virtual protected] void QSplitter::childEvent(QChildEvent *<db:emphasis>c</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#childEvent" role="function">QObject::childEvent(QChildEvent *event)</db:link>.</db:para>
<db:para>Tells the splitter that the child widget described by <db:code role="parameter">c</db:code> has been inserted or removed.</db:para>
<db:para>This method is also used to handle the situation where a widget is created with the splitter as a parent but not explicitly added with <db:link xlink:href="qsplitter.xml#insertWidget">insertWidget</db:link>() or <db:link xlink:href="qsplitter.xml#addWidget">addWidget</db:link>(). This is for compatibility and not the recommended way of putting widgets into a splitter in new code. Please use <db:link xlink:href="qsplitter.xml#insertWidget">insertWidget</db:link>() or <db:link xlink:href="qsplitter.xml#addWidget">addWidget</db:link>() in new code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#insertWidget">insertWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closestLegalPosition">
<db:title>[protected] int QSplitter::closestLegalPosition(int <db:emphasis>pos</db:emphasis>, int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the closest legal position to <db:code role="parameter">pos</db:code> of the widget at <db:code role="parameter">index</db:code>.</db:para>
<db:para>For right-to-left languages such as Arabic and Hebrew, the layout of horizontal splitters is reversed. Positions are then measured from the right edge of the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#getRange">getRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>int QSplitter::count() const</db:title>
<db:para>Returns the number of widgets contained in the splitter's layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#widget">widget</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#handle">handle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createHandle">
<db:title>[virtual protected] QSplitterHandle *QSplitter::createHandle()</db:title>
<db:para>Returns a new splitter handle as a child widget of this splitter. This function can be reimplemented in subclasses to provide support for custom handles.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#handle">handle</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSplitter::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#event" role="function">QFrame::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="getRange">
<db:title>void QSplitter::getRange(int <db:emphasis>index</db:emphasis>, int *<db:emphasis>min</db:emphasis>, int *<db:emphasis>max</db:emphasis>) const</db:title>
<db:para>Returns the valid range of the splitter at <db:code role="parameter">index</db:code> in *<db:code role="parameter">min</db:code> and *<db:code role="parameter">max</db:code> if <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> are not 0.</db:para>
</db:section>
<db:section xml:id="handle">
<db:title>QSplitterHandle *QSplitter::handle(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the handle to the left of (or above) the item in the splitter's layout at the given <db:code role="parameter">index</db:code>, or nullptr if there is no such item. The handle at index 0 is always hidden.</db:para>
<db:para>For right-to-left languages such as Arabic and Hebrew, the layout of horizontal splitters is reversed. The handle will be to the right of the widget at <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#widget">widget</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#createHandle">createHandle</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#handleWidth-prop">setHandleWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>int QSplitter::indexOf(QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:para>Returns the index in the splitter's layout of the specified <db:code role="parameter">widget</db:code>, or -1 if <db:code role="parameter">widget</db:code> is not found. This also works for handles.</db:para>
<db:para>Handles are numbered from 0. There are as many handles as there are child widgets, but the handle at position 0 is always hidden.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertWidget">
<db:title>void QSplitter::insertWidget(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Inserts the <db:code role="parameter">widget</db:code> specified into the splitter's layout at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>If <db:code role="parameter">widget</db:code> is already in the splitter, it will be moved to the new position.</db:para>
<db:para>If <db:code role="parameter">index</db:code> is an invalid index, then the widget will be inserted at the end.</db:para>
<db:note>
<db:para>The splitter takes ownership of the widget.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCollapsible">
<db:title>bool QSplitter::isCollapsible(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns true if the widget at <db:code role="parameter">index</db:code> is collapsible, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QSplitter::minimumSizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="moveSplitter">
<db:title>[protected] void QSplitter::moveSplitter(int <db:emphasis>pos</db:emphasis>, int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Moves the left or top edge of the splitter handle at <db:code role="parameter">index</db:code> as close as possible to position <db:code role="parameter">pos</db:code>, which is the distance from the left or top edge of the widget.</db:para>
<db:para>For right-to-left languages such as Arabic and Hebrew, the layout of horizontal splitters is reversed. <db:code role="parameter">pos</db:code> is then the distance from the right edge of the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#splitterMoved">splitterMoved</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#closestLegalPosition">closestLegalPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#getRange">getRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="refresh">
<db:title>void QSplitter::refresh()</db:title>
<db:para>Updates the splitter's state. You should not need to call this function.</db:para>
</db:section>
<db:section xml:id="replaceWidget">
<db:title>QWidget *QSplitter::replaceWidget(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Replaces the widget in the splitter's layout at the given <db:code role="parameter">index</db:code> by <db:code role="parameter">widget</db:code>.</db:para>
<db:para>Returns the widget that has just been replaced if <db:code role="parameter">index</db:code> is valid and <db:code role="parameter">widget</db:code> is not already a child of the splitter. Otherwise, it returns null and no replacement or addition is made.</db:para>
<db:para>The geometry of the newly inserted widget will be the same as the widget it replaces. Its visible and collapsed states are also inherited.</db:para>
<db:note>
<db:para>The splitter takes ownership of <db:code role="parameter">widget</db:code> and sets the parent of the replaced widget to null.</db:para>
</db:note>
<db:note>
<db:para>Because <db:code role="parameter">widget</db:code> gets <db:link xlink:href="qwidget.xml#setParent">reparented</db:link> into the splitter, its <db:link xlink:href="qwidget.xml#geometry-prop">geometry</db:link> may not be set right away, but only after <db:code role="parameter">widget</db:code> will receive the appropriate events.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#insertWidget">insertWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QSplitter::resizeEvent(<db:emphasis>QResizeEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="restoreState">
<db:title>bool QSplitter::restoreState(const QByteArray &amp;<db:emphasis>state</db:emphasis>)</db:title>
<db:para>Restores the splitter's layout to the <db:code role="parameter">state</db:code> specified. Returns true if the state is restored; otherwise returns false.</db:para>
<db:para>Typically this is used in conjunction with <db:link xlink:href="qsettings.xml">QSettings</db:link> to restore the size from a past session. Here is an example:</db:para>
<db:para>Restore the splitter's state:</db:para>
<db:programlisting language="cpp">    QSettings settings;
    splitter-&gt;restoreState(settings.value(&quot;splitterSizes&quot;).toByteArray());
</db:programlisting>
<db:para>A failure to restore the splitter's layout may result from either invalid or out-of-date data in the supplied byte array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#saveState">saveState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="saveState">
<db:title>QByteArray QSplitter::saveState() const</db:title>
<db:para>Saves the state of the splitter's layout.</db:para>
<db:para>Typically this is used in conjunction with <db:link xlink:href="qsettings.xml">QSettings</db:link> to remember the size for a future session. A version number is stored as part of the data. Here is an example:</db:para>
<db:programlisting language="cpp">    QSettings settings;
    settings.setValue(&quot;splitterSizes&quot;, splitter-&gt;saveState());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#restoreState">restoreState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCollapsible">
<db:title>void QSplitter::setCollapsible(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>collapse</db:emphasis>)</db:title>
<db:para>Sets whether the child widget at <db:code role="parameter">index</db:code> is collapsible to <db:code role="parameter">collapse</db:code>.</db:para>
<db:para>By default, children are collapsible, meaning that the user can resize them down to size 0, even if they have a non-zero <db:link xlink:href="qwidget.xml#minimumSize-prop">minimumSize</db:link>() or <db:link xlink:href="qsplitter.xml#minimumSizeHint">minimumSizeHint</db:link>(). This behavior can be changed on a per-widget basis by calling this function, or globally for all the widgets in the splitter by setting the <db:link xlink:href="qsplitter.xml#childrenCollapsible-prop">childrenCollapsible</db:link> property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#isCollapsible">isCollapsible</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#childrenCollapsible-prop">childrenCollapsible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRubberBand">
<db:title>[protected] void QSplitter::setRubberBand(int <db:emphasis>pos</db:emphasis>)</db:title>
<db:para>Displays a rubber band at position <db:code role="parameter">pos</db:code>. If <db:code role="parameter">pos</db:code> is negative, the rubber band is removed.</db:para>
</db:section>
<db:section xml:id="setSizes">
<db:title>void QSplitter::setSizes(const QList&lt;int&gt; &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:para>Sets the child widgets' respective sizes to the values given in the <db:code role="parameter">list</db:code>.</db:para>
<db:para>If the splitter is horizontal, the values set the width of each widget in pixels, from left to right. If the splitter is vertical, the height of each widget is set, from top to bottom.</db:para>
<db:para>Extra values in the <db:code role="parameter">list</db:code> are ignored. If <db:code role="parameter">list</db:code> contains too few values, the result is undefined, but the program will still be well-behaved.</db:para>
<db:para>The overall size of the splitter widget is not affected. Instead, any additional/missing space is distributed amongst the widgets according to the relative weight of the sizes.</db:para>
<db:para>If you specify a size of 0, the widget will be invisible. The size policies of the widgets are preserved. That is, a value smaller than the minimal size hint of the respective widget will be replaced by the value of the hint.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#sizes">sizes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStretchFactor">
<db:title>void QSplitter::setStretchFactor(int <db:emphasis>index</db:emphasis>, int <db:emphasis>stretch</db:emphasis>)</db:title>
<db:para>Updates the size policy of the widget at position <db:code role="parameter">index</db:code> to have a stretch factor of <db:code role="parameter">stretch</db:code>.</db:para>
<db:para><db:code role="parameter">stretch</db:code> is not the effective stretch factor; the effective stretch factor is calculated by taking the initial size of the widget and multiplying it with <db:code role="parameter">stretch</db:code>.</db:para>
<db:para>This function is provided for convenience. It is equivalent to</db:para>
<db:programlisting language="cpp">QWidget *widget = splitter-&gt;widget(index);
QSizePolicy policy = widget-&gt;sizePolicy();
policy.setHorizontalStretch(stretch);
policy.setVerticalStretch(stretch);
widget-&gt;setSizePolicy(policy);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#setSizes">setSizes</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QSplitter::sizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#sizeHint" role="function">QFrame::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="sizes">
<db:title>QList&lt;int&gt; QSplitter::sizes() const</db:title>
<db:para>Returns a list of the size parameters of all the widgets in this splitter.</db:para>
<db:para>If the splitter's orientation is horizontal, the list contains the widgets width in pixels, from left to right; if the orientation is vertical, the list contains the widgets' heights in pixels, from top to bottom.</db:para>
<db:para>Giving the values to another splitter's <db:link xlink:href="qsplitter.xml#setSizes">setSizes</db:link>() function will produce a splitter with the same layout as this one.</db:para>
<db:para>Note that invisible widgets have a size of 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#setSizes">setSizes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="splitterMoved">
<db:title>void QSplitter::splitterMoved(int <db:emphasis>pos</db:emphasis>, int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the splitter handle at a particular <db:code role="parameter">index</db:code> has been moved to position <db:code role="parameter">pos</db:code>.</db:para>
<db:para>For right-to-left languages such as Arabic and Hebrew, the layout of horizontal splitters is reversed. <db:code role="parameter">pos</db:code> is then the distance from the right edge of the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#moveSplitter">moveSplitter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QSplitter::widget(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the widget at the given <db:code role="parameter">index</db:code> in the splitter's layout, or nullptr if there is no such widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplitter.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#handle">handle</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qsplitter.xml#insertWidget">insertWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
