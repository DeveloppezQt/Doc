<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStaticLatin1StringMatcher Class</db:title>
<db:subtitle>template &lt;Qt::CaseSensitivity CS, size_t N&gt; class QStaticLatin1StringMatcher</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstaticlatin1stringmatcher.xml">QStaticLatin1StringMatcher</db:link> class is a compile-time version of <db:link xlink:href="qlatin1stringmatcher.xml">QLatin1StringMatcher</db:link>.</db:para>
<db:para>This class was introduced in Qt 6.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStaticLatin1StringMatcher</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStaticLatin1StringMatcher is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="string-processing.xml">Classes for string data</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is useful when your code needs to search efficiently in Latin-1 strings for a substring that's known at compile-time. This is common, for example, in parsers. Using a matcher object's <db:link xlink:href="qstaticlatin1stringmatcher.xml#indexIn">indexIn</db:link>() is faster than using the indexOf() member method of the string you are searching in, especially when the string to be found will be searched for repeatedly or within a large Latin-1 string that may contain many matches to prefixes of the substring to be found.</db:para>
<db:para>Unlike <db:link xlink:href="qlatin1stringmatcher.xml">QLatin1StringMatcher</db:link>, this class calculates the internal representation at <db:emphasis>compile-time</db:emphasis>, so it can be beneficial even if you are doing one-off Latin-1 string matches.</db:para>
<db:para>Create the <db:link xlink:href="qstaticlatin1stringmatcher.xml">QStaticLatin1StringMatcher</db:link> by calling <db:link xlink:href="qstaticlatin1stringmatcher.xml#qMakeStaticCaseSensitiveLatin1StringMatcher">qMakeStaticCaseSensitiveLatin1StringMatcher</db:link>() or <db:link xlink:href="qstaticlatin1stringmatcher.xml#qMakeStaticCaseInsensitiveLatin1StringMatcher">qMakeStaticCaseInsensitiveLatin1StringMatcher</db:link>() passing the Latin-1 string to search for as a C string literal. Store the return value of that function in a static constexpr auto variable, so you don't need to pass the N template parameter explicitly.</db:para>
<db:para>Then call <db:link xlink:href="qstaticlatin1stringmatcher.xml#indexIn">indexIn</db:link>() on the <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link> in which you want to search, just like with <db:link xlink:href="qlatin1stringmatcher.xml">QLatin1StringMatcher</db:link>.</db:para>
<db:para>Since this class is designed to do all the up-front calculations at compile-time, it does not offer setPattern() or setCaseSensitivity() methods.</db:para>
<db:note>
<db:para>INTEGRITY operating system is currently not supported.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1stringmatcher.xml">QLatin1StringMatcher</db:link></db:member>
<db:member><db:link xlink:href="qstaticbytearraymatcher.xml">QStaticByteArrayMatcher</db:link></db:member>
<db:member><db:link xlink:href="qbytearraymatcher.xml">QByteArrayMatcher</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="indexIn">
<db:title>[constexpr noexcept] qsizetype QStaticLatin1StringMatcher::indexIn(QLatin1StringView <db:emphasis>haystack</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:bridgehead renderas="sect2" xml:id="indexIn-1">[constexpr noexcept] qsizetype QStaticLatin1StringMatcher::indexIn(QStringView <db:emphasis>haystack</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0) const</db:bridgehead>
<db:para>Searches the <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link> <db:code role="parameter">haystack</db:code>, from byte position <db:code role="parameter">from</db:code> (default 0, i.e. from the first byte), for <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link> pattern() that was set in the constructor. Using the case sensitivity that was also set in the constructor.</db:para>
<db:para>Returns the position where the pattern() matched in <db:code role="parameter">haystack</db:code>, or -1 if no match was found.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qMakeStaticCaseInsensitiveLatin1StringMatcher">
<db:title>[constexpr noexcept, since 6.7] auto qMakeStaticCaseInsensitiveLatin1StringMatcher(const char (&amp;)[N] <db:emphasis>patternToMatch</db:emphasis>)</db:title>
<db:para>Return a <db:link xlink:href="qstaticlatin1stringmatcher.xml">QStaticLatin1StringMatcher</db:link> with the correct N determined automatically from the <db:code role="parameter">patternToMatch</db:code> passed, and without case sensitivity.</db:para>
<db:para>To take full advantage of this function, assign the result to a static constexpr auto variable:</db:para>
<db:programlisting language="cpp">static constexpr auto matcher = qMakeStaticCaseInsensitiveLatin1StringViewMatcher(&quot;needle&quot;);
</db:programlisting>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="qMakeStaticCaseSensitiveLatin1StringMatcher">
<db:title>[constexpr noexcept, since 6.7] auto qMakeStaticCaseSensitiveLatin1StringMatcher(const char (&amp;)[N] <db:emphasis>patternToMatch</db:emphasis>)</db:title>
<db:para>Return a <db:link xlink:href="qstaticlatin1stringmatcher.xml">QStaticLatin1StringMatcher</db:link> with the correct N determined automatically from the <db:code role="parameter">patternToMatch</db:code> passed, and with case sensitivity.</db:para>
<db:para>To take full advantage of this function, assign the result to a static constexpr auto variable:</db:para>
<db:programlisting language="cpp">static constexpr auto matcher = qMakeStaticCaseSensitiveLatin1StringViewMatcher(&quot;needle&quot;);
</db:programlisting>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
</db:article>
