<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Demo Android Classes</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Android classes are used in the purchasing demo to enable purchasing in Android.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="classes">
<db:title>Classes</db:title>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtpurchasing-androidclasses.xml#androidinappproduct">AndroidInAppProduct</db:link></db:para>
</db:td>
<db:td>
<db:para>A product registered in the store.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtpurchasing-androidclasses.xml#androidinapptransaction">AndroidInAppTransaction</db:link></db:para>
</db:td>
<db:td>
<db:para>Contains information about a transaction in the external app store.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtpurchasing-androidclasses.xml#androidinapppurchasebackend">AndroidInAppPurchaseBackend</db:link></db:para>
</db:td>
<db:td>
<db:para>Comminucates with external store.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>androidjni.cpp and InAppPurchase.java</db:para>
</db:td>
<db:td>
<db:para>Communication between Google Play's billing system and C++.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Check out <db:link xlink:href="qtpurchasing-baseclasses.xml">Base Classes</db:link></db:para>
</db:section>
<db:section xml:id="androidinappproduct">
<db:title>AndroidInAppProduct</db:title>
<db:para>AndroidInAppProduct adds purchase() for initializing purchasing process.</db:para>
</db:section>
<db:section xml:id="androidinapptransaction">
<db:title>AndroidInAppTransaction</db:title>
<db:para>AndroidInAppTransaction is created in the AndroidInAppPurchaseBackend using purchaseSucceeded(), purchaseFailed() and checkFinalizationStatus().</db:para>
<db:para>AndroidInAppTransaction adds new parameters and return types. Class has finalize() function that separates Consumable and Unlockable products to be either acknowledged or consumed in the InAppPurchase.java.</db:para>
</db:section>
<db:section xml:id="androidinapppurchasebackend">
<db:title>AndroidInAppPurchaseBackend</db:title>
<db:para>AndroidInAppPurchaseBackend makes and receives calls from InAppPurchase.java. This class is one of the back end components in the application.</db:para>
<db:section xml:id="initialize">
<db:title>Initialize</db:title>
<db:para>Shows the products information on the store page.</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>AndroidInAppPurchaseBackend is called from InAppStore::setupBackend().</db:para>
</db:listitem>
<db:listitem>
<db:para>At initialization AndroidInAppPurchaseBackend will give <db:link xlink:href="https://developer.android.com/reference/android/content/Context">Context</db:link> and pointer of its self to the Java in the calls constructor and then initializes the connection to the Google Play store using the initialize() function.</db:para>
</db:listitem>
<db:listitem>
<db:para>When the connection is successful, androidjni will call registerRedy() which emits the ready() signal to InAppStore and starts queryProducts() function to get the information of the purchasable items.</db:para>
</db:listitem>
<db:listitem>
<db:para>When the query is done, productQueryDone() signal is emitted and the item's information will be visible on the application's store page.</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="purchasing">
<db:title>Purchasing</db:title>
<db:para>When pressing one of the products on the applications store page a call is routed through AndroidInAppProduct::purchase() to purchaseProduct() function. This then calls the Java method launchBillingFlow() which opens Goole Plays billing flow to the user.</db:para>
</db:section>
</db:section>
<db:section xml:id="inapppurchase-java-and-androidjni-cpp">
<db:title>InAppPurchase.java and androidjni.cpp</db:title>
<db:para>AndroidInAppPurchaseBackend makes calls directly to InAppPurchase.java and receives Java calls from androidjni. The demo application communicates with Java function using <db:link xlink:href="qjniobject.xml">QJniObject</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="https://developer.android.com/google/play/billing/integrate#java">Integrate the Google Play Billing Library</db:link></db:member>
<db:member><db:link xlink:href="qjniobject.xml">QJniObject</db:link></db:member>
<db:member><db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
