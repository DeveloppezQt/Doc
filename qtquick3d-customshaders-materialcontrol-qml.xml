<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Custom Shaders Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of custom vertex and fragment shaders.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick.Controls
import QtQuick.Layouts

Rectangle {
    id: root
    property real time: time.sliderValue
    property real amplitude: amplitude.sliderValue
    property real alpha: alpha.sliderValue
    property bool animateRotation: animControl.checkBoxSet
    property bool texturing: texControl.checkBoxSet
    property bool textureFromItem : texControl2.checkBoxSet

    color: &quot;#6b7080&quot;
    width: parent.width
    height: 75

    component PropertySlider : RowLayout {
        id: sliderRoot
        required property string name
        required property real sliderValue
        required property real fromValue
        required property real toValue
        Label {
            id: propText
            text: sliderRoot.name
            color: &quot;#222840&quot;
            font.pointSize: 12
        }
        Slider {
            id: slider
            from: sliderRoot.fromValue
            to: sliderRoot.toValue
            value: sliderRoot.sliderValue
            stepSize: 0.01
            onValueChanged: sliderRoot.sliderValue = value
            Layout.minimumWidth: 100
            Layout.maximumWidth: 200
            background: Rectangle {
                x: slider.leftPadding
                y: slider.topPadding + slider.availableHeight / 2 - height / 2
                implicitWidth: 120
                implicitHeight: 4
                width: slider.availableWidth
                height: implicitHeight
                radius: 1
                color: &quot;#222840&quot;

                Rectangle {
                    width: slider.visualPosition * parent.width
                    height: parent.height
                    color: &quot;#848895&quot;
                    radius: 1
                }
            }
            handle: Rectangle {
                x: slider.leftPadding + slider.visualPosition * (slider.availableWidth - width)
                y: slider.topPadding + slider.availableHeight / 2 - height / 2
                implicitWidth: 20
                implicitHeight: 20
                radius: 5
                color: slider.pressed ? &quot;#222840&quot; : &quot;#6b7080&quot;
                border.color: &quot;#848895&quot;
            }
        }
        Label {
            id: valueText
            text: slider.value.toFixed(2)
            color: &quot;#222840&quot;
            font.pointSize: 12
            font.bold: true
            Layout.minimumWidth: 40
            Layout.maximumWidth: 40
        }
    }

    component PropertyCheckBox : RowLayout {
        id: checkBoxRoot
        required property string checkBoxText
        required property bool checkBoxSet

        Label {
            text: checkBoxRoot.checkBoxText
            font.pointSize: 12
            font.bold: true
        }
        CheckBox {
            checked: false
            onCheckedChanged: checkBoxRoot.checkBoxSet = checked
        }
    }

    ScrollBar {
        id: hbar
        policy: parent.width &amp;lt; columnLayout.width ? ScrollBar.AlwaysOn : ScrollBar.AsNeeded
        orientation: Qt.Horizontal
        size: parent.width / columnLayout.width
        anchors.bottom: parent.bottom
        anchors.left: parent.left
        anchors.right: parent.right
    }

    ColumnLayout {
        id: columnLayout
        readonly property int leftMargin: 25
        x: leftMargin - hbar.position * width

        RowLayout {
            spacing: 10
            PropertySlider {
                id: time
                sliderValue: 0.0
                name: &quot;Time&quot;
                fromValue: 0.0
                toValue: 1.0
            }
            PropertySlider {
                id: amplitude
                sliderValue: 5.0
                name: &quot;Amplitude&quot;
                fromValue: 1.0
                toValue: 20.0
            }
            PropertySlider {
                id: alpha
                sliderValue: 1.0
                name: &quot;Alpha&quot;
                fromValue: 0.0
                toValue: 1.0
            }
            PropertyCheckBox {
                id: animControl
                checkBoxText: &quot;Rotate&quot;
                checkBoxSet: false
            }
            PropertyCheckBox {
                id: texControl
                checkBoxText: &quot;Texture&quot;
                checkBoxSet: false
            }
            Layout.rightMargin: texControl.checkBoxSet ? 0 : texControl2.width + 10
            PropertyCheckBox {
                id: texControl2
                visible: texControl.checkBoxSet
                checkBoxText: &quot;Texture with Item&quot;
                checkBoxSet: false
            }
        }
    }
}

</db:programlisting>
</db:article>
