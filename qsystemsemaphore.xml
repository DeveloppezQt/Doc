<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSystemSemaphore Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> class provides a general counting system semaphore.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSystemSemaphore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A system semaphore is a generalization of <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link>. Typically, a semaphore is used to protect a certain number of identical resources.</db:para>
<db:para>Like its lighter counterpart, a <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> can be accessed from multiple <db:link xlink:href="qthread.xml">threads</db:link>. Unlike <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link>, a <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> can also be accessed from multiple <db:link xlink:href="qprocess.xml">processes</db:link>. This means <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> is a much heavier class, so if your application doesn't need to access your semaphores across multiple processes, you will probably want to use <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link>.</db:para>
<db:para>Semaphores support two fundamental operations, <db:link xlink:href="qsystemsemaphore.xml#acquire">acquire</db:link>() and <db:link xlink:href="qsystemsemaphore.xml#release">release</db:link>():</db:para>
<db:para><db:link xlink:href="qsystemsemaphore.xml#acquire">acquire</db:link>() tries to acquire one resource. If there isn't a resource available, the call blocks until a resource becomes available. Then the resource is acquired and the call returns.</db:para>
<db:para><db:link xlink:href="qsystemsemaphore.xml#release">release</db:link>() releases one resource so it can be acquired by another process. The function can also be called with a parameter n &gt; 1, which releases n resources.</db:para>
<db:para>System semaphores are identified by a key, represented by <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link>. A key can be created in a cross-platform manner by using platformSafeKey(). A system semaphore is created by the <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> constructor when passed an access mode parameter of AccessMode::Create. Once it is created, other processes may attach to the same semaphore using the same key and an access mode parameter of AccessMode::Open.</db:para>
<db:para>Example: Create a system semaphore</db:para>
<db:programlisting language="cpp">QSystemSemaphore sem(QSystemSemaphore::platformSafeKey(&quot;market&quot;), 3, QSystemSemaphore::Create);
                             // resources available == 3
sem.acquire();               // resources available == 2
sem.acquire();               // resources available == 1
sem.acquire();               // resources available == 0
sem.release();               // resources available == 1
sem.release(2);              // resources available == 3
</db:programlisting>
<db:para>For details on the key types, platform-specific limitations, and interoperability with older or non-Qt applications, see the <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> documentation. That includes important information for sandboxed applications on Apple platforms, including all apps obtained via the Apple App Store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="ipc.xml">Inter-Process Communication</db:link></db:member>
<db:member><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:member>
<db:member><db:link xlink:href="qsemaphore.xml">QSemaphore</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AccessMode-enum">
<db:title>enum QSystemSemaphore::AccessMode</db:title>
<db:para>This enum is used by the constructor and <db:link xlink:href="qsystemsemaphore.xml#setKey">setKey</db:link>(). Its purpose is to enable handling the problem in Unix implementations of semaphores that survive a crash. In Unix, when a semaphore survives a crash, we need a way to force it to reset its resource count, when the system reuses the semaphore. In Windows, where semaphores can't survive a crash, this enum has no effect.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:emphasis>::Open</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>If the semaphore already exists, its initial resource count is not reset. If the semaphore does not already exist, it is created and its initial resource count set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:emphasis>::Create</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> takes ownership of the semaphore and sets its resource count to the requested value, regardless of whether the semaphore already exists by having survived a crash. This value should be passed to the constructor, when the first semaphore for a particular key is constructed and you know that if the semaphore already exists it could only be because of a crash. In Windows, where a semaphore can't survive a crash, Create and Open have the same behavior.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SystemSemaphoreError-enum">
<db:title>enum QSystemSemaphore::SystemSemaphoreError</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:emphasis>::PermissionDenied</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The operation failed because the caller didn't have the required permissions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:emphasis>::KeyError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The operation failed because of an invalid key.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:emphasis>::AlreadyExists</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The operation failed because a system semaphore with the specified key already existed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:emphasis>::NotFound</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The operation failed because a system semaphore with the specified key could not be found.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:emphasis>::OutOfResources</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The operation failed because there was not enough memory available to fill the request.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Something else happened and it was bad.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSystemSemaphore">
<db:title>QSystemSemaphore::QSystemSemaphore(const QNativeIpcKey &amp;<db:emphasis>key</db:emphasis>, int <db:emphasis>initialValue</db:emphasis> = 0, QSystemSemaphore::AccessMode <db:emphasis>mode</db:emphasis> = Open)</db:title>
<db:para>Requests a system semaphore for the specified <db:code role="parameter">key</db:code>. The parameters <db:code role="parameter">initialValue</db:code> and <db:code role="parameter">mode</db:code> are used according to the following rules, which are system dependent.</db:para>
<db:para>In Unix, if the <db:code role="parameter">mode</db:code> is <db:link xlink:href="qsystemsemaphore.xml#AccessMode-enum">Open</db:link> and the system already has a semaphore identified by <db:code role="parameter">key</db:code>, that semaphore is used, and the semaphore's resource count is not changed, i.e., <db:code role="parameter">initialValue</db:code> is ignored. But if the system does not already have a semaphore identified by <db:code role="parameter">key</db:code>, it creates a new semaphore for that key and sets its resource count to <db:code role="parameter">initialValue</db:code>.</db:para>
<db:para>In Unix, if the <db:code role="parameter">mode</db:code> is <db:link xlink:href="qsystemsemaphore.xml#AccessMode-enum">Create</db:link> and the system already has a semaphore identified by <db:code role="parameter">key</db:code>, that semaphore is used, and its resource count is set to <db:code role="parameter">initialValue</db:code>. If the system does not already have a semaphore identified by <db:code role="parameter">key</db:code>, it creates a new semaphore for that key and sets its resource count to <db:code role="parameter">initialValue</db:code>.</db:para>
<db:para>In Windows, <db:code role="parameter">mode</db:code> is ignored, and the system always tries to create a semaphore for the specified <db:code role="parameter">key</db:code>. If the system does not already have a semaphore identified as <db:code role="parameter">key</db:code>, it creates the semaphore and sets its resource count to <db:code role="parameter">initialValue</db:code>. But if the system already has a semaphore identified as <db:code role="parameter">key</db:code> it uses that semaphore and ignores <db:code role="parameter">initialValue</db:code>.</db:para>
<db:para>The <db:link xlink:href="qsystemsemaphore.xml#AccessMode-enum">mode</db:link> parameter is only used in Unix systems to handle the case where a semaphore survives a process crash. In that case, the next process to allocate a semaphore with the same <db:code role="parameter">key</db:code> will get the semaphore that survived the crash, and unless <db:code role="parameter">mode</db:code> is <db:link xlink:href="qsystemsemaphore.xml#AccessMode-enum">Create</db:link>, the resource count will not be reset to <db:code role="parameter">initialValue</db:code> but will retain the initial value it had been given by the crashed process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemsemaphore.xml#acquire">acquire</db:link>()</db:member>
<db:member><db:link xlink:href="qsystemsemaphore.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSystemSemaphore-1">
<db:title>QSystemSemaphore::QSystemSemaphore(const QString &amp;<db:emphasis>key</db:emphasis>, int <db:emphasis>initialValue</db:emphasis> = 0, QSystemSemaphore::AccessMode <db:emphasis>mode</db:emphasis> = Open)</db:title>
<db:para>Requests a system semaphore identified by the legacy key <db:code role="parameter">key</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSystemSemaphore">
<db:title>[noexcept] QSystemSemaphore::~QSystemSemaphore()</db:title>
<db:para>The destructor destroys the <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> object, but the underlying system semaphore is not removed from the system unless this instance of <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> is the last one existing for that system semaphore.</db:para>
<db:para>Two important side effects of the destructor depend on the system. In Windows, if <db:link xlink:href="qsystemsemaphore.xml#acquire">acquire</db:link>() has been called for this semaphore but not <db:link xlink:href="qsystemsemaphore.xml#release">release</db:link>(), <db:link xlink:href="qsystemsemaphore.xml#release">release</db:link>() will not be called by the destructor, nor will the resource be released when the process exits normally. This would be a program bug which could be the cause of a deadlock in another process trying to acquire the same resource. In Unix, acquired resources that are not released before the destructor is called are automatically released when the process exits.</db:para>
</db:section>
<db:section xml:id="acquire">
<db:title>bool QSystemSemaphore::acquire()</db:title>
<db:para>Acquires one of the resources guarded by this semaphore, if there is one available, and returns true. If all the resources guarded by this semaphore have already been acquired, the call blocks until one of them is released by another process or thread having a semaphore with the same key.</db:para>
<db:para>If false is returned, a system error has occurred. Call <db:link xlink:href="qsystemsemaphore.xml#error">error</db:link>() to get a value of <db:link xlink:href="qsystemsemaphore.xml#SystemSemaphoreError-enum">QSystemSemaphore::SystemSemaphoreError</db:link> that indicates which error occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemsemaphore.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QSystemSemaphore::SystemSemaphoreError QSystemSemaphore::error() const</db:title>
<db:para>Returns a value indicating whether an error occurred, and, if so, which error it was.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemsemaphore.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QSystemSemaphore::errorString() const</db:title>
<db:para>Returns a text description of the last error that occurred. If <db:link xlink:href="qsystemsemaphore.xml#error">error</db:link>() returns an <db:link xlink:href="qsystemsemaphore.xml#SystemSemaphoreError-enum">error value</db:link>, call this function to get a text string that describes the error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemsemaphore.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>QString QSystemSemaphore::key() const</db:title>
<db:para>Returns the legacy key assigned to this system semaphore. The key is the name by which the semaphore can be accessed from other processes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemsemaphore.xml#setKey">setKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeIpcKey">
<db:title>QNativeIpcKey QSystemSemaphore::nativeIpcKey() const</db:title>
<db:para>Returns the key assigned to this system semaphore. The key is the name by which the semaphore can be accessed from other processes.</db:para>
<db:para>You can use the native key to access system semaphores that have not been created by Qt, or to grant access to non-Qt applications. See <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemsemaphore.xml#setNativeKey">setNativeKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release">
<db:title>bool QSystemSemaphore::release(int <db:emphasis>n</db:emphasis> = 1)</db:title>
<db:para>Releases <db:code role="parameter">n</db:code> resources guarded by the semaphore. Returns true unless there is a system error.</db:para>
<db:para>Example: Create a system semaphore having five resources; acquire them all and then release them all.</db:para>
<db:programlisting language="cpp">QSystemSemaphore sem(QSystemSemaphore::platformSafeKey(&quot;market&quot;), 5, QSystemSemaphore::Create);
for (int i = 0; i &lt; 5; ++i)  // acquire all 5 resources
    sem.acquire();
sem.release(5);              // release the 5 resources
</db:programlisting>
<db:para>This function can also &quot;create&quot; resources. For example, immediately following the sequence of statements above, suppose we add the statement:</db:para>
<db:programlisting language="cpp">sem.release(10);          // &quot;create&quot; 10 new resources
</db:programlisting>
<db:para>Ten new resources are now guarded by the semaphore, in addition to the five that already existed. You would not normally use this function to create more resources.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemsemaphore.xml#acquire">acquire</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKey">
<db:title>void QSystemSemaphore::setKey(const QString &amp;<db:emphasis>key</db:emphasis>, int <db:emphasis>initialValue</db:emphasis> = 0, QSystemSemaphore::AccessMode <db:emphasis>mode</db:emphasis> = Open)</db:title>
<db:para>This function works the same as the constructor. It reconstructs this <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> object. If the new <db:code role="parameter">key</db:code> is different from the old key, calling this function is like calling the destructor of the semaphore with the old key, then calling the constructor to create a new semaphore with the new <db:code role="parameter">key</db:code>. The <db:code role="parameter">initialValue</db:code> and <db:code role="parameter">mode</db:code> parameters are as defined for the constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemsemaphore.xml#QSystemSemaphore">QSystemSemaphore</db:link>()</db:member>
<db:member><db:link xlink:href="qsystemsemaphore.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNativeKey">
<db:title>void QSystemSemaphore::setNativeKey(const QNativeIpcKey &amp;<db:emphasis>key</db:emphasis>, int <db:emphasis>initialValue</db:emphasis> = 0, QSystemSemaphore::AccessMode <db:emphasis>mode</db:emphasis> = Open)</db:title>
<db:para>This function works the same as the constructor. It reconstructs this <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> object. If the new <db:code role="parameter">key</db:code> is different from the old key, calling this function is like calling the destructor of the semaphore with the old key, then calling the constructor to create a new semaphore with the new <db:code role="parameter">key</db:code>. The <db:code role="parameter">initialValue</db:code> and <db:code role="parameter">mode</db:code> parameters are as defined for the constructor.</db:para>
<db:para>This function is useful if the native key was shared from another process. See <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemsemaphore.xml#QSystemSemaphore">QSystemSemaphore</db:link>()</db:member>
<db:member><db:link xlink:href="qsystemsemaphore.xml#nativeIpcKey">nativeIpcKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
