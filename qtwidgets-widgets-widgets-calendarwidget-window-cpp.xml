<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Calendar Widget Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Calendar Widget example shows use of <db:link xlink:href="qcalendarwidget.xml">QCalendarWidget</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;window.h&quot;

Window::Window()
{
    createPreviewGroupBox();
    createGeneralOptionsGroupBox();
    createDatesGroupBox();
    createTextFormatsGroupBox();

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(previewGroupBox, 0, 0);
    layout-&amp;gt;addWidget(generalOptionsGroupBox, 0, 1);
    layout-&amp;gt;addWidget(datesGroupBox, 1, 0);
    layout-&amp;gt;addWidget(textFormatsGroupBox, 1, 1);
    layout-&amp;gt;setSizeConstraint(QLayout::SetFixedSize);
    setLayout(layout);

    previewLayout-&amp;gt;setRowMinimumHeight(0, calendar-&amp;gt;sizeHint().height());
    previewLayout-&amp;gt;setColumnMinimumWidth(0, calendar-&amp;gt;sizeHint().width());

    setWindowTitle(tr(&quot;Calendar Widget&quot;));
}

void Window::localeChanged(int index)
{
    const QLocale newLocale(localeCombo-&amp;gt;itemData(index).toLocale());
    calendar-&amp;gt;setLocale(newLocale);
    int newLocaleFirstDayIndex = firstDayCombo-&amp;gt;findData(newLocale.firstDayOfWeek());
    firstDayCombo-&amp;gt;setCurrentIndex(newLocaleFirstDayIndex);
}

void Window::firstDayChanged(int index)
{
    calendar-&amp;gt;setFirstDayOfWeek(Qt::DayOfWeek(
                                firstDayCombo-&amp;gt;itemData(index).toInt()));
}

void Window::selectionModeChanged(int index)
{
    calendar-&amp;gt;setSelectionMode(QCalendarWidget::SelectionMode(
                               selectionModeCombo-&amp;gt;itemData(index).toInt()));
}

void Window::horizontalHeaderChanged(int index)
{
    calendar-&amp;gt;setHorizontalHeaderFormat(QCalendarWidget::HorizontalHeaderFormat(
        horizontalHeaderCombo-&amp;gt;itemData(index).toInt()));
}

void Window::verticalHeaderChanged(int index)
{
    calendar-&amp;gt;setVerticalHeaderFormat(QCalendarWidget::VerticalHeaderFormat(
        verticalHeaderCombo-&amp;gt;itemData(index).toInt()));
}

void Window::selectedDateChanged()
{
    currentDateEdit-&amp;gt;setDate(calendar-&amp;gt;selectedDate());
}

void Window::minimumDateChanged(const QDate &amp;amp;date)
{
    calendar-&amp;gt;setMinimumDate(date);
    maximumDateEdit-&amp;gt;setDate(calendar-&amp;gt;maximumDate());
}

void Window::maximumDateChanged(const QDate &amp;amp;date)
{
    calendar-&amp;gt;setMaximumDate(date);
    minimumDateEdit-&amp;gt;setDate(calendar-&amp;gt;minimumDate());
}

void Window::weekdayFormatChanged()
{
    QTextCharFormat format;

    format.setForeground(qvariant_cast&amp;lt;QColor&amp;gt;(
        weekdayColorCombo-&amp;gt;itemData(weekdayColorCombo-&amp;gt;currentIndex())));
    calendar-&amp;gt;setWeekdayTextFormat(Qt::Monday, format);
    calendar-&amp;gt;setWeekdayTextFormat(Qt::Tuesday, format);
    calendar-&amp;gt;setWeekdayTextFormat(Qt::Wednesday, format);
    calendar-&amp;gt;setWeekdayTextFormat(Qt::Thursday, format);
    calendar-&amp;gt;setWeekdayTextFormat(Qt::Friday, format);
}

void Window::weekendFormatChanged()
{
    QTextCharFormat format;

    format.setForeground(qvariant_cast&amp;lt;QColor&amp;gt;(
        weekendColorCombo-&amp;gt;itemData(weekendColorCombo-&amp;gt;currentIndex())));
    calendar-&amp;gt;setWeekdayTextFormat(Qt::Saturday, format);
    calendar-&amp;gt;setWeekdayTextFormat(Qt::Sunday, format);
}

void Window::reformatHeaders()
{
    QString text = headerTextFormatCombo-&amp;gt;currentText();
    QTextCharFormat format;

    if (text == tr(&quot;Bold&quot;)) {
        format.setFontWeight(QFont::Bold);
    } else if (text == tr(&quot;Italic&quot;)) {
        format.setFontItalic(true);
    } else if (text == tr(&quot;Green&quot;)) {
        format.setForeground(Qt::green);
    }
    calendar-&amp;gt;setHeaderTextFormat(format);
}

void Window::reformatCalendarPage()
{
    QTextCharFormat mayFirstFormat;
    const QDate mayFirst(calendar-&amp;gt;yearShown(), 5, 1);

    QTextCharFormat firstFridayFormat;
    QDate firstFriday(calendar-&amp;gt;yearShown(), calendar-&amp;gt;monthShown(), 1);
    while (firstFriday.dayOfWeek() != Qt::Friday)
        firstFriday = firstFriday.addDays(1);

    if (firstFridayCheckBox-&amp;gt;isChecked()) {
        firstFridayFormat.setForeground(Qt::blue);
    } else { // Revert to regular colour for this day of the week.
        Qt::DayOfWeek dayOfWeek(static_cast&amp;lt;Qt::DayOfWeek&amp;gt;(firstFriday.dayOfWeek()));
        firstFridayFormat.setForeground(calendar-&amp;gt;weekdayTextFormat(dayOfWeek).foreground());
    }

    calendar-&amp;gt;setDateTextFormat(firstFriday, firstFridayFormat);

    // When it is checked, &quot;May First in Red&quot; always takes precedence over &quot;First Friday in Blue&quot;.
    if (mayFirstCheckBox-&amp;gt;isChecked()) {
        mayFirstFormat.setForeground(Qt::red);
    } else if (!firstFridayCheckBox-&amp;gt;isChecked() || firstFriday != mayFirst) {
        // We can now be certain we won't be resetting &quot;May First in Red&quot; when we restore
        // may 1st's regular colour for this day of the week.
        Qt::DayOfWeek dayOfWeek(static_cast&amp;lt;Qt::DayOfWeek&amp;gt;(mayFirst.dayOfWeek()));
        calendar-&amp;gt;setDateTextFormat(mayFirst, calendar-&amp;gt;weekdayTextFormat(dayOfWeek));
    }

    calendar-&amp;gt;setDateTextFormat(mayFirst, mayFirstFormat);
}

void Window::createPreviewGroupBox()
{
    previewGroupBox = new QGroupBox(tr(&quot;Preview&quot;));

    calendar = new QCalendarWidget;
    calendar-&amp;gt;setMinimumDate(QDate(1900, 1, 1));
    calendar-&amp;gt;setMaximumDate(QDate(3000, 1, 1));
    calendar-&amp;gt;setGridVisible(true);

    connect(calendar, SIGNAL(currentPageChanged(int,int)),
            this, SLOT(reformatCalendarPage()));

    previewLayout = new QGridLayout;
    previewLayout-&amp;gt;addWidget(calendar, 0, 0, Qt::AlignCenter);
    previewGroupBox-&amp;gt;setLayout(previewLayout);
}

void Window::createGeneralOptionsGroupBox()
{
    generalOptionsGroupBox = new QGroupBox(tr(&quot;General Options&quot;));

    localeCombo = new QComboBox;
    int curLocaleIndex = -1;
    int index = 0;
    for (int _lang = QLocale::C; _lang &amp;lt;= QLocale::LastLanguage; ++_lang) {
        QLocale::Language lang = static_cast&amp;lt;QLocale::Language&amp;gt;(_lang);
        QList&amp;lt;QLocale::Country&amp;gt; countries = QLocale::countriesForLanguage(lang);
        for (int i = 0; i &amp;lt; countries.count(); ++i) {
            QLocale::Country country = countries.at(i);
            QString label = QLocale::languageToString(lang);
            label += QLatin1Char('/');
            label += QLocale::countryToString(country);
            QLocale locale(lang, country);
            if (this-&amp;gt;locale().language() == lang &amp;amp;&amp;amp; this-&amp;gt;locale().country() == country)
                curLocaleIndex = index;
            localeCombo-&amp;gt;addItem(label, locale);
            ++index;
        }
    }
    if (curLocaleIndex != -1)
        localeCombo-&amp;gt;setCurrentIndex(curLocaleIndex);
    localeLabel = new QLabel(tr(&quot;&amp;amp;Locale&quot;));
    localeLabel-&amp;gt;setBuddy(localeCombo);

    firstDayCombo = new QComboBox;
    firstDayCombo-&amp;gt;addItem(tr(&quot;Sunday&quot;), Qt::Sunday);
    firstDayCombo-&amp;gt;addItem(tr(&quot;Monday&quot;), Qt::Monday);
    firstDayCombo-&amp;gt;addItem(tr(&quot;Tuesday&quot;), Qt::Tuesday);
    firstDayCombo-&amp;gt;addItem(tr(&quot;Wednesday&quot;), Qt::Wednesday);
    firstDayCombo-&amp;gt;addItem(tr(&quot;Thursday&quot;), Qt::Thursday);
    firstDayCombo-&amp;gt;addItem(tr(&quot;Friday&quot;), Qt::Friday);
    firstDayCombo-&amp;gt;addItem(tr(&quot;Saturday&quot;), Qt::Saturday);

    firstDayLabel = new QLabel(tr(&quot;Wee&amp;amp;k starts on:&quot;));
    firstDayLabel-&amp;gt;setBuddy(firstDayCombo);

    selectionModeCombo = new QComboBox;
    selectionModeCombo-&amp;gt;addItem(tr(&quot;Single selection&quot;),
                                QCalendarWidget::SingleSelection);
    selectionModeCombo-&amp;gt;addItem(tr(&quot;None&quot;), QCalendarWidget::NoSelection);

    selectionModeLabel = new QLabel(tr(&quot;&amp;amp;Selection mode:&quot;));
    selectionModeLabel-&amp;gt;setBuddy(selectionModeCombo);

    gridCheckBox = new QCheckBox(tr(&quot;&amp;amp;Grid&quot;));
    gridCheckBox-&amp;gt;setChecked(calendar-&amp;gt;isGridVisible());

    navigationCheckBox = new QCheckBox(tr(&quot;&amp;amp;Navigation bar&quot;));
    navigationCheckBox-&amp;gt;setChecked(true);

    horizontalHeaderCombo = new QComboBox;
    horizontalHeaderCombo-&amp;gt;addItem(tr(&quot;Single letter day names&quot;),
                                   QCalendarWidget::SingleLetterDayNames);
    horizontalHeaderCombo-&amp;gt;addItem(tr(&quot;Short day names&quot;),
                                   QCalendarWidget::ShortDayNames);
    horizontalHeaderCombo-&amp;gt;addItem(tr(&quot;None&quot;),
                                   QCalendarWidget::NoHorizontalHeader);
    horizontalHeaderCombo-&amp;gt;setCurrentIndex(1);

    horizontalHeaderLabel = new QLabel(tr(&quot;&amp;amp;Horizontal header:&quot;));
    horizontalHeaderLabel-&amp;gt;setBuddy(horizontalHeaderCombo);

    verticalHeaderCombo = new QComboBox;
    verticalHeaderCombo-&amp;gt;addItem(tr(&quot;ISO week numbers&quot;),
                                 QCalendarWidget::ISOWeekNumbers);
    verticalHeaderCombo-&amp;gt;addItem(tr(&quot;None&quot;), QCalendarWidget::NoVerticalHeader);

    verticalHeaderLabel = new QLabel(tr(&quot;&amp;amp;Vertical header:&quot;));
    verticalHeaderLabel-&amp;gt;setBuddy(verticalHeaderCombo);

    connect(localeCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(localeChanged(int)));
    connect(firstDayCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(firstDayChanged(int)));
    connect(selectionModeCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(selectionModeChanged(int)));
    connect(gridCheckBox, SIGNAL(toggled(bool)),
            calendar, SLOT(setGridVisible(bool)));
    connect(navigationCheckBox, SIGNAL(toggled(bool)),
            calendar, SLOT(setNavigationBarVisible(bool)));
    connect(horizontalHeaderCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(horizontalHeaderChanged(int)));
    connect(verticalHeaderCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(verticalHeaderChanged(int)));

    QHBoxLayout *checkBoxLayout = new QHBoxLayout;
    checkBoxLayout-&amp;gt;addWidget(gridCheckBox);
    checkBoxLayout-&amp;gt;addStretch();
    checkBoxLayout-&amp;gt;addWidget(navigationCheckBox);

    QGridLayout *outerLayout = new QGridLayout;
    outerLayout-&amp;gt;addWidget(localeLabel, 0, 0);
    outerLayout-&amp;gt;addWidget(localeCombo, 0, 1);
    outerLayout-&amp;gt;addWidget(firstDayLabel, 1, 0);
    outerLayout-&amp;gt;addWidget(firstDayCombo, 1, 1);
    outerLayout-&amp;gt;addWidget(selectionModeLabel, 2, 0);
    outerLayout-&amp;gt;addWidget(selectionModeCombo, 2, 1);
    outerLayout-&amp;gt;addLayout(checkBoxLayout, 3, 0, 1, 2);
    outerLayout-&amp;gt;addWidget(horizontalHeaderLabel, 4, 0);
    outerLayout-&amp;gt;addWidget(horizontalHeaderCombo, 4, 1);
    outerLayout-&amp;gt;addWidget(verticalHeaderLabel, 5, 0);
    outerLayout-&amp;gt;addWidget(verticalHeaderCombo, 5, 1);
    generalOptionsGroupBox-&amp;gt;setLayout(outerLayout);

    firstDayChanged(firstDayCombo-&amp;gt;currentIndex());
    selectionModeChanged(selectionModeCombo-&amp;gt;currentIndex());
    horizontalHeaderChanged(horizontalHeaderCombo-&amp;gt;currentIndex());
    verticalHeaderChanged(verticalHeaderCombo-&amp;gt;currentIndex());
}

void Window::createDatesGroupBox()
{
    datesGroupBox = new QGroupBox(tr(&quot;Dates&quot;));

    minimumDateEdit = new QDateEdit;
    minimumDateEdit-&amp;gt;setDisplayFormat(&quot;MMM d yyyy&quot;);
    minimumDateEdit-&amp;gt;setDateRange(calendar-&amp;gt;minimumDate(),
                                  calendar-&amp;gt;maximumDate());
    minimumDateEdit-&amp;gt;setDate(calendar-&amp;gt;minimumDate());

    minimumDateLabel = new QLabel(tr(&quot;&amp;amp;Minimum Date:&quot;));
    minimumDateLabel-&amp;gt;setBuddy(minimumDateEdit);

    currentDateEdit = new QDateEdit;
    currentDateEdit-&amp;gt;setDisplayFormat(&quot;MMM d yyyy&quot;);
    currentDateEdit-&amp;gt;setDate(calendar-&amp;gt;selectedDate());
    currentDateEdit-&amp;gt;setDateRange(calendar-&amp;gt;minimumDate(),
                                  calendar-&amp;gt;maximumDate());

    currentDateLabel = new QLabel(tr(&quot;&amp;amp;Current Date:&quot;));
    currentDateLabel-&amp;gt;setBuddy(currentDateEdit);

    maximumDateEdit = new QDateEdit;
    maximumDateEdit-&amp;gt;setDisplayFormat(&quot;MMM d yyyy&quot;);
    maximumDateEdit-&amp;gt;setDateRange(calendar-&amp;gt;minimumDate(),
                                  calendar-&amp;gt;maximumDate());
    maximumDateEdit-&amp;gt;setDate(calendar-&amp;gt;maximumDate());

    maximumDateLabel = new QLabel(tr(&quot;Ma&amp;amp;ximum Date:&quot;));
    maximumDateLabel-&amp;gt;setBuddy(maximumDateEdit);

    connect(currentDateEdit, SIGNAL(dateChanged(QDate)),
            calendar, SLOT(setSelectedDate(QDate)));
    connect(calendar, SIGNAL(selectionChanged()),
            this, SLOT(selectedDateChanged()));
    connect(minimumDateEdit, SIGNAL(dateChanged(QDate)),
            this, SLOT(minimumDateChanged(QDate)));
    connect(maximumDateEdit, SIGNAL(dateChanged(QDate)),
            this, SLOT(maximumDateChanged(QDate)));

    QGridLayout *dateBoxLayout = new QGridLayout;
    dateBoxLayout-&amp;gt;addWidget(currentDateLabel, 1, 0);
    dateBoxLayout-&amp;gt;addWidget(currentDateEdit, 1, 1);
    dateBoxLayout-&amp;gt;addWidget(minimumDateLabel, 0, 0);
    dateBoxLayout-&amp;gt;addWidget(minimumDateEdit, 0, 1);
    dateBoxLayout-&amp;gt;addWidget(maximumDateLabel, 2, 0);
    dateBoxLayout-&amp;gt;addWidget(maximumDateEdit, 2, 1);
    dateBoxLayout-&amp;gt;setRowStretch(3, 1);

    datesGroupBox-&amp;gt;setLayout(dateBoxLayout);
}

void Window::createTextFormatsGroupBox()
{
    textFormatsGroupBox = new QGroupBox(tr(&quot;Text Formats&quot;));

    weekdayColorCombo = createColorComboBox();
    weekdayColorCombo-&amp;gt;setCurrentIndex(
            weekdayColorCombo-&amp;gt;findText(tr(&quot;Black&quot;)));

    weekdayColorLabel = new QLabel(tr(&quot;&amp;amp;Weekday color:&quot;));
    weekdayColorLabel-&amp;gt;setBuddy(weekdayColorCombo);

    weekendColorCombo = createColorComboBox();
    weekendColorCombo-&amp;gt;setCurrentIndex(
            weekendColorCombo-&amp;gt;findText(tr(&quot;Red&quot;)));

    weekendColorLabel = new QLabel(tr(&quot;Week&amp;amp;end color:&quot;));
    weekendColorLabel-&amp;gt;setBuddy(weekendColorCombo);

    headerTextFormatCombo = new QComboBox;
    headerTextFormatCombo-&amp;gt;addItem(tr(&quot;Bold&quot;));
    headerTextFormatCombo-&amp;gt;addItem(tr(&quot;Italic&quot;));
    headerTextFormatCombo-&amp;gt;addItem(tr(&quot;Plain&quot;));

    headerTextFormatLabel = new QLabel(tr(&quot;&amp;amp;Header text:&quot;));
    headerTextFormatLabel-&amp;gt;setBuddy(headerTextFormatCombo);

    firstFridayCheckBox = new QCheckBox(tr(&quot;&amp;amp;First Friday in blue&quot;));

    mayFirstCheckBox = new QCheckBox(tr(&quot;May &amp;amp;1 in red&quot;));

    connect(weekdayColorCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(weekdayFormatChanged()));
    connect(weekdayColorCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(reformatCalendarPage()));
    connect(weekendColorCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(weekendFormatChanged()));
    connect(weekendColorCombo, SIGNAL(currentIndexChanged(int)),
            this, SLOT(reformatCalendarPage()));
    connect(headerTextFormatCombo, SIGNAL(currentIndexChanged(QString)),
            this, SLOT(reformatHeaders()));
    connect(firstFridayCheckBox, SIGNAL(toggled(bool)),
            this, SLOT(reformatCalendarPage()));
    connect(mayFirstCheckBox, SIGNAL(toggled(bool)),
            this, SLOT(reformatCalendarPage()));

    QHBoxLayout *checkBoxLayout = new QHBoxLayout;
    checkBoxLayout-&amp;gt;addWidget(firstFridayCheckBox);
    checkBoxLayout-&amp;gt;addStretch();
    checkBoxLayout-&amp;gt;addWidget(mayFirstCheckBox);

    QGridLayout *outerLayout = new QGridLayout;
    outerLayout-&amp;gt;addWidget(weekdayColorLabel, 0, 0);
    outerLayout-&amp;gt;addWidget(weekdayColorCombo, 0, 1);
    outerLayout-&amp;gt;addWidget(weekendColorLabel, 1, 0);
    outerLayout-&amp;gt;addWidget(weekendColorCombo, 1, 1);
    outerLayout-&amp;gt;addWidget(headerTextFormatLabel, 2, 0);
    outerLayout-&amp;gt;addWidget(headerTextFormatCombo, 2, 1);
    outerLayout-&amp;gt;addLayout(checkBoxLayout, 3, 0, 1, 2);
    textFormatsGroupBox-&amp;gt;setLayout(outerLayout);

    weekdayFormatChanged();
    weekendFormatChanged();
    reformatHeaders();
    reformatCalendarPage();
}

QComboBox *Window::createColorComboBox()
{
    QComboBox *comboBox = new QComboBox;
    comboBox-&amp;gt;addItem(tr(&quot;Red&quot;), QColor(Qt::red));
    comboBox-&amp;gt;addItem(tr(&quot;Blue&quot;), QColor(Qt::blue));
    comboBox-&amp;gt;addItem(tr(&quot;Black&quot;), QColor(Qt::black));
    comboBox-&amp;gt;addItem(tr(&quot;Magenta&quot;), QColor(Qt::magenta));
    return comboBox;
}

</db:programlisting>
</db:article>
