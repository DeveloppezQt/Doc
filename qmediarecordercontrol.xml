<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaRecorderControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediarecordercontrol.xml">QMediaRecorderControl</db:link> class provides access to the recording functionality of a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaRecorderControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaRecorderControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Generally you will use the <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> class in application code - this class is mostly used when implementing a new <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> or if there is access to specific low level functionality not otherwise present in <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link>.</db:para>
<db:para>If a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> can record media it will implement <db:link xlink:href="qmediarecordercontrol.xml">QMediaRecorderControl</db:link>. This control provides a means to set the <db:link xlink:href="qmediarecordercontrol.xml#outputLocation">output location</db:link>, and record, pause and stop recording via the <db:link xlink:href="qmediarecordercontrol.xml#setState">setState</db:link>() method. It also provides feedback on the <db:link xlink:href="qmediarecordercontrol.xml#duration">duration</db:link> of the recording.</db:para>
<db:para>The interface name of <db:link xlink:href="qmediarecordercontrol.xml">QMediaRecorderControl</db:link> is <db:code>org.qt-project.qt.mediarecordercontrol/5.0</db:code> as defined in <db:link xlink:href="qmediarecordercontrol.xml#QMediaRecorderControl_iid">QMediaRecorderControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml#requestControl-1">QMediaService::requestControl</db:link>()</db:member>
<db:member><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaRecorderControl">
<db:title>[explicit protected] QMediaRecorderControl::QMediaRecorderControl(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaRecorderControl</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorderControl(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a media recorder control with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaRecorderControl">
<db:title>[virtual] QMediaRecorderControl::~QMediaRecorderControl()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMediaRecorderControl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaRecorderControl()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a media recorder control.</db:para>
</db:section>
<db:section xml:id="actualLocationChanged">
<db:title>void QMediaRecorderControl::actualLocationChanged(const QUrl &amp;<db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>actualLocationChanged</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void actualLocationChanged(const QUrl &amp;location)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the actual media <db:code role="parameter">location</db:code> has changed. This signal should be emitted at start of recording.</db:para>
</db:section>
<db:section xml:id="applySettings">
<db:title>[pure virtual] void QMediaRecorderControl::applySettings()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>applySettings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void applySettings() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Commits the encoder settings and performs pre-initialization to reduce delays when recording is started.</db:para>
</db:section>
<db:section xml:id="duration">
<db:title>[pure virtual] qint64 QMediaRecorderControl::duration() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>duration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 duration() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the current duration in milliseconds.</db:para>
</db:section>
<db:section xml:id="durationChanged">
<db:title>void QMediaRecorderControl::durationChanged(qint64 <db:emphasis>duration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>durationChanged</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void durationChanged(qint64 duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">duration</db:code> of the recorded media has changed.</db:para>
<db:para>This only emitted when there is a discontinuous change in the duration such as being reset to 0.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>void QMediaRecorderControl::error(int <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(int error, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that an <db:code role="parameter">error</db:code> has occurred. The <db:code role="parameter">errorString</db:code> describes the error.</db:para>
</db:section>
<db:section xml:id="isMuted">
<db:title>[pure virtual] bool QMediaRecorderControl::isMuted() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isMuted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isMuted() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the recorder is muted, and false if it is not.</db:para>
</db:section>
<db:section xml:id="mutedChanged">
<db:title>void QMediaRecorderControl::mutedChanged(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mutedChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>muted</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mutedChanged(bool muted)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">muted</db:code> state of a media recorder has changed.</db:para>
</db:section>
<db:section xml:id="outputLocation">
<db:title>[pure virtual] QUrl QMediaRecorderControl::outputLocation() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>outputLocation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl outputLocation() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current output location being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecordercontrol.xml#setOutputLocation">setOutputLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMuted">
<db:title>[pure virtual] void QMediaRecorderControl::setMuted(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setMuted</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>muted</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMuted(bool muted) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">muted</db:code> state of a media recorder.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecordercontrol.xml#isMuted">isMuted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOutputLocation">
<db:title>[pure virtual] bool QMediaRecorderControl::setOutputLocation(const QUrl &amp;<db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setOutputLocation</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setOutputLocation(const QUrl &amp;location) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the output <db:code role="parameter">location</db:code> and returns if this operation is successful. If file at the output location already exists, it should be overwritten.</db:para>
<db:para>The <db:code role="parameter">location</db:code> can be relative or empty; in this case the service should use the system specific place and file naming scheme.</db:para>
<db:para>After recording has started, the backend should report the actual file location with <db:link xlink:href="qmediarecordercontrol.xml#actualLocationChanged">actualLocationChanged</db:link>() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecordercontrol.xml#outputLocation">outputLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setState">
<db:title>[pure virtual] void QMediaRecorderControl::setState(QMediaRecorder::State <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setState</db:methodname>
<db:methodparam>
<db:type>QMediaRecorder::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setState(QMediaRecorder::State state) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the media recorder <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecordercontrol.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVolume">
<db:title>[pure virtual] void QMediaRecorderControl::setVolume(qreal <db:emphasis>volume</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setVolume</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>volume</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVolume(qreal volume) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the audio <db:code role="parameter">volume</db:code> of a media recorder control.</db:para>
<db:para>The volume is scaled linearly, ranging from <db:code>0</db:code> (silence) to <db:code>100</db:code> (full volume).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecordercontrol.xml#volume">volume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>[pure virtual] QMediaRecorder::State QMediaRecorderControl::state() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMediaRecorder::State</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorder::State state() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the current recording state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecordercontrol.xml#setState">setState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QMediaRecorderControl::stateChanged(QMediaRecorder::State <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QMediaRecorder::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QMediaRecorder::State state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">state</db:code> of a media recorder has changed.</db:para>
</db:section>
<db:section xml:id="status">
<db:title>[pure virtual] QMediaRecorder::Status QMediaRecorderControl::status() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMediaRecorder::Status</db:type>
<db:methodname>status</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorder::Status status() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the current recording status.</db:para>
</db:section>
<db:section xml:id="statusChanged">
<db:title>void QMediaRecorderControl::statusChanged(QMediaRecorder::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>statusChanged</db:methodname>
<db:methodparam>
<db:type>QMediaRecorder::Status</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void statusChanged(QMediaRecorder::Status status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">status</db:code> of a media recorder has changed.</db:para>
</db:section>
<db:section xml:id="volume">
<db:title>[pure virtual] qreal QMediaRecorderControl::volume() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>volume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal volume() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the audio volume of a media recorder control.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecordercontrol.xml#setVolume">setVolume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="volumeChanged">
<db:title>void QMediaRecorderControl::volumeChanged(qreal <db:emphasis>gain</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>volumeChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>gain</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void volumeChanged(qreal gain)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the audio <db:code role="parameter">gain</db:code> value has changed.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QMediaRecorderControl_iid">
<db:title>QMediaRecorderControl_iid</db:title>
<db:methodsynopsis>
<db:methodname>QMediaRecorderControl_iid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaRecorderControl_iid</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:code>org.qt-project.qt.mediarecordercontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qmediarecordercontrol.xml">QMediaRecorderControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
