<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioSource Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> class provides an interface for receiving audio data from an audio input device.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioSource</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioSource is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can construct an audio input with the system's default audio input device. It is also possible to create <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> with a specific <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link>. When you create the audio input, you should also send in the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> to be used for the recording (see the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> class description for details).</db:para>
<db:para>To record to a file:</db:para>
<db:para><db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> lets you record audio with an audio input device. The default constructor of this class will use the systems default audio device, but you can also specify a <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> for a specific device. You also need to pass in the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> in which you wish to record.</db:para>
<db:para>Starting up the <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> is simply a matter of calling <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>() with a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> opened for writing. For instance, to record to a file, you can:</db:para>
<db:programlisting language="cpp">QFile destinationFile;   // Class member
QAudioSource* audio; // Class member
{
    destinationFile.setFileName(&quot;/tmp/test.raw&quot;);
    destinationFile.open( QIODevice::WriteOnly | QIODevice::Truncate );

    QAudioFormat format;
    // Set up the desired format, for example:
    format.setSampleRate(8000);
    format.setChannelCount(1);
    format.setSampleFormat(QAudioFormat::UInt8);

    QAudioDevice info = QMediaDevices::defaultAudioInput();
    if (!info.isFormatSupported(format)) {
        qWarning() &amp;lt;&amp;lt; &quot;Default format not supported, trying to use the nearest.&quot;;
    }

    audio = new QAudioSource(format, this);
    connect(audio, &amp;amp;QAudioSource::stateChanged, this, &amp;amp;AudioInputExample::handleStateChanged);

    QTimer::singleShot(3000, this, &amp;amp;AudioInputExample::stopRecording);
    audio-&amp;gt;start(&amp;amp;destinationFile);
    // Records audio for 3000ms
}
</db:programlisting>
<db:para>This will start recording if the format specified is supported by the input device (you can check this with <db:link xlink:href="qaudiodevice.xml#isFormatSupported">QAudioDevice::isFormatSupported</db:link>(). In case there are any snags, use the <db:link xlink:href="qaudiosource.xml#error">error</db:link>() function to check what went wrong. We stop recording in the <db:code>stopRecording()</db:code> slot.</db:para>
<db:programlisting language="cpp">void AudioInputExample::stopRecording()
{
    audio-&amp;gt;stop();
    destinationFile.close();
    delete audio;
}
</db:programlisting>
<db:para>At any point in time, <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> will be in one of four states: active, suspended, stopped, or idle. These states are specified by the <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::State</db:link> enum. You can request a state change directly through <db:link xlink:href="qaudiosource.xml#suspend">suspend</db:link>(), <db:link xlink:href="qaudiosource.xml#resume">resume</db:link>(), <db:link xlink:href="qaudiosource.xml#stop">stop</db:link>(), <db:link xlink:href="qaudiosource.xml#reset">reset</db:link>(), and <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>(). The current state is reported by <db:link xlink:href="qaudiosource.xml#state">state</db:link>(). <db:link xlink:href="qaudiosink.xml">QAudioSink</db:link> will also signal you when the state changes (<db:link xlink:href="qaudiosource.xml#stateChanged">stateChanged</db:link>()).</db:para>
<db:para><db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> provides several ways of measuring the time that has passed since the <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>() of the recording. The <db:code>processedUSecs()</db:code> function returns the length of the stream in microseconds written, i.e., it leaves out the times the audio input was suspended or idle. The <db:link xlink:href="qaudiosource.xml#elapsedUSecs">elapsedUSecs</db:link>() function returns the time elapsed since <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>() was called regardless of which states the <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> has been in.</db:para>
<db:para>If an error should occur, you can fetch its reason with <db:link xlink:href="qaudiosource.xml#error">error</db:link>(). The possible error reasons are described by the <db:link xlink:href="qtaudio.xml#Error-enum">QtAudio::Error</db:link> enum. The <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> will enter the <db:link xlink:href="qtaudio.xml#State-enum">StoppedState</db:link> when an error is encountered. Connect to the <db:link xlink:href="qaudiosource.xml#stateChanged">stateChanged</db:link>() signal to handle the error:</db:para>
<db:programlisting language="cpp">void AudioInputExample::handleStateChanged(QAudio::State newState)
{
    switch (newState) {
        case QAudio::StoppedState:
            if (audio-&amp;gt;error() != QAudio::NoError) {
                // Error handling
            } else {
                // Finished recording
            }
            break;

        case QAudio::ActiveState:
            // Started recording - read from IO device
            break;

        default:
            // ... other cases as appropriate
            break;
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiosink.xml">QAudioSink</db:link></db:member>
<db:member><db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioSource">
<db:title>[explicit] QAudioSource::QAudioSource(const QAudioFormat &amp;<db:emphasis>format</db:emphasis> = QAudioFormat(), QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioSource</db:methodname>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QAudioFormat()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioSource(const QAudioFormat &amp;format, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a new audio input and attach it to <db:code role="parameter">parent</db:code>. The default audio input device is used with the output <db:code role="parameter">format</db:code> parameters.</db:para>
</db:section>
<db:section xml:id="QAudioSource-1">
<db:title>[explicit] QAudioSource::QAudioSource(const QAudioDevice &amp;<db:emphasis>audioDevice</db:emphasis>, const QAudioFormat &amp;<db:emphasis>format</db:emphasis> = QAudioFormat(), QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioSource</db:methodname>
<db:methodparam>
<db:type>const QAudioDevice &amp;</db:type>
<db:parameter>audioDevice</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QAudioFormat()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioSource(const QAudioDevice &amp;audioDevice, const QAudioFormat &amp;format, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a new audio input and attach it to <db:code role="parameter">parent</db:code>. The device referenced by <db:code role="parameter">audioDevice</db:code> is used with the input <db:code role="parameter">format</db:code> parameters.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioSource">
<db:title>[virtual] QAudioSource::~QAudioSource()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAudioSource</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAudioSource()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroy this audio input.</db:para>
</db:section>
<db:section xml:id="bufferSize">
<db:title>qsizetype QAudioSource::bufferSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>bufferSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype bufferSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the audio buffer size in bytes.</db:para>
<db:para>If called before <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>(), returns platform default value. If called before <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>() but <db:link xlink:href="qaudiosource.xml#setBufferSize">setBufferSize</db:link>() was called prior, returns value set by <db:link xlink:href="qaudiosource.xml#setBufferSize">setBufferSize</db:link>(). If called after <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>(), returns the actual buffer size being used. This may not be what was set previously by <db:link xlink:href="qaudiosource.xml#setBufferSize">setBufferSize</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiosource.xml#setBufferSize">setBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesAvailable">
<db:title>qsizetype QAudioSource::bytesAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>bytesAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype bytesAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the amount of audio data available to read in bytes.</db:para>
<db:para>Note: returned value is only valid while in <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::ActiveState</db:link> or <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::IdleState</db:link> state, otherwise returns zero.</db:para>
</db:section>
<db:section xml:id="elapsedUSecs">
<db:title>qint64 QAudioSource::elapsedUSecs() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>elapsedUSecs</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 elapsedUSecs() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the microseconds since <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>() was called, including time in Idle and Suspend states.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QtAudio::Error QAudioSource::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QtAudio::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtAudio::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error state.</db:para>
</db:section>
<db:section xml:id="format">
<db:title>QAudioFormat QAudioSource::format() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAudioFormat</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat format() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> being used.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QAudioSource::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the audio source is <db:code>null</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="processedUSecs">
<db:title>qint64 QAudioSource::processedUSecs() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>processedUSecs</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 processedUSecs() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the amount of audio data processed since <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>() was called in microseconds.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QAudioSource::reset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Drops all audio data in the buffers, resets buffers to zero.</db:para>
</db:section>
<db:section xml:id="resume">
<db:title>void QAudioSource::resume()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resume()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resumes processing audio data after a <db:link xlink:href="qaudiosource.xml#suspend">suspend</db:link>().</db:para>
<db:para>Sets <db:link xlink:href="qaudiosource.xml#error">error</db:link>() to <db:link xlink:href="qtaudio.xml#Error-enum">QtAudio::NoError</db:link>. Sets <db:link xlink:href="qaudiosource.xml#state">state</db:link>() to <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::ActiveState</db:link> if you previously called start(<db:link xlink:href="qiodevice.xml">QIODevice</db:link>*). Sets <db:link xlink:href="qaudiosource.xml#state">state</db:link>() to <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::IdleState</db:link> if you previously called <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>(). emits <db:link xlink:href="qaudiosource.xml#stateChanged">stateChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="setBufferSize">
<db:title>void QAudioSource::setBufferSize(qsizetype <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBufferSize</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBufferSize(qsizetype value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the audio buffer size to <db:code role="parameter">value</db:code> bytes.</db:para>
<db:para>Note: This function can be called anytime before <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>(), calls to this are ignored after <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>(). It should not be assumed that the buffer size set is the actual buffer size used, calling <db:link xlink:href="qaudiosource.xml#bufferSize">bufferSize</db:link>() anytime after <db:link xlink:href="qaudiosource.xml#start-1">start</db:link>() will return the actual buffer size being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiosource.xml#bufferSize">bufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVolume">
<db:title>void QAudioSource::setVolume(qreal <db:emphasis>volume</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVolume</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>volume</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVolume(qreal volume)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the input volume to <db:code role="parameter">volume</db:code>.</db:para>
<db:para>The volume is scaled linearly from <db:code>0.0</db:code> (silence) to <db:code>1.0</db:code> (full volume). Values outside this range will be clamped.</db:para>
<db:para>If the device does not support adjusting the input volume then <db:code role="parameter">volume</db:code> will be ignored and the input volume will remain at 1.0.</db:para>
<db:para>The default volume is <db:code>1.0</db:code>.</db:para>
<db:para>Note: Adjustments to the volume will change the volume of this audio stream, not the global volume.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiosource.xml#volume">volume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QAudioSource::start(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts transferring audio data from the system's audio input to the <db:code role="parameter">device</db:code>. The <db:code role="parameter">device</db:code> must have been opened in the <db:link xlink:href="qiodevicebase.xml#OpenModeFlag-enum">WriteOnly</db:link>, <db:link xlink:href="qiodevicebase.xml#OpenModeFlag-enum">Append</db:link> or <db:link xlink:href="qiodevicebase.xml#OpenModeFlag-enum">ReadWrite</db:link> modes.</db:para>
<db:para>If the <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> is able to successfully get audio data, <db:link xlink:href="qaudiosource.xml#state">state</db:link>() returns either <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::ActiveState</db:link> or <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::IdleState</db:link>, <db:link xlink:href="qaudiosource.xml#error">error</db:link>() returns <db:link xlink:href="qtaudio.xml#Error-enum">QtAudio::NoError</db:link> and the <db:link xlink:href="qaudiosource.xml#stateChanged">stateChanged</db:link>() signal is emitted.</db:para>
<db:para>If a problem occurs during this process, <db:link xlink:href="qaudiosource.xml#error">error</db:link>() returns <db:link xlink:href="qtaudio.xml#Error-enum">QtAudio::OpenError</db:link>, <db:link xlink:href="qaudiosource.xml#state">state</db:link>() returns <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::StoppedState</db:link> and the <db:link xlink:href="qaudiosource.xml#stateChanged">stateChanged</db:link>() signal is emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start-1">
<db:title>QIODevice *QAudioSource::start()</db:title>
<db:methodsynopsis>
<db:type>QIODevice *</db:type>
<db:methodname>start</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * start()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the internal <db:link xlink:href="qiodevice.xml">QIODevice</db:link> being used to transfer data from the system's audio input. The device will already be open and <db:link xlink:href="qiodevice.xml#read">read</db:link>() can read data directly from it.</db:para>
<db:note>
<db:para>The pointer will become invalid after the stream is stopped or if you start another stream.</db:para>
</db:note>
<db:para>If the <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> is able to access the system's audio device, <db:link xlink:href="qaudiosource.xml#state">state</db:link>() returns <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::IdleState</db:link>, <db:link xlink:href="qaudiosource.xml#error">error</db:link>() returns <db:link xlink:href="qtaudio.xml#Error-enum">QtAudio::NoError</db:link> and the <db:link xlink:href="qaudiosource.xml#stateChanged">stateChanged</db:link>() signal is emitted.</db:para>
<db:para>If a problem occurs during this process, <db:link xlink:href="qaudiosource.xml#error">error</db:link>() returns <db:link xlink:href="qtaudio.xml#Error-enum">QtAudio::OpenError</db:link>, <db:link xlink:href="qaudiosource.xml#state">state</db:link>() returns <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::StoppedState</db:link> and the <db:link xlink:href="qaudiosource.xml#stateChanged">stateChanged</db:link>() signal is emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QtAudio::State QAudioSource::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QtAudio::State</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtAudio::State state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the state of audio processing.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QAudioSource::stateChanged(QtAudio::State <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QtAudio::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QtAudio::State state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the device <db:code role="parameter">state</db:code> has changed.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qtaudio.xml">QtAudio</db:link> namespace was named QAudio up to and including Qt 6.6. String-based connections to this signal have to use <db:code>QAudio::State</db:code> as the parameter type: <db:code>connect(source, SIGNAL(stateChanged(QAudio::State)), ...);</db:code></db:para>
</db:note>
</db:section>
<db:section xml:id="stop">
<db:title>void QAudioSource::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops the audio input, detaching from the system resource.</db:para>
<db:para>Sets <db:link xlink:href="qaudiosource.xml#error">error</db:link>() to <db:link xlink:href="qtaudio.xml#Error-enum">QtAudio::NoError</db:link>, <db:link xlink:href="qaudiosource.xml#state">state</db:link>() to <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::StoppedState</db:link> and emit <db:link xlink:href="qaudiosource.xml#stateChanged">stateChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="suspend">
<db:title>void QAudioSource::suspend()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>suspend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void suspend()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops processing audio data, preserving buffered audio data.</db:para>
<db:para>Sets <db:link xlink:href="qaudiosource.xml#error">error</db:link>() to <db:link xlink:href="qtaudio.xml#Error-enum">QtAudio::NoError</db:link>, <db:link xlink:href="qaudiosource.xml#state">state</db:link>() to <db:link xlink:href="qtaudio.xml#State-enum">QtAudio::SuspendedState</db:link> and emit <db:link xlink:href="qaudiosource.xml#stateChanged">stateChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="volume">
<db:title>qreal QAudioSource::volume() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>volume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal volume() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the input volume.</db:para>
<db:para>If the device does not support adjusting the input volume the returned value will be 1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiosource.xml#setVolume">setVolume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
