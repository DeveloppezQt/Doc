<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Incompatible type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>[incompatible-type] An object, value, or expression is used on an incompatible type.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This warning category is spelled [incompatible-type] by qmllint.</db:para>
<db:section xml:id="cannot-assign-to-default-property-of-incompatible-type">
<db:title>Cannot assign to default property of incompatible type</db:title>
<db:section xml:id="what-happened">
<db:title>What happened?</db:title>
<db:para>You assigned an object to a <db:link xlink:href="qtqml-syntax-objectattributes.xml#default-properties">default property</db:link> of an incompatible type.</db:para>
</db:section>
<db:section xml:id="why-is-this-bad">
<db:title>Why is this bad?</db:title>
<db:para>The QML engine will not be able to assign the object at runtime.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    component MyType: QtObject {
        default property list&lt;Item&gt; myDefaultProperty
    }

    MyType {
        QtObject {} // note: QtObject does not inherit from Item
    }
}
</db:programlisting>
<db:para>To fix this warning, bind a compatible type to the property or, if you are the author of the default property, change the type in the definition:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    component MyType: QtObject {
        default property list&lt;Item&gt; myDefaultProperty
    }

    MyType {
        Item {}
    }

    component AlternativeMyType: QtObject {
        default property list&lt;QtObject&gt; myDefaultProperty
    }

    AlternativeMyType {
        QtObject {} // is ok for AlternativeMyType
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="on-binding-for-property-has-wrong-type">
<db:title>On-binding for property has wrong type</db:title>
<db:section xml:id="on-binding-for-property-has-wrong-type-what-happened-5">
<db:title>What happened?</db:title>
<db:para>You used an invalid <db:link xlink:href="qtqml-cppintegration-definetypes.xml#property-modifier-types">property modifier type</db:link>.</db:para>
</db:section>
<db:section xml:id="on-binding-for-property-has-wrong-type-why-is-this-bad-6">
<db:title>Why is this bad?</db:title>
<db:para>The QML engine will not be able to use the property modifier type at runtime.</db:para>
</db:section>
<db:section xml:id="on-binding-for-property-has-wrong-type-example-7">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    property int xxx
    Item on xxx { ... }
}
</db:programlisting>
<db:para>To fix this warning, remove the on or use a valid <db:link xlink:href="qtqml-cppintegration-definetypes.xml#property-modifier-types">property modifier type</db:link>:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    property int xxx
    Item { ... }

    // Alternative: use a valid property modifier type
    NumberAnimation on xxx { ... }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="construction-from-string-is-deprecated-use-structured-value-type-construction-instead">
<db:title>Construction from string is deprecated; Use structured value type construction instead</db:title>
<db:section xml:id="construction-from-string-is-deprecated-use-structured-value-type-construction-instead-what-happened-9">
<db:title>What happened?</db:title>
<db:para>You constructed a <db:link xlink:href="qqmlintegration-h.xml#QML_STRUCTURED_VALUE">QML_STRUCTURED_VALUE</db:link> using a string.</db:para>
</db:section>
<db:section xml:id="construction-from-string-is-deprecated-use-structured-value-type-construction-instead-why-is-this-bad-10">
<db:title>Why is this bad?</db:title>
<db:para>This is deprecated and prone to typos.</db:para>
</db:section>
<db:section xml:id="construction-from-string-is-deprecated-use-structured-value-type-construction-instead-example-11">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    property point p: &quot;5, 6&quot;
}
</db:programlisting>
<db:para>To fix this warning, populate the structured value type as explained in the <db:link xlink:href="qqmlintegration-h.xml#QML_STRUCTURED_VALUE">QML_STRUCTURED_VALUE</db:link> description instead of binding a string to the property:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    property point p: ({ x: 5, y: 6 })
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="function-without-return-type-annotation-returns">
<db:title>Function without return type annotation returns</db:title>
<db:section xml:id="function-without-return-type-annotation-returns-what-happened-13">
<db:title>What happened?</db:title>
<db:para>You returned a value from a function without return type annotation.</db:para>
</db:section>
<db:section xml:id="function-without-return-type-annotation-returns-why-is-this-bad-14">
<db:title>Why is this bad?</db:title>
<db:para>You annotated the function to not return anything so the function should not return anything. The QML tooling will not be able to process the method and the QML engine will ignore the returned value in a future Qt version.</db:para>
</db:section>
<db:section xml:id="function-without-return-type-annotation-returns-example-15">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    function f(x: int) {
        ...
        return x
    }
}
</db:programlisting>
<db:para>To fix this warning, adapt the function signature to the new return type or remove the return value:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    function f(x: int): int {
        ...
        return x
    }
    function alternativeF(x: int) {
        ...
        return
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="cannot-assign-binding-object-literal">
<db:title>Cannot assign binding/object/literal</db:title>
<db:section xml:id="cannot-assign-binding-object-literal-what-happened-17">
<db:title>What happened?</db:title>
<db:para>You bound an object, literal, or expression to a property of an incompatible type.</db:para>
</db:section>
<db:section xml:id="cannot-assign-binding-object-literal-why-is-this-bad-18">
<db:title>Why is this bad?</db:title>
<db:para>The QML engine will not be able to assign the object, literal, or expression at runtime.</db:para>
</db:section>
<db:section xml:id="cannot-assign-binding-object-literal-example-19">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    property date xxx: 42
}
</db:programlisting>
<db:para>To fix this warning, bind an object, value, or expression of a compatible type:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    property date xxx: new Date()
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
