<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtCompare&gt; - Classes and helpers for defining comparison operators</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The &lt;<db:link xlink:href="qtcompare.xml">QtCompare</db:link>&gt; header file defines Qt::*_ordering types and helper macros for defining comparison operators.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtCompare</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This header introduces the <db:link xlink:href="qt-partial-ordering.xml">Qt::partial_ordering</db:link>, <db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link>, and <db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link> types, which are Qt's C++17 backports of std::*_ordering types.</db:para>
<db:para>This header also contains functions for implementing three-way comparison in C++17.</db:para>
<db:para>The Qt::compareThreeWay() function overloads provide three-way comparison for built-in C++ types.</db:para>
<db:para>The <db:link xlink:href="qtcompare.xml#qCompareThreeWay">qCompareThreeWay</db:link>() template serves as a generic three-way comparison implementation. It relies on Qt::compareThreeWay() and free compareThreeWay() functions in its implementation.</db:para>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="compareThreeWay">
<db:title>[constexpr noexcept, since 6.7] Qt::strong_ordering compareThreeWay(Enum <db:emphasis>lhs</db:emphasis>, Enum <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of enum types.</db:para>
<db:para>This function converts Enum to its underlying type and calls the overload for integral types.</db:para>
<db:para>Returns an instance of <db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if Enum is an enum type.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
<db:section xml:id="compareThreeWay-1">
<db:title>[constexpr noexcept, since 6.7] auto compareThreeWay(FloatType <db:emphasis>lhs</db:emphasis>, IntType <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of floating point and integral types.</db:para>
<db:para>This function converts <db:code role="parameter">rhs</db:code> to FloatType and calls the overload for floating-point types.</db:para>
<db:para>Returns an instance of <db:link xlink:href="qt-partial-ordering.xml">Qt::partial_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>. If <db:code role="parameter">lhs</db:code> is not a number (NaN), <db:link xlink:href="qt-partial-ordering.xml#unordered-var">Qt::partial_ordering::unordered</db:link> is returned.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if FloatType is a built-in floating-point type and IntType is a built-in integral type.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
<db:section xml:id="compareThreeWay-2">
<db:title>[constexpr noexcept, since 6.7] auto compareThreeWay(IntType <db:emphasis>lhs</db:emphasis>, FloatType <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of integral and floating point types.</db:para>
<db:para>This function converts <db:code role="parameter">lhs</db:code> to FloatType and calls the overload for floating-point types.</db:para>
<db:para>Returns an instance of <db:link xlink:href="qt-partial-ordering.xml">Qt::partial_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>. If <db:code role="parameter">rhs</db:code> is not a number (NaN), <db:link xlink:href="qt-partial-ordering.xml#unordered-var">Qt::partial_ordering::unordered</db:link> is returned.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if IntType is a built-in integral type and FloatType is a built-in floating-point type.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
<db:section xml:id="compareThreeWay-3">
<db:title>[constexpr noexcept, since 6.7] auto compareThreeWay(LeftFloat <db:emphasis>lhs</db:emphasis>, RightFloat <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of floating point types.</db:para>
<db:para>Returns lhs &lt;=&gt; rhs, provided LeftFloat and RightFloat are built-in floating-point types. Unlike operator&lt;=&gt;(), this function template is also available in C++17. See <db:link xlink:href="https://en.cppreference.com/w/cpp/language/operator_comparison#Three-way_comparison">cppreference</db:link> for more details.</db:para>
<db:para>This function can also be used in custom compareThreeWay() functions, when ordering members of a custom class represented by built-in types:</db:para>
<db:programlisting language="cpp">class MyClass {
public:
    ...
private:
    double value;
    ...
    friend Qt::partial_ordering
    compareThreeWay(const MyClass &amp;lhs, const MyClass &amp;rhs) noexcept
    { return Qt::compareThreeWay(lhs.value, rhs.value); }
    Q_DECLARE_PARTIALLY_ORDERED(MyClass)
};
</db:programlisting>
<db:para>Returns an instance of <db:link xlink:href="qt-partial-ordering.xml">Qt::partial_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>. If <db:code role="parameter">lhs</db:code> or <db:code role="parameter">rhs</db:code> is not a number (NaN), <db:link xlink:href="qt-partial-ordering.xml#unordered-var">Qt::partial_ordering::unordered</db:link> is returned.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if both LeftFloat and RightFloat are built-in floating-point types.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
<db:section xml:id="compareThreeWay-4">
<db:title>[constexpr noexcept, since 6.7] auto compareThreeWay(LeftInt <db:emphasis>lhs</db:emphasis>, RightInt <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of integral types.</db:para>
<db:para>Returns lhs &lt;=&gt; rhs, provided LeftInt and RightInt are built-in integral types. Unlike operator&lt;=&gt;(), this function template is also available in C++17. See <db:link xlink:href="https://en.cppreference.com/w/cpp/language/operator_comparison#Three-way_comparison">cppreference</db:link> for more details.</db:para>
<db:para>This function can also be used in custom compareThreeWay() functions, when ordering members of a custom class represented by built-in types:</db:para>
<db:programlisting language="cpp">class MyClass {
public:
    ...
private:
    int value;
    ...
    friend Qt::strong_ordering
    compareThreeWay(const MyClass &amp;lhs, const MyClass &amp;rhs) noexcept
    { return Qt::compareThreeWay(lhs.value, rhs.value); }
    Q_DECLARE_STRONGLY_ORDERED(MyClass)
};
</db:programlisting>
<db:para>Returns an instance of <db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if both LeftInt and RightInt are built-in integral types.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
<db:section xml:id="compareThreeWay-5">
<db:title>[constexpr noexcept, since 6.8] Qt::strong_ordering compareThreeWay(Qt::totally_ordered_wrapper&lt;T *&gt; <db:emphasis>lhs</db:emphasis>, Qt::totally_ordered_wrapper&lt;U *&gt; <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of pointers that are wrapped into <db:link xlink:href="qt-totally-ordered-wrapper.xml">Qt::totally_ordered_wrapper</db:link>. Uses <db:link xlink:href="https://en.cppreference.com/w/cpp/language/operator_comparison#Pointer_total_order">strict total order over pointers</db:link> when doing the comparison.</db:para>
<db:para>Returns an instance of <db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if T and U are the same type, or base and derived types.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
</db:section>
<db:section xml:id="compareThreeWay-6">
<db:title>[constexpr noexcept, since 6.8] Qt::strong_ordering compareThreeWay(Qt::totally_ordered_wrapper&lt;T *&gt; <db:emphasis>lhs</db:emphasis>, U *<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of a pointer wrapped into <db:link xlink:href="qt-totally-ordered-wrapper.xml">Qt::totally_ordered_wrapper</db:link> with a normal pointer. Uses <db:link xlink:href="https://en.cppreference.com/w/cpp/language/operator_comparison#Pointer_total_order">strict total order over pointers</db:link> when doing the comparison.</db:para>
<db:para>Returns an instance of <db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if T and U are the same type, or base and derived types.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
</db:section>
<db:section xml:id="compareThreeWay-7">
<db:title>[constexpr noexcept, since 6.8] Qt::strong_ordering compareThreeWay(Qt::totally_ordered_wrapper&lt;T *&gt; <db:emphasis>lhs</db:emphasis>, std::nullptr_t <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of a pointer wrapped into <db:link xlink:href="qt-totally-ordered-wrapper.xml">Qt::totally_ordered_wrapper</db:link> with std::nullptr_t.</db:para>
<db:para>Returns an instance of <db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="compareThreeWay-8">
<db:title>[constexpr noexcept, since 6.8] Qt::strong_ordering compareThreeWay(U *<db:emphasis>lhs</db:emphasis>, Qt::totally_ordered_wrapper&lt;T *&gt; <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of a normal pointer with a pointer wrapped into <db:link xlink:href="qt-totally-ordered-wrapper.xml">Qt::totally_ordered_wrapper</db:link>. Uses <db:link xlink:href="https://en.cppreference.com/w/cpp/language/operator_comparison#Pointer_total_order">strict total order over pointers</db:link> when doing the comparison.</db:para>
<db:para>Returns an instance of <db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if T and U are the same type, or base and derived types.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
</db:section>
<db:section xml:id="compareThreeWay-10">
<db:title>[constexpr noexcept, since 6.8] Qt::strong_ordering compareThreeWay(std::nullptr_t <db:emphasis>lhs</db:emphasis>, Qt::totally_ordered_wrapper&lt;T *&gt; <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of std::nullptr_t with a pointer wrapped into <db:link xlink:href="qt-totally-ordered-wrapper.xml">Qt::totally_ordered_wrapper</db:link>.</db:para>
<db:para>Returns an instance of <db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="qCompareThreeWay">
<db:title>[since 6.7] auto qCompareThreeWay(const LeftType &amp;<db:emphasis>lhs</db:emphasis>, const RightType &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Performs the three-way comparison on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> and returns one of the Qt ordering types as a result. This function is available for both C++17 and C++20.</db:para>
<db:para>The actual returned type depends on LeftType and RightType.</db:para>
<db:note>
<db:para>This function template is only available when compareThreeWay() is implemented for the (LeftType, RightType) pair or the reversed (RightType, LeftType) pair.</db:para>
</db:note>
<db:para>This method is equivalent to</db:para>
<db:programlisting language="cpp">using Qt::compareThreeWay;
return compareThreeWay(lhs, rhs);
</db:programlisting>
<db:para>where Qt::compareThreeWay is the Qt implementation of three-way comparison for built-in types.</db:para>
<db:para>The free compareThreeWay functions should provide three-way comparison for custom types. The functions should return one of the Qt ordering types.</db:para>
<db:para>Qt provides compareThreeWay implementation for some of its types.</db:para>
<db:note>
<db:para><db:emphasis role="bold">Do not</db:emphasis> re-implement compareThreeWay() for Qt types, as more Qt types will get support for it in future Qt releases.</db:para>
</db:note>
<db:para>Use this function primarly in generic code, when you know nothing about LeftType and RightType.</db:para>
<db:para>If you know the types, use</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt::compareThreeWay for built-in types</db:para>
</db:listitem>
<db:listitem>
<db:para>compareThreeWay for custom types</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Use operator&lt;=&gt;() directly in code that will only be compiled with C++20 or later.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-partial-ordering.xml">Qt::partial_ordering</db:link></db:member>
<db:member><db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link></db:member>
<db:member><db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for &lt;QtCompare&gt;</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtcompare.xml">&lt;QtCompare&gt;</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-function-documentation">
<db:title>Obsolete Function Documentation</db:title>
<db:section xml:id="compareThreeWay-9">
<db:title>[constexpr noexcept, since 6.7, deprecated in 6.8] Qt::strong_ordering compareThreeWay(const LeftType *<db:emphasis>lhs</db:emphasis>, const RightType *<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This function is deprecated since 6.8. We strongly advise against using it in new code.</db:para>
<db:para>Wrap the pointers into <db:link xlink:href="qt-totally-ordered-wrapper.xml">Qt::totally_ordered_wrapper</db:link> and use the respective Qt::compareThreeWay() overload instead.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Implements three-way comparison of pointers.</db:para>
<db:para>Returns an instance of <db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link> that represents the relation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para>Participates in overload resolution only if LeftType and RightType are the same type, or base and derived types. It is also used to compare any pointer to std::nullptr_t.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
