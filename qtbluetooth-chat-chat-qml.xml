<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Bluetooth QML Chat Example</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example demonstrating communication through Bluetooth QML API.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the QtBluetooth module.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.2
import QtBluetooth 5.3

Item {
    id: top

    Component.onCompleted: state = &quot;begin&quot;

    property string remoteDeviceName: &quot;&quot;
    property bool serviceFound: false

    BluetoothDiscoveryModel {
        id: btModel
        running: true
        discoveryMode: BluetoothDiscoveryModel.MinimalServiceDiscovery
        onRunningChanged : {
            if (!btModel.running &amp;&amp; top.state == &quot;begin&quot; &amp;&amp; !serviceFound) {
                searchBox.animationRunning = false;
                searchBox.appendText(&quot;\nNo service found. \n\nPlease start server\nand restart app.&quot;)
            }
        }

        onErrorChanged: {
            if (error != BluetoothDiscoveryModel.NoError &amp;&amp; !btModel.running) {
                searchBox.animationRunning = false
                searchBox.appendText(&quot;\n\nDiscovery failed.\nPlease ensure Bluetooth is available.&quot;)
            }
        }

        onServiceDiscovered: {
            if (serviceFound)
                return
            serviceFound = true
            console.log(&quot;Found new service &quot; + service.deviceAddress + &quot; &quot; + service.deviceName + &quot; &quot; + service.serviceName);
            searchBox.appendText(&quot;\nConnecting to server...&quot;)
            remoteDeviceName = service.deviceName
            socket.setService(service)
        }
        uuidFilter: &quot;e8e10f95-1a70-4b27-9ccf-02010264e9c8&quot;
    }

    BluetoothSocket {
        id: socket
        connected: true

        onSocketStateChanged: {
            console.log(&quot;Connected to server&quot;)
            top.state = &quot;chatActive&quot;
        }
        onStringDataChanged: {
            console.log(&quot;Received data: &quot; )
            var data = remoteDeviceName + &quot;: &quot; + socket.stringData;
            data = data.substring(0, data.indexOf('\n'))
            chatContent.append({content: data})
            console.log(data);
        }
    }

    ListModel {
        id: chatContent
        ListElement {
            content: &quot;Connected to chat server&quot;
        }
    }

    Rectangle {
        id: background
        z: 0
        anchors.fill: parent
        color: &quot;#5d5b59&quot;
    }

    Search {
        id: searchBox
        anchors.centerIn: top
        opacity: 1
    }

    Rectangle {
        id: chatBox
        opacity: 0
        anchors.centerIn: top

        color: &quot;#5d5b59&quot;
        border.color: &quot;black&quot;
        border.width: 1
        radius: 5
        anchors.fill: parent

        function sendMessage()
        {
            // toogle focus to force end of input method composer
            var hasFocus = input.focus;
            input.focus = false;

            var data = input.text
            input.clear()
            chatContent.append({content: &quot;Me: &quot; + data})
            socket.stringData = data
            chatView.positionViewAtEnd()

            input.focus = hasFocus;
        }

        Item {
            anchors.fill: parent
            anchors.margins: 10

            InputBox {
                id: input
                Keys.onReturnPressed: chatBox.sendMessage()
                height: sendButton.height
                width: parent.width - sendButton.width - 15
                anchors.left: parent.left
            }

            Button {
                id: sendButton
                anchors.right: parent.right
                label: &quot;Send&quot;
                onButtonClick: chatBox.sendMessage()
            }

            Rectangle {
                height: parent.height - input.height - 15
                width: parent.width;
                color: &quot;#d7d6d5&quot;
                anchors.bottom: parent.bottom
                border.color: &quot;black&quot;
                border.width: 1
                radius: 5

                ListView {
                    id: chatView
                    width: parent.width-5
                    height: parent.height-5
                    anchors.centerIn: parent
                    model: chatContent
                    clip: true
                    delegate: Component {
                        Text {
                            font.pointSize: 14
                            text: modelData
                        }
                    }
                }
            }
        }
    }

    states: [
        State {
            name: &quot;begin&quot;
            PropertyChanges { target: searchBox; opacity: 1 }
            PropertyChanges { target: chatBox; opacity: 0 }
        },
        State {
            name: &quot;chatActive&quot;
            PropertyChanges { target: searchBox; opacity: 0 }
            PropertyChanges { target: chatBox; opacity: 1 }
        }
    ]
}

</db:programlisting>
</db:article>
