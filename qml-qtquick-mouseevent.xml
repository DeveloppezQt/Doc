<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MouseEvent QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides information about a mouse event.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>MouseEvent is part of <db:simplelist><db:member>qtquick-input-events</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The position of the mouse can be found via the <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link> and <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link> properties. The button that caused the event is available via the <db:link xlink:href="qml-qtquick-mouseevent.xml#button-prop">button</db:link> property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="x-prop">
<db:title>x : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>x</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">y : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>y</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties hold the coordinates of the position supplied by the mouse event.</db:para>
</db:section>
<db:section xml:id="accepted-prop">
<db:title>accepted : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>accepted</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Setting <db:code role="parameter">accepted</db:code> to true prevents the mouse event from being propagated to items below this item.</db:para>
<db:para>Generally, if the item acts on the mouse event then it should be accepted so that items lower in the stacking order do not also respond to the same event.</db:para>
</db:section>
<db:section xml:id="button-prop">
<db:title>button : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>button</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the button that caused the event. It can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">Qt.LeftButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.RightButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.MiddleButton</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="buttons-prop">
<db:title>buttons : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>buttons</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the mouse buttons pressed when the event was generated. For mouse move events, this is all buttons that are pressed down. For mouse press and double click events this includes the button that caused the event. For mouse release events this excludes the button that caused the event.</db:para>
<db:para>It contains a bitwise combination of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">Qt.LeftButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.RightButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.MiddleButton</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="flags-prop">
<db:title>[since 5.11] flags : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>flags</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the flags that provide additional information about the mouse event.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">Qt.MouseEventCreatedDoubleClick</db:link> - Indicates that Qt has created a double click event from this event. This flag is set in the event originating from a button press, and not in the resulting double click event.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="modifiers-prop">
<db:title>modifiers : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>modifiers</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the keyboard modifier flags that existed immediately before the event occurred.</db:para>
<db:para>It contains a bitwise combination of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">Qt.NoModifier</db:link> - No modifier key is pressed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.ShiftModifier</db:link> - A Shift key on the keyboard is pressed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.ControlModifier</db:link> - A Ctrl key on the keyboard is pressed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.AltModifier</db:link> - An Alt key on the keyboard is pressed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.MetaModifier</db:link> - A Meta key on the keyboard is pressed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.KeypadModifier</db:link> - A keypad button is pressed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, to react to a Shift key + Left mouse button click:</db:para>
<db:programlisting language="qml">MouseArea {
    onClicked: {
        if ((mouse.button == Qt.LeftButton) &amp;amp;&amp;amp; (mouse.modifiers &amp;amp; Qt.ShiftModifier))
            doSomething();
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="source-prop">
<db:title>[since 5.7] source : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the source of the mouse event.</db:para>
<db:para>The mouse event source can be used to distinguish between genuine and artificial mouse events. When using other pointing devices such as touchscreens and graphics tablets, if the application does not make use of the actual touch or tablet events, mouse events may be synthesized by the operating system or by Qt itself.</db:para>
<db:para>The value can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">Qt.MouseEventNotSynthesized</db:link> - The most common value. On platforms where such information is available, this value indicates that the event represents a genuine mouse event from the system.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.MouseEventSynthesizedBySystem</db:link> - Indicates that the mouse event was synthesized from a touch or tablet event by the platform.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.MouseEventSynthesizedByQt</db:link> - Indicates that the mouse event was synthesized from an unhandled touch or tablet event by Qt.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt.MouseEventSynthesizedByApplication</db:link> - Indicates that the mouse event was synthesized by the application. This allows distinguishing application-generated mouse events from the ones that are coming from the system or are synthesized by Qt.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, to react only to events which come from an actual mouse:</db:para>
<db:programlisting language="qml">MouseArea {
    onPressed: if (mouse.source !== Qt.MouseEventNotSynthesized) {
        mouse.accepted = false
    }

    onClicked: doSomething()
}
</db:programlisting>
<db:para>If the handler for the press event rejects the event, it will be propagated further, and then another Item underneath can handle synthesized events from touchscreens. For example, if a Flickable is used underneath (and the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is not a child of the Flickable), it can be useful for the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to handle genuine mouse events in one way, while allowing touch events to fall through to the Flickable underneath, so that the ability to flick on a touchscreen is retained. In that case the ability to drag the Flickable via mouse would be lost, but it does not prevent Flickable from receiving mouse wheel events.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="wasHeld-prop">
<db:title>wasHeld : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>wasHeld</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is true if the mouse button has been held pressed longer than the threshold (800ms).</db:para>
</db:section>
</db:section>
</db:article>
