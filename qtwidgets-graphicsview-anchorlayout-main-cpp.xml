<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Anchor Layout Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates anchor layout in a graphics view scene.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

static QGraphicsProxyWidget *createItem(const QSizeF &amp;minimum = QSizeF(100.0, 100.0),
                                        const QSizeF &amp;preferred = QSize(150.0, 100.0),
                                        const QSizeF &amp;maximum = QSizeF(200.0, 100.0),
                                        const QString &amp;name = &quot;0&quot;)
{
    QGraphicsProxyWidget *w = new QGraphicsProxyWidget;
    w-&gt;setWidget(new QPushButton(name));
    w-&gt;setData(0, name);
    w-&gt;setMinimumSize(minimum);
    w-&gt;setPreferredSize(preferred);
    w-&gt;setMaximumSize(maximum);

    w-&gt;setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Preferred);
    return w;
}

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    QGraphicsScene scene;
    scene.setSceneRect(0, 0, 800, 480);

    QSizeF minSize(30, 100);
    QSizeF prefSize(210, 100);
    QSizeF maxSize(300, 100);

    QGraphicsProxyWidget *a = createItem(minSize, prefSize, maxSize, &quot;A&quot;);
    QGraphicsProxyWidget *b = createItem(minSize, prefSize, maxSize, &quot;B&quot;);
    QGraphicsProxyWidget *c = createItem(minSize, prefSize, maxSize, &quot;C&quot;);
    QGraphicsProxyWidget *d = createItem(minSize, prefSize, maxSize, &quot;D&quot;);
    QGraphicsProxyWidget *e = createItem(minSize, prefSize, maxSize, &quot;E&quot;);
    QGraphicsProxyWidget *f = createItem(QSizeF(30, 50), QSizeF(150, 50), maxSize, &quot;F (overflow)&quot;);
    QGraphicsProxyWidget *g = createItem(QSizeF(30, 50), QSizeF(30, 100), maxSize, &quot;G (overflow)&quot;);

    QGraphicsAnchorLayout *l = new QGraphicsAnchorLayout;
    l-&gt;setSpacing(0);

    QGraphicsWidget *w = new QGraphicsWidget(0, Qt::Window);
    w-&gt;setPos(20, 20);
    w-&gt;setLayout(l);

    // vertical
    l-&gt;addAnchor(a, Qt::AnchorTop, l, Qt::AnchorTop);
    l-&gt;addAnchor(b, Qt::AnchorTop, l, Qt::AnchorTop);

    l-&gt;addAnchor(c, Qt::AnchorTop, a, Qt::AnchorBottom);
    l-&gt;addAnchor(c, Qt::AnchorTop, b, Qt::AnchorBottom);
    l-&gt;addAnchor(c, Qt::AnchorBottom, d, Qt::AnchorTop);
    l-&gt;addAnchor(c, Qt::AnchorBottom, e, Qt::AnchorTop);

    l-&gt;addAnchor(d, Qt::AnchorBottom, l, Qt::AnchorBottom);
    l-&gt;addAnchor(e, Qt::AnchorBottom, l, Qt::AnchorBottom);

    l-&gt;addAnchor(c, Qt::AnchorTop, f, Qt::AnchorTop);
    l-&gt;addAnchor(c, Qt::AnchorVerticalCenter, f, Qt::AnchorBottom);
    l-&gt;addAnchor(f, Qt::AnchorBottom, g, Qt::AnchorTop);
    l-&gt;addAnchor(c, Qt::AnchorBottom, g, Qt::AnchorBottom);

    // horizontal
    l-&gt;addAnchor(l, Qt::AnchorLeft, a, Qt::AnchorLeft);
    l-&gt;addAnchor(l, Qt::AnchorLeft, d, Qt::AnchorLeft);
    l-&gt;addAnchor(a, Qt::AnchorRight, b, Qt::AnchorLeft);

    l-&gt;addAnchor(a, Qt::AnchorRight, c, Qt::AnchorLeft);
    l-&gt;addAnchor(c, Qt::AnchorRight, e, Qt::AnchorLeft);

    l-&gt;addAnchor(b, Qt::AnchorRight, l, Qt::AnchorRight);
    l-&gt;addAnchor(e, Qt::AnchorRight, l, Qt::AnchorRight);
    l-&gt;addAnchor(d, Qt::AnchorRight, e, Qt::AnchorLeft);

    l-&gt;addAnchor(l, Qt::AnchorLeft, f, Qt::AnchorLeft);
    l-&gt;addAnchor(l, Qt::AnchorLeft, g, Qt::AnchorLeft);
    l-&gt;addAnchor(f, Qt::AnchorRight, g, Qt::AnchorRight);

    scene.addItem(w);
    scene.setBackgroundBrush(Qt::darkGreen);
    QGraphicsView view(&amp;scene);

    view.show();

    return app.exec();
}

</db:programlisting>
</db:article>
