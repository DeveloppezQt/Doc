<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOAuth1 Class</db:title>
<db:productname>QtNetworkAuth</db:productname>
<db:edition>Qt Network Authorization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Network Authorization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qoauth1.xml">QOAuth1</db:link> class provides an implementation of the <db:link xlink:href="https://tools.ietf.org/html/rfc5849">OAuth 1 Protocol</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOAuth1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS NetworkAuth)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::NetworkAuth)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += networkauth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractoauth.xml" xlink:role="class">QAbstractOAuth</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOAuth1 is part of <db:simplelist><db:member>oauth</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qoauth1.xml">QOAuth1</db:link> provides a method for clients to access server resources on behalf of a resource owner (such as a different client or an end-user). It also provides a process for end-users to authorize third-party access to their server resources without sharing their credentials (typically, a username and password pair), using user-agent redirections.</db:para>
<db:para><db:link xlink:href="qoauth1.xml">QOAuth1</db:link> uses tokens to represent the authorization granted to the client by the resource owner. Typically, token credentials are issued by the server at the resource owner's request, after authenticating the resource owner's identity (usually using a username and password).</db:para>
<db:para>When making the temporary credentials request, the client authenticates using only the client credentials. When making the token request, the client authenticates using the client credentials as well as the temporary credentials. Once the client receives and stores the token credentials, it can proceed to access protected resources on behalf of the resource owner by making authenticated requests using the client credentials together with the token credentials received.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SignatureMethod-enum">
<db:title>enum QOAuth1::SignatureMethod</db:title>
<db:enumsynopsis>
<db:enumname>SignatureMethod</db:enumname>
<db:enumitem>
<db:enumidentifier>Hmac_Sha1</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Rsa_Sha1</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PlainText</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates the signature method to be used to sign requests.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1.xml">QOAuth1</db:link></db:emphasis>::<db:emphasis role="bold">SignatureMethod</db:emphasis>::Hmac_Sha1</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-3.4.2">HMAC-SHA1</db:link> signature method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1.xml">QOAuth1</db:link></db:emphasis>::<db:emphasis role="bold">SignatureMethod</db:emphasis>::Rsa_Sha1</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-3.4.3">RSA-SHA1</db:link> signature method (not supported).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1.xml">QOAuth1</db:link></db:emphasis>::<db:emphasis role="bold">SignatureMethod</db:emphasis>::PlainText</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-3.4.4">PLAINTEXT</db:link> signature method.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOAuth1">
<db:title>[explicit] QOAuth1::QOAuth1(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth1</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qoauth1.xml">QOAuth1</db:link> object with parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QOAuth1-1">
<db:title>[explicit] QOAuth1::QOAuth1(QNetworkAccessManager *<db:emphasis>manager</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth1</db:methodname>
<db:methodparam>
<db:type>QNetworkAccessManager *</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1(QNetworkAccessManager *manager, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qoauth1.xml">QOAuth1</db:link> object with parent object <db:code role="parameter">parent</db:code>, using <db:code role="parameter">manager</db:code> to access the network.</db:para>
</db:section>
<db:section xml:id="QOAuth1-2">
<db:title>QOAuth1::QOAuth1(const QString &amp;<db:emphasis>clientIdentifier</db:emphasis>, const QString &amp;<db:emphasis>clientSharedSecret</db:emphasis>, QNetworkAccessManager *<db:emphasis>manager</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth1</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientIdentifier</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientSharedSecret</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QNetworkAccessManager *</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1(const QString &amp;clientIdentifier, const QString &amp;clientSharedSecret, QNetworkAccessManager *manager, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qoauth1.xml">QOAuth1</db:link> object with parent object <db:code role="parameter">parent</db:code>, using <db:code role="parameter">manager</db:code> to access the network. Also sets <db:code role="parameter">clientIdentifier</db:code> and <db:code role="parameter">clientSharedSecret</db:code> to sign the calls to the web server and identify the application.</db:para>
</db:section>
<db:section xml:id="clientCredentials">
<db:title>QPair&lt;QString, QString&gt; QOAuth1::clientCredentials() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPair&lt;QString, QString&gt;</db:type>
<db:methodname>clientCredentials</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;QString, QString&gt; clientCredentials() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pair of <db:link xlink:href="qstring.xml">QString</db:link> used to identify the application and sign requests to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#setClientCredentials">setClientCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clientSharedSecret">
<db:title>QString QOAuth1::clientSharedSecret() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>clientSharedSecret</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString clientSharedSecret() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current shared secret used to sign requests to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#setClientSharedSecret">setClientSharedSecret</db:link>()</db:member>
<db:member><db:link xlink:href="qoauth1.xml#clientCredentials">clientCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="continueGrantWithVerifier">
<db:title>void QOAuth1::continueGrantWithVerifier(const QString &amp;<db:emphasis>verifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>continueGrantWithVerifier</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>verifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void continueGrantWithVerifier(const QString &amp;verifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Continues the Redirection-Based Authorization flow using <db:code role="parameter">verifier</db:code>. Call this function when using an Out-of-band reply handler to supply the verifier provided by the web server.</db:para>
</db:section>
<db:section xml:id="deleteResource">
<db:title>[override virtual] QNetworkReply *QOAuth1::deleteResource(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>deleteResource</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * deleteResource(const QUrl &amp;url, const QVariantMap &amp;parameters) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractoauth.xml#deleteResource" role="function">QAbstractOAuth::deleteResource(const QUrl &amp;url, const QVariantMap &amp;parameters)</db:link>.</db:para>
<db:para>Sends an authenticated DELETE request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.7">Hypertext Transfer Protocol – HTTP/1.1: DELETE</db:link></db:para>
</db:section>
<db:section xml:id="generateAuthorizationHeader">
<db:title>[static protected] QByteArray QOAuth1::generateAuthorizationHeader(const QVariantMap &amp;<db:emphasis>oauthParams</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>generateAuthorizationHeader</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>oauthParams</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray generateAuthorizationHeader(const QVariantMap &amp;oauthParams)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates an authorization header using <db:code role="parameter">oauthParams</db:code>.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-3.5.1">The OAuth 1.0 Protocol: Authorization Header</db:link></db:para>
</db:section>
<db:section xml:id="get">
<db:title>[override virtual] QNetworkReply *QOAuth1::get(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>get</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * get(const QUrl &amp;url, const QVariantMap &amp;parameters) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractoauth.xml#get" role="function">QAbstractOAuth::get(const QUrl &amp;url, const QVariantMap &amp;parameters)</db:link>.</db:para>
<db:para>Sends an authenticated GET request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.3">Hypertext Transfer Protocol – HTTP/1.1: GET</db:link></db:para>
</db:section>
<db:section xml:id="grant">
<db:title>[override virtual] void QOAuth1::grant()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>grant</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void grant() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractoauth.xml#grant" role="function">QAbstractOAuth::grant()</db:link>.</db:para>
<db:para>Starts the Redirection-Based Authorization flow.</db:para>
<db:note>
<db:para>For an out-of-band reply handler, a verifier string is received after the call to this function; pass that to <db:link xlink:href="qoauth1.xml#continueGrantWithVerifier">continueGrantWithVerifier</db:link>() to continue the grant process.</db:para>
</db:note>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-2">The OAuth 1.0 Protocol: Redirection-Based Authorization</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#continueGrantWithVerifier">continueGrantWithVerifier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="head">
<db:title>[override virtual] QNetworkReply *QOAuth1::head(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>head</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * head(const QUrl &amp;url, const QVariantMap &amp;parameters) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractoauth.xml#head" role="function">QAbstractOAuth::head(const QUrl &amp;url, const QVariantMap &amp;parameters)</db:link>.</db:para>
<db:para>Sends an authenticated HEAD request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.4">Hypertext Transfer Protocol – HTTP/1.1: HEAD</db:link></db:para>
</db:section>
<db:section xml:id="nonce">
<db:title>[static protected] QByteArray QOAuth1::nonce()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>nonce</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray nonce()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates a nonce.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-3.3">The OAuth 1.0 Protocol: Nonce and Timestamp</db:link></db:para>
</db:section>
<db:section xml:id="post">
<db:title>[override virtual] QNetworkReply *QOAuth1::post(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>post</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * post(const QUrl &amp;url, const QVariantMap &amp;parameters) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractoauth.xml#post" role="function">QAbstractOAuth::post(const QUrl &amp;url, const QVariantMap &amp;parameters)</db:link>.</db:para>
<db:para>Sends an authenticated POST request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.5">Hypertext Transfer Protocol – HTTP/1.1: POST</db:link></db:para>
</db:section>
<db:section xml:id="prepareRequest">
<db:title>[override virtual] void QOAuth1::prepareRequest(QNetworkRequest *<db:emphasis>request</db:emphasis>, const QByteArray &amp;<db:emphasis>verb</db:emphasis>, const QByteArray &amp;<db:emphasis>body</db:emphasis> = QByteArray())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>prepareRequest</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest *</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>verb</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>body</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void prepareRequest(QNetworkRequest *request, const QByteArray &amp;verb, const QByteArray &amp;body) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractoauth.xml#prepareRequest" role="function">QAbstractOAuth::prepareRequest(QNetworkRequest *request, const QByteArray &amp;verb, const QByteArray &amp;body)</db:link>.</db:para>
</db:section>
<db:section xml:id="put">
<db:title>[override virtual] QNetworkReply *QOAuth1::put(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>put</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * put(const QUrl &amp;url, const QVariantMap &amp;parameters) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractoauth.xml#put" role="function">QAbstractOAuth::put(const QUrl &amp;url, const QVariantMap &amp;parameters)</db:link>.</db:para>
<db:para>Sends an authenticated PUT request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.6">Hypertext Transfer Protocol – HTTP/1.1: PUT</db:link></db:para>
</db:section>
<db:section xml:id="requestTemporaryCredentials">
<db:title>[protected] QNetworkReply *QOAuth1::requestTemporaryCredentials(QNetworkAccessManager::Operation <db:emphasis>operation</db:emphasis>, const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:type>QNetworkReply *</db:type>
<db:methodname>requestTemporaryCredentials</db:methodname>
<db:methodparam>
<db:type>QNetworkAccessManager::Operation</db:type>
<db:parameter>operation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * requestTemporaryCredentials(QNetworkAccessManager::Operation operation, const QUrl &amp;url, const QVariantMap &amp;parameters)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the a request for temporary credentials using the request method <db:code role="parameter">operation</db:code>. The request URL is <db:code role="parameter">url</db:code> and the <db:code role="parameter">parameters</db:code> shall encoded and sent during the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-2.1">The OAuth 1.0 Protocol: Temporary Credentials</db:link></db:para>
</db:section>
<db:section xml:id="requestTokenCredentials">
<db:title>[protected] QNetworkReply *QOAuth1::requestTokenCredentials(QNetworkAccessManager::Operation <db:emphasis>operation</db:emphasis>, const QUrl &amp;<db:emphasis>url</db:emphasis>, const QPair&lt;QString, QString&gt; &amp;<db:emphasis>temporaryToken</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:type>QNetworkReply *</db:type>
<db:methodname>requestTokenCredentials</db:methodname>
<db:methodparam>
<db:type>QNetworkAccessManager::Operation</db:type>
<db:parameter>operation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPair&lt;QString, QString&gt; &amp;</db:type>
<db:parameter>temporaryToken</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * requestTokenCredentials(QNetworkAccessManager::Operation operation, const QUrl &amp;url, const QPair&lt;QString, QString&gt; &amp;temporaryToken, const QVariantMap &amp;parameters)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts a request for token credentials using the request method <db:code role="parameter">operation</db:code>. The request URL is <db:code role="parameter">url</db:code> and the <db:code role="parameter">parameters</db:code> shall be encoded and sent during the request. The <db:code role="parameter">temporaryToken</db:code> pair of string is used to identify and sign the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-2.3">The OAuth 1.0 Protocol: Token Credentials</db:link></db:para>
</db:section>
<db:section xml:id="setClientCredentials">
<db:title>void QOAuth1::setClientCredentials(const QPair&lt;QString, QString&gt; &amp;<db:emphasis>clientCredentials</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClientCredentials</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;QString, QString&gt; &amp;</db:type>
<db:parameter>clientCredentials</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClientCredentials(const QPair&lt;QString, QString&gt; &amp;clientCredentials)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">clientCredentials</db:code> as the pair of <db:link xlink:href="qstring.xml">QString</db:link> used to identify the application and sign requests to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#clientCredentials">clientCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setClientCredentials-1">
<db:title>void QOAuth1::setClientCredentials(const QString &amp;<db:emphasis>clientIdentifier</db:emphasis>, const QString &amp;<db:emphasis>clientSharedSecret</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClientCredentials</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientIdentifier</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientSharedSecret</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClientCredentials(const QString &amp;clientIdentifier, const QString &amp;clientSharedSecret)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">clientIdentifier</db:code> and <db:code role="parameter">clientSharedSecret</db:code> as the pair of <db:link xlink:href="qstring.xml">QString</db:link> used to identify the application and sign requests to the web server. <db:code role="parameter">clientIdentifier</db:code> identifies the application and <db:code role="parameter">clientSharedSecret</db:code> is used to sign requests.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#clientCredentials">clientCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setClientSharedSecret">
<db:title>void QOAuth1::setClientSharedSecret(const QString &amp;<db:emphasis>clientSharedSecret</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClientSharedSecret</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientSharedSecret</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClientSharedSecret(const QString &amp;clientSharedSecret)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">clientSharedSecret</db:code> as the string used to sign the requests to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#clientSharedSecret">clientSharedSecret</db:link>()</db:member>
<db:member><db:link xlink:href="qoauth1.xml#setClientCredentials">setClientCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSignatureMethod">
<db:title>void QOAuth1::setSignatureMethod(QOAuth1::SignatureMethod <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSignatureMethod</db:methodname>
<db:methodparam>
<db:type>QOAuth1::SignatureMethod</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSignatureMethod(QOAuth1::SignatureMethod value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">value</db:code> as the method used to sign requests to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#signatureMethod">signatureMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTemporaryCredentialsUrl">
<db:title>void QOAuth1::setTemporaryCredentialsUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTemporaryCredentialsUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTemporaryCredentialsUrl(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">url</db:code> as the URL to request temporary credentials to start the authentication process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#temporaryCredentialsUrl">temporaryCredentialsUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTokenCredentials">
<db:title>void QOAuth1::setTokenCredentials(const QPair&lt;QString, QString&gt; &amp;<db:emphasis>tokenCredentials</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTokenCredentials</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;QString, QString&gt; &amp;</db:type>
<db:parameter>tokenCredentials</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTokenCredentials(const QPair&lt;QString, QString&gt; &amp;tokenCredentials)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">tokenCredentials</db:code> as the pair of <db:link xlink:href="qstring.xml">QString</db:link> used to identify and sign authenticated requests to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#tokenCredentials">tokenCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTokenCredentials-1">
<db:title>void QOAuth1::setTokenCredentials(const QString &amp;<db:emphasis>token</db:emphasis>, const QString &amp;<db:emphasis>tokenSecret</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTokenCredentials</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>token</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>tokenSecret</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTokenCredentials(const QString &amp;token, const QString &amp;tokenSecret)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">token</db:code> and <db:code role="parameter">tokenSecret</db:code> as the pair of <db:link xlink:href="qstring.xml">QString</db:link> used to identify and sign authenticated requests to the web server. Once the client receives and stores the token credentials, it can proceed to access protected resources on behalf of the resource owner by making authenticated requests using the client credentials together with the token credentials received.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#tokenCredentials">tokenCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTokenCredentialsUrl">
<db:title>void QOAuth1::setTokenCredentialsUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTokenCredentialsUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTokenCredentialsUrl(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">url</db:code> as the URL to request the token credentials to continue the authentication process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#tokenCredentialsUrl">tokenCredentialsUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTokenSecret">
<db:title>void QOAuth1::setTokenSecret(const QString &amp;<db:emphasis>tokenSecret</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTokenSecret</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>tokenSecret</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTokenSecret(const QString &amp;tokenSecret)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">tokenSecret</db:code> as the current token secret used to sign authenticated calls to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#tokenSecret">tokenSecret</db:link>()</db:member>
<db:member><db:link xlink:href="qoauth1.xml#setTokenCredentials">setTokenCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setup">
<db:title>[protected] void QOAuth1::setup(QNetworkRequest *<db:emphasis>request</db:emphasis>, const QVariantMap &amp;<db:emphasis>signingParameters</db:emphasis>, QNetworkAccessManager::Operation <db:emphasis>operation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setup</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest *</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>signingParameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QNetworkAccessManager::Operation</db:type>
<db:parameter>operation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setup(QNetworkRequest *request, const QVariantMap &amp;signingParameters, QNetworkAccessManager::Operation operation)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signs the <db:code role="parameter">request</db:code> using <db:code role="parameter">signingParameters</db:code> and <db:code role="parameter">operation</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setup-1">
<db:title>[protected, since 5.13] void QOAuth1::setup(QNetworkRequest *<db:emphasis>request</db:emphasis>, const QVariantMap &amp;<db:emphasis>signingParameters</db:emphasis>, const QByteArray &amp;<db:emphasis>operationVerb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setup</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest *</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>signingParameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>operationVerb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setup(QNetworkRequest *request, const QVariantMap &amp;signingParameters, const QByteArray &amp;operationVerb)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signs the <db:code role="parameter">request</db:code> using <db:code role="parameter">signingParameters</db:code> and <db:code role="parameter">operationVerb</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
</db:section>
<db:section xml:id="signatureMethod">
<db:title>QOAuth1::SignatureMethod QOAuth1::signatureMethod() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOAuth1::SignatureMethod</db:type>
<db:methodname>signatureMethod</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1::SignatureMethod signatureMethod() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the method used to sign the request to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#setSignatureMethod">setSignatureMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="temporaryCredentialsUrl">
<db:title>QUrl QOAuth1::temporaryCredentialsUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>temporaryCredentialsUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl temporaryCredentialsUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the url used to request temporary credentials to start the authentication process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#setTemporaryCredentialsUrl">setTemporaryCredentialsUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tokenCredentials">
<db:title>QPair&lt;QString, QString&gt; QOAuth1::tokenCredentials() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPair&lt;QString, QString&gt;</db:type>
<db:methodname>tokenCredentials</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;QString, QString&gt; tokenCredentials() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pair of <db:link xlink:href="qstring.xml">QString</db:link> used to identify and sign authenticated requests to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#setTokenCredentials">setTokenCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tokenCredentialsUrl">
<db:title>QUrl QOAuth1::tokenCredentialsUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>tokenCredentialsUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl tokenCredentialsUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the url used to request token credentials to continue the authentication process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#setTokenCredentialsUrl">setTokenCredentialsUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tokenSecret">
<db:title>QString QOAuth1::tokenSecret() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>tokenSecret</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString tokenSecret() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current token secret used to sign authenticated requests to the web server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1.xml#setTokenSecret">setTokenSecret</db:link>()</db:member>
<db:member><db:link xlink:href="qoauth1.xml#tokenCredentials">tokenCredentials</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
