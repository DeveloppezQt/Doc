<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CategoryModel QML Type</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link> type provides a model of the categories supported by a <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link>.</db:para>
<db:para>This type was introduced in QtLocation 5.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtLocation 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtLocation 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>CategoryModel is part of <db:simplelist><db:member>qml-QtLocation5-places</db:member><db:member>qml-QtLocation5-places-models</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link> type provides a model of the categories that are available from the current <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link>. The model supports both a flat list of categories and a hierarchical tree representing category groupings. This can be controlled by the <db:link xlink:href="qml-qtlocation-categorymodel.xml#hierarchical-prop">hierarchical</db:link> property.</db:para>
<db:para>The model supports the following roles:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Role</db:para>
</db:th>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>category</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-category.xml">Category</db:link></db:para>
</db:td>
<db:td>
<db:para>Category object for the current item.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>parentCategory</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-category.xml">Category</db:link></db:para>
</db:td>
<db:td>
<db:para>Parent category object for the current item. If there is no parent, null is returned.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following example displays a flat list of all available categories:</db:para>
<db:programlisting language="qml">import QtQuick
import QtPositioning
import QtLocation

ListView {
    model: CategoryModel {
        plugin: myPlugin
        hierarchical: false
    }
    delegate: Text { text: category.name }
}
</db:programlisting>
<db:para>To access the hierarchical category model it is necessary to use a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> to access the child items.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="hierarchical-prop">
<db:title>hierarchical : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>hierarchical</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the model provides a hierarchical tree of categories or a flat list. The default is true.</db:para>
</db:section>
<db:section xml:id="plugin-prop">
<db:title>plugin : Plugin</db:title>
<db:fieldsynopsis>
<db:type>Plugin</db:type>
<db:varname>plugin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the provider <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> used by this model.</db:para>
</db:section>
<db:section xml:id="status-prop">
<db:title>status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>status</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the status of the model. It can be one of:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link>.Null</db:para>
</db:td>
<db:td>
<db:para>No category fetch query has been executed. The model is empty.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link>.Ready</db:para>
</db:td>
<db:td>
<db:para>No error occurred during the last operation, further operations may be performed on the model.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link>.Loading</db:para>
</db:td>
<db:td>
<db:para>The model is being updated, no other operations may be performed until complete.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link>.Error</db:para>
</db:td>
<db:td>
<db:para>An error occurred during the last operation, further operations can still be performed on the model.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="dataChanged-signal">
<db:title>dataChanged()</db:title>
<db:para>This signal is emitted when significant changes have been made to the underlying datastore.</db:para>
<db:para>Applications should act on this signal at their own discretion. The data provided by the model could be out of date and so the model should be reupdated sometime, however an immediate reupdate may be disconcerting to users if the categories change without any action on their part.</db:para>
<db:para>The corresponding handler is <db:code>onDataChanged</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDataChanged</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="errorString-method">
<db:title>string errorString()</db:title>
<db:para>This read-only property holds the textual presentation of the latest category model error. If no error has occurred, an empty string is returned.</db:para>
<db:para>An empty string may also be returned if an error occurred which has no associated textual representation.</db:para>
</db:section>
</db:section>
</db:article>
