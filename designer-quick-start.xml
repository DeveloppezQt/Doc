<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>A Quick Start to Qt Designer</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>Qt Designer Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{Qt Designer Manual}{Contents}</db:para>
<db:para>Using <db:emphasis>Qt Designer</db:emphasis> involves <db:emphasis role="bold">four</db:emphasis> basic steps:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Choose your form and objects</db:para>
</db:listitem>
<db:listitem>
<db:para>Lay the objects out on the form</db:para>
</db:listitem>
<db:listitem>
<db:para>Connect the signals to the slots</db:para>
</db:listitem>
<db:listitem>
<db:para>Preview the form</db:para>
</db:listitem>
</db:orderedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-screenshot.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Suppose you would like to design a small widget (see screenshot above) that contains the controls needed to manipulate Red, Green and Blue (RGB) values – a type of widget that can be seen everywhere in image manipulation programs.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-choosing-form.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Choosing a Form</db:emphasis></db:para>
<db:para>You start by choosing <db:emphasis role="bold">Widget</db:emphasis> from the <db:emphasis role="bold">New Form</db:emphasis> dialog.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-arrangement.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Placing Widgets on a Form</db:emphasis></db:para>
<db:para>Drag three labels, three spin boxes and three vertical sliders on to your form. To change the label's default text, simply double-click on it. You can arrange them according to how you would like them to be laid out.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>To ensure that they are laid out exactly like this in your program, you need to place these widgets into a layout. We will do this in groups of three. Select the &quot;RED&quot; label. Then, hold down <db:emphasis role="bold">Ctrl</db:emphasis> while you select its corresponding spin box and slider. In the <db:emphasis role="bold">Form</db:emphasis> menu, select <db:emphasis role="bold">Lay Out in a Grid</db:emphasis>.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-form-gridLayout.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-selectForLayout.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Repeat the step for the other two labels along with their corresponding spin boxes and sliders as well.</db:para>
<db:para>The next step is to combine all three layouts into one <db:emphasis role="bold">main layout</db:emphasis>. The main layout is the top level widget's (in this case, the <db:link xlink:href="qwidget.xml">QWidget</db:link>) layout. It is important that your top level widget has a layout; otherwise, the widgets on your window will not resize when your window is resized. To set the layout, <db:emphasis role="bold">Right click</db:emphasis> anywhere on your form, outside of the three separate layouts, and select <db:emphasis role="bold">Lay Out Horizontally</db:emphasis>. Alternatively, you could also select <db:emphasis role="bold">Lay Out in a Grid</db:emphasis> – you will still see the same arrangement (shown below).</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-final-layout.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>Main layouts cannot be seen on the form. To check if you have a main layout installed, try resizing your form; your widgets should resize accordingly. Alternatively, you can take a look at <db:emphasis>Qt Designer</db:emphasis>'s <db:emphasis role="bold">Object Inspector</db:emphasis>. If your top level widget does not have a layout, you will see the broken layout icon next to it, <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-no-toplevel-layout.png"/>
</db:imageobject>
</db:inlinemediaobject> .</db:para>
</db:note>
<db:para>When you click on the slider and drag it to a certain value, you want the spin box to display the slider's position. To accomplish this behavior, you need to connect the slider's <db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>() signal to the spin box's <db:link xlink:href="qspinbox.xml#value-prop">setValue</db:link>() slot. You also need to make the reverse connections, e.g., connect the spin box's <db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>() signal to the slider's <db:link xlink:href="qabstractslider.xml#value-prop">setValue</db:link>() slot.</db:para>
<db:para>To do this, you have to switch to <db:emphasis role="bold">Edit Signals/Slots</db:emphasis> mode, either by pressing <db:emphasis role="bold">F4</db:emphasis> or selecting <db:emphasis role="bold">Edit Signals/Slots</db:emphasis> from the <db:emphasis role="bold">Edit</db:emphasis> menu.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-signalsAndSlots.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Connecting Signals to Slots</db:emphasis></db:para>
<db:para>Click on the slider and drag the cursor towards the spin box. The <db:emphasis role="bold">Configure Connection</db:emphasis> dialog, shown below, will pop up. Select the correct signal and slot and click <db:emphasis role="bold">OK</db:emphasis>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-configure-connection1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Repeat the step (in reverse order), clicking on the spin box and dragging the cursor towards the slider, to connect the spin box's <db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>() signal to the slider's <db:link xlink:href="qabstractslider.xml#value-prop">setValue</db:link>() slot.</db:para>
<db:para>You can use the screenshot below as a guide to selecting the correct signal and slot.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-configure-connection2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Now that you have successfully connected the objects for the &quot;RED&quot; component of the RGB Controller, do the same for the &quot;GREEN&quot; and &quot;BLUE&quot; components as well.</db:para>
<db:para>Since RGB values range between 0 and 255, we need to limit the spin box and slider to that particular range.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/rgbController-property-editing.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Setting Widget Properties</db:emphasis></db:para>
<db:para>Click on the first spin box. Within the <db:emphasis role="bold">Property Editor</db:emphasis>, you will see <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>'s properties. Enter &quot;255&quot; for the <db:link xlink:href="qspinbox.xml#maximum-prop">maximum</db:link> property. Then, click on the first vertical slider, you will see <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link>'s properties. Enter &quot;255&quot; for the <db:link xlink:href="qabstractslider.xml#maximum-prop">maximum</db:link> property as well. Repeat this process for the remaining spin boxes and sliders.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Now, we preview your form to see how it would look in your application - press <db:emphasis role="bold">Ctrl + R</db:emphasis> or select <db:emphasis role="bold">Preview</db:emphasis> from the <db:emphasis role="bold">Form</db:emphasis> menu. Try dragging the slider - the spin box will mirror its value too (and vice versa). Also, you can resize it to see how the layouts that are used to manage the child widgets, respond to different window sizes.</db:para>
</db:article>
