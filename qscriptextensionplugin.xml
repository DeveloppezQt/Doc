<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScriptExtensionPlugin Class</db:title>
<db:productname>QtScript</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>QtScript Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscriptextensionplugin.xml">QScriptExtensionPlugin</db:link> class provides an abstract base for custom QScript extension plugins.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScriptExtensionPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += script</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qscriptextensioninterface.xml" xlink:role="class">QScriptExtensionInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScriptExtensionPlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qscriptextensionplugin.xml">QScriptExtensionPlugin</db:link> is a plugin interface that makes it possible to offer extensions that can be loaded dynamically into applications using the <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> class.</db:para>
<db:para>Writing a script extension plugin is achieved by subclassing this base class, reimplementing the pure virtual <db:link xlink:href="qscriptextensionplugin.xml#keys">keys</db:link>() and <db:link xlink:href="qscriptextensionplugin.xml#initialize">initialize</db:link>() functions, and exporting the class using the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro. See <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml#importExtension">QScriptEngine::importExtension</db:link>()</db:member>
<db:member><db:link xlink:href="qtscriptextensions.xml">Creating Qt Script Extensions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScriptExtensionPlugin">
<db:title>[explicit] QScriptExtensionPlugin::QScriptExtensionPlugin(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a script extension plugin with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that this constructor is invoked automatically by the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro, so there is no need for calling it explicitly.</db:para>
</db:section>
<db:section xml:id="dtor.QScriptExtensionPlugin">
<db:title>[virtual noexcept] QScriptExtensionPlugin::~QScriptExtensionPlugin()</db:title>
<db:para>Destroys the script extension plugin.</db:para>
<db:para>Note that Qt destroys a plugin automatically when it is no longer used, so there is no need for calling the destructor explicitly.</db:para>
</db:section>
<db:section xml:id="initialize">
<db:title>[override pure virtual] void QScriptExtensionPlugin::initialize(const QString &amp;<db:emphasis>key</db:emphasis>, QScriptEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:para>Initializes the extension specified by <db:code role="parameter">key</db:code> in the given <db:code role="parameter">engine</db:code>. The key must come from the set of <db:link xlink:href="qscriptextensionplugin.xml#keys">keys</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptextensionplugin.xml#keys">keys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keys">
<db:title>[override pure virtual] QStringList QScriptExtensionPlugin::keys() const</db:title>
<db:para>Returns the list of keys this plugin supports.</db:para>
<db:para>These keys are usually the names of the &quot;modules&quot; or &quot;packages&quot; that are implemented in the plugin (e.g. <db:code>com.mycompany.MyProduct</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptextensionplugin.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setupPackage">
<db:title>QScriptValue QScriptExtensionPlugin::setupPackage(const QString &amp;<db:emphasis>key</db:emphasis>, QScriptEngine *<db:emphasis>engine</db:emphasis>) const</db:title>
<db:para>This function is provided for convenience when reimplementing <db:link xlink:href="qscriptextensionplugin.xml#initialize">initialize</db:link>(). It splits the given <db:code role="parameter">key</db:code> on <db:code>'.'</db:code> (dot), and ensures that there's a corresponding path of objects in the environment of the given <db:code role="parameter">engine</db:code>, creating new objects to complete the path if necessary. E.g. if the key is &quot;com.trolltech&quot;, after the call to setupPackage() the script expression <db:code>com.trolltech</db:code> will evaluate to an object. More specifically, the engine's Global Object will have a property called &quot;com&quot;, which in turn has a property called &quot;trolltech&quot;.</db:para>
<db:para>Use this function to avoid global namespace pollution when installing your extensions in the engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptextensionplugin.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
