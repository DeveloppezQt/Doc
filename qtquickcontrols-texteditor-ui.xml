<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Text Editor Guide - UI</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquickcontrols-texteditor.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt Quick Text Editor Guide"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquickcontrols-texteditor-logic.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Quick Text Editor Guide - Logic"/></db:extendedlink>
<db:abstract>
<db:para>Walkthrough of an application built with Qt Quick Controls.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Quick Designer is integrated into Qt Creator, allowing you to switch between <db:guilabel>Edit</db:guilabel> and <db:guilabel>Design</db:guilabel> modes. To start using Qt Quick Designer, select the QML file, <db:emphasis>main.qml</db:emphasis>, and click the <db:guilabel>Design</db:guilabel> button on the left panel.</db:para>
<db:para>It is important to familiarize yourself with the windows in Qt Quick Designer. This guide uses Qt Quick Designer to add and set up the layout.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/controlstexteditor_designer.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>The default kit for the project must be a Desktop kit, as Qt Quick Designer cannot yet emulate the styles for a mobile platform.</db:para>
</db:note>
<db:para>To start, we can customize the default application created by the wizard. You can delete the <db:guilabel>MainForm.ui.qml</db:guilabel> file and remove the following lines from the <db:guilabel>main.qml</db:guilabel> file:</db:para>
<db:programlisting language="qml">MainForm {
    anchors.fill: parent
    button1.onClicked: messageDialog.show(qsTr(&quot;Button 1 pressed&quot;))
    button2.onClicked: messageDialog.show(qsTr(&quot;Button 2 pressed&quot;))
    button3.onClicked: messageDialog.show(qsTr(&quot;Button 3 pressed&quot;))
}

MessageDialog {
    id: messageDialog
    title: qsTr(&quot;May I have your attention, please?&quot;)

    function show(caption) {
        messageDialog.text = caption;
        messageDialog.open();
    }
}
</db:programlisting>
<db:para>The default dimension of the <db:code>ApplicationWindow</db:code> may remain but you can change the <db:code>title</db:code> property to a relevant name such as:</db:para>
<db:programlisting language="qml">title: qsTr(&quot;Text Editor Example&quot;)
</db:programlisting>
<db:note>
<db:para>The example uses the <db:code>qsTr()</db:code> function to facilitate translation. For more information, visit the <db:link xlink:href="qtquick-internationalization.xml">Internationalization and Localization with Qt Quick</db:link> page.</db:para>
</db:note>
<db:para>Make sure that <db:guilabel>Resources</db:guilabel> tab contains the images from the <db:link xlink:href="qtquickcontrols-texteditor.xml#resource-files">previous page</db:link>.</db:para>
<db:section xml:id="defining-the-application-layout">
<db:title>Defining the Application Layout</db:title>
<db:para>Our application has a simple layout, which consists of a <db:emphasis>tool bar</db:emphasis> and a <db:emphasis>text area</db:emphasis>. The tool bar contains the <db:emphasis>tool buttons</db:emphasis> that the user can choose to manipulate the text area contents. At the top, there are menus, which perform actions such as saving and opening files to edit.</db:para>
</db:section>
<db:section xml:id="adding-the-controls">
<db:title>Adding the Controls</db:title>
<db:para>To add a control, you have the following options:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Drag and drop a control from the <db:guilabel>QML Types</db:guilabel> window onto the main design window. This allows you to drop the control onto a specific area of the layout.</db:para>
</db:listitem>
<db:listitem>
<db:para>Drag and drop a control from the <db:guilabel>QML Types</db:guilabel> window onto the <db:guilabel>Navigator</db:guilabel> window. This allows you to set the layout hierarchy.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Both these actions give you several options to quickly set up the layout. Whichever method you use, designer gives you a more direct way of setting up a particular aspect of the control, such as the scene hierarchy or the position of the control.</db:para>
<db:para>Afterwards, the various properties are set from within the <db:guilabel>Properties</db:guilabel> window on the right side of Qt Creator window.</db:para>
</db:section>
<db:section xml:id="setting-up-the-tool-bar">
<db:title>Setting Up the Tool Bar</db:title>
<db:para>First, we need to add the tool bar. We can do this in the <db:emphasis>Edit</db:emphasis> mode and typing in a <db:link xlink:href="qml-qtquick-controls-toolbar.xml">ToolBar</db:link> type inside the <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link> type. This configures the <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link> object as the tool bar's parent.</db:para>
<db:programlisting language="cpp" role="bad">ApplicationWindow {

    ToolBar {
        id: toolBar
    }
}
</db:programlisting>
<db:para>In the <db:guilabel>Design</db:guilabel> mode, the <db:guilabel>Properties</db:guilabel> window lets us set the tool bar <db:guilabel>id</db:guilabel> to <db:code>toolbar</db:code>.</db:para>
<db:para>In the <db:guilabel>Navigator</db:guilabel> window, make sure that the tool bar is a child of the application window. To make the tool bar a child of the window, simply drag the tool bar underneath the application window.</db:para>
<db:para>Within the tool bar, we need a <db:emphasis>row</db:emphasis> layout. Drag the <db:emphasis>row</db:emphasis> layout into the <db:guilabel>Navigator</db:guilabel> window and set it to be a child of the tool bar.</db:para>
<db:para>Similarly, set these layout properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:guilabel>id</db:guilabel> - set it to <db:code>rowToolbar</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para>click on the fill area button to set the fill area to <db:emphasis>parent</db:emphasis>. The parent should be the tool bar.</db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/controlstexteditor_rowproperties.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="adding-the-tool-buttons">
<db:title>Adding the Tool Buttons</db:title>
<db:para><db:emphasis>Tool buttons</db:emphasis> exist within a tool bar and specifically use the layout within the tool bar. <db:emphasis>Text Editor</db:emphasis> has six tool buttons, each performing a specific action, such as <db:emphasis>copy</db:emphasis> and <db:emphasis>paste</db:emphasis> to and from the clipboard.</db:para>
<db:para>The steps for adding the six tool buttons are mainly the same:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Drag and drop the <db:guilabel>Tool Button</db:guilabel> type as a child of the row layout.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:guilabel>id</db:guilabel> should be set to a unique name that is related to the tool button's action. The parent is set to <db:guilabel>parent</db:guilabel> and set the <db:guilabel>margin</db:guilabel> to <db:code>0</db:code>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/controlstexteditor_newproperties.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para>The first tool button, for example <db:guilabel>New</db:guilabel>, should have the left anchor set to the row layout.</db:para>
</db:listitem>
<db:listitem>
<db:para>The subsequent tool buttons should have the left anchor set to their previous sibling and the <db:guilabel>margin</db:guilabel> to <db:code>0</db:code>. These settings makes sure that the tool buttons are adjacent to each other.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set the <db:guilabel>iconName</db:guilabel> and <db:guilabel>iconSource</db:guilabel> properties in the <db:guilabel>ToolButton</db:guilabel> tab. The <db:guilabel>iconName</db:guilabel> should be set to a unique name identifying the icon name while the <db:guilabel>iconSource</db:guilabel> property should be set to the name of the icon for the tool button.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, the <db:guilabel>New</db:guilabel> tool button has <db:code>newIcon</db:code> set as its <db:guilabel>iconName</db:guilabel> and <db:code>images/filenew.png</db:code> set to the <db:guilabel>iconSource</db:guilabel> property. The icons are also viewable in the <db:guilabel>Resources</db:guilabel> inside the <db:guilabel>Library</db:guilabel> window.</db:para>
<db:para>Similarly for the <db:guilabel>Open</db:guilabel> tool button, the margins are set to <db:code>0</db:code> but the left anchor is set to the <db:guilabel>New</db:guilabel> tool button.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/controlstexteditor_openproperties.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>Dragging and dropping the images from the <db:guilabel>Resources</db:guilabel> onto the scene adds the image into the scene as an <db:link xlink:href="09-qdoc-commands-includingimages.xml">Image</db:link> object, instead of setting the iconSource property.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="setting-up-the-text-area">
<db:title>Setting Up the Text Area</db:title>
<db:para>Next, add a <db:guilabel>Text Area</db:guilabel> onto the scene as a child of the application window and a sibling of <db:code>toolBar</db:code>. The tool bar should be above the text area. Similarly, set the following text area properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:guilabel>id</db:guilabel> - set it to <db:code>textArea</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para>set the left, right, and bottom margin to the parent and the top margin to <db:code>toolBar.bottom</db:code> and set the margins to <db:code>0</db:code>.</db:para>
<db:programlisting language="qml">anchors.top: toolBar.bottom
anchors.right: parent.right
anchors.bottom: parent.bottom
anchors.left: parent.left
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>Verify that you have the parent, margins, and icons set up. Your <db:guilabel>Navigator</db:guilabel> should look similar to:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/controlstexteditor_navigator.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Running the application should result in this layout:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/controlstexteditor_main.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We are now ready to go back to <db:guilabel>Edit</db:guilabel> and set the handlers and actions. A QML <db:emphasis>handler</db:emphasis> is called when the buttons are pressed and triggers the necessary action associated with the tool buttons. An <db:emphasis>action</db:emphasis> collects various QML logic into one code block so it may be reused by several handlers. For more information, visit the <db:link xlink:href="qml-qtquick-controls-action.xml">Action</db:link> QML type and <db:link xlink:href="qtqml-syntax-signals.xml">Signal and Handler Event System</db:link>.</db:para>
</db:section>
<db:section xml:id="example-files">
<db:title>Example Files</db:title>
<db:para>The accompanying examples files are found in the following page:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-texteditor-example.xml">Qt Quick Controls - Text Editor Example</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
