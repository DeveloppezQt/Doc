<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaService Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> class provides a common base class for media service implementations.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaService</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaService is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_control</db:member><db:member>multimedia_core</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Media services provide implementations of the functionality promised by media objects, and allow multiple providers to implement a <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link>.</db:para>
<db:para>To provide the functionality of a <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> media services implement <db:link xlink:href="qmediacontrol.xml">QMediaControl</db:link> interfaces. Services typically implement one core media control which provides the core feature of a media object, and some number of additional controls which provide either optional features of the media object, or features of a secondary media object or peripheral object.</db:para>
<db:para>A pointer to media service's <db:link xlink:href="qmediacontrol.xml">QMediaControl</db:link> implementation can be obtained by passing the control's interface name to the <db:link xlink:href="qmediaservice.xml#requestControl">requestControl</db:link>() function.</db:para>
<db:programlisting language="cpp">QMediaPlayerControl *control = qobject_cast&lt;QMediaPlayerControl *&gt;(
        mediaService-&gt;requestControl(&quot;org.qt-project.qt.mediaplayercontrol/5.0&quot;));
</db:programlisting>
<db:para>Media objects can use services loaded dynamically from plug-ins or implemented statically within an applications. Plug-in based services should also implement the <db:link xlink:href="qmediaserviceproviderplugin.xml">QMediaServiceProviderPlugin</db:link> interface. Static services should implement the QMediaServiceProvider interface. In general, implementing a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> is outside of the scope of this documentation and support on the relevant mailing lists or IRC channels should be sought.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaobject.xml">QMediaObject</db:link></db:member>
<db:member><db:link xlink:href="qmediacontrol.xml">QMediaControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaService">
<db:title>[protected] QMediaService::QMediaService(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Construct a media service with the given <db:code role="parameter">parent</db:code>. This class is meant as a base class for Multimedia services so this constructor is protected.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaService">
<db:title>[virtual noexcept] QMediaService::~QMediaService()</db:title>
<db:para>Destroys a media service.</db:para>
</db:section>
<db:section xml:id="releaseControl">
<db:title>[pure virtual] void QMediaService::releaseControl(QMediaControl *<db:emphasis>control</db:emphasis>)</db:title>
<db:para>Releases a <db:code role="parameter">control</db:code> back to the service.</db:para>
</db:section>
<db:section xml:id="requestControl">
<db:title>[pure virtual] QMediaControl *QMediaService::requestControl(const char *<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Returns a pointer to the media control implementing <db:code role="parameter">interface</db:code>.</db:para>
<db:para>If the service does not implement the control, or if it is unavailable a null pointer is returned instead.</db:para>
<db:para>Controls must be returned to the service when no longer needed using the <db:link xlink:href="qmediaservice.xml#releaseControl">releaseControl</db:link>() function.</db:para>
</db:section>
</db:section>
</db:article>
