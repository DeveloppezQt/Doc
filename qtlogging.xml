<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtLogging&gt; - Qt Logging Types</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The &lt;QtLogging&gt; header file defines Qt logging types, functions and macros.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtLogging</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The &lt;QtLogging&gt; header file contains several types, functions and macros for logging.</db:para>
<db:para>The <db:link xlink:href="qtlogging.xml#QtMsgType-enum">QtMsgType</db:link> enum identifies the various messages that can be generated and sent to a Qt message handler; <db:link xlink:href="qtlogging.xml#QtMessageHandler-typedef">QtMessageHandler</db:link> is a type definition for a pointer to a function with the signature void myMessageHandler(QtMsgType, const QMessageLogContext &amp;, const char *). <db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>() function can be used to install the given <db:link xlink:href="qtlogging.xml#QtMessageHandler-typedef">QtMessageHandler</db:link>. <db:link xlink:href="qmessagelogcontext.xml">QMessageLogContext</db:link> class contains the line, file, and function the message was logged at. This information is created by the <db:link xlink:href="qmessagelogger.xml">QMessageLogger</db:link> class.</db:para>
<db:para>&lt;QtLogging&gt; also contains functions that generate messages from the given string argument: <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtlogging.xml#qInfo">qInfo</db:link>(), <db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtlogging.xml#qCritical">qCritical</db:link>(), and <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>(). These functions call the message handler with the given message.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">if (!driver()-&gt;isOpen() || driver()-&gt;isOpenError()) {
    qWarning(&quot;QSqlQuery::exec: database not open&quot;);
    return false;
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="QtMessageHandler-typedef">
<db:title>QtMessageHandler</db:title>
<db:para>This is a typedef for a pointer to a function with the following signature:</db:para>
<db:programlisting language="cpp">void myMessageHandler(QtMsgType, const QMessageLogContext &amp;, const QString &amp;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtlogging.xml#QtMsgType-enum">QtMsgType</db:link></db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QtMsgType-enum">
<db:title>enum QtMsgType</db:title>
<db:para>This enum describes the messages that can be sent to a message handler (<db:link xlink:href="qtlogging.xml#QtMessageHandler-typedef">QtMessageHandler</db:link>). You can use the enum to identify and associate the various message types with the appropriate actions. Its values are, in order of increasing severity:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code>QtDebugMsg</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code>QtInfoMsg</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtlogging.xml#qInfo">qInfo</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code>QtWarningMsg</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code>QtCriticalMsg</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtlogging.xml#qCritical">qCritical</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code>QtFatalMsg</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A message generated by the <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>() function.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtlogging.xml#QtMessageHandler-typedef">QtMessageHandler</db:link></db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qFormatLogMessage">
<db:title>QString qFormatLogMessage(QtMsgType <db:emphasis>type</db:emphasis>, const QMessageLogContext &amp;<db:emphasis>context</db:emphasis>, const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Generates a formatted string out of the <db:code role="parameter">type</db:code>, <db:code role="parameter">context</db:code>, <db:code role="parameter">str</db:code> arguments.</db:para>
<db:para>qFormatLogMessage returns a <db:link xlink:href="qstring.xml">QString</db:link> that is formatted according to the current message pattern. It can be used by custom message handlers to format output similar to Qt's default message handler.</db:para>
<db:para>The function is thread-safe.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qSetMessagePattern">qSetMessagePattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qInstallMessageHandler">
<db:title>QtMessageHandler qInstallMessageHandler(QtMessageHandler <db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Installs a Qt message <db:code role="parameter">handler</db:code>. Returns a pointer to the previously installed message handler.</db:para>
<db:para>A message handler is a function that prints out debug, info, warning, critical, and fatal messages from Qt's logging infrastructure. By default, Qt uses a standard message handler that formats and prints messages to different sinks specific to the operating system and Qt configuration. Installing your own message handler allows you to assume full control, and for instance log messages to the file system.</db:para>
<db:para>Note that Qt supports <db:link xlink:href="qloggingcategory.xml">logging categories</db:link> for grouping related messages in semantic categories. You can use these to enable or disable logging per category and <db:link xlink:href="qtlogging.xml#QtMsgType-enum">message type</db:link>. As the filtering for logging categories is done even before a message is created, messages for disabled types and categories will not reach the message handler.</db:para>
<db:para>A message handler needs to be <db:link xlink:href="qrandomgenerator.xml#reentrancy-and-thread-safety">reentrant</db:link>. That is, it might be called from different threads, in parallel. Therefore, writes to common sinks (like a database, or a file) often need to be synchronized.</db:para>
<db:para>Qt allows to enrich logging messages with further meta-information by calling <db:link xlink:href="qtlogging.xml#qSetMessagePattern">qSetMessagePattern</db:link>(), or setting the QT_MESSAGE_PATTERN environment variable. To keep this formatting, a custom message handler can use <db:link xlink:href="qtlogging.xml#qFormatLogMessage">qFormatLogMessage</db:link>().</db:para>
<db:para>Try to keep the code in the message handler itself minimal, as expensive operations might block the application. Also, to avoid recursion, any logging messages generated in the message handler itself will be ignored.</db:para>
<db:para>The message handler should always return. For <db:link xlink:href="qtlogging.xml#QtMsgType-enum">fatal messages</db:link>, the application aborts immediately after handling that message.</db:para>
<db:para>Only one message handler can be installed at a time, for the whole application. If there was a previous custom message handler installed, the function will return a pointer to it. This handler can then be later reinstalled by another call to the method. Also, calling qInstallMessageHandler(nullptr) will restore the default message handler.</db:para>
<db:para>Here is an example of a message handler that logs to a local file before calling the default handler:</db:para>
<db:programlisting language="cpp">#include &lt;QApplication&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

QtMessageHandler originalHandler = nullptr;

void logToFile(QtMsgType type, const QMessageLogContext &amp;context, const QString &amp;msg)
{
    QString message = qFormatLogMessage(type, context, msg);
    static FILE *f = fopen(&quot;log.txt&quot;, &quot;a&quot;);
    fprintf(f, &quot;%s\n&quot;, qPrintable(message));
    fflush(f);

    if (originalHandler)
        *originalHandler(type, context, msg);
}

int main(int argc, char **argv)
{
    originalHandler = qInstallMessageHandler(logToFile);
    QApplication app(argc, argv);
    ...
    return app.exec();
}
</db:programlisting>
<db:para>Note that the C++ standard guarantees that static FILE *f is initialized in a thread-safe way. We can also expect fprintf() and fflush() to be thread-safe, so no further synchronization is necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtlogging.xml#QtMessageHandler-typedef">QtMessageHandler</db:link></db:member>
<db:member><db:link xlink:href="qtlogging.xml#QtMsgType-enum">QtMsgType</db:link></db:member>
<db:member><db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
<db:member><db:link xlink:href="qtlogging.xml#qFormatLogMessage">qFormatLogMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSetMessagePattern">
<db:title>void qSetMessagePattern(const QString &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:para>Changes the output of the default message handler.</db:para>
<db:para>Allows to tweak the output of <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtlogging.xml#qInfo">qInfo</db:link>(), <db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtlogging.xml#qCritical">qCritical</db:link>(), and <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>(). The category logging output of <db:link xlink:href="qloggingcategory.xml#qCDebug">qCDebug</db:link>(), <db:link xlink:href="qloggingcategory.xml#qCInfo">qCInfo</db:link>(), <db:link xlink:href="qloggingcategory.xml#qCWarning">qCWarning</db:link>(), and <db:link xlink:href="qloggingcategory.xml#qCCritical">qCCritical</db:link>() is formatted, too.</db:para>
<db:para>Following placeholders are supported:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Placeholder</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>%{appname}</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::applicationName</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{category}</db:para>
</db:td>
<db:td>
<db:para>Logging category</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{file}</db:para>
</db:td>
<db:td>
<db:para>Path to source file</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{function}</db:para>
</db:td>
<db:td>
<db:para>Function</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{line}</db:para>
</db:td>
<db:td>
<db:para>Line in source file</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{message}</db:para>
</db:td>
<db:td>
<db:para>The actual message</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{pid}</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcoreapplication.xml#applicationPid">QCoreApplication::applicationPid</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{threadid}</db:para>
</db:td>
<db:td>
<db:para>The system-wide ID of current thread (if it can be obtained)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{qthreadptr}</db:para>
</db:td>
<db:td>
<db:para>A pointer to the current <db:link xlink:href="qthread.xml">QThread</db:link> (result of <db:link xlink:href="qthread.xml#currentThread">QThread::currentThread</db:link>())</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{type}</db:para>
</db:td>
<db:td>
<db:para>&quot;debug&quot;, &quot;warning&quot;, &quot;critical&quot; or &quot;fatal&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{time process}</db:para>
</db:td>
<db:td>
<db:para>time of the message, in seconds since the process started (the token &quot;process&quot; is literal)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{time boot}</db:para>
</db:td>
<db:td>
<db:para>the time of the message, in seconds since the system boot if that can be determined (the token &quot;boot&quot; is literal). If the time since boot could not be obtained, the output is indeterminate (see <db:link xlink:href="qelapsedtimer.xml#msecsSinceReference">QElapsedTimer::msecsSinceReference</db:link>()).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{time [format]}</db:para>
</db:td>
<db:td>
<db:para>system time when the message occurred, formatted by passing the format to <db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>(). If the format is not specified, the format of <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link> is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>%{backtrace [depth=N] [separator=&quot;...&quot;]}</db:para>
</db:td>
<db:td>
<db:para>A backtrace with the number of frames specified by the optional depth parameter (defaults to 5), and separated by the optional separator parameter (defaults to &quot;|&quot;).</db:para>
<db:para>This expansion is available only on some platforms:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>platforms using glibc;</db:para>
</db:listitem>
<db:listitem>
<db:para>platforms shipping C++23's &lt;stacktrace&gt; header (requires compiling Qt in C++23 mode).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Depending on the platform, there are some restrictions on the function names printed by this expansion.</db:para>
<db:para>On some platforms, names are only known for exported functions. If you want to see the name of every function in your application, make sure your application is compiled and linked with -rdynamic, or an equivalent of it.</db:para>
<db:para>When reading backtraces, take into account that frames might be missing due to inlining or tail call optimization.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can also use conditionals on the type of the message using %{if-debug}, %{if-info} %{if-warning}, %{if-critical} or %{if-fatal} followed by an %{endif}. What is inside the %{if-*} and %{endif} will only be printed if the type matches.</db:para>
<db:para>Finally, text inside %{if-category} ... %{endif} is only printed if the category is not the default one.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QT_MESSAGE_PATTERN=&quot;[%{time yyyyMMdd h:mm:ss.zzz ttt} %{if-debug}D%{endif}%{if-info}I%{endif}%{if-warning}W%{endif}%{if-critical}C%{endif}%{if-fatal}F%{endif}] %{file}:%{line} - %{message}&quot;
</db:programlisting>
<db:para>The default <db:code role="parameter">pattern</db:code> is %{if-category}%{category}: %{endif}%{message}.</db:para>
<db:note>
<db:para>On Android, the default <db:code role="parameter">pattern</db:code> is %{message} because the category is used as <db:link xlink:href="https://developer.android.com/ndk/reference/group/logging#__android_log_print">tag</db:link> since Android logcat has a dedicated field for the logging categories, see <db:link xlink:href="https://developer.android.com/reference/android/util/Log">Android Logging</db:link>. If a custom <db:code role="parameter">pattern</db:code> including the category is used, <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::applicationName</db:link>() is used as <db:link xlink:href="https://developer.android.com/ndk/reference/group/logging#__android_log_print">tag</db:link>.</db:para>
</db:note>
<db:para>The <db:code role="parameter">pattern</db:code> can also be changed at runtime by setting the QT_MESSAGE_PATTERN environment variable; if both qSetMessagePattern() is called and QT_MESSAGE_PATTERN is set, the environment variable takes precedence.</db:para>
<db:note>
<db:para>The information for the placeholders category, file, function and line is only recorded in debug builds. Alternatively, QT_MESSAGELOGCONTEXT can be defined explicitly. For more information refer to the <db:link xlink:href="qmessagelogcontext.xml">QMessageLogContext</db:link> documentation.</db:para>
</db:note>
<db:note>
<db:para>The message pattern only applies to unstructured logging, such as the default stderr output. Structured logging such as systemd will record the message as is, along with as much structured information as can be captured.</db:para>
</db:note>
<db:para>Custom message handlers can use <db:link xlink:href="qtlogging.xml#qFormatLogMessage">qFormatLogMessage</db:link>() to take <db:code role="parameter">pattern</db:code> into account.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
<db:member><db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link></db:member>
<db:member><db:link xlink:href="qmessagelogcontext.xml">QMessageLogContext</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="qCritical">
<db:title>qCritical(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the critical message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows, the message is sent to the debugger. On QNX the message is sent to slogger2.</db:para>
<db:para>This function takes a format string and a list of arguments, similar to the C printf() function. The format should be a Latin-1 string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void load(const QString &amp;fileName)
{
    QFile file(fileName);
    if (!file.exists())
        qCritical(&quot;File '%s' does not exist!&quot;, qUtf8Printable(fileName));
}
</db:programlisting>
<db:para>If you include &lt;QtDebug&gt;, a more convenient syntax is also available:</db:para>
<db:programlisting language="cpp">qCritical() &lt;&lt; &quot;Brush:&quot; &lt;&lt; myQBrush &lt;&lt; &quot;Other value:&quot; &lt;&lt; i;
</db:programlisting>
<db:para>A space is inserted between the items, and a newline is appended at the end.</db:para>
<db:para>To suppress the output at runtime, you can define <db:link xlink:href="qloggingcategory.xml">logging rules</db:link> or register a custom <db:link xlink:href="qloggingcategory.xml#installFilter">filter</db:link>.</db:para>
<db:para>For debugging purposes, it is sometimes convenient to let the program abort for critical messages. This allows you then to inspect the core dump, or attach a debugger - see also <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>(). To enable this, set the environment variable QT_FATAL_CRITICALS to a number n. The program terminates then for the n-th critical message. That is, if the environment variable is set to 1, it will terminate on the first call; if it contains the value 10, it will exit on the 10th call. Any non-numeric value in the environment variable is equivalent to 1.</db:para>
<db:note>
<db:para>This macro is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml#qCCritical">qCCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qDebug">
<db:title>qDebug(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the debug message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows the message is sent to the console, if it is a console application; otherwise, it is sent to the debugger. On QNX, the message is sent to slogger2. This function does nothing if QT_NO_DEBUG_OUTPUT was defined during compilation.</db:para>
<db:para>If you pass the function a format string and a list of arguments, it works in similar way to the C printf() function. The format should be a Latin-1 string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">qDebug(&quot;Items in list: %d&quot;, myList.size());
</db:programlisting>
<db:para>If you include &lt;QtDebug&gt;, a more convenient syntax is also available:</db:para>
<db:programlisting language="cpp">qDebug() &lt;&lt; &quot;Brush:&quot; &lt;&lt; myQBrush &lt;&lt; &quot;Other value:&quot; &lt;&lt; i;
</db:programlisting>
<db:para>With this syntax, the function returns a <db:link xlink:href="qdebug.xml">QDebug</db:link> object that is configured to use the <db:link xlink:href="qtlogging.xml#QtMsgType-enum">QtDebugMsg</db:link> message type. It automatically puts a single space between each item, and outputs a newline at the end. It supports many C++ and Qt types.</db:para>
<db:para>To suppress the output at runtime, install your own message handler with <db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
<db:note>
<db:para>This macro is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml#qCDebug">qCDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qFatal">
<db:title>qFatal(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the fatal message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows, the message is sent to the debugger. On QNX the message is sent to slogger2.</db:para>
<db:para>If you are using the <db:emphasis role="bold">default message handler</db:emphasis> this function will abort to create a core dump. On Windows, for debug builds, this function will report a _CRT_ERROR enabling you to connect a debugger to the application.</db:para>
<db:para>This function takes a format string and a list of arguments, similar to the C printf() function.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int divide(int a, int b)
{
    if (b == 0)                                // program error
        qFatal(&quot;divide: cannot divide by zero&quot;);
    return a / b;
}
</db:programlisting>
<db:para>To suppress the output at runtime, install your own message handler with <db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml#qCFatal">qCFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qInfo">
<db:title>qInfo(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the informational message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows, the message is sent to the console, if it is a console application; otherwise, it is sent to the debugger. On QNX the message is sent to slogger2. This function does nothing if QT_NO_INFO_OUTPUT was defined during compilation.</db:para>
<db:para>If you pass the function a format string and a list of arguments, it works in similar way to the C printf() function. The format should be a Latin-1 string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">qInfo(&quot;Items in list: %d&quot;, myList.size());
</db:programlisting>
<db:para>If you include &lt;QtDebug&gt;, a more convenient syntax is also available:</db:para>
<db:programlisting language="cpp">qInfo() &lt;&lt; &quot;Brush:&quot; &lt;&lt; myQBrush &lt;&lt; &quot;Other value:&quot; &lt;&lt; i;
</db:programlisting>
<db:para>With this syntax, the function returns a <db:link xlink:href="qdebug.xml">QDebug</db:link> object that is configured to use the <db:link xlink:href="qtlogging.xml#QtMsgType-enum">QtInfoMsg</db:link> message type. It automatically puts a single space between each item, and outputs a newline at the end. It supports many C++ and Qt types.</db:para>
<db:para>To suppress the output at runtime, install your own message handler using <db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
<db:note>
<db:para>This macro is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml#qCInfo">qCInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qWarning">
<db:title>qWarning(const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Calls the message handler with the warning message <db:code role="parameter">message</db:code>. If no message handler has been installed, the message is printed to stderr. Under Windows, the message is sent to the debugger. On QNX the message is sent to slogger2.</db:para>
<db:para>This function takes a format string and a list of arguments, similar to the C printf() function. The format should be a Latin-1 string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void f(int c)
{
    if (c &gt; 200)
        qWarning(&quot;f: bad argument, c == %d&quot;, c);
}
</db:programlisting>
<db:para>If you include &lt;QtDebug&gt;, a more convenient syntax is also available:</db:para>
<db:programlisting language="cpp">qWarning() &lt;&lt; &quot;Brush:&quot; &lt;&lt; myQBrush &lt;&lt; &quot;Other value:&quot; &lt;&lt; i;
</db:programlisting>
<db:para>This syntax inserts a space between each item, and appends a newline at the end.</db:para>
<db:para>This function does nothing if QT_NO_WARNING_OUTPUT was defined during compilation. To suppress the output at runtime, you can set <db:link xlink:href="qloggingcategory.xml">logging rules</db:link> or register a custom <db:link xlink:href="qloggingcategory.xml#installFilter">filter</db:link>.</db:para>
<db:para>For debugging purposes, it is sometimes convenient to let the program abort for warning messages. This allows you then to inspect the core dump, or attach a debugger - see also <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>(). To enable this, set the environment variable QT_FATAL_WARNINGS to a number n. The program terminates then for the n-th warning. That is, if the environment variable is set to 1, it will terminate on the first call; if it contains the value 10, it will exit on the 10th call. Any non-numeric value in the environment variable is equivalent to 1.</db:para>
<db:note>
<db:para>This macro is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml#qCWarning">qCWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInfo">qInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qCritical">qCritical</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>()</db:member>
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
