<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QToolBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtoolbox.xml">QToolBox</db:link> class provides a column of tabbed widget items.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QToolBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qframe.xml" xlink:role="class">QFrame</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QToolBox is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A toolbox is a widget that displays a column of tabs one above the other, with the current item displayed below the current tab. Every tab has an index position within the column of tabs. A tab's item is a <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:para>Each item has an <db:link xlink:href="qtoolbox.xml#itemText">itemText</db:link>(), an optional <db:link xlink:href="qtoolbox.xml#itemIcon">itemIcon</db:link>(), an optional <db:link xlink:href="qtoolbox.xml#itemToolTip">itemToolTip</db:link>(), and a <db:link xlink:href="qtoolbox.xml#widget">widget</db:link>(). The item's attributes can be changed with <db:link xlink:href="qtoolbox.xml#setItemText">setItemText</db:link>(), <db:link xlink:href="qtoolbox.xml#setItemIcon">setItemIcon</db:link>(), and <db:link xlink:href="qtoolbox.xml#setItemToolTip">setItemToolTip</db:link>(). Each item can be enabled or disabled individually with <db:link xlink:href="qtoolbox.xml#setItemEnabled">setItemEnabled</db:link>().</db:para>
<db:para>Items are added using <db:link xlink:href="qtoolbox.xml#addItem">addItem</db:link>(), or inserted at particular positions using <db:link xlink:href="qtoolbox.xml#insertItem">insertItem</db:link>(). The total number of items is given by count(). Items can be deleted with delete, or removed from the toolbox with <db:link xlink:href="qtoolbox.xml#removeItem">removeItem</db:link>(). Combining <db:link xlink:href="qtoolbox.xml#removeItem">removeItem</db:link>() and <db:link xlink:href="qtoolbox.xml#insertItem">insertItem</db:link>() allows you to move items to different positions.</db:para>
<db:para>The index of the current item widget is returned by currentIndex(), and set with setCurrentIndex(). The index of a particular item can be found using <db:link xlink:href="qtoolbox.xml#indexOf">indexOf</db:link>(), and the item at a given index is returned by item().</db:para>
<db:para>The <db:link xlink:href="qtoolbox.xml#currentChanged">currentChanged</db:link>() signal is emitted when the current item is changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QToolBox">
<db:title>[explicit] QToolBox::QToolBox(QWidget *<db:emphasis>parent</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>f</db:emphasis> = 0)</db:title>
<db:para>Constructs a new toolbox with the given <db:code role="parameter">parent</db:code> and the flags, <db:code role="parameter">f</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QToolBox">
<db:title>[virtual noexcept] QToolBox::~QToolBox()</db:title>
<db:para>Destroys the toolbox.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>int QToolBox::addItem(QWidget *<db:emphasis>widget</db:emphasis>, const QIcon &amp;<db:emphasis>iconSet</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Adds the <db:code role="parameter">widget</db:code> in a new tab at bottom of the toolbox. The new tab's text is set to <db:code role="parameter">text</db:code>, and the <db:code role="parameter">iconSet</db:code> is displayed to the left of the <db:code role="parameter">text</db:code>. Returns the new tab's index.</db:para>
</db:section>
<db:section xml:id="addItem-1">
<db:title>int QToolBox::addItem(QWidget *<db:emphasis>w</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the widget <db:code role="parameter">w</db:code> in a new tab at bottom of the toolbox. The new tab's text is set to <db:code role="parameter">text</db:code>. Returns the new tab's index.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QToolBox::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#changeEvent" role="function">QFrame::changeEvent(QEvent *ev)</db:link>.</db:para>
</db:section>
<db:section xml:id="currentChanged">
<db:title>void QToolBox::currentChanged(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the current item is changed. The new current item's index is passed in <db:code role="parameter">index</db:code>, or -1 if there is no current item.</db:para>
</db:section>
<db:section xml:id="currentWidget">
<db:title>QWidget *QToolBox::currentWidget() const</db:title>
<db:para>Returns a pointer to the current widget, or 0 if there is no such item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">currentIndex()</db:link></db:member>
<db:member><db:link xlink:href="qtoolbox.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QToolBox::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#event" role="function">QFrame::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="indexOf">
<db:title>int QToolBox::indexOf(QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:para>Returns the index of <db:code role="parameter">widget</db:code>, or -1 if the item does not exist.</db:para>
</db:section>
<db:section xml:id="insertItem">
<db:title>int QToolBox::insertItem(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Inserts the <db:code role="parameter">widget</db:code> at position <db:code role="parameter">index</db:code>, or at the bottom of the toolbox if <db:code role="parameter">index</db:code> is out of range. The new item's text is set to <db:code role="parameter">text</db:code>, and the <db:code role="parameter">icon</db:code> is displayed to the left of the <db:code role="parameter">text</db:code>. Returns the new item's index.</db:para>
</db:section>
<db:section xml:id="insertItem-1">
<db:title>int QToolBox::insertItem(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts the <db:code role="parameter">widget</db:code> at position <db:code role="parameter">index</db:code>, or at the bottom of the toolbox if <db:code role="parameter">index</db:code> is out of range. The new item's text is set to <db:code role="parameter">text</db:code>. Returns the new item's index.</db:para>
</db:section>
<db:section xml:id="isItemEnabled">
<db:title>bool QToolBox::isItemEnabled(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns true if the item at position <db:code role="parameter">index</db:code> is enabled; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="itemIcon">
<db:title>QIcon QToolBox::itemIcon(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the icon of the item at position <db:code role="parameter">index</db:code>, or a null icon if <db:code role="parameter">index</db:code> is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#setItemIcon">setItemIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemInserted">
<db:title>[virtual protected] void QToolBox::itemInserted(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This virtual handler is called after a new item was added or inserted at position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#itemRemoved">itemRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemRemoved">
<db:title>[virtual protected] void QToolBox::itemRemoved(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This virtual handler is called after an item was removed from position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#itemInserted">itemInserted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemText">
<db:title>QString QToolBox::itemText(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the text of the item at position <db:code role="parameter">index</db:code>, or an empty string if <db:code role="parameter">index</db:code> is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#setItemText">setItemText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemToolTip">
<db:title>QString QToolBox::itemToolTip(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the tooltip of the item at position <db:code role="parameter">index</db:code>, or an empty string if <db:code role="parameter">index</db:code> is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#setItemToolTip">setItemToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeItem">
<db:title>void QToolBox::removeItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the item at position <db:code role="parameter">index</db:code> from the toolbox. Note that the widget is <db:emphasis>not</db:emphasis> deleted.</db:para>
</db:section>
<db:section xml:id="setCurrentWidget">
<db:title>void QToolBox::setCurrentWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Makes<db:code role="parameter">widget</db:code> the current widget. The <db:code role="parameter">widget</db:code> must be an item in this tool box.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="">setCurrentIndex()</db:link></db:member>
<db:member><db:link xlink:href="qtoolbox.xml#currentWidget">currentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemEnabled">
<db:title>void QToolBox::setItemEnabled(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enabled</db:code> is true then the item at position <db:code role="parameter">index</db:code> is enabled; otherwise the item at position <db:code role="parameter">index</db:code> is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#isItemEnabled">isItemEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemIcon">
<db:title>void QToolBox::setItemIcon(int <db:emphasis>index</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>Sets the icon of the item at position <db:code role="parameter">index</db:code> to <db:code role="parameter">icon</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#itemIcon">itemIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemText">
<db:title>void QToolBox::setItemText(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the text of the item at position <db:code role="parameter">index</db:code> to <db:code role="parameter">text</db:code>.</db:para>
<db:para>If the provided text contains an ampersand character ('&amp;'), a mnemonic is automatically created for it. The character that follows the '&amp;' will be used as the shortcut key. Any previous mnemonic will be overwritten, or cleared if no mnemonic is defined by the text. See the <db:link xlink:href="qshortcut.xml#mnemonic">QShortcut</db:link> documentation for details (to display an actual ampersand, use '&amp;&amp;').</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#itemText">itemText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemToolTip">
<db:title>void QToolBox::setItemToolTip(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>toolTip</db:emphasis>)</db:title>
<db:para>Sets the tooltip of the item at position <db:code role="parameter">index</db:code> to <db:code role="parameter">toolTip</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbox.xml#itemToolTip">itemToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QToolBox::showEvent(QShowEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QToolBox::widget(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the widget at position <db:code role="parameter">index</db:code>, or 0 if there is no such item.</db:para>
</db:section>
</db:section>
</db:article>
