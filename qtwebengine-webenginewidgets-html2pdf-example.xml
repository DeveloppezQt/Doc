<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Widgets Html2Pdf Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Converts web pages to PDF documents using Qt WebEngine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/html2pdf-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Html2Pdf</db:emphasis> demonstrates how to use Qt WebEngine to implement a command-line application for converting web pages into PDF documents.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="the-conversion-process">
<db:title>The Conversion Process</db:title>
<db:para>In order to convert a web page into a PDF document we need to:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Create a <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Tell the <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> to begin loading the target URL and wait for it to finish.</db:para>
</db:listitem>
<db:listitem>
<db:para>Tell the <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> to begin converting the loaded page into a PDF file and again wait for it to finish.</db:para>
</db:listitem>
<db:listitem>
<db:para>Once the conversion is finished, exit the program.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>This process is encapsulated in the <db:emphasis>Html2PdfConverter</db:emphasis> class:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QCommandLineParser&amp;gt;
#include &amp;lt;QFile&amp;gt;
#include &amp;lt;QTextStream&amp;gt;
#include &amp;lt;QWebEnginePage&amp;gt;

#include &amp;lt;functional&amp;gt;

using namespace std;
using namespace std::placeholders;

class Html2PdfConverter : public QObject
{
    Q_OBJECT
public:
    explicit Html2PdfConverter(QString inputPath, QString outputPath);
    int run();

private slots:
    void loadFinished(bool ok);
    void pdfPrintingFinished(const QString &amp;amp;filePath, bool success);

private:
    QString m_inputPath;
    QString m_outputPath;
    QScopedPointer&amp;lt;QWebEnginePage&amp;gt; m_page;
};
</db:programlisting>
<db:para>In the constructor we create the <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> and connect to its <db:link xlink:href="qwebenginepage.xml#loadFinished">QWebEnginePage::loadFinished</db:link> and <db:link xlink:href="qwebenginepage.xml#pdfPrintingFinished">QWebEnginePage::pdfPrintingFinished</db:link> signals:</db:para>
<db:programlisting language="cpp">Html2PdfConverter::Html2PdfConverter(QString inputPath, QString outputPath)
    : m_inputPath(move(inputPath))
    , m_outputPath(move(outputPath))
    , m_page(new QWebEnginePage)
{
    connect(m_page.data(), &amp;amp;QWebEnginePage::loadFinished,
            this, &amp;amp;Html2PdfConverter::loadFinished);
    connect(m_page.data(), &amp;amp;QWebEnginePage::pdfPrintingFinished,
            this, &amp;amp;Html2PdfConverter::pdfPrintingFinished);
}
</db:programlisting>
<db:para>The <db:code>run()</db:code> method will trigger the conversion process by asking <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> to start loading the target URL. We then enter the main event loop:</db:para>
<db:programlisting language="cpp">int Html2PdfConverter::run()
{
    m_page-&amp;gt;load(QUrl::fromUserInput(m_inputPath));
    return QApplication::exec();
}
</db:programlisting>
<db:para>After the loading is finished we begin PDF generation. We ask the <db:link xlink:href="qwebenginepage.xml#printToPdf">QWebEnginePage::printToPdf</db:link> method to write the output directly to disk:</db:para>
<db:programlisting language="cpp">void Html2PdfConverter::loadFinished(bool ok)
{
    if (!ok) {
        QTextStream(stderr)
            &amp;lt;&amp;lt; tr(&quot;failed to load URL '%1'&quot;).arg(m_inputPath) &amp;lt;&amp;lt; &quot;\n&quot;;
        QCoreApplication::exit(1);
        return;
    }

    m_page-&amp;gt;printToPdf(m_outputPath);
}
</db:programlisting>
<db:para>Once we receive the signal that the PDF conversion has finished, all that remains is to report potential errors and exit the program:</db:para>
<db:programlisting language="cpp">void Html2PdfConverter::pdfPrintingFinished(const QString &amp;amp;filePath, bool success)
{
    if (!success) {
        QTextStream(stderr)
            &amp;lt;&amp;lt; tr(&quot;failed to print to output file '%1'&quot;).arg(filePath) &amp;lt;&amp;lt; &quot;\n&quot;;
        QCoreApplication::exit(1);
    } else {
        QCoreApplication::quit();
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="the-main-function">
<db:title>The Main Function</db:title>
<db:para>Our <db:code>main</db:code> function is responsible for setting up a <db:link xlink:href="qapplication.xml">QApplication</db:link> and parsing command line arguments:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QCoreApplication::setOrganizationName(&quot;QtExamples&quot;);
    QCoreApplication::setApplicationName(&quot;html2pdf&quot;);
    QCoreApplication::setApplicationVersion(QT_VERSION_STR);

    QCommandLineParser parser;
    parser.setApplicationDescription(
        QCoreApplication::translate(&quot;main&quot;, &quot;Converts the web page INPUT into the PDF file OUTPUT.&quot;));
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addPositionalArgument(
        QCoreApplication::translate(&quot;main&quot;, &quot;INPUT&quot;),
        QCoreApplication::translate(&quot;main&quot;, &quot;Input URL for PDF conversion.&quot;));
    parser.addPositionalArgument(
        QCoreApplication::translate(&quot;main&quot;, &quot;OUTPUT&quot;),
        QCoreApplication::translate(&quot;main&quot;, &quot;Output file name for PDF conversion.&quot;));

    parser.process(QCoreApplication::arguments());

    const QStringList requiredArguments = parser.positionalArguments();
    if (requiredArguments.size() != 2)
        parser.showHelp(1);

    Html2PdfConverter converter(requiredArguments.at(0), requiredArguments.at(1));
    return converter.run();
}
</db:programlisting>
<db:para>Note that to use Qt WebEngine Widgets we need to create a <db:link xlink:href="qapplication.xml">QApplication</db:link> and not a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>, even though this is a command line application.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/html2pdf/html2pdf.cpp">webenginewidgets/html2pdf/html2pdf.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/html2pdf/html2pdf.pro">webenginewidgets/html2pdf/html2pdf.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
