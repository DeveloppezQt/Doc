<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCustom3DVolume Class</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcustom3dvolume.xml">QCustom3DVolume</db:link> class adds a volume rendered object to a graph.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCustom3DVolume</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtdatavisualization-custom3dvolume.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcustom3ditem.xml" xlink:role="class">QCustom3DItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A volume rendered object is a box with a 3D texture. Three slice planes are supported for the volume, one along each main axis of the volume.</db:para>
<db:para>Rendering volume objects is very performance intensive, especially when the volume is largely transparent, as the contents of the volume are ray-traced. The performance scales nearly linearly with the amount of pixels that the volume occupies on the screen, so showing the volume in a smaller view or limiting the zoom level of the graph are easy ways to improve performance. Similarly, the volume texture dimensions have a large impact on performance. If the frame rate is more important than pixel-perfect rendering of the volume contents, consider turning the high definition shader off by setting the <db:link xlink:href="qcustom3dvolume.xml#useHighDefShader-prop">useHighDefShader</db:link> property to <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Volumetric objects are only supported with orthographic projection.</db:para>
</db:note>
<db:note>
<db:para>Volumetric objects utilize 3D textures, which are not supported in OpenGL ES2 environments.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#addCustomItem">QAbstract3DGraph::addCustomItem</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#orthoProjection-prop">QAbstract3DGraph::orthoProjection</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#useHighDefShader-prop">useHighDefShader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alphaMultiplier-prop">
<db:title>alphaMultiplier : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>alphaMultiplier</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">alphaMultiplier</db:synopsisinfo>
<db:synopsisinfo role="setter">setAlphaMultiplier</db:synopsisinfo>
<db:synopsisinfo role="notifier">alphaMultiplierChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the value that the alpha value of every texel of the volume texture is multiplied with at the render time.</db:para>
<db:para>This property can be used to introduce uniform transparency to the volume. If <db:link xlink:href="qcustom3dvolume.xml#preserveOpacity-prop">preserveOpacity</db:link> is <db:code>true</db:code>, only texels with at least some transparency to begin with are affected, and fully opaque texels are not affected. The value must not be negative. Defaults to <db:code>1.0f</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">alphaMultiplier</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAlphaMultiplier</db:emphasis>(<db:type>float</db:type> <db:emphasis>mult</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">alphaMultiplierChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>mult</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#preserveOpacity-prop">preserveOpacity</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorTable-prop">
<db:title>colorTable : QVector&lt;QRgb&gt;</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector&lt;QRgb&gt;</db:type>
<db:varname>colorTable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">colorTable</db:synopsisinfo>
<db:synopsisinfo role="setter">setColorTable</db:synopsisinfo>
<db:synopsisinfo role="notifier">colorTableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the array containing the colors for indexed texture formats.</db:para>
<db:para>If the texture format is not indexed, this array is not used and can be empty.</db:para>
<db:para>Defaults to <db:code>0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector.xml">QVector</db:link></db:type>&lt;<db:type><db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link></db:type>&gt; <db:emphasis role="bold">colorTable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setColorTable</db:emphasis>(const <db:type><db:link xlink:href="qvector.xml">QVector</db:link></db:type>&lt;<db:type><db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link></db:type>&gt; &amp;<db:emphasis>colors</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">colorTableChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qimage.xml#colorTable">QImage::colorTable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawSliceFrames-prop">
<db:title>drawSliceFrames : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>drawSliceFrames</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">drawSliceFrames</db:synopsisinfo>
<db:synopsisinfo role="setter">setDrawSliceFrames</db:synopsisinfo>
<db:synopsisinfo role="notifier">drawSliceFramesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether slice frames are drawn around the volume.</db:para>
<db:para>If this property value is <db:code>true</db:code>, the frames of slices indicated by slice index properties will be drawn around the volume. If it is <db:code>false</db:code>, no slice frames will be drawn.</db:para>
<db:para>Drawing slice frames is independent of drawing slices, so you can show the full volume and still draw the slice frames around it. This is useful when using <db:link xlink:href="qcustom3dvolume.xml#renderSlice">renderSlice</db:link>() to display the slices outside the graph itself.</db:para>
<db:para>Defaults to <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">drawSliceFrames</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDrawSliceFrames</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">drawSliceFramesChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#sliceIndexX-prop">sliceIndexX</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#sliceIndexY-prop">sliceIndexY</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#sliceIndexZ-prop">sliceIndexZ</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSlices-prop">drawSlices</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#renderSlice">renderSlice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawSlices-prop">
<db:title>drawSlices : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>drawSlices</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">drawSlices</db:synopsisinfo>
<db:synopsisinfo role="setter">setDrawSlices</db:synopsisinfo>
<db:synopsisinfo role="notifier">drawSlicesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the specified slices are drawn instead of the full volume.</db:para>
<db:para>If this property value is <db:code>true</db:code>, the slices indicated by slice index properties will be drawn instead of the full volume. If it is <db:code>false</db:code>, the full volume will always be drawn. Defaults to <db:code>false</db:code>.</db:para>
<db:note>
<db:para>The slices are always drawn along the item axes, so if the item is rotated, the slices are rotated as well.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">drawSlices</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDrawSlices</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">drawSlicesChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#sliceIndexX-prop">sliceIndexX</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#sliceIndexY-prop">sliceIndexY</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#sliceIndexZ-prop">sliceIndexZ</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preserveOpacity-prop">
<db:title>preserveOpacity : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>preserveOpacity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">preserveOpacity</db:synopsisinfo>
<db:synopsisinfo role="setter">setPreserveOpacity</db:synopsisinfo>
<db:synopsisinfo role="notifier">preserveOpacityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the alpha multiplier is applied to all texels.</db:para>
<db:para>If this property value is <db:code>true</db:code>, <db:link xlink:href="qcustom3dvolume.xml#alphaMultiplier-prop">alphaMultiplier</db:link> is only applied to texels that already have some transparency. If it is <db:code>false</db:code>, the multiplier is applied to the alpha value of all texels. Defaults to <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">preserveOpacity</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPreserveOpacity</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">preserveOpacityChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#alphaMultiplier-prop">alphaMultiplier</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliceFrameColor-prop">
<db:title>sliceFrameColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>sliceFrameColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sliceFrameColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setSliceFrameColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">sliceFrameColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color of the slice frame.</db:para>
<db:para>Transparent slice frame color is not supported.</db:para>
<db:para>Defaults to black.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">sliceFrameColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSliceFrameColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sliceFrameColorChanged</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSliceFrames-prop">drawSliceFrames</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliceFrameGaps-prop">
<db:title>sliceFrameGaps : QVector3D</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector3D</db:type>
<db:varname>sliceFrameGaps</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sliceFrameGaps</db:synopsisinfo>
<db:synopsisinfo role="setter">setSliceFrameGaps</db:synopsisinfo>
<db:synopsisinfo role="notifier">sliceFrameGapsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the size of the air gap left between the volume itself and the frame in each dimension.</db:para>
<db:para>The gap can be different on different dimensions. The values are fractions of the volume thickness in the same dimension. The values cannot be negative.</db:para>
<db:para>Defaults to <db:code>QVector3D(0.01, 0.01, 0.01)</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> <db:emphasis role="bold">sliceFrameGaps</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSliceFrameGaps</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>values</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sliceFrameGapsChanged</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>values</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSliceFrames-prop">drawSliceFrames</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliceFrameThicknesses-prop">
<db:title>sliceFrameThicknesses : QVector3D</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector3D</db:type>
<db:varname>sliceFrameThicknesses</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sliceFrameThicknesses</db:synopsisinfo>
<db:synopsisinfo role="setter">setSliceFrameThicknesses</db:synopsisinfo>
<db:synopsisinfo role="notifier">sliceFrameThicknessesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the thickness of the slice frames for each dimension.</db:para>
<db:para>The values are fractions of the volume thickness in the same dimension. The values cannot be negative.</db:para>
<db:para>Defaults to <db:code>QVector3D(0.01, 0.01, 0.01)</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> <db:emphasis role="bold">sliceFrameThicknesses</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSliceFrameThicknesses</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>values</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sliceFrameThicknessesChanged</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>values</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSliceFrames-prop">drawSliceFrames</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliceFrameWidths-prop">
<db:title>sliceFrameWidths : QVector3D</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector3D</db:type>
<db:varname>sliceFrameWidths</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sliceFrameWidths</db:synopsisinfo>
<db:synopsisinfo role="setter">setSliceFrameWidths</db:synopsisinfo>
<db:synopsisinfo role="notifier">sliceFrameWidthsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the width of the slice frame.</db:para>
<db:para>The width can be different on different dimensions, so you can for example omit drawing the frames on certain sides of the volume by setting the value for that dimension to zero. The values are fractions of the volume thickness in the same dimension. The values cannot be negative.</db:para>
<db:para>Defaults to <db:code>QVector3D(0.01, 0.01, 0.01)</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> <db:emphasis role="bold">sliceFrameWidths</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSliceFrameWidths</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>values</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sliceFrameWidthsChanged</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>values</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSliceFrames-prop">drawSliceFrames</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliceIndexX-prop">
<db:title>sliceIndexX : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>sliceIndexX</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sliceIndexX</db:synopsisinfo>
<db:synopsisinfo role="setter">setSliceIndexX</db:synopsisinfo>
<db:synopsisinfo role="notifier">sliceIndexXChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the x-dimension index into the texture data indicating which vertical slice to show.</db:para>
<db:para>Setting any dimension to negative indicates no slice or slice frame for that dimension is drawn. If all dimensions are negative, no slices or slice frames are drawn and the volume is drawn normally.</db:para>
<db:para>Defaults to <db:code>-1</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">sliceIndexX</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSliceIndexX</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sliceIndexXChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSlices-prop">drawSlices</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSliceFrames-prop">drawSliceFrames</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliceIndexY-prop">
<db:title>sliceIndexY : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>sliceIndexY</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sliceIndexY</db:synopsisinfo>
<db:synopsisinfo role="setter">setSliceIndexY</db:synopsisinfo>
<db:synopsisinfo role="notifier">sliceIndexYChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the y-dimension index into the texture data indicating which horizontal slice to show.</db:para>
<db:para>Setting any dimension to negative indicates no slice or slice frame for that dimension is drawn. If all dimensions are negative, no slices or slice frames are drawn and the volume is drawn normally.</db:para>
<db:para>Defaults to <db:code>-1</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">sliceIndexY</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSliceIndexY</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sliceIndexYChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSlices-prop">drawSlices</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSliceFrames-prop">drawSliceFrames</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliceIndexZ-prop">
<db:title>sliceIndexZ : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>sliceIndexZ</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sliceIndexZ</db:synopsisinfo>
<db:synopsisinfo role="setter">setSliceIndexZ</db:synopsisinfo>
<db:synopsisinfo role="notifier">sliceIndexZChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the z-dimension index into the texture data indicating which vertical slice to show.</db:para>
<db:para>Setting any dimension to negative indicates no slice or slice frame for that dimension is drawn. If all dimensions are negative, no slices or slice frames are drawn and the volume is drawn normally.</db:para>
<db:para>Defaults to <db:code>-1</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">sliceIndexZ</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSliceIndexZ</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sliceIndexZChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSlices-prop">drawSlices</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#drawSliceFrames-prop">drawSliceFrames</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureData-prop">
<db:title>textureData : QVector&lt;uchar&gt;*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector&lt;uchar&gt;*</db:type>
<db:varname>textureData</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textureData</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextureData</db:synopsisinfo>
<db:synopsisinfo role="notifier">textureDataChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the array containing the texture data in the format specified by <db:link xlink:href="qcustom3dvolume.xml#textureFormat">textureFormat</db:link>.</db:para>
<db:para>The size of this array must be at least (<db:code>textureDataWidth * textureHeight * textureDepth * texture format color depth in bytes</db:code>).</db:para>
<db:para>A 3D texture is defined by a stack of 2D subtextures. Each subtexture must be of identical size (<db:code>textureDataWidth * textureHeight</db:code>), and the depth of the stack is defined by the <db:link xlink:href="qcustom3dvolume.xml#textureDepth-prop">textureDepth</db:link> property. The data in each 2D texture is identical to a <db:link xlink:href="qimage.xml">QImage</db:link> data with the same format, so <db:link xlink:href="qimage.xml#bits">QImage::bits</db:link>() can be used to supply the data for each subtexture.</db:para>
<db:para>Ownership of the new array transfers to the <db:link xlink:href="qcustom3dvolume.xml">QCustom3DVolume</db:link> instance. If another array is set, the previous array is deleted. If the same array is set again, it is assumed that the array contents have been changed and the graph rendering is triggered.</db:para>
<db:note>
<db:para>Each x-dimension line of the data needs to be 32-bit aligned. If <db:link xlink:href="qcustom3dvolume.xml#textureFormat">textureFormat</db:link> is <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Indexed8</db:link> and the <db:link xlink:href="qcustom3dvolume.xml#textureWidth-prop">textureWidth</db:link> value is not divisible by four, padding bytes might need to be added to each x-dimension line of the <db:code role="parameter">data</db:code>. The <db:link xlink:href="qcustom3dvolume.xml#textureDataWidth">textureDataWidth</db:link>() function returns the padded byte count. The padding bytes should indicate a fully transparent color to avoid rendering artifacts.</db:para>
</db:note>
<db:para>Defaults to <db:code>0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector.xml">QVector</db:link></db:type>&lt;<db:type><db:link xlink:href="qtglobal.xml#uchar-typedef">uchar</db:link></db:type>&gt; *<db:emphasis role="bold">textureData</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextureData</db:emphasis>(<db:type><db:link xlink:href="qvector.xml">QVector</db:link></db:type>&lt;<db:type><db:link xlink:href="qtglobal.xml#uchar-typedef">uchar</db:link></db:type>&gt; *<db:emphasis>data</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">textureDataChanged</db:emphasis>(<db:type><db:link xlink:href="qvector.xml">QVector</db:link></db:type>&lt;<db:type><db:link xlink:href="qtglobal.xml#uchar-typedef">uchar</db:link></db:type>&gt; *<db:emphasis>data</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#colorTable-prop">colorTable</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#setSubTextureData">setSubTextureData</db:link>()</db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureDataWidth">textureDataWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureDepth-prop">
<db:title>textureDepth : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>textureDepth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textureDepth</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextureDepth</db:synopsisinfo>
<db:synopsisinfo role="notifier">textureDepthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the depth of the 3D texture defining the volume content in pixels.</db:para>
<db:para>Defaults to <db:code>0</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link> value may need to be resized or recreated if this value is changed. Defaults to <db:code>0</db:code>.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">textureDepth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextureDepth</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">textureDepthChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureWidth-prop">textureWidth</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureHeight-prop">textureHeight</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureHeight-prop">
<db:title>textureHeight : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>textureHeight</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textureHeight</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextureHeight</db:synopsisinfo>
<db:synopsisinfo role="notifier">textureHeightChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the height of the 3D texture defining the volume content in pixels.</db:para>
<db:para>Defaults to <db:code>0</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link> value may need to be resized or recreated if this value is changed. Defaults to <db:code>0</db:code>.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">textureHeight</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextureHeight</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">textureHeightChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureWidth-prop">textureWidth</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureDepth-prop">textureDepth</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureWidth-prop">
<db:title>textureWidth : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>textureWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textureWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextureWidth</db:synopsisinfo>
<db:synopsisinfo role="notifier">textureWidthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the width of the 3D texture defining the volume content in pixels.</db:para>
<db:para>Defaults to <db:code>0</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link> value may need to be resized or recreated if this value is changed. Defaults to <db:code>0</db:code>.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">textureWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextureWidth</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">textureWidthChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureHeight-prop">textureHeight</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureDepth-prop">textureDepth</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureDataWidth">textureDataWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="useHighDefShader-prop">
<db:title>useHighDefShader : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>useHighDefShader</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">useHighDefShader</db:synopsisinfo>
<db:synopsisinfo role="setter">setUseHighDefShader</db:synopsisinfo>
<db:synopsisinfo role="notifier">useHighDefShaderChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether a high or low definition shader is used to render the volume.</db:para>
<db:para>If this property value is <db:code>true</db:code>, a high definition shader is used. If it is <db:code>false</db:code>, a low definition shader is used.</db:para>
<db:para>The high definition shader guarantees that every visible texel of the volume texture is sampled when the volume is rendered. The low definition shader renders only a rough approximation of the volume contents, but at a much higher frame rate. The low definition shader does not guarantee that every texel of the volume texture is sampled, so there may be flickering if the volume contains distinct thin features.</db:para>
<db:note>
<db:para>This value does not affect the level of detail when rendering the slices of the volume.</db:para>
</db:note>
<db:para>Defaults to <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">useHighDefShader</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUseHighDefShader</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">useHighDefShaderChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#renderSlice">renderSlice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCustom3DVolume">
<db:title>[explicit] QCustom3DVolume::QCustom3DVolume(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCustom3DVolume</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCustom3DVolume(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a custom 3D volume with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QCustom3DVolume-1">
<db:title>[explicit] QCustom3DVolume::QCustom3DVolume(const QVector3D &amp;<db:emphasis>position</db:emphasis>, const QVector3D &amp;<db:emphasis>scaling</db:emphasis>, const QQuaternion &amp;<db:emphasis>rotation</db:emphasis>, int <db:emphasis>textureWidth</db:emphasis>, int <db:emphasis>textureHeight</db:emphasis>, int <db:emphasis>textureDepth</db:emphasis>, QVector&lt;uchar&gt; *<db:emphasis>textureData</db:emphasis>, QImage::Format <db:emphasis>textureFormat</db:emphasis>, const QVector&lt;QRgb&gt; &amp;<db:emphasis>colorTable</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCustom3DVolume</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>scaling</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QQuaternion &amp;</db:type>
<db:parameter>rotation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>textureWidth</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>textureHeight</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>textureDepth</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector&lt;uchar&gt; *</db:type>
<db:parameter>textureData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QImage::Format</db:type>
<db:parameter>textureFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector&lt;QRgb&gt; &amp;</db:type>
<db:parameter>colorTable</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCustom3DVolume(const QVector3D &amp;position, const QVector3D &amp;scaling, const QQuaternion &amp;rotation, int textureWidth, int textureHeight, int textureDepth, QVector&lt;uchar&gt; *textureData, QImage::Format textureFormat, const QVector&lt;QRgb&gt; &amp;colorTable, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a custom 3D volume with the given <db:code role="parameter">position</db:code>, <db:code role="parameter">scaling</db:code>, <db:code role="parameter">rotation</db:code>, <db:code role="parameter">textureWidth</db:code>, <db:code role="parameter">textureHeight</db:code>, <db:code role="parameter">textureDepth</db:code>, <db:code role="parameter">textureData</db:code>, <db:code role="parameter">textureFormat</db:code>, <db:code role="parameter">colorTable</db:code>, and optional <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#colorTable-prop">colorTable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QCustom3DVolume">
<db:title>[virtual] QCustom3DVolume::~QCustom3DVolume()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCustom3DVolume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCustom3DVolume()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the custom 3D volume.</db:para>
</db:section>
<db:section xml:id="createTextureData">
<db:title>QVector&lt;uchar&gt; *QCustom3DVolume::createTextureData(const QVector&lt;QImage *&gt; &amp;<db:emphasis>images</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector&lt;uchar&gt; *</db:type>
<db:methodname>createTextureData</db:methodname>
<db:methodparam>
<db:type>const QVector&lt;QImage *&gt; &amp;</db:type>
<db:parameter>images</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;uchar&gt; * createTextureData(const QVector&lt;QImage *&gt; &amp;images)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a new texture data array from an array of <db:code role="parameter">images</db:code> and sets it as <db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link> for this volume object. The texture dimensions are also set according to image and array dimensions. All of the images in the array must be the same size. If the images are not all in the <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Indexed8</db:link> format, all texture data will be converted into the <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32</db:link> format. If the images are in the <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Indexed8</db:link> format, the <db:link xlink:href="qcustom3dvolume.xml#colorTable-prop">colorTable</db:link> value for the entire volume will be taken from the first image.</db:para>
<db:para>Returns a pointer to the newly created array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureWidth-prop">textureWidth</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureHeight-prop">textureHeight</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureDepth-prop">textureDepth</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderSlice">
<db:title>QImage QCustom3DVolume::renderSlice(Qt::Axis <db:emphasis>axis</db:emphasis>, int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QImage</db:type>
<db:methodname>renderSlice</db:methodname>
<db:methodparam>
<db:type>Qt::Axis</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage renderSlice(Qt::Axis axis, int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the slice specified by <db:code role="parameter">index</db:code> along the axis specified by <db:code role="parameter">axis</db:code> into an image. The texture format of this object is used.</db:para>
<db:para>Returns the rendered image of the slice, or a null image if an invalid index is specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSliceIndices">
<db:title>void QCustom3DVolume::setSliceIndices(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>z</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSliceIndices</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSliceIndices(int x, int y, int z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>A convenience function for setting all three slice indices (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, and <db:code role="parameter">z</db:code>) at once.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSubTextureData">
<db:title>void QCustom3DVolume::setSubTextureData(Qt::Axis <db:emphasis>axis</db:emphasis>, int <db:emphasis>index</db:emphasis>, const uchar *<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSubTextureData</db:methodname>
<db:methodparam>
<db:type>Qt::Axis</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const uchar *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSubTextureData(Qt::Axis axis, int index, const uchar *data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a single 2D subtexture of the 3D texture along the specified <db:code role="parameter">axis</db:code> of the volume. The <db:code role="parameter">index</db:code> parameter specifies the subtexture to set. The texture <db:code role="parameter">data</db:code> must be in the format specified by the <db:link xlink:href="qcustom3dvolume.xml#textureFormat">textureFormat</db:link> property and have the size of the cross-section of the volume texture along the specified axis multiplied by the texture format color depth in bytes. The <db:code role="parameter">data</db:code> is expected to be ordered similarly to the data in images produced by the <db:link xlink:href="qcustom3dvolume.xml#renderSlice">renderSlice</db:link>() method along the same axis.</db:para>
<db:note>
<db:para>Each x-dimension line of the data needs to be 32-bit aligned when targeting the y-axis or z-axis. If <db:link xlink:href="qcustom3dvolume.xml#textureFormat">textureFormat</db:link> is <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Indexed8</db:link> and the <db:link xlink:href="qcustom3dvolume.xml#textureWidth-prop">textureWidth</db:link> value is not divisible by four, padding bytes might need to be added to each x-dimension line of the <db:code role="parameter">data</db:code> to properly align it. The padding bytes should indicate a fully transparent color to avoid rendering artifacts.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#renderSlice">renderSlice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSubTextureData-1">
<db:title>void QCustom3DVolume::setSubTextureData(Qt::Axis <db:emphasis>axis</db:emphasis>, int <db:emphasis>index</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSubTextureData</db:methodname>
<db:methodparam>
<db:type>Qt::Axis</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSubTextureData(Qt::Axis axis, int index, const QImage &amp;image)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a single 2D subtexture of the 3D texture along the specified <db:code role="parameter">axis</db:code> of the volume. The <db:code role="parameter">index</db:code> parameter specifies the subtexture to set. The source <db:code role="parameter">image</db:code> must be in the format specified by the <db:link xlink:href="qcustom3dvolume.xml#textureFormat">textureFormat</db:link> property if <db:link xlink:href="qcustom3dvolume.xml#textureFormat">textureFormat</db:link> is indexed. If <db:link xlink:href="qcustom3dvolume.xml#textureFormat">textureFormat</db:link> is <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32</db:link>, the image is converted to that format. The image must have the size of the cross-section of the volume texture along the specified axis. The orientation of the image should correspond to the orientation of the slice image produced by <db:link xlink:href="qcustom3dvolume.xml#renderSlice">renderSlice</db:link>() method along the same axis.</db:para>
<db:note>
<db:para>Each x-dimension line of the data needs to be 32-bit aligned when targeting the y-axis or z-axis. If <db:link xlink:href="qcustom3dvolume.xml#textureFormat">textureFormat</db:link> is <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Indexed8</db:link> and the <db:link xlink:href="qcustom3dvolume.xml#textureWidth-prop">textureWidth</db:link> value is not divisible by four, padding bytes might need to be added to each x-dimension line of the image to properly align it. The padding bytes should indicate a fully transparent color to avoid rendering artifacts. It is not guaranteed that <db:link xlink:href="qimage.xml">QImage</db:link> will do this automatically.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#renderSlice">renderSlice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextureDimensions">
<db:title>void QCustom3DVolume::setTextureDimensions(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>depth</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextureDimensions</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>depth</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextureDimensions(int width, int height, int depth)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>A convenience function for setting all three texture dimensions (<db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>, and <db:code role="parameter">depth</db:code>) at once.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextureFormat">
<db:title>void QCustom3DVolume::setTextureFormat(QImage::Format <db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextureFormat</db:methodname>
<db:methodparam>
<db:type>QImage::Format</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextureFormat(QImage::Format format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the format of the <db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link> property to <db:code role="parameter">format</db:code>. Only two formats are supported currently: <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Indexed8</db:link> and <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32</db:link>. If an indexed format is specified, <db:link xlink:href="qcustom3dvolume.xml#colorTable-prop">colorTable</db:link> must also be set. Defaults to <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureFormat">textureFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#colorTable-prop">colorTable</db:link></db:member>
<db:member><db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureDataWidth">
<db:title>int QCustom3DVolume::textureDataWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>textureDataWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int textureDataWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the actual texture data width. When the texture format is <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Indexed8</db:link>, this value equals <db:link xlink:href="qcustom3dvolume.xml#textureWidth-prop">textureWidth</db:link> aligned to a 32-bit boundary. Otherwise, this value equals four times <db:link xlink:href="qcustom3dvolume.xml#textureWidth-prop">textureWidth</db:link>.</db:para>
</db:section>
<db:section xml:id="textureFormat">
<db:title>QImage::Format QCustom3DVolume::textureFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImage::Format</db:type>
<db:methodname>textureFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage::Format textureFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the format of the <db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link> property value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureFormatChanged">
<db:title>void QCustom3DVolume::textureFormatChanged(QImage::Format <db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>textureFormatChanged</db:methodname>
<db:methodparam>
<db:type>QImage::Format</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void textureFormatChanged(QImage::Format format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">format</db:code> of the <db:link xlink:href="qcustom3dvolume.xml#textureData-prop">textureData</db:link> value changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3dvolume.xml#setTextureFormat">setTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
