<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QHash::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhash-iterator.xml">QHash::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> and <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link>&lt;Key, T&gt;::iterator allows you to iterate over a <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> (or <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>) and to modify the value (but not the key) associated with a particular key. If you want to iterate over a const <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link>, you should use <db:link xlink:href="qhash-const-iterator.xml">QHash::const_iterator</db:link>. It is generally good practice to use <db:link xlink:href="qhash-const-iterator.xml">QHash::const_iterator</db:link> on a non-const <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> as well, unless you need to change the <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qhash-iterator.xml">QHash::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> function like QHash::begin(), QHash::end(), or QHash::find() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a hash:</db:para>
<db:programlisting language="cpp">QHash&lt;QString, int&gt; hash;
hash.insert(&quot;January&quot;, 1);
hash.insert(&quot;February&quot;, 2);
...
hash.insert(&quot;December&quot;, 12);

QHash&lt;QString, int&gt;::iterator i;
for (i = hash.begin(); i != hash.end(); ++i)
    cout &lt;&lt; i.key() &lt;&lt; &quot;: &quot; &lt;&lt; i.value() &lt;&lt; endl;
</db:programlisting>
<db:para>Unlike <db:link xlink:href="qmap.xml">QMap</db:link>, which orders its items by key, <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> stores its items in an arbitrary order. The only guarantee is that items that share the same key (because they were inserted using QHash::insertMulti()) will appear consecutively, from the most recently to the least recently inserted value.</db:para>
<db:para>Let's see a few examples of things we can do with a <db:link xlink:href="qhash-iterator.xml">QHash::iterator</db:link> that we cannot do with a <db:link xlink:href="qhash-const-iterator.xml">QHash::const_iterator</db:link>. Here's an example that increments every value stored in the <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> by 2:</db:para>
<db:programlisting language="cpp">QHash&lt;QString, int&gt;::iterator i;
for (i = hash.begin(); i != hash.end(); ++i)
    i.value() += 2;
</db:programlisting>
<db:para>Here's an example that removes all the items whose key is a string that starts with an underscore character:</db:para>
<db:programlisting language="cpp">QHash&lt;QString, int&gt;::iterator i = hash.begin();
while (i != hash.end()) {
    if (i.key().startsWith('_'))
        i = hash.erase(i);
    else
        ++i;
}
</db:programlisting>
<db:para>The call to QHash::erase() removes the item pointed to by the iterator from the hash, and returns an iterator to the next item. Here's another way of removing an item while iterating:</db:para>
<db:programlisting language="cpp">QHash&lt;QString, int&gt;::iterator i = hash.begin();
while (i != hash.end()) {
    QHash&lt;QString, int&gt;::iterator prev = i;
    ++i;
    if (prev.key().startsWith('_'))
        hash.erase(prev);
}
</db:programlisting>
<db:para>It might be tempting to write code like this:</db:para>
<db:programlisting language="cpp">// WRONG
while (i != hash.end()) {
    if (i.key().startsWith('_'))
        hash.erase(i);
    ++i;
}
</db:programlisting>
<db:para>However, this will potentially crash in <db:code>++i</db:code>, because <db:code>i</db:code> is a dangling iterator after the call to erase().</db:para>
<db:para>Multiple iterators can be used on the same hash. However, be aware that any modification performed directly on the <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> has the potential of dramatically changing the order in which the items are stored in the hash, as they might cause <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> to rehash its internal data structure. There is one notable exception: QHash::erase(). This function can safely be called while iterating, and won't affect the order of items in the hash. If you need to keep iterators over a long period of time, we recommend that you use <db:link xlink:href="qmap.xml">QMap</db:link> rather than <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link>.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-const-iterator.xml">QHash::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qhash-key-iterator.xml">QHash::key_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablehashiterator.xml">QMutableHashIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
