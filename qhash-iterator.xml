<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QHash::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhash-iterator.xml">QHash::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qhash.xml#qhash">QHash</db:link> and <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qhash.xml#qhash">QHash</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qhash.xml#qhash">QHash</db:link>&lt;Key, T&gt;::iterator allows you to iterate over a <db:link xlink:href="qhash.xml#qhash">QHash</db:link> (or <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>) and to modify the value (but not the key) associated with a particular key. If you want to iterate over a const <db:link xlink:href="qhash.xml#qhash">QHash</db:link>, you should use <db:link xlink:href="qhash-const-iterator.xml">QHash::const_iterator</db:link>. It is generally good practice to use <db:link xlink:href="qhash-const-iterator.xml">QHash::const_iterator</db:link> on a non-const <db:link xlink:href="qhash.xml#qhash">QHash</db:link> as well, unless you need to change the <db:link xlink:href="qhash.xml#qhash">QHash</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qhash-iterator.xml">QHash::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qhash.xml#qhash">QHash</db:link> function like <db:link xlink:href="qhash.xml#begin">QHash::begin</db:link>(), <db:link xlink:href="qhash.xml#end">QHash::end</db:link>(), or <db:link xlink:href="qhash.xml#find">QHash::find</db:link>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a hash:</db:para>
<db:programlisting language="cpp">QHash&amp;lt;QString, int&amp;gt; hash;
hash.insert(&quot;January&quot;, 1);
hash.insert(&quot;February&quot;, 2);
...
hash.insert(&quot;December&quot;, 12);

QHash&amp;lt;QString, int&amp;gt;::iterator i;
for (i = hash.begin(); i != hash.end(); ++i)
    cout &amp;lt;&amp;lt; i.key() &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; i.value() &amp;lt;&amp;lt; Qt::endl;
</db:programlisting>
<db:para>Unlike <db:link xlink:href="qmap.xml">QMap</db:link>, which orders its items by key, <db:link xlink:href="qhash.xml#qhash">QHash</db:link> stores its items in an arbitrary order.</db:para>
<db:para>Let's see a few examples of things we can do with a <db:link xlink:href="qhash-iterator.xml">QHash::iterator</db:link> that we cannot do with a <db:link xlink:href="qhash-const-iterator.xml">QHash::const_iterator</db:link>. Here's an example that increments every value stored in the <db:link xlink:href="qhash.xml#qhash">QHash</db:link> by 2:</db:para>
<db:programlisting language="cpp">QHash&amp;lt;QString, int&amp;gt;::iterator i;
for (i = hash.begin(); i != hash.end(); ++i)
    i.value() += 2;
</db:programlisting>
<db:para>Here's an example that removes all the items whose key is a string that starts with an underscore character:</db:para>
<db:programlisting language="cpp">QHash&amp;lt;QString, int&amp;gt;::iterator i = hash.begin();
while (i != hash.end()) {
    if (i.key().startsWith('_'))
        i = hash.erase(i);
    else
        ++i;
}
</db:programlisting>
<db:para>The call to <db:link xlink:href="qhash.xml#erase">QHash::erase</db:link>() removes the item pointed to by the iterator from the hash, and returns an iterator to the next item. Here's another way of removing an item while iterating:</db:para>
<db:programlisting language="cpp">QHash&amp;lt;QString, int&amp;gt;::iterator i = hash.begin();
while (i != hash.end()) {
    QHash&amp;lt;QString, int&amp;gt;::iterator prev = i;
    ++i;
    if (prev.key().startsWith('_'))
        hash.erase(prev);
}
</db:programlisting>
<db:para>It might be tempting to write code like this:</db:para>
<db:programlisting language="cpp">// WRONG
while (i != hash.end()) {
    if (i.key().startsWith('_'))
        hash.erase(i);
    ++i;
}
</db:programlisting>
<db:para>However, this will potentially crash in ++i, because i is a dangling iterator after the call to <db:link xlink:href="qhash.xml#erase">erase</db:link>().</db:para>
<db:para>Multiple iterators can be used on the same hash. However, be aware that any modification performed directly on the <db:link xlink:href="qhash.xml#qhash">QHash</db:link> has the potential of dramatically changing the order in which the items are stored in the hash, as they might cause <db:link xlink:href="qhash.xml#qhash">QHash</db:link> to rehash its internal data structure. There is one notable exception: <db:link xlink:href="qhash.xml#erase">QHash::erase</db:link>(). This function can safely be called while iterating, and won't affect the order of items in the hash. If you need to keep iterators over a long period of time, we recommend that you use <db:link xlink:href="qmap.xml">QMap</db:link> rather than <db:link xlink:href="qhash.xml#qhash">QHash</db:link>.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-const-iterator.xml">QHash::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qhash-key-iterator.xml">QHash::key_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablehashiterator.xml">QMutableHashIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool iterator::operator==(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq">bool iterator::operator==(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool iterator::operator!=(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-not-eq">bool iterator::operator!=(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iterator">
<db:title>iterator::iterator()</db:title>
<db:constructorsynopsis>
<db:methodname>iterator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like <db:link xlink:href="qhash-iterator.xml#key">key</db:link>(), <db:link xlink:href="qhash-iterator.xml#value">value</db:link>(), and operator++() must not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash.xml#begin">QHash::begin</db:link>()</db:member>
<db:member><db:link xlink:href="qhash.xml#end">QHash::end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>const Key &amp;iterator::key() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const Key &amp;</db:type>
<db:methodname>key</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const Key &amp; key() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current item's key as a const reference.</db:para>
<db:para>There is no direct way of changing an item's key through an iterator, although it can be done by calling <db:link xlink:href="qhash.xml#erase">QHash::erase</db:link>() followed by <db:link xlink:href="qhash.xml#insert">QHash::insert</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>T &amp;iterator::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T &amp;</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the current item's value.</db:para>
<db:para>You can change the value of an item by using value() on the left side of an assignment, for example:</db:para>
<db:programlisting language="cpp">if (i.key() == &quot;Hello&quot;)
    i.value() = &quot;Bonjour&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qhash-iterator.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>T &amp;iterator::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T &amp;</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the current item's value.</db:para>
<db:para>Same as <db:link xlink:href="qhash-iterator.xml#value">value</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>iterator &amp;iterator::operator++()</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator++</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator++()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix ++ operator (++i) advances the iterator to the next item in the hash and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qhash.xml#end">QHash::end</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#operator--" role="deprecated">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>iterator iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator</db:type>
<db:methodname>operator++</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator++(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (i++) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--gt">
<db:title>T *iterator::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current item's value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for iterator</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qhash-iterator.xml">iterator</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="operator-2b">
<db:title>iterator iterator::operator+(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>iterator</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator+(int j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This operator is deprecated in order to align with std::unordered_map functionality.</db:para>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions forward from this iterator. (If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.)</db:para>
<db:para>This operation can be slow for large <db:code role="parameter">j</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>iterator &amp;iterator::operator+=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator+=(int j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This operator is deprecated in order to align with std::unordered_map functionality.</db:para>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> items. (If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qhash-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>iterator iterator::operator-(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>iterator</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator-(int j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This operator is deprecated in order to align with std::unordered_map functionality.</db:para>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions backward from this iterator. (If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.)</db:para>
<db:para>This operation can be slow for large <db:code role="parameter">j</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--">
<db:title>iterator &amp;iterator::operator--()</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator--</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator--()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This operator is deprecated in order to align with std::unordered_map functionality.</db:para>
<db:para>The prefix – operator (--i) makes the preceding item current and returns an iterator pointing to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qhash.xml#begin">QHash::begin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>iterator iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator</db:type>
<db:methodname>operator--</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator--(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This operator is deprecated in order to align with std::unordered_map functionality.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix – operator (i--) makes the preceding item current and returns an iterator pointing to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>iterator &amp;iterator::operator-=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator-=(int j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This operator is deprecated in order to align with std::unordered_map functionality.</db:para>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> items. (If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qhash-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
