<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Transform QML Type</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Used to perform transforms on meshes.</db:para>
<db:para>This type was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt3D.Core 2.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Component3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qtransform.xml">QTransform</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Transform component is not shareable between multiple Entity's. The transformation is held as vector3d scale, quaternion rotation and vector3d translation components. The transformations are applied to the mesh in that order. When <db:link xlink:href="qml-qt3d-core-transform.xml#matrix-prop">Transform::matrix</db:link> property is set, it is decomposed to these transform components and corresponding transform signals are emitted.</db:para>
<db:para>Several helper functions are provided to set up the Transform; <db:link xlink:href="qml-qt3d-core-transform.xml#fromAxisAndAngle-method">fromAxisAndAngle</db:link> and <db:link xlink:href="qml-qt3d-core-transform.xml#fromAxesAndAngles-method">fromAxesAndAngles</db:link> can be used to set the rotation around specific axes, <db:link xlink:href="qml-qt3d-core-transform.xml#fromEulerAngles-method">fromEulerAngles</db:link> can be used to set the rotation based on euler angles and <db:link xlink:href="qml-qt3d-core-transform.xml#rotateAround-method">rotateAround</db:link> can be used to rotate the object around specific point relative to local origin.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="matrix-prop">
<db:title>matrix : matrix4x4</db:title>
<db:fieldsynopsis>
<db:type>matrix4x4</db:type>
<db:varname>matrix</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the matrix4x4 of the transform.</db:para>
<db:note>
<db:para>When the matrix property is set, it is decomposed to translation, rotation and scale components.</db:para>
</db:note>
</db:section>
<db:section xml:id="rotation-prop">
<db:title>rotation : quaternion</db:title>
<db:fieldsynopsis>
<db:type>quaternion</db:type>
<db:varname>rotation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the rotation of the transform as quaternion.</db:para>
</db:section>
<db:section xml:id="rotationX-prop">
<db:title>rotationX : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>rotationX</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the x rotation of the transform as Euler angle.</db:para>
</db:section>
<db:section xml:id="rotationY-prop">
<db:title>rotationY : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>rotationY</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the y rotation of the transform as Euler angle.</db:para>
</db:section>
<db:section xml:id="rotationZ-prop">
<db:title>rotationZ : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>rotationZ</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the z rotation of the transform as Euler angle.</db:para>
</db:section>
<db:section xml:id="scale-prop">
<db:title>scale : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>scale</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the uniform scale of the transform. If the scale has been set with <db:link xlink:href="qml-qt3d-core-transform.xml#scale3D-prop">scale3D</db:link>, holds the x value only.</db:para>
</db:section>
<db:section xml:id="scale3D-prop">
<db:title>scale3D : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>scale3D</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the scale of the transform as vector3d.</db:para>
</db:section>
<db:section xml:id="translation-prop">
<db:title>translation : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>translation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the translation of the transform as vector3d.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="fromAxesAndAngles-method">
<db:title>quaternion fromAxesAndAngles(vector3d <db:emphasis>axis1</db:emphasis>, real <db:emphasis>angle1</db:emphasis>, vector3d <db:emphasis>axis2</db:emphasis>, real <db:emphasis>angle2</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">axis1</db:code>, <db:code role="parameter">angle1</db:code>, <db:code role="parameter">axis2</db:code>, and <db:code role="parameter">angle2</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromAxesAndAngles-method-1">
<db:title>quaternion fromAxesAndAngles(vector3d <db:emphasis>axis1</db:emphasis>, real <db:emphasis>angle1</db:emphasis>, vector3d <db:emphasis>axis2</db:emphasis>, real <db:emphasis>angle2</db:emphasis>, vector3d <db:emphasis>axis3</db:emphasis>, real <db:emphasis>angle3</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">axis1</db:code>, <db:code role="parameter">angle1</db:code>, <db:code role="parameter">axis2</db:code>, <db:code role="parameter">angle2</db:code>, <db:code role="parameter">axis3</db:code>, and <db:code role="parameter">angle3</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromAxisAndAngle-method">
<db:title>quaternion fromAxisAndAngle(vector3d <db:emphasis>axis</db:emphasis>, real <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">axis</db:code> and <db:code role="parameter">angle</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromAxisAndAngle-method-1">
<db:title>quaternion fromAxisAndAngle(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>z</db:emphasis>, real <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, and <db:code role="parameter">angle</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromEulerAngles-method">
<db:title>quaternion fromEulerAngles(vector3d <db:emphasis>eulerAngles</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">eulerAngles</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromEulerAngles-method-1">
<db:title>quaternion fromEulerAngles(real <db:emphasis>pitch</db:emphasis>, real <db:emphasis>yaw</db:emphasis>, real <db:emphasis>roll</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">pitch</db:code>, <db:code role="parameter">yaw</db:code>, and <db:code role="parameter">roll</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="rotateAround-method">
<db:title>matrix4x4 rotateAround(vector3d <db:emphasis>point</db:emphasis>, real <db:emphasis>angle</db:emphasis>, vector3d <db:emphasis>axis</db:emphasis>)</db:title>
<db:para>Creates a rotation matrix from <db:code role="parameter">axis</db:code> and <db:code role="parameter">angle</db:code> around <db:code role="parameter">point</db:code> relative to local origin. Returns the resulting matrix4x4.</db:para>
</db:section>
</db:section>
</db:article>
