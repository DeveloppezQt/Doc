<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtNumeric&gt; - Qt Numeric Functions</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The &lt;QtNumeric&gt; header file provides common numeric functions.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtNumeric</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The &lt;QtNumeric&gt; header file contains various numeric functions for comparing and adjusting a numeric value.</db:para>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qFpClassify">
<db:title>int qFpClassify(double <db:emphasis>val</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="qFpClassify-1">int qFpClassify(float <db:emphasis>val</db:emphasis>)</db:bridgehead>
<db:para>Classifies a floating-point value.</db:para>
<db:para>The return values are defined in &lt;cmath&gt;: returns one of the following, determined by the floating-point class of <db:code role="parameter">val</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>FP_NAN not a number</db:para>
</db:listitem>
<db:listitem>
<db:para>FP_INFINITE infinities (positive or negative)</db:para>
</db:listitem>
<db:listitem>
<db:para>FP_ZERO zero (positive or negative)</db:para>
</db:listitem>
<db:listitem>
<db:para>FP_NORMAL finite with a full mantissa</db:para>
</db:listitem>
<db:listitem>
<db:para>FP_SUBNORMAL finite with a reduced mantissa</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qAbs">
<db:title>[constexpr] T qAbs(const T &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:para>Compares <db:code role="parameter">t</db:code> to the 0 of type T and returns the absolute value. Thus if T is <db:emphasis>double</db:emphasis>, then <db:code role="parameter">t</db:code> is compared to <db:emphasis>(double) 0</db:emphasis>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int absoluteValue;
int myValue = -4;

absoluteValue = qAbs(myValue);
// absoluteValue == 4
</db:programlisting>
</db:section>
<db:section xml:id="qAddOverflow">
<db:title>[since 6.1] typename std::enable_if_t&lt;std::is_unsigned_v&lt;T&gt; || std::is_signed_v&lt;T&gt;, bool&gt; qAddOverflow(T <db:emphasis>v1</db:emphasis>, T <db:emphasis>v2</db:emphasis>, T *<db:emphasis>result</db:emphasis>)</db:title>
<db:para>Adds two values <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>, of a numeric type T and records the value in <db:code role="parameter">result</db:code>. If the addition overflows the valid range for type T, returns true, otherwise returns false.</db:para>
<db:para>An implementation is guaranteed to be available for 8-, 16-, and 32-bit integer types, as well as integer types of the size of a pointer. Overflow math for other types, if available, is considered private API.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="qFloatDistance">
<db:title>quint64 qFloatDistance(double <db:emphasis>a</db:emphasis>, double <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns the number of representable floating-point numbers between <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code>.</db:para>
<db:para>This function serves the same purpose as qFloatDistance(float, float), but returns the distance between two double numbers. Since the range is larger than for two float numbers ([-DBL_MAX,DBL_MAX]), the return type is quint64.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnumeric.xml#qFuzzyCompare">qFuzzyCompare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qFloatDistance-1">
<db:title>quint32 qFloatDistance(float <db:emphasis>a</db:emphasis>, float <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns the number of representable floating-point numbers between <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code>.</db:para>
<db:para>This function provides an alternative way of doing approximated comparisons of floating-point numbers similar to <db:link xlink:href="qtnumeric.xml#qFuzzyCompare">qFuzzyCompare</db:link>(). However, it returns the distance between two numbers, which gives the caller a possibility to choose the accepted error. Errors are relative, so for instance the distance between 1.0E-5 and 1.00001E-5 will give 110, while the distance between 1.0E36 and 1.00001E36 will give 127.</db:para>
<db:para>This function is useful if a floating point comparison requires a certain precision. Therefore, if <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code> are equal it will return 0. The maximum value it will return for 32-bit floating point numbers is 4,278,190,078. This is the distance between -FLT_MAX and +FLT_MAX.</db:para>
<db:para>The function does not give meaningful results if any of the arguments are Infinite or NaN. You can check for this by calling <db:link xlink:href="qtnumeric.xml#qIsFinite">qIsFinite</db:link>().</db:para>
<db:para>The return value can be considered as the &quot;error&quot;, so if you for instance want to compare two 32-bit floating point numbers and all you need is an approximated 24-bit precision, you can use this function like this:</db:para>
<db:programlisting language="cpp">    if (qFloatDistance(a, b) &lt; (1 &lt;&lt; 7)) {   // The last 7 bits are not
                                            // significant
        // precise enough
    }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnumeric.xml#qFuzzyCompare">qFuzzyCompare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qFuzzyCompare">
<db:title>[constexpr noexcept] bool qFuzzyCompare(double <db:emphasis>p1</db:emphasis>, double <db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Compares the floating point value <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> and returns true if they are considered equal, otherwise false.</db:para>
<db:para>Note that comparing values where either <db:code role="parameter">p1</db:code> or <db:code role="parameter">p2</db:code> is 0.0 will not work, nor does comparing values where one of the values is NaN or infinity. If one of the values is always 0.0, use <db:link xlink:href="qtnumeric.xml#qFuzzyIsNull">qFuzzyIsNull</db:link> instead. If one of the values is likely to be 0.0, one solution is to add 1.0 to both values.</db:para>
<db:programlisting language="cpp">// Instead of comparing with 0.0
qFuzzyCompare(0.0, 1.0e-200); // This will return false
// Compare adding 1 to both values will fix the problem
qFuzzyCompare(1 + 0.0, 1 + 1.0e-200); // This will return true
</db:programlisting>
<db:para>The two numbers are compared in a relative way, where the exactness is stronger the smaller the numbers are.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="qFuzzyCompare-1">
<db:title>[constexpr noexcept] bool qFuzzyCompare(float <db:emphasis>p1</db:emphasis>, float <db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Compares the floating point value <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> and returns true if they are considered equal, otherwise false.</db:para>
<db:para>The two numbers are compared in a relative way, where the exactness is stronger the smaller the numbers are.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="qFuzzyIsNull">
<db:title>[constexpr noexcept] bool qFuzzyIsNull(double <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Returns true if the absolute value of <db:code role="parameter">d</db:code> is within 0.000000000001 of 0.0.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="qFuzzyIsNull-1">
<db:title>[constexpr noexcept] bool qFuzzyIsNull(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Returns true if the absolute value of <db:code role="parameter">f</db:code> is within 0.00001f of 0.0.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="qInf">
<db:title>double qInf()</db:title>
<db:para>Returns the bit pattern for an infinite number as a double.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnumeric.xml#qIsInf">qIsInf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qIsFinite">
<db:title>bool qIsFinite(double <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Returns true if the double <db:code role="parameter">d</db:code> is a finite number.</db:para>
</db:section>
<db:section xml:id="qIsFinite-1">
<db:title>bool qIsFinite(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Returns true if the float <db:code role="parameter">f</db:code> is a finite number.</db:para>
</db:section>
<db:section xml:id="qIsInf">
<db:title>bool qIsInf(double <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Returns true if the double <db:code role="parameter">d</db:code> is equivalent to infinity.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnumeric.xml#qInf">qInf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qIsInf-1">
<db:title>bool qIsInf(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Returns true if the float <db:code role="parameter">f</db:code> is equivalent to infinity.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnumeric.xml#qInf">qInf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qIsNaN">
<db:title>bool qIsNaN(double <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Returns true if the double <db:code role="parameter">d</db:code> is not a number (NaN).</db:para>
</db:section>
<db:section xml:id="qIsNaN-1">
<db:title>bool qIsNaN(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Returns true if the float <db:code role="parameter">f</db:code> is not a number (NaN).</db:para>
</db:section>
<db:section xml:id="qMulOverflow">
<db:title>[since 6.1] typename std::enable_if_t&lt;std::is_unsigned_v&lt;T&gt; || std::is_signed_v&lt;T&gt;, bool&gt; qMulOverflow(T <db:emphasis>v1</db:emphasis>, T <db:emphasis>v2</db:emphasis>, T *<db:emphasis>result</db:emphasis>)</db:title>
<db:para>Multiplies <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>, and records the resulting value in <db:code role="parameter">result</db:code>. If the multiplication overflows the valid range for type T, returns true, otherwise returns false.</db:para>
<db:para>An implementation is guaranteed to be available for 8-, 16-, and 32-bit integer types, as well as integer types of the size of a pointer. Overflow math for other types, if available, is considered private API.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="qQNaN">
<db:title>double qQNaN()</db:title>
<db:para>Returns the bit pattern of a quiet NaN as a double.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnumeric.xml#qIsNaN">qIsNaN</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qRound64">
<db:title>[constexpr] qint64 qRound64(double <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Rounds <db:code role="parameter">d</db:code> to the nearest 64-bit integer.</db:para>
<db:para>Rounds half away from zero (e.g. 0.5 -&gt; 1, -0.5 -&gt; -1).</db:para>
<db:note>
<db:para>This function does not guarantee correctness for high precisions.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">double valueA = 42949672960.3;
double valueB = 42949672960.7;

qint64 roundedValueA = qRound64(valueA);
// roundedValueA = 42949672960
qint64 roundedValueB = qRound64(valueB);
// roundedValueB = 42949672961
</db:programlisting>
<db:note>
<db:para>If the value <db:code role="parameter">d</db:code> is outside the range of qint64, the behavior is undefined.</db:para>
</db:note>
</db:section>
<db:section xml:id="qRound64-1">
<db:title>[constexpr] qint64 qRound64(float <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Rounds <db:code role="parameter">d</db:code> to the nearest 64-bit integer.</db:para>
<db:para>Rounds half away from zero (e.g. 0.5f -&gt; 1, -0.5f -&gt; -1).</db:para>
<db:note>
<db:para>This function does not guarantee correctness for high precisions.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">float valueA = 42949672960.3;
float valueB = 42949672960.7;

qint64 roundedValueA = qRound64(valueA);
// roundedValueA = 42949672960
qint64 roundedValueB = qRound64(valueB);
// roundedValueB = 42949672961
</db:programlisting>
<db:note>
<db:para>If the value <db:code role="parameter">d</db:code> is outside the range of qint64, the behavior is undefined.</db:para>
</db:note>
</db:section>
<db:section xml:id="qRound">
<db:title>[constexpr] int qRound(double <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Rounds <db:code role="parameter">d</db:code> to the nearest integer.</db:para>
<db:para>Rounds half away from zero (e.g. 0.5 -&gt; 1, -0.5 -&gt; -1).</db:para>
<db:note>
<db:para>This function does not guarantee correctness for high precisions.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">double valueA = 2.3;
double valueB = 2.7;

int roundedValueA = qRound(valueA);
// roundedValueA = 2
int roundedValueB = qRound(valueB);
// roundedValueB = 3
</db:programlisting>
<db:note>
<db:para>If the value <db:code role="parameter">d</db:code> is outside the range of int, the behavior is undefined.</db:para>
</db:note>
</db:section>
<db:section xml:id="qRound-1">
<db:title>[constexpr] int qRound(float <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Rounds <db:code role="parameter">d</db:code> to the nearest integer.</db:para>
<db:para>Rounds half away from zero (e.g. 0.5f -&gt; 1, -0.5f -&gt; -1).</db:para>
<db:note>
<db:para>This function does not guarantee correctness for high precisions.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">float valueA = 2.3;
float valueB = 2.7;

int roundedValueA = qRound(valueA);
// roundedValueA = 2
int roundedValueB = qRound(valueB);
// roundedValueB = 3
</db:programlisting>
<db:note>
<db:para>If the value <db:code role="parameter">d</db:code> is outside the range of int, the behavior is undefined.</db:para>
</db:note>
</db:section>
<db:section xml:id="qSNaN">
<db:title>double qSNaN()</db:title>
<db:para>Returns the bit pattern of a signalling NaN as a double.</db:para>
</db:section>
<db:section xml:id="qSubOverflow">
<db:title>[since 6.1] typename std::enable_if_t&lt;std::is_unsigned_v&lt;T&gt; || std::is_signed_v&lt;T&gt;, bool&gt; qSubOverflow(T <db:emphasis>v1</db:emphasis>, T <db:emphasis>v2</db:emphasis>, T *<db:emphasis>result</db:emphasis>)</db:title>
<db:para>Subtracts <db:code role="parameter">v2</db:code> from <db:code role="parameter">v1</db:code> and records the resulting value in <db:code role="parameter">result</db:code>. If the subtraction overflows the valid range for type T, returns true, otherwise returns false.</db:para>
<db:para>An implementation is guaranteed to be available for 8-, 16-, and 32-bit integer types, as well as integer types of the size of a pointer. Overflow math for other types, if available, is considered private API.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
</db:section>
</db:article>
