<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScriptable Class</db:title>
<db:productname>QtScript</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>QtScript Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscriptable.xml">QScriptable</db:link> class provides access to the Qt Script environment from Qt C++ member functions.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScriptable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += script</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScriptable is part of <db:simplelist><db:member><db:link xlink:href="script.xml">Scripting Classes and Overviews</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>With <db:link xlink:href="qscriptengine.xml#newQObject">QScriptEngine::newQObject</db:link>(), you can expose the signals and slots and properties of any <db:link xlink:href="qobject.xml">QObject</db:link> (or subclass) to script code. <db:link xlink:href="qscriptable.xml">QScriptable</db:link> augments this functionality by giving your C++ members access to the Qt Script environment they are invoked in; conceptually, it is similar to <db:link xlink:href="qobject.xml#sender">QObject::sender</db:link>().</db:para>
<db:para>By subclassing <db:link xlink:href="qscriptable.xml">QScriptable</db:link>, you get the following functions in your class: <db:link xlink:href="qscriptable.xml#thisObject">thisObject</db:link>(), <db:link xlink:href="qscriptable.xml#argumentCount">argumentCount</db:link>(), <db:link xlink:href="qscriptable.xml#argument">argument</db:link>(), <db:link xlink:href="qscriptable.xml#context">context</db:link>() and <db:link xlink:href="qscriptable.xml#engine">engine</db:link>(). With these functions, you have full access to the Qt Script environment from the slots and property access functions of your class, when they are invoked from script code.</db:para>
<db:para>For example, you can throw a Qt Script exception from a slot; manipulate the `this' object associated with the function call; inspect the arguments stored in the <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> to know the &quot;real&quot; arguments passed to the function from script code; and call script functions from your slot.</db:para>
<db:para>A typical use case of <db:link xlink:href="qscriptable.xml">QScriptable</db:link> is to implement prototype objects for custom C++ types. You define the scriptable interface of your custom type in a <db:link xlink:href="qscriptable.xml">QScriptable</db:link> subclass using properties and slots; then you wrap an instance of your class using <db:link xlink:href="qscriptengine.xml#newQObject">QScriptEngine::newQObject</db:link>(), and finally pass the result to <db:link xlink:href="qscriptengine.xml#setDefaultPrototype">QScriptEngine::setDefaultPrototype</db:link>(). See the <db:link xlink:href="qtscript-script-defaultprototypes-example.xml">Default Prototypes Example</db:link> to see how this can be done.</db:para>
<db:para>The following is what subclassing <db:link xlink:href="qscriptable.xml">QScriptable</db:link> typically looks like:</db:para>
<db:programlisting language="cpp">class MyScriptableObject: public QObject,
      protected QScriptable
{
    Q_OBJECT
...

public slots:
    void doSomething();
    double doSomethingElse();
}
</db:programlisting>
<db:para>The only difference from regular <db:link xlink:href="qobject.xml">QObject</db:link> subclassing is that you also inherit from <db:link xlink:href="qscriptable.xml">QScriptable</db:link>.</db:para>
<db:para>In the implementation of your slots, you can then use the functions inherited from <db:link xlink:href="qscriptable.xml">QScriptable</db:link>:</db:para>
<db:programlisting language="cpp">void MyScriptableObject::doSomething()
{
  context()-&gt;throwError(&quot;Threw an error from a slot&quot;);
}

double MyScriptableObject::doSomethingElse()
{
  return qscriptvalue_cast&lt;double&gt;(thisObject());
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtscript-script-defaultprototypes-example.xml">Default Prototypes Example</db:link></db:member>
<db:member><db:link xlink:href="qscriptengine.xml#newFunction">QScriptEngine::newFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="argument">
<db:title>QScriptValue QScriptable::argument(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the function argument at the given <db:code role="parameter">index</db:code>, or an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> if the Qt function was not invoked from script code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptable.xml#argumentCount">argumentCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="argumentCount">
<db:title>int QScriptable::argumentCount() const</db:title>
<db:para>Returns the number of arguments passed to the function in this invocation, or -1 if the Qt function was not invoked from script code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptable.xml#argument">argument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="context">
<db:title>QScriptContext *QScriptable::context() const</db:title>
<db:para>Returns a pointer to the <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> associated with the current Qt function call, or 0 if the Qt function was not invoked from script code.</db:para>
</db:section>
<db:section xml:id="engine">
<db:title>QScriptEngine *QScriptable::engine() const</db:title>
<db:para>Returns a pointer to the <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> associated with the current Qt function call, or 0 if the Qt function was not invoked from script code.</db:para>
</db:section>
<db:section xml:id="thisObject">
<db:title>QScriptValue QScriptable::thisObject() const</db:title>
<db:para>Returns the `this' object associated with the current Qt function call, or an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> if the Qt function was not invoked from script code.</db:para>
</db:section>
</db:section>
</db:article>
