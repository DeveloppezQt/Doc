<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQueue Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QQueue</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqueue.xml">QQueue</db:link> class is a generic container that provides a queue.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQueue</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlist.xml" xlink:role="class">QList</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QQueue is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqueue.xml">QQueue</db:link>&lt;T&gt; is one of Qt's generic <db:link xlink:href="containers.xml">container classes</db:link>. It implements a queue data structure for items of a same type.</db:para>
<db:para>A queue is a first in, first out (FIFO) structure. Items are added to the tail of the queue using <db:link xlink:href="qqueue.xml#enqueue">enqueue</db:link>() and retrieved from the head using <db:link xlink:href="qqueue.xml#dequeue">dequeue</db:link>(). The <db:link xlink:href="qqueue.xml#head">head</db:link>() function provides access to the head item without removing it.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QQueue&amp;lt;int&amp;gt; queue;
queue.enqueue(1);
queue.enqueue(2);
queue.enqueue(3);
while (!queue.isEmpty())
    cout &amp;lt;&amp;lt; queue.dequeue() &amp;lt;&amp;lt; Qt::endl;
</db:programlisting>
<db:para>The example will output 1, 2, 3 in that order.</db:para>
<db:para><db:link xlink:href="qqueue.xml">QQueue</db:link> inherits from <db:link xlink:href="qlist.xml">QList</db:link>. All of <db:link xlink:href="qlist.xml">QList</db:link>'s functionality also applies to <db:link xlink:href="qqueue.xml">QQueue</db:link>. For example, you can use <db:link xlink:href="qlist.xml#isEmpty">isEmpty</db:link>() to test whether the queue is empty, and you can traverse a <db:link xlink:href="qqueue.xml">QQueue</db:link> using <db:link xlink:href="qlist.xml">QList</db:link>'s iterator classes (for example, QListIterator). But in addition, <db:link xlink:href="qqueue.xml">QQueue</db:link> provides three convenience functions that make it easy to implement FIFO semantics: <db:link xlink:href="qqueue.xml#enqueue">enqueue</db:link>(), <db:link xlink:href="qqueue.xml#dequeue">dequeue</db:link>(), and <db:link xlink:href="qqueue.xml#head">head</db:link>().</db:para>
<db:para><db:link xlink:href="qqueue.xml">QQueue</db:link>'s value type must be an <db:link xlink:href="containers.xml#assignable-data-type">assignable data type</db:link>. This covers most data types that are commonly used, but the compiler won't let you, for example, store a QWidget as a value. Use QWidget* instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist.xml">QList</db:link></db:member>
<db:member><db:link xlink:href="qstack.xml">QStack</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dequeue">
<db:title>T QQueue::dequeue()</db:title>
<db:methodsynopsis>
<db:type>T</db:type>
<db:methodname>dequeue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T dequeue()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the head item in the queue and returns it. This function assumes that the queue isn't empty.</db:para>
<db:para>This is the same as <db:link xlink:href="qlist.xml#takeFirst">QList::takeFirst</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqueue.xml#head">head</db:link>()</db:member>
<db:member><db:link xlink:href="qqueue.xml#enqueue">enqueue</db:link>()</db:member>
<db:member><db:link xlink:href="qlist.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enqueue">
<db:title>void QQueue::enqueue(const T &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enqueue</db:methodname>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void enqueue(const T &amp;t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds value <db:code role="parameter">t</db:code> to the tail of the queue.</db:para>
<db:para>This is the same as <db:link xlink:href="qlist.xml#append">QList::append</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqueue.xml#dequeue">dequeue</db:link>()</db:member>
<db:member><db:link xlink:href="qqueue.xml#head">head</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="head">
<db:title>T &amp;QQueue::head()</db:title>
<db:methodsynopsis>
<db:type>T &amp;</db:type>
<db:methodname>head</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; head()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the queue's head item. This function assumes that the queue isn't empty.</db:para>
<db:para>This is the same as <db:link xlink:href="qlist.xml#first">QList::first</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqueue.xml#dequeue">dequeue</db:link>()</db:member>
<db:member><db:link xlink:href="qqueue.xml#enqueue">enqueue</db:link>()</db:member>
<db:member><db:link xlink:href="qlist.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="head-1">
<db:title>const T &amp;QQueue::head() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T &amp;</db:type>
<db:methodname>head</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const T &amp; head() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[since 4.8] void QQueue::swap(QQueue&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QQueue&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QQueue&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps queue <db:code role="parameter">other</db:code> with this queue. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
</db:section>
</db:article>
