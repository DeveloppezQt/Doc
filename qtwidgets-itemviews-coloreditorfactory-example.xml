<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Color Editor Factory Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to create an editor that can be used by a QItemDelegate.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/coloreditorfactoryimage.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>When editing data in a QListView, QTableView, or QTreeView, editors are created and displayed by a <db:link xlink:href="model-view-programming.xml#delegate-classes">delegate</db:link>. QItemDelegate, which is the default delegate used by Qt's <db:link xlink:href="model-view-programming.xml#view-classes">item views</db:link>, uses a QItemEditorFactory to create editors for it. A unique instance provided by QItemEditorFactory is by default installed on all item delegates.</db:para>
<db:para>An item editor factory contains a collection of QItemEditorCreatorBase instances, which are specialized factories that produce editors for one particular QVariant data type (all models in Qt store their data in <db:link xlink:href="qvariant-proxy.xml">QVariant</db:link>s). An editor can be any Qt or custom widget.</db:para>
<db:para>In this example, we will create an editor (implemented in the <db:code>ColorListEditor</db:code> class) that can edit the QColor data type and be used by QItemDelegates. We do this by creating a new QItemEditorCreatorBase that produces <db:code>ColorListEditors</db:code> and register it with a new factory, which we set as the default editor item factory (the unique factory instance). To test our editor, we have implemented the <db:code>Window</db:code> class, which displays a QTableWidget in which <db:link xlink:href="qcolor-proxy.xml">QColor</db:link>s can be edited.</db:para>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>In the Window class, we create the item editor creator base for our color editor and add it to the default factory. We also create a QTableWidget in which our editor can be tested. It is filled with some data and displayed in a window.</db:para>
<db:para>We take a closer look at the constructor:</db:para>
<db:programlisting language="cpp">Window::Window()
{
    QItemEditorFactory *factory = new QItemEditorFactory;

    QItemEditorCreatorBase *colorListCreator =
        new QStandardItemEditorCreator&amp;lt;ColorListEditor&amp;gt;();

    factory-&amp;gt;registerEditor(QVariant::Color, colorListCreator);

    QItemEditorFactory::setDefaultFactory(factory);

    createGUI();
}
</db:programlisting>
<db:para>The <db:link xlink:href="qstandarditemeditorcreator.xml">QStandardItemEditorCreator</db:link> is a convenience class that inherits QItemEditorCreatorBase. Its constructor takes a template class, of which instances are returned from <db:link xlink:href="">createWidget()</db:link>. The creator uses a constructor that takes a QWidget as its only parameter; the template class must provide this. This way, there is no need to subclass <db:link xlink:href="qstandarditemeditorcreator.xml">QStandardItemEditorCreator</db:link>.</db:para>
<db:para>After the new factory has been set, all standard item delegates will use it (i.e, also delegates that were created before the new default factory was set).</db:para>
<db:para>The <db:code>createGUI()</db:code> function sets up the table and fills it with data.</db:para>
</db:section>
<db:section xml:id="colorlisteditor-definition">
<db:title>ColorListEditor Definition</db:title>
<db:para>The ColorListEditor inherits QComboBox and lets the user select a QColor from its popup list.</db:para>
<db:programlisting language="cpp">class ColorListEditor : public QComboBox
{
    Q_OBJECT
    Q_PROPERTY(QColor color READ color WRITE setColor USER true)

public:
    ColorListEditor(QWidget *widget = nullptr);

public:
    QColor color() const;
    void setColor(const QColor &amp;amp;color);

private:
    void populateList();
};
</db:programlisting>
<db:para>QItemDelegate manages the interaction between the editor and the model, i.e., it retrieves data to edit from the model and store data from the editor in the model. The data that is edited by an editor is stored in the editor's user data property, and the delegate uses Qt's <db:link xlink:href="properties.xml">property system</db:link> to access it by name. We declare our user data property with the <db:link xlink:href="qobject-proxy.xml#Q_PROPERTY">Q_PROPERTY</db:link> macro. The property is set to be the user type with the USER keyword.</db:para>
</db:section>
<db:section xml:id="colorlisteditor-implementation">
<db:title>ColorListEditor Implementation</db:title>
<db:para>The constructor of <db:code>ColorListEditor</db:code> simply calls <db:code>populateList()</db:code>, which we will look at later. We move on to the <db:code>color()</db:code> function:</db:para>
<db:programlisting language="cpp">QColor ColorListEditor::color() const
{
    return qvariant_cast&amp;lt;QColor&amp;gt;(itemData(currentIndex(), Qt::DecorationRole));
}
</db:programlisting>
<db:para>We return the data that is selected in the combobox. The data is stored in the Qt::DecorationRole as the color is then also displayed in the popup list (as shown in the image above).</db:para>
<db:programlisting language="cpp">void ColorListEditor::setColor(const QColor &amp;amp;color)
{
    setCurrentIndex(findData(color, Qt::DecorationRole));
}
</db:programlisting>
<db:para>The <db:code>findData()</db:code> function searches the items in the combobox and returns the index of the item that has <db:code>color</db:code> in the Qt::Decoration role.</db:para>
<db:programlisting language="cpp">void ColorListEditor::populateList()
{
    const QStringList colorNames = QColor::colorNames();

    for (int i = 0; i &amp;lt; colorNames.size(); ++i) {
        QColor color(colorNames[i]);

        insertItem(i, colorNames[i]);
        setItemData(i, color, Qt::DecorationRole);
    }
}
</db:programlisting>
<db:para>Qt knows some predefined colors by name. We simply loop through these to fill our editor with items.</db:para>
</db:section>
<db:section xml:id="further-customization-of-item-view-editors">
<db:title>Further Customization of Item View Editors</db:title>
<db:para>You can customize Qt's <db:link xlink:href="model-view-programming.xml">model view framework</db:link> in many ways. The procedure shown in this example is usually sufficient to provide custom editors. Further customization is achieved by subclassing QItemEditorFactory and QItemEditorCreatorBase. It is also possible to subclass QItemDelegate if you don't wish to use a factory at all.</db:para>
<db:para>Possible suggestions are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If the editor widget has no user property defined, the delegate asks the factory for the property name, which it in turn asks the item editor creator for. In this case, you can use the <db:link xlink:href="qitemeditorcreator.xml">QItemEditorCreator</db:link> class, which takes the property name to use for editing as a constructor argument.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the editor requires other constructors or other initialization than provided by QItemEditorCreatorBase, you must reimplement QItemEditorCreatorBase::createWidget().</db:para>
</db:listitem>
<db:listitem>
<db:para>You could also subclass QItemEditorFactory if you only want to provide editors for certain kinds of data or use another method of creating the editors than using creator bases.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In this example, we use a standard QVariant data type. You can also use custom types. In the <db:link xlink:href="qtwidgets-itemviews-stardelegate-example.xml">Star Delegate Example</db:link>, we show how to store a custom data type in a QVariant and paint and edit it in a class that inherits QItemDelegate.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/itemviews/coloreditorfactory?h=5.13">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
