<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>What's New in Qt 6.1</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists the new features in Qt 6.1.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="new-and-restored-modules-in-qt-6-1">
<db:title>New and Restored Modules in Qt 6.1</db:title>
<db:para>Qt 6.1 adds the following modules:</db:para>
<db:section xml:id="active-qt-module">
<db:title>Active Qt Module</db:title>
<db:para><db:link xlink:href="activeqt-index.xml">Active Qt</db:link> provides ActiveX and COM support that lets Qt for Windows developers:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Access and use ActiveX controls and COM objects provided by any ActiveX server in their Qt applications.</db:para>
</db:listitem>
<db:listitem>
<db:para>Make their Qt applications available as COM servers, with any number of Qt objects and widgets as COM objects and ActiveX controls.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-charts-module">
<db:title>Qt Charts Module</db:title>
<db:para><db:link xlink:href="qtcharts-index.xml">Qt Charts</db:link> still supports only OpenGL for accelerated series (<db:link xlink:href="qml-qtcharts-abstractseries.xml">AbstractSeries</db:link>.useOpenGL). Such series will not render in Qt Quick if another graphics API is used for rendering.</db:para>
</db:section>
<db:section xml:id="qt-data-visualization-module">
<db:title>Qt Data Visualization Module</db:title>
<db:para><db:link xlink:href="qtdatavisualization-index.xml">Qt Data Visualization</db:link> only supports the OpenGL RHI backend, and requires setting of the environment variable QSG_RHI_BACKEND to opengl. This can either be done at the system level, or defined in the application's <db:emphasis>main()</db:emphasis> with qputenv(&quot;QSG_RHI_BACKEND&quot;, &quot;opengl&quot;);.</db:para>
</db:section>
<db:section xml:id="qt-device-utilities-module">
<db:title>Qt Device Utilities Module</db:title>
<db:para>Support for networking functionality only.</db:para>
</db:section>
<db:section xml:id="qt-lottie-module">
<db:title>Qt Lottie Module</db:title>
<db:para>The <db:link xlink:href="qtlottieanimation-index.xml">Qt Lottie Animation</db:link> module has been ported to Qt 6 and the CMake build system.</db:para>
</db:section>
<db:section xml:id="qt-scxml-and-qt-statemachine">
<db:title>Qt SCXML and Qt StateMachine</db:title>
<db:para><db:link xlink:href="qtstatemachine-index.xml">Qt State Machine</db:link> contains APIs that were part of Qt Core in Qt 5. The <db:emphasis>Qt State Machines</db:emphasis> package in the installer contains both the <db:link xlink:href="qtscxml-index.xml">Qt SCXML</db:link> and <db:link xlink:href="qtstatemachine-index.xml">Qt State Machine</db:link> modules.</db:para>
</db:section>
<db:section xml:id="qt-virtual-keyboard-module">
<db:title>Qt Virtual Keyboard Module</db:title>
<db:para>The <db:link xlink:href="qtvirtualkeyboard-index.xml">Qt Virtual Keyboard</db:link> module has been ported to Qt 6 and the CMake build system.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A new dictionary manager allows user defined dictionaries (e.g. phone book) to be implemented by the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>There are new properties in <db:link xlink:href="qml-qtquick-virtualkeyboard-settings-virtualkeyboardsettings.xml">VirtualKeyboardSettings</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Support is added for Cerence Handwriting (T9 Write) and XT9.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="new-features-in-qt-6-1">
<db:title>New Features in Qt 6.1</db:title>
<db:section xml:id="qt-core-module">
<db:title>Qt Core Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qfuture.xml">QFuture</db:link> has new convenience functions to create futures in various states and can now invoke its continuation in a context object's thread.</db:para>
</db:listitem>
<db:listitem>
<db:para>qfloat16 can be constructed uninitialized.</db:para>
</db:listitem>
<db:listitem>
<db:para>&lt;QtMath&gt; provides qHypot(), generalising std::hypot() to arbitrarily-many arguments and supporting qfloat16 arguments.</db:para>
</db:listitem>
<db:listitem>
<db:para>Overflow-safe arithmetic is now supported by the functions qAddOverflow(), qSubOverflow(), and qMulOverflow().</db:para>
</db:listitem>
<db:listitem>
<db:para>removeIf() methods and erase_if() support are extended to more classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qhash.xml#qhash">QHash</db:link>, <db:link xlink:href="qmap.xml">QMap</db:link> and their Multi variants, whose predicates take either a std::pair or the container's own iterator.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qset.xml">QSet</db:link>, which also gains an insert() overload that takes (but ignores) a location hint, for compatibility with the standard library.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qbytearray.xml">QByteArray</db:link> and <db:link xlink:href="qlist.xml">QList</db:link>, which also gain erase() support to remove all instances of a specified value.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvarlengtharray.xml">QVarLengthArray</db:link>, along with erase() support and methods removeAll() and removeOne().</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link>'s API now includes count(), <db:link xlink:href="qml-geoshape.xml#contains">contains()</db:link>, indexOf(), lastIndexOf(), constBegin(), and constEnd().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlocale.xml">QLocale</db:link> provides mappings from its enums to ISO codes and back: languageToCode(), scriptToCode(), countryToCode(), codeToLanguage(), codeToScript(), and codeToCountry().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link> now supports more flexible creation.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qoperatingsystemversion.xml#version">QOperatingSystemVersion::version</db:link>(), <db:link xlink:href="qmetatype.xml#hasRegisteredDataStreamOperators">QMetaType::hasRegisteredDataStreamOperators</db:link>(), and <db:link xlink:href="quntypedbindable.xml#isReadOnly">QUntypedBindable::isReadOnly</db:link>(), whose names hopefully say enough.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qjniobject.xml">QJniObject</db:link> and <db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link> as public API (mainly used for Android).</db:para>
</db:listitem>
<db:listitem>
<db:para>Object property bindings have received API refinements, and bindings are added to Qt Core classes - see the <db:link xlink:href="https://www.qt.io/blog/property-bindings-in-qt-6">Property bindings</db:link> blog post for context.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-gui-module">
<db:title>Qt Gui Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> can now set custom transfer-functions as tables.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> now lets you to set a resource provider function, instead of sub-classing <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> and overloading loadResource().</db:para>
</db:listitem>
<db:listitem>
<db:para>The Vulkan API wrappers (QVulkanFunctions, QVulkanDeviceFunctions) now expose the Vulkan 1.1 and 1.2 core APIs as well.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>With relevant new functionality (supportedApiVersion()) added to <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link> to allow querying the supported instance-level version before instance creation.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::VerticalSubpixelPositioning</db:link> hint. This is currently only supported on the Freetype font backend, and when available it will enable subpixel positioning of text in vertical direction at the expense of some memory and additional work. For most use cases, this should be left off, but it can be useful for very specific cases where you want to align painted elements vertically on a dynamically transformed painter.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-widgets-module">
<db:title>Qt Widgets Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qlabel.xml">QLabel</db:link> has setter and getter methods for the resource provider function in <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>. Inspect the <db:link xlink:href="whatsnew61.xml#qt-gui-module">Qt Gui Module</db:link> changes for further information.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-network-module">
<db:title>Qt Network Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link> now supports the SameSite feature.</db:para>
</db:listitem>
<db:listitem>
<db:para>Introduced <db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> currently exposes the reachability of the system, using system API.</db:para>
</db:listitem>
<db:listitem>
<db:para>Currently supports Darwin, Windows, Android, and NetworkManager on Linux.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>TLS backends, powering <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link> and related <db:link xlink:href="qssl.xml">QSsl</db:link> classes, were converted to plugin-oriented design.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Public and private classes in the 'ssl' sub-module of <db:link xlink:href="qtnetwork-module.xml">QtNetwork</db:link> are now TLS implementation neutral and are not exposed to low-level APIs/details.</db:para>
</db:listitem>
<db:listitem>
<db:para>Existing TLS-backends (OpenSSL, SecureTransport, Schannel) now report which classes, features and protocols they support.</db:para>
</db:listitem>
<db:listitem>
<db:para>It's possible (for an application, using Qt) to provide its own backend to be used by <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link> and related classes.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-qml-module">
<db:title>Qt Qml Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> and <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> for a more fine-grained control over JavaScript execution than it was possible with <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> alone.</db:para>
</db:listitem>
<db:listitem>
<db:para>The qt6_add_qml_module CMake function (still in Tech Preview) adds a qmllint target, which runs qmllint on the target's QML files.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-3d-module">
<db:title>Qt Quick 3D Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Technology preview: &quot;Instanced Rendering&quot;, an optimized way of drawing multiple instances of the same objects with different transformations. This feature is considered feature-complete, but may still undergo minor API changes based on user feedback. It is planned for finalization in Qt 6.2.</db:para>
</db:listitem>
<db:listitem>
<db:para>Technology preview: 3D Particles, an API for adding particle effects to 3D scenes. This API is ready for testing, but is not yet feature-complete.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt Quick 3D now supports morph target animations, i.e. animations where all vertices interpolate between two sets of positions, giving the impression that one shape is morphing into another.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-5-compatibility-module">
<db:title>Qt 5 Compatibility Module</db:title>
<db:para>While Qt Graphical Effects does not ship with Qt 6, a number of effects have been ported to the new graphics architecture and added to the Qt5Compat module. For example, to gain access to <db:link xlink:href="qml-qt5compat-graphicaleffects-dropshadow.xml">DropShadow</db:link>, add the QML import <db:emphasis>Qt5Compat.GraphicalEffects</db:emphasis>. Some complex effects that rely on dynamic shader generation, such as a number of blur variants, have been removed.</db:para>
</db:section>
</db:section>
<db:section xml:id="list-of-api-changes">
<db:title>List of API Changes</db:title>
<db:para>These pages contain an overview of API changes in Qt 6.1:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="newclasses61.xml">New Classes and Functions in Qt 6.1</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="obsoleteclasses.xml">Obsolete Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
