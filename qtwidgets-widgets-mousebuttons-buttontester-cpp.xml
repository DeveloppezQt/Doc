<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Mouse Button Tester</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The 'Mouse Button Tester' example demonstrates how to reimplement mouse events within a custom class. You can also use this program to verify that Qt is actually receiving mouse events from your mouse.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Copyright (C) 2012 Rick Stockton &lt;rickstockton@reno-computerhelp.com&gt;
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;buttontester.h&quot;

#include &lt;QDebug&gt;

void ButtonTester::mousePressEvent(QMouseEvent *e)
{
    int j = ButtonTester::buttonByNumber (e-&gt;button());
    QString result = &quot;Mouse Press: raw button=&quot; + QString::number(j)
                + &quot;  Qt=&quot; + enumNameFromValue(e-&gt;button());
    QString buttonsString = ButtonTester::enumNamesFromMouseButtons(e-&gt;buttons());
    result += &quot;\n heldbuttons &quot; + buttonsString;
    qDebug() &lt;&lt; result;
    this-&gt;setText(result);
    this-&gt;repaint();
}

void ButtonTester::mouseReleaseEvent(QMouseEvent *e)
{
    int j = ButtonTester::buttonByNumber (e-&gt;button());
    QString result = &quot;Mouse Release: raw button=&quot; + QString::number(j)
                + &quot;  Qt=&quot; + enumNameFromValue(e-&gt;button());
    QString buttonsString = ButtonTester::enumNamesFromMouseButtons(e-&gt;buttons());
    result += &quot;\n heldbuttons &quot; + buttonsString;
    qDebug() &lt;&lt; result;
    this-&gt;setText(result);
    this-&gt;repaint();

}

void ButtonTester::mouseDoubleClickEvent(QMouseEvent *e)
{
    int j = ButtonTester::buttonByNumber (e-&gt;button());
    QString result = &quot;Mouse DoubleClick: raw button=&quot; + QString::number(j)
                + &quot;  Qt=&quot; + enumNameFromValue(e-&gt;button());
    QString buttonsString = ButtonTester::enumNamesFromMouseButtons(e-&gt;buttons());
    result += &quot;\n heldbuttons&quot; + buttonsString;
    qDebug() &lt;&lt; result;
    this-&gt;setText(result);
}

#ifndef QT_NO_WHEELEVENT
void ButtonTester::wheelEvent (QWheelEvent *e)
{
    QString result;
    if (e-&gt;delta() &gt; 0) {

        if (e-&gt;orientation() == Qt::Vertical) {
            result = &quot;Mouse Wheel Event: UP&quot;;
        } else {
            result = &quot;Mouse Wheel Event: LEFT&quot;;
        }
    } else if (e-&gt;delta() &lt; 0) {
        if (e-&gt;orientation() == Qt::Vertical) {
            result = &quot;Mouse Wheel Event: DOWN&quot;;
        } else {
            result = &quot;Mouse Wheel Event: RIGHT&quot;;
        }
    }
    qDebug() &lt;&lt; result;
    this-&gt;setText(result);
}
#endif

int ButtonTester::buttonByNumber(const Qt::MouseButton button)
{
    if (button == Qt::NoButton)      return 0;
    if (button == Qt::LeftButton)    return 1;
    if (button == Qt::RightButton)   return 2;
    if (button == Qt::MiddleButton)  return 3;

/* Please note that Qt Button #4 corresponds to button #8 on all
 * platforms which EMULATE wheel events by creating button events
 * (Button #4 = Scroll Up; Button #5 = Scroll Down; Button #6 = Scroll
 * Left; and Button #7 = Scroll Right.) This includes X11, with both
 * Xlib and XCB.  So, the &quot;raw button&quot; for &quot;Qt::BackButton&quot; is
 * usually described as &quot;Button #8&quot;.

 * If your platform supports &quot;smooth scrolling&quot;, then, for the cases of
 * Qt::BackButton and higher, this program will show &quot;raw button&quot; with a
 * value which is too large. Subtract 4 to get the correct button ID for
 * your platform.
 */

    if (button == Qt::BackButton)    return 8;
    if (button == Qt::ForwardButton) return 9;
    if (button == Qt::TaskButton)    return 10;
    if (button == Qt::ExtraButton4)  return 11;
    if (button == Qt::ExtraButton5)  return 12;
    if (button == Qt::ExtraButton6)  return 13;
    if (button == Qt::ExtraButton7)  return 14;
    if (button == Qt::ExtraButton8)  return 15;
    if (button == Qt::ExtraButton9)  return 16;
    if (button == Qt::ExtraButton10) return 17;
    if (button == Qt::ExtraButton11) return 18;
    if (button == Qt::ExtraButton12) return 19;
    if (button == Qt::ExtraButton13) return 20;
    if (button == Qt::ExtraButton14) return 21;
    if (button == Qt::ExtraButton15) return 22;
    if (button == Qt::ExtraButton16) return 23;
    if (button == Qt::ExtraButton17) return 24;
    if (button == Qt::ExtraButton18) return 25;
    if (button == Qt::ExtraButton19) return 26;
    if (button == Qt::ExtraButton20) return 27;
    if (button == Qt::ExtraButton21) return 28;
    if (button == Qt::ExtraButton22) return 29;
    if (button == Qt::ExtraButton23) return 30;
    if (button == Qt::ExtraButton24) return 31;
    qDebug(&quot;QMouseShortcutEntry::addShortcut contained Invalid Qt::MouseButton value&quot;);
    return 0;
}

QString ButtonTester::enumNameFromValue(const Qt::MouseButton button)
{
    if (button == Qt::NoButton)      return &quot;NoButton&quot;;
    if (button == Qt::LeftButton)    return &quot;LeftButton&quot;;
    if (button == Qt::RightButton)   return &quot;RightButton&quot;;
    if (button == Qt::MiddleButton)  return &quot;MiddleButton&quot;;
    if (button == Qt::BackButton)    return &quot;BackButton&quot;;
    if (button == Qt::ForwardButton) return &quot;ForwardButton&quot;;
    if (button == Qt::TaskButton)    return &quot;TaskButton&quot;;
    if (button == Qt::ExtraButton4)  return &quot;ExtraButton4&quot;;
    if (button == Qt::ExtraButton5)  return &quot;ExtraButton5&quot;;
    if (button == Qt::ExtraButton6)  return &quot;ExtraButton6&quot;;
    if (button == Qt::ExtraButton7)  return &quot;ExtraButton7&quot;;
    if (button == Qt::ExtraButton8)  return &quot;ExtraButton8&quot;;
    if (button == Qt::ExtraButton9)  return &quot;ExtraButton9&quot;;
    if (button == Qt::ExtraButton10) return &quot;ExtraButton10&quot;;
    if (button == Qt::ExtraButton11) return &quot;ExtraButton11&quot;;
    if (button == Qt::ExtraButton12) return &quot;ExtraButton12&quot;;
    if (button == Qt::ExtraButton13) return &quot;ExtraButton13&quot;;
    if (button == Qt::ExtraButton14) return &quot;ExtraButton14&quot;;
    if (button == Qt::ExtraButton15) return &quot;ExtraButton15&quot;;
    if (button == Qt::ExtraButton16) return &quot;ExtraButton16&quot;;
    if (button == Qt::ExtraButton17) return &quot;ExtraButton17&quot;;
    if (button == Qt::ExtraButton18) return &quot;ExtraButton18&quot;;
    if (button == Qt::ExtraButton19) return &quot;ExtraButton19&quot;;
    if (button == Qt::ExtraButton20) return &quot;ExtraButton20&quot;;
    if (button == Qt::ExtraButton21) return &quot;ExtraButton21&quot;;
    if (button == Qt::ExtraButton22) return &quot;ExtraButton22&quot;;
    if (button == Qt::ExtraButton23) return &quot;ExtraButton23&quot;;
    if (button == Qt::ExtraButton24) return &quot;ExtraButton24&quot;;
    qDebug(&quot;QMouseShortcutEntry::addShortcut contained Invalid Qt::MouseButton value&quot;);
    return &quot;NoButton&quot;;
}

QString ButtonTester::enumNamesFromMouseButtons(const Qt::MouseButtons buttons)
{
    QString returnText = &quot;&quot;;
    if (buttons == Qt::NoButton)      return &quot;NoButton&quot;;
    if (buttons &amp; Qt::LeftButton)    returnText += &quot;LeftButton &quot;;
    if (buttons &amp; Qt::RightButton)   returnText +=  &quot;RightButton &quot;;
    if (buttons &amp; Qt::MiddleButton)  returnText +=  &quot;MiddleButton &quot;;
    if (buttons &amp; Qt::BackButton)    returnText +=  &quot;BackButton &quot;;
    if (buttons &amp; Qt::ForwardButton) returnText +=  &quot;ForwardButton &quot;;
    if (buttons &amp; Qt::TaskButton)    returnText +=  &quot;TaskButton &quot;;
    if (buttons &amp; Qt::ExtraButton4)  returnText +=  &quot;ExtraButton4 &quot;;
    if (buttons &amp; Qt::ExtraButton5)  returnText +=  &quot;ExtraButton5 &quot;;
    if (buttons &amp; Qt::ExtraButton6)  returnText +=  &quot;ExtraButton6 &quot;;
    if (buttons &amp; Qt::ExtraButton7)  returnText +=  &quot;ExtraButton7 &quot;;
    if (buttons &amp; Qt::ExtraButton8)  returnText +=  &quot;ExtraButton8 &quot;;
    if (buttons &amp; Qt::ExtraButton9)  returnText +=  &quot;ExtraButton9 &quot;;
    if (buttons &amp; Qt::ExtraButton10) returnText +=  &quot;ExtraButton10 &quot;;
    if (buttons &amp; Qt::ExtraButton11) returnText +=  &quot;ExtraButton11 &quot;;
    if (buttons &amp; Qt::ExtraButton12) returnText +=  &quot;ExtraButton12 &quot;;
    if (buttons &amp; Qt::ExtraButton13) returnText +=  &quot;ExtraButton13 &quot;;
    if (buttons &amp; Qt::ExtraButton14) returnText +=  &quot;ExtraButton14 &quot;;
    if (buttons &amp; Qt::ExtraButton15) returnText +=  &quot;ExtraButton15 &quot;;
    if (buttons &amp; Qt::ExtraButton16) returnText +=  &quot;ExtraButton16 &quot;;
    if (buttons &amp; Qt::ExtraButton17) returnText +=  &quot;ExtraButton17 &quot;;
    if (buttons &amp; Qt::ExtraButton18) returnText +=  &quot;ExtraButton18 &quot;;
    if (buttons &amp; Qt::ExtraButton19) returnText +=  &quot;ExtraButton19 &quot;;
    if (buttons &amp; Qt::ExtraButton20) returnText +=  &quot;ExtraButton20 &quot;;
    if (buttons &amp; Qt::ExtraButton21) returnText +=  &quot;ExtraButton21 &quot;;
    if (buttons &amp; Qt::ExtraButton22) returnText +=  &quot;ExtraButton22 &quot;;
    if (buttons &amp; Qt::ExtraButton23) returnText +=  &quot;ExtraButton23 &quot;;
    if (buttons &amp; Qt::ExtraButton24) returnText +=  &quot;ExtraButton24 &quot;;
    return returnText;
}

</db:programlisting>
</db:article>
