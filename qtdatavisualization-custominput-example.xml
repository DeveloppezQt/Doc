<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Input Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Implementing custom input handler in a widget application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Custom Input example shows how to customize the 3D graph controls in a widget application using a custom graph input handler to capture and process mouse events. The code in this example shows also how the camera is controlled by using <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> to animate the camera and item selection is done on mouseover rather than clicking any mouse buttons. Also the code shows how to implement similar zoom with mouse wheel functionality as the default input handler implements.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/custominput-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="replacing-default-input-handling">
<db:title>Replacing Default Input Handling</db:title>
<db:para>The default input handling mechanism is replaced by setting the active input handler of Q3DScatter to <db:code>CustomInputHandler</db:code> that implements the custom behavior.</db:para>
<db:programlisting language="cpp">m_graph-&gt;setActiveInputHandler(m_inputHandler);
</db:programlisting>
</db:section>
<db:section xml:id="implementing-custom-selection-handling">
<db:title>Implementing Custom Selection Handling</db:title>
<db:para>The on mouseover selection handling is implemented in the <db:code>CustomInputHandler</db:code> that captures the mouse events. It then stores the last known coordinates to the QAbstract3DInputHandler::inputPosition property.</db:para>
<db:programlisting language="cpp">void CustomInputHandler::mouseMoveEvent(QMouseEvent *event, const QPoint &amp;mousePos)
{
    Q_UNUSED(event)
    setInputPosition(mousePos);
}
</db:programlisting>
<db:para>As the selection is one shot, and is cleared each time a 3D frame is rendered, a timer is setup to retrigger selection so that the selection moves to the item currently under the mouse cursor as the camera animates around the graph even when the mouse cursor is not moving.</db:para>
<db:programlisting language="cpp">m_selectionTimer = new QTimer(this);
m_selectionTimer-&gt;setInterval(10);
m_selectionTimer-&gt;setSingleShot(false);
QObject::connect(m_selectionTimer, &amp;QTimer::timeout, this,
                 &amp;ScatterDataModifier::triggerSelection);
m_selectionTimer-&gt;start();
</db:programlisting>
</db:section>
<db:section xml:id="implementing-custom-zoom-handling">
<db:title>Implementing Custom Zoom Handling</db:title>
<db:para>The camera has a zoom factor that represents amount of zoom in percentages. In this example the zoom range is limited between 10% and 500%. This range is then divided to four subranges where <db:code>angleDelta</db:code> is scaled to different amount of zoom change based on the current subrange.</db:para>
<db:programlisting language="cpp">void CustomInputHandler::wheelEvent(QWheelEvent *event)
{
    // Adjust zoom level based on what zoom range we're in.
    int zoomLevel = scene()-&gt;activeCamera()-&gt;zoomLevel();
    if (zoomLevel &gt; 100)
        zoomLevel += event-&gt;angleDelta().y() / 12;
    else if (zoomLevel &gt; 50)
        zoomLevel += event-&gt;angleDelta().y() / 60;
    else
        zoomLevel += event-&gt;angleDelta().y() / 120;
    if (zoomLevel &gt; 500)
        zoomLevel = 500;
    else if (zoomLevel &lt; 10)
        zoomLevel = 10;

    scene()-&gt;activeCamera()-&gt;setZoomLevel(zoomLevel);
}
</db:programlisting>
</db:section>
<db:section xml:id="implementing-custom-camera-handling">
<db:title>Implementing Custom Camera Handling</db:title>
<db:para>The camera is animated to constantly rotate around the graph with two animations. The rotation around the graph is done with a simple <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> that just increments during 20 seconds from 0 degrees to 360 degrees and sets the Q3DCamera::xRotation property.</db:para>
<db:programlisting language="cpp">m_animationCameraX = new QPropertyAnimation(m_graph-&gt;scene()-&gt;activeCamera(), &quot;xRotation&quot;);
m_animationCameraX-&gt;setDuration(20000);
m_animationCameraX-&gt;setStartValue(QVariant::fromValue(0.0f));
m_animationCameraX-&gt;setEndValue(QVariant::fromValue(360.0f));
m_animationCameraX-&gt;setLoopCount(-1);
</db:programlisting>
<db:para>The camera movement up and down is implemented with a <db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> that varies the Q3DCamera::yRotation property of the camera from 5 degrees to 45 degrees and back with in and out easing.</db:para>
<db:programlisting language="cpp">QPropertyAnimation *upAnimation = new QPropertyAnimation(m_graph-&gt;scene()-&gt;activeCamera(), &quot;yRotation&quot;);
upAnimation-&gt;setDuration(9000);
upAnimation-&gt;setStartValue(QVariant::fromValue(5.0f));
upAnimation-&gt;setEndValue(QVariant::fromValue(45.0f));

QPropertyAnimation *downAnimation = new QPropertyAnimation(m_graph-&gt;scene()-&gt;activeCamera(), &quot;yRotation&quot;);
downAnimation-&gt;setDuration(9000);
downAnimation-&gt;setStartValue(QVariant::fromValue(45.0f));
downAnimation-&gt;setEndValue(QVariant::fromValue(5.0f));

m_animationCameraY = new QSequentialAnimationGroup();
m_animationCameraY-&gt;setLoopCount(-1);
m_animationCameraY-&gt;addAnimation(upAnimation);
m_animationCameraY-&gt;addAnimation(downAnimation);
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="custominput/custominput.pro">custominput/custominput.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custominput/custominput.qrc">custominput/custominput.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custominput/custominputhandler.cpp">custominput/custominputhandler.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custominput/custominputhandler.h">custominput/custominputhandler.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custominput/main.cpp">custominput/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custominput/scatterdatamodifier.cpp">custominput/scatterdatamodifier.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custominput/scatterdatamodifier.h">custominput/scatterdatamodifier.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
