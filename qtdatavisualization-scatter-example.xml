<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scatter Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link> in a widget application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The scatter example shows how to make a simple 3D scatter graph using <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link> and combining the use of widgets for adjusting several adjustable qualities. The example shows how to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Create an application with <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link> and some widgets</db:para>
</db:listitem>
<db:listitem>
<db:para>Use <db:link xlink:href="qscatterdataproxy.xml">QScatterDataProxy</db:link> to set data to the graph</db:para>
</db:listitem>
<db:listitem>
<db:para>Adjust some graph properties using widget controls</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For instructions about how to interact with the graph, see <db:link xlink:href="qtdatavisualization-interacting-with-data.xml">this page</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/scatter-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-the-application">
<db:title>Creating the Application</db:title>
<db:para>First, in main.cpp, we create a <db:link xlink:href="qapplication.xml">QApplication</db:link>, instantiate <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link>, and a window container for it:</db:para>
<db:programlisting language="cpp">QApplication app(argc, argv);
Q3DScatter *graph = new Q3DScatter();
QWidget *container = QWidget::createWindowContainer(graph);
</db:programlisting>
<db:para>The call to <db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link> is required, as all data visualization graph classes (<db:link xlink:href="q3dbars.xml">Q3DBars</db:link>, <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link>, and <db:link xlink:href="q3dsurface.xml">Q3DSurface</db:link>) inherit <db:link xlink:href="qwindow.xml">QWindow</db:link>. Any class inheriting <db:link xlink:href="qwindow.xml">QWindow</db:link> cannot be used as a widget any other way.</db:para>
<db:para>Then we'll create horizontal and vertical layouts. We'll add the graph and the vertical layout into the horizontal one:</db:para>
<db:programlisting language="cpp">QWidget *widget = new QWidget;
QHBoxLayout *hLayout = new QHBoxLayout(widget);
QVBoxLayout *vLayout = new QVBoxLayout();
hLayout-&amp;gt;addWidget(container, 1);
hLayout-&amp;gt;addLayout(vLayout);
</db:programlisting>
<db:para>We're not using the vertical layout for anything yet, but we'll get back to it in <db:link xlink:href="qtdatavisualization-scatter-example.xml#using-widgets-to-control-the-graph">Using widgets to control the graph</db:link></db:para>
<db:para>Next, let's create another class to handle the data addition and other interaction with the graph. Let's call it <db:code>ScatterDataModifier</db:code> (See <db:link xlink:href="qtdatavisualization-scatter-example.xml#setting-up-the-graph">Setting up the graph</db:link> and <db:link xlink:href="qtdatavisualization-scatter-example.xml#adding-data-to-the-graph">Adding data to the graph</db:link> for details):</db:para>
<db:programlisting language="cpp">ScatterDataModifier *modifier = new ScatterDataModifier(graph);
</db:programlisting>
<db:para>The application main is done. We can show the graph and start the event loop:</db:para>
<db:programlisting language="cpp">widget-&amp;gt;show();
return app.exec();
</db:programlisting>
</db:section>
<db:section xml:id="setting-up-the-graph">
<db:title>Setting up the Graph</db:title>
<db:para>Let's set up some visual qualities for the graph in the constructor of the <db:code>ScatterDataModifier</db:code> class we instantiated in the application main:</db:para>
<db:programlisting language="cpp">m_graph-&amp;gt;activeTheme()-&amp;gt;setType(Q3DTheme::ThemeEbony);
QFont font = m_graph-&amp;gt;activeTheme()-&amp;gt;font();
font.setPointSize(m_fontSize);
m_graph-&amp;gt;activeTheme()-&amp;gt;setFont(font);
m_graph-&amp;gt;setShadowQuality(QAbstract3DGraph::ShadowQualitySoftLow);
m_graph-&amp;gt;scene()-&amp;gt;activeCamera()-&amp;gt;setCameraPreset(Q3DCamera::CameraPresetFront);
</db:programlisting>
<db:para>None of these are required, but are used to override graph defaults. You can try how it looks with the preset defaults by commenting the block above out.</db:para>
<db:para>Finally we create a <db:link xlink:href="qscatterdataproxy.xml">QScatterDataProxy</db:link> and the associated <db:link xlink:href="qscatter3dseries.xml">QScatter3DSeries</db:link>. We set custom label format and mesh smoothing for the series and add it to the graph:</db:para>
<db:programlisting language="cpp">QScatterDataProxy *proxy = new QScatterDataProxy;
QScatter3DSeries *series = new QScatter3DSeries(proxy);
series-&amp;gt;setItemLabelFormat(QStringLiteral(&quot;@xTitle: @xLabel @yTitle: @yLabel @zTitle: @zLabel&quot;));
series-&amp;gt;setMeshSmooth(m_smooth);
m_graph-&amp;gt;addSeries(series);
</db:programlisting>
<db:para>That concludes setting up the graph.</db:para>
</db:section>
<db:section xml:id="adding-data-to-the-graph">
<db:title>Adding Data to the Graph</db:title>
<db:para>The last thing we do in the <db:code>ScatterDataModifier</db:code> constructor is to add data to the graph:</db:para>
<db:programlisting language="cpp">addData();
</db:programlisting>
<db:para>The actual data addition is done in <db:code>addData()</db:code> method. First we configure the axes:</db:para>
<db:programlisting language="cpp">m_graph-&amp;gt;axisX()-&amp;gt;setTitle(&quot;X&quot;);
m_graph-&amp;gt;axisY()-&amp;gt;setTitle(&quot;Y&quot;);
m_graph-&amp;gt;axisZ()-&amp;gt;setTitle(&quot;Z&quot;);
</db:programlisting>
<db:para>This could have been done in the constructor of <db:code>ScatterDataModifier</db:code>, but we added it here to keep the constructor simpler and the axes configuration near the data.</db:para>
<db:para>Next we create a data array:</db:para>
<db:programlisting language="cpp">QScatterDataArray *dataArray = new QScatterDataArray;
dataArray-&amp;gt;resize(m_itemCount);
QScatterDataItem *ptrToDataArray = &amp;amp;dataArray-&amp;gt;first();
</db:programlisting>
<db:para>and populate it:</db:para>
<db:programlisting language="cpp">float limit = qSqrt(m_itemCount) / 2.0f;
for (float i = -limit; i &amp;lt; limit; i++) {
    for (float j = -limit; j &amp;lt; limit; j++) {
        ptrToDataArray-&amp;gt;setPosition(QVector3D(i + 0.5f,
                                              qCos(qDegreesToRadians((i * j) / m_curveDivider)),
                                              j + 0.5f));
        ptrToDataArray++;
    }
}
</db:programlisting>
<db:para>Finally we tell the proxy to start using the data we gave it:</db:para>
<db:programlisting language="cpp">m_graph-&amp;gt;seriesList().at(0)-&amp;gt;dataProxy()-&amp;gt;resetArray(dataArray);
</db:programlisting>
<db:para>Now our graph has the data and is ready to be used. There isn't much interaction yet, though, so let's continue by adding some widgets to play with.</db:para>
</db:section>
<db:section xml:id="using-widgets-to-control-the-graph">
<db:title>Using Widgets to Control the Graph</db:title>
<db:para>First, back in the application main, we'll create some widgets:</db:para>
<db:programlisting language="cpp">QComboBox *themeList = new QComboBox(widget);
themeList-&amp;gt;addItem(QStringLiteral(&quot;Qt&quot;));
themeList-&amp;gt;addItem(QStringLiteral(&quot;Primary Colors&quot;));
themeList-&amp;gt;addItem(QStringLiteral(&quot;Digia&quot;));
themeList-&amp;gt;addItem(QStringLiteral(&quot;Stone Moss&quot;));
themeList-&amp;gt;addItem(QStringLiteral(&quot;Army Blue&quot;));
themeList-&amp;gt;addItem(QStringLiteral(&quot;Retro&quot;));
themeList-&amp;gt;addItem(QStringLiteral(&quot;Ebony&quot;));
themeList-&amp;gt;addItem(QStringLiteral(&quot;Isabelle&quot;));
themeList-&amp;gt;setCurrentIndex(6);

QPushButton *labelButton = new QPushButton(widget);
labelButton-&amp;gt;setText(QStringLiteral(&quot;Change label style&quot;));

QCheckBox *smoothCheckBox = new QCheckBox(widget);
smoothCheckBox-&amp;gt;setText(QStringLiteral(&quot;Smooth dots&quot;));
smoothCheckBox-&amp;gt;setChecked(true);

QComboBox *itemStyleList = new QComboBox(widget);
itemStyleList-&amp;gt;addItem(QStringLiteral(&quot;Sphere&quot;), int(QAbstract3DSeries::MeshSphere));
itemStyleList-&amp;gt;addItem(QStringLiteral(&quot;Cube&quot;), int(QAbstract3DSeries::MeshCube));
itemStyleList-&amp;gt;addItem(QStringLiteral(&quot;Minimal&quot;), int(QAbstract3DSeries::MeshMinimal));
itemStyleList-&amp;gt;addItem(QStringLiteral(&quot;Point&quot;), int(QAbstract3DSeries::MeshPoint));
itemStyleList-&amp;gt;setCurrentIndex(0);

QPushButton *cameraButton = new QPushButton(widget);
cameraButton-&amp;gt;setText(QStringLiteral(&quot;Change camera preset&quot;));

QPushButton *itemCountButton = new QPushButton(widget);
itemCountButton-&amp;gt;setText(QStringLiteral(&quot;Toggle item count&quot;));

QCheckBox *backgroundCheckBox = new QCheckBox(widget);
backgroundCheckBox-&amp;gt;setText(QStringLiteral(&quot;Show background&quot;));
backgroundCheckBox-&amp;gt;setChecked(true);

QCheckBox *gridCheckBox = new QCheckBox(widget);
gridCheckBox-&amp;gt;setText(QStringLiteral(&quot;Show grid&quot;));
gridCheckBox-&amp;gt;setChecked(true);

QComboBox *shadowQuality = new QComboBox(widget);
shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;None&quot;));
shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Low&quot;));
shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Medium&quot;));
shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;High&quot;));
shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Low Soft&quot;));
shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Medium Soft&quot;));
shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;High Soft&quot;));
shadowQuality-&amp;gt;setCurrentIndex(4);

QFontComboBox *fontList = new QFontComboBox(widget);
fontList-&amp;gt;setCurrentFont(QFont(&quot;Arial&quot;));
</db:programlisting>
<db:para>And add them to the vertical layout we created earlier:</db:para>
<db:programlisting language="cpp">vLayout-&amp;gt;addWidget(labelButton, 0, Qt::AlignTop);
vLayout-&amp;gt;addWidget(cameraButton, 0, Qt::AlignTop);
vLayout-&amp;gt;addWidget(itemCountButton, 0, Qt::AlignTop);
vLayout-&amp;gt;addWidget(backgroundCheckBox);
vLayout-&amp;gt;addWidget(gridCheckBox);
vLayout-&amp;gt;addWidget(smoothCheckBox, 0, Qt::AlignTop);
vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Change dot style&quot;)));
vLayout-&amp;gt;addWidget(itemStyleList);
vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Change theme&quot;)));
vLayout-&amp;gt;addWidget(themeList);
vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Adjust shadow quality&quot;)));
vLayout-&amp;gt;addWidget(shadowQuality);
vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Change font&quot;)));
vLayout-&amp;gt;addWidget(fontList, 1, Qt::AlignTop);
</db:programlisting>
<db:para>Now, let's connect them to methods in ScatterDataModifier:</db:para>
<db:programlisting language="cpp">QObject::connect(cameraButton, &amp;amp;QPushButton::clicked, modifier,
                 &amp;amp;ScatterDataModifier::changePresetCamera);
QObject::connect(labelButton, &amp;amp;QPushButton::clicked, modifier,
                 &amp;amp;ScatterDataModifier::changeLabelStyle);
QObject::connect(itemCountButton, &amp;amp;QPushButton::clicked, modifier,
                 &amp;amp;ScatterDataModifier::toggleItemCount);

QObject::connect(backgroundCheckBox, &amp;amp;QCheckBox::stateChanged, modifier,
                 &amp;amp;ScatterDataModifier::setBackgroundEnabled);
QObject::connect(gridCheckBox, &amp;amp;QCheckBox::stateChanged, modifier,
                 &amp;amp;ScatterDataModifier::setGridEnabled);
QObject::connect(smoothCheckBox, &amp;amp;QCheckBox::stateChanged, modifier,
                 &amp;amp;ScatterDataModifier::setSmoothDots);

QObject::connect(modifier, &amp;amp;ScatterDataModifier::backgroundEnabledChanged,
                 backgroundCheckBox, &amp;amp;QCheckBox::setChecked);
QObject::connect(modifier, &amp;amp;ScatterDataModifier::gridEnabledChanged,
                 gridCheckBox, &amp;amp;QCheckBox::setChecked);
QObject::connect(itemStyleList, SIGNAL(currentIndexChanged(int)), modifier,
                 SLOT(changeStyle(int)));

QObject::connect(themeList, SIGNAL(currentIndexChanged(int)), modifier,
                 SLOT(changeTheme(int)));

QObject::connect(shadowQuality, SIGNAL(currentIndexChanged(int)), modifier,
                 SLOT(changeShadowQuality(int)));

QObject::connect(modifier, &amp;amp;ScatterDataModifier::shadowQualityChanged, shadowQuality,
                 &amp;amp;QComboBox::setCurrentIndex);
QObject::connect(graph, &amp;amp;Q3DScatter::shadowQualityChanged, modifier,
                 &amp;amp;ScatterDataModifier::shadowQualityUpdatedByVisual);

QObject::connect(fontList, &amp;amp;QFontComboBox::currentFontChanged, modifier,
                 &amp;amp;ScatterDataModifier::changeFont);

QObject::connect(modifier, &amp;amp;ScatterDataModifier::fontChanged, fontList,
                 &amp;amp;QFontComboBox::setCurrentFont);
</db:programlisting>
<db:para>Here are the methods in ScatterDataModifier the signals were connected to:</db:para>
<db:programlisting language="cpp">void ScatterDataModifier::changeStyle(int style)
{
    QComboBox *comboBox = qobject_cast&amp;lt;QComboBox *&amp;gt;(sender());
    if (comboBox) {
        m_style = QAbstract3DSeries::Mesh(comboBox-&amp;gt;itemData(style).toInt());
        if (m_graph-&amp;gt;seriesList().size())
            m_graph-&amp;gt;seriesList().at(0)-&amp;gt;setMesh(m_style);
    }
}

void ScatterDataModifier::setSmoothDots(int smooth)
{
    m_smooth = bool(smooth);
    QScatter3DSeries *series = m_graph-&amp;gt;seriesList().at(0);
    series-&amp;gt;setMeshSmooth(m_smooth);
}

void ScatterDataModifier::changeTheme(int theme)
{
    Q3DTheme *currentTheme = m_graph-&amp;gt;activeTheme();
    currentTheme-&amp;gt;setType(Q3DTheme::Theme(theme));
    emit backgroundEnabledChanged(currentTheme-&amp;gt;isBackgroundEnabled());
    emit gridEnabledChanged(currentTheme-&amp;gt;isGridEnabled());
    emit fontChanged(currentTheme-&amp;gt;font());
}

void ScatterDataModifier::changePresetCamera()
{
    static int preset = Q3DCamera::CameraPresetFrontLow;

    m_graph-&amp;gt;scene()-&amp;gt;activeCamera()-&amp;gt;setCameraPreset((Q3DCamera::CameraPreset)preset);

    if (++preset &amp;gt; Q3DCamera::CameraPresetDirectlyBelow)
        preset = Q3DCamera::CameraPresetFrontLow;
}

void ScatterDataModifier::changeLabelStyle()
{
    m_graph-&amp;gt;activeTheme()-&amp;gt;setLabelBackgroundEnabled(!m_graph-&amp;gt;activeTheme()-&amp;gt;isLabelBackgroundEnabled());
}

void ScatterDataModifier::changeFont(const QFont &amp;amp;font)
{
    QFont newFont = font;
    newFont.setPointSizeF(m_fontSize);
    m_graph-&amp;gt;activeTheme()-&amp;gt;setFont(newFont);
}

void ScatterDataModifier::shadowQualityUpdatedByVisual(QAbstract3DGraph::ShadowQuality sq)
{
    int quality = int(sq);
    emit shadowQualityChanged(quality); // connected to a checkbox in main.cpp
}

void ScatterDataModifier::changeShadowQuality(int quality)
{
    QAbstract3DGraph::ShadowQuality sq = QAbstract3DGraph::ShadowQuality(quality);
    m_graph-&amp;gt;setShadowQuality(sq);
}

void ScatterDataModifier::setBackgroundEnabled(int enabled)
{
    m_graph-&amp;gt;activeTheme()-&amp;gt;setBackgroundEnabled((bool)enabled);
}

void ScatterDataModifier::setGridEnabled(int enabled)
{
    m_graph-&amp;gt;activeTheme()-&amp;gt;setGridEnabled((bool)enabled);
}
</db:programlisting>
<db:para>And so we have an application in which we can control:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Label style</db:para>
</db:listitem>
<db:listitem>
<db:para>Camera preset</db:para>
</db:listitem>
<db:listitem>
<db:para>Background visibility</db:para>
</db:listitem>
<db:listitem>
<db:para>Grid visibility</db:para>
</db:listitem>
<db:listitem>
<db:para>Dot shading smoothness</db:para>
</db:listitem>
<db:listitem>
<db:para>Dot style</db:para>
</db:listitem>
<db:listitem>
<db:para>Theme</db:para>
</db:listitem>
<db:listitem>
<db:para>Shadow quality</db:para>
</db:listitem>
<db:listitem>
<db:para>Label font</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="example-contents">
<db:title>Example Contents</db:title>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="scatter/main.cpp">scatter/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="scatter/scatter.pro">scatter/scatter.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="scatter/scatterdatamodifier.cpp">scatter/scatterdatamodifier.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="scatter/scatterdatamodifier.h">scatter/scatterdatamodifier.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section></db:article>
