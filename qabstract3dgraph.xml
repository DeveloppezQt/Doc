<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstract3DGraph Class</db:title>
<db:productname>QtGraphs</db:productname>
<db:edition>Qt Graphs | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Graphs Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link> class provides a window and render loop for graphs.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstract3DGraph</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Graphs)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Graphs)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += graphs</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickwidget.xml" xlink:role="class">QQuickWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="q3dbars.xml" xlink:role="class">Q3DBars</db:link>, <db:link xlink:href="q3dscatter.xml" xlink:role="class">Q3DScatter</db:link>, and <db:link xlink:href="q3dsurface.xml" xlink:role="class">Q3DSurface</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class subclasses a <db:link xlink:href="qwindow.xml">QWindow</db:link> and provides render loop for graphs inheriting it.</db:para>
<db:para>You should not need to use this class directly, but one of its subclasses instead.</db:para>
<db:para>Anti-aliasing is turned on by default on C++, except in OpenGL ES2 environments, where anti-aliasing is not supported by Qt Graphs. To specify non-default anti-aliasing for a graph, give a custom surface format as a constructor parameter. You can use the convenience function <db:code>qDefaultSurfaceFormat()</db:code> to create the surface format object.</db:para>
<db:note>
<db:para><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link> sets window flag <db:code>Qt::FramelessWindowHint</db:code> on by default. If you want to display graph windows as standalone windows with regular window frame, clear this flag after constructing the graph. For example:</db:para>
</db:note>
<db:programlisting language="cpp">Q3DBars *graphWindow = new Q3DBars;
graphWindow-&amp;gt;setFlags(graphWindow-&amp;gt;flags() ^ Qt::FramelessWindowHint);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml">Q3DBars</db:link></db:member>
<db:member><db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link></db:member>
<db:member><db:link xlink:href="q3dsurface.xml">Q3DSurface</db:link></db:member>
<db:member><db:link xlink:href="qtgraphs-module.xml">Qt Graphs C++ Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ElementType-enum">
<db:title>enum QAbstract3DGraph::ElementType</db:title>
<db:enumsynopsis>
<db:enumname>ElementType</db:enumname>
<db:enumitem>
<db:enumidentifier>ElementNone</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ElementSeries</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ElementAxisXLabel</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ElementAxisYLabel</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ElementAxisZLabel</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ElementCustomItem</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Type of an element in the graph.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ElementNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No defined element.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ElementSeries</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An item in a series.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ElementAxisXLabel</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The x-axis label.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ElementAxisYLabel</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The y-axis label.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ElementAxisZLabel</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The z-axis label.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ElementCustomItem</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>A custom item.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="OptimizationHint-enum">
<db:title>enum QAbstract3DGraph::OptimizationHint</db:title>
<db:bridgehead renderas="sect2">flags QAbstract3DGraph::OptimizationHints</db:bridgehead>
<db:enumsynopsis>
<db:enumname>OptimizationHint</db:enumname>
<db:enumitem>
<db:enumidentifier>OptimizationDefault</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OptimizationStatic</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OptimizationLegacy</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QAbstract3DGraph::OptimizationHints</db:typedefname>
</db:typedefsynopsis>
<db:para>The optimization hint for rendering.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::OptimizationDefault</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Provides the full feature set with instancing at a good performance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::OptimizationStatic</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Optimizes the rendering of static data sets at the expense of some features. Usable only with <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link> graphs.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::OptimizationLegacy</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Provides the full feature set at a reasonable performance. To be used if OptimizationDefault performs poorly or does not work.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>OptimizationHints</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;OptimizationHint&gt;. </db:code>It stores an OR combination of <db:code>OptimizationHint</db:code> values.</db:para>
</db:section>
<db:section xml:id="SelectionFlag-enum">
<db:title>enum QAbstract3DGraph::SelectionFlag</db:title>
<db:bridgehead renderas="sect2">flags QAbstract3DGraph::SelectionFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>SelectionFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>SelectionNone</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectionItem</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectionRow</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectionItemAndRow</db:enumidentifier>
<db:enumvalue>SelectionItem | SelectionRow</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectionColumn</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectionItemAndColumn</db:enumidentifier>
<db:enumvalue>SelectionItem | SelectionColumn</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectionRowAndColumn</db:enumidentifier>
<db:enumvalue>SelectionRow | SelectionColumn</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectionItemRowAndColumn</db:enumidentifier>
<db:enumvalue>SelectionItem | SelectionRow | SelectionColumn</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectionSlice</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectionMultiSeries</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QAbstract3DGraph::SelectionFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>Item selection modes. Values of this enumeration can be combined with OR operator.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Selection mode disabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionItem</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Selection highlights a single item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionRow</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Selection highlights a single row.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionItemAndRow</db:code></db:para>
</db:td>
<db:td><db:code>SelectionItem | SelectionRow</db:code></db:td>
<db:td>
<db:para>Combination flag for highlighting both item and row with different colors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionColumn</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Selection highlights a single column.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionItemAndColumn</db:code></db:para>
</db:td>
<db:td><db:code>SelectionItem | SelectionColumn</db:code></db:td>
<db:td>
<db:para>Combination flag for highlighting both item and column with different colors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionRowAndColumn</db:code></db:para>
</db:td>
<db:td><db:code>SelectionRow | SelectionColumn</db:code></db:td>
<db:td>
<db:para>Combination flag for highlighting both row and column.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionItemRowAndColumn</db:code></db:para>
</db:td>
<db:td><db:code>SelectionItem | SelectionRow | SelectionColumn</db:code></db:td>
<db:td>
<db:para>Combination flag for highlighting item, row, and column.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionSlice</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Setting this mode flag indicates that the graph should take care of the slice view handling automatically. If you wish to control the slice view yourself via <db:link xlink:href="q3dscene.xml">Q3DScene</db:link>, do not set this flag. When setting this mode flag, either <db:code>SelectionRow</db:code> or <db:code>SelectionColumn</db:code> must also be set, but not both. Slicing is supported by <db:link xlink:href="q3dbars.xml">Q3DBars</db:link> and <db:link xlink:href="q3dsurface.xml">Q3DSurface</db:link> only. When this flag is set, slice mode is entered in the following situations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>When selection is changed explicitly via series API to a visible item</db:para>
</db:listitem>
<db:listitem>
<db:para>When selection is changed by clicking on the graph</db:para>
</db:listitem>
<db:listitem>
<db:para>When the selection mode changes and the selected item is visible</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::SelectionMultiSeries</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Setting this mode means that items for all series at same position are highlighted, instead of just the selected item. The actual selection in the other series doesn't change. When setting this mode flag, one or more of the basic selection flags (<db:code>SelectionItem</db:code>, <db:code>SelectionRow</db:code>, or <db:code>SelectionColumn</db:code>) must also be set. Multi-series selection is not supported for <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>SelectionFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;SelectionFlag&gt;. </db:code>It stores an OR combination of <db:code>SelectionFlag</db:code> values.</db:para>
<db:section xml:id="ShadowQuality-enum">
<db:title>enum QAbstract3DGraph::ShadowQuality</db:title>
<db:enumsynopsis>
<db:enumname>ShadowQuality</db:enumname>
<db:enumitem>
<db:enumidentifier>ShadowQualityNone</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ShadowQualityLow</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ShadowQualityMedium</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ShadowQualityHigh</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ShadowQualitySoftLow</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ShadowQualitySoftMedium</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ShadowQualitySoftHigh</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Quality of shadows.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ShadowQualityNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Shadows are disabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ShadowQualityLow</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Shadows are rendered in low quality.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ShadowQualityMedium</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Shadows are rendered in medium quality.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ShadowQualityHigh</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Shadows are rendered in high quality.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ShadowQualitySoftLow</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Shadows are rendered in low quality with softened edges.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ShadowQualitySoftMedium</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Shadows are rendered in medium quality with softened edges.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link></db:emphasis>::ShadowQualitySoftHigh</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Shadows are rendered in high quality with softened edges.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activeInputHandler-prop">
<db:title>activeInputHandler : QAbstract3DInputHandler*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstract3DInputHandler*</db:type>
<db:varname>activeInputHandler</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activeInputHandler</db:synopsisinfo>
<db:synopsisinfo role="setter">setActiveInputHandler</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeInputHandlerChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the active input handler used in the graph.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstract3dinputhandler.xml">QAbstract3DInputHandler</db:link></db:type> *<db:emphasis role="bold">activeInputHandler</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstract3dgraph.xml#setActiveInputHandler">setActiveInputHandler</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstract3dinputhandler.xml">QAbstract3DInputHandler</db:link></db:type> *<db:emphasis>inputHandler</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">activeInputHandlerChanged</db:emphasis>(<db:type><db:link xlink:href="qabstract3dinputhandler.xml">QAbstract3DInputHandler</db:link></db:type> *<db:emphasis>inputHandler</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="activeTheme-prop">
<db:title>activeTheme : Q3DTheme*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Q3DTheme*</db:type>
<db:varname>activeTheme</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activeTheme</db:synopsisinfo>
<db:synopsisinfo role="setter">setActiveTheme</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeThemeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the active theme of the graph.</db:para>
<db:para>Sets <db:code role="parameter">activeTheme</db:code> as the active theme to be used for the graph. Implicitly calls <db:link xlink:href="qabstract3dgraph.xml#addTheme">addTheme</db:link>() to transfer the ownership of the theme to this graph.</db:para>
<db:para>If <db:code role="parameter">activeTheme</db:code> is null, a temporary default theme is created. This temporary theme is destroyed if any theme is explicitly set later. Properties of the theme can be modified even after setting it, and the modifications take effect immediately.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="q3dtheme.xml">Q3DTheme</db:link></db:type> *<db:emphasis role="bold">activeTheme</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setActiveTheme</db:emphasis>(<db:type><db:link xlink:href="q3dtheme.xml">Q3DTheme</db:link></db:type> *<db:emphasis>activeTheme</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">activeThemeChanged</db:emphasis>(<db:type><db:link xlink:href="q3dtheme.xml">Q3DTheme</db:link></db:type> *<db:emphasis>activeTheme</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="aspectRatio-prop">
<db:title>aspectRatio : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>aspectRatio</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">aspectRatio</db:synopsisinfo>
<db:synopsisinfo role="setter">setAspectRatio</db:synopsisinfo>
<db:synopsisinfo role="notifier">aspectRatioChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ratio of the graph scaling between the longest axis on the horizontal plane and the y-axis.</db:para>
<db:para>Defaults to <db:code>2.0</db:code>.</db:para>
<db:note>
<db:para>Has no effect on <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">aspectRatio</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAspectRatio</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>ratio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">aspectRatioChanged</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>ratio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#horizontalAspectRatio-prop">horizontalAspectRatio</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentFps-prop">
<db:title>[read-only] currentFps : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>currentFps</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentFps</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentFpsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the rendering results for the last second.</db:para>
<db:para>The results are stored in this read-only property when FPS measuring is enabled. It takes at least a second before this value is updated after measuring is activated.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentFps</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">currentFpsChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>fps</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#measureFps-prop">measureFps</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalAspectRatio-prop">
<db:title>horizontalAspectRatio : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>horizontalAspectRatio</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">horizontalAspectRatio</db:synopsisinfo>
<db:synopsisinfo role="setter">setHorizontalAspectRatio</db:synopsisinfo>
<db:synopsisinfo role="notifier">horizontalAspectRatioChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ratio of the graph scaling between the x-axis and z-axis.</db:para>
<db:para>The value of <db:code>0.0</db:code> indicates automatic scaling according to axis ranges. Defaults to <db:code>0.0</db:code>.</db:para>
<db:para>Has no effect on <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>, which handles scaling on the horizontal plane via the <db:link xlink:href="q3dbars.xml#barThickness-prop">barThickness</db:link> and <db:link xlink:href="q3dbars.xml#barSpacing-prop">barSpacing</db:link> properties. Polar graphs also ignore this property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">horizontalAspectRatio</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHorizontalAspectRatio</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>ratio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">horizontalAspectRatioChanged</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>ratio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#aspectRatio-prop">aspectRatio</db:link></db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#polar-prop">polar</db:link></db:member>
<db:member><db:link xlink:href="q3dbars.xml#barThickness-prop">Q3DBars::barThickness</db:link></db:member>
<db:member><db:link xlink:href="q3dbars.xml#barSpacing-prop">Q3DBars::barSpacing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="locale-prop">
<db:title>locale : QLocale</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QLocale</db:type>
<db:varname>locale</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">locale</db:synopsisinfo>
<db:synopsisinfo role="getter">locale</db:synopsisinfo>
<db:synopsisinfo role="setter">setLocale</db:synopsisinfo>
<db:synopsisinfo role="setter">setLocale</db:synopsisinfo>
<db:synopsisinfo role="resetter">unsetLocale</db:synopsisinfo>
<db:synopsisinfo role="notifier">localeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the locale used for formatting various numeric labels.</db:para>
<db:para>Defaults to the <db:code>&quot;C&quot;</db:code> locale.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qwidget.xml#locale-prop">locale</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> <db:emphasis role="bold">locale</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwidget.xml#locale-prop">setLocale</db:link></db:emphasis>(const <db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> &amp;<db:emphasis>locale</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLocale</db:emphasis>(const <db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> &amp;<db:emphasis>locale</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwidget.xml#locale-prop">unsetLocale</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">localeChanged</db:emphasis>(const <db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> &amp;<db:emphasis>locale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxis.xml#labelFormat-prop">QValue3DAxis::labelFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="margin-prop">
<db:title>margin : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>margin</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">margin</db:synopsisinfo>
<db:synopsisinfo role="setter">setMargin</db:synopsisinfo>
<db:synopsisinfo role="notifier">marginChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the absolute value used for the space left between the edge of the plottable graph area and the edge of the graph background.</db:para>
<db:para>If the margin value is negative, the margins are determined automatically and can vary according to the size of the items in the series and the type of the graph. The value is interpreted as a fraction of the y-axis range if the graph aspect ratios have not beed changed from the default values. Defaults to <db:code>-1.0</db:code>.</db:para>
<db:note>
<db:para>Setting a smaller margin for a scatter graph than the automatically determined margin can cause the scatter items at the edges of the graph to overlap with the graph background.</db:para>
</db:note>
<db:note>
<db:para>On scatter and surface graphs, if the margin is small in comparison to the axis label size, the positions of the edge labels of the axes are adjusted to avoid overlap with the edge labels of the neighboring axes.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">margin</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMargin</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>margin</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">marginChanged</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>margin</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="measureFps-prop">
<db:title>measureFps : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>measureFps</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">measureFps</db:synopsisinfo>
<db:synopsisinfo role="setter">setMeasureFps</db:synopsisinfo>
<db:synopsisinfo role="notifier">measureFpsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether rendering is done continuously instead of on demand.</db:para>
<db:para>If <db:code>true</db:code>, rendering is continuous and the value of the <db:link xlink:href="qabstract3dgraph.xml#currentFps-prop">currentFps</db:link> property is updated. Defaults to <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">measureFps</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMeasureFps</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">measureFpsChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#currentFps-prop">currentFps</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="optimizationHints-prop">
<db:title>optimizationHints : QAbstract3DGraph::OptimizationHints</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstract3DGraph::OptimizationHints</db:type>
<db:varname>optimizationHints</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">optimizationHints</db:synopsisinfo>
<db:synopsisinfo role="setter">setOptimizationHints</db:synopsisinfo>
<db:synopsisinfo role="notifier">optimizationHintsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the default, static, or legacy mode is used for rendering optimization.</db:para>
<db:para>The default mode uses instanced rendering, and provides the full feature set at the best level of performance on most systems. The static mode optimizes graph rendering and is ideal for large non-changing data sets. It is slower with dynamic data changes and item rotations. Selection is not optimized, so using the static mode with massive data sets is not advisable. Static optimization works only on scatter graphs. Legacy mode renders all items in th graph individually, without instancing. It should be used only if default mode does not work, i.e. if the target system does not support instancing. Defaults to <db:link xlink:href="qabstract3dgraph.xml#OptimizationHint-enum">OptimizationDefault</db:link>.</db:para>
<db:note>
<db:para>On some environments, large graphs using static optimization may not render, because all of the items are rendered using a single draw call, and different graphics drivers support different maximum vertice counts per call. This is mostly an issue on 32bit and OpenGL ES2 platforms. To work around this issue, choose an item mesh with a low vertex count or use the point mesh.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstract3dgraph.xml#OptimizationHint-enum">QAbstract3DGraph::OptimizationHints</db:link></db:type> <db:emphasis role="bold">optimizationHints</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOptimizationHints</db:emphasis>(<db:type><db:link xlink:href="qabstract3dgraph.xml#OptimizationHint-enum">QAbstract3DGraph::OptimizationHints</db:link></db:type> <db:emphasis>hints</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">optimizationHintsChanged</db:emphasis>(<db:type><db:link xlink:href="qabstract3dgraph.xml#OptimizationHint-enum">QAbstract3DGraph::OptimizationHints</db:link></db:type> <db:emphasis>hints</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dseries.xml#mesh-prop">QAbstract3DSeries::mesh</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orthoProjection-prop">
<db:title>orthoProjection : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>orthoProjection</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isOrthoProjection</db:synopsisinfo>
<db:synopsisinfo role="setter">setOrthoProjection</db:synopsisinfo>
<db:synopsisinfo role="notifier">orthoProjectionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether orthographic projection is used for displaying the graph.</db:para>
<db:para>Defaults to <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Shadows will be disabled when set to <db:code>true</db:code>.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isOrthoProjection</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOrthoProjection</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">orthoProjectionChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3daxis.xml#labelAutoRotation-prop">QAbstract3DAxis::labelAutoRotation</db:link></db:member>
<db:member><db:link xlink:href="q3dcamera.xml#cameraPreset-prop">Q3DCamera::cameraPreset</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="polar-prop">
<db:title>polar : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>polar</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isPolar</db:synopsisinfo>
<db:synopsisinfo role="setter">setPolar</db:synopsisinfo>
<db:synopsisinfo role="notifier">polarChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether horizontal axes are changed into polar axes.</db:para>
<db:para>If <db:code>true</db:code>, the x-axis becomes the angular axis and the z-axis becomes the radial axis. Polar mode is not available for bar graphs.</db:para>
<db:para>Defaults to <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isPolar</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPolar</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">polarChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#orthoProjection-prop">orthoProjection</db:link></db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#radialLabelOffset-prop">radialLabelOffset</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="queriedGraphPosition-prop">
<db:title>[read-only] queriedGraphPosition : const QVector3D</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector3D</db:type>
<db:varname>queriedGraphPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">queriedGraphPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">queriedGraphPositionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the latest queried graph position values along each axis.</db:para>
<db:para>This read-only property contains the results from <db:link xlink:href="q3dscene.xml#graphPositionQuery-prop">Q3DScene::graphPositionQuery</db:link>. The values are normalized to the range <db:code>[-1, 1]</db:code>. If the queried position was outside the graph bounds, the values will not reflect the real position, but will instead indicate an undefined position outside the range <db:code>[-1, 1]</db:code>. The value will be undefined until a query is made.</db:para>
<db:para>There is no single correct 3D coordinate to match a particular screen position, so to be consistent, the queries are always done against the inner sides of an invisible box surrounding the graph.</db:para>
<db:note>
<db:para>Bar graphs only allow querying graph position at the graph floor level, so the y-value is always zero for bar graphs and the valid queries can be only made at screen positions that contain the floor of the graph.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> <db:emphasis role="bold">queriedGraphPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">queriedGraphPositionChanged</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>data</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscene.xml#graphPositionQuery-prop">Q3DScene::graphPositionQuery</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="radialLabelOffset-prop">
<db:title>radialLabelOffset : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>radialLabelOffset</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">radialLabelOffset</db:synopsisinfo>
<db:synopsisinfo role="setter">setRadialLabelOffset</db:synopsisinfo>
<db:synopsisinfo role="notifier">radialLabelOffsetChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the normalized horizontal offset for the axis labels of the radial polar axis.</db:para>
<db:para>The value <db:code>0.0</db:code> indicates that the labels should be drawn next to the 0-angle angular axis grid line. The value <db:code>1.0</db:code> indicates that the labels are drawn in their usual place at the edge of the graph background. Defaults to <db:code>1.0</db:code>.</db:para>
<db:para>This property is ignored if the <db:link xlink:href="qabstract3dgraph.xml#polar-prop">polar</db:link> property value is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">radialLabelOffset</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRadialLabelOffset</db:emphasis>(<db:type>float</db:type> <db:emphasis>offset</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">radialLabelOffsetChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>offset</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#polar-prop">polar</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reflection-prop">
<db:title>reflection : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>reflection</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isReflection</db:synopsisinfo>
<db:synopsisinfo role="setter">setReflection</db:synopsisinfo>
<db:synopsisinfo role="notifier">reflectionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether floor reflections are on or off.</db:para>
<db:para>Defaults to <db:code>false</db:code>.</db:para>
<db:para>Affects only <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>. However, in <db:link xlink:href="q3dbars.xml">Q3DBars</db:link> graphs holding both positive and negative values, reflections are not supported for custom items that intersect the floor plane. In that case, reflections should be turned off to avoid incorrect rendering.</db:para>
<db:para>If using a custom surface format, the stencil buffer needs to be defined (<db:link xlink:href="qsurfaceformat.xml#setStencilBufferSize">QSurfaceFormat::setStencilBufferSize</db:link>()) for reflections to work.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isReflection</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setReflection</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">reflectionChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#reflectivity-prop">reflectivity</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reflectivity-prop">
<db:title>reflectivity : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>reflectivity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">reflectivity</db:synopsisinfo>
<db:synopsisinfo role="setter">setReflectivity</db:synopsisinfo>
<db:synopsisinfo role="notifier">reflectivityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Floor reflectivity.</db:para>
<db:para>Larger numbers make the floor more reflective. The valid range is <db:code>[0...1]</db:code>. Defaults to <db:code>0.5</db:code>.</db:para>
<db:note>
<db:para>Affects only <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">reflectivity</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setReflectivity</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>reflectivity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">reflectivityChanged</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>reflectivity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#reflection-prop">reflection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scene-prop">
<db:title>[read-only] scene : Q3DScene* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Q3DScene*</db:type>
<db:varname>scene</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">scene</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="q3dscene.xml">Q3DScene</db:link> pointer that can be used to manipulate the scene and access the scene elements, such as the active camera.</db:para>
<db:para>This property is read-only.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="q3dscene.xml">Q3DScene</db:link></db:type> *<db:emphasis role="bold">scene</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectedElement-prop">
<db:title>[read-only] selectedElement : const QAbstract3DGraph::ElementType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstract3DGraph::ElementType</db:type>
<db:varname>selectedElement</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectedElement</db:synopsisinfo>
<db:synopsisinfo role="notifier">selectedElementChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the element selected in the graph.</db:para>
<db:para>This property can be used to query the selected element type. The type is valid until a new selection is made in the graph and the <db:code>selectedElementChanged</db:code> signal is emitted.</db:para>
<db:para>The signal can be used for example for implementing custom input handlers, as demonstrated in the <db:link xlink:href="qtgraphs-widgetgraphgallery-example.xml">Graph Gallery</db:link> example under <db:guilabel>Scatter Graph</db:guilabel> tab.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstract3dgraph.xml#ElementType-enum">QAbstract3DGraph::ElementType</db:link></db:type> <db:emphasis role="bold">selectedElement</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">selectedElementChanged</db:emphasis>(<db:type><db:link xlink:href="qabstract3dgraph.xml#ElementType-enum">QAbstract3DGraph::ElementType</db:link></db:type> <db:emphasis>type</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#selectedLabelIndex">selectedLabelIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#selectedAxis">selectedAxis</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#selectedCustomItemIndex">selectedCustomItemIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#selectedCustomItem">selectedCustomItem</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#selectedSeries-prop">Q3DBars::selectedSeries</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#selectedSeries-prop">Q3DScatter::selectedSeries</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface.xml#selectedSeries-prop">Q3DSurface::selectedSeries</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscene.xml#selectionQueryPosition-prop">Q3DScene::setSelectionQueryPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionMode-prop">
<db:title>selectionMode : QAbstract3DGraph::SelectionFlags</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstract3DGraph::SelectionFlags</db:type>
<db:varname>selectionMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectionMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setSelectionMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">selectionModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Item selection mode.</db:para>
<db:para>A combination of <db:link xlink:href="qabstract3dgraph.xml#SelectionFlag-enum">SelectionFlags</db:link>. By default, <db:code>SelectionItem</db:code>. Different graph types support different selection modes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstract3dgraph.xml#SelectionFlag-enum">QAbstract3DGraph::SelectionFlags</db:link></db:type> <db:emphasis role="bold">selectionMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSelectionMode</db:emphasis>(const <db:type><db:link xlink:href="qabstract3dgraph.xml#SelectionFlag-enum">QAbstract3DGraph::SelectionFlags</db:link></db:type> &amp;<db:emphasis>selectionMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">selectionModeChanged</db:emphasis>(const <db:type><db:link xlink:href="qabstract3dgraph.xml#SelectionFlag-enum">QAbstract3DGraph::SelectionFlags</db:link></db:type> <db:emphasis>selectionMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#SelectionFlag-enum">SelectionFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shadowQuality-prop">
<db:title>shadowQuality : QAbstract3DGraph::ShadowQuality</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstract3DGraph::ShadowQuality</db:type>
<db:varname>shadowQuality</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">shadowQuality</db:synopsisinfo>
<db:synopsisinfo role="setter">setShadowQuality</db:synopsisinfo>
<db:synopsisinfo role="notifier">shadowQualityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the quality of the shadow.</db:para>
<db:para>One of the <db:link xlink:href="qabstract3dgraph.xml#ShadowQuality-enum">ShadowQuality</db:link> enum values. By default, <db:code>ShadowQualityMedium</db:code>.</db:para>
<db:note>
<db:para>If setting the shadow quality to a certain level fails, the level is lowered until it is successfully set. The <db:code>shadowQualityChanged</db:code> signal is emitted each time a change is made.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstract3dgraph.xml#ShadowQuality-enum">QAbstract3DGraph::ShadowQuality</db:link></db:type> <db:emphasis role="bold">shadowQuality</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setShadowQuality</db:emphasis>(const <db:type><db:link xlink:href="qabstract3dgraph.xml#ShadowQuality-enum">QAbstract3DGraph::ShadowQuality</db:link></db:type> &amp;<db:emphasis>shadowQuality</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">shadowQualityChanged</db:emphasis>(<db:type><db:link xlink:href="qabstract3dgraph.xml#ShadowQuality-enum">QAbstract3DGraph::ShadowQuality</db:link></db:type> <db:emphasis>quality</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#ShadowQuality-enum">ShadowQuality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAbstract3DGraph">
<db:title>[virtual] QAbstract3DGraph::~QAbstract3DGraph()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstract3DGraph</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstract3DGraph()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys <db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link>.</db:para>
</db:section>
<db:section xml:id="addCustomItem">
<db:title>int QAbstract3DGraph::addCustomItem(QCustom3DItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>addCustomItem</db:methodname>
<db:methodparam>
<db:type>QCustom3DItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int addCustomItem(QCustom3DItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a <db:link xlink:href="qcustom3ditem.xml">QCustom3DItem</db:link> <db:code role="parameter">item</db:code> to the graph. Graph takes ownership of the added item.</db:para>
<db:para>Returns the index to the added item if the add operation was successful, -1 if trying to add a null item, and the index of the item if trying to add an already added item.</db:para>
<db:para>Items are rendered in the order they have been inserted. The rendering order needs to be taken into account when having solid and transparent items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#removeCustomItems">removeCustomItems</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#removeCustomItem">removeCustomItem</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#removeCustomItemAt">removeCustomItemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#customItems">customItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addInputHandler">
<db:title>void QAbstract3DGraph::addInputHandler(QAbstract3DInputHandler *<db:emphasis>inputHandler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addInputHandler</db:methodname>
<db:methodparam>
<db:type>QAbstract3DInputHandler *</db:type>
<db:parameter>inputHandler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addInputHandler(QAbstract3DInputHandler *inputHandler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">inputHandler</db:code> to the graph. The input handlers added via addInputHandler are not taken in to use directly. Only the ownership of the <db:code role="parameter">inputHandler</db:code> is given to the graph. The <db:code role="parameter">inputHandler</db:code> must not be null or already added to another graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#releaseInputHandler">releaseInputHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#setActiveInputHandler">setActiveInputHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addTheme">
<db:title>void QAbstract3DGraph::addTheme(Q3DTheme *<db:emphasis>theme</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addTheme</db:methodname>
<db:methodparam>
<db:type>Q3DTheme *</db:type>
<db:parameter>theme</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addTheme(Q3DTheme *theme)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">theme</db:code> to the graph. The themes added via addTheme are not taken in to use directly. Only the ownership of the theme is given to the graph. The <db:code role="parameter">theme</db:code> must not be null or already added to another graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#releaseTheme">releaseTheme</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#activeTheme-prop">setActiveTheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearSelection">
<db:title>void QAbstract3DGraph::clearSelection()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearSelection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearSelection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears selection from all attached series.</db:para>
</db:section>
<db:section xml:id="customItems">
<db:title>QList&lt;QCustom3DItem *&gt; QAbstract3DGraph::customItems() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QCustom3DItem *&gt;</db:type>
<db:methodname>customItems</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QCustom3DItem *&gt; customItems() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all added custom items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#addCustomItem">addCustomItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasSeries">
<db:title>bool QAbstract3DGraph::hasSeries(QAbstract3DSeries *<db:emphasis>series</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasSeries</db:methodname>
<db:methodparam>
<db:type>QAbstract3DSeries *</db:type>
<db:parameter>series</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasSeries(QAbstract3DSeries *series) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the <db:code role="parameter">series</db:code> has already been added to the graph.</db:para>
</db:section>
<db:section xml:id="inputHandlers">
<db:title>QList&lt;QAbstract3DInputHandler *&gt; QAbstract3DGraph::inputHandlers() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAbstract3DInputHandler *&gt;</db:type>
<db:methodname>inputHandlers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAbstract3DInputHandler *&gt; inputHandlers() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all added input handlers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#addInputHandler">addInputHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseCustomItem">
<db:title>void QAbstract3DGraph::releaseCustomItem(QCustom3DItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>releaseCustomItem</db:methodname>
<db:methodparam>
<db:type>QCustom3DItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void releaseCustomItem(QCustom3DItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gets ownership of given <db:code role="parameter">item</db:code> back and removes the <db:code role="parameter">item</db:code> from the graph.</db:para>
<db:note>
<db:para>If the same item is added back to the graph, the texture or the texture file needs to be re-set.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3ditem.xml#setTextureImage">QCustom3DItem::setTextureImage</db:link>()</db:member>
<db:member><db:link xlink:href="qcustom3ditem.xml#textureFile-prop">QCustom3DItem::setTextureFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseInputHandler">
<db:title>void QAbstract3DGraph::releaseInputHandler(QAbstract3DInputHandler *<db:emphasis>inputHandler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>releaseInputHandler</db:methodname>
<db:methodparam>
<db:type>QAbstract3DInputHandler *</db:type>
<db:parameter>inputHandler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void releaseInputHandler(QAbstract3DInputHandler *inputHandler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the ownership of the <db:code role="parameter">inputHandler</db:code> back to the caller, if it was added to this graph. If the released <db:code role="parameter">inputHandler</db:code> is in use there will be no input handler active after this call.</db:para>
<db:para>If the default input handler is released and added back later, it behaves as any other input handler would.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#addInputHandler">addInputHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#setActiveInputHandler">setActiveInputHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseTheme">
<db:title>void QAbstract3DGraph::releaseTheme(Q3DTheme *<db:emphasis>theme</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>releaseTheme</db:methodname>
<db:methodparam>
<db:type>Q3DTheme *</db:type>
<db:parameter>theme</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void releaseTheme(Q3DTheme *theme)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the ownership of the <db:code role="parameter">theme</db:code> back to the caller, if it was added to this graph. If the released <db:code role="parameter">theme</db:code> is in use, a new default theme will be created and set active.</db:para>
<db:para>If the default theme is released and added back later, it behaves as any other theme would.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#addTheme">addTheme</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#activeTheme-prop">setActiveTheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeCustomItem">
<db:title>void QAbstract3DGraph::removeCustomItem(QCustom3DItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeCustomItem</db:methodname>
<db:methodparam>
<db:type>QCustom3DItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeCustomItem(QCustom3DItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the custom <db:code role="parameter">item</db:code>. Deletes the resources allocated to it.</db:para>
</db:section>
<db:section xml:id="removeCustomItemAt">
<db:title>void QAbstract3DGraph::removeCustomItemAt(const QVector3D &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeCustomItemAt</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeCustomItemAt(const QVector3D &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all custom items at <db:code role="parameter">position</db:code>. Deletes the resources allocated to them.</db:para>
</db:section>
<db:section xml:id="removeCustomItems">
<db:title>void QAbstract3DGraph::removeCustomItems()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeCustomItems</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeCustomItems()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all custom items. Deletes the resources allocated to them.</db:para>
</db:section>
<db:section xml:id="renderToImage">
<db:title>QImage QAbstract3DGraph::renderToImage(int <db:emphasis>msaaSamples</db:emphasis> = 0, const QSize &amp;<db:emphasis>imageSize</db:emphasis> = QSize())</db:title>
<db:methodsynopsis>
<db:type>QImage</db:type>
<db:methodname>renderToImage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msaaSamples</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>imageSize</db:parameter>
<db:initializer>QSize()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage renderToImage(int msaaSamples, const QSize &amp;imageSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders current frame to an image of <db:code role="parameter">imageSize</db:code>. Default size is the window size. Image is rendered with antialiasing level given in <db:code role="parameter">msaaSamples</db:code>. Default level is <db:code>0</db:code>.</db:para>
<db:para>Returns the rendered image.</db:para>
<db:note>
<db:para>OpenGL ES2 does not support anitialiasing, so <db:code role="parameter">msaaSamples</db:code> is always forced to <db:code>0</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="selectedAxis">
<db:title>QAbstract3DAxis *QAbstract3DGraph::selectedAxis() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstract3DAxis *</db:type>
<db:methodname>selectedAxis</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstract3DAxis * selectedAxis() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Can be used to get the selected axis after receiving <db:code>selectedElementChanged</db:code> signal with any label type. Selection is valid until the next <db:code>selectedElementChanged</db:code> signal.</db:para>
<db:para>Returns the pointer to the selected axis, or null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#selectedElement-prop">selectedElement</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedCustomItem">
<db:title>QCustom3DItem *QAbstract3DGraph::selectedCustomItem() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCustom3DItem *</db:type>
<db:methodname>selectedCustomItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCustom3DItem * selectedCustomItem() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Can be used to get the selected custom item after receiving <db:code>selectedElementChanged</db:code> signal with <db:link xlink:href="qabstract3dgraph.xml#ElementType-enum">QAbstract3DGraph::ElementCustomItem</db:link> type. Ownership of the item remains with the graph. Selection is valid until the next <db:code>selectedElementChanged</db:code> signal.</db:para>
<db:para>Returns the pointer to the selected custom item, or null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#selectedElement-prop">selectedElement</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedCustomItemIndex">
<db:title>int QAbstract3DGraph::selectedCustomItemIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>selectedCustomItemIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int selectedCustomItemIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Can be used to query the index of the selected custom item after receiving <db:code>selectedElementChanged</db:code> signal with <db:link xlink:href="qabstract3dgraph.xml#ElementType-enum">QAbstract3DGraph::ElementCustomItem</db:link> type. Selection is valid until the next <db:code>selectedElementChanged</db:code> signal.</db:para>
<db:para>Returns the index of the selected custom item, or -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#selectedElement-prop">selectedElement</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedLabelIndex">
<db:title>int QAbstract3DGraph::selectedLabelIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>selectedLabelIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int selectedLabelIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Can be used to query the index of the selected label after receiving <db:code>selectedElementChanged</db:code> signal with any label type. Selection is valid until the next <db:code>selectedElementChanged</db:code> signal.</db:para>
<db:para>Returns the index of the selected label, or -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#selectedElement-prop">selectedElement</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setActiveInputHandler">
<db:title>void QAbstract3DGraph::setActiveInputHandler(QAbstract3DInputHandler *<db:emphasis>inputHandler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setActiveInputHandler</db:methodname>
<db:methodparam>
<db:type>QAbstract3DInputHandler *</db:type>
<db:parameter>inputHandler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">activeInputHandler</db:synopsisinfo>
<db:synopsisinfo role="signature">void setActiveInputHandler(QAbstract3DInputHandler *inputHandler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">inputHandler</db:code> as the active input handler used in the graph. Implicitly calls <db:link xlink:href="qabstract3dgraph.xml#addInputHandler">addInputHandler</db:link>() to transfer ownership of <db:code role="parameter">inputHandler</db:code> to this graph.</db:para>
<db:para>If <db:code role="parameter">inputHandler</db:code> is null, no input handler will be active after this call.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstract3dgraph.xml#activeInputHandler-prop">activeInputHandler</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#activeInputHandler-prop">activeInputHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#addInputHandler">addInputHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#releaseInputHandler">releaseInputHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="themes">
<db:title>QList&lt;Q3DTheme *&gt; QAbstract3DGraph::themes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Q3DTheme *&gt;</db:type>
<db:methodname>themes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Q3DTheme *&gt; themes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all added themes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#addTheme">addTheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qDefaultSurfaceFormat">
<db:title>QSurfaceFormat qDefaultSurfaceFormat(bool <db:emphasis>antialias</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSurfaceFormat</db:type>
<db:methodname>qDefaultSurfaceFormat</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>antialias</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurfaceFormat qDefaultSurfaceFormat(bool antialias)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function can be used to create a custom surface format suitable for use by Qt Graphs graphs.</db:para>
<db:para>The <db:code role="parameter">antialias</db:code> parameter specifies whether or not antialiasing is activated.</db:para>
<db:para>Give the surface format returned by this function to the graph constructor (C++) or set it as the window format for <db:link xlink:href="qquickview.xml">QQuickView</db:link> (QML) before calling <db:code>show()</db:code> on it.</db:para>
<db:para>For example, disable antialiasing on C++ application:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtGraphs/qutils.h&amp;gt;

// ...

Q3DBars *graph = new Q3DBars(qDefaultSurfaceFormat(false));
</db:programlisting>
<db:para>For example, enable antialiasing for direct rendering modes on QML application:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtGraphs/qutils.h&amp;gt;

// ...

QQuickView viewer;
viewer.setFormat(qDefaultSurfaceFormat(true));
</db:programlisting>
<db:note>
<db:para>Antialiasing is not supported in OpenGL ES2 environments.</db:para>
</db:note>
</db:section>
</db:section>
</db:section></db:article>
