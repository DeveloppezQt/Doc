<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_add_plugin</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creates a Qt plugin target.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Creates a Qt plugin target.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>This command was introduced in Qt 6.0.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_add_plugin(target
              [SHARED | STATIC]
              [CLASS_NAME class_name]
              [OUTPUT_TARGETS variable_name]
              [MANUAL_FINALIZATION]
              sources...
)
</db:programlisting>
<db:para>The MANUAL_FINALIZATION option and the ability to set sources were introduced in Qt 6.5.</db:para>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use qt6_add_plugin() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Qt plugin targets have additional requirements over and above an ordinary CMake library target. The qt_add_plugin() command adds the necessary handling to ensure these requirements are met. It should be called rather than the built-in CMake add_library() command when defining a Qt plugin target.</db:para>
<db:para>By default, the plugin will be created as a STATIC library if Qt was built statically, or as a MODULE library otherwise. You can override this default by explicitly providing the STATIC or SHARED option.</db:para>
<db:para>Any sources provided will be passed through to the internal call to add_library().</db:para>
<db:note>
<db:para>Non-static plugins are meant to be loaded dynamically at runtime, not linked to at build time. CMake differentiates between these two scenarios by providing the MODULE library type for dynamically loaded libraries, and the SHARED library type for libraries that may be linked to directly. This distinction is important for some toolchains (notably Visual Studio), due to the way symbol exports are handled. It may not be possible to link to MODULE libraries, and generating a SHARED library with no exported symbols can result in build-time errors. If the SHARED option is passed to qt_add_plugin(), it will therefore create a MODULE library rather than a SHARED library.</db:para>
</db:note>
<db:para>Every Qt plugin has a class name. By default, this will be the same as the target, but it can be overridden with the CLASS_NAME option. The class name corresponds to the name of the C++ class that declares the metadata for the plugin. For static plugins, it is also the name passed to <db:link xlink:href="qtplugin.xml#Q_IMPORT_PLUGIN">Q_IMPORT_PLUGIN</db:link>, which imports the plugin into an application and ensures it is available at run time.</db:para>
<db:para>If the plugin is built statically, qt_add_plugin() may define additional internal targets. These facilitate automatic importing of the plugin for any executable or shared library that links to the plugin. If the project installs the plugin and intends to make it available for other projects to link to, the project should also install these internal targets. The names of these targets can be obtained by providing the OUTPUT_TARGETS option, followed by the name of a variable in which to return the target list.</db:para>
<db:section xml:id="finalization">
<db:title>Finalization</db:title>
<db:para>After a target is created, further processing or <db:emphasis>finalization</db:emphasis> steps may be needed. The finalization processing is implemented by the <db:link xlink:href="qt-finalize-target.xml">qt_finalize_target()</db:link> command.</db:para>
<db:para>For details and the meaning of the MANUAL_FINALIZATION option, refer to the <db:link xlink:href="qt-add-library.xml#qt-add-library-finalization">finalization documentation</db:link> for qt_add_library.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-finalize-target.xml">qt_finalize_target()</db:link></db:member>
<db:member><db:link xlink:href="qt-add-executable.xml">qt_add_executable()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
