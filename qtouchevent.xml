<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTouchEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> class contains parameters that describe a touch event.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTouchEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpointerevent.xml" xlink:role="class">QPointerEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTouchEvent is part of <db:simplelist><db:member>events</db:member><db:member>touch</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="enabling-touch-events">
<db:title>Enabling Touch Events</db:title>
<db:para>Touch events occur when pressing, releasing, or moving one or more touch points on a touch device (such as a touch-screen or track-pad). To receive touch events, widgets have to have the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_AcceptTouchEvents</db:link> attribute set and graphics items need to have the <db:link xlink:href="qgraphicsitem.xml#setAcceptTouchEvents">acceptTouchEvents</db:link> attribute set to true.</db:para>
<db:para>When using <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> based widgets, you should enable the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_AcceptTouchEvents</db:link> attribute on the scroll area's <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>.</db:para>
<db:para>Similarly to <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link>, Qt automatically grabs each touch point on the first press inside a widget, and the widget will receive all updates for the touch point until it is released. Note that it is possible for a widget to receive events for numerous touch points, and that multiple widgets may be receiving touch events at the same time.</db:para>
</db:section>
<db:section xml:id="event-handling">
<db:title>Event Handling</db:title>
<db:para>All touch events are of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchUpdate</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchEnd</db:link> or <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchCancel</db:link>. Reimplement <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>() or <db:link xlink:href="qabstractscrollarea.xml#viewportEvent">QAbstractScrollArea::viewportEvent</db:link>() for widgets and <db:link xlink:href="qgraphicsitem.xml#sceneEvent">QGraphicsItem::sceneEvent</db:link>() for items in a graphics view to receive touch events.</db:para>
<db:para>Unlike widgets, QWindows receive touch events always, there is no need to opt in. When working directly with a <db:link xlink:href="qwindow.xml">QWindow</db:link>, it is enough to reimplement <db:link xlink:href="qwindow.xml#touchEvent">QWindow::touchEvent</db:link>().</db:para>
<db:para>The <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchUpdate</db:link> and <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchEnd</db:link> events are sent to the widget or item that accepted the <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link> event. If the <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link> event is not accepted and not filtered by an event filter, then no further touch events are sent until the next <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link>.</db:para>
<db:para>Some systems may send an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchCancel</db:link>. Upon receiving this event applications are requested to ignore the entire active touch sequence. For example in a composited system the compositor may decide to treat certain gestures as system-wide gestures. Whenever such a decision is made (the gesture is recognized), the clients will be notified with a <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchCancel</db:link> event so they can update their state accordingly.</db:para>
<db:para>The <db:link xlink:href="qpointerevent.xml#pointCount">pointCount</db:link>() and <db:link xlink:href="qpointerevent.xml#point">point</db:link>() functions can be used to access and iterate individual touch points.</db:para>
<db:para>The <db:link xlink:href="qpointerevent.xml#points">points</db:link>() function returns a list of all touch points contained in the event. Note that this list may be empty, for example in case of a <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchCancel</db:link> event. Each point is an instance of the <db:link xlink:href="qeventpoint.xml">QEventPoint</db:link> class. The <db:link xlink:href="qeventpoint.xml#State-enum">QEventPoint::State</db:link> enum describes the different states that a touch point may have.</db:para>
<db:note>
<db:para>The list of <db:link xlink:href="qpointerevent.xml#points">points</db:link>() will never be partial: A touch event will always contain a touch point for each existing physical touch contacts targeting the window or widget to which the event is sent. For instance, assuming that all touches target the same window or widget, an event with a condition of <db:link xlink:href="qpointerevent.xml#points">points</db:link>().count()==2 is guaranteed to imply that the number of fingers touching the touchscreen or touchpad is exactly two.</db:para>
</db:note>
</db:section>
<db:section xml:id="event-delivery-and-propagation">
<db:title>Event Delivery and Propagation</db:title>
<db:para>By default, <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> translates the first touch point in a <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> into a <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link>. This makes it possible to enable touch events on existing widgets that do not normally handle <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link>. See below for information on some special considerations needed when doing this.</db:para>
<db:para><db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link> is the first touch event sent to a widget. The <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link> event contains a special accept flag that indicates whether the receiver wants the event. By default, the event is accepted. You should call <db:link xlink:href="qevent.xml#ignore">ignore</db:link>() if the touch event is not handled by your widget. The <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link> event is propagated up the parent widget chain until a widget accepts it with <db:link xlink:href="qevent.xml#accept">accept</db:link>(), or an event filter consumes it. For QGraphicsItems, the <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link> event is propagated to items under the mouse (similar to mouse event propagation for QGraphicsItems).</db:para>
</db:section>
<db:section xml:id="touch-point-grouping">
<db:title>Touch Point Grouping</db:title>
<db:para>As mentioned above, it is possible that several widgets can be receiving QTouchEvents at the same time. However, Qt makes sure to never send duplicate <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link> events to the same widget, which could theoretically happen during propagation if, for example, the user touched 2 separate widgets in a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> and both widgets ignored the <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link> event.</db:para>
<db:para>To avoid this, Qt will group new touch points together using the following rules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>When the first touch point is detected, the destination widget is determined firstly by the location on screen and secondly by the propagation rules.</db:para>
</db:listitem>
<db:listitem>
<db:para>When additional touch points are detected, Qt first looks to see if there are any active touch points on any ancestor or descendent of the widget under the new touch point. If there are, the new touch point is grouped with the first, and the new touch point will be sent in a single <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> to the widget that handled the first touch point. (The widget under the new touch point will not receive an event).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This makes it possible for sibling widgets to handle touch events independently while making sure that the sequence of QTouchEvents is always correct.</db:para>
</db:section>
<db:section xml:id="mouse-events-and-touch-event-synthesizing">
<db:title>Mouse Events and Touch Event Synthesizing</db:title>
<db:para><db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> delivery is independent from that of <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link>. The application flags <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_SynthesizeTouchForUnhandledMouseEvents</db:link> and <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_SynthesizeMouseForUnhandledTouchEvents</db:link> can be used to enable or disable automatic synthesizing of touch events to mouse events and mouse events to touch events.</db:para>
</db:section>
<db:section xml:id="caveats">
<db:title>Caveats</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>As mentioned above, enabling touch events means multiple widgets can be receiving touch events simultaneously. Combined with the default <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>() handling for QTouchEvents, this gives you great flexibility in designing touch user interfaces. Be aware of the implications. For example, it is possible that the user is moving a <db:link xlink:href="qslider.xml">QSlider</db:link> with one finger and pressing a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> with another. The signals emitted by these widgets will be interleaved.</db:para>
</db:listitem>
<db:listitem>
<db:para>Recursion into the event loop using one of the exec() methods (e.g., <db:link xlink:href="qdialog.xml#exec">QDialog::exec</db:link>() or <db:link xlink:href="qmenu.xml#exec">QMenu::exec</db:link>()) in a <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> event handler is not supported. Since there are multiple event recipients, recursion may cause problems, including but not limited to lost events and unexpected infinite recursion.</db:para>
</db:listitem>
<db:listitem>
<db:para>QTouchEvents are not affected by a <db:link xlink:href="qwidget.xml#grabMouse">mouse grab</db:link> or an <db:link xlink:href="qapplication.xml#activePopupWidget">active pop-up widget</db:link>. The behavior of QTouchEvents is undefined when opening a pop-up or grabbing the mouse while there are more than one active touch points.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml">QEventPoint</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#State-enum">QEventPoint::State</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_AcceptTouchEvents</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#acceptTouchEvents">QGraphicsItem::acceptTouchEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="isBeginEvent">
<db:title>[override virtual] bool QTouchEvent::isBeginEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBeginEvent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBeginEvent() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this event includes at least one newly-pressed touchpoint.</db:para>
</db:section>
<db:section xml:id="isEndEvent">
<db:title>[override virtual] bool QTouchEvent::isEndEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEndEvent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEndEvent() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this event includes at least one newly-released touchpoint.</db:para>
</db:section>
<db:section xml:id="isUpdateEvent">
<db:title>[override virtual] bool QTouchEvent::isUpdateEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isUpdateEvent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isUpdateEvent() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this event does not include newly-pressed or newly-released touchpoints.</db:para>
</db:section>
<db:section xml:id="target">
<db:title>QObject *QTouchEvent::target() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>target</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * target() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the target object within the window on which the event occurred. This is typically a <db:link xlink:href="qwidget.xml">QWidget</db:link> or a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>. May be 0 when no specific target is available.</db:para>
</db:section>
<db:section xml:id="touchPointStates">
<db:title>QEventPoint::States QTouchEvent::touchPointStates() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QEventPoint::States</db:type>
<db:methodname>touchPointStates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventPoint::States touchPointStates() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a bitwise OR of all the touch point states for this event.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QTouchEvent</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QTouchEvent-2">
<db:title>[explicit] QTouchEvent::QTouchEvent(QEvent::Type <db:emphasis>eventType</db:emphasis>, const QPointingDevice *<db:emphasis>device</db:emphasis> = nullptr, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis> = Qt::NoModifier, const QList&lt;QEventPoint&gt; &amp;<db:emphasis>touchPoints</db:emphasis> = {})</db:title>
<db:constructorsynopsis>
<db:methodname>QTouchEvent</db:methodname>
<db:methodparam>
<db:type>QEvent::Type</db:type>
<db:parameter>eventType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointingDevice *</db:type>
<db:parameter>device</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::KeyboardModifiers</db:type>
<db:parameter>modifiers</db:parameter>
<db:initializer>Qt::NoModifier</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QEventPoint&gt; &amp;</db:type>
<db:parameter>touchPoints</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTouchEvent(QEvent::Type eventType, const QPointingDevice *device, Qt::KeyboardModifiers modifiers, const QList&lt;QEventPoint&gt; &amp;touchPoints)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use another constructor.</db:para>
<db:para>Constructs a <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> with the given <db:code role="parameter">eventType</db:code>, <db:code role="parameter">device</db:code>, <db:code role="parameter">touchPoints</db:code>, and current keyboard <db:code role="parameter">modifiers</db:code> at the time of the event.</db:para>
</db:section>
<db:section xml:id="QTouchEvent-3">
<db:title>[explicit] QTouchEvent::QTouchEvent(QEvent::Type <db:emphasis>eventType</db:emphasis>, const QPointingDevice *<db:emphasis>device</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, QEventPoint::States <db:emphasis>touchPointStates</db:emphasis>, const QList&lt;QEventPoint&gt; &amp;<db:emphasis>touchPoints</db:emphasis> = {})</db:title>
<db:constructorsynopsis>
<db:methodname>QTouchEvent</db:methodname>
<db:methodparam>
<db:type>QEvent::Type</db:type>
<db:parameter>eventType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointingDevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::KeyboardModifiers</db:type>
<db:parameter>modifiers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEventPoint::States</db:type>
<db:parameter>touchPointStates</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QEventPoint&gt; &amp;</db:type>
<db:parameter>touchPoints</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QTouchEvent(QEvent::Type eventType, const QPointingDevice *device, Qt::KeyboardModifiers modifiers, QEventPoint::States touchPointStates, const QList&lt;QEventPoint&gt; &amp;touchPoints)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use another constructor.</db:para>
<db:para>Constructs a <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> with the given <db:code role="parameter">eventType</db:code>, <db:code role="parameter">device</db:code>, and <db:code role="parameter">touchPoints</db:code>. The <db:code role="parameter">touchPointStates</db:code> and <db:code role="parameter">modifiers</db:code> are the current touch point states and keyboard modifiers at the time of the event.</db:para>
</db:section>
<db:section xml:id="touchPoints">
<db:title>const QList&lt;QEventPoint&gt; &amp;QTouchEvent::touchPoints() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QList&lt;QEventPoint&gt; &amp;</db:type>
<db:methodname>touchPoints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QList&lt;QEventPoint&gt; &amp; touchPoints() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qpointerevent.xml#points">points</db:link>() instead.</db:para>
<db:para>Returns a reference to the list of touch points contained in the touch event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointerevent.xml#point">QPointerEvent::point</db:link>()</db:member>
<db:member><db:link xlink:href="qpointerevent.xml#pointCount">QPointerEvent::pointCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
