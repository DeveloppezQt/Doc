<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics Units</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An explanation of how Qt Quick 3D Physics handles units and dimensions.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>When simulating physical objects you need to define a common frame of reference for all physical units. In Qt Quick 3D Physics all types are unit-less meaning you can define your world in centimeters, meters, inches or whatever you prefer as long as you are consistent. The important part is that all values used are based on the same units.</db:para>
<db:section xml:id="default-units">
<db:title>Default units</db:title>
<db:para>Despite the module being unit-less all physical properties have default values that are based on centimeters. This means that adding a sphere with diameter <db:code>1</db:code> would make it behave like it was <db:code>1</db:code> cm in diameter. To be compatible with Qt Quick 3D the default sizes of the built-in geometries are <db:code>100</db:code> cm. The default gravity is <db:code>981</db:code> which matches the gravity on earth in cm per square-second. The default density is <db:code>0.001</db:code> kilograms per cubic-centimeters i.e. <db:code>1000</db:code> kilogram per cubic-meter which is the density of fresh water at <db:code>4</db:code> Â°C.</db:para>
</db:section>
<db:section xml:id="custom-units">
<db:title>Custom units</db:title>
<db:para>Using custom units is possible but you need to make sure all relevant properties are updated accordingly. Below is a table showing the equivalent values of some properties in both a meter and a centimeter based scale:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Property</db:para>
</db:th>
<db:th>
<db:para>Value (cm)</db:para>
</db:th>
<db:th>
<db:para>Value (m)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml#gravity-prop">gravity</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>981</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>9.81</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml#typicalLength-prop">typicalLength</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>100</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>1</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml#typicalSpeed-prop">typicalSpeed</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>1000</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>10</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#density-prop">density</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>0.001</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>1000</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If converting from a centimeter to a meter based scale then all the positions and dimensions of objects as well as impulses and forces would need to be scaled by a factor of <db:code>0.01</db:code>.</db:para>
</db:section>
</db:article>
