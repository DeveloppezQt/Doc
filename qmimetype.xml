<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMimeType Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmimetype.xml">QMimeType</db:link> class describes types of file or data, represented by a MIME type string.</db:para>
<db:para>This class is <db:emphasis>equality-comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMimeType</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMimeType is part of <db:simplelist><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>For instance a file named &quot;readme.txt&quot; has the MIME type &quot;text/plain&quot;. The MIME type can be determined from the file name, or from the file contents, or from both. MIME type determination can also be done on buffers of data not coming from files.</db:para>
<db:para>Determining the MIME type of a file can be useful to make sure your application supports it. It is also useful in file-manager-like applications or widgets, in order to display an appropriate <db:link xlink:href="qmimetype.xml#iconName-prop">icon</db:link> for the file, or even the descriptive <db:link xlink:href="qmimetype.xml#comment-prop">comment</db:link> in detailed views.</db:para>
<db:para>To check if a file has the expected MIME type, you should use <db:link xlink:href="qmimetype.xml#inherits">inherits</db:link>() rather than a simple string comparison based on the <db:link xlink:href="qmimetype.xml#name-prop">name</db:link>(). This is because MIME types can inherit from each other: for instance a C source file is a specific type of plain text file, so text/x-csrc inherits text/plain.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link></db:member>
<db:member><db:link xlink:href="qtcore-mimetypes-mimetypebrowser-example.xml">MIME Type Browser</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="aliases-prop">
<db:title>[read-only] aliases : const QStringList</db:title>
<db:para>This property holds the list of aliases of this mimetype</db:para>
<db:para>For instance, for text/csv, the returned list would be: text/x-csv, text/x-comma-separated-values.</db:para>
<db:para>Note that all <db:link xlink:href="qmimetype.xml">QMimeType</db:link> instances refer to proper mimetypes, never to aliases directly.</db:para>
<db:para>The order of the aliases in the list is undefined.</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">aliases</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="allAncestors-prop">
<db:title>[read-only] allAncestors : const QStringList</db:title>
<db:para>This property holds the names of direct and indirect parent MIME types</db:para>
<db:para>Return all the parent mimetypes of this mimetype, direct and indirect. This includes the parent(s) of its parent(s), etc.</db:para>
<db:para>For instance, for image/svg+xml the list would be: application/xml, text/plain, application/octet-stream.</db:para>
<db:para>Note that application/octet-stream is the ultimate parent for all types of files (but not directories).</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">allAncestors</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="comment-prop">
<db:title>[read-only] comment : const QString</db:title>
<db:para>This property holds the description of the MIME type to be displayed on user interfaces</db:para>
<db:para>Returns a description for a MIME type, localized to the user's current language settings.</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">comment</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="filterString-prop">
<db:title>[read-only] filterString : const QString</db:title>
<db:para>This property holds a filter string usable for a file dialog</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">filterString</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="genericIconName-prop">
<db:title>[read-only] genericIconName : const QString</db:title>
<db:para>This property holds the file name of a generic icon that represents the MIME type</db:para>
<db:para>This should be used if the icon returned by <db:link xlink:href="qmimetype.xml#iconName-prop">iconName</db:link>() cannot be found on the system. It is used for categories of similar types (like spreadsheets or archives) that can use a common icon. The freedesktop.org Icon Naming Specification lists a set of such icon names.</db:para>
<db:para>The icon name can be given to QIcon::fromTheme() in order to load the icon.</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">genericIconName</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="globPatterns-prop">
<db:title>[read-only] globPatterns : const QStringList</db:title>
<db:para>This property holds the list of glob matching patterns</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">globPatterns</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="iconName-prop">
<db:title>[read-only] iconName : const QString</db:title>
<db:para>This property holds the file name of an icon image that represents the MIME type</db:para>
<db:para>The icon name can be given to QIcon::fromTheme() in order to load the icon.</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">iconName</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="isDefault-prop">
<db:title>[read-only] isDefault : const bool</db:title>
<db:para>true if this MIME type is the default MIME type which applies to all files: application/octet-stream.</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isDefault</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="name-prop">
<db:title>[read-only] name : const QString</db:title>
<db:para>This property holds the name of the MIME type</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">name</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="parentMimeTypes-prop">
<db:title>[read-only] parentMimeTypes : const QStringList</db:title>
<db:para>This property holds the names of parent MIME types</db:para>
<db:para>A type is a subclass of another type if any instance of the first type is also an instance of the second. For example, all image/svg+xml files are also text/xml, text/plain and application/octet-stream files. Subclassing is about the format, rather than the category of the data (for example, there is no 'generic spreadsheet' class that all spreadsheets inherit from). Conversely, the parent mimetype of image/svg+xml is text/xml.</db:para>
<db:para>A mimetype can have multiple parents. For instance application/x-perl has two parents: application/x-executable and text/plain. This makes it possible to both execute perl scripts, and to open them in text editors.</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">parentMimeTypes</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="preferredSuffix-prop">
<db:title>[read-only] preferredSuffix : const QString</db:title>
<db:para>This property holds the preferred suffix for the MIME type</db:para>
<db:para>No leading dot is included, so for instance this would return &quot;pdf&quot; for application/pdf. The return value can be empty, for mime types which do not have any suffixes associated.</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">preferredSuffix</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="suffixes-prop">
<db:title>[read-only] suffixes : const QStringList</db:title>
<db:para>This property holds the known suffixes for the MIME type</db:para>
<db:para>No leading dot is included, so for instance this would return &quot;jpg&quot;, &quot;jpeg&quot; for image/jpeg.</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">suffixes</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="valid-prop">
<db:title>[read-only] valid : const bool</db:title>
<db:para>true if the <db:link xlink:href="qmimetype.xml">QMimeType</db:link> object contains valid data, false otherwise</db:para>
<db:para>A valid MIME type has a non-empty <db:link xlink:href="qmimetype.xml#name-prop">name</db:link>(). The invalid MIME type is the default-constructed <db:link xlink:href="qmimetype.xml">QMimeType</db:link>.</db:para>
<db:para>While this property was introduced in 5.10, the corresponding accessor method has always been there.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isValid</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMimeType">
<db:title>QMimeType::QMimeType()</db:title>
<db:para>Constructs this <db:link xlink:href="qmimetype.xml">QMimeType</db:link> object initialized with default property values that indicate an invalid MIME type.</db:para>
</db:section>
<db:section xml:id="QMimeType-1">
<db:title>QMimeType::QMimeType(const QMimeType &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs this <db:link xlink:href="qmimetype.xml">QMimeType</db:link> object as a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMimeType">
<db:title>[noexcept] QMimeType::~QMimeType()</db:title>
<db:para>Destroys the <db:link xlink:href="qmimetype.xml">QMimeType</db:link> object, and releases the d pointer.</db:para>
</db:section>
<db:section xml:id="inherits">
<db:title>bool QMimeType::inherits(const QString &amp;<db:emphasis>mimeTypeName</db:emphasis>) const</db:title>
<db:para>Returns true if this mimetype is <db:code role="parameter">mimeTypeName</db:code>, or inherits <db:code role="parameter">mimeTypeName</db:code> (see <db:link xlink:href="qmimetype.xml#parentMimeTypes-prop">parentMimeTypes</db:link>()), or <db:code role="parameter">mimeTypeName</db:code> is an alias for this mimetype.</db:para>
<db:para>This method has been made invokable from QML since 5.10.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QMimeType::swap(QMimeType &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this mime type with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
<db:para>The swap() method helps with the implementation of assignment operators in an exception-safe way. For more information consult <db:link xlink:href="http://en.wikibooks.org/wiki/More_C++_Idioms/Copy-and-swap">More C++ Idioms - Copy-and-swap</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QMimeType &amp;QMimeType::operator=(QMimeType &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qmimetype.xml">QMimeType</db:link> instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QMimeType &amp;QMimeType::operator=(const QMimeType &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the data of <db:code role="parameter">other</db:code> to this <db:link xlink:href="qmimetype.xml">QMimeType</db:link> object, and returns a reference to this object.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash-22">
<db:title>[noexcept] size_t qHash(const QMimeType &amp;<db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QMimeType &amp;<db:emphasis>lhs</db:emphasis>, const QMimeType &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:link xlink:href="qmimetype.xml">QMimeType</db:link> <db:code role="parameter">lhs</db:code> is not equal to <db:link xlink:href="qmimetype.xml">QMimeType</db:link> <db:code role="parameter">rhs</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QMimeType &amp;<db:emphasis>lhs</db:emphasis>, const QMimeType &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> equals to the <db:code role="parameter">rhs</db:code> <db:link xlink:href="qmimetype.xml">QMimeType</db:link> object, otherwise returns false. The name is the unique identifier for a mimetype, so two mimetypes with the same name, are equal.</db:para>
</db:section>
</db:section>
</db:article>
