<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Localizing Applications</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="i18n-source-translation.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Writing Source Code for Translation"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="i18n-plural-rules.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Translation Rules for Plural Forms"/></db:extendedlink>
<db:abstract>
<db:para>Localizing Qt and Qt Quick apps into multiple languages.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The steps to localize applications include creating translatable applications, preparing them for translation, translating the strings, and creating runtime translation files for the released application.</db:para>
<db:para>Qt Quick and Qt C++ applications use the same underlying localization system: lupdate, lrelease, and the translation source (TS) files and QM files that they generate. You use the same tools for both QML and C++ code, as described in the <db:link xlink:href="qtlinguist-index.xml">Qt Linguist Manual</db:link>.</db:para>
<db:para>You can even have user interface strings in QML and C++ source files in the same application. The system will create a single combined translation file and the strings are accessible from QML and C++ code.</db:para>
<db:para>To localize internationalized applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="localization.xml#specify-translation-sources-in-qt-project-files">Specify Translation Sources in Qt Project Files</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="localization.xml#deploy-translations">Deploy Translations</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="localization.xml#use-qt-module-translations">Use Qt Module Translations</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="specify-translation-sources-in-qt-project-files">
<db:title>Specify Translation Sources in Qt Project Files</db:title>
<db:para>To enable lupdate and lrelease to generate TS and QM files, update the application project file to specify the source files that contain text to be translated.</db:para>
<db:para>Use ISO language and country codes in the TS file name to determine the language to load at runtime. For more information, see <db:link xlink:href="i18n-source-translation.xml#enable-translation">Enable Translation</db:link>.</db:para>
<db:para>The lupdate tool extracts user interface strings from your application. It expects all source code to be encoded in UTF-8 by default. For more information, see <db:link xlink:href="internationalization.xml#encoding">Encoding</db:link>.</db:para>
<db:section xml:id="using-cmake">
<db:title>Using CMake</db:title>
<db:para>Add the <db:link xlink:href="qtlinguist-cmake-qt-add-translations.xml">qt_add_translations</db:link> command to the CMakeLists.txt file to create targets for updating TS files and transforming them into QM files.</db:para>
</db:section>
<db:section xml:id="using-qmake">
<db:title>Using qmake</db:title>
<db:para>When using qmake, set a conditional statement to hide the QML source from the compiler that you list in the SOURCES or HEADERS entry in the .pro file.</db:para>
<db:para>The SOURCES variable is intended for C++ source files. If you list QML or JavaScript source files there, the compiler tries to build them as though they are C++ files. As a workaround, you can use an lupdate_only{...} conditional statement so the lupdate tool sees the .qml files but the C++ compiler ignores them.</db:para>
<db:para>For example, the following .pro file snippet specifies two .qml files in the application.</db:para>
<db:programlisting language="cpp">lupdate_only{
SOURCES = main.qml \
          MainPage.qml
}
</db:programlisting>
<db:para>You can also specify the .qml source files with a wildcard match. The search is not recursive, so you need to specify each directory that contains source files that contain UI strings:</db:para>
<db:programlisting language="cpp">lupdate_only{
SOURCES = *.qml \
          *.js \
          content/*.qml \
          content/*.js
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="deploy-translations">
<db:title>Deploy Translations</db:title>
<db:para>Place the .qm files required for the application in a location where the loader code using <db:link xlink:href="qtranslator.xml">QTranslator</db:link> can find them. Typically, you specify a path relative to <db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>().</db:para>
<db:para>In addition to the application's QM files, you need to deploy the QM files for the Qt modules that you use in the application, unless they are installed on the system.</db:para>
<db:para>The QM files are split up by module and there is a so-called meta catalog file which includes the QM files of all modules. However, you only need to deploy the QM files for the modules that you use in the application.</db:para>
<db:para>You can use the lconvert tool in the deploy step to concatenate the required QM files into one file that matches the meta catalog file. For example, to create a German translation file for an application that uses the <db:link xlink:href="qtcore-index.xml">Qt Core</db:link>, <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link>, and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> modules, run:</db:para>
<db:programlisting language="cpp">lconvert -o installation_folder/qt_de.qm qtbase_de.qm qtdeclarative_de.qm
</db:programlisting>
</db:section>
<db:section xml:id="use-qt-module-translations">
<db:title>Use Qt Module Translations</db:title>
<db:anchor xml:id="qt-itself"/>
<db:para>Qt modules contain several thousands of strings that also need to be translated into the languages that you are targeting. You can find a number of TS files in the <db:link xlink:href="https://code.qt.io/cgit/qt/qttranslations.git/">qttranslations</db:link> repository. Before you start translating Qt, read the wiki page <db:link xlink:href="http://wiki.qt.io/Qt_Localization">Translating Qt Into Other Languages</db:link>.</db:para>
<db:section xml:id="locating-qt-translations">
<db:title>Locating Qt Translations</db:title>
<db:para>You can use <db:link xlink:href="qlibraryinfo.xml#path">QLibraryInfo::path</db:link>() to locate the translations for the Qt modules that your application uses. You can request the path to the translations at run-time by passing <db:link xlink:href="qlibraryinfo.xml#LibraryPath-enum">QLibraryInfo::TranslationsPath</db:link> to this function.</db:para>
</db:section>
<db:section xml:id="available-catalogs">
<db:title>Available Catalogs</db:title>
<db:para>The Qt translation catalogs are located in the qttranslations repository.</db:para>
<db:warning>
<db:para>Qt translations are contributed by the Qt community, and provided without any guarantees. Translations might be missing, outdated, or entirely incorrect, up to the point of being malicious. It is recommended that you audit any translations you ship.</db:para>
</db:warning>
<db:para>In Qt 4, there is one big, monolithic .qm file per locale. For example, the file qt_de.qm contains the German translation of all libraries.</db:para>
<db:para>The qt_ meta catalog contains the still-existing Qt translations that were included in the qt_ catalog in Qt 4. It was created to make porting applications from Qt 4 to Qt 5 easier. The meta catalog depends on translations that might be absent, because they belong to unnecessary or deprecated modules, which might cause the loading of the translations to fail. If you use modules that are new in Qt 5 or later in your application, you must specify the names of the catalogs for those modules even if you use the meta catalog.</db:para>
<db:para>The following table lists the translation catalogs available for the Qt modules and tools in Qt.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt Module or Tool</db:para>
</db:th>
<db:th>
<db:para>Catalog</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtbluetooth-index.xml">Qt Bluetooth</db:link></db:para>
</db:td>
<db:td>
<db:para>qtconnectivity</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link></db:para>
</db:td>
<db:td>
<db:para>qtbase</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtcore-index.xml">Qt Core</db:link></db:para>
</db:td>
<db:td>
<db:para>qtbase</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtdbus-index.xml">Qt D-Bus</db:link></db:para>
</db:td>
<db:td>
<db:para>qtbase</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtdesigner-index.xml">Qt Designer</db:link></db:para>
</db:td>
<db:td>
<db:para>designer</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtgui-index.xml">Qt GUI</db:link></db:para>
</db:td>
<db:td>
<db:para>qtbase</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qthelp-index.xml">Qt Help</db:link></db:para>
</db:td>
<db:td>
<db:para>qt_help</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtlinguist-index.xml">Qt Linguist</db:link></db:para>
</db:td>
<db:td>
<db:para>linguist</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtlocation-index.xml">Qt Location</db:link></db:para>
</db:td>
<db:td>
<db:para>qtlocation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtmultimedia-index.xml">Qt Multimedia</db:link></db:para>
</db:td>
<db:td>
<db:para>qtmultimedia</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link></db:para>
</db:td>
<db:td>
<db:para>qtbase</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtnfc-index.xml">Qt NFC</db:link></db:para>
</db:td>
<db:td>
<db:para>qtconnectivity</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtprintsupport-index.xml">Qt Print Support</db:link></db:para>
</db:td>
<db:td>
<db:para>qtbase</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtqml-index.xml">Qt QML</db:link></db:para>
</db:td>
<db:td>
<db:para>qtdeclarative</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtquick-index.xml">Qt Quick</db:link></db:para>
</db:td>
<db:td>
<db:para>qtdeclarative</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link></db:para>
</db:td>
<db:td>
<db:para>qtdeclarative</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtquickwidgets-index.xml">Qt Quick Widgets</db:link></db:para>
</db:td>
<db:td>
<db:para>qtdeclarative</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtserialport-index.xml">Qt Serial Port</db:link></db:para>
</db:td>
<db:td>
<db:para>qtserialport</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsql-index.xml">Qt SQL</db:link></db:para>
</db:td>
<db:td>
<db:para>qtbase</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link></db:para>
</db:td>
<db:td>
<db:para>qtbase</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtwebsockets-index.xml">Qt WebSockets</db:link></db:para>
</db:td>
<db:td>
<db:para>qtsockets</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtwebengine-index.xml">Qt WebEngine</db:link></db:para>
</db:td>
<db:td>
<db:para>qtwebengine</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="example-essential-qt-modules">
<db:title>Example: Essential Qt Modules</db:title>
<db:para>For example, to locate translations for essential Qt modules, such as Qt Core, Qt GUI, Qt Network, and Qt Widgets, add the following code to the main() function:</db:para>
<db:programlisting language="cpp">    QTranslator qtTranslator;
    if (qtTranslator.load(QLocale::system(), u&quot;qtbase&quot;_s, u&quot;_&quot;_s,
                          QLibraryInfo::path(QLibraryInfo::TranslationsPath))) {
        app.installTranslator(&amp;amp;qtTranslator);
    }
</db:programlisting>
</db:section>
</db:section>
</db:article>
