<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRotationReading Class</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qrotationreading.xml">QRotationReading</db:link> class represents one reading from the rotation sensor.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRotationReading</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sensors</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsensorreading.xml" xlink:role="class">QSensorReading</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRotationReading is part of <db:simplelist><db:member>sensors_reading</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="qrotationreading-units">
<db:title>QRotationReading Units</db:title>
<db:para>The rotation reading contains 3 angles, measured in degrees that define the orientation of the device in three-dimensional space. These angles are similar to yaw, pitch and roll but are defined using only right hand rotation with axes as defined by the right hand cartesian coordinate system.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensors-rotation.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The three angles are applied to the device in the following order.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Right-handed rotation z (-180, 180]. Starting from the y-axis and incrementing in the counter-clockwise direction.</db:para>
</db:listitem>
<db:listitem>
<db:para>Right-handed rotation x [-90, 90]. Starting from the new (once-rotated) y-axis and incrementing towards the z-axis.</db:para>
</db:listitem>
<db:listitem>
<db:para>Right-handed rotation y (-180, 180]. Starting from the new (twice-rotated) z-axis and incrementing towards the x-axis.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Here is a visualization showing the order in which angles are applied.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensors-rotation-anim.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>The 0 point for the z angle is defined as a fixed, external entity and is device-specific. While magnetic North is typically used as this reference point it may not be. Do not attempt to compare values for the z angle between devices or even on the same device if it has moved a significant distance.</db:para>
<db:para>If the device cannot detect a fixed, external entity the z angle will always be 0 and the <db:link xlink:href="qrotationsensor.xml#hasZ-prop">QRotationSensor::hasZ</db:link> property will be set to false.</db:para>
<db:para>The 0 point for the x and y angles are defined as when the x and y axes of the device are oriented towards the horizon. Here is an example of how the x value will change with device movement.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensors-rotation2.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here is an example of how the y value will change with device movement.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensors-rotation3.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Note that when x is 90 or -90, values for z and y achieve rotation around the same axis (due to the order of operations). In this case the y rotation will be 0.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="x-prop">
<db:title>[read-only] x : const qreal</db:title>
<db:para>This property holds the rotation around the x axis.</db:para>
<db:para>Measured as degrees.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">x</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrotationreading.xml#qrotationreading-units">QRotationReading Units</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y-prop">
<db:title>[read-only] y : const qreal</db:title>
<db:para>This property holds the rotation around the y axis.</db:para>
<db:para>Measured as degrees.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">y</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrotationreading.xml#qrotationreading-units">QRotationReading Units</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="z-prop">
<db:title>[read-only] z : const qreal</db:title>
<db:para>This property holds the rotation around the z axis.</db:para>
<db:para>Measured as degrees.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">z</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrotationreading.xml#qrotationreading-units">QRotationReading Units</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="setFromEuler">
<db:title>[since 5.0] void QRotationReading::setFromEuler(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Sets the rotation from three euler angles.</db:para>
<db:para>This is to be called from the backend.</db:para>
<db:para>The angles are measured in degrees. The order of the rotations matters, as first the <db:code role="parameter">z</db:code> rotation is applied, then the <db:code role="parameter">x</db:code> rotation and finally the <db:code role="parameter">y</db:code> rotation.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
</db:section>
</db:article>
