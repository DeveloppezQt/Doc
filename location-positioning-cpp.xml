<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Positioning (C++)</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Location Positioning API enables location positioning by means of GPS or an NMEA data source.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="positioning">
<db:title>Positioning</db:title>
<db:para>The Positioning component of the Qt Location API is about the geographical position, size, and address of some place. Positioning contains a <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> class, containing latitude, longitude and altitude in meters. <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> contains a <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> plus address and size information (a bounding box) so that positions can be more than mathematical points. Movement into or out of the defined bounding box areas can be monitored. The API also allows the developer to control the source of the positional information as well.</db:para>
<db:para>Location data involves a precisely specified position on the Earth's surface — as provided by a latitude-longitude coordinate — along with associated data, such as:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The date and time at which the position was reported</db:para>
</db:listitem>
<db:listitem>
<db:para>The velocity of the device that reported the position</db:para>
</db:listitem>
<db:listitem>
<db:para>The altitude of the reported position (height above sea level)</db:para>
</db:listitem>
<db:listitem>
<db:para>The bearing of the device in degrees, relative to true north</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This data can be extracted through a variety of methods. One of the most well known methods of positioning is GPS (Global Positioning System), a publicly available system that uses radiowave signals received from Earth-orbiting satellites to calculate the precise position and time of the receiver. Another popular method is 'Cell Identifier Positioning', which uses the cell identifier of the cell site that is currently serving the receiving device to calculate its approximate location. These and other positioning methods can all be used with the Location API; the only requirement for a location data source within the API is that it provides a latitude-longitude coordinate with a date/time value, with the option of providing the other attributes listed above.</db:para>
<db:para>Location data sources are created by subclassing <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> and providing <db:link xlink:href="qgeopositioninfo.xml">QGeoPositionInfo</db:link> objects through the <db:link xlink:href="qgeopositioninfosource.xml#positionUpdated">QGeoPositionInfoSource::positionUpdated</db:link>() signal. Clients that require location data can connect to the <db:link xlink:href="qgeopositioninfosource.xml#positionUpdated">positionUpdated</db:link>() signal and call <db:link xlink:href="qgeopositioninfosource.xml#startUpdates">startUpdates</db:link>() or <db:link xlink:href="qgeopositioninfosource.xml#requestUpdate">requestUpdate</db:link>() to trigger the distribution of location data. The location data distribution can be stopped by calling the <db:link xlink:href="qgeopositioninfosource.xml#stopUpdates">stopUpdates</db:link>() function.</db:para>
<db:para>A default position source may be available on some platforms. Call <db:link xlink:href="qgeopositioninfosource.xml#createDefaultSource">QGeoPositionInfoSource::createDefaultSource</db:link>() to create an instance of the default position source. The method returns <db:code>nullptr</db:code> if no default source is available for the platform.</db:para>
<db:para>If a problem occurs with access to the information source then an <db:link xlink:href="qgeopositioninfosource.xml#errorOccurred">errorOccurred</db:link>() signal is emitted.</db:para>
<db:para>The <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> class enables client applications to be notified when the receiving device has moved into or out of a particular area, as specified by a coordinate and radius. If the platform provides built-in support for area monitoring, the <db:link xlink:href="qgeoareamonitorsource.xml#createDefaultSource">QGeoAreaMonitorSource::createDefaultSource</db:link>() method returns an instance of the default area monitor.</db:para>
<db:para>Satellite information can also be distributed through the <db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link> class. Call <db:link xlink:href="qgeosatelliteinfosource.xml#createDefaultSource">QGeoSatelliteInfoSource::createDefaultSource</db:link>() to create an instance of the default satellite data source for the platform if one is available. Alternatively, clients can subclass it to provide a custom satellite data source.</db:para>
<db:section xml:id="requesting-location-data-from-data-sources">
<db:title>Requesting Location Data from Data Sources</db:title>
<db:para>To receive data from a source, connect to its <db:link xlink:href="qgeopositioninfosource.xml#positionUpdated">positionUpdated</db:link>() signal, then call either <db:link xlink:href="qgeopositioninfosource.xml#startUpdates">startUpdates</db:link>() or <db:link xlink:href="qgeopositioninfosource.xml#requestUpdate">requestUpdate</db:link>() to begin.</db:para>
<db:para>Here is an example of a client that receives data from the default location data source, as returned by <db:link xlink:href="qgeopositioninfosource.xml#createDefaultSource">QGeoPositionInfoSource::createDefaultSource</db:link>():</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT
public:
    MyClass(QObject *parent = 0)
        : QObject(parent)
    {
        QGeoPositionInfoSource *source = QGeoPositionInfoSource::createDefaultSource(this);
        if (source) {
            connect(source, SIGNAL(positionUpdated(QGeoPositionInfo)),
                    this, SLOT(positionUpdated(QGeoPositionInfo)));
            source-&amp;gt;startUpdates();
        }
    }

private slots:
    void positionUpdated(const QGeoPositionInfo &amp;amp;info)
    {
        qDebug() &amp;lt;&amp;lt; &quot;Position updated:&quot; &amp;lt;&amp;lt; info;
    }
};
</db:programlisting>
</db:section>
<db:section xml:id="controlling-aspects-of-data-sources">
<db:title>Controlling Aspects of Data Sources</db:title>
<db:para>The <db:link xlink:href="qgeopositioninfosource.xml#updateInterval-prop">QGeoPositionInfoSource::setUpdateInterval</db:link>() method can be used to control the rate at which position updates are received. For example, if the client application only requires updates once every 30 seconds, it can call <db:code>setUpdateInterval(30000)</db:code>. If no update interval is set, or <db:link xlink:href="qgeopositioninfosource.xml#updateInterval-prop">setUpdateInterval</db:link>() is called with a value of 0, the source uses a default interval or some other internal logic to determine when updates should be provided.</db:para>
<db:para><db:link xlink:href="qgeopositioninfosource.xml#preferredPositioningMethods-prop">QGeoPositionInfoSource::setPreferredPositioningMethods</db:link>() enables client applications to request that a certain type of positioning method be used. For example, if the application prefers to use only satellite positioning, which offers fairly precise outdoor positioning but can be a heavy user of power resources, it can call this method with the <db:link xlink:href="qgeopositioninfosource.xml#PositioningMethod-enum">QGeoPositionInfoSource::SatellitePositioningMethods</db:link> value. However, this method should only be used in specialized client applications; in most cases, the default positioning methods should not be changed, as a source may internally use a variety of positioning methods that can be useful to the application.</db:para>
</db:section>
<db:section xml:id="nmea-data">
<db:title>NMEA Data</db:title>
<db:para><db:link xlink:href="http://en.wikipedia.org/wiki/NMEA_0183">NMEA</db:link> is a common text-based protocol for specifying navigational data. For convenience, the <db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link> is provided to enable client applications to read and distribute NMEA data in either real-time mode (for example, when streaming from a GPS device) or simulation mode (for example, when reading from a NMEA log file). In simulation mode, the source will emit updates according to the time stamp of each NMEA sentence to produce a &quot;replay&quot; of the recorded data.</db:para>
<db:para>Generally, the capabilities provided by the default position source as returned by <db:link xlink:href="qgeopositioninfosource.xml#createDefaultSource">QGeoPositionInfoSource::createDefaultSource</db:link>(), along with the <db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link> class, are sufficient for retrieving location data. However, in some cases developers may wish to write their own custom location data source.</db:para>
<db:para>The <db:link xlink:href="qtpositioning-logfilepositionsource-example.xml">Log File Position Source (C++)</db:link> example demonstrates how to subclass <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> to create a custom positioning source.</db:para>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:section xml:id="log-file-position-source-example">
<db:title><db:emphasis role="bold">Log File Position Source Example</db:emphasis></db:title>
<db:para>The <db:link xlink:href="qtpositioning-logfilepositionsource-example.xml">Log File Position Source</db:link> Example demonstrates how to subclass <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> to create a custom positioning source.</db:para>
</db:section>
<db:section xml:id="weather-info-example">
<db:title><db:emphasis role="bold">Weather Info Example</db:emphasis></db:title>
<db:para>The <db:link xlink:href="qtpositioning-weatherinfo-example.xml">Weather Info</db:link> example shows how to use the user's current position to retrieve local content from a web service in a C++ plugin for QML.</db:para>
</db:section>
</db:section>
<db:section xml:id="positioning-classes">
<db:title>Positioning Classes</db:title>
<db:variablelist role="QtPositioning-positioning">
<db:varlistentry>
<db:term><db:link xlink:href="qgeoaddress.xml" xlink:role="class">QGeoAddress</db:link></db:term>
<db:listitem>
<db:para>The QGeoAddress class represents an address of a QGeoLocation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeoareamonitorinfo.xml" xlink:role="class">QGeoAreaMonitorInfo</db:link></db:term>
<db:listitem>
<db:para>The QGeoAreaMonitorInfo class describes the parameters of an area or region to be monitored for proximity.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeoareamonitorsource.xml" xlink:role="class">QGeoAreaMonitorSource</db:link></db:term>
<db:listitem>
<db:para>The QGeoAreaMonitorSource class enables the detection of proximity changes for a specified set of coordinates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeocircle.xml" xlink:role="class">QGeoCircle</db:link></db:term>
<db:listitem>
<db:para>The QGeoCircle class defines a circular geographic area.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeocoordinate.xml" xlink:role="class">QGeoCoordinate</db:link></db:term>
<db:listitem>
<db:para>The QGeoCoordinate class defines a geographical position on the surface of the Earth.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeolocation.xml" xlink:role="class">QGeoLocation</db:link></db:term>
<db:listitem>
<db:para>The QGeoLocation class represents basic information about a location.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeopath.xml" xlink:role="class">QGeoPath</db:link></db:term>
<db:listitem>
<db:para>The QGeoPath class defines a geographic path.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeopolygon.xml" xlink:role="class">QGeoPolygon</db:link></db:term>
<db:listitem>
<db:para>The QGeoPolygon class defines a geographic polygon.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeopositioninfo.xml" xlink:role="class">QGeoPositionInfo</db:link></db:term>
<db:listitem>
<db:para>The QGeoPositionInfo class contains information gathered on a global position, direction and velocity at a particular point in time.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeopositioninfosource.xml" xlink:role="class">QGeoPositionInfoSource</db:link></db:term>
<db:listitem>
<db:para>The QGeoPositionInfoSource class is an abstract base class for the distribution of positional updates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeorectangle.xml" xlink:role="class">QGeoRectangle</db:link></db:term>
<db:listitem>
<db:para>The QGeoRectangle class defines a rectangular geographic area.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeosatelliteinfo.xml" xlink:role="class">QGeoSatelliteInfo</db:link></db:term>
<db:listitem>
<db:para>The QGeoSatelliteInfo class contains basic information about a satellite.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeosatelliteinfosource.xml" xlink:role="class">QGeoSatelliteInfoSource</db:link></db:term>
<db:listitem>
<db:para>The QGeoSatelliteInfoSource class is an abstract base class for the distribution of satellite information updates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeoshape.xml" xlink:role="class">QGeoShape</db:link></db:term>
<db:listitem>
<db:para>The QGeoShape class defines a geographic area.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnmeapositioninfosource.xml" xlink:role="class">QNmeaPositionInfoSource</db:link></db:term>
<db:listitem>
<db:para>The QNmeaPositionInfoSource class provides positional information using a NMEA data source.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnmeasatelliteinfosource.xml" xlink:role="class">QNmeaSatelliteInfoSource</db:link></db:term>
<db:listitem>
<db:para>The QNmeaSatelliteInfoSource class provides satellite information using an NMEA data source.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
