<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ModelBlendParticle3D QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Blends particle effect with a 3D model.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D.Particles3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Particle3D</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The type provides a way to blend particle effect with a 3D model. The provided model needs to be triangle-based. Each triangle in the model is converted into a particle, which are then used by the emitter. Instead of particle shader, the model is shaded using the <db:link xlink:href="qml-qtquick3d-model.xml#materials-prop">material</db:link> specified in the model. The way the effect is blended is determined by the <db:link xlink:href="qml-qtquick3d-particles3d-modelblendparticle3d.xml#modelBlendMode-prop">modelBlendMode</db:link>.</db:para>
<db:para>The possible modes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Construct</db:emphasis>, where the model gets constructed from the particles.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Explode</db:emphasis>, where the model gets converted into particles.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Transfer</db:emphasis>, where Construct and Explode are combined to create an effect where the model is transferred from one place to another.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By default the particles are emitted in the order they are specified in the model unless <db:link xlink:href="qml-qtquick3d-particles3d-modelblendparticle3d.xml#emitMode-prop">emitMode</db:link> is set to <db:code>Random</db:code> or <db:link xlink:href="qml-qtquick3d-particles3d-modelblendparticle3d.xml#emitMode-prop">emitMode</db:link> is set to <db:code>Activation</db:code> and <db:link xlink:href="qml-qtquick3d-particles3d-modelblendparticle3d.xml#activationNode-prop">activationNode</db:link> is set.</db:para>
<db:para>Some features defined in base class and emitters are not functional with this type:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-particles3d-particle3d.xml#alignMode-prop">Particle3D::alignMode</db:link> is not functional since the particles can be in arbitrary orientation in the model.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-particles3d-particle3d.xml#sortMode-prop">Particle3D::sortMode</db:link> is not functional since the particles are always rendered in the order the primitives are specified in the model.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-particles3d-particleemitter3d.xml#depthBias-prop">ParticleEmitter3D::depthBias</db:link> is not functional since the model depth bias is used instead.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>The default <db:link xlink:href="qml-qtquick3d-particles3d-particle3d.xml#fadeInEffect-prop">fadeInEffect</db:link> and <db:link xlink:href="qml-qtquick3d-particles3d-particle3d.xml#fadeInEffect-prop">fadeOutEffect</db:link> are <db:code>Particle3D.FadeNone</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="ModelBlendEmitMode-prop">
<db:title>ModelBlendEmitMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>ModelBlendEmitMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the emit mode of the particles</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ModelBlendParticle3D.Sequential</db:para>
</db:td>
<db:td>
<db:para>The particles are emitted in the order they are defined in the model.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ModelBlendParticle3D.Random</db:para>
</db:td>
<db:td>
<db:para>The particles are emitted in random order.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ModelBlendParticle3D.Activation</db:para>
</db:td>
<db:td>
<db:para>The particles are emitted when they are activated by the <db:link xlink:href="qml-qtquick3d-particles3d-modelblendparticle3d.xml#activationNode-prop">activationNode</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ModelBlendMode-propx">
<db:title>ModelBlendMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>ModelBlendMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the blending mode for the particle effect.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ModelBlendParticle3D.Explode</db:para>
</db:td>
<db:td>
<db:para>The model gets exploded i.e. the particles are emitted from the position of the model.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ModelBlendParticle3D.Construct</db:para>
</db:td>
<db:td>
<db:para>The model gets constructed i.e the particles fly from the emitter and construct the model at the end.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ModelBlendParticle3D.Transfer</db:para>
</db:td>
<db:td>
<db:para>Combines Explode and Transfer for the same model.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="activationNode-prop">
<db:title>activationNode : Node</db:title>
<db:fieldsynopsis>
<db:type>Node</db:type>
<db:varname>activationNode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a node that activates particles and overrides the reqular emit routine. The activation node can be used to control how the particles are emitted spatially when the model is exploded/constructed from the particles. The activation node emits a particle if the center of that particle is on the positive half of the z-axis of the activation node. Animating the activation node to move trough the model will cause the particles to be emitted sequentially along the path the activation node moves.</db:para>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>delegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The delegate provides a template defining the model for the <db:link xlink:href="qml-qtquick3d-particles3d-modelblendparticle3d.xml">ModelBlendParticle3D</db:link>.</db:para>
<db:para>For example, using the default sphere model with default material</db:para>
<db:programlisting language="qml">Component {
    id: modelComponent
    Model {
        source: &quot;#Sphere&quot;
        scale: Qt.vector3d(0.5, 0.5, 0.5)
        materials: DefaultMaterial { diffuseColor: &quot;red&quot; }
    }
}

ModelBlendParticle3D {
    id: particleRedSphere
    delegate: modelComponent
}
</db:programlisting>
</db:section>
<db:section xml:id="emitMode-prop">
<db:title>emitMode : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>emitMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the emit mode of the particles.</db:para>
</db:section>
<db:section xml:id="endNode-prop">
<db:title>endNode : Node</db:title>
<db:fieldsynopsis>
<db:type>Node</db:type>
<db:varname>endNode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the node that specifies the transformation for the model at the end of particle effect. It defines the size, position and rotation where the model is constructed when using the <db:code>ModelBlendParticle3D.Construct</db:code> and <db:code>ModelBlendParticle3D.Transfer</db:code> blend modes.</db:para>
</db:section>
<db:section xml:id="endTime-prop">
<db:title>endTime : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>endTime</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the end time of the particle in milliseconds. The end time is used during construction and defines duration from particle lifetime at the end where the effect is blended with the model positions. Before the end time the particles positions are defined only by the particle effect, but during end time the particle position is blended linearly with the model end position.</db:para>
</db:section>
<db:section xml:id="modelBlendMode-prop">
<db:title>modelBlendMode : ModelBlendMode</db:title>
<db:fieldsynopsis>
<db:type>ModelBlendMode</db:type>
<db:varname>modelBlendMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds blending mode for the particle effect.</db:para>
</db:section>
</db:section>
</db:article>
