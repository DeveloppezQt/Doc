<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QToolBar Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> class provides a movable panel that contains a set of controls.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QToolBar</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QToolBar is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Toolbar buttons are added by adding <db:emphasis>actions</db:emphasis>, using <db:link xlink:href="qtoolbar.xml#addAction">addAction</db:link>() or <db:link xlink:href="qwidget.xml#insertAction">insertAction</db:link>(). Groups of buttons can be separated using <db:link xlink:href="qtoolbar.xml#addSeparator">addSeparator</db:link>() or <db:link xlink:href="qtoolbar.xml#insertSeparator">insertSeparator</db:link>(). If a toolbar button is not appropriate, a widget can be inserted instead using <db:link xlink:href="qtoolbar.xml#addWidget">addWidget</db:link>() or <db:link xlink:href="qtoolbar.xml#insertWidget">insertWidget</db:link>(). Examples of suitable widgets are <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>, <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link>, and <db:link xlink:href="qcombobox.xml">QComboBox</db:link>. When a toolbar button is pressed, it emits the <db:link xlink:href="qtoolbar.xml#actionTriggered">actionTriggered</db:link>() signal.</db:para>
<db:para>A toolbar can be fixed in place in a particular area (e.g., at the top of the window), or it can be movable between toolbar areas; see <db:link xlink:href="qtoolbar.xml#movable-prop">setMovable</db:link>(), <db:link xlink:href="qtoolbar.xml#movable-prop">isMovable</db:link>(), <db:link xlink:href="qtoolbar.xml#allowedAreas-prop">allowedAreas</db:link>() and <db:link xlink:href="qtoolbar.xml#isAreaAllowed">isAreaAllowed</db:link>().</db:para>
<db:para>When a toolbar is resized in such a way that it is too small to show all the items it contains, an extension button will appear as the last item in the toolbar. Pressing the extension button will pop up a menu containing the items that do not currently fit in the toolbar.</db:para>
<db:para>When a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> is not a child of a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>, it loses the ability to populate the extension pop up with widgets added to the toolbar using <db:link xlink:href="qtoolbar.xml#addWidget">addWidget</db:link>(). Please use widget actions created by inheriting <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link> and implementing <db:link xlink:href="qwidgetaction.xml#createWidget">QWidgetAction::createWidget</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbutton.xml">QToolButton</db:link></db:member>
<db:member><db:link xlink:href="qmenu.xml">QMenu</db:link></db:member>
<db:member><db:link xlink:href="qaction.xml">QAction</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="allowedAreas-prop">
<db:title>allowedAreas : Qt::ToolBarAreas</db:title>
<db:para>areas where the toolbar may be placed</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#ToolBarArea-enum">Qt::AllToolBarAreas</db:link>.</db:para>
<db:para>This property only makes sense if the toolbar is in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ToolBarArea-enum">Qt::ToolBarAreas</db:link></db:type> <db:emphasis role="bold">allowedAreas</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAllowedAreas</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ToolBarArea-enum">Qt::ToolBarAreas</db:link></db:type> <db:emphasis>areas</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#movable-prop">movable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="floatable-prop">
<db:title>floatable : bool</db:title>
<db:para>This property holds whether the toolbar can be dragged and dropped as an independent window.</db:para>
<db:para>The default is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isFloatable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFloatable</db:emphasis>(<db:type>bool</db:type> <db:emphasis>floatable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="floating-prop">
<db:title>[read-only] floating : const bool</db:title>
<db:para>This property holds whether the toolbar is an independent window.</db:para>
<db:para>By default, this property is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isFloating</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#isWindow">QWidget::isWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconSize-prop">
<db:title>iconSize : QSize</db:title>
<db:para>size of icons in the toolbar.</db:para>
<db:para>The default size is determined by the application's style and is derived from the <db:link xlink:href="qstyle.xml#PixelMetric-enum">QStyle::PM_ToolBarIconSize</db:link> pixel metric. It is the maximum size an icon can have. Icons of smaller size will not be scaled up.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">iconSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIconSize</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>iconSize</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtoolbar.xml#iconSizeChanged">iconSizeChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>iconSize</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="movable-prop">
<db:title>movable : bool</db:title>
<db:para>This property holds whether the user can move the toolbar within the toolbar area, or between toolbar areas.</db:para>
<db:para>By default, this property is true.</db:para>
<db:para>This property only makes sense if the toolbar is in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isMovable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMovable</db:emphasis>(<db:type>bool</db:type> <db:emphasis>movable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#allowedAreas-prop">allowedAreas</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>orientation : Qt::Orientation</db:title>
<db:para>orientation of the toolbar</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link>.</db:para>
<db:para>This function should not be used when the toolbar is managed by <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>. You can use <db:link xlink:href="qmainwindow.xml#addToolBar">QMainWindow::addToolBar</db:link>() or <db:link xlink:href="qmainwindow.xml#insertToolBar">QMainWindow::insertToolBar</db:link>() if you wish to move a toolbar that is already added to a main window to another <db:link xlink:href="qt.xml#ToolBarArea-enum">Qt::ToolBarArea</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link></db:type> <db:emphasis role="bold">orientation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOrientation</db:emphasis>(<db:type><db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link></db:type> <db:emphasis>orientation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="toolButtonStyle-prop">
<db:title>toolButtonStyle : Qt::ToolButtonStyle</db:title>
<db:para>This property holds the style of toolbar buttons</db:para>
<db:para>This property defines the style of all tool buttons that are added as <db:link xlink:href="qaction.xml">QAction</db:link>s. Note that if you add a <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> with the <db:link xlink:href="qtoolbar.xml#addWidget">addWidget</db:link>() method, it will not get this button style.</db:para>
<db:para>To have the style of toolbuttons follow the system settings, set this property to <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonFollowStyle</db:link>. On Unix, the user settings from the desktop environment will be used. On other platforms, <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonFollowStyle</db:link> means icon only.</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonIconOnly</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonStyle</db:link></db:type> <db:emphasis role="bold">toolButtonStyle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setToolButtonStyle</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonStyle</db:link></db:type> <db:emphasis>toolButtonStyle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtoolbar.xml#toolButtonStyleChanged">toolButtonStyleChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonStyle</db:link></db:type> <db:emphasis>toolButtonStyle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QToolBar">
<db:title>[explicit] QToolBar::QToolBar(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QToolBar-1">
<db:title>[explicit] QToolBar::QToolBar(const QString &amp;<db:emphasis>title</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The given window <db:code role="parameter">title</db:code> identifies the toolbar and is shown in the context menu provided by <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#windowTitle-prop">setWindowTitle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QToolBar">
<db:title>[virtual noexcept] QToolBar::~QToolBar()</db:title>
<db:para>Destroys the toolbar.</db:para>
</db:section>
<db:section xml:id="actionAt">
<db:title>QAction *QToolBar::actionAt(const QPoint &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns the action at point <db:code role="parameter">p</db:code>. This function returns zero if no action was found.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#childAt">QWidget::childAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="actionAt-1">
<db:title>QAction *QToolBar::actionAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the action at the point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>. This function returns zero if no action was found.</db:para>
</db:section>
<db:section xml:id="actionEvent">
<db:title>[override virtual protected] void QToolBar::actionEvent(QActionEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#actionEvent" role="function">QWidget::actionEvent(QActionEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="actionTriggered">
<db:title>void QToolBar::actionTriggered(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>This signal is emitted when an action in this toolbar is triggered. This happens when the action's tool button is pressed, or when the action is triggered in some other way outside the toolbar. The parameter holds the triggered <db:code role="parameter">action</db:code>.</db:para>
</db:section>
<db:section xml:id="addAction">
<db:title>QAction *QToolBar::addAction(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new action with the given <db:code role="parameter">text</db:code>. This action is added to the end of the toolbar.</db:para>
</db:section>
<db:section xml:id="addAction-1">
<db:title>QAction *QToolBar::addAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new action with the given <db:code role="parameter">icon</db:code> and <db:code role="parameter">text</db:code>. This action is added to the end of the toolbar.</db:para>
</db:section>
<db:section xml:id="addAction-2">
<db:title>[since 5.6] QAction *QToolBar::addAction(const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>functor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new action with the given <db:code role="parameter">text</db:code>. This action is added to the end of the toolbar. The action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal is connected to the <db:code role="parameter">functor</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="addAction-3">
<db:title>[since 5.6] QAction *QToolBar::addAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>functor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new action with the given <db:code role="parameter">icon</db:code> and <db:code role="parameter">text</db:code>. This action is added to the end of the toolbar. The action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal is connected to the <db:code role="parameter">functor</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="addAction-4">
<db:title>QAction *QToolBar::addAction(const QString &amp;<db:emphasis>text</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new action with the given <db:code role="parameter">text</db:code>. This action is added to the end of the toolbar. The action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal is connected to <db:code role="parameter">member</db:code> in <db:code role="parameter">receiver</db:code>.</db:para>
</db:section>
<db:section xml:id="addAction-5">
<db:title>[since 5.6] QAction *QToolBar::addAction(const QString &amp;<db:emphasis>text</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, int <db:emphasis>functor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new action with the given <db:code role="parameter">text</db:code>. This action is added to the end of the toolbar. The action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal is connected to the <db:code role="parameter">functor</db:code>.</db:para>
<db:para>If <db:code role="parameter">context</db:code> is destroyed, the functor will not be called.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="addAction-6">
<db:title>QAction *QToolBar::addAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new action with the given <db:code role="parameter">icon</db:code> and <db:code role="parameter">text</db:code>. This action is added to the end of the toolbar. The action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal is connected to <db:code role="parameter">member</db:code> in <db:code role="parameter">receiver</db:code>.</db:para>
</db:section>
<db:section xml:id="addAction-7">
<db:title>[since 5.6] QAction *QToolBar::addAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, int <db:emphasis>functor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new action with the given <db:code role="parameter">icon</db:code> and <db:code role="parameter">text</db:code>. This action is added to the end of the toolbar. The action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal is connected to the <db:code role="parameter">functor</db:code>.</db:para>
<db:para>If <db:code role="parameter">context</db:code> is destroyed, the functor will not be called.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="addSeparator">
<db:title>QAction *QToolBar::addSeparator()</db:title>
<db:para>Adds a separator to the end of the toolbar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#insertSeparator">insertSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addWidget">
<db:title>QAction *QToolBar::addWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">widget</db:code> to the toolbar as the toolbar's last item.</db:para>
<db:para>The toolbar takes ownership of <db:code role="parameter">widget</db:code>.</db:para>
<db:para>If you add a <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> with this method, the toolbar's <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonStyle</db:link> will not be respected.</db:para>
<db:note>
<db:para>You should use <db:link xlink:href="qaction.xml#visible-prop">QAction::setVisible</db:link>() to change the visibility of the widget. Using <db:link xlink:href="qwidget.xml#visible-prop">QWidget::setVisible</db:link>(), <db:link xlink:href="qwidget.xml#show">QWidget::show</db:link>() and <db:link xlink:href="qwidget.xml#hide">QWidget::hide</db:link>() does not work.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#insertWidget">insertWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="allowedAreasChanged">
<db:title>void QToolBar::allowedAreasChanged(Qt::ToolBarAreas <db:emphasis>allowedAreas</db:emphasis>)</db:title>
<db:para>This signal is emitted when the collection of allowed areas for the toolbar is changed. The new areas in which the toolbar can be positioned are specified by <db:code role="parameter">allowedAreas</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#allowedAreas-prop">allowedAreas</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QToolBar::changeEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QToolBar::clear()</db:title>
<db:para>Removes all actions from the toolbar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#removeAction">removeAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QToolBar::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="iconSizeChanged">
<db:title>void QToolBar::iconSizeChanged(const QSize &amp;<db:emphasis>iconSize</db:emphasis>)</db:title>
<db:para>This signal is emitted when the icon size is changed. The <db:code role="parameter">iconSize</db:code> parameter holds the toolbar's new icon size.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qtoolbar.xml#iconSize-prop">iconSize</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#iconSize-prop">iconSize</db:link></db:member>
<db:member><db:link xlink:href="qmainwindow.xml#iconSize-prop">QMainWindow::iconSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertSeparator">
<db:title>QAction *QToolBar::insertSeparator(QAction *<db:emphasis>before</db:emphasis>)</db:title>
<db:para>Inserts a separator into the toolbar in front of the toolbar item associated with the <db:code role="parameter">before</db:code> action.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#addSeparator">addSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertWidget">
<db:title>QAction *QToolBar::insertWidget(QAction *<db:emphasis>before</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Inserts the given <db:code role="parameter">widget</db:code> in front of the toolbar item associated with the <db:code role="parameter">before</db:code> action.</db:para>
<db:para>Note: You should use <db:link xlink:href="qaction.xml#visible-prop">QAction::setVisible</db:link>() to change the visibility of the widget. Using <db:link xlink:href="qwidget.xml#visible-prop">QWidget::setVisible</db:link>(), <db:link xlink:href="qwidget.xml#show">QWidget::show</db:link>() and <db:link xlink:href="qwidget.xml#hide">QWidget::hide</db:link>() does not work.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAreaAllowed">
<db:title>bool QToolBar::isAreaAllowed(Qt::ToolBarArea <db:emphasis>area</db:emphasis>) const</db:title>
<db:para>Returns true if this toolbar is dockable in the given <db:code role="parameter">area</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="movableChanged">
<db:title>void QToolBar::movableChanged(bool <db:emphasis>movable</db:emphasis>)</db:title>
<db:para>This signal is emitted when the toolbar becomes movable or fixed. If the toolbar can be moved, <db:code role="parameter">movable</db:code> is true; otherwise it is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#movable-prop">movable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientationChanged">
<db:title>void QToolBar::orientationChanged(Qt::Orientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>This signal is emitted when the orientation of the toolbar changes. The <db:code role="parameter">orientation</db:code> parameter holds the toolbar's new orientation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#orientation-prop">orientation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QToolBar::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="toggleViewAction">
<db:title>QAction *QToolBar::toggleViewAction() const</db:title>
<db:para>Returns a checkable action that can be used to show or hide this toolbar.</db:para>
<db:para>The action's text is set to the toolbar's window title.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#text-prop">QAction::text</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#windowTitle-prop">QWidget::windowTitle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolButtonStyleChanged">
<db:title>void QToolBar::toolButtonStyleChanged(Qt::ToolButtonStyle <db:emphasis>toolButtonStyle</db:emphasis>)</db:title>
<db:para>This signal is emitted when the tool button style is changed. The <db:code role="parameter">toolButtonStyle</db:code> parameter holds the toolbar's new tool button style.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qtoolbar.xml#toolButtonStyle-prop">toolButtonStyle</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#toolButtonStyle-prop">toolButtonStyle</db:link></db:member>
<db:member><db:link xlink:href="qmainwindow.xml#toolButtonStyle-prop">QMainWindow::toolButtonStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topLevelChanged">
<db:title>[since 4.6] void QToolBar::topLevelChanged(bool <db:emphasis>topLevel</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qtoolbar.xml#floating-prop">floating</db:link> property changes. The <db:code role="parameter">topLevel</db:code> parameter is true if the toolbar is now floating; otherwise it is false.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#isWindow">isWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visibilityChanged">
<db:title>[since 4.7] void QToolBar::visibilityChanged(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>This signal is emitted when the toolbar becomes <db:code role="parameter">visible</db:code> (or invisible). This happens when the widget is hidden or shown.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
</db:section>
<db:section xml:id="widgetForAction">
<db:title>[since 4.2] QWidget *QToolBar::widgetForAction(QAction *<db:emphasis>action</db:emphasis>) const</db:title>
<db:para>Returns the widget associated with the specified <db:code role="parameter">action</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbar.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
