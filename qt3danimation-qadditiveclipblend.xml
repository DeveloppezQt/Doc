<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAdditiveClipBlend Class</db:title>
<db:subtitle>Qt3DAnimation::QAdditiveClipBlend</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Performs an additive blend of two animation clips based on an additive factor.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAdditiveClipBlend</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3danimation)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3danimation)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3danimation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-animation-additiveclipblend.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-qabstractclipblendnode.xml" xlink:role="class">Qt3DAnimation::QAbstractClipBlendNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qt3danimation-qadditiveclipblend.xml">QAdditiveClipBlend</db:link> can be useful to create advanced animation effects based on individual animation clips. For example, if you:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>set the <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#baseClip-prop">baseClip</db:link> property to a normal walk cycle animation clip and</db:para>
</db:listitem>
<db:listitem>
<db:para>set the <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#additiveClip-prop">additiveClip</db:link> property to a shaking head difference clip,</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>then adjusting the <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#additiveFactor-prop">additiveFactor</db:link> property will control how much of the <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#additiveClip-prop">additiveClip</db:link> gets added on to the <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#baseClip-prop">baseClip</db:link>. This has he effect that with an <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#additiveFactor-prop">additiveFactor</db:link> of zero, this blend node will yield the original walk cycle clip. With an <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#additiveFactor-prop">additiveFactor</db:link> of 1, it will yield the walk cycle including a shaking head animation.</db:para>
<db:para>The blending operation implemented by this class is:</db:para>
<db:programlisting language="cpp" role="bad">resultClip = baseClip + additiveFactor * additiveClip
</db:programlisting>
<db:para>There is nothing stopping you from using values for the additiveFacor property outside the 0 to 1 range, but please be aware that the input animation clips may not be authored in such a way for this to make sense.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3danimation-qblendedclipanimator.xml">QBlendedClipAnimator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="additiveClip-prop">
<db:title>additiveClip : Qt3DAnimation::QAbstractClipBlendNode*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DAnimation::QAbstractClipBlendNode*</db:type>
<db:varname>additiveClip</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">additiveClip</db:synopsisinfo>
<db:synopsisinfo role="setter">setAdditiveClip</db:synopsisinfo>
<db:synopsisinfo role="notifier">additiveClipChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the additive clip to be blended with the <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#baseClip-prop">baseClip</db:link>. The amount of blending is controlled by the <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#additiveFactor-prop">additiveFactor</db:link> property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3danimation-qabstractclipblendnode.xml">Qt3DAnimation::QAbstractClipBlendNode</db:link></db:type> *<db:emphasis role="bold">additiveClip</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAdditiveClip</db:emphasis>(<db:type><db:link xlink:href="qt3danimation-qabstractclipblendnode.xml">Qt3DAnimation::QAbstractClipBlendNode</db:link></db:type> *<db:emphasis>additiveClip</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">additiveClipChanged</db:emphasis>(<db:type><db:link xlink:href="qt3danimation-qabstractclipblendnode.xml">Qt3DAnimation::QAbstractClipBlendNode</db:link></db:type> *<db:emphasis>additiveClip</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="additiveFactor-prop">
<db:title>additiveFactor : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>additiveFactor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">additiveFactor</db:synopsisinfo>
<db:synopsisinfo role="setter">setAdditiveFactor</db:synopsisinfo>
<db:synopsisinfo role="notifier">additiveFactorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the blending factor, typically between 0 and 1, to control the blending of two animation clips.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">additiveFactor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAdditiveFactor</db:emphasis>(<db:type>float</db:type> <db:emphasis>additiveFactor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">additiveFactorChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>additiveFactor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="baseClip-prop">
<db:title>baseClip : Qt3DAnimation::QAbstractClipBlendNode*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DAnimation::QAbstractClipBlendNode*</db:type>
<db:varname>baseClip</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">baseClip</db:synopsisinfo>
<db:synopsisinfo role="setter">setBaseClip</db:synopsisinfo>
<db:synopsisinfo role="notifier">baseClipChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the base animation clip. When the <db:link xlink:href="qt3danimation-qadditiveclipblend.xml#additiveFactor-prop">additiveFactor</db:link> is zero the baseClip will also be the resulting clip of this blend node.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3danimation-qabstractclipblendnode.xml">Qt3DAnimation::QAbstractClipBlendNode</db:link></db:type> *<db:emphasis role="bold">baseClip</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBaseClip</db:emphasis>(<db:type><db:link xlink:href="qt3danimation-qabstractclipblendnode.xml">Qt3DAnimation::QAbstractClipBlendNode</db:link></db:type> *<db:emphasis>baseClip</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">baseClipChanged</db:emphasis>(<db:type><db:link xlink:href="qt3danimation-qabstractclipblendnode.xml">Qt3DAnimation::QAbstractClipBlendNode</db:link></db:type> *<db:emphasis>baseClip</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
