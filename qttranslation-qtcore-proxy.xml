<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtTranslation&gt;</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qtTrId">
<db:title>QString qtTrId(const char *<db:emphasis>id</db:emphasis>, int <db:emphasis>n</db:emphasis> = -1)</db:title>
<db:para>The qtTrId function finds and returns a translated string.</db:para>
<db:para>Returns a translated string identified by <db:code role="parameter">id</db:code>. If no matching string is found, the id itself is returned. This should not happen under normal conditions.</db:para>
<db:para>If <db:code role="parameter">n</db:code> &gt;= 0, all occurrences of %n in the resulting string are replaced with a decimal representation of <db:code role="parameter">n</db:code>. In addition, depending on <db:code role="parameter">n</db:code>'s value, the translation text may vary.</db:para>
<db:para>Meta data and comments can be passed as documented for <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(). In addition, it is possible to supply a source string template like that:</db:para>
<db:para><db:code>//% &lt;C string&gt;</db:code></db:para>
<db:para>or</db:para>
<db:para><db:code>\begincomment% &lt;C string&gt; \endcomment</db:code></db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    //% &quot;%n fooish bar(s) found.\n&quot;
    //% &quot;Do you want to continue?&quot;
    QString text = qtTrId(&quot;qtn_foo_bar&quot;, n);
</db:programlisting>
<db:para>Creating QM files suitable for use with this function requires passing the -idbased option to the lrelease tool.</db:para>
<db:warning>
<db:para>This method is reentrant only if all translators are installed <db:emphasis>before</db:emphasis> calling this method. Installing or removing translators while performing translations is not supported. Doing so will probably result in crashes or other undesirable behavior.</db:para>
</db:warning>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#translate">QCoreApplication::translate</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QT_TRANSLATE_NOOP3">
<db:title>QT_TRANSLATE_NOOP3(<db:emphasis>context</db:emphasis>, <db:emphasis>sourceText</db:emphasis>, <db:emphasis>disambiguation</db:emphasis>)</db:title>
<db:para>Marks the UTF-8 encoded string literal <db:code role="parameter">sourceText</db:code> for delayed translation in the given <db:code role="parameter">context</db:code> with the given <db:code role="parameter">disambiguation</db:code>. The <db:code role="parameter">context</db:code> is typically a class and also needs to be specified as a string literal. The string literal <db:code role="parameter">disambiguation</db:code> should be a short semantic tag to tell apart otherwise identical strings.</db:para>
<db:para>The macro tells lupdate to collect the string, and expands to an anonymous struct of the two string literals passed as <db:code role="parameter">sourceText</db:code> and <db:code role="parameter">disambiguation</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static { const char *source; const char *comment; } greeting_strings[] =
{
    QT_TRANSLATE_NOOP3(&quot;FriendlyConversation&quot;, &quot;Hello&quot;,
                       &quot;A really friendly hello&quot;),
    QT_TRANSLATE_NOOP3(&quot;FriendlyConversation&quot;, &quot;Goodbye&quot;,
                       &quot;A really friendly goodbye&quot;)
};

QString FriendlyConversation::greeting(int type)
{
    return tr(greeting_strings[type].source,
              greeting_strings[type].comment);
}

QString global_greeting(int type)
{
    return qApp-&gt;translate(&quot;FriendlyConversation&quot;,
                           greeting_strings[type].source,
                           greeting_strings[type].comment);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TR_NOOP">QT_TR_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TRANSLATE_NOOP">
<db:title>QT_TRANSLATE_NOOP(<db:emphasis>context</db:emphasis>, <db:emphasis>sourceText</db:emphasis>)</db:title>
<db:para>Marks the UTF-8 encoded string literal <db:code role="parameter">sourceText</db:code> for delayed translation in the given <db:code role="parameter">context</db:code>. The <db:code role="parameter">context</db:code> is typically a class name and also needs to be specified as a string literal.</db:para>
<db:para>The macro tells lupdate to collect the string, and expands to <db:code role="parameter">sourceText</db:code> itself.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static const char *greeting_strings[] = {
    QT_TRANSLATE_NOOP(&quot;FriendlyConversation&quot;, &quot;Hello&quot;),
    QT_TRANSLATE_NOOP(&quot;FriendlyConversation&quot;, &quot;Goodbye&quot;)
};

QString FriendlyConversation::greeting(int type)
{
    return tr(greeting_strings[type]);
}

QString global_greeting(int type)
{
    return qApp-&gt;translate(&quot;FriendlyConversation&quot;,
                           greeting_strings[type]);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TR_NOOP">QT_TR_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TRANSLATE_NOOP3">QT_TRANSLATE_NOOP3</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TRANSLATE_N_NOOP3">
<db:title>QT_TRANSLATE_N_NOOP3(<db:emphasis>context</db:emphasis>, <db:emphasis>sourceText</db:emphasis>, <db:emphasis>comment</db:emphasis>)</db:title>
<db:para>Marks the UTF-8 encoded string literal <db:code role="parameter">sourceText</db:code> for numerator dependent delayed translation in the given <db:code role="parameter">context</db:code> with the given <db:code role="parameter">comment</db:code>. The <db:code role="parameter">context</db:code> is typically a class and also needs to be specified as a string literal. The string literal <db:code role="parameter">comment</db:code> should be a short semantic tag to tell apart otherwise identical strings.</db:para>
<db:para>The macro tells lupdate to collect the string, and expands to an anonymous struct of the two string literals passed as <db:code role="parameter">sourceText</db:code> and <db:code role="parameter">comment</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static { const char * const source; const char * const comment; } status_strings[] = {
    QT_TRANSLATE_N_NOOP3(&quot;Message Status&quot;, &quot;Hello, you have %n message(s)&quot;,
                         &quot;A login message status&quot;),
    QT_TRANSLATE_N_NOOP3(&quot;Message status&quot;, &quot;You have %n new message(s)&quot;,
                         &quot;A new message query status&quot;)
};

QString FriendlyConversation::greeting(int type, int count)
{
    return tr(status_strings[type].source,
              status_strings[type].comment, count);
}

QString global_greeting(int type, int count)
{
    return qApp-&gt;translate(&quot;Message Status&quot;,
                           status_strings[type].source,
                           status_strings[type].comment,
                           count);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TR_NOOP">QT_TR_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TRANSLATE_NOOP3">QT_TRANSLATE_NOOP3</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TRANSLATE_N_NOOP">
<db:title>QT_TRANSLATE_N_NOOP(<db:emphasis>context</db:emphasis>, <db:emphasis>sourceText</db:emphasis>)</db:title>
<db:para>Marks the UTF-8 encoded string literal <db:code role="parameter">sourceText</db:code> for numerator dependent delayed translation in the given <db:code role="parameter">context</db:code>. The <db:code role="parameter">context</db:code> is typically a class name and also needs to be specified as a string literal.</db:para>
<db:para>The macro tells lupdate to collect the string, and expands to <db:code role="parameter">sourceText</db:code> itself.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static const char * const greeting_strings[] = {
    QT_TRANSLATE_N_NOOP(&quot;Welcome Msg&quot;, &quot;Hello, you have %n message(s)&quot;),
    QT_TRANSLATE_N_NOOP(&quot;Welcome Msg&quot;, &quot;Hi, you have %n message(s)&quot;)
};

QString global_greeting(int type, int msgcnt)
{
    return translate(&quot;Welcome Msg&quot;, greeting_strings[type], nullptr, msgcnt);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TRANSLATE_N_NOOP3">QT_TRANSLATE_N_NOOP3</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TRID_NOOP">
<db:title>QT_TRID_NOOP(<db:emphasis>id</db:emphasis>)</db:title>
<db:para>The QT_TRID_NOOP macro marks an id for dynamic translation.</db:para>
<db:para>The only purpose of this macro is to provide an anchor for attaching meta data like to <db:link xlink:href="qttranslation-qtcore-proxy.xml#qtTrId">qtTrId</db:link>().</db:para>
<db:para>The macro expands to <db:code role="parameter">id</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static const char * const ids[] = {
    //% &quot;This is the first text.&quot;
    QT_TRID_NOOP(&quot;qtn_1st_text&quot;),
    //% &quot;This is the second text.&quot;
    QT_TRID_NOOP(&quot;qtn_2nd_text&quot;),
    0
};

void TheClass::addLabels()
{
    for (int i = 0; ids[i]; ++i)
        new QLabel(qtTrId(ids[i]), this);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#qtTrId">qtTrId</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TRID_N_NOOP">
<db:title>[since 6.3] QT_TRID_N_NOOP(<db:emphasis>id</db:emphasis>)</db:title>
<db:para>The QT_TRID_N_NOOP macro marks an id for numerator dependent dynamic translation.</db:para>
<db:para>The only purpose of this macro is to provide an anchor for attaching meta data like to <db:link xlink:href="qttranslation-qtcore-proxy.xml#qtTrId">qtTrId</db:link>().</db:para>
<db:para>The macro expands to <db:code role="parameter">id</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static const char * const ids[] = {
    //% &quot;%n foo(s) found.&quot;
    QT_TRID_N_NOOP(&quot;qtn_foo&quot;),
    //% &quot;%n bar(s) found.&quot;
    QT_TRID_N_NOOP(&quot;qtn_bar&quot;),
    0
};

QString result(int type, int n)
{
    return qtTrId(ids[type], n);
}
</db:programlisting>
<db:para>This macro was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#qtTrId">qtTrId</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TR_NOOP">
<db:title>QT_TR_NOOP(<db:emphasis>sourceText</db:emphasis>)</db:title>
<db:para>Marks the UTF-8 encoded string literal <db:code role="parameter">sourceText</db:code> for delayed translation in the current context (class).</db:para>
<db:para>The macro tells lupdate to collect the string, and expands to <db:code role="parameter">sourceText</db:code> itself.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString FriendlyConversation::greeting(int type)
{
    static const char *greeting_strings[] = {
        QT_TR_NOOP(&quot;Hello&quot;),
        QT_TR_NOOP(&quot;Goodbye&quot;)
    };
    return tr(greeting_strings[type]);
}
</db:programlisting>
<db:para>The macro QT_TR_NOOP_UTF8() is identical and obsolete; this applies to all other _UTF8 macros as well.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_TR_N_NOOP">
<db:title>QT_TR_N_NOOP(<db:emphasis>sourceText</db:emphasis>)</db:title>
<db:para>Marks the UTF-8 encoded string literal <db:code role="parameter">sourceText</db:code> for numerator dependent delayed translation in the current context (class).</db:para>
<db:para>The macro tells lupdate to collect the string, and expands to <db:code role="parameter">sourceText</db:code> itself.</db:para>
<db:para>The macro expands to <db:code role="parameter">sourceText</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">static const char * const StatusClass::status_strings[] = {
    QT_TR_N_NOOP(&quot;There are %n new message(s)&quot;),
    QT_TR_N_NOOP(&quot;There are %n total message(s)&quot;)
};

QString StatusClass::status(int type, int count)
{
    return tr(status_strings[type], nullptr, count);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttranslation-qtcore-proxy.xml#QT_TR_NOOP">QT_TR_NOOP</db:link></db:member>
<db:member><db:link xlink:href="">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
