<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qml Oscilloscope</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to implement application with strict performance requirements using the Qt Charts QML API.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmloscilloscope.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The oscilloscope application demonstrates how to use the Qt Charts QML API to implement an application with strict performance requirements. The application uses generated data with configurable characteristics to mimic a simple oscilloscope user interface.</db:para>
<db:para>To get information about actual rendering speed shown in the application output console, you can set QSG_RENDER_TIMING = 1 to your run environment settings. To do so go to Projects - Run - Run environment in Qt Creator and select Add. Then you can experiment with the different configurable options of the example application to find the configuration that gives you the best performance in your environment.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-views">
<db:title>Creating Views</db:title>
<db:para>The application window is shared by control and scope views:</db:para>
<db:programlisting language="qml">Item {
    id: main
    width: 600
    height: 400

    ControlPanel {
        id: controlPanel
        anchors.top: parent.top
        anchors.topMargin: 10
        anchors.bottom: parent.bottom
        anchors.left: parent.left
        anchors.leftMargin: 10
    ...
    ScopeView {
        id: scopeView
        anchors.top: parent.top
        anchors.bottom: parent.bottom
        anchors.right: parent.right
        anchors.left: controlPanel.right
        height: main.height
    }
</db:programlisting>
<db:para>ControlView implements the buttons used for configuring. ScopeView uses a <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> to show a chart with two line series:</db:para>
<db:programlisting language="qml">ChartView {
    id: chartView

    property bool openGL: openGLSupported

    animationOptions: ChartView.NoAnimation
    theme: ChartView.ChartThemeDark

    onOpenGLChanged: {
        if (openGLSupported) {
            var series1 = series(&quot;signal 1&quot;)
            if (series1)
                series1.useOpenGL = openGL;
            var series2 = series(&quot;signal 2&quot;)
            if (series2)
                series2.useOpenGL = openGL;
        }
    }

    ValueAxis {
        id: axisY1
        min: -1
        max: 4
    }

    ValueAxis {
        id: axisY2
        min: -10
        max: 5
    }

    ValueAxis {
        id: axisX
        min: 0
        max: 1024
    }

    LineSeries {
        id: lineSeries1
        name: &quot;signal 1&quot;
        axisX: axisX
        axisY: axisY1
        useOpenGL: chartView.openGL
    }
    LineSeries {
        id: lineSeries2
        name: &quot;signal 2&quot;
        axisX: axisX
        axisYRight: axisY2
        useOpenGL: chartView.openGL
    }
    ...
</db:programlisting>
<db:para>The data of the line series is updated with a QML timer. In a real life application the updating could be triggered with a signal from Qt C++ code.</db:para>
<db:programlisting language="qml">Timer {
    id: refreshTimer
    interval: 1 / 60 * 1000 // 60 Hz
    running: true
    repeat: true
    onTriggered: {
        dataSource.update(chartView.series(0));
        dataSource.update(chartView.series(1));
    }
}
</db:programlisting>
<db:para>The oscilloscope also allows you to switch the type of the series used for visualizing the signal sources. This is implemented by dynamically destroying and creating series:</db:para>
<db:programlisting language="qml">function changeSeriesType(type) {
    chartView.removeAllSeries();

    // Create two new series of the correct type. Axis x is the same for both of the series,
    // but the series have their own y-axes to make it possible to control the y-offset
    // of the &quot;signal sources&quot;.
    var series1
    var series2
    if (type === &quot;line&quot;) {
        series1 = chartView.createSeries(ChartView.SeriesTypeLine, &quot;signal 1&quot;,
                                         axisX, axisY1);
        series1.useOpenGL = chartView.openGL

        series2 = chartView.createSeries(ChartView.SeriesTypeLine, &quot;signal 2&quot;,
                                         axisX, axisY2);
        series2.useOpenGL = chartView.openGL
    } else {
        series1 = chartView.createSeries(ChartView.SeriesTypeScatter, &quot;signal 1&quot;,
                                         axisX, axisY1);
        series1.markerSize = 2;
        series1.borderColor = &quot;transparent&quot;;
        series1.useOpenGL = chartView.openGL

        series2 = chartView.createSeries(ChartView.SeriesTypeScatter, &quot;signal 2&quot;,
                                         axisX, axisY2);
        series2.markerSize = 2;
        series2.borderColor = &quot;transparent&quot;;
        series2.useOpenGL = chartView.openGL
    }
}

function createAxis(min, max) {
    // The following creates a ValueAxis object that can be then set as a x or y axis for a series
    return Qt.createQmlObject(&quot;import QtQuick 2.0; import QtCharts 2.0; ValueAxis { min: &quot;
                              + min + &quot;; max: &quot; + max + &quot; }&quot;, chartView);
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/qmloscilloscope?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
