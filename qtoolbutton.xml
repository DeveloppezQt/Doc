<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QToolButton Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> class provides a quick-access button to commands or options, usually used inside a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QToolButton</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml" xlink:role="class">QAbstractButton</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QToolButton is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A tool button is a special button that provides quick-access to specific commands or options. As opposed to a normal command button, a tool button usually doesn't show a text label, but shows an icon instead.</db:para>
<db:para>Tool buttons are normally created when new <db:link xlink:href="qaction.xml">QAction</db:link> instances are created with <db:link xlink:href="qwidget.xml#addAction">QToolBar::addAction</db:link>() or existing actions are added to a toolbar with <db:link xlink:href="qwidget.xml#addAction">QToolBar::addAction</db:link>(). It is also possible to construct tool buttons in the same way as any other widget, and arrange them alongside other widgets in layouts.</db:para>
<db:para>One classic use of a tool button is to select tools; for example, the &quot;pen&quot; tool in a drawing program. This would be implemented by using a <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> as a toggle button (see <db:link xlink:href="qabstractbutton.xml#checkable-prop">setCheckable</db:link>()).</db:para>
<db:para><db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> supports auto-raising. In auto-raise mode, the button draws a 3D frame only when the mouse points at it. The feature is automatically turned on when a button is used inside a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link>. Change it with <db:link xlink:href="qtoolbutton.xml#autoRaise-prop">setAutoRaise</db:link>().</db:para>
<db:para>A tool button's icon is set as <db:link xlink:href="qicon.xml">QIcon</db:link>. This makes it possible to specify different pixmaps for the disabled and active state. The disabled pixmap is used when the button's functionality is not available. The active pixmap is displayed when the button is auto-raised because the mouse pointer is hovering over it.</db:para>
<db:para>The button's look and dimension is adjustable with <db:link xlink:href="qtoolbutton.xml#toolButtonStyle-prop">setToolButtonStyle</db:link>() and <db:link xlink:href="qabstractbutton.xml#iconSize-prop">setIconSize</db:link>(). When used inside a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>, the button automatically adjusts to <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>'s settings (see <db:link xlink:href="qmainwindow.xml#toolButtonStyle-prop">QMainWindow::setToolButtonStyle</db:link>() and <db:link xlink:href="qmainwindow.xml#iconSize-prop">QMainWindow::setIconSize</db:link>()). Instead of an icon, a tool button can also display an arrow symbol, specified with <db:link xlink:href="qtoolbutton.xml#arrowType-prop">arrowType</db:link>.</db:para>
<db:para>A tool button can offer additional choices in a popup menu. The popup menu can be set using <db:link xlink:href="qtoolbutton.xml#setMenu">setMenu</db:link>(). Use <db:link xlink:href="qtoolbutton.xml#popupMode-prop">setPopupMode</db:link>() to configure the different modes available for tool buttons with a menu set. The default mode is DelayedPopupMode which is sometimes used with the &quot;Back&quot; button in a web browser. After pressing and holding the button down for a while, a menu pops up showing a list of possible pages to jump to. The timeout is style dependent, see <db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_ToolButton_PopupDelay</db:link>.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/assistant-toolbar.png"/>
</db:imageobject>
</db:inlinemediaobject> Qt Assistant's toolbar with tool buttons</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Qt Assistant's toolbar contains tool buttons that are associated with actions used in other parts of the main window.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpushbutton.xml">QPushButton</db:link></db:member>
<db:member><db:link xlink:href="qtoolbar.xml">QToolBar</db:link></db:member>
<db:member><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:member>
<db:member><db:link xlink:href="qaction.xml">QAction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ToolButtonPopupMode-enum">
<db:title>enum QToolButton::ToolButtonPopupMode</db:title>
<db:enumsynopsis>
<db:enumname>ToolButtonPopupMode</db:enumname>
<db:enumitem>
<db:enumidentifier>DelayedPopup</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MenuButtonPopup</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InstantPopup</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes how a menu should be popped up for tool buttons that has a menu set or contains a list of actions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtoolbutton.xml">QToolButton</db:link></db:emphasis>::DelayedPopup</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>After pressing and holding the tool button down for a certain amount of time (the timeout is style dependent, see <db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_ToolButton_PopupDelay</db:link>), the menu is displayed. A typical application example is the &quot;back&quot; button in some web browsers's tool bars. If the user clicks it, the browser simply browses back to the previous page. If the user presses and holds the button down for a while, the tool button shows a menu containing the current history list</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtoolbutton.xml">QToolButton</db:link></db:emphasis>::MenuButtonPopup</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>In this mode the tool button displays a special arrow to indicate that a menu is present. The menu is displayed when the arrow part of the button is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtoolbutton.xml">QToolButton</db:link></db:emphasis>::InstantPopup</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The menu is displayed, without delay, when the tool button is pressed. In this mode, the button's own action is not triggered.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="arrowType-prop">
<db:title>arrowType : Qt::ArrowType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::ArrowType</db:type>
<db:varname>arrowType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">arrowType</db:synopsisinfo>
<db:synopsisinfo role="setter">setArrowType</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the button displays an arrow instead of a normal icon</db:para>
<db:para>This displays an arrow as the icon for the <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link>.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qt.xml#ArrowType-enum">Qt::NoArrow</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ArrowType-enum">Qt::ArrowType</db:link></db:type> <db:emphasis role="bold">arrowType</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setArrowType</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ArrowType-enum">Qt::ArrowType</db:link></db:type> <db:emphasis>type</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="autoRaise-prop">
<db:title>autoRaise : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoRaise</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoRaise</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoRaise</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether auto-raising is enabled or not.</db:para>
<db:para>The default is disabled (i.e. false).</db:para>
<db:para>This property is currently ignored on macOS when using QMacStyle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoRaise</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoRaise</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="popupMode-prop">
<db:title>popupMode : ToolButtonPopupMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ToolButtonPopupMode</db:type>
<db:varname>popupMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">popupMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setPopupMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>describes the way that popup menus are used with tool buttons</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qtoolbutton.xml#ToolButtonPopupMode-enum">DelayedPopup</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtoolbutton.xml#ToolButtonPopupMode-enum">QToolButton::ToolButtonPopupMode</db:link></db:type> <db:emphasis role="bold">popupMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPopupMode</db:emphasis>(<db:type><db:link xlink:href="qtoolbutton.xml#ToolButtonPopupMode-enum">QToolButton::ToolButtonPopupMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="toolButtonStyle-prop">
<db:title>toolButtonStyle : Qt::ToolButtonStyle</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::ToolButtonStyle</db:type>
<db:varname>toolButtonStyle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">toolButtonStyle</db:synopsisinfo>
<db:synopsisinfo role="setter">setToolButtonStyle</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the tool button displays an icon only, text only, or text beside/below the icon.</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonIconOnly</db:link>.</db:para>
<db:para>To have the style of toolbuttons follow the system settings, set this property to <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonFollowStyle</db:link>. On Unix, the user settings from the desktop environment will be used. On other platforms, <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonFollowStyle</db:link> means icon only.</db:para>
<db:para><db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> automatically connects this slot to the relevant signal in the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> in which is resides.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonStyle</db:link></db:type> <db:emphasis role="bold">toolButtonStyle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setToolButtonStyle</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonStyle</db:link></db:type> <db:emphasis>style</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QToolButton">
<db:title>[explicit] QToolButton::QToolButton(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QToolButton</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QToolButton(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty tool button with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QToolButton">
<db:title>[virtual] QToolButton::~QToolButton()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QToolButton</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QToolButton()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="actionEvent">
<db:title>[override virtual protected] void QToolButton::actionEvent(QActionEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>actionEvent</db:methodname>
<db:methodparam>
<db:type>QActionEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void actionEvent(QActionEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#actionEvent" role="function">QWidget::actionEvent(QActionEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QToolButton::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#changeEvent" role="function">QAbstractButton::changeEvent(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="checkStateSet">
<db:title>[override virtual protected] void QToolButton::checkStateSet()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>checkStateSet</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void checkStateSet() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#checkStateSet" role="function">QAbstractButton::checkStateSet()</db:link>.</db:para>
</db:section>
<db:section xml:id="defaultAction">
<db:title>QAction *QToolButton::defaultAction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAction *</db:type>
<db:methodname>defaultAction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAction * defaultAction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default action.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbutton.xml#setDefaultAction">setDefaultAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enterEvent">
<db:title>[override virtual protected] void QToolButton::enterEvent(QEnterEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>enterEvent</db:methodname>
<db:methodparam>
<db:type>QEnterEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void enterEvent(QEnterEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#enterEvent" role="function">QWidget::enterEvent(QEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QToolButton::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#event" role="function">QAbstractButton::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="hitButton">
<db:title>[override virtual protected] bool QToolButton::hitButton(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hitButton</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hitButton(const QPoint &amp;pos) const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#hitButton" role="function">QAbstractButton::hitButton(const QPoint &amp;pos) const</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QToolButton::initStyleOption(QStyleOptionToolButton *<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>initStyleOption</db:methodname>
<db:methodparam>
<db:type>QStyleOptionToolButton *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initStyleOption(QStyleOptionToolButton *option) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptiontoolbutton.xml">QStyleOptionToolButton</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="leaveEvent">
<db:title>[override virtual protected] void QToolButton::leaveEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>leaveEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void leaveEvent(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#leaveEvent" role="function">QWidget::leaveEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="menu">
<db:title>QMenu *QToolButton::menu() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMenu *</db:type>
<db:methodname>menu</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMenu * menu() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the associated menu, or nullptr if no menu has been defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbutton.xml#setMenu">setMenu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QToolButton::minimumSizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QToolButton::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#mousePressEvent" role="function">QAbstractButton::mousePressEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QToolButton::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#mouseReleaseEvent" role="function">QAbstractButton::mouseReleaseEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="nextCheckState">
<db:title>[override virtual protected] void QToolButton::nextCheckState()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>nextCheckState</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void nextCheckState() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#nextCheckState" role="function">QAbstractButton::nextCheckState()</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QToolButton::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#paintEvent" role="function">QAbstractButton::paintEvent(QPaintEvent *e)</db:link>.</db:para>
<db:para>Paints the button in response to the paint <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="setDefaultAction">
<db:title>void QToolButton::setDefaultAction(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDefaultAction</db:methodname>
<db:methodparam>
<db:type>QAction *</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultAction(QAction *action)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the default action to <db:code role="parameter">action</db:code>.</db:para>
<db:para>If a tool button has a default action, the action defines the following properties of the button:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#checkable-prop">checkable</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#checked-prop">checked</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#enabled-prop">enabled</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#font-prop">font</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#icon-prop">icon</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtoolbutton.xml#popupMode-prop">popupMode</db:link> (assuming the action has a menu)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#statusTip-prop">statusTip</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#text-prop">text</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#toolTip-prop">toolTip</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#whatsThis-prop">whatsThis</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Other properties, such as <db:link xlink:href="qabstractbutton.xml#autoRepeat-prop">autoRepeat</db:link>, are not affected by actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbutton.xml#defaultAction">defaultAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMenu">
<db:title>void QToolButton::setMenu(QMenu *<db:emphasis>menu</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMenu</db:methodname>
<db:methodparam>
<db:type>QMenu *</db:type>
<db:parameter>menu</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMenu(QMenu *menu)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Associates the given <db:code role="parameter">menu</db:code> with this tool button.</db:para>
<db:para>The menu will be shown according to the button's <db:link xlink:href="qtoolbutton.xml#popupMode-prop">popupMode</db:link>.</db:para>
<db:para>Ownership of the menu is not transferred to the tool button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtoolbutton.xml#menu">menu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showMenu">
<db:title>void QToolButton::showMenu()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showMenu</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showMenu()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows (pops up) the associated popup menu. If there is no such menu, this function does nothing. This function does not return until the popup menu has been closed by the user.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QToolButton::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QToolButton::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>timerEvent</db:methodname>
<db:methodparam>
<db:type>QTimerEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void timerEvent(QTimerEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#timerEvent" role="function">QAbstractButton::timerEvent(QTimerEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="triggered">
<db:title>void QToolButton::triggered(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>triggered</db:methodname>
<db:methodparam>
<db:type>QAction *</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void triggered(QAction *action)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the given <db:code role="parameter">action</db:code> is triggered.</db:para>
<db:para>The action may also be associated with other parts of the user interface, such as menu items and keyboard shortcuts. Sharing actions in this way helps make the user interface more consistent and is often less work to implement.</db:para>
</db:section>
</db:section>
</db:article>
