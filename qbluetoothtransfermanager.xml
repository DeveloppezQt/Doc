<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBluetoothTransferManager Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbluetoothtransfermanager.xml">QBluetoothTransferManager</db:link> class transfers data to another device using Object Push Profile (OPP).</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBluetoothTransferManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbluetoothtransfermanager.xml">QBluetoothTransferManager</db:link> uses OBEX to send put commands to remote devices. A typical OBEX transfer is initialized as follows:</db:para>
<db:programlisting language="cpp">// Create a transfer manager
QBluetoothTransferManager *transferManager = new QBluetoothTransferManager(this);

// Create the transfer request and file to be sent
QBluetoothAddress remoteAddress(&quot;00:11:22:33:44:55:66&quot;);
QBluetoothTransferRequest request(remoteAddress);
QFile *file = new QFile(&quot;testfile.txt&quot;);

// Ask the transfer manager to send it
QBluetoothTransferReply *reply = transferManager-&gt;put(request, file);
if (reply-&gt;error() == QBluetoothTransferReply::NoError) {

    // Connect to the reply's signals to be informed about the status and do cleanups when done
    QObject::connect(reply, SIGNAL(finished(QBluetoothTransferReply*)),
                     this, SLOT(transferFinished(QBluetoothTransferReply*)));
    QObject::connect(reply, SIGNAL(error(QBluetoothTransferReply::TransferError)),
                     this, SLOT(error(QBluetoothTransferReply::TransferError)));
} else {
    qWarning() &lt;&lt; &quot;Cannot push testfile.txt:&quot; &lt;&lt; reply-&gt;errorString();
}
</db:programlisting>
<db:para>Note that this API is not currently supported on Android.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBluetoothTransferManager">
<db:title>[explicit] QBluetoothTransferManager::QBluetoothTransferManager(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new <db:link xlink:href="qbluetoothtransfermanager.xml">QBluetoothTransferManager</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QBluetoothTransferManager">
<db:title>[virtual noexcept] QBluetoothTransferManager::~QBluetoothTransferManager()</db:title>
<db:para>Destroys the <db:link xlink:href="qbluetoothtransfermanager.xml">QBluetoothTransferManager</db:link>.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QBluetoothTransferManager::finished(QBluetoothTransferReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:para>This signal is emitted when the transfer for <db:code role="parameter">reply</db:code> finishes.</db:para>
</db:section>
<db:section xml:id="put">
<db:title>QBluetoothTransferReply *QBluetoothTransferManager::put(const QBluetoothTransferRequest &amp;<db:emphasis>request</db:emphasis>, QIODevice *<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Sends the contents of <db:code role="parameter">data</db:code> to the remote device identified by <db:code role="parameter">request</db:code>, and returns a new <db:link xlink:href="qbluetoothtransferreply.xml">QBluetoothTransferReply</db:link> that can be used to track the request's progress. <db:code role="parameter">data</db:code> must remain valid until the <db:link xlink:href="qbluetoothtransfermanager.xml#finished">finished</db:link>() signal is emitted.</db:para>
<db:para>The returned <db:link xlink:href="qbluetoothtransferreply.xml">QBluetoothTransferReply</db:link> object must be immediately checked for its <db:link xlink:href="qbluetoothtransferreply.xml#error">error</db:link>() state. This is required in case this function detects an error during the initialization of the <db:link xlink:href="qbluetoothtransferreply.xml">QBluetoothTransferReply</db:link>. In such cases <db:link xlink:href="qbluetoothtransferreply.xml#isFinished">QBluetoothTransferReply::isFinished</db:link>() returns <db:code>true</db:code> as well.</db:para>
<db:para>If the platform does not support the Object Push profile, this function will return <db:code>0</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
