<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGrpcHttp2Channel Class</db:title>
<db:productname>QtGrpc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GRPC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgrpchttp2channel.xml">QGrpcHttp2Channel</db:link> class is an HTTP/2 implementation of <db:link xlink:href="qabstractgrpcchannel.xml">QAbstractGrpcChannel</db:link> interface.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGrpcHttp2Channel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Grpc)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Grpc)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractgrpcchannel.xml" xlink:role="class">QAbstractGrpcChannel</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgrpchttp2channel.xml">QGrpcHttp2Channel</db:link> utilizes channel and call credentials. Channel credential <db:link xlink:href="qgrpchttp2channel.xml">QGrpcHttp2Channel</db:link> supports SslConfigCredential key. When HTTPS is used, this key has to be explicitly specified and provide <db:link xlink:href="qsslconfiguration.xml">QSslConfiguration</db:link> and value. The <db:link xlink:href="qsslconfiguration.xml">QSslConfiguration</db:link> provided will be used to establish HTTP/2 secured connection. All keys passed as <db:link xlink:href="qgrpccallcredentials.xml">QGrpcCallCredentials</db:link> will be used as HTTP/2 headers with related values assigned.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGrpcHttp2Channel">
<db:title>[explicit] QGrpcHttp2Channel::QGrpcHttp2Channel(const QUrl &amp;<db:emphasis>url</db:emphasis>, std::unique_ptr&lt;QAbstractGrpcCredentials&gt; <db:emphasis>credentials</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGrpcHttp2Channel</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>std::unique_ptr&lt;QAbstractGrpcCredentials&gt;</db:type>
<db:parameter>credentials</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGrpcHttp2Channel(const QUrl &amp;url, std::unique_ptr&lt;QAbstractGrpcCredentials&gt; credentials)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para><db:link xlink:href="qgrpchttp2channel.xml">QGrpcHttp2Channel</db:link> constructs <db:link xlink:href="qgrpchttp2channel.xml">QGrpcHttp2Channel</db:link> with <db:code role="parameter">url</db:code> used to establish channel connections and <db:code role="parameter">credentials</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGrpcHttp2Channel">
<db:title>[override virtual] QGrpcHttp2Channel::~QGrpcHttp2Channel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGrpcHttp2Channel</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGrpcHttp2Channel() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qgrpchttp2channel.xml">QGrpcHttp2Channel</db:link> object.</db:para>
</db:section>
<db:section xml:id="call">
<db:title>[override virtual] QGrpcStatus QGrpcHttp2Channel::call(QLatin1StringView <db:emphasis>method</db:emphasis>, QLatin1StringView <db:emphasis>service</db:emphasis>, QByteArrayView <db:emphasis>args</db:emphasis>, QByteArray &amp;<db:emphasis>ret</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QGrpcStatus</db:type>
<db:methodname>call</db:methodname>
<db:methodparam>
<db:type>QLatin1StringView</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1StringView</db:type>
<db:parameter>service</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>args</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArray &amp;</db:type>
<db:parameter>ret</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGrpcStatus call(QLatin1StringView method, QLatin1StringView service, QByteArrayView args, QByteArray &amp;ret) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractgrpcchannel.xml#call" role="function">QAbstractGrpcChannel::call(QLatin1StringView method, QLatin1StringView service, QByteArrayView args, QByteArray &amp;ret)</db:link>.</db:para>
<db:para>Synchronously calls the RPC method and writes the result to the output parameter <db:code role="parameter">ret</db:code>.</db:para>
<db:para>The RPC method name is concatenated from the <db:code role="parameter">method</db:code> and <db:code role="parameter">service</db:code> parameters with the given <db:code role="parameter">args</db:code>.</db:para>
</db:section>
<db:section xml:id="call-1">
<db:title>[override virtual] std::shared_ptr&lt;QGrpcCallReply&gt; QGrpcHttp2Channel::call(QAbstractGrpcClient *<db:emphasis>client</db:emphasis>, QLatin1StringView <db:emphasis>method</db:emphasis>, QLatin1StringView <db:emphasis>service</db:emphasis>, QByteArrayView <db:emphasis>args</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>std::shared_ptr&lt;QGrpcCallReply&gt;</db:type>
<db:methodname>call</db:methodname>
<db:methodparam>
<db:type>QAbstractGrpcClient *</db:type>
<db:parameter>client</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1StringView</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1StringView</db:type>
<db:parameter>service</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>args</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">std::shared_ptr&lt;QGrpcCallReply&gt; call(QAbstractGrpcClient *client, QLatin1StringView method, QLatin1StringView service, QByteArrayView args) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractgrpcchannel.xml#call-1" role="function">QAbstractGrpcChannel::call(QAbstractGrpcClient *client, QLatin1StringView method, QLatin1StringView service, QByteArrayView args)</db:link>.</db:para>
<db:para>Asynchronously calls the RPC method.</db:para>
<db:para>The RPC method name is concatenated from the <db:code role="parameter">method</db:code> and <db:code role="parameter">service</db:code> parameters with the given <db:code role="parameter">args</db:code>. The method can emit <db:link xlink:href="qgrpcoperation.xml#finished">QGrpcCallReply::finished</db:link>() and <db:link xlink:href="qgrpcoperation.xml#errorOccurred">QGrpcCallReply::errorOccurred</db:link>() signals on a <db:link xlink:href="qgrpccallreply.xml">QGrpcCallReply</db:link> returned object.</db:para>
</db:section>
<db:section xml:id="serializer">
<db:title>[override virtual] std::shared_ptr&lt;QAbstractProtobufSerializer&gt; QGrpcHttp2Channel::serializer() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>std::shared_ptr&lt;QAbstractProtobufSerializer&gt;</db:type>
<db:methodname>serializer</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::shared_ptr&lt;QAbstractProtobufSerializer&gt; serializer() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractgrpcchannel.xml#serializer" role="function">QAbstractGrpcChannel::serializer() const</db:link>.</db:para>
<db:para>Returns the newly created <db:link xlink:href="qprotobufserializer.xml">QProtobufSerializer</db:link> shared pointer.</db:para>
</db:section>
<db:section xml:id="startStream">
<db:title>[override virtual] void QGrpcHttp2Channel::startStream(QGrpcStream *<db:emphasis>grpcStream</db:emphasis>, QLatin1StringView <db:emphasis>service</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>startStream</db:methodname>
<db:methodparam>
<db:type>QGrpcStream *</db:type>
<db:parameter>grpcStream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1StringView</db:type>
<db:parameter>service</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startStream(QGrpcStream *grpcStream, QLatin1StringView service) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractgrpcchannel.xml#startStream" role="function">QAbstractGrpcChannel::startStream(QGrpcStream *stream, QLatin1StringView service)</db:link>.</db:para>
<db:para>Starts a stream on <db:code role="parameter">grpcStream</db:code> using <db:link xlink:href="qgrpcstream.xml#method">QGrpcStream::method</db:link>() and <db:code role="parameter">service</db:code> to get the name of the RPC method.</db:para>
<db:para>Calls <db:link xlink:href="qgrpcstream.xml#handler">QGrpcStream::handler</db:link>() when the stream receives data from the server. The method may emit <db:link xlink:href="qgrpcoperation.xml#errorOccurred">QGrpcStream::errorOccurred</db:link>() when the stream has terminated with an error.</db:para>
</db:section>
</db:section>
</db:article>
