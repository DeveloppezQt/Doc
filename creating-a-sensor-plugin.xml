<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating a sensor plugin</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Sensors Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="how-a-sensor-plugin-is-loaded">
<db:title>How a Sensor Plugin is Loaded</db:title>
<db:para>Since sensor backends are created on demand, the sensor plugin is loaded and asked to register the sensor backends it handles. The plugin should implement <db:link xlink:href="qsensorplugininterface.xml#registerSensors">QSensorPluginInterface::registerSensors</db:link>() and call <db:link xlink:href="qsensormanager.xml#registerBackend">QSensorManager::registerBackend</db:link>() to register available backends. Typically the plugin will also inherit from <db:link xlink:href="qsensorbackendfactory.xml">QSensorBackendFactory</db:link> and implement <db:link xlink:href="qsensorbackendfactory.xml#createBackend">QSensorBackendFactory::createBackend</db:link>() in order to instantiate backends it has registered.</db:para>
<db:para>The simplest plugin will have just once sensor backend although there is no reason that multiple sensor backends cannot be in a plugin.</db:para>
<db:para>An example follows.</db:para>
<db:programlisting language="cpp">class MyPluginClass : public QObject, public QSensorPluginInterface, public QSensorBackendFactory
{
    Q_OBJECT
    //Q_PLUGIN_METADATA(IID &quot;com.qt-project.Qt.QSensorPluginInterface/1.0&quot; FILE &quot;plugin.json&quot;)
    Q_INTERFACES(QSensorPluginInterface)
public:
    void registerSensors() override
    {
        QSensorManager::registerBackend(QAccelerometer::type, MyBackend::id, this);
    }

    QSensorBackend *createBackend(QSensor *sensor) override
    {
        if (sensor-&amp;gt;identifier() == MyBackend::id)
            return new MyBackend(sensor);
        return 0;
    }
};
</db:programlisting>
</db:section>
</db:article>
