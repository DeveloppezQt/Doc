<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>XML Streaming</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="xml-namespaces.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="An Introduction to Namespaces"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="xml-dom-tml.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Working with the DOM Tree"/></db:extendedlink>
<db:abstract>
<db:para>Qt XML Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides two classes for reading and writing XML through a simple streaming API: <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> and <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link>.</db:para>
<db:para>A stream reader reports an XML document as a stream of tokens. This differs from SAX as SAX applications provide handlers to receive XML events from the parser whereas the <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> drives the loop, pulling tokens from the reader when they are needed. This pulling approach makes it possible to build recursive descent parsers, allowing XML parsing code to be split into different methods or classes.</db:para>
<db:para><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> is a well-formed XML 1.0 parser that excludes external parsed entities. Hence, data provided by the stream reader adheres to the W3C's criteria for well-formed XML, as long as no error occurs. Otherwise, functions such as <db:link xlink:href="qxmlstreamreader.xml#atEnd">atEnd</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>() and <db:link xlink:href="qxmlstreamreader.xml#hasError">hasError</db:link>() can be used to check and view the errors.</db:para>
<db:para>An example of <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> implementation would be the XbelReader in <db:link xlink:href="qtxml-streambookmarks-example.xml">QXmlStream Bookmarks Example</db:link>, which wraps a <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link>. The constructor takes <db:code role="parameter">treeWidget</db:code> as a parameter and the class has Xbel specific functions:</db:para>
<db:programlisting language="cpp">    XbelReader(QTreeWidget *treeWidget);
    ...
    void readXBEL();
    void readTitle(QTreeWidgetItem *item);
    void readSeparator(QTreeWidgetItem *item);
    void readFolder(QTreeWidgetItem *item);
    void readBookmark(QTreeWidgetItem *item);

    QTreeWidgetItem *createChildItem(QTreeWidgetItem *item);

    QXmlStreamReader xml;
    QTreeWidget *treeWidget;
    ...
</db:programlisting>
<db:para>The read() function accepts a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> and sets it with <db:link xlink:href="qxmlstreamreader.xml#setDevice">setDevice</db:link>(). The <db:link xlink:href="qxmlstreamreader.xml#raiseError">raiseError</db:link>() function is used to display a custom error message, inidicating that the file's version is incorrect.</db:para>
<db:programlisting language="cpp">bool XbelReader::read(QIODevice *device)
{
    xml.setDevice(device);

    if (xml.readNextStartElement()) {
        if (xml.name() == QLatin1String(&quot;xbel&quot;)
            &amp;amp;&amp;amp; xml.attributes().value(versionAttribute()) == QLatin1String(&quot;1.0&quot;)) {
            readXBEL();
        } else {
            xml.raiseError(QObject::tr(&quot;The file is not an XBEL version 1.0 file.&quot;));
        }
    }

    return !xml.error();
}
</db:programlisting>
<db:para>The pendent to <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> is <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link>, which provides an XML writer with a simple streaming API. <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> operates on a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> and has specialized functions for all XML tokens or events you want to write, such as <db:link xlink:href="qxmlstreamwriter.xml#writeDTD">writeDTD</db:link>(), <db:link xlink:href="qxmlstreamwriter.xml#writeCharacters">writeCharacters</db:link>(), <db:link xlink:href="qxmlstreamwriter.xml#writeComment">writeComment</db:link>() and so on.</db:para>
<db:para>To write XML document with <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link>, you start a document with the <db:link xlink:href="qxmlstreamwriter.xml#writeStartDocument-1">writeStartDocument</db:link>() function and end it with <db:link xlink:href="qxmlstreamwriter.xml#writeEndDocument">writeEndDocument</db:link>(), which implicitly closes all remaining open tags. Element tags are opened with <db:link xlink:href="qxmlstreamwriter.xml#writeStartDocument-1">writeStartDocument</db:link>() and followed by <db:link xlink:href="qxmlstreamwriter.xml#writeAttribute">writeAttribute</db:link>() or <db:link xlink:href="qxmlstreamwriter.xml#writeAttributes">writeAttributes</db:link>(), element content, and then <db:link xlink:href="qxmlstreamwriter.xml#writeEndDocument">writeEndDocument</db:link>(). Also, <db:link xlink:href="qxmlstreamwriter.xml#writeEmptyElement">writeEmptyElement</db:link>() can be used to write empty elements.</db:para>
<db:para>Element content comprises characters, entity references or nested elements. Content can be written with <db:link xlink:href="qxmlstreamwriter.xml#writeCharacters">writeCharacters</db:link>(), a function that also takes care of escaping all forbidden characters and character sequences, <db:link xlink:href="qxmlstreamwriter.xml#writeEntityReference">writeEntityReference</db:link>(), or subsequent calls to <db:link xlink:href="qxmlstreamwriter.xml#writeStartElement">writeStartElement</db:link>().</db:para>
<db:para>The XbelWriter class from <db:link xlink:href="qtxml-streambookmarks-example.xml">QXmlStream Bookmarks Example</db:link> wraps a <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link>. Its writeFile() function illustrates the core functions of <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> mentioned above:</db:para>
<db:programlisting language="cpp">bool XbelWriter::writeFile(QIODevice *device)
{
    xml.setDevice(device);

    xml.writeStartDocument();
    xml.writeDTD(QStringLiteral(&quot;&amp;lt;!DOCTYPE xbel&amp;gt;&quot;));
    xml.writeStartElement(QStringLiteral(&quot;xbel&quot;));
    xml.writeAttribute(XbelReader::versionAttribute(), QStringLiteral(&quot;1.0&quot;));
    for (int i = 0; i &amp;lt; treeWidget-&amp;gt;topLevelItemCount(); ++i)
        writeItem(treeWidget-&amp;gt;topLevelItem(i));

    xml.writeEndDocument();
    return true;
}
</db:programlisting>
</db:article>
