<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Menus Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Menus example demonstrates how menus can be used in a main window application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>A menu widget can be either a pull-down menu in a menu bar or a standalone context menu. Pull-down menus are shown by the menu bar when the user clicks on the respective item or presses the specified shortcut key. Context menus are usually invoked by some special keyboard key or by right-clicking.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/menus-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A menu consists of a list of <db:emphasis>action</db:emphasis> items. In applications, many common commands can be invoked via menus, toolbar buttons as well as keyboard shortcuts. Since the user expects the commands to be performed in the same way, regardless of the user interface used, it is useful to represent each command as an action.</db:para>
<db:para>The Menus example consists of one single class, MainWindow, derived from the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> class. When choosing one of the action items in our application, it will display the item's path in its central widget.</db:para>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> provides a main application window, with a menu bar, tool bars, dock widgets and a status bar around a large central widget.</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow();

protected:
#ifndef QT_NO_CONTEXTMENU
    void contextMenuEvent(QContextMenuEvent *event) override;
#endif // QT_NO_CONTEXTMENU
</db:programlisting>
<db:para>In this example, we will see how to implement pull-down menus as well as a context menu. In order to implement a custom context menu we must reimplement <db:link xlink:href="qwidget.xml">QWidget</db:link>'s <db:link xlink:href="qwidget.xml#contextMenuEvent">contextMenuEvent</db:link>() function to receive the context menu events for our main window.</db:para>
<db:programlisting language="cpp">private slots:
    void newFile();
    void open();
    void save();
    void print();
    void undo();
    void redo();
    void cut();
    void copy();
    void paste();
    void bold();
    void italic();
    void leftAlign();
    void rightAlign();
    void justify();
    void center();
    void setLineSpacing();
    void setParagraphSpacing();
    void about();
    void aboutQt();
</db:programlisting>
<db:para>We must also implement a collection of private slots to respond to the user activating any of our menu entries. Note that these slots are left out of this documentation since they are trivial, i.e., most of them are only displaying the action's path in the main window's central widget.</db:para>
<db:programlisting language="cpp">private:
    void createActions();
    void createMenus();
</db:programlisting>
<db:para>We have chosen to simplify the constructor by implementing two private convenience functions to create the various actions, to add them to menus and to insert the menus into our main window's menu bar.</db:para>
<db:programlisting language="cpp">    QMenu *fileMenu;
    QMenu *editMenu;
    QMenu *formatMenu;
    QMenu *helpMenu;
    QActionGroup *alignmentGroup;
    QAction *newAct;
    QAction *openAct;
    QAction *saveAct;
    QAction *printAct;
    QAction *exitAct;
    QAction *undoAct;
    QAction *redoAct;
    QAction *cutAct;
    QAction *copyAct;
    QAction *pasteAct;
    QAction *boldAct;
    QAction *italicAct;
    QAction *leftAlignAct;
    QAction *rightAlignAct;
    QAction *justifyAct;
    QAction *centerAct;
    QAction *setLineSpacingAct;
    QAction *setParagraphSpacingAct;
    QAction *aboutAct;
    QAction *aboutQtAct;
    QLabel *infoLabel;
};
</db:programlisting>
<db:para>Finally, we declare the various menus and actions as well as a simple information label in the application wide scope.</db:para>
<db:para>The <db:link xlink:href="qmenu.xml">QMenu</db:link> class provides a menu widget for use in menu bars, context menus, and other popup menus while the <db:link xlink:href="qaction.xml">QAction</db:link> class provides an abstract user interface action that can be inserted into widgets.</db:para>
<db:para>In some situations it is useful to group actions together, e.g., we have a <db:guilabel>Left Align</db:guilabel> action, a <db:guilabel>Right Align</db:guilabel> action, a <db:guilabel>Justify</db:guilabel> action, and a <db:guilabel>Center</db:guilabel> action, and we want only one of these actions to be active at any one time. One simple way of achieving this is to group the actions together in an action group using the <db:link xlink:href="qactiongroup.xml">QActionGroup</db:link> class.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:para>In the constructor, we start off by creating a regular <db:link xlink:href="qwidget.xml">QWidget</db:link> and make it our main window's central widget. Note that the main window takes ownership of the widget pointer and deletes it at the appropriate time.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
{
    QWidget *widget = new QWidget;
    setCentralWidget(widget);

    QWidget *topFiller = new QWidget;
    topFiller-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);

    infoLabel = new QLabel(tr(&quot;&lt;i&gt;Choose a menu option, or right-click to &quot;
                              &quot;invoke a context menu&lt;/i&gt;&quot;));
    infoLabel-&gt;setFrameStyle(QFrame::StyledPanel | QFrame::Sunken);
    infoLabel-&gt;setAlignment(Qt::AlignCenter);

    QWidget *bottomFiller = new QWidget;
    bottomFiller-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;setMargin(5);
    layout-&gt;addWidget(topFiller);
    layout-&gt;addWidget(infoLabel);
    layout-&gt;addWidget(bottomFiller);
    widget-&gt;setLayout(layout);
</db:programlisting>
<db:para>Then we create the information label as well as a top and bottom filler that we add to a layout which we install on the central widget. <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> objects come with their own customized layout and setting a layout on a the actual main window, or creating a layout with a main window as a parent, is considered an error. You should always set your own layout on the central widget instead.</db:para>
<db:programlisting language="cpp">    createActions();
    createMenus();

    QString message = tr(&quot;A context menu is available by right-clicking&quot;);
    statusBar()-&gt;showMessage(message);

    setWindowTitle(tr(&quot;Menus&quot;));
    setMinimumSize(160, 160);
    resize(480, 320);
}
</db:programlisting>
<db:para>To create the actions and menus we call our two convenience functions: createActions() and createMenus(). We will get back to these shortly.</db:para>
<db:para><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>'s <db:link xlink:href="qmainwindow.xml#statusBar">statusBar</db:link>() function returns the status bar for the main window (if the status bar does not exist, this function will create and return an empty status bar). We initialize the status bar and window title, resize the window to an appropriate size as well as ensure that the main window cannot be resized to a smaller size than the given one.</db:para>
<db:para>Now, let's take a closer look at the createActions() convenience function that creates the various actions:</db:para>
<db:programlisting language="cpp">void MainWindow::createActions()
{
    newAct = new QAction(tr(&quot;&amp;New&quot;), this);
    newAct-&gt;setShortcuts(QKeySequence::New);
    newAct-&gt;setStatusTip(tr(&quot;Create a new file&quot;));
    connect(newAct, &amp;QAction::triggered, this, &amp;MainWindow::newFile);
    ...
</db:programlisting>
<db:para>A <db:link xlink:href="qaction.xml">QAction</db:link> object may contain an icon, a text, a shortcut, a status tip, a &quot;What's This?&quot; text, and a tooltip. Most of these can be set in the constructor, but they can also be set independently using the provided convenience functions.</db:para>
<db:para>In the createActions() function, we first create a newAct action. We make <db:guilabel>Ctrl+N</db:guilabel> its shortcut using the <db:link xlink:href="qaction.xml#shortcut-prop">QAction::setShortcut</db:link>() function, and we set its status tip using the <db:link xlink:href="qaction.xml#statusTip-prop">QAction::setStatusTip</db:link>() function (the status tip is displayed on all status bars provided by the action's top-level parent widget). We also connect its <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal to the newFile() slot.</db:para>
<db:para>The rest of the actions are created in a similar manner. Please see the source code for details.</db:para>
<db:programlisting language="cpp">    alignmentGroup = new QActionGroup(this);
    alignmentGroup-&gt;addAction(leftAlignAct);
    alignmentGroup-&gt;addAction(rightAlignAct);
    alignmentGroup-&gt;addAction(justifyAct);
    alignmentGroup-&gt;addAction(centerAct);
    leftAlignAct-&gt;setChecked(true);
}
</db:programlisting>
<db:para>Once we have created the <db:guilabel>Left Align</db:guilabel>, <db:guilabel>Right Align</db:guilabel>, <db:guilabel>Justify</db:guilabel>, and a <db:guilabel>Center</db:guilabel> actions, we can also create the previously mentioned action group.</db:para>
<db:para>Each action is added to the group using <db:link xlink:href="qactiongroup.xml">QActionGroup</db:link>'s <db:link xlink:href="qactiongroup.xml#addAction">addAction</db:link>() function. Note that an action also can be added to a group by creating it with the group as its parent. Since an action group is exclusive by default, only one of the actions in the group is checked at any one time (this can be altered using the <db:link xlink:href="qactiongroup.xml#exclusive-prop">QActionGroup::setExclusive</db:link>() function).</db:para>
<db:para>When all the actions are created, we use the createMenus() function to add the actions to the menus and to insert the menus into the menu bar:</db:para>
<db:programlisting language="cpp">void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(newAct);
    fileMenu-&gt;addAction(openAct);
    fileMenu-&gt;addAction(saveAct);
    fileMenu-&gt;addAction(printAct);
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(exitAct);

    editMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Edit&quot;));
    editMenu-&gt;addAction(undoAct);
    editMenu-&gt;addAction(redoAct);
    editMenu-&gt;addSeparator();
    editMenu-&gt;addAction(cutAct);
    editMenu-&gt;addAction(copyAct);
    editMenu-&gt;addAction(pasteAct);
    editMenu-&gt;addSeparator();

    helpMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Help&quot;));
    helpMenu-&gt;addAction(aboutAct);
    helpMenu-&gt;addAction(aboutQtAct);
</db:programlisting>
<db:para><db:link xlink:href="qmenubar.xml">QMenuBar</db:link>'s <db:link xlink:href="qmenubar.xml#addMenu">addMenu</db:link>() function appends a new <db:link xlink:href="qmenu.xml">QMenu</db:link> with the given title, to the menu bar (note that the menu bar takes ownership of the menu). We use <db:link xlink:href="qwidget.xml">QWidget</db:link>'s <db:link xlink:href="qwidget.xml#addAction">addAction</db:link>() function to add each action to the corresponding menu.</db:para>
<db:para>Alternatively, the <db:link xlink:href="qmenu.xml">QMenu</db:link> class provides several <db:link xlink:href="qwidget.xml#addAction">addAction</db:link>() convenience functions that create and add new actions from given texts and/or icons. You can also provide a member that will automatically connect to the new action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal, and a shortcut represented by a <db:link xlink:href="qkeysequence.xml">QKeySequence</db:link> instance.</db:para>
<db:para>The <db:link xlink:href="qmenu.xml#addSeparator">QMenu::addSeparator</db:link>() function creates and returns a new separator action, i.e. an action for which <db:link xlink:href="qaction.xml#isSeparator">QAction::isSeparator</db:link>() returns true, and adds the new action to the menu's list of actions.</db:para>
<db:programlisting language="cpp">    formatMenu = editMenu-&gt;addMenu(tr(&quot;&amp;Format&quot;));
    formatMenu-&gt;addAction(boldAct);
    formatMenu-&gt;addAction(italicAct);
    formatMenu-&gt;addSeparator()-&gt;setText(tr(&quot;Alignment&quot;));
    formatMenu-&gt;addAction(leftAlignAct);
    formatMenu-&gt;addAction(rightAlignAct);
    formatMenu-&gt;addAction(justifyAct);
    formatMenu-&gt;addAction(centerAct);
    formatMenu-&gt;addSeparator();
    formatMenu-&gt;addAction(setLineSpacingAct);
    formatMenu-&gt;addAction(setParagraphSpacingAct);
}
</db:programlisting>
<db:para>Note the <db:guilabel>Format</db:guilabel> menu. First of all, it is added as a submenu to the <db:guilabel>Edit</db:guilabel> Menu using <db:link xlink:href="qmenu.xml">QMenu</db:link>'s <db:link xlink:href="qmenu.xml#addMenu">addMenu</db:link>() function. Secondly, take a look at the alignment actions: In the createActions() function we added the leftAlignAct, rightAlignAct, justifyAct and centerAct actions to an action group. Nevertheless, we must add each action to the menu separately while the action group does its magic behind the scene.</db:para>
<db:programlisting language="cpp">#ifndef QT_NO_CONTEXTMENU
void MainWindow::contextMenuEvent(QContextMenuEvent *event)
{
    QMenu menu(this);
    menu.addAction(cutAct);
    menu.addAction(copyAct);
    menu.addAction(pasteAct);
    menu.exec(event-&gt;globalPos());
}
#endif // QT_NO_CONTEXTMENU
</db:programlisting>
<db:para>To provide a custom context menu, we must reimplement <db:link xlink:href="qwidget.xml">QWidget</db:link>'s <db:link xlink:href="qwidget.xml#contextMenuEvent">contextMenuEvent</db:link>() function to receive the widget's context menu events (note that the default implementation simply ignores these events).</db:para>
<db:para>Whenever we receive such an event, we create a menu containing the <db:guilabel>Cut</db:guilabel>, <db:guilabel>Copy</db:guilabel> and <db:guilabel>Paste</db:guilabel> actions. Context menus can be executed either asynchronously using the <db:link xlink:href="qmenu.xml#popup">popup</db:link>() function or synchronously using the <db:link xlink:href="qmenu.xml#exec">exec</db:link>() function. In this example, we have chosen to show the menu using its <db:link xlink:href="qmenu.xml#exec">exec</db:link>() function. By passing the event's position as argument we ensure that the context menu appears at the expected position.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="mainwindows/menus/main.cpp">mainwindows/menus/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mainwindows/menus/mainwindow.cpp">mainwindows/menus/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mainwindows/menus/mainwindow.h">mainwindows/menus/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mainwindows/menus/menus.pro">mainwindows/menus/menus.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
