<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CMake Commands in Qt6 Protobuf</db:title>
<db:productname>QtProtobuf</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Protobuf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Protobuf Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>You should call the following CMake commands to use the Qt6::Protobuf module in your project:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Protobuf)

target_link_libraries(mytarget PRIVATE Qt6::Protobuf)
</db:programlisting>
<db:para>You can use <db:emphasis>qt-add-protobuf</db:emphasis> CMake macros. The macros implicitly calls Protobuf code generation for qt-project.</db:para>
<db:para>The macros usage example:</db:para>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.16...3.22)
project(MyThings)

find_package(Qt6 REQUIRED COMPONENTS Protobuf)
qt_standard_project_setup()

qt_add_protobuf(MyMessages
    GENERATE_PACKAGE_SUBFOLDERS
    PROTO_FILES
        path/to/message.proto
        path/to/other_message.proto
    PROTO_INCLUDES
        /path/to/proto/include
)

qt_add_executable(MyApp main.cpp)

target_link_libraries(MyApp PRIVATE MyMessages)
</db:programlisting>
<db:para>In the example above we generate a library called <db:code>MyMessages</db:code> which contains the message types defined in the paths passed to the <db:code>PROTO_FILES</db:code> option. We use the <db:code>GENERATE_PACKAGE_SUBFOLDERS</db:code> option to generate a folder structure for the generated files. And the <db:code>PROTO_INCLUDES</db:code> option tells protoc to look for dependencies/imports in the specified directories.</db:para>
<db:para>We then create a target for an executable called <db:code>MyApp</db:code> which we link to the <db:code>MyMessages</db:code> library.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="cmake-command-reference.xml">CMake Command Reference</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
<db:section>
<db:title>Contents</db:title>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qt-add-protobuf.xml" xlink:role="page">qt_add_protobuf</db:link></db:term>
<db:listitem>
<db:para>Generates Qt-based C++ source code using a protobuf schema</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
