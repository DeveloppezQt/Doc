<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Spectrum Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Analyzing a raw audio stream using the FFTReal library.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;tonegeneratordialog.h&quot;
#include &lt;QComboBox&gt;
#include &lt;QDialogButtonBox&gt;
#include &lt;QLabel&gt;
#include &lt;QPushButton&gt;
#include &lt;QVBoxLayout&gt;
#include &lt;QCheckBox&gt;
#include &lt;QSlider&gt;
#include &lt;QSpinBox&gt;

const int ToneGeneratorFreqMin = 1;
const int ToneGeneratorFreqMax = 1000;
const int ToneGeneratorFreqDefault = 440;
const int ToneGeneratorAmplitudeDefault = 75;

ToneGeneratorDialog::ToneGeneratorDialog(QWidget *parent)
    :   QDialog(parent)
    ,   m_toneGeneratorSweepCheckBox(new QCheckBox(tr(&quot;Frequency sweep&quot;), this))
    ,   m_frequencySweepEnabled(true)
    ,   m_toneGeneratorControl(new QWidget(this))
    ,   m_toneGeneratorFrequencyControl(new QWidget(this))
    ,   m_frequencySlider(new QSlider(Qt::Horizontal, this))
    ,   m_frequencySpinBox(new QSpinBox(this))
    ,   m_frequency(ToneGeneratorFreqDefault)
    ,   m_amplitudeSlider(new QSlider(Qt::Horizontal, this))
{
    QVBoxLayout *dialogLayout = new QVBoxLayout(this);

    m_toneGeneratorSweepCheckBox-&gt;setChecked(true);

    // Configure tone generator controls
    m_frequencySlider-&gt;setRange(ToneGeneratorFreqMin, ToneGeneratorFreqMax);
    m_frequencySlider-&gt;setValue(ToneGeneratorFreqDefault);
    m_frequencySpinBox-&gt;setRange(ToneGeneratorFreqMin, ToneGeneratorFreqMax);
    m_frequencySpinBox-&gt;setValue(ToneGeneratorFreqDefault);
    m_amplitudeSlider-&gt;setRange(0, 100);
    m_amplitudeSlider-&gt;setValue(ToneGeneratorAmplitudeDefault);

    // Add widgets to layout
    QGridLayout *frequencyControlLayout = new QGridLayout;
    QLabel *frequencyLabel = new QLabel(tr(&quot;Frequency (Hz)&quot;), this);
    frequencyControlLayout-&gt;addWidget(frequencyLabel, 0, 0, 2, 1);
    frequencyControlLayout-&gt;addWidget(m_frequencySlider, 0, 1);
    frequencyControlLayout-&gt;addWidget(m_frequencySpinBox, 1, 1);
    m_toneGeneratorFrequencyControl-&gt;setLayout(frequencyControlLayout);
    m_toneGeneratorFrequencyControl-&gt;setEnabled(false);

    QGridLayout *toneGeneratorLayout = new QGridLayout;
    QLabel *amplitudeLabel = new QLabel(tr(&quot;Amplitude&quot;), this);
    toneGeneratorLayout-&gt;addWidget(m_toneGeneratorSweepCheckBox, 0, 1);
    toneGeneratorLayout-&gt;addWidget(m_toneGeneratorFrequencyControl, 1, 0, 1, 2);
    toneGeneratorLayout-&gt;addWidget(amplitudeLabel, 2, 0);
    toneGeneratorLayout-&gt;addWidget(m_amplitudeSlider, 2, 1);
    m_toneGeneratorControl-&gt;setLayout(toneGeneratorLayout);
    m_toneGeneratorControl-&gt;setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Fixed);
    dialogLayout-&gt;addWidget(m_toneGeneratorControl);

    // Connect
    CHECKED_CONNECT(m_toneGeneratorSweepCheckBox, SIGNAL(toggled(bool)),
                    this, SLOT(frequencySweepEnabled(bool)));
    CHECKED_CONNECT(m_frequencySlider, SIGNAL(valueChanged(int)),
                    m_frequencySpinBox, SLOT(setValue(int)));
    CHECKED_CONNECT(m_frequencySpinBox, SIGNAL(valueChanged(int)),
                    m_frequencySlider, SLOT(setValue(int)));

    // Add standard buttons to layout
    QDialogButtonBox *buttonBox = new QDialogButtonBox(this);
    buttonBox-&gt;setStandardButtons(QDialogButtonBox::Ok | QDialogButtonBox::Cancel);
    dialogLayout-&gt;addWidget(buttonBox);

    // Connect standard buttons
    CHECKED_CONNECT(buttonBox-&gt;button(QDialogButtonBox::Ok), SIGNAL(clicked()),
                    this, SLOT(accept()));
    CHECKED_CONNECT(buttonBox-&gt;button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
                    this, SLOT(reject()));

    setLayout(dialogLayout);
}

ToneGeneratorDialog::~ToneGeneratorDialog()
{

}

bool ToneGeneratorDialog::isFrequencySweepEnabled() const
{
    return m_toneGeneratorSweepCheckBox-&gt;isChecked();
}

qreal ToneGeneratorDialog::frequency() const
{
    return qreal(m_frequencySlider-&gt;value());
}

qreal ToneGeneratorDialog::amplitude() const
{
    return qreal(m_amplitudeSlider-&gt;value()) / 100.0;
}

void ToneGeneratorDialog::frequencySweepEnabled(bool enabled)
{
    m_frequencySweepEnabled = enabled;
    m_toneGeneratorFrequencyControl-&gt;setEnabled(!enabled);
}

</db:programlisting>
</db:article>
