<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Simple Bar Graph</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="qml-qtdatavisualization-bars3d.xml">Bars3D</db:link> in a QML application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Simple Bar Graph</db:emphasis> shows how to make a simple 3D bar graph using <db:link xlink:href="qml-qtdatavisualization-bars3d.xml">Bars3D</db:link> and QML.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlbars-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The following sections describe how to switch series and display more than one series at a time. For more information about basic QML application functionality, see <db:link xlink:href="qtdatavis3d-qmlscatter-example.xml">Simple Scatter Graph</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>Data</db:title>
<db:para>The example data set is the monthly income and expenses of a fictional company over several years. The data is defined in a list model in <db:code>Data.qml</db:code> like this:</db:para>
<db:programlisting language="qml">ListModel {
    id: dataModel
    ListElement{ timestamp: &quot;2016-01&quot;; expenses: &quot;-4&quot;;  income: &quot;5&quot; }
    ListElement{ timestamp: &quot;2016-02&quot;; expenses: &quot;-5&quot;;  income: &quot;6&quot; }
    ListElement{ timestamp: &quot;2016-03&quot;; expenses: &quot;-7&quot;;  income: &quot;4&quot; }
    ...
</db:programlisting>
<db:para>Each data item has three roles: timestamp, income, and expenses. The timestamp value is in format: <db:code>&lt;four digit year&gt;-&lt;two digit month&gt;</db:code>. Usually, you would map years and months to rows and columns of a bar chart, but you can only show either income or expenses as the value.</db:para>
<db:para>Now, add the data to the <db:link xlink:href="qml-qtdatavisualization-bars3d.xml">Bars3D</db:link> graph. Create two <db:link xlink:href="qml-qtdatavisualization-bar3dseries.xml">Bar3DSeries</db:link> inside it, starting with a series for the income:</db:para>
<db:programlisting language="qml">Bar3DSeries {
    id: barSeries
    itemLabelFormat: &quot;Income, @colLabel, @rowLabel: @valueLabel&quot;
    baseGradient: barGradient

    ItemModelBarDataProxy {
        id: modelProxy
        itemModel: graphData.model
        rowRole: &quot;timestamp&quot;
        columnRole: &quot;timestamp&quot;
        valueRole: &quot;income&quot;
        rowRolePattern: /^(\d\d\d\d).*$/
        columnRolePattern: /^.*-(\d\d)$/
        rowRoleReplace: &quot;\\1&quot;
        columnRoleReplace: &quot;\\1&quot;
        multiMatchBehavior: ItemModelBarDataProxy.MMBCumulative
    }
    ...
</db:programlisting>
<db:para>The data is attached to the <db:code>itemModel</db:code> property of the <db:link xlink:href="qml-qtdatavisualization-itemmodelbardataproxy.xml">ItemModelBarDataProxy</db:link> inside the series. For <db:code>valueRole</db:code>, specify the <db:code>income</db:code> field, as it contains the value you want. Getting the years and months is a bit more complicated, since they are both found in the same field. To extract those values, specify the <db:code>timestamp</db:code> field for both <db:code>rowRole</db:code> and <db:code>columnRole</db:code>, and additionally specify a search pattern and a replace rule for those roles to extract the correct portion of the field contents for each role. The search pattern is a normal JavaScript regular expression and the replace rule specifies what the field content that matches the regular expression is replaced with. In this case, replace the entire field content with just the year or the month, which is the first captured substring for both rows and columns. For more information about the replace functionality with regular expression, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregexp.xml">QRegExp</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation.</db:para>
<db:para>The <db:code>multiMatchBehavior</db:code> property specifies what to do in case multiple item model items match the same row/column combination. In this case, add their values together. This property has no effect when showing values for each month, as there are no duplicate months in our item model, but it becomes relevant later when you want to show the yearly totals.</db:para>
<db:para>Then, add another series for the expenses:</db:para>
<db:programlisting language="qml">Bar3DSeries {
    id: secondarySeries
    visible: false
    itemLabelFormat: &quot;Expenses, @colLabel, @rowLabel: -@valueLabel&quot;
    baseGradient: secondaryGradient

    ItemModelBarDataProxy {
        id: secondaryProxy
        itemModel: graphData.model
        rowRole: &quot;timestamp&quot;
        columnRole: &quot;timestamp&quot;
        valueRole: &quot;expenses&quot;
        rowRolePattern: /^(\d\d\d\d).*$/
        columnRolePattern: /^.*-(\d\d)$/
        valueRolePattern: /-/
        rowRoleReplace: &quot;\\1&quot;
        columnRoleReplace: &quot;\\1&quot;
        multiMatchBehavior: ItemModelBarDataProxy.MMBCumulative
    }
    ...
</db:programlisting>
<db:para>The model contains expenses as negative values, but you want to show them as positive bars, so that they can be easily compared to income bars. Use the <db:code>valueRolePattern</db:code> to remove the minus sign to achieve this. No replacement string needs to be specified as the default replacement is an empty string.</db:para>
<db:para>Use the <db:code>visible</db:code> property of the series to hide the second series for now.</db:para>
</db:section>
<db:section xml:id="custom-axis-labels">
<db:title>Custom Axis Labels</db:title>
<db:para><db:code>Axes.qml</db:code> redefines the category labels for the column axis because the data contains numbers for months, which would clutter the labels:</db:para>
<db:programlisting language="qml">CategoryAxis3D {
    id: columnAxis
    labels: [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,
        &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]
    labelAutoRotation: 30
}
</db:programlisting>
<db:para>To make axis labels more readable at low camera angles, set automatic axis label rotation.</db:para>
</db:section>
<db:section xml:id="switching-series">
<db:title>Switching Series</db:title>
<db:para>In <db:code>main.qml</db:code>, set up the graph and various UI elements. There are three interesting code blocks to highlight here. The first one shows how to change the visualized data between income, expenses, and both, by simply changing the visibility of the two series:</db:para>
<db:programlisting language="qml">onClicked: {
    if (text === &quot;Show Expenses&quot;) {
        barSeries.visible = false;
        secondarySeries.visible = true;
        barGraph.valueAxis.labelFormat = &quot;-%.2f M\u20AC&quot;;
        secondarySeries.itemLabelFormat = &quot;Expenses, @colLabel, @rowLabel: @valueLabel&quot;;
        text = &quot;Show Both&quot;;
    } else if (text === &quot;Show Both&quot;) {
        barSeries.visible = true;
        barGraph.valueAxis.labelFormat = &quot;%.2f M\u20AC&quot;;
        secondarySeries.itemLabelFormat = &quot;Expenses, @colLabel, @rowLabel: -@valueLabel&quot;;
        text = &quot;Show Income&quot;;
    } else { // text === &quot;Show Income&quot;
        secondarySeries.visible = false;
        text = &quot;Show Expenses&quot;;
    }
}
</db:programlisting>
<db:para>The axis label format and item selection label formats are tweaked to get the negative sign showing properly for expenses, which were actually resolved as positive values.</db:para>
<db:para>The second interesting block is where the visualized data is changed by adjusting the proxy properties:</db:para>
<db:programlisting language="qml">onClicked: {
    if (text === &quot;Show yearly totals&quot;) {
        modelProxy.autoRowCategories = true;
        secondaryProxy.autoRowCategories = true;
        modelProxy.columnRolePattern = /^.*$/;
        secondaryProxy.columnRolePattern = /^.*$/;
        graphAxes.value.autoAdjustRange = true;
        barGraph.columnAxis = graphAxes.total;
        text = &quot;Show all years&quot;;
    } else if (text === &quot;Show all years&quot;) {
        modelProxy.autoRowCategories = true;
        secondaryProxy.autoRowCategories = true;
        modelProxy.columnRolePattern = /^.*-(\d\d)$/;
        secondaryProxy.columnRolePattern = /^.*-(\d\d)$/;
        graphAxes.value.min = 0;
        graphAxes.value.max = 35;
        barGraph.columnAxis = graphAxes.column;
        text = &quot;Show 2020 - 2022&quot;;
    } else { // text === &quot;Show 2020 - 2022&quot;
        // Explicitly defining row categories, since we do not want to show data for
        // all years in the model, just for the selected ones.
        modelProxy.autoRowCategories = false;
        secondaryProxy.autoRowCategories = false;
        modelProxy.rowCategories = [&quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;];
        secondaryProxy.rowCategories = [&quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;];
        text = &quot;Show yearly totals&quot;;
    }
}
</db:programlisting>
<db:para>To show the yearly totals, combine the twelve months of each year into a single bar. This is achieved by specifying a <db:code>columnRolePattern</db:code> that matches all model items. That way, the data proxy will only have a single column. The cumulative <db:code>multiMatchBehavior</db:code> specified earlier for the proxy becomes relevant now, causing the values of all twelve months of each year to be added up into a single bar.</db:para>
<db:para>To show just a subset of years, set <db:code>autoRowCategories</db:code> to false on the <db:link xlink:href="qml-qtdatavisualization-itemmodelbardataproxy.xml">ItemModelBarDataProxy</db:link> item and define the row categories explicitly. This way, only the items in the specified row categories are visualized.</db:para>
<db:para>The third interesting block shows how to get the row and column index of an item if you know the row and column values by using <db:link xlink:href="qml-qtdatavisualization-itemmodelbardataproxy.xml">ItemModelBarDataProxy</db:link> methods <db:code>rowCategoryIndex()</db:code> and <db:code>columnCategoryIndex()</db:code>:</db:para>
<db:programlisting language="qml">onCurrentRowChanged: {
    var timestamp = graphData.model.get(mainview.currentRow).timestamp;
    var pattern = /(\d\d\d\d)-(\d\d)/;
    var matches = pattern.exec(timestamp);
    var rowIndex = modelProxy.rowCategoryIndex(matches[1]);
    var colIndex;
    if (barGraph.columnAxis == graphAxes.total)
        colIndex = 0 ;// Just one column when showing yearly totals
    else
        colIndex = modelProxy.columnCategoryIndex(matches[2]);
    if (selectedSeries.visible)
        mainview.selectedSeries.selectedBar = Qt.point(rowIndex, colIndex);
    else if (barSeries.visible)
        barSeries.selectedBar = Qt.point(rowIndex, colIndex);
    else
        secondarySeries.selectedBar = Qt.point(rowIndex, colIndex);
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdatavis3d.git/tree/examples/datavisualization/qmlbars?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
