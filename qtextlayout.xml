<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextLayout Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> class is used to lay out and render text.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextLayout is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>It offers many features expected from a modern text layout engine, including Unicode compliant rendering, line breaking and handling of cursor positioning. It can also produce and render device independent layout, something that is important for WYSIWYG applications.</db:para>
<db:para>The class has a rather low level API and unless you intend to implement your own text rendering for some specialized widget, you probably won't need to use it directly.</db:para>
<db:para><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> can be used with both plain and rich text.</db:para>
<db:para><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> can be used to create a sequence of <db:link xlink:href="qtextline.xml">QTextLine</db:link> instances with given widths and can position them independently on the screen. Once the layout is done, these lines can be drawn on a paint device.</db:para>
<db:para>The text to be laid out can be provided in the constructor or set with <db:link xlink:href="qtextlayout.xml#setText">setText</db:link>().</db:para>
<db:para>The layout can be seen as a sequence of <db:link xlink:href="qtextline.xml">QTextLine</db:link> objects; use <db:link xlink:href="qtextlayout.xml#createLine">createLine</db:link>() to create a <db:link xlink:href="qtextline.xml">QTextLine</db:link> instance, and <db:link xlink:href="qtextlayout.xml#lineAt">lineAt</db:link>() or <db:link xlink:href="qtextlayout.xml#lineForTextPosition">lineForTextPosition</db:link>() to retrieve created lines.</db:para>
<db:para>Here is a code snippet that demonstrates the layout phase:</db:para>
<db:programlisting language="cpp">int leading = fontMetrics.leading();
qreal height = 0;
textLayout.setCacheEnabled(true);
textLayout.beginLayout();
while (true) {
    QTextLine line = textLayout.createLine();
    if (!line.isValid())
        break;

    line.setLineWidth(lineWidth);
    height += leading;
    line.setPosition(QPointF(0, height));
    height += line.height();
}
textLayout.endLayout();
</db:programlisting>
<db:para>The text can then be rendered by calling the layout's <db:link xlink:href="qtextlayout.xml#draw">draw</db:link>() function:</db:para>
<db:programlisting language="cpp">QPainter painter(this);
textLayout.draw(&amp;painter, QPoint(0, 0));
</db:programlisting>
<db:para>It is also possible to draw each line individually, for instance to draw the last line that fits into a widget elided:</db:para>
<db:programlisting language="cpp">QPainter painter(this);
QFontMetrics fontMetrics = painter.fontMetrics();

int lineSpacing = fontMetrics.lineSpacing();
int y = 0;

QTextLayout textLayout(content, painter.font());
textLayout.beginLayout();
while (true) {
    QTextLine line = textLayout.createLine();

    if (!line.isValid())
        break;

    line.setLineWidth(width());
    const int nextLineY = y + lineSpacing;

    if (height() &gt;= nextLineY + lineSpacing) {
        line.draw(&amp;painter, QPoint(0, y));
        y = nextLineY;
    } else {
        const QString lastLine = content.mid(line.textStart());
        const QString elidedLastLine = fontMetrics.elidedText(lastLine, Qt::ElideRight, width());
        painter.drawText(QPoint(0, y + fontMetrics.ascent()), elidedLastLine);
        line = textLayout.createLine();
        break;
    }
}
textLayout.endLayout();
</db:programlisting>
<db:para>For a given position in the text you can find a valid cursor position with <db:link xlink:href="qtextlayout.xml#isValidCursorPosition">isValidCursorPosition</db:link>(), <db:link xlink:href="qtextlayout.xml#nextCursorPosition">nextCursorPosition</db:link>(), and <db:link xlink:href="qtextlayout.xml#previousCursorPosition">previousCursorPosition</db:link>().</db:para>
<db:para>The <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> itself can be positioned with <db:link xlink:href="qtextlayout.xml#setPosition">setPosition</db:link>(); it has a <db:link xlink:href="qtextlayout.xml#boundingRect">boundingRect</db:link>(), and a <db:link xlink:href="qtextlayout.xml#minimumWidth">minimumWidth</db:link>() and a <db:link xlink:href="qtextlayout.xml#maximumWidth">maximumWidth</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml">QStaticText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CursorMode-enum">
<db:title>enum QTextLayout::CursorMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:emphasis>::SkipCharacters</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:emphasis>::SkipWords</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="GlyphRunRetrievalFlag-enum">
<db:title>[since 6.5] enum QTextLayout::GlyphRunRetrievalFlag</db:title>
<db:bridgehead renderas="sect2">flags QTextLayout::GlyphRunRetrievalFlags</db:bridgehead>
<db:para>GlyphRunRetrievalFlag specifies flags passed to the <db:link xlink:href="qtextlayout.xml#glyphRuns">glyphRuns</db:link>() functions to determine which properties of the layout are returned in the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> objects. Since each property will consume memory and may require additional allocations, it is a good practice to only request the properties you will need to access later.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:emphasis>::RetrieveGlyphIndexes</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Retrieves the indexes in the font which correspond to the glyphs.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:emphasis>::RetrieveGlyphPositions</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Retrieves the relative positions of the glyphs in the layout.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:emphasis>::RetrieveStringIndexes</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Retrieves the indexes in the original string that correspond to each of the glyphs.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:emphasis>::RetrieveString</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>Retrieves the original source string from the layout.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:emphasis>::RetrieveAll</db:code></db:para>
</db:td>
<db:td><db:code>0xffff</db:code></db:td>
<db:td>
<db:para>Retrieves all available properties of the layout.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.5.</db:para>
<db:para>The <db:code>GlyphRunRetrievalFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;GlyphRunRetrievalFlag&gt;. </db:code>It stores an OR combination of <db:code>GlyphRunRetrievalFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#glyphRuns">glyphRuns</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#glyphRuns">QTextLine::glyphRuns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextLayout">
<db:title>QTextLayout::QTextLayout()</db:title>
<db:para>Constructs an empty text layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextLayout-1">
<db:title>QTextLayout::QTextLayout(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Constructs a text layout to lay out the given <db:code role="parameter">text</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextLayout-2">
<db:title>QTextLayout::QTextLayout(const QString &amp;<db:emphasis>text</db:emphasis>, const QFont &amp;<db:emphasis>font</db:emphasis>, const QPaintDevice *<db:emphasis>paintdevice</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a text layout to lay out the given <db:code role="parameter">text</db:code> with the specified <db:code role="parameter">font</db:code>.</db:para>
<db:para>All the metric and layout calculations will be done in terms of the paint device, <db:code role="parameter">paintdevice</db:code>. If <db:code role="parameter">paintdevice</db:code> is <db:code>nullptr</db:code> the calculations will be done in screen metrics.</db:para>
</db:section>
<db:section xml:id="dtor.QTextLayout">
<db:title>[noexcept] QTextLayout::~QTextLayout()</db:title>
<db:para>Destructs the layout.</db:para>
</db:section>
<db:section xml:id="beginLayout">
<db:title>void QTextLayout::beginLayout()</db:title>
<db:para>Begins the layout process.</db:para>
<db:warning>
<db:para>This will invalidate the layout, so all existing <db:link xlink:href="qtextline.xml">QTextLine</db:link> objects that refer to the previous contents should now be discarded.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#endLayout">endLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRectF QTextLayout::boundingRect() const</db:title>
<db:para>The smallest rectangle that contains all the lines in the layout.</db:para>
</db:section>
<db:section xml:id="cacheEnabled">
<db:title>bool QTextLayout::cacheEnabled() const</db:title>
<db:para>Returns <db:code>true</db:code> if the complete layout information is cached; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#setCacheEnabled">setCacheEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearFormats">
<db:title>void QTextLayout::clearFormats()</db:title>
<db:para>Clears the list of additional formats supported by the text layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#formats">formats</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#setFormats">setFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearLayout">
<db:title>void QTextLayout::clearLayout()</db:title>
<db:para>Clears the line information in the layout. After having called this function, <db:link xlink:href="qtextlayout.xml#lineCount">lineCount</db:link>() returns 0.</db:para>
<db:warning>
<db:para>This will invalidate the layout, so all existing <db:link xlink:href="qtextline.xml">QTextLine</db:link> objects that refer to the previous contents should now be discarded.</db:para>
</db:warning>
</db:section>
<db:section xml:id="createLine">
<db:title>QTextLine QTextLayout::createLine()</db:title>
<db:para>Returns a new text line to be laid out if there is text to be inserted into the layout; otherwise returns an invalid text line.</db:para>
<db:para>The text layout creates a new line object that starts after the last line in the layout, or at the beginning if the layout is empty. The layout maintains an internal cursor, and each line is filled with text from the cursor position onwards when the <db:link xlink:href="qtextline.xml#setLineWidth">QTextLine::setLineWidth</db:link>() function is called.</db:para>
<db:para>Once <db:link xlink:href="qtextline.xml#setLineWidth">QTextLine::setLineWidth</db:link>() is called, a new line can be created and filled with text. Repeating this process will lay out the whole block of text contained in the <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>. If there is no text left to be inserted into the layout, the <db:link xlink:href="qtextline.xml">QTextLine</db:link> returned will not be valid (isValid() will return false).</db:para>
</db:section>
<db:section xml:id="cursorMoveStyle">
<db:title>Qt::CursorMoveStyle QTextLayout::cursorMoveStyle() const</db:title>
<db:para>The cursor movement style of this <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>. The default is <db:link xlink:href="qt.xml#CursorMoveStyle-enum">Qt::LogicalMoveStyle</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#setCursorMoveStyle">setCursorMoveStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="draw">
<db:title>void QTextLayout::draw(QPainter *<db:emphasis>p</db:emphasis>, const QPointF &amp;<db:emphasis>pos</db:emphasis>, const QList&lt;QTextLayout::FormatRange&gt; &amp;<db:emphasis>selections</db:emphasis> = QList&lt;FormatRange&gt;(), const QRectF &amp;<db:emphasis>clip</db:emphasis> = QRectF()) const</db:title>
<db:para>Draws the whole layout on the painter <db:code role="parameter">p</db:code> at the position specified by <db:code role="parameter">pos</db:code>. The rendered layout includes the given <db:code role="parameter">selections</db:code> and is clipped within the rectangle specified by <db:code role="parameter">clip</db:code>.</db:para>
</db:section>
<db:section xml:id="drawCursor">
<db:title>void QTextLayout::drawCursor(QPainter *<db:emphasis>painter</db:emphasis>, const QPointF &amp;<db:emphasis>position</db:emphasis>, int <db:emphasis>cursorPosition</db:emphasis>, int <db:emphasis>width</db:emphasis>) const</db:title>
<db:para>Draws a text cursor with the current pen and the specified <db:code role="parameter">width</db:code> at the given <db:code role="parameter">position</db:code> using the <db:code role="parameter">painter</db:code> specified. The corresponding position within the text is specified by <db:code role="parameter">cursorPosition</db:code>.</db:para>
</db:section>
<db:section xml:id="drawCursor-1">
<db:title>void QTextLayout::drawCursor(QPainter *<db:emphasis>painter</db:emphasis>, const QPointF &amp;<db:emphasis>position</db:emphasis>, int <db:emphasis>cursorPosition</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a text cursor with the current pen at the given <db:code role="parameter">position</db:code> using the <db:code role="parameter">painter</db:code> specified. The corresponding position within the text is specified by <db:code role="parameter">cursorPosition</db:code>.</db:para>
</db:section>
<db:section xml:id="endLayout">
<db:title>void QTextLayout::endLayout()</db:title>
<db:para>Ends the layout process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#beginLayout">beginLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>QFont QTextLayout::font() const</db:title>
<db:para>Returns the current font that is used for the layout, or a default font if none is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="formats">
<db:title>QList&lt;QTextLayout::FormatRange&gt; QTextLayout::formats() const</db:title>
<db:para>Returns the list of additional formats supported by the text layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#setFormats">setFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#clearFormats">clearFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="glyphRuns">
<db:title>QList&lt;QGlyphRun&gt; QTextLayout::glyphRuns(int <db:emphasis>from</db:emphasis> = -1, int <db:emphasis>length</db:emphasis> = -1) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the glyph indexes and positions for all glyphs corresponding to the <db:code role="parameter">length</db:code> characters starting at the position <db:code role="parameter">from</db:code> in this <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>. This is an expensive function, and should not be called in a time sensitive context.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is less than zero, then the glyph run will begin at the first character in the layout. If <db:code role="parameter">length</db:code> is less than zero, it will span the entire string from the start position.</db:para>
<db:note>
<db:para>This is equivalent to calling glyphRuns(from, length, QTextLayout::GlyphRunRetrievalFlag::GlyphIndexes | QTextLayout::GlyphRunRetrievalFlag::GlyphPositions).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#draw">draw</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawGlyphRun">QPainter::drawGlyphRun</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="glyphRuns-1">
<db:title>[since 6.5] QList&lt;QGlyphRun&gt; QTextLayout::glyphRuns(int <db:emphasis>from</db:emphasis>, int <db:emphasis>length</db:emphasis>, QTextLayout::GlyphRunRetrievalFlags <db:emphasis>retrievalFlags</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the glyph indexes and positions for all glyphs corresponding to the <db:code role="parameter">length</db:code> characters starting at the position <db:code role="parameter">from</db:code> in this <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>. This is an expensive function, and should not be called in a time sensitive context.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is less than zero, then the glyph run will begin at the first character in the layout. If <db:code role="parameter">length</db:code> is less than zero, it will span the entire string from the start position.</db:para>
<db:para>The <db:code role="parameter">retrievalFlags</db:code> specifies which properties of the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> will be retrieved from the layout. To minimize allocations and memory consumption, this should be set to include only the properties that you need to access later.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#draw">draw</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawGlyphRun">QPainter::drawGlyphRun</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValidCursorPosition">
<db:title>bool QTextLayout::isValidCursorPosition(int <db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if position <db:code role="parameter">pos</db:code> is a valid cursor position.</db:para>
<db:para>In a Unicode context some positions in the text are not valid cursor positions, because the position is inside a Unicode surrogate or a grapheme cluster.</db:para>
<db:para>A grapheme cluster is a sequence of two or more Unicode characters that form one indivisible entity on the screen. For example the latin character `Ä' can be represented in Unicode by two characters, `A' (0x41), and the combining diaeresis (0x308). A text cursor can only validly be positioned before or after these two characters, never between them since that wouldn't make sense. In indic languages every syllable forms a grapheme cluster.</db:para>
</db:section>
<db:section xml:id="leftCursorPosition">
<db:title>int QTextLayout::leftCursorPosition(int <db:emphasis>oldPos</db:emphasis>) const</db:title>
<db:para>Returns the cursor position to the left of <db:code role="parameter">oldPos</db:code>, next to it. It's dependent on the visual position of characters, after bi-directional reordering.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#rightCursorPosition">rightCursorPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#previousCursorPosition">previousCursorPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineAt">
<db:title>QTextLine QTextLayout::lineAt(int <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>Returns the <db:code role="parameter">i</db:code>-th line of text in this text layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#lineCount">lineCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#lineForTextPosition">lineForTextPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineCount">
<db:title>int QTextLayout::lineCount() const</db:title>
<db:para>Returns the number of lines in this text layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#lineAt">lineAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineForTextPosition">
<db:title>QTextLine QTextLayout::lineForTextPosition(int <db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns the line that contains the cursor position specified by <db:code role="parameter">pos</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#isValidCursorPosition">isValidCursorPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#lineAt">lineAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumWidth">
<db:title>qreal QTextLayout::maximumWidth() const</db:title>
<db:para>The maximum width the layout could expand to; this is essentially the width of the entire text.</db:para>
<db:warning>
<db:para>This function only returns a valid value after the layout has been done.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#minimumWidth">minimumWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumWidth">
<db:title>qreal QTextLayout::minimumWidth() const</db:title>
<db:para>The minimum width the layout needs. This is the width of the layout's smallest non-breakable substring.</db:para>
<db:warning>
<db:para>This function only returns a valid value after the layout has been done.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#maximumWidth">maximumWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextCursorPosition">
<db:title>int QTextLayout::nextCursorPosition(int <db:emphasis>oldPos</db:emphasis>, QTextLayout::CursorMode <db:emphasis>mode</db:emphasis> = SkipCharacters) const</db:title>
<db:para>Returns the next valid cursor position after <db:code role="parameter">oldPos</db:code> that respects the given cursor <db:code role="parameter">mode</db:code>. Returns value of <db:code role="parameter">oldPos</db:code>, if <db:code role="parameter">oldPos</db:code> is not a valid cursor position.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#isValidCursorPosition">isValidCursorPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#previousCursorPosition">previousCursorPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position">
<db:title>QPointF QTextLayout::position() const</db:title>
<db:para>The global position of the layout. This is independent of the bounding rectangle and of the layout process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#setPosition">setPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preeditAreaPosition">
<db:title>int QTextLayout::preeditAreaPosition() const</db:title>
<db:para>Returns the position of the area in the text layout that will be processed before editing occurs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#preeditAreaText">preeditAreaText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preeditAreaText">
<db:title>QString QTextLayout::preeditAreaText() const</db:title>
<db:para>Returns the text that is inserted in the layout before editing occurs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#preeditAreaPosition">preeditAreaPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previousCursorPosition">
<db:title>int QTextLayout::previousCursorPosition(int <db:emphasis>oldPos</db:emphasis>, QTextLayout::CursorMode <db:emphasis>mode</db:emphasis> = SkipCharacters) const</db:title>
<db:para>Returns the first valid cursor position before <db:code role="parameter">oldPos</db:code> that respects the given cursor <db:code role="parameter">mode</db:code>. Returns value of <db:code role="parameter">oldPos</db:code>, if <db:code role="parameter">oldPos</db:code> is not a valid cursor position.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#isValidCursorPosition">isValidCursorPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#nextCursorPosition">nextCursorPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rightCursorPosition">
<db:title>int QTextLayout::rightCursorPosition(int <db:emphasis>oldPos</db:emphasis>) const</db:title>
<db:para>Returns the cursor position to the right of <db:code role="parameter">oldPos</db:code>, next to it. It's dependent on the visual position of characters, after bi-directional reordering.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#leftCursorPosition">leftCursorPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#nextCursorPosition">nextCursorPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCacheEnabled">
<db:title>void QTextLayout::setCacheEnabled(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>Enables caching of the complete layout information if <db:code role="parameter">enable</db:code> is true; otherwise disables layout caching. Usually <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> throws most of the layouting information away after a call to <db:link xlink:href="qtextlayout.xml#endLayout">endLayout</db:link>() to reduce memory consumption. If you however want to draw the laid out text directly afterwards enabling caching might speed up drawing significantly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#cacheEnabled">cacheEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCursorMoveStyle">
<db:title>void QTextLayout::setCursorMoveStyle(Qt::CursorMoveStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:para>Sets the visual cursor movement style to the given <db:code role="parameter">style</db:code>. If the <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> is backed by a document, you can ignore this and use the option in <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>, this option is for widgets like QLineEdit or custom widgets without a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>. Default value is <db:link xlink:href="qt.xml#CursorMoveStyle-enum">Qt::LogicalMoveStyle</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#cursorMoveStyle">cursorMoveStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFont">
<db:title>void QTextLayout::setFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Sets the layout's font to the given <db:code role="parameter">font</db:code>. The layout is invalidated and must be laid out again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormats">
<db:title>void QTextLayout::setFormats(const QList&lt;QTextLayout::FormatRange&gt; &amp;<db:emphasis>formats</db:emphasis>)</db:title>
<db:para>Sets the additional formats supported by the text layout to <db:code role="parameter">formats</db:code>. The formats are applied with preedit area text in place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#formats">formats</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#clearFormats">clearFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPosition">
<db:title>void QTextLayout::setPosition(const QPointF &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:para>Moves the text layout to point <db:code role="parameter">p</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreeditArea">
<db:title>void QTextLayout::setPreeditArea(int <db:emphasis>position</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">position</db:code> and <db:code role="parameter">text</db:code> of the area in the layout that is processed before editing occurs. The layout is invalidated and must be laid out again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#preeditAreaPosition">preeditAreaPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml#preeditAreaText">preeditAreaText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QTextLayout::setText(const QString &amp;<db:emphasis>string</db:emphasis>)</db:title>
<db:para>Sets the layout's text to the given <db:code role="parameter">string</db:code>. The layout is invalidated and must be laid out again.</db:para>
<db:para>Notice that when using this <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> as part of a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> this method will have no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextOption">
<db:title>void QTextLayout::setTextOption(const QTextOption &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:para>Sets the text option structure that controls the layout process to the given <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#textOption">textOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text">
<db:title>QString QTextLayout::text() const</db:title>
<db:para>Returns the layout's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textOption">
<db:title>const QTextOption &amp;QTextLayout::textOption() const</db:title>
<db:para>Returns the current text option used to control the layout process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#setTextOption">setTextOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
