<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>BlendedClipAnimator QML Type</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qml-qt3d-animation-blendedclipanimator.xml">BlendedClipAnimator</db:link> is a component providing animation playback capabilities of a tree of blend nodes.</db:para>
<db:para>This type was introduced in Qt 5.9.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt3D.Animation 2.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>AbstractClipAnimator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-qblendedclipanimator.xml">QBlendedClipAnimator</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An instance of <db:link xlink:href="qml-qt3d-animation-blendedclipanimator.xml">BlendedClipAnimator</db:link> can be aggregated by an Entity to add the ability to play back animation clips and to apply the calculated animation values to properties of QObjects.</db:para>
<db:para>Whereas a <db:link xlink:href="qml-qt3d-animation-clipanimator.xml">ClipAnimator</db:link> gets its animation data from a single animation clip, <db:link xlink:href="qml-qt3d-animation-blendedclipanimator.xml">BlendedClipAnimator</db:link> can blend together multiple clips. The animation data is obtained by evaluating a so called <db:emphasis>blend tree</db:emphasis>. A blend tree is a hierarchical tree structure where the leaf nodes are value nodes that encapsulate an animation clip (AbstractAnimationClip); and the internal nodes represent blending operations that operate on the nodes pointed to by their operand properties.</db:para>
<db:para>To associate a blend tree with a <db:link xlink:href="qml-qt3d-animation-blendedclipanimator.xml">BlendedClipAnimator</db:link>, set the animator's <db:link xlink:href="qml-qt3d-animation-blendedclipanimator.xml#blendTree-prop">blendTree</db:link> property to point at the root node of your blend tree:</db:para>
<db:programlisting language="cpp" role="bad">BlendedClipAnimator {
    blendTree: AdditiveClipBlend {
        ....
    }
}
</db:programlisting>
<db:para>A blend tree can be constructed from the following node types:</db:para>
<db:note>
<db:para>The blend node tree should only be edited when the animator is not running.</db:para>
</db:note>
<db:itemizedlist>
<db:listitem>
<db:para>Qt3D.Animation.<db:link xlink:href="qml-qt3d-animation-clipblendvalue.xml">ClipBlendValue</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Qt3D.Animation.<db:link xlink:href="qml-qt3d-animation-lerpclipblend.xml">LerpClipBlend</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Qt3D.Animation.<db:link xlink:href="qml-qt3d-animation-additiveclipblend.xml">AdditiveClipBlend</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Additional node types will be added over time.</db:para>
<db:para>As an example consider the following blend tree:</db:para>
<db:programlisting language="cpp" role="bad">Clip0----
        |
        Lerp Node----
        |           |
Clip1----           Additive Node
                    |
            Clip2----
</db:programlisting>
<db:para>This can be created and used as follows:</db:para>
<db:programlisting language="cpp" role="bad">BlendedClipAnimator {
    blendTree: AdditiveClipBlend {
        baseClip: LerpClipBlend {
            startClip: ClipBlendValue {
                clip: AnimationClipLoader { source: &quot;walk.json&quot; }
            }

            endClip: ClipBlendValue {
                clip: AnimationClipLoader { source: &quot;run.json&quot; }
            }
        }

        additiveClip: ClipBlendValue {
            clip: AnimationClipLoader { source: &quot;wave-arm.json&quot; }
        }
    }

    channelMapper: ChannelMapper {...}
    running: true
}
</db:programlisting>
<db:para>By authoring a set of animation clips and blending between them dynamically at runtime with a blend tree, we open up a huge set of possible resulting animations. As some simple examples of the above blend tree, where alpha is the additive factor and beta is the lerp blend factor we can get a 2D continuum of possible animations:</db:para>
<db:programlisting language="cpp" role="bad">(alpha = 0, beta = 1) Running, No arm waving --- (alpha = 1, beta = 1) Running, Arm waving
        |                                               |
        |                                               |
        |                                               |
(alpha = 0, beta = 0) Walking, No arm waving --- (alpha = 0, beta = 1) Running, No arm waving
</db:programlisting>
<db:para>More complex blend trees offer even more flexibility for combining your animation clips. Note that the values used to control the blend tree (alpha and beta above) are simple properties on the blend nodes. This means, that these properties themselves can also be controlled by the animation framework.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="blendTree-prop">
<db:title>blendTree : AbstractClipBlendNode</db:title>
<db:fieldsynopsis>
<db:type>AbstractClipBlendNode</db:type>
<db:varname>blendTree</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the root of the animation blend tree that will be evaluated before being interpolated by the animator.</db:para>
</db:section>
</db:section>
</db:article>
