<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>XML Schema Validation Example</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using Qt XML Patterns to validate XML with a W3C XML Schema.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The XML Schema Validation example shows how to use Qt XML Patterns to validate XML with a W3C XML Schema.</db:para>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>The example application shows different XML schema definitions and for every definition two XML instance documents, one that is valid according to the schema and one that is not. The user can select the valid or invalid instance document, change it and validate it again.</db:para>
<db:section xml:id="the-user-interface">
<db:title>The User Interface</db:title>
<db:para>The UI for this example was created using <db:link xlink:href="qtdesigner-manual.xml">Qt Designer</db:link>:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/schema-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The UI consists of three parts, at the top the XML schema <db:link xlink:href="qcombobox.xml">selection</db:link> and the schema <db:link xlink:href="qtextbrowser.xml">viewer</db:link>, below the XML instance <db:link xlink:href="qcombobox.xml">selection</db:link> and the instance <db:link xlink:href="qtextedit.xml">editor</db:link> and at the bottom the validation status <db:link xlink:href="qlabel.xml">label</db:link> next to the validation <db:link xlink:href="qpushbutton.xml">button</db:link>.</db:para>
</db:section>
<db:section xml:id="validating-xml-instance-documents">
<db:title>Validating XML Instance Documents</db:title>
<db:para>You can select one of the three predefined XML schemas and for each schema an valid or invalid instance document. A click on the 'Validate' button will validate the content of the XML instance editor against the schema from the XML schema viewer. As you can modify the content of the instance editor, different instances can be tested and validation error messages analysed.</db:para>
</db:section>
</db:section>
<db:section xml:id="code-walk-through">
<db:title>Code Walk-Through</db:title>
<db:para>The example's main() function creates the standard instance of <db:link xlink:href="qapplication.xml">QApplication</db:link>. Then it creates an instance of the mainwindow class, shows it, and starts the Qt event loop:</db:para>
<db:programlisting language="cpp">int main(int argc, char* argv[])
{
    Q_INIT_RESOURCE(schema);
    QApplication app(argc, argv);
    MainWindow* const window = new MainWindow;
    window-&amp;gt;show();
    return app.exec();
}
</db:programlisting>
<db:section xml:id="the-ui-class-mainwindow">
<db:title>The UI Class: MainWindow</db:title>
<db:para>The example's UI is a conventional Qt GUI application inheriting <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> and the class generated by <db:link xlink:href="qtdesigner-manual.xml">Qt Designer</db:link>:</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow,
                   private Ui::SchemaMainWindow
{
    Q_OBJECT

public:
    MainWindow();

private Q_SLOTS:
    void schemaSelected(int index);
    void instanceSelected(int index);
    void validate();
    void textChanged();

private:
    void moveCursor(int line, int column);
};
</db:programlisting>
<db:para>The constructor fills the schema and instance <db:link xlink:href="qcombobox.xml">QComboBox</db:link> selections with the predefined schemas and instances and connects their <db:link xlink:href="qcombobox.xml#currentIndexChanged">currentIndexChanged</db:link>() signals to the window's <db:code>schemaSelected()</db:code> resp. <db:code>instanceSelected()</db:code> slot. Furthermore the signal-slot connections for the validation <db:link xlink:href="qpushbutton.xml">button</db:link> and the instance <db:link xlink:href="qtextedit.xml">editor</db:link> are set up.</db:para>
<db:para>The call to <db:code>schemaSelected(0)</db:code> and <db:code>instanceSelected(0)</db:code> will trigger the validation of the initial Contact Schema example.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
{
    setupUi(this);

    new XmlSyntaxHighlighter(schemaView-&amp;gt;document());
    new XmlSyntaxHighlighter(instanceEdit-&amp;gt;document());

    schemaSelection-&amp;gt;addItem(tr(&quot;Contact Schema&quot;));
    schemaSelection-&amp;gt;addItem(tr(&quot;Recipe Schema&quot;));
    schemaSelection-&amp;gt;addItem(tr(&quot;Order Schema&quot;));

    instanceSelection-&amp;gt;addItem(tr(&quot;Valid Contact Instance&quot;));
    instanceSelection-&amp;gt;addItem(tr(&quot;Invalid Contact Instance&quot;));

    connect(schemaSelection, SIGNAL(currentIndexChanged(int)), SLOT(schemaSelected(int)));
    connect(instanceSelection, SIGNAL(currentIndexChanged(int)), SLOT(instanceSelected(int)));
    connect(validateButton, SIGNAL(clicked()), SLOT(validate()));
    connect(instanceEdit, SIGNAL(textChanged()), SLOT(textChanged()));

    validationStatus-&amp;gt;setAlignment(Qt::AlignCenter | Qt::AlignVCenter);

    schemaSelected(0);
    instanceSelected(0);
}
</db:programlisting>
<db:para>In the <db:code>schemaSelected()</db:code> slot the content of the instance <db:link xlink:href="qcombobox.xml">selection</db:link> is adapted to the selected schema and the corresponding schema is loaded from the <db:link xlink:href="resources.xml">resource file</db:link> and displayed in the schema <db:link xlink:href="qtextbrowser.xml">viewer</db:link>. At the end of the method a revalidation is triggered.</db:para>
<db:programlisting language="cpp">void MainWindow::schemaSelected(int index)
{
    instanceSelection-&amp;gt;clear();
    if (index == 0) {
        instanceSelection-&amp;gt;addItem(tr(&quot;Valid Contact Instance&quot;));
        instanceSelection-&amp;gt;addItem(tr(&quot;Invalid Contact Instance&quot;));
    } else if (index == 1) {
        instanceSelection-&amp;gt;addItem(tr(&quot;Valid Recipe Instance&quot;));
        instanceSelection-&amp;gt;addItem(tr(&quot;Invalid Recipe Instance&quot;));
    } else if (index == 2) {
        instanceSelection-&amp;gt;addItem(tr(&quot;Valid Order Instance&quot;));
        instanceSelection-&amp;gt;addItem(tr(&quot;Invalid Order Instance&quot;));
    }
    textChanged();

    const QString fileName = QStringLiteral(&quot;:/schema_&quot;)
        + QString::number(index) + QStringLiteral(&quot;.xsd&quot;);
    QFile schemaFile(fileName);
    if (!schemaFile.open(QIODevice::ReadOnly)) {
        qWarning() &amp;lt;&amp;lt; &quot;Cannot open&quot; &amp;lt;&amp;lt; QDir::toNativeSeparators(fileName)
            &amp;lt;&amp;lt; ':' &amp;lt;&amp;lt; schemaFile.errorString();
        return;
    }

    const QString schemaText(QString::fromUtf8(schemaFile.readAll()));
    schemaView-&amp;gt;setPlainText(schemaText);

    validate();
}
</db:programlisting>
<db:para>In the <db:code>instanceSelected()</db:code> slot the selected instance is loaded from the <db:link xlink:href="resources.xml">resource file</db:link> and loaded into the instance <db:link xlink:href="qtextedit.xml">editor</db:link> an the revalidation is triggered again.</db:para>
<db:programlisting language="cpp">void MainWindow::instanceSelected(int index)
{
    if (index &amp;lt; 0) {
        instanceEdit-&amp;gt;setPlainText(QString());
        return;
    }
    const QString fileName = QStringLiteral(&quot;:/instance_&quot;)
        + QString::number(2 * schemaSelection-&amp;gt;currentIndex() + index)
        + QStringLiteral(&quot;.xml&quot;);
    QFile instanceFile(fileName);
    if (!instanceFile.open(QIODevice::ReadOnly)) {
        qWarning() &amp;lt;&amp;lt; &quot;Cannot open&quot; &amp;lt;&amp;lt; QDir::toNativeSeparators(fileName)
            &amp;lt;&amp;lt; ':' &amp;lt;&amp;lt; instanceFile.errorString();
        return;
    }
    const QString instanceText(QString::fromUtf8(instanceFile.readAll()));
    instanceEdit-&amp;gt;setPlainText(instanceText);

    validate();
}
</db:programlisting>
<db:para>The <db:code>validate()</db:code> slot does the actual work in this example. At first it stores the content of the schema <db:link xlink:href="qtextbrowser.xml">viewer</db:link> and the <db:link xlink:href="qtextedit.xml">editor</db:link> into temporary <db:link xlink:href="qbytearray.xml">variables</db:link>. Then it instanciates a <db:code>MessageHandler</db:code> object which inherits from <db:link xlink:href="qabstractmessagehandler.xml">QAbstractMessageHandler</db:link> and is a convenience class to store error messages from the XmlPatterns system.</db:para>
<db:programlisting language="cpp">class MessageHandler : public QAbstractMessageHandler
{
public:
    MessageHandler()
        : QAbstractMessageHandler(0)
    {
    }

    QString statusMessage() const
    {
        return m_description;
    }

    int line() const
    {
        return m_sourceLocation.line();
    }

    int column() const
    {
        return m_sourceLocation.column();
    }

protected:
    virtual void handleMessage(QtMsgType type, const QString &amp;amp;description,
                               const QUrl &amp;amp;identifier, const QSourceLocation &amp;amp;sourceLocation)
    {
        Q_UNUSED(type);
        Q_UNUSED(identifier);

        m_description = description;
        m_sourceLocation = sourceLocation;
    }

private:
    QString m_description;
    QSourceLocation m_sourceLocation;
};
</db:programlisting>
<db:para>After the <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> is instanciated and the message handler set on it, the <db:link xlink:href="qxmlschema.xml#load">load</db:link>() method is called with the schema data as argument. If the schema is invalid or a parsing error has occurred, <db:link xlink:href="qxmlschema.xml#isValid">isValid</db:link>() returns <db:code>false</db:code> and the error is flagged in <db:code>errorOccurred</db:code>. If the loading was successful, a <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link> is instanciated and the schema passed in the constructor. A call to <db:link xlink:href="qxmlschemavalidator.xml#validate">validate</db:link>() will validate the passed XML instance data against the XML schema. The return value of that method signals whether the validation was successful. Depending on the success the status <db:link xlink:href="qlabel.xml">label</db:link> is set to 'validation successful' or the error message stored in the <db:code>MessageHandler</db:code></db:para>
<db:para>The rest of the code does only some fancy coloring and eyecandy.</db:para>
<db:programlisting language="cpp">void MainWindow::validate()
{
    const QByteArray schemaData = schemaView-&amp;gt;toPlainText().toUtf8();
    const QByteArray instanceData = instanceEdit-&amp;gt;toPlainText().toUtf8();

    MessageHandler messageHandler;

    QXmlSchema schema;
    schema.setMessageHandler(&amp;amp;messageHandler);

    schema.load(schemaData);

    bool errorOccurred = false;
    if (!schema.isValid()) {
        errorOccurred = true;
    } else {
        QXmlSchemaValidator validator(schema);
        if (!validator.validate(instanceData))
            errorOccurred = true;
    }

    if (errorOccurred) {
        validationStatus-&amp;gt;setText(messageHandler.statusMessage());
        moveCursor(messageHandler.line(), messageHandler.column());
    } else {
        validationStatus-&amp;gt;setText(tr(&quot;validation successful&quot;));
    }

    const QString styleSheet = QString(&quot;QLabel {background: %1; padding: 3px}&quot;)
                                      .arg(errorOccurred ? QColor(Qt::red).lighter(160).name() :
                                                           QColor(Qt::green).lighter(160).name());
    validationStatus-&amp;gt;setStyleSheet(styleSheet);
}
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="schema/files/invalid_contact.xml">schema/files/invalid_contact.xml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/files/invalid_order.xml">schema/files/invalid_order.xml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/files/invalid_recipe.xml">schema/files/invalid_recipe.xml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/files/valid_contact.xml">schema/files/valid_contact.xml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/files/valid_order.xml">schema/files/valid_order.xml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/files/valid_recipe.xml">schema/files/valid_recipe.xml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/main.cpp">schema/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/mainwindow.cpp">schema/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/mainwindow.h">schema/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/schema.pro">schema/schema.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/schema.qrc">schema/schema.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="schema/schema.ui">schema/schema.ui</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
