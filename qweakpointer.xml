<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWeakPointer Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QWeakPointer</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> class holds a weak reference to a shared pointer.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWeakPointer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> is an automatic weak reference to a pointer in C++. It cannot be used to dereference the pointer directly, but it can be used to verify if the pointer has been deleted or not in another context.</db:para>
<db:para><db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> objects can only be created by assignment from a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>It's important to note that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> provides no automatic casting operators to prevent mistakes from happening. Even though <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> tracks a pointer, it should not be considered a pointer itself, since it doesn't guarantee that the pointed object remains valid.</db:para>
<db:para>Therefore, to access the pointer that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> is tracking, you must first promote it to <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> and verify if the resulting object is null or not. <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> guarantees that the object isn't deleted, so if you obtain a non-null object, you may use the pointer. See QWeakPointer::toStrongRef() for an example.</db:para>
<db:para><db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> also provides the QWeakPointer::data() method that returns the tracked pointer without ensuring that it remains valid. This function is provided if you can guarantee by external means that the object will not get deleted (or if you only need the pointer value) and the cost of creating a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> using toStrongRef() is too high.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link></db:member>
<db:member><db:link xlink:href="qscopedpointer.xml">QScopedPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
