<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWeakPointer Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QWeakPointer</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> class holds a weak reference to a shared pointer.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWeakPointer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> is an automatic weak reference to a pointer in C++. It cannot be used to dereference the pointer directly, but it can be used to verify if the pointer has been deleted or not in another context.</db:para>
<db:para><db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> objects can only be created by assignment from a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>It's important to note that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> provides no automatic casting operators to prevent mistakes from happening. Even though <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> tracks a pointer, it should not be considered a pointer itself, since it doesn't guarantee that the pointed object remains valid.</db:para>
<db:para>Therefore, to access the pointer that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> is tracking, you must first promote it to <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> and verify if the resulting object is null or not. <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> guarantees that the object isn't deleted, so if you obtain a non-null object, you may use the pointer. See <db:link xlink:href="qweakpointer.xml#toStrongRef">QWeakPointer::toStrongRef</db:link>() for an example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link></db:member>
<db:member><db:link xlink:href="qscopedpointer.xml">QScopedPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWeakPointer">
<db:title>QWeakPointer::QWeakPointer()</db:title>
<db:constructorsynopsis>
<db:methodname>QWeakPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWeakPointer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that points to nothing.</db:para>
</db:section>
<db:section xml:id="QWeakPointer-1">
<db:title>QWeakPointer::QWeakPointer(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWeakPointer</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWeakPointer(const QWeakPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that holds a weak reference to the pointer referenced by <db:code role="parameter">other</db:code>.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="QWeakPointer-2">
<db:title>QWeakPointer::QWeakPointer(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWeakPointer</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QWeakPointer(const QSharedPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that holds a weak reference to the pointer referenced by <db:code role="parameter">other</db:code>.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="dtor.QWeakPointer">
<db:title>QWeakPointer::~QWeakPointer()</db:title>
<db:destructorsynopsis>
<db:methodname>~QWeakPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWeakPointer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> object. The pointer referenced by this object will not be deleted.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QWeakPointer::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears this <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> object, dropping the reference that it may have had to the pointer.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QWeakPointer::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object refers to nullptr.</db:para>
<db:para>Note that, due to the nature of weak references, the pointer that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> references can become nullptr at any moment, so the value returned from this function can change from false to true from one call to the next.</db:para>
</db:section>
<db:section xml:id="lock">
<db:title>[since 5.4] QSharedPointer&lt;T&gt; QWeakPointer::lock() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSharedPointer&lt;T&gt;</db:type>
<db:methodname>lock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;T&gt; lock() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qweakpointer.xml#toStrongRef">toStrongRef</db:link>().</db:para>
<db:para>This function is provided for API compatibility with std::weak_ptr.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.4] void QWeakPointer::swap(QWeakPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QWeakPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this weak pointer instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="toStrongRef">
<db:title>QSharedPointer&lt;T&gt; QWeakPointer::toStrongRef() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSharedPointer&lt;T&gt;</db:type>
<db:methodname>toStrongRef</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;T&gt; toStrongRef() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Promotes this weak reference to a strong one and returns a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object holding that reference. When promoting to <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>, this function verifies if the object has been deleted already or not. If it hasn't, this function increases the reference count to the shared object, thus ensuring that it will not get deleted.</db:para>
<db:para>Since this function can fail to obtain a valid strong reference to the shared object, you should always verify if the conversion succeeded, by calling <db:link xlink:href="qsharedpointer.xml#isNull">QSharedPointer::isNull</db:link>() on the returned object.</db:para>
<db:para>For example, the following code promotes a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that was held to a strong reference and, if it succeeded, it prints the value of the integer that was held:</db:para>
<db:programlisting language="cpp">    QWeakPointer&amp;lt;int&amp;gt; weakref;

    // ...

    QSharedPointer&amp;lt;int&amp;gt; strong = weakref.toStrongRef();
    if (strong)
        qDebug() &amp;lt;&amp;lt; &quot;The value is:&quot; &amp;lt;&amp;lt; *strong;
    else
        qDebug() &amp;lt;&amp;lt; &quot;The value has already been deleted&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#QSharedPointer">QSharedPointer::QSharedPointer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-bool">
<db:title>bool QWeakPointer::operator bool() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator bool</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator bool() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the contained pointer is not nullptr. This function is suitable for use in <db:code>if-constructs</db:code>, like:</db:para>
<db:programlisting language="cpp">    if (weakref) { ... }
</db:programlisting>
<db:para>Note that, due to the nature of weak references, the pointer that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> references can become nullptr at any moment, so the value returned from this function can change from true to false from one call to the next.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not">
<db:title>bool QWeakPointer::operator!() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object refers to nullptr. This function is suitable for use in <db:code>if-constructs</db:code>, like:</db:para>
<db:programlisting language="cpp">    if (!weakref) { ... }
</db:programlisting>
<db:para>Note that, due to the nature of weak references, the pointer that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> references can become nullptr at any moment, so the value returned from this function can change from false to true from one call to the next.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QWeakPointer&lt;T&gt; &amp;QWeakPointer::operator=(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWeakPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QWeakPointer&lt;T&gt; &amp; operator=(const QWeakPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this object share <db:code role="parameter">other</db:code>'s pointer. The current pointer reference is discarded but is not deleted.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QWeakPointer&lt;T&gt; &amp;QWeakPointer::operator=(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWeakPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWeakPointer&lt;T&gt; &amp; operator=(const QSharedPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this object share <db:code role="parameter">other</db:code>'s pointer. The current pointer reference is discarded but is not deleted.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qWeakPointerCast">
<db:title>QWeakPointer&lt;X&gt; qWeakPointerCast(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWeakPointer&lt;X&gt;</db:type>
<db:methodname>qWeakPointerCast</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWeakPointer&lt;X&gt; qWeakPointerCast(const QWeakPointer&lt;T&gt; &amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a weak pointer to the pointer held by <db:code role="parameter">src</db:code>, cast to type <db:code>X</db:code>. The types <db:code>T</db:code> and <db:code>X</db:code> must belong to one hierarchy for the <db:code>static_cast</db:code> to succeed.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use <db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast-1">qSharedPointerConstCast</db:link> to cast away the constness.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QWeakPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWeakPointer&lt;X&gt; &amp;</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QSharedPointer&lt;T&gt; &amp;ptr1, const QWeakPointer&lt;X&gt; &amp;ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to distinct pointers.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>[since 5.8] bool operator!=(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>lhs</db:emphasis>, <db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QWeakPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> refers to a valid (i.e. non-null) pointer.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">QWeakPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-2">
<db:title>[since 5.8] bool operator!=(<db:emphasis>std::nullptr_t</db:emphasis>, const QWeakPointer&lt;T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(std::nullptr_t, const QWeakPointer&lt;T&gt; &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">rhs</db:code> refers to a valid (i.e. non-null) pointer.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">QWeakPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-3">
<db:title>bool operator!=(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QSharedPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSharedPointer&lt;X&gt; &amp;</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QWeakPointer&lt;T&gt; &amp;ptr1, const QSharedPointer&lt;X&gt; &amp;ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to distinct pointers.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QWeakPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWeakPointer&lt;X&gt; &amp;</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QSharedPointer&lt;T&gt; &amp;ptr1, const QWeakPointer&lt;X&gt; &amp;ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to the same pointer.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QSharedPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSharedPointer&lt;X&gt; &amp;</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QWeakPointer&lt;T&gt; &amp;ptr1, const QSharedPointer&lt;X&gt; &amp;ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to the same pointer.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>[since 5.8] bool operator==(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>lhs</db:emphasis>, <db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QWeakPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> refers to nullptr.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">QWeakPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-3">
<db:title>[since 5.8] bool operator==(<db:emphasis>std::nullptr_t</db:emphasis>, const QWeakPointer&lt;T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(std::nullptr_t, const QWeakPointer&lt;T&gt; &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">rhs</db:code> refers to nullptr.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">QWeakPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QWeakPointer</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QWeakPointer-3">
<db:title>[since 4.6] QWeakPointer::QWeakPointer(const QObject *<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWeakPointer</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QWeakPointer(const QObject *other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Creates a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that holds a weak reference directly to the QObject <db:code role="parameter">other</db:code>. This constructor is only available if the template type <db:code>T</db:code> is QObject or derives from it (otherwise a compilation error will result).</db:para>
<db:para>You can use this constructor with any QObject, even if they were not created with <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>Note that QWeakPointers created this way on arbitrary QObjects usually cannot be promoted to <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link></db:member>
<db:member><db:link xlink:href="qpointer.xml">QPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[since 4.6] T *QWeakPointer::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qweakpointer.xml#toStrongRef">toStrongRef</db:link>() instead, and data() on the returned <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>Returns the value of the pointer being tracked by this <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link>, <db:emphasis role="bold">without</db:emphasis> ensuring that it cannot get deleted. To have that guarantee, use <db:link xlink:href="qweakpointer.xml#toStrongRef">toStrongRef</db:link>(), which returns a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object. If this function can determine that the pointer has already been deleted, it returns nullptr.</db:para>
<db:para>It is ok to obtain the value of the pointer and using that value itself, like for example in debugging statements:</db:para>
<db:programlisting language="cpp">    qDebug(&quot;Tracking %p&quot;, weakref.data());
</db:programlisting>
<db:para>However, dereferencing the pointer is only allowed if you can guarantee by external means that the pointer does not get deleted. For example, if you can be certain that no other thread can delete it, nor the functions that you may call.</db:para>
<db:para>If that is the case, then the following code is valid:</db:para>
<db:programlisting language="cpp">    // this pointer cannot be used in another thread
    // so other threads cannot delete it
    QWeakPointer&amp;lt;int&amp;gt; weakref = obtainReference();

    Object *obj = weakref.data();
    if (obj) {
        // if the pointer wasn't deleted yet, we know it can't get
        // deleted by our own code here nor the functions we call
        otherFunction(obj);
    }
</db:programlisting>
<db:para>Use this function with care.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qweakpointer.xml#toStrongRef">toStrongRef</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>[since 4.6] QWeakPointer&lt;T&gt; &amp;QWeakPointer::operator=(const QObject *<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWeakPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QWeakPointer&lt;T&gt; &amp; operator=(const QObject *other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Makes this <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> hold a weak reference directly to the QObject <db:code role="parameter">other</db:code>. This function is only available if the template type <db:code>T</db:code> is QObject or derives from it.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointer.xml">QPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
