<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWeakPointer Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QWeakPointer</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> class holds a weak reference to a shared pointer.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWeakPointer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> is an automatic weak reference to a pointer in C++. It cannot be used to dereference the pointer directly, but it can be used to verify if the pointer has been deleted or not in another context.</db:para>
<db:para><db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> objects can only be created by assignment from a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>It's important to note that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> provides no automatic casting operators to prevent mistakes from happening. Even though <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> tracks a pointer, it should not be considered a pointer itself, since it doesn't guarantee that the pointed object remains valid.</db:para>
<db:para>Therefore, to access the pointer that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> is tracking, you must first promote it to <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> and verify if the resulting object is null or not. <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> guarantees that the object isn't deleted, so if you obtain a non-null object, you may use the pointer. See <db:link xlink:href="qweakpointer.xml#toStrongRef">QWeakPointer::toStrongRef</db:link>() for an example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link></db:member>
<db:member><db:link xlink:href="qscopedpointer.xml">QScopedPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="owner_before">
<db:title>[noexcept, since 6.7] bool QWeakPointer::owner_before(const QSharedPointer&lt;X&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="owner_before-1">[noexcept, since 6.7] bool QWeakPointer::owner_before(const QWeakPointer&lt;X&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if and only if this smart pointer precedes <db:code role="parameter">other</db:code> in an implementation-defined owner-based ordering. The ordering is such that two smart pointers are considered equivalent if they are both empty or if they both own the same object (even if their apparent type and pointer are different).</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#owner_equal">owner_equal</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="owner_equal">
<db:title>[noexcept, since 6.7] bool QWeakPointer::owner_equal(const QSharedPointer&lt;X&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="owner_equal-1">[noexcept, since 6.7] bool QWeakPointer::owner_equal(const QWeakPointer&lt;X&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if and only if this smart pointer and <db:code role="parameter">other</db:code> share ownership.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#owner_before">owner_before</db:link></db:member>
<db:member><db:link xlink:href="qweakpointer.xml#owner_hash">owner_hash</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="owner_hash">
<db:title>[noexcept, since 6.7] size_t QWeakPointer::owner_hash() const</db:title>
<db:para>Returns a owner-based hash value for this smart pointer object. Smart pointers that compare equal (as per owner_equal) will have an identical owner-based hash.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#owner_equal">owner_equal</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QWeakPointer">
<db:title>QWeakPointer::QWeakPointer()</db:title>
<db:para>Creates a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that points to nothing.</db:para>
</db:section>
<db:section xml:id="QWeakPointer-2">
<db:title>QWeakPointer::QWeakPointer(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that holds a weak reference to the pointer referenced by <db:code role="parameter">other</db:code>.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="QWeakPointer-3">
<db:title>[noexcept] QWeakPointer::QWeakPointer(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that holds a weak reference to the pointer referenced by <db:code role="parameter">other</db:code>.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="dtor.QWeakPointer">
<db:title>QWeakPointer::~QWeakPointer()</db:title>
<db:para>Destroys this <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> object. The pointer referenced by this object will not be deleted.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QWeakPointer::clear()</db:title>
<db:para>Clears this <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> object, dropping the reference that it may have had to the pointer.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QWeakPointer::isNull() const</db:title>
<db:para>Returns true if this object refers to nullptr.</db:para>
<db:para>Note that, due to the nature of weak references, the pointer that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> references can become nullptr at any moment, so the value returned from this function can change from false to true from one call to the next.</db:para>
</db:section>
<db:section xml:id="lock">
<db:title>QSharedPointer&lt;T&gt; QWeakPointer::lock() const</db:title>
<db:para>Same as <db:link xlink:href="qweakpointer.xml#toStrongRef">toStrongRef</db:link>().</db:para>
<db:para>This function is provided for API compatibility with std::weak_ptr.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QWeakPointer::swap(QWeakPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this weak pointer instance with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="toStrongRef">
<db:title>QSharedPointer&lt;T&gt; QWeakPointer::toStrongRef() const</db:title>
<db:para>Promotes this weak reference to a strong one and returns a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object holding that reference. When promoting to <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>, this function verifies if the object has been deleted already or not. If it hasn't, this function increases the reference count to the shared object, thus ensuring that it will not get deleted.</db:para>
<db:para>Since this function can fail to obtain a valid strong reference to the shared object, you should always verify if the conversion succeeded, by calling <db:link xlink:href="qsharedpointer.xml#isNull">QSharedPointer::isNull</db:link>() on the returned object.</db:para>
<db:para>For example, the following code promotes a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that was held to a strong reference and, if it succeeded, it prints the value of the integer that was held:</db:para>
<db:programlisting language="cpp">    QWeakPointer&lt;int&gt; weakref;

    // ...

    QSharedPointer&lt;int&gt; strong = weakref.toStrongRef();
    if (strong)
        qDebug() &lt;&lt; &quot;The value is:&quot; &lt;&lt; *strong;
    else
        qDebug() &lt;&lt; &quot;The value has already been deleted&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#QSharedPointer">QSharedPointer::QSharedPointer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-bool">
<db:title>bool QWeakPointer::operator bool() const</db:title>
<db:para>Returns true if the contained pointer is not nullptr. This function is suitable for use in <db:code>if-constructs</db:code>, like:</db:para>
<db:programlisting language="cpp">    if (weakref) { ... }
</db:programlisting>
<db:para>Note that, due to the nature of weak references, the pointer that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> references can become nullptr at any moment, so the value returned from this function can change from true to false from one call to the next.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not">
<db:title>bool QWeakPointer::operator!() const</db:title>
<db:para>Returns true if this object refers to nullptr. This function is suitable for use in <db:code>if-constructs</db:code>, like:</db:para>
<db:programlisting language="cpp">    if (!weakref) { ... }
</db:programlisting>
<db:para>Note that, due to the nature of weak references, the pointer that <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> references can become nullptr at any moment, so the value returned from this function can change from false to true from one call to the next.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QWeakPointer&lt;T&gt; &amp;QWeakPointer::operator=(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Makes this object share <db:code role="parameter">other</db:code>'s pointer. The current pointer reference is discarded but is not deleted.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>[noexcept] QWeakPointer&lt;T&gt; &amp;QWeakPointer::operator=(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Makes this object share <db:code role="parameter">other</db:code>'s pointer. The current pointer reference is discarded but is not deleted.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qWeakPointerCast">
<db:title>QWeakPointer&lt;X&gt; qWeakPointerCast(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:para>Returns a weak pointer to the pointer held by <db:code role="parameter">src</db:code>, cast to type <db:code>X</db:code>. The types <db:code>T</db:code> and <db:code>X</db:code> must belong to one hierarchy for the <db:code>static_cast</db:code> to succeed.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use <db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link> to cast away the constness.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QWeakPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to distinct pointers.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QSharedPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to distinct pointers.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-2">
<db:title>bool operator!=(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>lhs</db:emphasis>, <db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> refers to a valid (i.e. non-null) pointer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">QWeakPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-3">
<db:title>bool operator!=(<db:emphasis>std::nullptr_t</db:emphasis>, const QWeakPointer&lt;T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">rhs</db:code> refers to a valid (i.e. non-null) pointer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">QWeakPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QWeakPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to the same pointer.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QSharedPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to the same pointer.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>bool operator==(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>lhs</db:emphasis>, <db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> refers to nullptr.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">QWeakPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-3">
<db:title>bool operator==(<db:emphasis>std::nullptr_t</db:emphasis>, const QWeakPointer&lt;T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">rhs</db:code> refers to nullptr.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">QWeakPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QWeakPointer</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QWeakPointer-1">
<db:title>[deprecated] QWeakPointer::QWeakPointer(const QObject *<db:emphasis>other</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Creates a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> that holds a weak reference directly to the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">other</db:code>. This constructor is only available if the template type <db:code>T</db:code> is <db:link xlink:href="qobject.xml">QObject</db:link> or derives from it (otherwise a compilation error will result).</db:para>
<db:para>You can use this constructor with any <db:link xlink:href="qobject.xml">QObject</db:link>, even if they were not created with <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>Note that QWeakPointers created this way on arbitrary QObjects usually cannot be promoted to <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link></db:member>
<db:member><db:link xlink:href="qpointer.xml">QPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[deprecated] T *QWeakPointer::data() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qweakpointer.xml#toStrongRef">toStrongRef</db:link>() instead, and data() on the returned <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>Returns the value of the pointer being tracked by this <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link>, <db:emphasis role="bold">without</db:emphasis> ensuring that it cannot get deleted. To have that guarantee, use <db:link xlink:href="qweakpointer.xml#toStrongRef">toStrongRef</db:link>(), which returns a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object. If this function can determine that the pointer has already been deleted, it returns nullptr.</db:para>
<db:para>It is ok to obtain the value of the pointer and using that value itself, like for example in debugging statements:</db:para>
<db:programlisting language="cpp">    qDebug(&quot;Tracking %p&quot;, weakref.data());
</db:programlisting>
<db:para>However, dereferencing the pointer is only allowed if you can guarantee by external means that the pointer does not get deleted. For example, if you can be certain that no other thread can delete it, nor the functions that you may call.</db:para>
<db:para>If that is the case, then the following code is valid:</db:para>
<db:programlisting language="cpp">    // this pointer cannot be used in another thread
    // so other threads cannot delete it
    QWeakPointer&lt;int&gt; weakref = obtainReference();

    Object *obj = weakref.data();
    if (obj) {
        // if the pointer wasn't deleted yet, we know it can't get
        // deleted by our own code here nor the functions we call
        otherFunction(obj);
    }
</db:programlisting>
<db:para>Use this function with care.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qweakpointer.xml#toStrongRef">toStrongRef</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[deprecated] QWeakPointer&lt;T&gt; &amp;QWeakPointer::operator=(const QObject *<db:emphasis>other</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Makes this <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> hold a weak reference directly to the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">other</db:code>. This function is only available if the template type <db:code>T</db:code> is <db:link xlink:href="qobject.xml">QObject</db:link> or derives from it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointer.xml">QPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
