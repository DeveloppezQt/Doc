<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Deploying QML Applications</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides information on how to use deploy QML applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QML documents are loaded and run by the QML runtime. This includes the Declarative UI engine along with the built-in QML types and plugin modules. The QML runtime also provides access to third-party QML types and modules.</db:para>
<db:para>Applications that use QML must invoke the QML runtime to run QML documents. You can do this by creating a <db:link xlink:href="qquickview.xml">QQuickView</db:link> or a <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>, as described below. In addition, the Declarative UI package includes the qml tool, which loads .qml files. This tool is useful for developing and testing QML code without having to write a C++ application to load the QML runtime.</db:para>
<db:section xml:id="deploying-applications-with-qt-creator">
<db:title>Deploying Applications with Qt Creator</db:title>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link> deploys and packages QML applications to various platforms. For mobile devices, Qt Creator can directly bundle applications to the respective platform package formats, such as APK.</db:para>
<db:para>When you run your applications on the target platform, your application needs to access the location of the QML libraries. If you use <db:link xlink:href="qmake-manual.xml">qmake</db:link>, the QT_INSTALL_QML environment variable points to the location of the libraries. The <db:link xlink:href="http://qt.io/download">Qt Installers</db:link> install the QML libraries in: &lt;version&gt;/<db:emphasis>&lt;compiler&gt;</db:emphasis>/qml directory.</db:para>
</db:section>
<db:section xml:id="qml-caching">
<db:title>QML Caching</db:title>
<db:para>The QML runtime loads QML documents by parsing them and generating byte code. Most of the time, the document hasn't changed since the last time it was loaded. To speed up this loading process, the QML runtime maintains a cache file for each QML document. This cache file contains the compiled byte code and a binary representation of the QML document structure. In addition, when multiple applications use the same QML document, the memory needed for the code is shared between application processes. The cache files are loaded via the mmap() system call on POSIX-compliant operating systems or CreateFileMapping() on Windows, resulting in significant memory savings.</db:para>
<db:para>Each time you load a changed QML document, the cache is automatically re-created. Cache files are located in a sub-directory of <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::CacheLocation</db:link> with the name &quot;qmlcache&quot;. The file extension is .qmlc for QML documents and .jsc for imported JavaScript modules.</db:para>
<db:anchor xml:id="compiling-ahead-of-time"/>
</db:section>
<db:section xml:id="ahead-of-time-compilation">
<db:title>Ahead-of-Time Compilation</db:title>
<db:para>The automatic caching of compiled QML documents into cache files results in significantly faster application load time. However, the initial creation of cache files can still take time, especially when the application starts for the very first time. To avoid that initial step and provide faster startup times from the very beginning, Qt's build system allows you to perform the compilation step for QML files ahead of time, when compiling the C++ parts of your application.</db:para>
<db:para>One benefit of compiling ahead of time is that, in the event of syntax errors in your QML documents, you are notified at application compile-time instead of at run-time, when the file is loaded.</db:para>
<db:para>This will happen automatically if you use the <db:link xlink:href="qt-add-qml-module.xml">CMake QML Module API</db:link>, for qmake see the section below.</db:para>
<db:section xml:id="qmake">
<db:title>qmake</db:title>
<db:para>When using qmake, in order to deploy your application with QML files compiled ahead of time, you must organize the files and the build system in a specific way:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>All QML documents (including JavaScript files) must be included as resources via <db:link xlink:href="porting-to-android.xml#the-qt-resource-system">Qt's Resource system</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Your application must load the QML documents via the qrc:/// URL scheme.</db:para>
</db:listitem>
<db:listitem>
<db:para>You can enable Ahead-of-Time compilation using the CONFIG+=qtquickcompiler directive.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="prototyping-with-qml-scene">
<db:title>Prototyping with QML Scene</db:title>
<db:para>The Declarative UI package includes a QML Runtime Tool, <db:link xlink:href="qtquick-qml-runtime.xml#qml-runtime-tool">qml</db:link>, which loads and displays QML documents. This is useful during the application development phase for prototyping QML-based applications without writing your own C++ applications to invoke the QML runtime.</db:para>
</db:section>
<db:section xml:id="initializing-the-qml-runtime-in-applications">
<db:title>Initializing the QML Runtime in Applications</db:title>
<db:para>To run an application that uses QML, your application must invoke the QML runtime. This is done by writing a Qt C++ application that loads the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> by either:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Loading the QML file through a <db:link xlink:href="qquickview.xml">QQuickView</db:link> instance.</db:para>
</db:listitem>
<db:listitem>
<db:para>Creating a <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> instance and loading QML files with <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="initializing-with-qquickview">
<db:title>Initializing with QQuickView</db:title>
<db:para><db:link xlink:href="qquickview.xml">QQuickView</db:link> is a <db:link xlink:href="qwindow.xml">QWindow</db:link>-based class that can load QML files. For example, if there is a QML file, application.qml, it will look like this:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle { width: 100; height: 100; color: &quot;red&quot; }
</db:programlisting>
<db:para>It can be loaded in a Qt application's main.cpp file like this:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQuickView&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQuickView view;
    view.setSource(QUrl::fromLocalFile(&quot;application.qml&quot;));
    view.show();

    return app.exec();
}
</db:programlisting>
<db:para>This creates a <db:link xlink:href="qwindow.xml">QWindow</db:link>-based view that displays the contents of application.qml.</db:para>
<db:section xml:id="build-files">
<db:title>Build Files</db:title>
</db:section>
</db:section>
</db:section>
<db:section xml:id="using-cmake">
<db:title>Using CMake</db:title>
<db:para>Use the find_package() command to locate the needed module component in the Qt6 package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Quick)
target_link_libraries(mytarget PRIVATE Qt6::Quick)
</db:programlisting>
<db:para>For more details, see the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="using-qmake">
<db:title>Using qmake</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the QT variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT += quick
</db:programlisting>
<db:para>For more information, see <db:link xlink:href="qmake-project-files.xml">Creating Project Files</db:link>.</db:para>
<db:section xml:id="creating-a-qqmlengine-directly">
<db:title>Creating a QQmlEngine Directly</db:title>
<db:para>If application.qml doesn't have any graphical components, or if it's preferred to avoid <db:link xlink:href="qquickview.xml">QQuickView</db:link> for other reasons, the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> can be constructed directly instead. In this case, application.qml is loaded as a <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> instance rather than placed into a view:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlEngine&amp;gt;
#include &amp;lt;QQmlContext&amp;gt;
#include &amp;lt;QQmlComponent&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQmlEngine engine;
    QQmlContext *objectContext = new QQmlContext(engine.rootContext());

    QQmlComponent component(&amp;amp;engine, &quot;application.qml&quot;);
    QObject *object = component.create(objectContext);

    // ... delete object and objectContext when necessary

    return app.exec();
}
</db:programlisting>
<db:para>If you're not using any graphical items from Qt Quick, you can replace <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> with a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> in the code above. This way, you can use QML as a language without any dependencies to the <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> module.</db:para>
</db:section>
</db:section>
<db:section xml:id="using-the-qt-resource-system-with-qml">
<db:title>Using the Qt Resource System with QML</db:title>
<db:para>The <db:link xlink:href="porting-to-android.xml#the-qt-resource-system">Qt resource system</db:link> allows resource files to be stored as binary files in an application executable. The Qt Resource System is used for QML application as it enables QML files and other resources – such as images and sound files – to be referred to through the resource system URI scheme rather than relative or absolute paths to filesystem resources.</db:para>
<db:note>
<db:para>Usage of the resource system means that the application executable usually must be re-compiled whenever a QML source file is changed, to update the resources in the package.</db:para>
</db:note>
<db:para>The <db:link xlink:href="qt-add-qml-module.xml">CMake QML Module API</db:link> automatically places your QML files in the resource system. To access them, load your main QML file as a resource or as a URL with the qrc scheme. The path in the resource system where your QML files are placed can be found by concatenating:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>the RESOURCE_PREFIX you have passed to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>/qt/qml, if you have <db:emphasis>not</db:emphasis> passed RESOURCE_PREFIX to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> and <db:link xlink:href="qt-cmake-policy-qtp0001.xml">QTP0001</db:link> policy is set to NEW.</db:para>
</db:listitem>
<db:listitem>
<db:para>/, if you have <db:emphasis>not</db:emphasis> passed RESOURCE_PREFIX to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> and <db:link xlink:href="qt-cmake-policy-qtp0001.xml">QTP0001</db:link> policy is not set to NEW.</db:para>
</db:listitem>
<db:listitem>
<db:para>If you have <db:emphasis>not</db:emphasis> passed NO_RESOURCE_TARGET_PATH to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>: the URI you have passed to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> with dots replaced by slashes.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, a module called My.Own.Module is placed at:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>:/qt/qml/My/Own/Module/ if you have specified /qt/qml as RESOURCE_PREFIX, or you have <db:emphasis>not</db:emphasis> passed RESOURCE_PREFIX and <db:link xlink:href="qt-cmake-policy-qtp0001.xml">QTP0001</db:link> policy is set to NEW.</db:para>
</db:listitem>
<db:listitem>
<db:para>:/My/Own/Module/ if you have specified / as RESOURCE_PREFIX, or you have <db:emphasis>not</db:emphasis> passed RESOURCE_PREFIX and <db:link xlink:href="qt-cmake-policy-qtp0001.xml">QTP0001</db:link> policy is <db:emphasis>not</db:emphasis> set to NEW. }</db:para>
</db:listitem>
<db:listitem>
<db:para>:/Some/Prefix/My/Own/Module/ if you have specified Some/Prefix/ as RESOURCE_PREFIX</db:para>
</db:listitem>
<db:listitem>
<db:para>:/ if you have specified NO_RESOURCE_TARGET_PATH</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Once this is done, all files specified by relative paths in QML are loaded from the resource system. Use of the resource system is completely transparent to the QML layer; this means all QML code should refer to resource files using relative paths and should <db:emphasis>not</db:emphasis> use the qrc scheme. This scheme should only be used from C++ code to refer to resource files.</db:para>
<db:note>
<db:para>When using qmake, you need to manually place your files in the resource system. See the <db:link xlink:href="qmake-manual.xml">qmake Manual</db:link> and the <db:link xlink:href="porting-to-android.xml#the-qt-resource-system">general documentation</db:link> on the resouce system for how to do this. It's advisable to still follow the path naming convention outlined above.</db:para>
</db:note>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="deployment.xml">Deploying Qt Applications</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/creator-running-targets.html">Running on Multiple Platforms</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/creator-deployment.html">Deploying to Devices</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-data.xml">qtqml-cppintegration-exposecppattributes.html</db:link>{Exposing Attributes of C++ Types to QML}</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="porting-to-android.xml#the-qt-resource-system">The Qt Resource System</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
