<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Deploying QML Applications</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides information on how to use deploy QML applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QML documents are loaded and run by the QML runtime. This includes the Declarative UI engine along with the built-in QML types and plugin modules. The QML runtime also provides access to third-party QML types and modules.</db:para>
<db:para>Applications that use QML must invoke the QML runtime to run QML documents. You can do this by creating a QQuickView or a QQmlEngine, as described below. In addition, the Declarative UI package includes the qmlscene tool, which loads .qml files. This tool is useful for developing and testing QML code without having to write a C++ application to load the QML runtime.</db:para>
<db:section xml:id="deploying-applications-with-qt-creator">
<db:title>Deploying Applications with Qt Creator</db:title>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link> deploys and packages QML applications to various platforms. For mobile devices, Qt Creator can directly bundle applications to the respective platform package formats, such as APK.</db:para>
<db:para>When you run your applications on the target platform, your application needs to access the location of the QML libraries. If you use <db:link xlink:href="qmake-manual.xml">qmake</db:link>, the QT_INSTALL_QML environment variable points to the location of the libraries. The <db:link xlink:href="http://qt.io/download">Qt Installers</db:link> install the QML libraries in: &lt;version&gt;/<db:emphasis>&lt;compiler&gt;</db:emphasis>/qml directory.</db:para>
</db:section>
<db:section xml:id="qml-caching">
<db:title>QML Caching</db:title>
<db:para>The QML runtime loads QML documents by parsing them and generating byte code. Most of the time, the document hasn't changed since the last time it was loaded. To speed up this loading process, the QML runtime maintains a cache file for each QML document. This cache file contains the compiled byte code and a binary representation of the QML document structure. In addition, when multiple applications use the same QML document, the memory needed for the code is shared between application processes. The cache files are loaded via the mmap() system call on POSIX-compliant operating systems or CreateFileMapping() on Windows, resulting in significant memory savings.</db:para>
<db:para>Each time you load a changed QML document, the cache is automatically re-created. Cache files are located in a sub-directory of QStandardPaths::CacheLocation with the name &quot;qmlcache&quot;. The file extension is .qmlc for QML documents and .jsc for imported JavaScript modules.</db:para>
<db:anchor xml:id="compiling-ahead-of-time"/>
</db:section>
<db:section xml:id="ahead-of-time-compilation">
<db:title>Ahead-of-Time Compilation</db:title>
<db:para>The automatic caching of compiled QML documents into cache files results in significantly faster application load time. However, the initial creation of cache files can still take time, especially when the application starts for the very first time. To avoid that initial step and provide faster startup times from the very beginning, Qt's build system allows you to perform the compilation step for QML files ahead of time, when compiling the C++ parts of your application.</db:para>
<db:para>To deploy your application with QML files compiled ahead of time, you must organize the files and the build system in a specific way:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>All QML documents (including JavaScript files) must be included as resources via <db:link xlink:href="resources.xml">Qt's Resource system</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Your application must load the QML documents via the qrc:/// URL scheme.</db:para>
</db:listitem>
<db:listitem>
<db:para>You can enable Ahead-of-Time compilation using the CONFIG+=qtquickcompiler directive.</db:para>
</db:listitem>
<db:listitem>
<db:para>If you're using the CMake build system, then you can achieve this by inserting a find_package(Qt5QuickCompiler) call into your CMakeLists.txt and replacing the use of qt5_add_resources with qtquick_compiler_add_resources.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>One benefit of compiling ahead of time is that, in the event of syntax errors in your QML documents, you are notified at application compile-time instead of at run-time, when the file is loaded.</db:para>
<db:para>If you have .qml or .js files which should not be compiled but just bundled by the resource system, such as .js files used with <db:link xlink:href="qtwebengine-index.xml">Qt WebEngine</db:link>, you can omit them from the compilation via the QTQUICK_COMPILER_SKIPPED_RESOURCES variable. In your project file, specify the resource files to omit, as follows:</db:para>
<db:programlisting language="cpp">QTQUICK_COMPILER_SKIPPED_RESOURCES += bundle_only.qrc
</db:programlisting>
<db:para>By default, this feature ties your application to the Qt version you are compiling against, because it replaces the QML document source code in the resources with the compiled binary version. The source files are not present anymore. Consequently, when you use the same application against a different version of Qt without recompiling it, loading the QML documents will fail with an error message.</db:para>
<db:para>Ahead-of-Time compilation is implemented this way because the feature originates from an add-on for use in commercial application environments, where deploying source code is not desirable but it's usually acceptable to require a recompilation when changing Qt.</db:para>
<db:para>You can retain the QML and JavaScript documents in the resources by passing a list of resource (*.qrc) files in the QTQUICK_COMPILER_RETAINED_RESOURCES qmake variable. These resource files will then not be filtered, and any QML and JavaScript files specified in them will be readable in full source by your application. Then, if you run the application with a different Qt version, the QML and JavaScript files will be recompiled at runtime, slowing down the initial start of the application.</db:para>
</db:section>
<db:section xml:id="prototyping-with-qml-scene">
<db:title>Prototyping with QML Scene</db:title>
<db:para>The Declarative UI package includes a QML runtime tool, <db:link xlink:href="qtquick-qmlscene.xml">qmlscene</db:link>, which loads and displays QML documents. This is useful during the application development phase for prototyping QML-based applications without writing your own C++ applications to invoke the QML runtime.</db:para>
</db:section>
<db:section xml:id="initializing-the-qml-runtime-in-applications">
<db:title>Initializing the QML Runtime in Applications</db:title>
<db:para>To run an application that uses QML, your application must invoke the QML runtime. This is done by writing a Qt C++ application that loads the QQmlEngine by either:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Loading the QML file through a QQuickView instance.</db:para>
</db:listitem>
<db:listitem>
<db:para>Creating a QQmlEngine instance and loading QML files with QQmlComponent.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="initializing-with-qquickview">
<db:title>Initializing with QQuickView</db:title>
<db:para>QQuickView is a QWindow-based class that can load QML files. For example, if there is a QML file, application.qml, it will look like this:</db:para>
<db:programlisting language="qml">import QtQuick 2.3

Rectangle { width: 100; height: 100; color: &quot;red&quot; }
</db:programlisting>
<db:para>It can be loaded in a Qt application's main.cpp file like this:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQuickView&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQuickView view;
    view.setSource(QUrl::fromLocalFile(&quot;application.qml&quot;));
    view.show();

    return app.exec();
}
</db:programlisting>
<db:para>This creates a QWindow-based view that displays the contents of application.qml.</db:para>
<db:para>The application's .pro <db:link xlink:href="qmake-project-files.xml">project file</db:link> must specify the declarative module for the QT variable. For example:</db:para>
<db:programlisting language="cpp">TEMPLATE += app
QT += quick
SOURCES += main.cpp
</db:programlisting>
</db:section>
<db:section xml:id="creating-a-qqmlengine-directly">
<db:title>Creating a QQmlEngine Directly</db:title>
<db:para>If application.qml doesn't have any graphical components, or if it's preferred to avoid QQuickView for other reasons, the QQmlEngine can be constructed directly instead. In this case, application.qml is loaded as a QQmlComponent instance rather than placed into a view:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlEngine&amp;gt;
#include &amp;lt;QQmlContext&amp;gt;
#include &amp;lt;QQmlComponent&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQmlEngine engine;
    QQmlContext *objectContext = new QQmlContext(engine.rootContext());

    QQmlComponent component(&amp;amp;engine, &quot;application.qml&quot;);
    QObject *object = component.create(objectContext);

    // ... delete object and objectContext when necessary

    return app.exec();
}
</db:programlisting>
<db:para>If you're not using any graphical items from Qt Quick, you can replace QGuiApplication with a QCoreApplication in the code above. This way, you can use QML as a language without any dependencies to the <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> module.</db:para>
</db:section>
</db:section>
<db:section xml:id="managing-resource-files-with-the-qt-resource-system">
<db:title>Managing Resource Files with the Qt Resource System</db:title>
<db:para>The <db:link xlink:href="resources.xml">Qt resource system</db:link> allows resource files to be stored as binary files in an application executable. This can be useful when building a mixed QML/C++ application as it enables QML files and other resources – such as images and sound files – to be referred to through the resource system URI scheme rather than relative or absolute paths to filesystem resources.</db:para>
<db:note>
<db:para>If you use the resource system, the application executable must be re-compiled whenever a QML source file is changed, to update the resources in the package.</db:para>
</db:note>
<db:para>To use the resource system in a mixed QML/C++ application:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Create a .qrc <db:link xlink:href="resources.xml">resource collection file</db:link> that lists resource files in XML format.</db:para>
</db:listitem>
<db:listitem>
<db:para>From C++, load the main QML file as a resource using the :/ prefix or as a URL with the .qrc scheme.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Once this is done, all files specified by relative paths in QML are loaded from the resource system instead. Use of the resource system is completely transparent to the QML layer; this means all QML code should refer to resource files using relative paths and should <db:emphasis role="bold">not</db:emphasis> use the .qrc scheme. This scheme should only be used from C++ code to refer to resource files.</db:para>
<db:para>Here's an application packaged using the Qt resource system; its directory structure is as follows:</db:para>
<db:programlisting language="cpp">project
    |- example.qrc
    |- main.qml
    |- images
        |- background.png
    |- main.cpp
    |- project.pro
</db:programlisting>
<db:para>The main.qml and background.png files are packaged as resource files. This is done in the example.qrc resource collection file:</db:para>
<db:programlisting language="cpp">&amp;lt;!DOCTYPE RCC&amp;gt;
&amp;lt;RCC version=&quot;1.0&quot;&amp;gt;

&amp;lt;qresource prefix=&quot;/&quot;&amp;gt;
    &amp;lt;file&amp;gt;main.qml&amp;lt;/file&amp;gt;
    &amp;lt;file&amp;gt;images/background.png&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;

&amp;lt;/RCC&amp;gt;
</db:programlisting>
<db:para>Since background.png is a resource file, main.qml can refer to it using the relative path specified in example.qrc:</db:para>
<db:programlisting language="qml">// main.qml
import QtQuick 2.3

Image { source: &quot;images/background.png&quot; }
</db:programlisting>
<db:para>To allow QML to locate resource files correctly, the main.cpp loads the main QML file, main.qml, as a resource file using the .qrc scheme:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QQuickView view;
    view.setSource(QUrl(&quot;qrc:/main.qml&quot;));
    view.show();

    return app.exec();
}
</db:programlisting>
<db:para>Finally, project.pro uses the RESOURCES variable to indicate that example.qrc should be used to build the application resources:</db:para>
<db:programlisting language="cpp">QT += qml

SOURCES += main.cpp
RESOURCES += example.qrc
</db:programlisting>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="deployment.xml">Deploying Qt Applications</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/creator-running-targets.html">Running on Multiple Platforms</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/creator-deployment.html">Deploying to Devices</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-data.xml">qtqml-cppintegration-exposecppattributes.html</db:link>{Exposing Attributes of C++ Types to QML}</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="resources.xml">The Qt Resource System</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
