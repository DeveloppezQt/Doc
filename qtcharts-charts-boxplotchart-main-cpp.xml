<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Box and Whiskers Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a box-and-whiskers chart.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets/QApplication&amp;gt;
#include &amp;lt;QtWidgets/QMainWindow&amp;gt;
#include &amp;lt;QtCharts/QChartView&amp;gt;
#include &amp;lt;QtCharts/QBoxPlotSeries&amp;gt;
#include &amp;lt;QtCharts/QBoxSet&amp;gt;
#include &amp;lt;QtCharts/QLegend&amp;gt;
#include &amp;lt;QtCharts/QBarCategoryAxis&amp;gt;
#include &amp;lt;QtCore/QFile&amp;gt;

#include &quot;boxdatareader.h&quot;

QT_CHARTS_USE_NAMESPACE

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    QBoxPlotSeries *acmeSeries = new QBoxPlotSeries();
    acmeSeries-&amp;gt;setName(&quot;Acme Ltd&quot;);

    QBoxPlotSeries *boxWhiskSeries = new QBoxPlotSeries();
    boxWhiskSeries-&amp;gt;setName(&quot;BoxWhisk Inc&quot;);

    QFile acmeData(&quot;:acme&quot;);
    if (!acmeData.open(QIODevice::ReadOnly | QIODevice::Text))
        return 1;

    BoxDataReader dataReader(&amp;amp;acmeData);
    while (!dataReader.atEnd()) {
        QBoxSet *set = dataReader.readBox();
        if (set)
            acmeSeries-&amp;gt;append(set);
    }

    QFile boxwhiskData(&quot;:boxwhisk&quot;);
    if (!boxwhiskData.open(QIODevice::ReadOnly | QIODevice::Text))
        return 1;

    dataReader.readFile(&amp;amp;boxwhiskData);
    while (!dataReader.atEnd()) {
        QBoxSet *set = dataReader.readBox();
        if (set)
            boxWhiskSeries-&amp;gt;append(set);
    }

    QChart *chart = new QChart();
    chart-&amp;gt;addSeries(acmeSeries);
    chart-&amp;gt;addSeries(boxWhiskSeries);
    chart-&amp;gt;setTitle(&quot;Acme Ltd and BoxWhisk Inc share deviation in 2012&quot;);
    chart-&amp;gt;setAnimationOptions(QChart::SeriesAnimations);

    chart-&amp;gt;createDefaultAxes();
    chart-&amp;gt;axes(Qt::Vertical).first()-&amp;gt;setMin(15.0);
    chart-&amp;gt;axes(Qt::Horizontal).first()-&amp;gt;setMax(34.0);

    chart-&amp;gt;legend()-&amp;gt;setVisible(true);
    chart-&amp;gt;legend()-&amp;gt;setAlignment(Qt::AlignBottom);

    QChartView *chartView = new QChartView(chart);
    chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);

    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(800, 600);
    window.show();

    return a.exec();
}

</db:programlisting>
</db:article>
