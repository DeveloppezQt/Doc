<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating Links</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="07-0-qdoc-commands-includingexternalcode.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Including External Code"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="09-qdoc-commands-includingimages.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Including Images"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>These commands are for creating hyperlinks to classes, functions, examples, and other targets.</db:para>
<db:anchor xml:id="l-command"/>
<db:section xml:id="l-link">
<db:title>\l (link)</db:title>
<db:para>The \l link command is used to create a hyperlink to many different kinds of targets. The command's general syntax is:</db:para>
<db:programlisting language="cpp">\l [ link criteria ] { link target } { link text }
</db:programlisting>
<db:para>...where the link criteria in square brackets are optional but may be required when the link target is ambiguous. See <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#fixing-ambiguous-links">Fixing Ambiguous Links</db:link> below.</db:para>
<db:para>Here is an example using the \l command to link to an external page:</db:para>
<db:programlisting language="cpp">/ *!
   Read the \l {http://doc.qt.io/qt-6/}
   {Qt 6 Documentation} carefully.
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para>Read the <db:link xlink:href="http://doc.qt.io/qt-6/">Qt 6 Documentation</db:link> carefully.</db:para>
</db:blockquote>
<db:para>If the link target is equivalent to the link text, the second argument can be omitted.</db:para>
<db:para>For example, if you have documentation like:</db:para>
<db:programlisting language="cpp">/ *!
   \target assertions

   Assertions make some statement about the text at the
   point where they occur in the regexp, but they do not
   match any characters.

   ...

   Regexps are built up from expressions, quantifiers, and
   \l {assertions} {assertions}.
* /
</db:programlisting>
<db:para>You can simplify this as follows:</db:para>
<db:programlisting language="cpp">/ *!
  \target assertions

  Assertions make some statement about the text at the
  point where they occur in the regexp, but they do not
  match any characters.

  ...

  Regexps are built up from expressions, quantifiers, and
  \l assertions.
* /
</db:programlisting>
<db:para>For the one-parameter version, the braces can often be omitted. The \l command supports several ways of linking:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>\l QWidget - The name of a class documented with the <db:link xlink:href="13-qdoc-commands-topics.xml#class-command">\class</db:link> command.</db:para>
</db:listitem>
<db:listitem>
<db:para>\l QWidget::sizeHint() - The signature of a function without parameters. If a matching function without parameters can't be found, the link is satisfied with the first matching function found.</db:para>
</db:listitem>
<db:listitem>
<db:para>\l QWidget::removeAction(QAction* action) - The signature of a function with parameters. If an exact match is not found, the link is not satisfied and QDoc reports a <db:emphasis>Can't link to...</db:emphasis> error.</db:para>
</db:listitem>
<db:listitem>
<db:para>\l &lt;QtGlobal&gt; - The subject of a <db:link xlink:href="13-qdoc-commands-topics.xml#headerfile-command">\headerfile</db:link> command.</db:para>
</db:listitem>
<db:listitem>
<db:para>\l widgets/wiggly - The relative path used in an <db:link xlink:href="13-qdoc-commands-topics.xml#example-command">\example</db:link> command.</db:para>
</db:listitem>
<db:listitem>
<db:para>\l {QWidget Class Reference} - The title used in a <db:link xlink:href="20-qdoc-commands-namingthings.xml#title-command">\title</db:link> command.</db:para>
</db:listitem>
<db:listitem>
<db:para>\l {Introduction to QDoc}- The text from one of the <db:link xlink:href="05-qdoc-commands-documentstructure.xml#section-commands">Section commands</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>\l fontmatching - The argument of a <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#target-command">\target</db:link> command.</db:para>
</db:listitem>
<db:listitem>
<db:para>\l {Shared Classes} - A keyword named in a <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#keyword-command">\keyword</db:link> command.</db:para>
</db:listitem>
<db:listitem>
<db:para>\l http://qt-project.org/ - A URL.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>QDoc also tries to make a link out of any word that doesn't resemble a normal English word, for example, Qt class names or functions, like <db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>(). In these cases, the \l command can actually be omitted, but by using the command, you ensure that QDoc will emit a warning if it cannot find the link target. In addition, if you only want the function name to appear in the link, you can use the following syntax:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>\l {QWidget::} {sizeHint()}</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para><db:link xlink:href="qwidget.xml#sizeHint-prop">sizeHint</db:link>()</db:para>
</db:blockquote>
<db:section xml:id="fixing-ambiguous-links">
<db:title>Fixing Ambiguous Links</db:title>
<db:para>Because of the modularization of Qt beginning with Qt 5.0, The possibility that QDoc will have to deal with ambiguous links has increased. An ambiguous link is one that has a matching target in more than one Qt module, e.g. the same section title can appear in more than one Qt module, or the name of a C++ class in one module can also be the name of a QML type in another module. A real example in Qt5 is the name Qt itself. Qt is the name of both a C++ namespace in <db:link xlink:href="qtcore-module.xml">QtCore</db:link> and a QML type in <db:link xlink:href="qtqml-qmlmodule.xml">QtQml</db:link>.</db:para>
<db:para>Suppose we want to link to the <db:link xlink:href="qt.xml">Qt C++ namespace</db:link>. At the time QDoc generated this HTML page, that link was correct. Does it still go to the C++ namespace? Qdoc generated that link from this link command:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>\l {Qt} {Qt C++ namespace}</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Now suppose we want to link to the <db:link xlink:href="qml-qtqml-qt.xml">Qt QML type</db:link>. At the time QDoc generated this HTML page, that link was also correct, but we had to use this link command:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>\l [QML] {Qt} {Qt QML type}</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:emphasis>QML</db:emphasis> in <db:emphasis>square brackets</db:emphasis> tells QDoc to accept a matching target only if the target is on a QML page. Qdoc actually finds the C++ namespace target first, but since that target is on a C++ page, QDoc ignores it and keeps looking until it finds the same target on a QML page.</db:para>
<db:para>Without the guidance in the <db:emphasis>\l command</db:emphasis> in the optional <db:emphasis>square bracket</db:emphasis> argument, QDoc links to the first matching target it finds. QDoc can't warn that the link was ambiguous in such cases because it doesn't know that another matching target exists.</db:para>
</db:section>
<db:section xml:id="what-arguments-can-appear-in-square-brackets">
<db:title>What arguments can appear in square brackets?</db:title>
<db:para>A link command with square bracket argument has the following syntax:</db:para>
<db:para>\l [QML|CPP|DOC|QtModuleName] {link target} {link text}</db:para>
<db:para>The <db:emphasis>square bracket</db:emphasis> argument is only allowed in the \l (link) command. The example above shows how QML is used as the <db:emphasis>square brackets</db:emphasis> argument to force QDoc to match a QML target. Most often, this will be a QML type, but it can also be a QML member function of property.</db:para>
<db:para>In the example, QDoc didn't need a <db:emphasis>square bracket</db:emphasis> argument to find the Qt C++ namespace page, because that one was the first matching target QDoc found anyway. However, to force QDoc to find a C++ target when a matching QML target gets in the way, CPP can be used as the <db:emphasis>square bracket</db:emphasis> argument. For example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>\l [CPP] {Qt} {Qt C++ namespace}</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>...will force QDoc to ignore the Qt QML type and continue searching until it matches the Qt C++ namespace.</db:para>
<db:para>If the link target is neither a C++ nor a QML entity, DOC can be used as the <db:emphasis>square bracket</db:emphasis> argument to prevent QDoc from matching either of those. At this writing, there were no cases of ambiguous links where using DOC was required.</db:para>
<db:para>Often, the documentor knows which Qt module the link target is in. When the module name is known, use the module name as the <db:emphasis>square bracket</db:emphasis> argument. In the example above, if we know that the QML type named Qt is located in the <db:link xlink:href="qtqml-qmlmodule.xml">QtQml</db:link> module, we can write the link command like this:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>\l [QtQml] {Qt} {Qt QML type}</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When a module name is used as the <db:emphasis>square bracket</db:emphasis> argument, QDoc will search for the link target in that module only. This makes searching for link targets more efficient.</db:para>
<db:para>Finally, the module name and entity type arguments can be combined, separated by a blank, so something like this is also allowed:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>\l [CPP QtQml] {Window} {C++ class Window}</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>As of this writing, there were no cases where combining the two was required.</db:para>
<db:para>See also <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#sa-command">\sa</db:link>, <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#target-command">\target</db:link>, and <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#keyword-command">\keyword</db:link>.</db:para>
<db:anchor xml:id="sa-command"/>
</db:section>
</db:section>
<db:section xml:id="sa-see-also">
<db:title>\sa (see also)</db:title>
<db:para>The \sa command defines a list of links that will be rendered in a separate &quot;See also&quot; section at the bottom of the documentation unit.</db:para>
<db:para>The command takes a comma-separated list of links as its argument. If the line ends with a comma, you can continue the list on the next line. The general syntax is:</db:para>
<db:programlisting language="cpp">\sa {the first link}, {the second link},
    {the third link}, ...
</db:programlisting>
<db:para>QDoc will automatically try to generate &quot;See also&quot; links interconnecting a property's various functions. For example, a setVisible() function will automatically get a link to visible() and vice versa.</db:para>
<db:para>In general, QDoc will generate &quot;See also&quot; links that interconnect the functions that access the same property. It recognizes four different syntax versions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>property()</db:para>
</db:listitem>
<db:listitem>
<db:para>setProperty()</db:para>
</db:listitem>
<db:listitem>
<db:para>isProperty()</db:para>
</db:listitem>
<db:listitem>
<db:para>hasProperty()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The \sa command supports the same kind of links as the <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#l-command">\l</db:link> command.</db:para>
<db:programlisting language="cpp">/ *!
   Appends the actions \a actions to this widget's
   list of actions.

   \sa removeAction(), QMenu, addAction()
* /
void QWidget::addActions(QList&amp;lt;QAction *&amp;gt; actions)
{
...
}
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para><db:emphasis role="bold">void <db:link xlink:href="qwidget.xml#addActions">QWidget::addActions</db:link> ( <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qaction.xml">QAction</db:link>*&gt; <db:emphasis>actions</db:emphasis> )</db:emphasis></db:para>
<db:para>Appends the actions <db:emphasis>actions</db:emphasis> to this widget's list of actions.</db:para>
<db:para>See also <db:link xlink:href="qwidget.xml#removeAction">removeAction</db:link>(), <db:link xlink:href="qmenu.xml">QMenu</db:link>, and <db:link xlink:href="qwidget.xml#addAction">addAction</db:link>().</db:para>
</db:blockquote>
<db:para>See also <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#l-command">\l</db:link>, <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#target-command">\target</db:link> and <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#keyword-command">\keyword</db:link>.</db:para>
<db:anchor xml:id="target-command"/>
</db:section>
<db:section xml:id="target">
<db:title>\target</db:title>
<db:para>The \target command names a place in the documentation that you can link to using the <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#l-command">\l (link)</db:link> and <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#sa-command">\sa (see also)</db:link> commands.</db:para>
<db:para>The text up to the line break becomes the target name. Be sure to follow the target name with a line break. Curly brackets are not required around the target name, but they may be required when the target name is used in a link command. See below.</db:para>
<db:programlisting language="cpp">/ *!
    \target capturing parentheses
    \section1 Capturing Text

    Parentheses allow us to group elements together so that
    we can quantify and capture them.

    ...
* /
</db:programlisting>
<db:para>The target name <db:emphasis>capturing parentheses</db:emphasis> can be linked to in the following way:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>\l {capturing parentheses}</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>The brackets in the link example are required because the target name contains spaces.</db:para>
</db:note>
<db:para>See also <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#l-command">\l</db:link>, <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#sa-command">\sa</db:link> and <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#keyword-command">\keyword</db:link>.</db:para>
<db:anchor xml:id="keyword-command"/>
</db:section>
<db:section xml:id="keyword">
<db:title>\keyword</db:title>
<db:para>The \keyword command names a place in the documentation that you can link to using the <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#l-command">\l (link)</db:link> and <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#sa-command">\sa (see also)</db:link> commands.</db:para>
<db:para>The \keyword command is like the <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#target-command">\target</db:link> command, except when linking to keyword the link goes to the top of the QDoc comment where the \keyword appears in. If you want to create a link target to a section unit within a \page, use \target instead. A keyword can be linked from anywhere using a simple syntax.</db:para>
<db:para>Keywords must be unique over all the documents processed during the QDoc run. The command uses the rest of the line as its argument. Be sure to follow the keyword with a line break.</db:para>
<db:programlisting language="cpp">/ *!
    \class QRegularExpression
    \reentrant
    \brief The QRegularExpression class provides pattern
           matching using regular expressions.
    \ingroup tools
    \ingroup misc
    \ingroup shared

    \keyword regular expression

    Regular expressions, or &quot;regexps&quot;, provide a way to
    find patterns within text.

    ...
* /
</db:programlisting>
<db:para>The location marked with the keyword can be linked to with:</db:para>
<db:programlisting language="cpp">/ *!
    When a string is surrounded by slashes, it is
    interpreted as a \l {regular expression}.
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para>When a string is surrounded by slashes, it is interpreted as a <db:link xlink:href="qregularexpression.xml">regular expression</db:link>.</db:para>
</db:blockquote>
<db:para>If the keyword text contains spaces, the brackets are required.</db:para>
<db:para>See also <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#l-command">\l (link)</db:link>, <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#sa-command">\sa (see also)</db:link> and <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#target-command">\target</db:link>.</db:para>
</db:section>
</db:article>
