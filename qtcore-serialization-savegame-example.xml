<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>JSON Save Game Example</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The JSON Save Game example demonstrates how to save and load a small game using QJsonDocument, QJsonObject and QJsonArray.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Many games provide save functionality, so that the player's progress through the game can be saved and loaded at a later time. The process of saving a game generally involves serializing each game object's member variables to a file. Many formats can be used for this purpose, one of which is JSON. With QJsonDocument, you also have the ability to serialize a document in a binary format, which is great if you don't want the save file to be readable, or if you need to keep the file size down.</db:para>
<db:para>In this example, we'll demonstrate how to save and load a simple game to and from JSON and binary formats.</db:para>
<db:section xml:id="the-character-class">
<db:title>The Character Class</db:title>
<db:para>The Character class represents a non-player character (NPC) in our game, and stores the player's name, level, and class type.</db:para>
<db:para>It provides read() and write() functions to serialise its member variables.</db:para>
<db:programlisting language="cpp">class Character
{
    Q_GADGET;

public:
    enum ClassType {
        Warrior, Mage, Archer
    };
    Q_ENUM(ClassType)

    Character();
    Character(const QString &amp;amp;name, int level, ClassType classType);

    QString name() const;
    void setName(const QString &amp;amp;name);

    int level() const;
    void setLevel(int level);

    ClassType classType() const;
    void setClassType(ClassType classType);

    void read(const QJsonObject &amp;amp;json);
    void write(QJsonObject &amp;amp;json) const;

    void print(int indentation = 0) const;
private:
    QString mName;
    int mLevel;
    ClassType mClassType;
};
</db:programlisting>
<db:para>Of particular interest to us are the read and write function implementations:</db:para>
<db:programlisting language="cpp">void Character::read(const QJsonObject &amp;amp;json)
{
    if (json.contains(&quot;name&quot;) &amp;amp;&amp;amp; json[&quot;name&quot;].isString())
        mName = json[&quot;name&quot;].toString();

    if (json.contains(&quot;level&quot;) &amp;amp;&amp;amp; json[&quot;level&quot;].isDouble())
        mLevel = json[&quot;level&quot;].toInt();

    if (json.contains(&quot;classType&quot;) &amp;amp;&amp;amp; json[&quot;classType&quot;].isDouble())
        mClassType = ClassType(json[&quot;classType&quot;].toInt());
}
</db:programlisting>
<db:para>In the read() function, we assign Character's members values from the QJsonObject argument. You can use either <db:link xlink:href="">QJsonObject::operator[]()</db:link> or QJsonObject::value() to access values within the JSON object; both are const functions and return QJsonValue::Undefined if the key is invalid. We check if the keys are valid before attempting to read them with QJsonObject::contains().</db:para>
<db:programlisting language="cpp">void Character::write(QJsonObject &amp;amp;json) const
{
    json[&quot;name&quot;] = mName;
    json[&quot;level&quot;] = mLevel;
    json[&quot;classType&quot;] = mClassType;
}
</db:programlisting>
<db:para>In the write() function, we do the reverse of the read() function; assign values from the Character object to the JSON object. As with accessing values, there are two ways to set values on a QJsonObject: <db:link xlink:href="">QJsonObject::operator[]()</db:link> and QJsonObject::insert(). Both will override any existing value at the given key.</db:para>
<db:para>Next up is the Level class:</db:para>
<db:programlisting language="cpp">class Level
{
public:
    Level() = default;
    Level(const QString &amp;amp;name);

    QString name() const;

    QVector&amp;lt;Character&amp;gt; npcs() const;
    void setNpcs(const QVector&amp;lt;Character&amp;gt; &amp;amp;npcs);

    void read(const QJsonObject &amp;amp;json);
    void write(QJsonObject &amp;amp;json) const;

    void print(int indentation = 0) const;
private:
    QString mName;
    QVector&amp;lt;Character&amp;gt; mNpcs;
};
</db:programlisting>
<db:para>We want to have several levels in our game, each with several NPCs, so we keep a <db:link xlink:href="qvector.xml">QVector</db:link> of Character objects. We also provide the familiar read() and write() functions.</db:para>
<db:programlisting language="cpp">void Level::read(const QJsonObject &amp;amp;json)
{
    if (json.contains(&quot;name&quot;) &amp;amp;&amp;amp; json[&quot;name&quot;].isString())
        mName = json[&quot;name&quot;].toString();

    if (json.contains(&quot;npcs&quot;) &amp;amp;&amp;amp; json[&quot;npcs&quot;].isArray()) {
        QJsonArray npcArray = json[&quot;npcs&quot;].toArray();
        mNpcs.clear();
        mNpcs.reserve(npcArray.size());
        for (int npcIndex = 0; npcIndex &amp;lt; npcArray.size(); ++npcIndex) {
            QJsonObject npcObject = npcArray[npcIndex].toObject();
            Character npc;
            npc.read(npcObject);
            mNpcs.append(npc);
        }
    }
}
</db:programlisting>
<db:para>Containers can be written and read to and from JSON using QJsonArray. In our case, we construct a QJsonArray from the value associated with the key &quot;npcs&quot;. Then, for each QJsonValue element in the array, we call toObject() to get the Character's JSON object. The Character object can then read their JSON and be appended to our NPC array.</db:para>
<db:note>
<db:para><db:link xlink:href="containers.xml">Associate containers</db:link> can be written by storing the key in each value object (if it's not already). With this approach, the container is stored as a regular array of objects, but the index of each element is used as the key to construct the container when reading it back in.</db:para>
</db:note>
<db:programlisting language="cpp">void Level::write(QJsonObject &amp;amp;json) const
{
    json[&quot;name&quot;] = mName;
    QJsonArray npcArray;
    for (const Character &amp;amp;npc : mNpcs) {
        QJsonObject npcObject;
        npc.write(npcObject);
        npcArray.append(npcObject);
    }
    json[&quot;npcs&quot;] = npcArray;
}
</db:programlisting>
<db:para>Again, the write() function is similar to the read() function, except reversed.</db:para>
<db:para>Having established the Character and Level classes, we can move on to the Game class:</db:para>
<db:programlisting language="cpp">class Game
{
public:
    enum SaveFormat {
        Json, Binary
    };

    Character player() const;
    QVector&amp;lt;Level&amp;gt; levels() const;

    void newGame();
    bool loadGame(SaveFormat saveFormat);
    bool saveGame(SaveFormat saveFormat) const;

    void read(const QJsonObject &amp;amp;json);
    void write(QJsonObject &amp;amp;json) const;

    void print(int indentation = 0) const;
private:
    Character mPlayer;
    QVector&amp;lt;Level&amp;gt; mLevels;
};
</db:programlisting>
<db:para>First of all, we define the SaveFormat enum. This will allow us to specify the format in which the game should be saved: Json or Binary.</db:para>
<db:para>Next, we provide accessors for the player and levels. We then expose three functions: newGame(), saveGame() and loadGame().</db:para>
<db:para>The read() and write() functions are used by saveGame() and loadGame().</db:para>
<db:programlisting language="cpp">void Game::newGame()
{
    mPlayer = Character();
    mPlayer.setName(QStringLiteral(&quot;Hero&quot;));
    mPlayer.setClassType(Character::Archer);
    mPlayer.setLevel(QRandomGenerator::global()-&amp;gt;bounded(15, 21));

    mLevels.clear();
    mLevels.reserve(2);

    Level village(QStringLiteral(&quot;Village&quot;));
    QVector&amp;lt;Character&amp;gt; villageNpcs;
    villageNpcs.reserve(2);
    villageNpcs.append(Character(QStringLiteral(&quot;Barry the Blacksmith&quot;),
                                 QRandomGenerator::global()-&amp;gt;bounded(8, 11),
                                 Character::Warrior));
    villageNpcs.append(Character(QStringLiteral(&quot;Terry the Trader&quot;),
                                 QRandomGenerator::global()-&amp;gt;bounded(6, 8),
                                 Character::Warrior));
    village.setNpcs(villageNpcs);
    mLevels.append(village);

    Level dungeon(QStringLiteral(&quot;Dungeon&quot;));
    QVector&amp;lt;Character&amp;gt; dungeonNpcs;
    dungeonNpcs.reserve(3);
    dungeonNpcs.append(Character(QStringLiteral(&quot;Eric the Evil&quot;),
                                 QRandomGenerator::global()-&amp;gt;bounded(18, 26),
                                 Character::Mage));
    dungeonNpcs.append(Character(QStringLiteral(&quot;Eric's Left Minion&quot;),
                                 QRandomGenerator::global()-&amp;gt;bounded(5, 7),
                                 Character::Warrior));
    dungeonNpcs.append(Character(QStringLiteral(&quot;Eric's Right Minion&quot;),
                                 QRandomGenerator::global()-&amp;gt;bounded(4, 9),
                                 Character::Warrior));
    dungeon.setNpcs(dungeonNpcs);
    mLevels.append(dungeon);
}
</db:programlisting>
<db:para>To setup a new game, we create the player and populate the levels and their NPCs.</db:para>
<db:programlisting language="cpp">void Game::read(const QJsonObject &amp;amp;json)
{
    if (json.contains(&quot;player&quot;) &amp;amp;&amp;amp; json[&quot;player&quot;].isObject())
        mPlayer.read(json[&quot;player&quot;].toObject());

    if (json.contains(&quot;levels&quot;) &amp;amp;&amp;amp; json[&quot;levels&quot;].isArray()) {
        QJsonArray levelArray = json[&quot;levels&quot;].toArray();
        mLevels.clear();
        mLevels.reserve(levelArray.size());
        for (int levelIndex = 0; levelIndex &amp;lt; levelArray.size(); ++levelIndex) {
            QJsonObject levelObject = levelArray[levelIndex].toObject();
            Level level;
            level.read(levelObject);
            mLevels.append(level);
        }
    }
}
</db:programlisting>
<db:para>The first thing we do in the read() function is tell the player to read itself. We then clear the level array so that calling loadGame() on the same Game object twice doesn't result in old levels hanging around.</db:para>
<db:para>We then populate the level array by reading each Level from a QJsonArray.</db:para>
<db:programlisting language="cpp">void Game::write(QJsonObject &amp;amp;json) const
{
    QJsonObject playerObject;
    mPlayer.write(playerObject);
    json[&quot;player&quot;] = playerObject;

    QJsonArray levelArray;
    for (const Level &amp;amp;level : mLevels) {
        QJsonObject levelObject;
        level.write(levelObject);
        levelArray.append(levelObject);
    }
    json[&quot;levels&quot;] = levelArray;
}
</db:programlisting>
<db:para>We write the game to JSON similarly to how we write Level.</db:para>
<db:programlisting language="cpp">bool Game::loadGame(Game::SaveFormat saveFormat)
{
    QFile loadFile(saveFormat == Json
        ? QStringLiteral(&quot;save.json&quot;)
        : QStringLiteral(&quot;save.dat&quot;));

    if (!loadFile.open(QIODevice::ReadOnly)) {
        qWarning(&quot;Couldn't open save file.&quot;);
        return false;
    }

    QByteArray saveData = loadFile.readAll();

    QJsonDocument loadDoc(saveFormat == Json
        ? QJsonDocument::fromJson(saveData)
        : QJsonDocument::fromBinaryData(saveData));

    read(loadDoc.object());

    QTextStream(stdout) &amp;lt;&amp;lt; &quot;Loaded save for &quot;
                        &amp;lt;&amp;lt; loadDoc[&quot;player&quot;][&quot;name&quot;].toString()
                        &amp;lt;&amp;lt; &quot; using &quot;
                        &amp;lt;&amp;lt; (saveFormat != Json ? &quot;binary &quot; : &quot;&quot;) &amp;lt;&amp;lt; &quot;JSON...\n&quot;;
    return true;
}
</db:programlisting>
<db:para>When loading a saved game in loadGame(), the first thing we do is open the save file based on which format it was saved to; &quot;save.json&quot; for JSON, and &quot;save.dat&quot; for binary. We print a warning and return false if the file couldn't be opened.</db:para>
<db:para>Since QJsonDocument's <db:link xlink:href="">fromJson()</db:link> and <db:link xlink:href="">fromBinaryData()</db:link> functions both take a QByteArray, we can read the entire contents of the save file into one, regardless of the save format.</db:para>
<db:para>After constructing the QJsonDocument, we instruct the Game object to read itself and then return true to indicate success.</db:para>
<db:programlisting language="cpp">bool Game::saveGame(Game::SaveFormat saveFormat) const
{
    QFile saveFile(saveFormat == Json
        ? QStringLiteral(&quot;save.json&quot;)
        : QStringLiteral(&quot;save.dat&quot;));

    if (!saveFile.open(QIODevice::WriteOnly)) {
        qWarning(&quot;Couldn't open save file.&quot;);
        return false;
    }

    QJsonObject gameObject;
    write(gameObject);
    QJsonDocument saveDoc(gameObject);
    saveFile.write(saveFormat == Json
        ? saveDoc.toJson()
        : saveDoc.toBinaryData());

    return true;
}
</db:programlisting>
<db:para>Not surprisingly, saveGame() looks very much like loadGame(). We determine the file extension based on the format, print a warning and return false if the opening of the file fails. We then write the Game object to a QJsonDocument, and call either QJsonDocument::toJson() or to QJsonDocument::toBinaryData() to save the game, depending on which format was specified.</db:para>
<db:para>We are now ready to enter main():</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    QStringList args = QCoreApplication::arguments();
    bool newGame = true;
    if (args.length() &amp;gt; 1)
        newGame = (args[1].toLower() != QStringLiteral(&quot;load&quot;));
    bool json = true;
    if (args.length() &amp;gt; 2)
        json = (args[2].toLower() != QStringLiteral(&quot;binary&quot;));

    Game game;
    if (newGame)
        game.newGame();
    else if (!game.loadGame(json ? Game::Json : Game::Binary))
            return 1;
    // Game is played; changes are made...
</db:programlisting>
<db:para>Since we're only interested in demonstrating <db:emphasis>serialization</db:emphasis> of a game with JSON, our game is not actually playable. Therefore, we only need QCoreApplication and have no event loop. On application start-up we parse the command-line arguments to decide how to start the game. For the first argument the options &quot;new&quot; (default) and &quot;load&quot; are available. When &quot;new&quot; is specified a new game will be generated, and when &quot;load&quot; is specified a previously saved game will be loaded in. For the second argument &quot;json&quot; (default) and &quot;binary&quot; are available as options. This argument will decide which file is saved to and/or loaded from. We then move ahead and assume that the player had a great time and made lots of progress, altering the internal state of our Character, Level and Game objects.</db:para>
<db:programlisting language="cpp">    QTextStream(stdout) &amp;lt;&amp;lt; &quot;Game ended in the following state:\n&quot;;
    game.print();
    if (!game.saveGame(json ? Game::Json : Game::Binary))
        return 1;

    return 0;
}
</db:programlisting>
<db:para>When the player has finished, we save their game. For demonstration purposes, we can serialize to either JSON or binary. You can examine the contents of the files in the same directory as the executable (or re-run the example, making sure to also specify the &quot;load&quot; option), although the binary save file will contain some garbage characters (which is normal).</db:para>
<db:para>That concludes our example. As you can see, serialization with Qt's JSON classes is very simple and convenient. The advantages of using QJsonDocument and friends over QDataStream, for example, is that you not only get human-readable JSON files, but you also have the option to use a binary format if it's required, <db:emphasis>without</db:emphasis> rewriting any code.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/corelib/serialization/savegame?h=5.13">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="json.xml">JSON Support in Qt</db:link></db:member>
<db:member><db:link xlink:href="topics-data-storage.xml">Data Storage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
