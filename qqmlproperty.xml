<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlProperty Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> class abstracts accessing properties on objects created from QML.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlProperty</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>As QML uses Qt's meta-type system all of the existing <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> classes can be used to introspect and interact with objects created by QML. However, some of the new features provided by QML - such as type safety and attached properties - are most easily used through the <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> class that simplifies some of their natural complexity.</db:para>
<db:para>Unlike <db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link> which represents a property on a class type, <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> encapsulates a property on a specific object instance. To read a property's value, programmers create a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> instance and call the <db:link xlink:href="qqmlproperty.xml#read">read</db:link>() method. Likewise to write a property value the <db:link xlink:href="qqmlproperty.xml#write">write</db:link>() method is used.</db:para>
<db:para>For example, for the following QML code:</db:para>
<db:programlisting language="qml">// MyItem.qml
import QtQuick 2.0

Text { text: &quot;A bit of text&quot; }
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object's properties could be accessed using <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link>, like this:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QQmlProperty&amp;gt;
#include &amp;lt;QGraphicsObject&amp;gt;

...

QQuickView view(QUrl::fromLocalFile(&quot;MyItem.qml&quot;));
QQmlProperty property(view.rootObject(), &quot;font.pixelSize&quot;);
qWarning() &amp;lt;&amp;lt; &quot;Current pixel size:&quot; &amp;lt;&amp;lt; property.read().toInt();
property.write(24);
qWarning() &amp;lt;&amp;lt; &quot;Pixel size should now be 24:&quot; &amp;lt;&amp;lt; property.read().toInt();
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PropertyTypeCategory-enum">
<db:title>enum QQmlProperty::PropertyTypeCategory</db:title>
<db:enumsynopsis>
<db:enumname>PropertyTypeCategory</db:enumname>
<db:enumitem>
<db:enumidentifier>InvalidCategory</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>List</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Object</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Normal</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies a category of QML property.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link></db:emphasis>::InvalidCategory</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The property is invalid, or is a signal property.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link></db:emphasis>::List</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The property is a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> list property</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link></db:emphasis>::Object</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The property is a <db:link xlink:href="qobject.xml">QObject</db:link> derived type pointer</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link></db:emphasis>::Normal</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The property is a normal value property.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QQmlProperty::Type</db:title>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>Invalid</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Property</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SignalProperty</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies a type of QML property.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link></db:emphasis>::Invalid</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The property is invalid.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link></db:emphasis>::Property</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The property is a regular Qt property.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link></db:emphasis>::SignalProperty</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The property is a signal property.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlProperty">
<db:title>QQmlProperty::QQmlProperty()</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlProperty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create an invalid <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link>.</db:para>
</db:section>
<db:section xml:id="QQmlProperty-1">
<db:title>QQmlProperty::QQmlProperty(QObject *<db:emphasis>obj</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty(QObject *obj)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> for the default property of <db:code role="parameter">obj</db:code>. If there is no default property, an invalid <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> will be created.</db:para>
</db:section>
<db:section xml:id="QQmlProperty-2">
<db:title>QQmlProperty::QQmlProperty(QObject *<db:emphasis>obj</db:emphasis>, QQmlContext *<db:emphasis>ctxt</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>ctxt</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty(QObject *obj, QQmlContext *ctxt)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> for the default property of <db:code role="parameter">obj</db:code> using the <db:link xlink:href="qqmlcontext.xml">context</db:link> <db:code role="parameter">ctxt</db:code>. If there is no default property, an invalid <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> will be created.</db:para>
</db:section>
<db:section xml:id="QQmlProperty-3">
<db:title>QQmlProperty::QQmlProperty(QObject *<db:emphasis>obj</db:emphasis>, QQmlEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty(QObject *obj, QQmlEngine *engine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> for the default property of <db:code role="parameter">obj</db:code> using the environment for instantiating QML components that is provided by <db:code role="parameter">engine</db:code>. If there is no default property, an invalid <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> will be created.</db:para>
</db:section>
<db:section xml:id="QQmlProperty-4">
<db:title>QQmlProperty::QQmlProperty(QObject *<db:emphasis>obj</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty(QObject *obj, const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> for the property <db:code role="parameter">name</db:code> of <db:code role="parameter">obj</db:code>.</db:para>
</db:section>
<db:section xml:id="QQmlProperty-5">
<db:title>QQmlProperty::QQmlProperty(QObject *<db:emphasis>obj</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, QQmlContext *<db:emphasis>ctxt</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>ctxt</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty(QObject *obj, const QString &amp;name, QQmlContext *ctxt)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> for the property <db:code role="parameter">name</db:code> of <db:code role="parameter">obj</db:code> using the <db:link xlink:href="qqmlcontext.xml">context</db:link> <db:code role="parameter">ctxt</db:code>.</db:para>
<db:para>Creating a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> without a context will render some properties - like attached properties - inaccessible.</db:para>
</db:section>
<db:section xml:id="QQmlProperty-6">
<db:title>QQmlProperty::QQmlProperty(QObject *<db:emphasis>obj</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, QQmlEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty(QObject *obj, const QString &amp;name, QQmlEngine *engine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> for the property <db:code role="parameter">name</db:code> of <db:code role="parameter">obj</db:code> using the environment for instantiating QML components that is provided by <db:code role="parameter">engine</db:code>.</db:para>
</db:section>
<db:section xml:id="QQmlProperty-7">
<db:title>QQmlProperty::QQmlProperty(const QQmlProperty &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlProperty</db:methodname>
<db:methodparam>
<db:type>const QQmlProperty &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty(const QQmlProperty &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="connectNotifySignal">
<db:title>bool QQmlProperty::connectNotifySignal(QObject *<db:emphasis>dest</db:emphasis>, const char *<db:emphasis>slot</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>connectNotifySignal</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>dest</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>slot</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool connectNotifySignal(QObject *dest, const char *slot) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Connects the property's change notifier signal to the specified <db:code role="parameter">slot</db:code> of the <db:code role="parameter">dest</db:code> object and returns true. Returns false if this metaproperty does not represent a regular Qt property or if it has no change notifier signal, or if the <db:code role="parameter">dest</db:code> object does not have the specified <db:code role="parameter">slot</db:code>.</db:para>
<db:note>
<db:para><db:code role="parameter">slot</db:code> should be passed using the SLOT() macro so it is correctly identified.</db:para>
</db:note>
</db:section>
<db:section xml:id="connectNotifySignal-1">
<db:title>bool QQmlProperty::connectNotifySignal(QObject *<db:emphasis>dest</db:emphasis>, int <db:emphasis>method</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>connectNotifySignal</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>dest</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool connectNotifySignal(QObject *dest, int method) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Connects the property's change notifier signal to the specified <db:code role="parameter">method</db:code> of the <db:code role="parameter">dest</db:code> object and returns true. Returns false if this metaproperty does not represent a regular Qt property or if it has no change notifier signal, or if the <db:code role="parameter">dest</db:code> object does not have the specified <db:code role="parameter">method</db:code>.</db:para>
</db:section>
<db:section xml:id="hasNotifySignal">
<db:title>bool QQmlProperty::hasNotifySignal() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasNotifySignal</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasNotifySignal() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property has a change notifier signal, otherwise false.</db:para>
</db:section>
<db:section xml:id="index">
<db:title>int QQmlProperty::index() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>index</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int index() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the Qt metaobject index of the property.</db:para>
</db:section>
<db:section xml:id="isDesignable">
<db:title>bool QQmlProperty::isDesignable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDesignable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDesignable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property is designable, otherwise false.</db:para>
</db:section>
<db:section xml:id="isProperty">
<db:title>bool QQmlProperty::isProperty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isProperty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isProperty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> represents a regular Qt property.</db:para>
</db:section>
<db:section xml:id="isResettable">
<db:title>bool QQmlProperty::isResettable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isResettable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isResettable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property is resettable, otherwise false.</db:para>
</db:section>
<db:section xml:id="isSignalProperty">
<db:title>bool QQmlProperty::isSignalProperty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSignalProperty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSignalProperty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> represents a QML signal property.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QQmlProperty::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> refers to a valid property, otherwise false.</db:para>
</db:section>
<db:section xml:id="isWritable">
<db:title>bool QQmlProperty::isWritable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWritable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWritable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property is writable, otherwise false.</db:para>
</db:section>
<db:section xml:id="method">
<db:title>QMetaMethod QQmlProperty::method() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaMethod</db:type>
<db:methodname>method</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaMethod method() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> for this property if it is a <db:link xlink:href="qqmlproperty.xml#Type-enum">SignalProperty</db:link>, otherwise returns an invalid <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link>.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>QString QQmlProperty::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the name of this QML property.</db:para>
</db:section>
<db:section xml:id="needsNotifySignal">
<db:title>bool QQmlProperty::needsNotifySignal() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>needsNotifySignal</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool needsNotifySignal() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property needs a change notifier signal for bindings to remain upto date, false otherwise.</db:para>
<db:para>Some properties, such as attached properties or those whose value never changes, do not require a change notifier.</db:para>
</db:section>
<db:section xml:id="object">
<db:title>QObject *QQmlProperty::object() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>object</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * object() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link>'s <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
</db:section>
<db:section xml:id="property">
<db:title>QMetaProperty QQmlProperty::property() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaProperty</db:type>
<db:methodname>property</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaProperty property() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qmetaproperty.xml">Qt property</db:link> associated with this QML property.</db:para>
</db:section>
<db:section xml:id="propertyType">
<db:title>int QQmlProperty::propertyType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>propertyType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int propertyType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qvariant.xml">QVariant</db:link> type of the property, or QVariant::Invalid if the property has no <db:link xlink:href="qvariant.xml">QVariant</db:link> type.</db:para>
</db:section>
<db:section xml:id="propertyTypeCategory">
<db:title>QQmlProperty::PropertyTypeCategory QQmlProperty::propertyTypeCategory() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlProperty::PropertyTypeCategory</db:type>
<db:methodname>propertyTypeCategory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty::PropertyTypeCategory propertyTypeCategory() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the property category.</db:para>
</db:section>
<db:section xml:id="propertyTypeName">
<db:title>const char *QQmlProperty::propertyTypeName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>propertyTypeName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * propertyTypeName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type name of the property, or 0 if the property has no type name.</db:para>
</db:section>
<db:section xml:id="read">
<db:title>QVariant QQmlProperty::read() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>read</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant read() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the property value.</db:para>
</db:section>
<db:section xml:id="read-1">
<db:title>[static] QVariant QQmlProperty::read(const QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>read</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant read(const QObject *object, const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the <db:code role="parameter">name</db:code> property value of <db:code role="parameter">object</db:code>. This method is equivalent to:</db:para>
<db:programlisting language="cpp">QQmlProperty p(object, name);
p.read();
</db:programlisting>
</db:section>
<db:section xml:id="read-2">
<db:title>[static] QVariant QQmlProperty::read(const QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, QQmlContext *<db:emphasis>ctxt</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>read</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>ctxt</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant read(const QObject *object, const QString &amp;name, QQmlContext *ctxt)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the <db:code role="parameter">name</db:code> property value of <db:code role="parameter">object</db:code> using the <db:link xlink:href="qqmlcontext.xml">context</db:link> <db:code role="parameter">ctxt</db:code>. This method is equivalent to:</db:para>
<db:programlisting language="cpp">QQmlProperty p(object, name, context);
p.read();
</db:programlisting>
</db:section>
<db:section xml:id="read-3">
<db:title>[static] QVariant QQmlProperty::read(const QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, QQmlEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>read</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant read(const QObject *object, const QString &amp;name, QQmlEngine *engine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the <db:code role="parameter">name</db:code> property value of <db:code role="parameter">object</db:code> using the environment for instantiating QML components that is provided by <db:code role="parameter">engine</db:code>. . This method is equivalent to:</db:para>
<db:programlisting language="cpp">QQmlProperty p(object, name, engine);
p.read();
</db:programlisting>
</db:section>
<db:section xml:id="reset">
<db:title>bool QQmlProperty::reset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool reset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the property and returns true if the property is resettable. If the property is not resettable, nothing happens and false is returned.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QQmlProperty::Type QQmlProperty::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlProperty::Type</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty::Type type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the property.</db:para>
</db:section>
<db:section xml:id="write">
<db:title>bool QQmlProperty::write(const QVariant &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool write(const QVariant &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the property value to <db:code role="parameter">value</db:code>. Returns <db:code>true</db:code> on success, or <db:code>false</db:code> if the property can't be set because the <db:code role="parameter">value</db:code> is the wrong type, for example.</db:para>
</db:section>
<db:section xml:id="write-1">
<db:title>[static] bool QQmlProperty::write(QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool write(QObject *object, const QString &amp;name, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">value</db:code> to the <db:code role="parameter">name</db:code> property of <db:code role="parameter">object</db:code>. This method is equivalent to:</db:para>
<db:programlisting language="cpp">QQmlProperty p(object, name);
p.write(value);
</db:programlisting>
<db:para>Returns <db:code>true</db:code> on success, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="write-2">
<db:title>[static] bool QQmlProperty::write(QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, QQmlContext *<db:emphasis>ctxt</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>ctxt</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool write(QObject *object, const QString &amp;name, const QVariant &amp;value, QQmlContext *ctxt)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">value</db:code> to the <db:code role="parameter">name</db:code> property of <db:code role="parameter">object</db:code> using the <db:link xlink:href="qqmlcontext.xml">context</db:link> <db:code role="parameter">ctxt</db:code>. This method is equivalent to:</db:para>
<db:programlisting language="cpp">QQmlProperty p(object, name, ctxt);
p.write(value);
</db:programlisting>
<db:para>Returns <db:code>true</db:code> on success, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="write-3">
<db:title>[static] bool QQmlProperty::write(QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, QQmlEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool write(QObject *object, const QString &amp;name, const QVariant &amp;value, QQmlEngine *engine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">value</db:code> to the <db:code role="parameter">name</db:code> property of <db:code role="parameter">object</db:code> using the environment for instantiating QML components that is provided by <db:code role="parameter">engine</db:code>. This method is equivalent to:</db:para>
<db:programlisting language="cpp">QQmlProperty p(object, name, engine);
p.write(value);
</db:programlisting>
<db:para>Returns <db:code>true</db:code> on success, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QQmlProperty &amp;QQmlProperty::operator=(const QQmlProperty &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QQmlProperty &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QQmlProperty &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlProperty &amp; operator=(const QQmlProperty &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assign <db:code role="parameter">other</db:code> to this <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QQmlProperty::operator==(const QQmlProperty &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QQmlProperty &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QQmlProperty &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> and this <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> represent the same property.</db:para>
</db:section>
</db:section>
</db:article>
