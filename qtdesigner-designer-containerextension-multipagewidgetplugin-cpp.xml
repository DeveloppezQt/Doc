<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Container Extension Example</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>Creating a custom multi-page plugin for <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtDesigner/QExtensionFactory&amp;gt;
#include &amp;lt;QtDesigner/QExtensionManager&amp;gt;
#include &amp;lt;QtDesigner/QDesignerFormEditorInterface&amp;gt;
#include &amp;lt;QtDesigner/QDesignerFormWindowInterface&amp;gt;
#include &amp;lt;QtDesigner/QDesignerContainerExtension&amp;gt;
#include &amp;lt;QtDesigner/QDesignerPropertySheetExtension&amp;gt;

#include &amp;lt;QIcon&amp;gt;
#include &amp;lt;QtPlugin&amp;gt;

#include &quot;multipagewidget.h&quot;
#include &quot;multipagewidgetplugin.h&quot;
#include &quot;multipagewidgetextensionfactory.h&quot;

MultiPageWidgetPlugin::MultiPageWidgetPlugin(QObject *parent)
    : QObject(parent)
{
}

QString MultiPageWidgetPlugin::name() const
{
    return QLatin1String(&quot;MultiPageWidget&quot;);
}

QString MultiPageWidgetPlugin::group() const
{
    return QLatin1String(&quot;Display Widgets [Examples]&quot;);
}

QString MultiPageWidgetPlugin::toolTip() const
{
    return QString();
}

QString MultiPageWidgetPlugin::whatsThis() const
{
    return QString();
}

QString MultiPageWidgetPlugin::includeFile() const
{
    return QLatin1String(&quot;multipagewidget.h&quot;);
}

QIcon MultiPageWidgetPlugin::icon() const
{
    return QIcon();
}

bool MultiPageWidgetPlugin::isContainer() const
{
    return true;
}

QWidget *MultiPageWidgetPlugin::createWidget(QWidget *parent)
{
    MultiPageWidget *widget = new MultiPageWidget(parent);
    connect(widget, &amp;amp;MultiPageWidget::currentIndexChanged,
            this, &amp;amp;MultiPageWidgetPlugin::currentIndexChanged);
    connect(widget, &amp;amp;MultiPageWidget::pageTitleChanged,
            this, &amp;amp;MultiPageWidgetPlugin::pageTitleChanged);
    return widget;
}

bool MultiPageWidgetPlugin::isInitialized() const
{
    return initialized;
}

void MultiPageWidgetPlugin::initialize(QDesignerFormEditorInterface *formEditor)
{
    if (initialized)
        return;

    QExtensionManager *manager = formEditor-&amp;gt;extensionManager();
    QExtensionFactory *factory = new MultiPageWidgetExtensionFactory(manager);

    Q_ASSERT(manager != 0);
    manager-&amp;gt;registerExtensions(factory, Q_TYPEID(QDesignerContainerExtension));

    initialized = true;
}

QString MultiPageWidgetPlugin::domXml() const
{
    return QLatin1String(&quot;\
&amp;lt;ui language=\&quot;c++\&quot;&amp;gt;\
    &amp;lt;widget class=\&quot;MultiPageWidget\&quot; name=\&quot;multipagewidget\&quot;&amp;gt;\
        &amp;lt;widget class=\&quot;QWidget\&quot; name=\&quot;page\&quot; /&amp;gt;\
    &amp;lt;/widget&amp;gt;\
    &amp;lt;customwidgets&amp;gt;\
        &amp;lt;customwidget&amp;gt;\
            &amp;lt;class&amp;gt;MultiPageWidget&amp;lt;/class&amp;gt;\
            &amp;lt;extends&amp;gt;QWidget&amp;lt;/extends&amp;gt;\
            &amp;lt;addpagemethod&amp;gt;addPage&amp;lt;/addpagemethod&amp;gt;\
        &amp;lt;/customwidget&amp;gt;\
    &amp;lt;/customwidgets&amp;gt;\
&amp;lt;/ui&amp;gt;&quot;);
}

void MultiPageWidgetPlugin::currentIndexChanged(int index)
{
    Q_UNUSED(index);
    MultiPageWidget *widget = qobject_cast&amp;lt;MultiPageWidget*&amp;gt;(sender());
    if (widget) {
        QDesignerFormWindowInterface *form = QDesignerFormWindowInterface::findFormWindow(widget);
        if (form)
            form-&amp;gt;emitSelectionChanged();
    }
}

void MultiPageWidgetPlugin::pageTitleChanged(const QString &amp;amp;title)
{
    Q_UNUSED(title);
    MultiPageWidget *widget = qobject_cast&amp;lt;MultiPageWidget*&amp;gt;(sender());
    if (widget) {
        QWidget *page = widget-&amp;gt;widget(widget-&amp;gt;currentIndex());
        QDesignerFormWindowInterface *form;
        form = QDesignerFormWindowInterface::findFormWindow(widget);
        if (form) {
            QDesignerFormEditorInterface *editor = form-&amp;gt;core();
            QExtensionManager *manager = editor-&amp;gt;extensionManager();
            QDesignerPropertySheetExtension *sheet;
            sheet = qt_extension&amp;lt;QDesignerPropertySheetExtension*&amp;gt;(manager, page);
            const int propertyIndex = sheet-&amp;gt;indexOf(QLatin1String(&quot;windowTitle&quot;));
            sheet-&amp;gt;setChanged(propertyIndex, true);
        }
    }
}


</db:programlisting>
</db:article>
