<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerContainerExtension Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> class allows you to add pages to a custom multi-page container in Qt Designer's workspace.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerContainerExtension</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/containerextension-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> provide an interface for creating custom container extensions. A container extension consists of a collection of functions that <db:emphasis>Qt Designer</db:emphasis> needs to manage a multi-page container plugin, and a list of the container's pages.</db:para>
<db:warning>
<db:para>This is <db:emphasis>not</db:emphasis> an extension for container plugins in general, only custom <db:emphasis>multi-page</db:emphasis> containers.</db:para>
</db:warning>
<db:para>To create a container extension, your extension class must inherit from both <db:link xlink:href="qobject.xml">QObject</db:link> and <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link>. For example:</db:para>
<db:programlisting language="cpp">class MyContainerExtension : public QObject,
       public QDesignerContainerExtension
{
    Q_OBJECT
    Q_INTERFACES(QDesignerContainerExtension)

public:
    MyContainerExtension(MyCustomWidget *widget,
                         QObject *parent = 0);
    int count() const;
    QWidget *widget(int index) const;
    int currentIndex() const;
    void setCurrentIndex(int index);
    void addWidget(QWidget *widget);
    void insertWidget(int index, QWidget *widget);
    void remove(int index);

private:
    MyCustomWidget *myWidget;
};
</db:programlisting>
<db:para>Since we are implementing an interface, we must ensure that it's made known to the meta object system using the <db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro. This enables <db:emphasis>Qt Designer</db:emphasis> to use the qobject_cast() function to query for supported interfaces using nothing but a <db:link xlink:href="qobject.xml">QObject</db:link> pointer.</db:para>
<db:para>You must reimplement several functions to enable <db:emphasis>Qt Designer</db:emphasis> to manage a custom multi-page container widget: <db:emphasis>Qt Designer</db:emphasis> uses <db:link xlink:href="qdesignercontainerextension.xml#count">count</db:link>() to keep track of the number pages in your container, <db:link xlink:href="qdesignercontainerextension.xml#widget">widget</db:link>() to return the page at a given index in the list of the container's pages, and <db:link xlink:href="qdesignercontainerextension.xml#currentIndex">currentIndex</db:link>() to return the list index of the selected page. <db:emphasis>Qt Designer</db:emphasis> uses the <db:link xlink:href="qdesignercontainerextension.xml#addWidget">addWidget</db:link>() function to add a given page to the container, expecting it to be appended to the list of pages, while it expects the <db:link xlink:href="qdesignercontainerextension.xml#insertWidget">insertWidget</db:link>() function to add a given page to the container by inserting it at a given index.</db:para>
<db:para>In <db:emphasis>Qt Designer</db:emphasis> the extensions are not created until they are required. For that reason you must also create a <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link>, i.e a class that is able to make an instance of your extension, and register it using <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager.xml">extension manager</db:link>.</db:para>
<db:para>When a container extension is required, <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager.xml">extension manager</db:link> will run through all its registered factories calling <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() for each until the first one that is able to create a container extension, is found. This factory will then create the extension for the plugin.</db:para>
<db:para>There are four available types of extensions in <db:emphasis>Qt Designer</db:emphasis>: <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> , <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link>, <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> and <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link>. <db:emphasis>Qt Designer</db:emphasis>'s behavior is the same whether the requested extension is associated with a multi page container, a member sheet, a property sheet or a task menu.</db:para>
<db:para>The <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> class provides a standard extension factory, and can also be used as an interface for custom extension factories. You can either create a new <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> and reimplement the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">QObject *ANewExtensionFactory::createExtension(QObject *object,
        const QString &amp;iid, QObject *parent) const
{
    if (iid != Q_TYPEID(QDesignerContainerExtension))
        return 0;

    if (MyCustomWidget *widget = qobject_cast&lt;MyCustomWidget*&gt;
           (object))
        return new MyContainerExtension(widget, parent);

    return 0;
}
</db:programlisting>
<db:para>Or you can use an existing factory, expanding the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function to make the factory able to create a container extension as well. For example:</db:para>
<db:programlisting language="cpp">QObject *AGeneralExtensionFactory::createExtension(QObject *object,
        const QString &amp;iid, QObject *parent) const
{
    MyCustomWidget *widget = qobject_cast&lt;MyCustomWidget*&gt;(object);

    if (widget &amp;&amp; (iid == Q_TYPEID(QDesignerTaskMenuExtension))) {
        return new MyTaskMenuExtension(widget, parent);

    } else if (widget &amp;&amp; (iid == Q_TYPEID(QDesignerContainerExtension))) {
        return new MyContainerExtension(widget, parent);

    } else {
        return 0;
    }
}
</db:programlisting>
<db:para>For a complete example using the <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> class, see the <db:link xlink:href="qtdesigner-containerextension-example.xml">Container Extension example</db:link>. The example shows how to create a custom multi-page plugin for <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link></db:member>
<db:member><db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link></db:member>
<db:member><db:link xlink:href="designer-creating-custom-widgets-extensions.xml">Creating Custom Widget Extensions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QDesignerContainerExtension">
<db:title>[virtual noexcept] QDesignerContainerExtension::~QDesignerContainerExtension()</db:title>
<db:para>Destroys the extension.</db:para>
</db:section>
<db:section xml:id="addWidget">
<db:title>[pure virtual] void QDesignerContainerExtension::addWidget(QWidget *<db:emphasis>page</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">page</db:code> to the container by appending it to the extension's list of pages.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercontainerextension.xml#insertWidget">insertWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignercontainerextension.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignercontainerextension.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canAddWidget">
<db:title>[virtual, since 5.0] bool QDesignerContainerExtension::canAddWidget() const</db:title>
<db:para>Returns whether a widget can be added. This determines whether the context menu options to add or insert pages are enabled.</db:para>
<db:para>This should return false for containers that have a single, fixed page, for example <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> or <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercontainerextension.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignercontainerextension.xml#canRemove">canRemove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canRemove">
<db:title>[virtual, since 5.0] bool QDesignerContainerExtension::canRemove(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns whether the widget at the given <db:code role="parameter">index</db:code> can be removed. This determines whether the context menu option to remove the current page is enabled.</db:para>
<db:para>This should return false for containers that have a single, fixed page, for example <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> or <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercontainerextension.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignercontainerextension.xml#canAddWidget">canAddWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>[pure virtual] int QDesignerContainerExtension::count() const</db:title>
<db:para>Returns the number of pages in the container.</db:para>
</db:section>
<db:section xml:id="currentIndex">
<db:title>[pure virtual] int QDesignerContainerExtension::currentIndex() const</db:title>
<db:para>Returns the index of the currently selected page in the container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercontainerextension.xml#setCurrentIndex">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertWidget">
<db:title>[pure virtual] void QDesignerContainerExtension::insertWidget(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>page</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">page</db:code> to the container by inserting it at the given <db:code role="parameter">index</db:code> in the extension's list of pages.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercontainerextension.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignercontainerextension.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignercontainerextension.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>[pure virtual] void QDesignerContainerExtension::remove(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the page at the given <db:code role="parameter">index</db:code> from the extension's list of pages.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercontainerextension.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignercontainerextension.xml#insertWidget">insertWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentIndex">
<db:title>[pure virtual] void QDesignerContainerExtension::setCurrentIndex(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Sets the currently selected page in the container to be the page at the given <db:code role="parameter">index</db:code> in the extension's list of pages.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercontainerextension.xml#currentIndex">currentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widget">
<db:title>[pure virtual] QWidget *QDesignerContainerExtension::widget(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the page at the given <db:code role="parameter">index</db:code> in the extension's list of pages.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercontainerextension.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignercontainerextension.xml#insertWidget">insertWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
