<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Order Form Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Order Form example shows how to generate rich text documents by combining a simple template with data input by the user in a dialog.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;detailsdialog.h&quot;

DetailsDialog::DetailsDialog(const QString &amp;title, QWidget *parent)
    : QDialog(parent)
{
    nameLabel = new QLabel(tr(&quot;Name:&quot;));
    addressLabel = new QLabel(tr(&quot;Address:&quot;));
    addressLabel-&gt;setAlignment(Qt::AlignLeft | Qt::AlignTop);

    nameEdit = new QLineEdit;
    addressEdit = new QTextEdit;

    offersCheckBox = new QCheckBox(tr(&quot;Send information about products and &quot;
                                      &quot;special offers&quot;));

    setupItemsTable();

    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok
                                     | QDialogButtonBox::Cancel);

    connect(buttonBox, SIGNAL(accepted()), this, SLOT(verify()));
    connect(buttonBox, SIGNAL(rejected()), this, SLOT(reject()));

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&gt;addWidget(nameLabel, 0, 0);
    mainLayout-&gt;addWidget(nameEdit, 0, 1);
    mainLayout-&gt;addWidget(addressLabel, 1, 0);
    mainLayout-&gt;addWidget(addressEdit, 1, 1);
    mainLayout-&gt;addWidget(itemsTable, 0, 2, 2, 1);
    mainLayout-&gt;addWidget(offersCheckBox, 2, 1, 1, 2);
    mainLayout-&gt;addWidget(buttonBox, 3, 0, 1, 3);
    setLayout(mainLayout);

    setWindowTitle(title);
}

void DetailsDialog::setupItemsTable()
{
    items &lt;&lt; tr(&quot;T-shirt&quot;) &lt;&lt; tr(&quot;Badge&quot;) &lt;&lt; tr(&quot;Reference book&quot;)
          &lt;&lt; tr(&quot;Coffee cup&quot;);

    itemsTable = new QTableWidget(items.count(), 2);

    for (int row = 0; row &lt; items.count(); ++row) {
        QTableWidgetItem *name = new QTableWidgetItem(items[row]);
        name-&gt;setFlags(Qt::ItemIsEnabled | Qt::ItemIsSelectable);
        itemsTable-&gt;setItem(row, 0, name);
        QTableWidgetItem *quantity = new QTableWidgetItem(&quot;1&quot;);
        itemsTable-&gt;setItem(row, 1, quantity);
    }
}

QList&lt;QPair&lt;QString, int&gt; &gt; DetailsDialog::orderItems()
{
    QList&lt;QPair&lt;QString, int&gt; &gt; orderList;

    for (int row = 0; row &lt; items.count(); ++row) {
        QPair&lt;QString, int&gt; item;
        item.first = itemsTable-&gt;item(row, 0)-&gt;text();
        int quantity = itemsTable-&gt;item(row, 1)-&gt;data(Qt::DisplayRole).toInt();
        item.second = qMax(0, quantity);
        orderList.append(item);
    }

    return orderList;
}

QString DetailsDialog::senderName() const
{
    return nameEdit-&gt;text();
}

QString DetailsDialog::senderAddress() const
{
    return addressEdit-&gt;toPlainText();
}

bool DetailsDialog::sendOffers()
{
    return offersCheckBox-&gt;isChecked();
}

void DetailsDialog::verify()
{
    if (!nameEdit-&gt;text().isEmpty() &amp;&amp; !addressEdit-&gt;toPlainText().isEmpty()) {
        accept();
        return;
    }

    QMessageBox::StandardButton answer;
    answer = QMessageBox::warning(this, tr(&quot;Incomplete Form&quot;),
        tr(&quot;The form does not contain all the necessary information.\n&quot;
           &quot;Do you want to discard it?&quot;),
        QMessageBox::Yes | QMessageBox::No);

    if (answer == QMessageBox::Yes)
        reject();
}

</db:programlisting>
</db:article>
