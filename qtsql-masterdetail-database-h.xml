<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Master Detail Example</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Master Detail Example shows how to present data from different data sources in the same application. The album titles, and the corresponding artists and release dates, are kept in a database, while each album's tracks are stored in an XML file.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef DATABASE_H
#define DATABASE_H

#include &lt;QMessageBox&gt;
#include &lt;QSqlDatabase&gt;
#include &lt;QSqlError&gt;
#include &lt;QSqlQuery&gt;

static bool createConnection()
{
    QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;);
    db.setDatabaseName(&quot;:memory:&quot;);
    if (!db.open()) {
        QMessageBox::critical(0, qApp-&gt;tr(&quot;Cannot open database&quot;),
            qApp-&gt;tr(&quot;Unable to establish a database connection.\n&quot;
                     &quot;This example needs SQLite support. Please read &quot;
                     &quot;the Qt SQL driver documentation for information how &quot;
                     &quot;to build it.\n\n&quot;
                     &quot;Click Cancel to exit.&quot;), QMessageBox::Cancel);
        return false;
    }

    QSqlQuery query;

    query.exec(&quot;create table artists (id int primary key, &quot;
                                     &quot;artist varchar(40), &quot;
                                     &quot;albumcount int)&quot;);

    query.exec(&quot;insert into artists values(0, '&lt;all&gt;', 0)&quot;);
    query.exec(&quot;insert into artists values(1, 'Ane Brun', 2)&quot;);
    query.exec(&quot;insert into artists values(2, 'Thomas Dybdahl', 3)&quot;);
    query.exec(&quot;insert into artists values(3, 'Kaizers Orchestra', 3)&quot;);

    query.exec(&quot;create table albums (albumid int primary key, &quot;
                                     &quot;title varchar(50), &quot;
                                     &quot;artistid int, &quot;
                                     &quot;year int)&quot;);

    query.exec(&quot;insert into albums values(1, 'Spending Time With Morgan', 1, &quot;
                       &quot;2003)&quot;);
    query.exec(&quot;insert into albums values(2, 'A Temporary Dive', 1, 2005)&quot;);
    query.exec(&quot;insert into albums values(3, '...The Great October Sound', 2, &quot;
                       &quot;2002)&quot;);
    query.exec(&quot;insert into albums values(4, 'Stray Dogs', 2, 2003)&quot;);
    query.exec(&quot;insert into albums values(5, &quot;
        &quot;'One day you`ll dance for me, New York City', 2, 2004)&quot;);
    query.exec(&quot;insert into albums values(6, 'Ompa Til Du D\xc3\xb8r', 3, 2001)&quot;);
    query.exec(&quot;insert into albums values(7, 'Evig Pint', 3, 2002)&quot;);
    query.exec(&quot;insert into albums values(8, 'Maestro', 3, 2005)&quot;);

    return true;
}

#endif

</db:programlisting>
</db:article>
