<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlEngineExtensionPlugin Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link> class provides an abstract base for custom QML extension plugins.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlEngineExtensionPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QQmlEngineExtensionPlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link> is a plugin interface that lets you create QML extensions that can be loaded dynamically into QML applications. These extensions allow custom QML types to be made available to the QML engine.</db:para>
<db:para>To write a QML extension plugin:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Subclass <db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link> and use the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro to register the plugin with the Qt meta object system.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the <db:link xlink:href="qqmlintegration-h.xml#QML_ELEMENT">QML_ELEMENT</db:link> and <db:link xlink:href="qqmlintegration-h.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link>() macros to declare QML types.</db:para>
</db:listitem>
<db:listitem>
<db:para>Configure your build file.</db:para>
<db:para>CMake:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(&lt;target&gt;
    URI &lt;my.import.name&gt;
    VERSION 1.0
    QML_FILES &lt;app.qml&gt;
    NO_RESOURCE_TARGET_PATH
)
</db:programlisting>
<db:para>qmake:</db:para>
<db:programlisting language="cpp" role="bad">CONFIG += qmltypes
QML_IMPORT_NAME = &lt;my.import.name&gt;
QML_IMPORT_MAJOR_VERSION = &lt;version&gt;
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>If you're using qmake, create a <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link> to describe the plugin. Note that CMake will, by default, automatically generate the <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>QML extension plugins are for either application-specific or library-like plugins. Library plugins should limit themselves to registering types, as any manipulation of the engine's root context may cause conflicts or other issues in the library user's code.</db:para>
<db:note>
<db:para>When using the CMake <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> API, a plugin will be generated automatically for you. It will take care of type registration. You only need to write a custom plugin if you have special requirements, such as registering custom image providers. In that case, pass <db:link xlink:href="qt-add-qml-module.xml#no-generate-plugin-source">NO_GENERATE_PLUGIN_SOURCE</db:link> to the <db:code>qt_add_qml_module</db:code> call to disable the generation of the default plugin.</db:para>
</db:note>
<db:para>The linker might erroneously remove the generated type registration function as an optimization. You can prevent that by declaring a synthetic volatile pointer to the function somewhere in your code. The function is generated by <db:link xlink:href="qtqml-tooling-qmltyperegistrar.xml">qmltyperegistrar</db:link>, and is named <db:code>qml_register_types_</db:code> concatenated with the module URI, with any dots replaced by underscores.</db:para>
<db:para>If your module is called &quot;my.module&quot;, you would add the forward declaration in global scope:</db:para>
<db:programlisting language="cpp">void qml_register_types_my_module();
</db:programlisting>
<db:para>Then add the following snippet of code in the implementation of any function that's part of the same binary as the registration:</db:para>
<db:programlisting language="cpp">volatile auto registration = &amp;qml_register_types_my_module;
Q_UNUSED(registration);
</db:programlisting>
<db:para>The <db:link xlink:href="qtqml-tutorials-extending-qml-example.xml">Writing QML Extensions with C++</db:link> tutorial also contains a chapter on creating QML plugins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlengine.xml#importPlugin" role="deprecated">QQmlEngine::importPlugin</db:link>()</db:member>
<db:member><db:link xlink:href="">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlEngineExtensionPlugin">
<db:title>[explicit] QQmlEngineExtensionPlugin::QQmlEngineExtensionPlugin(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a QML extension plugin with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that this constructor is invoked automatically by the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro, so there is no need for calling it explicitly.</db:para>
</db:section>
<db:section xml:id="initializeEngine">
<db:title>[override virtual] void QQmlEngineExtensionPlugin::initializeEngine(QQmlEngine *<db:emphasis>engine</db:emphasis>, const char *<db:emphasis>uri</db:emphasis>)</db:title>
<db:para>Initializes the extension from the <db:code role="parameter">uri</db:code> using the <db:code role="parameter">engine</db:code>. Here an application plugin might, for example, expose some data or objects to QML, as context properties on the engine's root context.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_IMPORT_QML_PLUGIN">
<db:title>[since 6.2] Q_IMPORT_QML_PLUGIN(<db:emphasis>PluginName</db:emphasis>)</db:title>
<db:para>Ensures the plugin whose metadata-declaring plugin extension class is named <db:code role="parameter">PluginName</db:code> is linked into static builds. For the modules created using <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>, the default plugin extension class name is computed from the QML module URI by replacing dots with underscores, unless the <db:code>CLASS_NAME</db:code> argument is specified.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(myplugin
    # The plugin extension class name in this case is my_Company_QmlComponents.
    URI my.Company.QmlComponents
    ...
)
</db:programlisting>
<db:para>This macro was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtplugin.xml#Q_IMPORT_PLUGIN">Q_IMPORT_PLUGIN</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
