<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlEngineExtensionPlugin Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link> class provides an abstract base for custom QML extension plugins.</db:para>
<db:para>This class was introduced in Qt 5.14.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlEngineExtensionPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QQmlEngineExtensionPlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link> is a plugin interface that lets you create QML extensions that can be loaded dynamically into QML applications. These extensions allow custom QML types to be made available to the QML engine.</db:para>
<db:para>To write a QML extension plugin:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Subclass <db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link> and use the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro to register the plugin with the Qt meta object system.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link> and <db:link xlink:href="qqmlengine.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link>() macros to declare QML types.</db:para>
</db:listitem>
<db:listitem>
<db:para>Configure your build file.</db:para>
<db:para>CMake:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(&amp;lt;target&amp;gt;
    URI &amp;lt;my.import.name&amp;gt;
    VERSION 1.0
    QML_FILES &amp;lt;app.qml&amp;gt;
    NO_RESOURCE_TARGET_PATH
)
</db:programlisting>
<db:para>qmake:</db:para>
<db:programlisting language="cpp" role="bad">CONFIG += qmltypes
QML_IMPORT_NAME = &amp;lt;my.import.name&amp;gt;
QML_IMPORT_MAJOR_VERSION = &amp;lt;version&amp;gt;
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>If you're using qmake, create a <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link> to describe the plugin. Note that CMake will, by default, automatically generate the <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>QML extension plugins are for either application-specific or library-like plugins. Library plugins should limit themselves to registering types, as any manipulation of the engine's root context may cause conflicts or other issues in the library user's code.</db:para>
<db:para>The linker might erroneously remove the generated type registration function as an optimization. You can prevent that by declaring a synthetic volatile pointer to the function somewhere in your code. If your module is called &quot;my.module&quot;, you would add the forward declaration in global scope:</db:para>
<db:programlisting language="cpp">void qml_register_types_my_module();
</db:programlisting>
<db:para>Then add the following snippet of code in the implementation of any function that's part of the same binary as the registration:</db:para>
<db:programlisting language="cpp">volatile auto registration = &amp;amp;qml_register_types_my_module;
Q_UNUSED(registration);
</db:programlisting>
<db:section xml:id="timeexample-qml-extension-plugin">
<db:title>TimeExample QML Extension Plugin</db:title>
<db:para>Suppose there is a new <db:code>TimeModel</db:code> C++ class that should be made available as a new QML type. It provides the current time through <db:code>hour</db:code> and <db:code>minute</db:code> properties. It declares a QML type called <db:code>Time</db:code> via <db:link xlink:href="qqmlengine.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link>().</db:para>
<db:programlisting language="cpp">class TimeModel : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int hour READ hour NOTIFY timeChanged)
    Q_PROPERTY(int minute READ minute NOTIFY timeChanged)
    QML_NAMED_ELEMENT(Time)
    ...
</db:programlisting>
<db:para>To make this type available, create a plugin class named <db:code>QExampleQmlPlugin</db:code>, which is a subclass of <db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link>. It uses the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro in the class definition to register the plugin with the Qt meta object system using a unique identifier for the plugin.</db:para>
<db:programlisting language="cpp">class QExampleQmlPlugin : public QQmlEngineExtensionPlugin
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID QQmlEngineExtensionInterface_iid)
};
</db:programlisting>
</db:section>
<db:section xml:id="build-settings-for-the-plugin">
<db:title>Build Settings for the Plugin</db:title>
<db:para>The build file defines the project as a plugin library, specifies it should be built into the <db:code>imports/TimeExample</db:code> directory, and registers the plugin target name.</db:para>
<db:section xml:id="using-cmake">
<db:title>Using CMake:</db:title>
<db:programlisting language="cpp">set(qml_files
    imports/TimeExample/Clock.qml
)

set(images
    imports/TimeExample/center.png
    imports/TimeExample/clock.png
    imports/TimeExample/hour.png
    imports/TimeExample/minute.png
)
qt_add_qml_module(qmlqtimeexample
    OUTPUT_DIRECTORY imports/TimeExample
    VERSION 1.0
    URI &quot;TimeExample&quot;
    SOURCES timemodel.cpp timemodel.h
    QML_FILES ${qml_files}
    RESOURCES ${images}
)
</db:programlisting>
</db:section>
<db:section xml:id="using-qmake">
<db:title>Using qmake:</db:title>
<db:programlisting language="cpp">TEMPLATE = lib
CONFIG += qt plugin qmltypes
QT += qml

QML_IMPORT_NAME = TimeExample
QML_IMPORT_MAJOR_VERSION = 1

DESTDIR = imports/$$QML_IMPORT_NAME
TARGET  = qmlqtimeexampleplugin

SOURCES += qexampleqmlplugin.cpp
</db:programlisting>
<db:para>This registers the <db:code>TimeModel</db:code> class, with the import <db:code>TimeExample 1.0</db:code>, as a QML type called <db:code>Time</db:code>. The <db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link> article has more information about registering C++ types for usage in QML.</db:para>
</db:section>
</db:section>
<db:section xml:id="plugin-definition-in-the-qmldir">
<db:title>Plugin Definition in the qmldir</db:title>
<db:para>Finally, a <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link> is required in the <db:code>imports/TimeExample</db:code> directory to describe the plugin and the types that it exports. The plugin includes a <db:code>Clock.qml</db:code> file along with the <db:code>qmlqtimeexampleplugin</db:code> that is built by the project.</db:para>
<db:para>CMake will, by default, automatically generate this file. For more information, see <db:link xlink:href="qt-add-qml-module.xml#auto-generating-qmldir-and-typeinfo-files">Auto-generating qmldir and typeinfo files</db:link>.</db:para>
<db:para>When using qmake, specify the following in the <db:code>qmldir</db:code> file:</db:para>
<db:programlisting language="cpp">module TimeExample
Clock 1.0 Clock.qml
plugin qmlqtimeexampleplugin
</db:programlisting>
<db:para>To make things easier for this example, the TimeExample source directory is in <db:code>imports/TimeExample</db:code>, and we build <db:link xlink:href="">in-source</db:link>. However, the structure of the source directory is not important, as the <db:code>qmldir</db:code> file can specify paths to installed QML files.</db:para>
<db:para>What is important is the name of the directory that the qmldir is installed into. When the user imports our module, the QML engine uses the <db:link xlink:href="qtqml-modules-qmldir.xml#contents-of-a-module-definition-qmldir-file">module identifier</db:link> (<db:code>TimeExample</db:code>) to find the plugin, so the directory in which it is installed must match the module identifier.</db:para>
<db:para>Once the project is built and installed, the new <db:code>Time</db:code> component is accessible by any QML component that imports the <db:code>TimeExample</db:code> module.</db:para>
<db:programlisting language="qml">import TimeExample 1.0 // import types from the plugin

Clock { // this class is defined in QML (imports/TimeExample/Clock.qml)

    Time { // this class is defined in C++ (plugin.cpp)
        id: time
    }

    hours: time.hour
    minutes: time.minute

}
</db:programlisting>
<db:para>The full source code is available in the <db:link xlink:href="qtqml-qmlextensionplugins-example.xml">plugins example</db:link>.</db:para>
<db:para>The <db:link xlink:href="qtqml-tutorials-extending-qml-example.xml">Writing QML Extensions with C++</db:link> tutorial also contains a chapter on creating QML plugins.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlengine.xml#importPlugin">QQmlEngine::importPlugin</db:link>()</db:member>
<db:member><db:link xlink:href="">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlEngineExtensionPlugin-2">
<db:title>[explicit] QQmlEngineExtensionPlugin::QQmlEngineExtensionPlugin(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlEngineExtensionPlugin</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlEngineExtensionPlugin(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a QML extension plugin with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that this constructor is invoked automatically by the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro, so there is no need for calling it explicitly.</db:para>
</db:section>
<db:section xml:id="initializeEngine">
<db:title>[override virtual] void QQmlEngineExtensionPlugin::initializeEngine(QQmlEngine *<db:emphasis>engine</db:emphasis>, const char *<db:emphasis>uri</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initializeEngine</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>uri</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initializeEngine(QQmlEngine *engine, const char *uri) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the extension from the <db:code role="parameter">uri</db:code> using the <db:code role="parameter">engine</db:code>. Here an application plugin might, for example, expose some data or objects to QML, as context properties on the engine's root context.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_IMPORT_QML_PLUGIN">
<db:title>[since 6.2] Q_IMPORT_QML_PLUGIN(<db:emphasis>PluginName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_IMPORT_QML_PLUGIN</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>PluginName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_IMPORT_QML_PLUGIN(PluginName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ensures the plugin whose metadata-declaring class is named <db:code role="parameter">PluginName</db:code> is linked into static builds.</db:para>
<db:para>This macro was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtplugin.xml#Q_IMPORT_PLUGIN">Q_IMPORT_PLUGIN</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
