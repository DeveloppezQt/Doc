<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Bluetooth</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Bluetooth enables connectivity between Bluetooth enabled devices.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Bluetooth API provides connectivity between Bluetooth enabled devices.</db:para>
<db:para>Currently, the API is supported on the following platforms:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>API Feature</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="android.xml">Android</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="ios.xml">iOS</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="linux.xml">Linux (BlueZ 5.x)</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="whatsnew66.xml#macos">macOS</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="windows.xml">Windows</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Classic Bluetooth</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Bluetooth LE Central</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Bluetooth LE Peripheral</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>Bluetooth is a short-range (less than 100 meters) wireless technology. It has a data transfer rate of 2.1 Mbps, which makes it ideal for transferring data between devices. Bluetooth connectivity is based on basic device management, such as scanning for devices, gathering information about them, and exchanging data between them.</db:para>
<db:para>Qt Bluetooth supports Bluetooth Low Energy development for client/central role use cases. Further details can be found in the <db:link xlink:href="qtbluetooth-le-overview.xml">Bluetooth Low Energy Overview</db:link> section.</db:para>
</db:section>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module's C++ API requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module component in the <db:code>Qt6</db:code> package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Bluetooth)
target_link_libraries(mytarget PRIVATE Qt6::Bluetooth)
</db:programlisting>
<db:para>For more details, see the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the <db:code>QT</db:code> variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT += bluetooth
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="permissions">
<db:title>Permissions</db:title>
<db:para>Starting from Qt 6.6, the Qt Bluetooth module uses new <db:link xlink:href="qpermission.xml">QPermission</db:link> API to handle <db:link xlink:href="qbluetoothpermission.xml">Bluetooth</db:link> permissions. This means that Qt itself no longer queries for these permissions, so this needs to be done directly from the client application.</db:para>
<db:para>Please refer to the <db:link xlink:href="permissions.xml">Application Permissions</db:link> page for an example of how to integrate the new <db:link xlink:href="qpermission.xml">QPermission</db:link> API into the application.</db:para>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:section xml:id="building-qt-bluetooth">
<db:title>Building Qt Bluetooth</db:title>
<db:para>Even though the module can be built for all Qt platforms, the module is not ported to all of them. Non-supported platforms employ a dummy backend that is automatically selected when the platform is not supported. The dummy backend reports appropriate error messages and values, which enables you to detect at runtime that the current platform is not supported. The dummy backend is also selected on Linux if BlueZ development headers are not found during build time or Qt was built without Qt D-Bus support.</db:para>
<db:para>The usage of the dummy backend is highlighted via an appropriate warning while building and running.</db:para>
<db:section xml:id="linux-specific">
<db:title>Linux Specific</db:title>
<db:para>Since Qt 6.5 the Linux peripheral support has two backend alternatives: BlueZ DBus and Bluetooth kernel API. The Bluez DBus backend introduced in Qt 6.5 is intended as the eventual successor of the lower abstraction level kernel backend.</db:para>
<db:para>The BlueZ DBus API is more limited in terms of features and is therefore not the default backend for compatibility reasons.</db:para>
<db:para>The BlueZ DBus backend can be configured to use by setting the <db:emphasis>QT_BLUETOOTH_USE_DBUS_PERIPHERAL</db:emphasis> environment variable. The <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> peripheral instantiation then introspects the presence of BlueZ DBus peripheral APIs on the local bluetooth adapter. The minimum version requirement for BlueZ is 5.56.</db:para>
<db:para>One noteworthy difference is that with BlueZ DBus peripheral backend the user process no longer needs to have the <db:emphasis>CAP_NET_ADMIN</db:emphasis> capability (eg. run as root).</db:para>
</db:section>
<db:section xml:id="macos-specific">
<db:title>macOS Specific</db:title>
<db:para>The Bluetooth API on macOS requires a certain type of event dispatcher that in Qt causes a dependency to <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>. However, you can set the environment variable <db:code>QT_EVENT_DISPATCHER_CORE_FOUNDATION=1</db:code> to circumvent this issue.</db:para>
<db:para>Applications that don't use Classic Bluetooth will find a subset of <db:link xlink:href="qtbluetooth-module.xml">QtBluetooth</db:link> is available, as CoreBluetooth (Bluetooth LE) don't require <db:link xlink:href="qapplication.xml">QApplication</db:link> or <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="articles-and-guides">
<db:title>Articles and Guides</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtbluetooth-overview.xml">Classic Bluetooth Overview</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtbluetooth-le-overview.xml">Bluetooth Low Energy Overview</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="reference">
<db:title>Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtbluetooth-module.xml">C++ Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="logging-categories">
<db:title>Logging Categories</db:title>
<db:para>The <db:link xlink:href="qtbluetooth-module.xml">QtBluetooth</db:link> module exports the following <db:link xlink:href="qloggingcategory.xml#configuring-categories">logging categories</db:link>:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Logging Category</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qt.bluetooth</db:para>
</db:td>
<db:td>
<db:para>Enables logging of cross platform code path in <db:link xlink:href="qtbluetooth-module.xml">QtBluetooth</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.bluetooth.android</db:para>
</db:td>
<db:td>
<db:para>Enables logging of the <db:link xlink:href="android.xml">Android</db:link> implementation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.bluetooth.bluez</db:para>
</db:td>
<db:td>
<db:para>Enables logging of the BLuez/Linux implementation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.bluetooth.ios</db:para>
</db:td>
<db:td>
<db:para>Enables logging of the <db:link xlink:href="ios.xml">iOS</db:link> implementation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.bluetooth.osx</db:para>
</db:td>
<db:td>
<db:para>Enables logging of the <db:link xlink:href="macos.xml">macOS</db:link> implementation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.bluetooth.windows</db:para>
</db:td>
<db:td>
<db:para>Enables logging of the <db:link xlink:href="windows.xml">Windows</db:link> implementation</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Logging categories enable additional warning and debug output for <db:link xlink:href="qtbluetooth-module.xml">QtBluetooth</db:link>. More detailed information about logging is found in <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link>. A quick way to enable all <db:link xlink:href="qtbluetooth-module.xml">QtBluetooth</db:link> logging is to add the following line to the <db:code>main()</db:code> function:</db:para>
<db:programlisting language="cpp">QLoggingCategory::setFilterRules(QStringLiteral(&quot;qt.bluetooth* = true&quot;));
</db:programlisting>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QML</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtbluetooth-heartrate-game-example.xml">Bluetooth Low Energy Heart Rate Game</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtbluetooth-heartrate-server-example.xml">Bluetooth Low Energy Heart Rate Server</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtbluetooth-lowenergyscanner-example.xml">Bluetooth Low Energy Scanner</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>C++</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtbluetooth-btchat-example.xml">Bluetooth Chat</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="module-evolution">
<db:title>Module Evolution</db:title>
<db:para><db:link xlink:href="qtbluetooth-changes-qt6.xml">Changes to Qt Bluetooth</db:link> lists important changes in the module API and functionality that were done for the Qt 6 series of Qt.</db:para>
</db:section>
<db:section xml:id="licenses-and-attributions">
<db:title>Licenses and Attributions</db:title>
<db:para>Qt Bluetooth is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under the <db:link xlink:href="http://www.gnu.org/licenses/lgpl-3.0.html">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
<db:para>On Linux, Qt Bluetooth uses a separate executable, <db:code>sdpscanner</db:code>, to integrate with the official Linux bluetooth protocol stack BlueZ. BlueZ is available under the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>.</db:para>
<db:variablelist role="groupsbymodule attributions-qtbluetooth">
<db:varlistentry>
<db:term><db:link xlink:href="qtbluetooth-attribution-bluez.xml" xlink:role="page">BlueZ</db:link></db:term>
<db:listitem>
<db:para>GNU General Public License v2.0 only (This does not force user code to be GPL'ed. For more info see details.)</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
