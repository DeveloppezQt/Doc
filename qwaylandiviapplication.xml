<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaylandIviApplication Class</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaylandiviapplication.xml">QWaylandIviApplication</db:link> class is an extension for embedded-style user interfaces.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaylandIviApplication</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += waylandcompositor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwaylandcompositorextensiontemplate.xml" xlink:role="class">QWaylandCompositorExtensionTemplate</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qwaylandiviapplication.xml">QWaylandIviApplication</db:link> extension provides a way to associate an QWaylandIviSurface with a regular Wayland surface. Using the QWaylandIviSurface interface, the client can identify itself by giving an ivi id, and the compositor can ask the client to resize.</db:para>
<db:para><db:link xlink:href="qwaylandiviapplication.xml">QWaylandIviApplication</db:link> corresponds to the Wayland <db:code>ivi_application</db:code> interface.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWaylandIviApplication">
<db:title>QWaylandIviApplication::QWaylandIviApplication()</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandIviApplication</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandIviApplication()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qwaylandiviapplication.xml">QWaylandIviApplication</db:link> object.</db:para>
</db:section>
<db:section xml:id="QWaylandIviApplication-1">
<db:title>QWaylandIviApplication::QWaylandIviApplication(QWaylandCompositor *<db:emphasis>compositor</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandIviApplication</db:methodname>
<db:methodparam>
<db:type>QWaylandCompositor *</db:type>
<db:parameter>compositor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandIviApplication(QWaylandCompositor *compositor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qwaylandiviapplication.xml">QWaylandIviApplication</db:link> object for the provided <db:code role="parameter">compositor</db:code>.</db:para>
</db:section>
<db:section xml:id="initialize">
<db:title>[override virtual] void QWaylandIviApplication::initialize()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initialize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initialize() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the shell extension.</db:para>
</db:section>
<db:section xml:id="interfaceName">
<db:title>[static] QByteArray QWaylandIviApplication::interfaceName()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>interfaceName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray interfaceName()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Wayland interface for the <db:link xlink:href="qwaylandiviapplication.xml">QWaylandIviApplication</db:link>.</db:para>
</db:section>
<db:section xml:id="iviSurfaceCreated">
<db:title>void QWaylandIviApplication::iviSurfaceCreated(QWaylandIviSurface *<db:emphasis>iviSurface</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>iviSurfaceCreated</db:methodname>
<db:methodparam>
<db:type>QWaylandIviSurface *</db:type>
<db:parameter>iviSurface</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void iviSurfaceCreated(QWaylandIviSurface *iviSurface)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an <db:link xlink:href="qml-qtwayland-compositor-ivisurface.xml">IviSurface</db:link>, <db:code role="parameter">iviSurface</db:code>, has been created.</db:para>
</db:section>
<db:section xml:id="iviSurfaceRequested">
<db:title>void QWaylandIviApplication::iviSurfaceRequested(QWaylandSurface *<db:emphasis>surface</db:emphasis>, uint <db:emphasis>iviId</db:emphasis>, const QWaylandResource &amp;<db:emphasis>resource</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>iviSurfaceRequested</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>iviId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWaylandResource &amp;</db:type>
<db:parameter>resource</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void iviSurfaceRequested(QWaylandSurface *surface, uint iviId, const QWaylandResource &amp;resource)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the client has requested an <db:code>ivi_surface</db:code> to be associated with <db:code role="parameter">surface</db:code>, which is identified by <db:code role="parameter">id</db:code>. The handler for this signal is expected to create the ivi surface and initialize it within the scope of the signal emission. If no ivi surface is created, a default one will be created instead.</db:para>
</db:section>
</db:section>
</db:article>
