<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt Quick 3D</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Migrate Qt Quick 3D to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework. Parts of the Qt Quick 3D API have been substantially modified.</db:para>
<db:para>In this topic we summarize those changes in Qt Quick 3D, and provide guidance to handle them.</db:para>
<db:section xml:id="rhi">
<db:title>RHI</db:title>
<db:para>From Qt 6.0 onwards, the default adaptation of Qt Quick always renders via a graphics abstraction layer, the Qt Rendering Hardware Interface (RHI), provided by the <db:link xlink:href="qtgui-module.xml">QtGui</db:link> module. This means that, unlike Qt 5, no direct OpenGL calls are made by the scene graph. Rather, it records resource and draw commands by using the RHI APIs, which then translate the command stream into OpenGL, Vulkan, Metal, or Direct 3D calls. Shader handling is also unified by writing shader code once, compiling to <db:link xlink:href="https://www.khronos.org/spir/">SPIR-V</db:link>, and then translating to the language appropriate for the various graphics APIs.</db:para>
<db:para>For Qt Quick 3D the biggest change in Qt 6.0 is the migration to the common Rendering Hardware Interface, which allows Qt Quick 3D to run on Direct3D, Metal and Vulkan in addition to OpenGL and OpenGL ES.</db:para>
<db:para>Qt Quick and Qt Quick 3D are now fully unified in this regard. Any configuration setting related to the RHI, for example, which graphics API to choose to render with, are applicable to both.</db:para>
<db:para>See <db:link xlink:href="qtquick3d-requirements.xml">Qt Quick 3D Graphics Requirements</db:link> for further details.</db:para>
</db:section>
<db:section xml:id="other-api-changes">
<db:title>Other API changes</db:title>
<db:section xml:id="qml-import-version">
<db:title>QML import version</db:title>
<db:para>Starting with Qt 6.0, the version number for QML import statements is the same as the Qt version number. It is now also possible to import a module without specifying a version: this will import the latest version of the module.</db:para>
</db:section>
<db:section xml:id="lighting">
<db:title>Lighting</db:title>
<db:para><db:link xlink:href="qml-qtquick3d-light.xml#brightness-prop">Light brightness</db:link> now represents an energy multiplier defaulting to 1.0, where Qt 5 would use a percentage value defaulting to 100. In practice this means that all <db:code>brightness</db:code> values should be divided by 100.</db:para>
<db:para><db:code>SceneEnvironment.probeBrightness</db:code> is renamed to <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeExposure-prop">probeExposure</db:link> and is also redefined to be a multiplier with a default value of 1.0. That is, all <db:code>probeBrightness</db:code> values should be renamed to <db:code>probeExposure</db:code> and divided by 100.</db:para>
<db:para><db:code>AreaLight</db:code> has been removed for performance reasons. In many cases it can be replaced with <db:link xlink:href="qml-qtquick3d-spotlight.xml">SpotLight</db:link>, which was added in Qt Quick 3D 5.15.</db:para>
</db:section>
<db:section xml:id="custom-materials">
<db:title>Custom Materials</db:title>
<db:para>The custom materials API has been completely reworked in 6.0. This means any existing custom materials will have to be substantially rewritten. See the <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link> documentation for details of the new API.</db:para>
</db:section>
<db:section xml:id="post-processing-effects">
<db:title>Post-processing Effects</db:title>
<db:para><db:link xlink:href="qml-qtquick3d-effect.xml">Effect</db:link> has been enhanced to allow for shader code that is very close to what <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link> supports, following the same patterns when it comes to structure and built-in keywords. This means that existing effects involving custom shader code will need to be migrated before they can function in Qt 6.0. See the <db:link xlink:href="qml-qtquick3d-effect.xml">Effect</db:link> documentation for details.</db:para>
</db:section>
<db:section xml:id="principled-material">
<db:title>Principled Material</db:title>
<db:para>The <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link> QML type has been greatly improved in Qt Quick 6.0, and now more closely follows the principles of Physically Based Rendering. Imported models should now render correctly without changing properties of the materials. Existing materials will need to be changed to undo any compensations for previous inaccuracies.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link> in Qt 5</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link> in Qt 6</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/quick3d-principled-qt5.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/quick3d-principled-qt6.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Some properties change their defaults:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-principledmaterial.xml#metalness-prop">metalness</db:link> defaults to 0 instead of 1.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-principledmaterial.xml#specularAmount-prop">specularAmount</db:link> defaults to 0.5 instead of 0.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="default-material">
<db:title>Default Material</db:title>
<db:para>Some properties change their defaults:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-defaultmaterial.xml#specularRoughness-prop">specularRoughness</db:link> defaults to 0 instead of 50.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="predefined-materials">
<db:title>Predefined materials</db:title>
<db:para>There are no predefined materials included in <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link> 6.0. Any materials added in future releases will probably not be compatible with the old ones. The Materials import does not exist. (The <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link> type is moved to the base <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link> import.)</db:para>
<db:para>These are the material QML types that have been removed in Qt 6.0:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>AluminumAnodizedEmissiveMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>AluminumAnodizedMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>AluminumBrushedMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>AluminumEmissiveMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>AluminumMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>CopperMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>FrostedGlassMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>FrostedGlassSinglePassMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>GlassMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>GlassRefractiveMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>PaperArtisticMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>PaperOfficeMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>PlasticStructuredRedEmissiveMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>PlasticStructuredRedMaterial</db:para>
</db:listitem>
<db:listitem>
<db:para>SteelMilledConcentricMaterial</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="tessellation-and-displacement-maps">
<db:title>Tessellation and displacement maps</db:title>
<db:para>Model tesselation mode is gone due to increased focus on supporting embedded hardware. In addition, as a result, displacement map support has been removed from materials. Similar effects can be achieved with a <db:link xlink:href="qml-qtquick3d-custommaterial.xml">custom material</db:link>.</db:para>
</db:section>
<db:section xml:id="qt-quick-items-as-children-of-3d-nodes">
<db:title>Qt Quick <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>s as children of 3D <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link>s</db:title>
<db:para>While syntactically identical, the way 2D child items are handled is quite different internally. In Qt 6.0 there is no implicit render to texture step. Rather, the 2D Qt Quick content is rendered in line, with the appropriate perspective projection, in the same render pass, which provides better performance, lower resource usage, and in some cases potentially improved visual fidelity (with <db:link xlink:href="qml-qtquick-text.xml">Text</db:link>, for example). See <db:link xlink:href="qtquick3d-2d.xml">Qt Quick 3D Scenes with 2D Content</db:link> for an overview.</db:para>
<db:para>If going through a texture is important for some reason (clipping, opacity), make the 2D <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> subtree a layer explicitly by setting <db:code>layer.enabled: true</db:code>. This way the behavior is closer to what Qt 5.15 provided.</db:para>
<db:para>The 2D content is no longer centered at the parent Node's origin. Rather, it is the top-level 2D Item's top-left corner that is placed to the 3D Node's origin. Therefore, the top-level 2D Item will often want to specify an anchor, such as, <db:code>anchors.centerIn: parent</db:code>, to get results matching Qt 5.15.</db:para>
</db:section>
</db:section>
</db:article>
