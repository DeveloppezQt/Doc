<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSemaphoreReleaser Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> class provides exception-safe deferral of a QSemaphore::release() call.</db:para>
<db:para>This class was introduced in Qt 5.10.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSemaphoreReleaser</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.10</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSemaphoreReleaser is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> can be used wherever you would otherwise use QSemaphore::release(). Constructing a <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> defers the release() call on the semaphore until the <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> is destroyed (see <db:link xlink:href="http://en.cppreference.com/w/cpp/language/raii">RAII pattern</db:link>).</db:para>
<db:para>You can use this to reliably release a semaphore to avoid dead-lock in the face of exceptions or early returns:</db:para>
<db:programlisting language="cpp">// ... do something that may throw or return early
sem.release();
</db:programlisting>
<db:para>If an early return is taken or an exception is thrown before the <db:code>sem.release()</db:code> call is reached, the semaphore is not released, possibly preventing the thread waiting in the corresponding <db:code>sem.acquire()</db:code> call from ever continuing execution.</db:para>
<db:para>When using RAII instead:</db:para>
<db:programlisting language="cpp">const QSemaphoreReleaser releaser(sem);
// ... do something that may throw or early return
// implicitly calls sem.release() here and at every other return in between
</db:programlisting>
<db:para>this can no longer happen, because the compiler will make sure that the <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> destructor is always called, and therefore the semaphore is always released.</db:para>
<db:para><db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> is move-enabled and can therefore be returned from functions to transfer responsibility for releasing a semaphore out of a function or a scope:</db:para>
<db:programlisting language="cpp">{ // some scope
    QSemaphoreReleaser releaser; // does nothing
    // ...
    if (someCondition) {
        releaser = QSemaphoreReleaser(sem);
        // ...
    }
    // ...
} // conditionally calls sem.release(), depending on someCondition
</db:programlisting>
<db:para>A <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> can be canceled by a call to cancel(). A canceled semaphore releaser will no longer call QSemaphore::release() in its destructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSemaphoreReleaser">
<db:title>QSemaphoreReleaser::QSemaphoreReleaser()</db:title>
<db:constructorsynopsis>
<db:methodname>QSemaphoreReleaser</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSemaphoreReleaser()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Default constructor. Creates a <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> that does nothing.</db:para>
</db:section>
<db:section xml:id="QSemaphoreReleaser-1">
<db:title>[explicit] QSemaphoreReleaser::QSemaphoreReleaser(int &amp;<db:emphasis>sem</db:emphasis>, int <db:emphasis>n</db:emphasis> = 1)</db:title>
<db:constructorsynopsis>
<db:methodname>QSemaphoreReleaser</db:methodname>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>sem</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSemaphoreReleaser(int &amp;sem, int n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructor. Stores the arguments and calls <db:code role="parameter">sem</db:code>.release(<db:code role="parameter">n</db:code>) in the destructor.</db:para>
</db:section>
<db:section xml:id="QSemaphoreReleaser-2">
<db:title>[default] QSemaphoreReleaser::QSemaphoreReleaser(int *<db:emphasis>sem</db:emphasis>, int <db:emphasis>n</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSemaphoreReleaser</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>sem</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSemaphoreReleaser(int *sem, int n) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructor. Stores the arguments and calls <db:code role="parameter">sem</db:code>-&gt;release(<db:code role="parameter">n</db:code>) in the destructor.</db:para>
</db:section>
<db:section xml:id="QSemaphoreReleaser-3">
<db:title>[default] QSemaphoreReleaser::QSemaphoreReleaser(QSemaphoreReleaser &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSemaphoreReleaser</db:methodname>
<db:methodparam>
<db:type>QSemaphoreReleaser &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QSemaphoreReleaser(QSemaphoreReleaser &amp;&amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move constructor. Takes over responsibility to call QSemaphore::release() from <db:code role="parameter">other</db:code>, which in turn is canceled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">cancel()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSemaphoreReleaser">
<db:title>[default] QSemaphoreReleaser::~QSemaphoreReleaser()</db:title>
<db:destructorsynopsis>
<db:methodname>~QSemaphoreReleaser</db:methodname>
<db:void/>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSemaphoreReleaser() = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Unless canceled, calls QSemaphore::release() with the arguments provided to the constructor, or by the last move assignment.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default] int QSemaphoreReleaser::operator=(<db:emphasis>QSemaphoreReleaser &amp;&amp;</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QSemaphoreReleaser &amp;&amp;</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">int operator=(QSemaphoreReleaser &amp;&amp;) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move assignment operator. Takes over responsibility to call QSemaphore::release() from <db:code role="parameter">other</db:code>, which in turn is canceled.</db:para>
<db:para>If this semaphore releaser had the responsibility to call some QSemaphore::release() itself, it performs the call before taking over from <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">cancel()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
