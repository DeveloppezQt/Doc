<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSemaphoreReleaser Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> class provides exception-safe deferral of a <db:link xlink:href="qsemaphore.xml#release">QSemaphore::release</db:link>() call.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSemaphoreReleaser</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSemaphoreReleaser is part of <db:simplelist><db:member>thread</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> can be used wherever you would otherwise use <db:link xlink:href="qsemaphore.xml#release">QSemaphore::release</db:link>(). Constructing a <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> defers the release() call on the semaphore until the <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> is destroyed (see <db:link xlink:href="http://en.cppreference.com/w/cpp/language/raii">RAII pattern</db:link>).</db:para>
<db:para>You can use this to reliably release a semaphore to avoid dead-lock in the face of exceptions or early returns:</db:para>
<db:programlisting language="cpp">// ... do something that may throw or return early
sem.release();
</db:programlisting>
<db:para>If an early return is taken or an exception is thrown before the sem.release() call is reached, the semaphore is not released, possibly preventing the thread waiting in the corresponding sem.acquire() call from ever continuing execution.</db:para>
<db:para>When using RAII instead:</db:para>
<db:programlisting language="cpp">const QSemaphoreReleaser releaser(sem);
// ... do something that may throw or early return
// implicitly calls sem.release() here and at every other return in between
</db:programlisting>
<db:para>this can no longer happen, because the compiler will make sure that the <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> destructor is always called, and therefore the semaphore is always released.</db:para>
<db:para><db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> is move-enabled and can therefore be returned from functions to transfer responsibility for releasing a semaphore out of a function or a scope:</db:para>
<db:programlisting language="cpp">{ // some scope
    QSemaphoreReleaser releaser; // does nothing
    // ...
    if (someCondition) {
        releaser = QSemaphoreReleaser(sem);
        // ...
    }
    // ...
} // conditionally calls sem.release(), depending on someCondition
</db:programlisting>
<db:para>A <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> can be canceled by a call to <db:link xlink:href="qsemaphorereleaser.xml#cancel">cancel</db:link>(). A canceled semaphore releaser will no longer call <db:link xlink:href="qsemaphore.xml#release">QSemaphore::release</db:link>() in its destructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSemaphoreReleaser">
<db:title>[constexpr noexcept] QSemaphoreReleaser::QSemaphoreReleaser()</db:title>
<db:para>Default constructor. Creates a <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> that does nothing.</db:para>
</db:section>
<db:section xml:id="QSemaphoreReleaser-2">
<db:title>[explicit noexcept] QSemaphoreReleaser::QSemaphoreReleaser(QSemaphore &amp;<db:emphasis>sem</db:emphasis>, int <db:emphasis>n</db:emphasis> = 1)</db:title>
<db:para>Constructor. Stores the arguments and calls <db:code role="parameter">sem</db:code>.release(<db:code role="parameter">n</db:code>) in the destructor.</db:para>
</db:section>
<db:section xml:id="QSemaphoreReleaser-3">
<db:title>[explicit noexcept] QSemaphoreReleaser::QSemaphoreReleaser(QSemaphore *<db:emphasis>sem</db:emphasis>, int <db:emphasis>n</db:emphasis> = 1)</db:title>
<db:para>Constructor. Stores the arguments and calls <db:code role="parameter">sem</db:code>-&gt;release(<db:code role="parameter">n</db:code>) in the destructor.</db:para>
</db:section>
<db:section xml:id="QSemaphoreReleaser-1">
<db:title>[noexcept] QSemaphoreReleaser::QSemaphoreReleaser(QSemaphoreReleaser &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move constructor. Takes over responsibility to call <db:link xlink:href="qsemaphore.xml#release">QSemaphore::release</db:link>() from <db:code role="parameter">other</db:code>, which in turn is canceled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsemaphorereleaser.xml#cancel">cancel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSemaphoreReleaser">
<db:title>[noexcept] QSemaphoreReleaser::~QSemaphoreReleaser()</db:title>
<db:para>Unless canceled, calls <db:link xlink:href="qsemaphore.xml#release">QSemaphore::release</db:link>() with the arguments provided to the constructor, or by the last move assignment.</db:para>
</db:section>
<db:section xml:id="cancel">
<db:title>[noexcept] QSemaphore *QSemaphoreReleaser::cancel()</db:title>
<db:para>Cancels this <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link> such that the destructor will no longer call semaphore()-&gt;release(). Returns the value of <db:link xlink:href="qsemaphorereleaser.xml#semaphore">semaphore</db:link>() before this call. After this call, <db:link xlink:href="qsemaphorereleaser.xml#semaphore">semaphore</db:link>() will return nullptr.</db:para>
<db:para>To enable again, assign a new <db:link xlink:href="qsemaphorereleaser.xml">QSemaphoreReleaser</db:link>:</db:para>
<db:programlisting language="cpp">releaser.cancel(); // avoid releasing old semaphore()
releaser = QSemaphoreReleaser(sem, 42);
// now will call sem.release(42) when 'releaser' is destroyed
</db:programlisting>
</db:section>
<db:section xml:id="semaphore">
<db:title>[noexcept] QSemaphore *QSemaphoreReleaser::semaphore() const</db:title>
<db:para>Returns a pointer to the <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link> object provided to the constructor, or by the last move assignment, if any. Otherwise, returns nullptr.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QSemaphoreReleaser::swap(QSemaphoreReleaser &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Exchanges the responsibilities of *this and <db:code role="parameter">other</db:code>.</db:para>
<db:para>Unlike move assignment, neither of the two objects ever releases its semaphore, if any, as a consequence of swapping.</db:para>
<db:para>Therefore this function is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QSemaphoreReleaser &amp;QSemaphoreReleaser::operator=(QSemaphoreReleaser &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move assignment operator. Takes over responsibility to call <db:link xlink:href="qsemaphore.xml#release">QSemaphore::release</db:link>() from <db:code role="parameter">other</db:code>, which in turn is canceled.</db:para>
<db:para>If this semaphore releaser had the responsibility to call some <db:link xlink:href="qsemaphore.xml#release">QSemaphore::release</db:link>() itself, it performs the call before taking over from <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsemaphorereleaser.xml#cancel">cancel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
