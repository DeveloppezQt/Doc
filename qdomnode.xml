<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDomNode Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdomnode.xml">QDomNode</db:link> class is the base class for all the nodes in a DOM tree.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDomNode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Xml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Xml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdomattr.xml" xlink:role="class">QDomAttr</db:link>, <db:link xlink:href="qdomcharacterdata.xml" xlink:role="class">QDomCharacterData</db:link>, <db:link xlink:href="qdomdocument.xml" xlink:role="class">QDomDocument</db:link>, <db:link xlink:href="qdomdocumentfragment.xml" xlink:role="class">QDomDocumentFragment</db:link>, <db:link xlink:href="qdomdocumenttype.xml" xlink:role="class">QDomDocumentType</db:link>, <db:link xlink:href="qdomelement.xml" xlink:role="class">QDomElement</db:link>, <db:link xlink:href="qdomentity.xml" xlink:role="class">QDomEntity</db:link>, <db:link xlink:href="qdomentityreference.xml" xlink:role="class">QDomEntityReference</db:link>, <db:link xlink:href="qdomnotation.xml" xlink:role="class">QDomNotation</db:link>, and <db:link xlink:href="qdomprocessinginstruction.xml" xlink:role="class">QDomProcessingInstruction</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDomNode is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Many functions in the DOM return a <db:link xlink:href="qdomnode.xml">QDomNode</db:link>.</db:para>
<db:para>You can find out the type of a node using <db:link xlink:href="qdomnode.xml#isAttr">isAttr</db:link>(), <db:link xlink:href="qdomnode.xml#isCDATASection">isCDATASection</db:link>(), <db:link xlink:href="qdomnode.xml#isDocumentFragment">isDocumentFragment</db:link>(), <db:link xlink:href="qdomnode.xml#isDocument">isDocument</db:link>(), <db:link xlink:href="qdomnode.xml#isDocumentType">isDocumentType</db:link>(), <db:link xlink:href="qdomnode.xml#isElement">isElement</db:link>(), <db:link xlink:href="qdomnode.xml#isEntityReference">isEntityReference</db:link>(), <db:link xlink:href="qdomnode.xml#isText">isText</db:link>(), <db:link xlink:href="qdomnode.xml#isEntity">isEntity</db:link>(), <db:link xlink:href="qdomnode.xml#isNotation">isNotation</db:link>(), <db:link xlink:href="qdomnode.xml#isProcessingInstruction">isProcessingInstruction</db:link>(), <db:link xlink:href="qdomnode.xml#isCharacterData">isCharacterData</db:link>() and <db:link xlink:href="qdomnode.xml#isComment">isComment</db:link>().</db:para>
<db:para>A <db:link xlink:href="qdomnode.xml">QDomNode</db:link> can be converted into one of its subclasses using <db:link xlink:href="qdomnode.xml#toAttr">toAttr</db:link>(), <db:link xlink:href="qdomnode.xml#toCDATASection">toCDATASection</db:link>(), <db:link xlink:href="qdomnode.xml#toDocumentFragment">toDocumentFragment</db:link>(), <db:link xlink:href="qdomnode.xml#toDocument">toDocument</db:link>(), <db:link xlink:href="qdomnode.xml#toDocumentType">toDocumentType</db:link>(), <db:link xlink:href="qdomnode.xml#toElement">toElement</db:link>(), <db:link xlink:href="qdomnode.xml#toEntityReference">toEntityReference</db:link>(), <db:link xlink:href="qdomnode.xml#toText">toText</db:link>(), <db:link xlink:href="qdomnode.xml#toEntity">toEntity</db:link>(), <db:link xlink:href="qdomnode.xml#toNotation">toNotation</db:link>(), <db:link xlink:href="qdomnode.xml#toProcessingInstruction">toProcessingInstruction</db:link>(), <db:link xlink:href="qdomnode.xml#toCharacterData">toCharacterData</db:link>() or <db:link xlink:href="qdomnode.xml#toComment">toComment</db:link>(). You can convert a node to a null node with <db:link xlink:href="qdomnode.xml#clear">clear</db:link>().</db:para>
<db:para>Copies of the <db:link xlink:href="qdomnode.xml">QDomNode</db:link> class share their data using explicit sharing. This means that modifying one node will change all copies. This is especially useful in combination with functions which return a <db:link xlink:href="qdomnode.xml">QDomNode</db:link>, e.g. <db:link xlink:href="qdomnode.xml#firstChild">firstChild</db:link>(). You can make an independent (deep) copy of the node with <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
<db:para>A <db:link xlink:href="qdomnode.xml">QDomNode</db:link> can be null, much like <db:code>nullptr</db:code>. Creating a copy of a null node results in another null node. It is not possible to modify a null node, but it is possible to assign another, possibly non-null node to it. In this case, the copy of the null node will remain null. You can check if a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> is null by calling <db:link xlink:href="qdomnode.xml#isNull">isNull</db:link>(). The empty constructor of a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> (or any of the derived classes) creates a null node.</db:para>
<db:para>Nodes are inserted with <db:link xlink:href="qdomnode.xml#insertBefore">insertBefore</db:link>(), <db:link xlink:href="qdomnode.xml#insertAfter">insertAfter</db:link>() or <db:link xlink:href="qdomnode.xml#appendChild">appendChild</db:link>(). You can replace one node with another using <db:link xlink:href="qdomnode.xml#replaceChild">replaceChild</db:link>() and remove a node with <db:link xlink:href="qdomnode.xml#removeChild">removeChild</db:link>().</db:para>
<db:para>To traverse nodes use <db:link xlink:href="qdomnode.xml#firstChild">firstChild</db:link>() to get a node's first child (if any), and <db:link xlink:href="qdomnode.xml#nextSibling">nextSibling</db:link>() to traverse. <db:link xlink:href="qdomnode.xml">QDomNode</db:link> also provides <db:link xlink:href="qdomnode.xml#lastChild">lastChild</db:link>(), <db:link xlink:href="qdomnode.xml#previousSibling">previousSibling</db:link>() and <db:link xlink:href="qdomnode.xml#parentNode">parentNode</db:link>(). To find the first child node with a particular node name use <db:link xlink:href="qdomnode.xml#namedItem">namedItem</db:link>().</db:para>
<db:para>To find out if a node has children use <db:link xlink:href="qdomnode.xml#hasChildNodes">hasChildNodes</db:link>() and to get a list of all of a node's children use <db:link xlink:href="qdomnode.xml#childNodes">childNodes</db:link>().</db:para>
<db:para>The node's name and value (the meaning of which varies depending on its type) is returned by <db:link xlink:href="qdomnode.xml#nodeName">nodeName</db:link>() and <db:link xlink:href="qdomnode.xml#nodeValue">nodeValue</db:link>() respectively. The node's type is returned by <db:link xlink:href="qdomnode.xml#nodeType">nodeType</db:link>(). The node's value can be set with <db:link xlink:href="qdomnode.xml#setNodeValue">setNodeValue</db:link>().</db:para>
<db:para>The document to which the node belongs is returned by <db:link xlink:href="qdomnode.xml#ownerDocument">ownerDocument</db:link>().</db:para>
<db:para>Adjacent <db:link xlink:href="qdomtext.xml">QDomText</db:link> nodes can be merged into a single node with <db:link xlink:href="qdomnode.xml#normalize">normalize</db:link>().</db:para>
<db:para><db:link xlink:href="qdomelement.xml">QDomElement</db:link> nodes have attributes which can be retrieved with <db:link xlink:href="qdomnode.xml#attributes">attributes</db:link>().</db:para>
<db:para><db:link xlink:href="qdomelement.xml">QDomElement</db:link> and <db:link xlink:href="qdomattr.xml">QDomAttr</db:link> nodes can have namespaces which can be retrieved with <db:link xlink:href="qdomnode.xml#namespaceURI">namespaceURI</db:link>(). Their local name is retrieved with <db:link xlink:href="qdomnode.xml#localName">localName</db:link>(), and their prefix with <db:link xlink:href="qdomnode.xml#prefix">prefix</db:link>(). The prefix can be set with <db:link xlink:href="qdomnode.xml#setPrefix">setPrefix</db:link>().</db:para>
<db:para>You can write the XML representation of the node to a text stream with <db:link xlink:href="qdomnode.xml#save">save</db:link>().</db:para>
<db:para>The following example looks for the first element in an XML document and prints the names of all the elements that are its direct children.</db:para>
<db:programlisting language="cpp">QDomDocument d;
QString someXML;

d.setContent(someXML);
QDomNode n = d.firstChild();
while (!n.isNull()) {
    if (n.isElement()) {
        QDomElement e = n.toElement();
        cout &lt;&lt; &quot;Element name: &quot; &lt;&lt; qPrintable(e.tagName()) &lt;&lt; '\n';
        break;
    }
    n = n.nextSibling();
}
</db:programlisting>
<db:para>For further information about the Document Object Model see <db:link xlink:href="http://www.w3.org/TR/REC-DOM-Level-1/">Level 1</db:link> and <db:link xlink:href="http://www.w3.org/TR/DOM-Level-2-Core/">Level 2 Core</db:link>. For a more general introduction of the DOM implementation see the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="EncodingPolicy-enum">
<db:title>enum QDomNode::EncodingPolicy</db:title>
<db:para>This enum specifies how <db:link xlink:href="qdomnode.xml#save">QDomNode::save</db:link>() determines what encoding to use when serializing.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::EncodingFromDocument</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The encoding is fetched from the document.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::EncodingFromTextStream</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The encoding is fetched from the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#save">QDomNode::save</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="NodeType-enum">
<db:title>enum QDomNode::NodeType</db:title>
<db:para>This enum defines the type of the node:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::ElementNode</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::AttributeNode</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::TextNode</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::CDATASectionNode</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::EntityReferenceNode</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::EntityNode</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::ProcessingInstructionNode</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::CommentNode</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::DocumentNode</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::DocumentTypeNode</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::DocumentFragmentNode</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::NotationNode</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::BaseNode</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qdomnode.xml">QDomNode</db:link> object, i.e. not a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> subclass.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomnode.xml">QDomNode</db:link></db:emphasis>::CharacterDataNode</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDomNode">
<db:title>QDomNode::QDomNode()</db:title>
<db:para>Constructs a <db:link xlink:href="qdomnode.xml#isNull">null</db:link> node.</db:para>
</db:section>
<db:section xml:id="QDomNode-1">
<db:title>QDomNode::QDomNode(const QDomNode &amp;<db:emphasis>node</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">node</db:code>.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
<db:section xml:id="dtor.QDomNode">
<db:title>[noexcept] QDomNode::~QDomNode()</db:title>
<db:para>Destroys the object and frees its resources.</db:para>
</db:section>
<db:section xml:id="appendChild">
<db:title>QDomNode QDomNode::appendChild(const QDomNode &amp;<db:emphasis>newChild</db:emphasis>)</db:title>
<db:para>Appends <db:code role="parameter">newChild</db:code> as the node's last child.</db:para>
<db:para>If <db:code role="parameter">newChild</db:code> is the child of another node, it is reparented to this node. If <db:code role="parameter">newChild</db:code> is a child of this node, then its position in the list of children is changed.</db:para>
<db:para>If <db:code role="parameter">newChild</db:code> is a <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link>, then the children of the fragment are removed from the fragment and appended.</db:para>
<db:para>If <db:code role="parameter">newChild</db:code> is a <db:link xlink:href="qdomelement.xml">QDomElement</db:link> and this node is a <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> that already has an element node as a child, <db:code role="parameter">newChild</db:code> is not added as a child and a null node is returned.</db:para>
<db:para>Returns a new reference to <db:code role="parameter">newChild</db:code> on success or a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> on failure.</db:para>
<db:para>Calling this function on a null node(created, for example, with the default constructor) does nothing and returns a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link>.</db:para>
<db:para>The DOM specification disallow inserting attribute nodes, but for historical reasons, QDom accepts them anyway.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">insertAfter</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#replaceChild">replaceChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#removeChild">removeChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributes">
<db:title>QDomNamedNodeMap QDomNode::attributes() const</db:title>
<db:para>Returns a named node map of all attributes. Attributes are only provided for <db:link xlink:href="qdomelement.xml">QDomElement</db:link>s.</db:para>
<db:para>Changing the attributes in the map will also change the attributes of this <db:link xlink:href="qdomnode.xml">QDomNode</db:link>.</db:para>
</db:section>
<db:section xml:id="childNodes">
<db:title>QDomNodeList QDomNode::childNodes() const</db:title>
<db:para>Returns a list of all direct child nodes.</db:para>
<db:para>Most often you will call this function on a <db:link xlink:href="qdomelement.xml">QDomElement</db:link> object.</db:para>
<db:para>For example, if the XML document looks like this:</db:para>
<db:programlisting language="cpp">&lt;body&gt;
&lt;h1&gt;Heading&lt;/h1&gt;
&lt;p&gt;Hello &lt;b&gt;you&lt;/b&gt;&lt;/p&gt;
&lt;/body&gt;
</db:programlisting>
<db:para>Then the list of child nodes for the &quot;body&quot;-element will contain the node created by the &amp;lt;h1&amp;gt; tag and the node created by the &amp;lt;p&amp;gt; tag.</db:para>
<db:para>The nodes in the list are not copied; so changing the nodes in the list will also change the children of this node.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#firstChild">firstChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#lastChild">lastChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QDomNode::clear()</db:title>
<db:para>Converts the node into a null node; if it was not a null node before, its type and contents are deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cloneNode">
<db:title>QDomNode QDomNode::cloneNode(bool <db:emphasis>deep</db:emphasis> = true) const</db:title>
<db:para>Creates a deep (not shallow) copy of the <db:link xlink:href="qdomnode.xml">QDomNode</db:link>.</db:para>
<db:para>If <db:code role="parameter">deep</db:code> is true, then the cloning is done recursively which means that all the node's children are deep copied too. If <db:code role="parameter">deep</db:code> is false only the node itself is copied and the copy will have no child nodes.</db:para>
</db:section>
<db:section xml:id="columnNumber">
<db:title>int QDomNode::columnNumber() const</db:title>
<db:para>For nodes created by <db:link xlink:href="qdomdocument.xml#setContent">QDomDocument::setContent</db:link>(), this function returns the column number in the XML document where the node was parsed. Otherwise, -1 is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#lineNumber">lineNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#setContent">QDomDocument::setContent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="firstChild">
<db:title>QDomNode QDomNode::firstChild() const</db:title>
<db:para>Returns the first child of the node. If there is no child node, a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> is returned. Changing the returned node will also change the node in the document tree.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#lastChild">lastChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#childNodes">childNodes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="firstChildElement">
<db:title>QDomElement QDomNode::firstChildElement(const QString &amp;<db:emphasis>tagName</db:emphasis> = QString(), const QString &amp;<db:emphasis>namespaceURI</db:emphasis> = QString()) const</db:title>
<db:para>Returns the first child element with tag name <db:code role="parameter">tagName</db:code> and namespace URI <db:code role="parameter">namespaceURI</db:code>. If <db:code role="parameter">tagName</db:code> is empty, returns the first child element with <db:code role="parameter">namespaceURI</db:code>, and if <db:code role="parameter">namespaceURI</db:code> is empty, returns the first child element with <db:code role="parameter">tagName</db:code>. If the both parameters are empty, returns the first child element. Returns a null element if no such child exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#lastChildElement">lastChildElement</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#previousSiblingElement">previousSiblingElement</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#nextSiblingElement">nextSiblingElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasAttributes">
<db:title>bool QDomNode::hasAttributes() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node has attributes; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#attributes">attributes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasChildNodes">
<db:title>bool QDomNode::hasChildNodes() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node has one or more children; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="insertAfter">
<db:title>QDomNode QDomNode::insertAfter(const QDomNode &amp;<db:emphasis>newChild</db:emphasis>, const QDomNode &amp;<db:emphasis>refChild</db:emphasis>)</db:title>
<db:para>Inserts the node <db:code role="parameter">newChild</db:code> after the child node <db:code role="parameter">refChild</db:code>. <db:code role="parameter">refChild</db:code> must be a direct child of this node. If <db:code role="parameter">refChild</db:code> is <db:link xlink:href="qdomnode.xml#isNull">null</db:link> then <db:code role="parameter">newChild</db:code> is appended as this node's last child.</db:para>
<db:para>If <db:code role="parameter">newChild</db:code> is the child of another node, it is reparented to this node. If <db:code role="parameter">newChild</db:code> is a child of this node, then its position in the list of children is changed.</db:para>
<db:para>If <db:code role="parameter">newChild</db:code> is a <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link>, then the children of the fragment are removed from the fragment and inserted after <db:code role="parameter">refChild</db:code>.</db:para>
<db:para>Returns a new reference to <db:code role="parameter">newChild</db:code> on success or a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> on failure.</db:para>
<db:para>The DOM specification disallow inserting attribute nodes, but due to historical reasons QDom accept them nevertheless.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#replaceChild">replaceChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#removeChild">removeChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#appendChild">appendChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertBefore">
<db:title>QDomNode QDomNode::insertBefore(const QDomNode &amp;<db:emphasis>newChild</db:emphasis>, const QDomNode &amp;<db:emphasis>refChild</db:emphasis>)</db:title>
<db:para>Inserts the node <db:code role="parameter">newChild</db:code> before the child node <db:code role="parameter">refChild</db:code>. <db:code role="parameter">refChild</db:code> must be a direct child of this node. If <db:code role="parameter">refChild</db:code> is <db:link xlink:href="qdomnode.xml#isNull">null</db:link> then <db:code role="parameter">newChild</db:code> is inserted as the node's first child.</db:para>
<db:para>If <db:code role="parameter">newChild</db:code> is the child of another node, it is reparented to this node. If <db:code role="parameter">newChild</db:code> is a child of this node, then its position in the list of children is changed.</db:para>
<db:para>If <db:code role="parameter">newChild</db:code> is a <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link>, then the children of the fragment are removed from the fragment and inserted before <db:code role="parameter">refChild</db:code>.</db:para>
<db:para>Returns a new reference to <db:code role="parameter">newChild</db:code> on success or a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> on failure.</db:para>
<db:para>The DOM specification disallow inserting attribute nodes, but due to historical reasons QDom accept them nevertheless.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">insertAfter</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#replaceChild">replaceChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#removeChild">removeChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#appendChild">appendChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAttr">
<db:title>bool QDomNode::isAttr() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is an attribute; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a QDomAttribute; you can get the QDomAttribute with toAttribute().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toAttr">toAttr</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCDATASection">
<db:title>bool QDomNode::isCDATASection() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is a CDATA section; otherwise returns false.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomcdatasection.xml">QDomCDATASection</db:link>; you can get the <db:link xlink:href="qdomcdatasection.xml">QDomCDATASection</db:link> with <db:link xlink:href="qdomnode.xml#toCDATASection">toCDATASection</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toCDATASection">toCDATASection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCharacterData">
<db:title>bool QDomNode::isCharacterData() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is a character data node; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomcharacterdata.xml">QDomCharacterData</db:link>; you can get the <db:link xlink:href="qdomcharacterdata.xml">QDomCharacterData</db:link> with <db:link xlink:href="qdomnode.xml#toCharacterData">toCharacterData</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toCharacterData">toCharacterData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isComment">
<db:title>bool QDomNode::isComment() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is a comment; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomcomment.xml">QDomComment</db:link>; you can get the <db:link xlink:href="qdomcomment.xml">QDomComment</db:link> with <db:link xlink:href="qdomnode.xml#toComment">toComment</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toComment">toComment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDocument">
<db:title>bool QDomNode::isDocument() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is a document; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link>; you can get the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> with <db:link xlink:href="qdomnode.xml#toDocument">toDocument</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toDocument">toDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDocumentFragment">
<db:title>bool QDomNode::isDocumentFragment() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is a document fragment; otherwise returns false.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link>; you can get the <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link> with <db:link xlink:href="qdomnode.xml#toDocumentFragment">toDocumentFragment</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toDocumentFragment">toDocumentFragment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDocumentType">
<db:title>bool QDomNode::isDocumentType() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is a document type; otherwise returns false.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomdocumenttype.xml">QDomDocumentType</db:link>; you can get the <db:link xlink:href="qdomdocumenttype.xml">QDomDocumentType</db:link> with <db:link xlink:href="qdomnode.xml#toDocumentType">toDocumentType</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toDocumentType">toDocumentType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isElement">
<db:title>bool QDomNode::isElement() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is an element; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomelement.xml">QDomElement</db:link>; you can get the <db:link xlink:href="qdomelement.xml">QDomElement</db:link> with <db:link xlink:href="qdomnode.xml#toElement">toElement</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toElement">toElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEntity">
<db:title>bool QDomNode::isEntity() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is an entity; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomentity.xml">QDomEntity</db:link>; you can get the <db:link xlink:href="qdomentity.xml">QDomEntity</db:link> with <db:link xlink:href="qdomnode.xml#toEntity">toEntity</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toEntity">toEntity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEntityReference">
<db:title>bool QDomNode::isEntityReference() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is an entity reference; otherwise returns false.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomentityreference.xml">QDomEntityReference</db:link>; you can get the <db:link xlink:href="qdomentityreference.xml">QDomEntityReference</db:link> with <db:link xlink:href="qdomnode.xml#toEntityReference">toEntityReference</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toEntityReference">toEntityReference</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNotation">
<db:title>bool QDomNode::isNotation() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is a notation; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomnotation.xml">QDomNotation</db:link>; you can get the <db:link xlink:href="qdomnotation.xml">QDomNotation</db:link> with <db:link xlink:href="qdomnode.xml#toNotation">toNotation</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toNotation">toNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QDomNode::isNull() const</db:title>
<db:para>Returns <db:code>true</db:code> if this node is null (i.e. if it has no type or contents); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isProcessingInstruction">
<db:title>bool QDomNode::isProcessingInstruction() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is a processing instruction; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomprocessinginstruction.xml">QDomProcessingInstruction</db:link>; you can get the QProcessingInstruction with <db:link xlink:href="qdomnode.xml#toProcessingInstruction">toProcessingInstruction</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toProcessingInstruction">toProcessingInstruction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSupported">
<db:title>bool QDomNode::isSupported(const QString &amp;<db:emphasis>feature</db:emphasis>, const QString &amp;<db:emphasis>version</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the DOM implementation implements the feature <db:code role="parameter">feature</db:code> and this feature is supported by this node in the version <db:code role="parameter">version</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomimplementation.xml#hasFeature">QDomImplementation::hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isText">
<db:title>bool QDomNode::isText() const</db:title>
<db:para>Returns <db:code>true</db:code> if the node is a text node; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, it does not imply that this object is a <db:link xlink:href="qdomtext.xml">QDomText</db:link>; you can get the <db:link xlink:href="qdomtext.xml">QDomText</db:link> with <db:link xlink:href="qdomnode.xml#toText">toText</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toText">toText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastChild">
<db:title>QDomNode QDomNode::lastChild() const</db:title>
<db:para>Returns the last child of the node. If there is no child node, a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> is returned. Changing the returned node will also change the node in the document tree.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#firstChild">firstChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#childNodes">childNodes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastChildElement">
<db:title>QDomElement QDomNode::lastChildElement(const QString &amp;<db:emphasis>tagName</db:emphasis> = QString(), const QString &amp;<db:emphasis>namespaceURI</db:emphasis> = QString()) const</db:title>
<db:para>Returns the last child element with tag name <db:code role="parameter">tagName</db:code> and namespace URI <db:code role="parameter">namespaceURI</db:code>. If <db:code role="parameter">tagName</db:code> is empty, returns the last child element with <db:code role="parameter">namespaceURI</db:code>, and if <db:code role="parameter">namespaceURI</db:code> is empty, returns the last child element with <db:code role="parameter">tagName</db:code>. If the both parameters are empty, returns the last child element. Returns a null element if no such child exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#firstChildElement">firstChildElement</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#previousSiblingElement">previousSiblingElement</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#nextSiblingElement">nextSiblingElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineNumber">
<db:title>int QDomNode::lineNumber() const</db:title>
<db:para>For nodes created by <db:link xlink:href="qdomdocument.xml#setContent">QDomDocument::setContent</db:link>(), this function returns the line number in the XML document where the node was parsed. Otherwise, -1 is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#columnNumber">columnNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#setContent">QDomDocument::setContent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localName">
<db:title>QString QDomNode::localName() const</db:title>
<db:para>If the node uses namespaces, this function returns the local name of the node; otherwise it returns an empty string.</db:para>
<db:para>Only nodes of type <db:link xlink:href="qdomnode.xml#NodeType-enum">ElementNode</db:link> or <db:link xlink:href="qdomnode.xml#NodeType-enum">AttributeNode</db:link> can have namespaces. A namespace must have been specified at creation time; it is not possible to add a namespace afterwards.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#prefix">prefix</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#namespaceURI">namespaceURI</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#createElementNS">QDomDocument::createElementNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#createAttributeNS">QDomDocument::createAttributeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namedItem">
<db:title>QDomNode QDomNode::namedItem(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the first direct child node for which <db:link xlink:href="qdomnode.xml#nodeName">nodeName</db:link>() equals <db:code role="parameter">name</db:code>.</db:para>
<db:para>If no such direct child exists, a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#nodeName">nodeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namespaceURI">
<db:title>QString QDomNode::namespaceURI() const</db:title>
<db:para>Returns the namespace URI of this node or an empty string if the node has no namespace URI.</db:para>
<db:para>Only nodes of type <db:link xlink:href="qdomnode.xml#NodeType-enum">ElementNode</db:link> or <db:link xlink:href="qdomnode.xml#NodeType-enum">AttributeNode</db:link> can have namespaces. A namespace URI must be specified at creation time and cannot be changed later.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#prefix">prefix</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#localName">localName</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#createElementNS">QDomDocument::createElementNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#createAttributeNS">QDomDocument::createAttributeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextSibling">
<db:title>QDomNode QDomNode::nextSibling() const</db:title>
<db:para>Returns the next sibling in the document tree. Changing the returned node will also change the node in the document tree.</db:para>
<db:para>If you have XML like this:</db:para>
<db:programlisting language="cpp">&lt;h1&gt;Heading&lt;/h1&gt;
&lt;p&gt;The text...&lt;/p&gt;
&lt;h2&gt;Next heading&lt;/h2&gt;
</db:programlisting>
<db:para>and this <db:link xlink:href="qdomnode.xml">QDomNode</db:link> represents the &lt;p&gt; tag, nextSibling() will return the node representing the &lt;h2&gt; tag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#previousSibling">previousSibling</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextSiblingElement">
<db:title>QDomElement QDomNode::nextSiblingElement(const QString &amp;<db:emphasis>tagName</db:emphasis> = QString(), const QString &amp;<db:emphasis>namespaceURI</db:emphasis> = QString()) const</db:title>
<db:para>Returns the next sibling element with tag name <db:code role="parameter">tagName</db:code> and namespace URI <db:code role="parameter">namespaceURI</db:code>. If <db:code role="parameter">tagName</db:code> is empty, returns the next sibling element with <db:code role="parameter">namespaceURI</db:code>, and if <db:code role="parameter">namespaceURI</db:code> is empty, returns the next sibling child element with <db:code role="parameter">tagName</db:code>. If the both parameters are empty, returns the next sibling element. Returns a null element if no such sibling exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#firstChildElement">firstChildElement</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#previousSiblingElement">previousSiblingElement</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#lastChildElement">lastChildElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nodeName">
<db:title>QString QDomNode::nodeName() const</db:title>
<db:para>Returns the name of the node.</db:para>
<db:para>The meaning of the name depends on the subclass:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>Meaning</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomattr.xml">QDomAttr</db:link></db:para>
</db:td>
<db:td>
<db:para>The name of the attribute</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomcdatasection.xml">QDomCDATASection</db:link></db:para>
</db:td>
<db:td>
<db:para>The string &quot;#cdata-section&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomcomment.xml">QDomComment</db:link></db:para>
</db:td>
<db:td>
<db:para>The string &quot;#comment&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomdocument.xml">QDomDocument</db:link></db:para>
</db:td>
<db:td>
<db:para>The string &quot;#document&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link></db:para>
</db:td>
<db:td>
<db:para>The string &quot;#document-fragment&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomdocumenttype.xml">QDomDocumentType</db:link></db:para>
</db:td>
<db:td>
<db:para>The name of the document type</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomelement.xml">QDomElement</db:link></db:para>
</db:td>
<db:td>
<db:para>The tag name</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomentity.xml">QDomEntity</db:link></db:para>
</db:td>
<db:td>
<db:para>The name of the entity</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomentityreference.xml">QDomEntityReference</db:link></db:para>
</db:td>
<db:td>
<db:para>The name of the referenced entity</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomnotation.xml">QDomNotation</db:link></db:para>
</db:td>
<db:td>
<db:para>The name of the notation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomprocessinginstruction.xml">QDomProcessingInstruction</db:link></db:para>
</db:td>
<db:td>
<db:para>The target of the processing instruction</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomtext.xml">QDomText</db:link></db:para>
</db:td>
<db:td>
<db:para>The string &quot;#text&quot;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This function does not take the presence of namespaces into account when processing the names of element and attribute nodes. As a result, the returned name can contain any namespace prefix that may be present. To obtain the node name of an element or attribute, use <db:link xlink:href="qdomnode.xml#localName">localName</db:link>(); to obtain the namespace prefix, use <db:link xlink:href="qdomnode.xml#namespaceURI">namespaceURI</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#nodeValue">nodeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nodeType">
<db:title>QDomNode::NodeType QDomNode::nodeType() const</db:title>
<db:para>Returns the type of the node.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#toAttr">toAttr</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toCDATASection">toCDATASection</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toDocumentFragment">toDocumentFragment</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toDocument">toDocument</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toDocumentType">toDocumentType</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toElement">toElement</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toEntityReference">toEntityReference</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toText">toText</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toEntity">toEntity</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toNotation">toNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toProcessingInstruction">toProcessingInstruction</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toCharacterData">toCharacterData</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#toComment">toComment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nodeValue">
<db:title>QString QDomNode::nodeValue() const</db:title>
<db:para>Returns the value of the node.</db:para>
<db:para>The meaning of the value depends on the subclass:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>Meaning</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomattr.xml">QDomAttr</db:link></db:para>
</db:td>
<db:td>
<db:para>The attribute value</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomcdatasection.xml">QDomCDATASection</db:link></db:para>
</db:td>
<db:td>
<db:para>The content of the CDATA section</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomcomment.xml">QDomComment</db:link></db:para>
</db:td>
<db:td>
<db:para>The comment</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomprocessinginstruction.xml">QDomProcessingInstruction</db:link></db:para>
</db:td>
<db:td>
<db:para>The data of the processing instruction</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomtext.xml">QDomText</db:link></db:para>
</db:td>
<db:td>
<db:para>The text</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All the other subclasses do not have a node value and will return an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#setNodeValue">setNodeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#nodeName">nodeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalize">
<db:title>void QDomNode::normalize()</db:title>
<db:para>Calling normalize() on an element converts all its children into a standard form. This means that adjacent <db:link xlink:href="qdomtext.xml">QDomText</db:link> objects will be merged into a single text object (<db:link xlink:href="qdomcdatasection.xml">QDomCDATASection</db:link> nodes are not merged).</db:para>
</db:section>
<db:section xml:id="ownerDocument">
<db:title>QDomDocument QDomNode::ownerDocument() const</db:title>
<db:para>Returns the document to which this node belongs.</db:para>
</db:section>
<db:section xml:id="parentNode">
<db:title>QDomNode QDomNode::parentNode() const</db:title>
<db:para>Returns the parent node. If this node has no parent, a null node is returned (i.e. a node for which <db:link xlink:href="qdomnode.xml#isNull">isNull</db:link>() returns <db:code>true</db:code>).</db:para>
</db:section>
<db:section xml:id="prefix">
<db:title>QString QDomNode::prefix() const</db:title>
<db:para>Returns the namespace prefix of the node or an empty string if the node has no namespace prefix.</db:para>
<db:para>Only nodes of type <db:link xlink:href="qdomnode.xml#NodeType-enum">ElementNode</db:link> or <db:link xlink:href="qdomnode.xml#NodeType-enum">AttributeNode</db:link> can have namespaces. A namespace prefix must be specified at creation time. If a node was created with a namespace prefix, you can change it later with <db:link xlink:href="qdomnode.xml#setPrefix">setPrefix</db:link>().</db:para>
<db:para>If you create an element or attribute with <db:link xlink:href="qdomdocument.xml#createElement">QDomDocument::createElement</db:link>() or <db:link xlink:href="qdomdocument.xml#createAttribute">QDomDocument::createAttribute</db:link>(), the prefix will be an empty string. If you use <db:link xlink:href="qdomdocument.xml#createElementNS">QDomDocument::createElementNS</db:link>() or <db:link xlink:href="qdomdocument.xml#createAttributeNS">QDomDocument::createAttributeNS</db:link>() instead, the prefix will not be an empty string; but it might be an empty string if the name does not have a prefix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#setPrefix">setPrefix</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#localName">localName</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#namespaceURI">namespaceURI</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#createElementNS">QDomDocument::createElementNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#createAttributeNS">QDomDocument::createAttributeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previousSibling">
<db:title>QDomNode QDomNode::previousSibling() const</db:title>
<db:para>Returns the previous sibling in the document tree. Changing the returned node will also change the node in the document tree.</db:para>
<db:para>For example, if you have XML like this:</db:para>
<db:programlisting language="cpp">&lt;h1&gt;Heading&lt;/h1&gt;
&lt;p&gt;The text...&lt;/p&gt;
&lt;h2&gt;Next heading&lt;/h2&gt;
</db:programlisting>
<db:para>and this <db:link xlink:href="qdomnode.xml">QDomNode</db:link> represents the &amp;lt;p&amp;gt; tag, previousSibling() will return the node representing the &amp;lt;h1&amp;gt; tag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#nextSibling">nextSibling</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previousSiblingElement">
<db:title>QDomElement QDomNode::previousSiblingElement(const QString &amp;<db:emphasis>tagName</db:emphasis> = QString(), const QString &amp;<db:emphasis>namespaceURI</db:emphasis> = QString()) const</db:title>
<db:para>Returns the previous sibling element with tag name <db:code role="parameter">tagName</db:code> and namespace URI <db:code role="parameter">namespaceURI</db:code>. If <db:code role="parameter">tagName</db:code> is empty, returns the previous sibling element with <db:code role="parameter">namespaceURI</db:code>, and if <db:code role="parameter">namespaceURI</db:code> is empty, returns the previous sibling element with <db:code role="parameter">tagName</db:code>. If the both parameters are empty, returns the previous sibling element. Returns a null element if no such sibling exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#firstChildElement">firstChildElement</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#nextSiblingElement">nextSiblingElement</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#lastChildElement">lastChildElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeChild">
<db:title>QDomNode QDomNode::removeChild(const QDomNode &amp;<db:emphasis>oldChild</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">oldChild</db:code> from the list of children. <db:code role="parameter">oldChild</db:code> must be a direct child of this node.</db:para>
<db:para>Returns a new reference to <db:code role="parameter">oldChild</db:code> on success or a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> on failure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">insertAfter</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#replaceChild">replaceChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#appendChild">appendChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replaceChild">
<db:title>QDomNode QDomNode::replaceChild(const QDomNode &amp;<db:emphasis>newChild</db:emphasis>, const QDomNode &amp;<db:emphasis>oldChild</db:emphasis>)</db:title>
<db:para>Replaces <db:code role="parameter">oldChild</db:code> with <db:code role="parameter">newChild</db:code>. <db:code role="parameter">oldChild</db:code> must be a direct child of this node.</db:para>
<db:para>If <db:code role="parameter">newChild</db:code> is the child of another node, it is reparented to this node. If <db:code role="parameter">newChild</db:code> is a child of this node, then its position in the list of children is changed.</db:para>
<db:para>If <db:code role="parameter">newChild</db:code> is a <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link>, then <db:code role="parameter">oldChild</db:code> is replaced by all of the children of the fragment.</db:para>
<db:para>Returns a new reference to <db:code role="parameter">oldChild</db:code> on success or a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> on failure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">insertAfter</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#removeChild">removeChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#appendChild">appendChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="save">
<db:title>void QDomNode::save(QTextStream &amp;<db:emphasis>stream</db:emphasis>, int <db:emphasis>indent</db:emphasis>, QDomNode::EncodingPolicy <db:emphasis>encodingPolicy</db:emphasis> = QDomNode::EncodingFromDocument) const</db:title>
<db:para>Writes the XML representation of the node and all its children to the stream <db:code role="parameter">stream</db:code>. This function uses <db:code role="parameter">indent</db:code> as the amount of space to indent the node.</db:para>
<db:para>If the document contains invalid XML characters or characters that cannot be encoded in the given encoding, the result and behavior is undefined.</db:para>
<db:para>If <db:code role="parameter">encodingPolicy</db:code> is <db:link xlink:href="qdomnode.xml#EncodingPolicy-enum">QDomNode::EncodingFromDocument</db:link> and this node is a document node, the encoding of text stream <db:code role="parameter">stream</db:code>'s encoding is set by treating a processing instruction by name &quot;xml&quot; as an XML declaration, if one exists, and otherwise defaults to UTF-8. XML declarations are not processing instructions, but this behavior exists for historical reasons. If this node is not a document node, the text stream's encoding is used.</db:para>
<db:para>If <db:code role="parameter">encodingPolicy</db:code> is <db:link xlink:href="qdomnode.xml#EncodingPolicy-enum">EncodingFromTextStream</db:link> and this node is a document node, this function behaves as save(<db:link xlink:href="qtextstream.xml">QTextStream</db:link> &amp;str, int indent) with the exception that the encoding specified in the text stream <db:code role="parameter">stream</db:code> is used.</db:para>
<db:para>If the document contains invalid XML characters or characters that cannot be encoded in the given encoding, the result and behavior is undefined.</db:para>
</db:section>
<db:section xml:id="setNodeValue">
<db:title>void QDomNode::setNodeValue(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the node's value to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#nodeValue">nodeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrefix">
<db:title>void QDomNode::setPrefix(const QString &amp;<db:emphasis>pre</db:emphasis>)</db:title>
<db:para>If the node has a namespace prefix, this function changes the namespace prefix of the node to <db:code role="parameter">pre</db:code>. Otherwise this function does nothing.</db:para>
<db:para>Only nodes of type <db:link xlink:href="qdomnode.xml#NodeType-enum">ElementNode</db:link> or <db:link xlink:href="qdomnode.xml#NodeType-enum">AttributeNode</db:link> can have namespaces. A namespace prefix must have be specified at creation time; it is not possible to add a namespace prefix afterwards.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#prefix">prefix</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#localName">localName</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#namespaceURI">namespaceURI</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#createElementNS">QDomDocument::createElementNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#createAttributeNS">QDomDocument::createAttributeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toAttr">
<db:title>QDomAttr QDomNode::toAttr() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomattr.xml">QDomAttr</db:link>. If the node is not an attribute, the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isAttr">isAttr</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toCDATASection">
<db:title>QDomCDATASection QDomNode::toCDATASection() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomcdatasection.xml">QDomCDATASection</db:link>. If the node is not a CDATA section, the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isCDATASection">isCDATASection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toCharacterData">
<db:title>QDomCharacterData QDomNode::toCharacterData() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomcharacterdata.xml">QDomCharacterData</db:link>. If the node is not a character data node the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isCharacterData">isCharacterData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toComment">
<db:title>QDomComment QDomNode::toComment() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomcomment.xml">QDomComment</db:link>. If the node is not a comment the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isComment">isComment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toDocument">
<db:title>QDomDocument QDomNode::toDocument() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link>. If the node is not a document the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isDocument">isDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toDocumentFragment">
<db:title>QDomDocumentFragment QDomNode::toDocumentFragment() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link>. If the node is not a document fragment the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isDocumentFragment">isDocumentFragment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toDocumentType">
<db:title>QDomDocumentType QDomNode::toDocumentType() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomdocumenttype.xml">QDomDocumentType</db:link>. If the node is not a document type the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isDocumentType">isDocumentType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toElement">
<db:title>QDomElement QDomNode::toElement() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomelement.xml">QDomElement</db:link>. If the node is not an element the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isElement">isElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toEntity">
<db:title>QDomEntity QDomNode::toEntity() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomentity.xml">QDomEntity</db:link>. If the node is not an entity the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isEntity">isEntity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toEntityReference">
<db:title>QDomEntityReference QDomNode::toEntityReference() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomentityreference.xml">QDomEntityReference</db:link>. If the node is not an entity reference, the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isEntityReference">isEntityReference</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNotation">
<db:title>QDomNotation QDomNode::toNotation() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomnotation.xml">QDomNotation</db:link>. If the node is not a notation the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isNotation">isNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toProcessingInstruction">
<db:title>QDomProcessingInstruction QDomNode::toProcessingInstruction() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomprocessinginstruction.xml">QDomProcessingInstruction</db:link>. If the node is not a processing instruction the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isProcessingInstruction">isProcessingInstruction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toText">
<db:title>QDomText QDomNode::toText() const</db:title>
<db:para>Converts a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> into a <db:link xlink:href="qdomtext.xml">QDomText</db:link>. If the node is not a text, the returned object will be <db:link xlink:href="qdomnode.xml#isNull">null</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#isText">isText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QDomNode::operator!=(const QDomNode &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> and this DOM node are not equal; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDomNode &amp;QDomNode::operator=(const QDomNode &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns a copy of <db:code role="parameter">other</db:code> to this DOM node.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QDomNode::operator==(const QDomNode &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> and this DOM node are equal; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Any instance of <db:link xlink:href="qdomnode.xml">QDomNode</db:link> acts as a reference to an underlying data structure in <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link>. The test for equality checks if the two references point to the same underlying node. For example:</db:para>
<db:programlisting language="cpp">QDomDocument document;
QDomElement element1 = document.documentElement();
QDomElement element2 = element1;
</db:programlisting>
<db:para>The two nodes (<db:link xlink:href="qdomelement.xml">QDomElement</db:link> is a <db:link xlink:href="qdomnode.xml">QDomNode</db:link> subclass) both refer to the document's root element, and <db:code>element1 == element2</db:code> will return true. On the other hand:</db:para>
<db:programlisting language="cpp">QDomElement element3 = document.createElement(&quot;MyElement&quot;);
QDomElement element4 = document.createElement(&quot;MyElement&quot;);
</db:programlisting>
<db:para>Even though both nodes are empty elements carrying the same name, <db:code>element3 == element4</db:code> will return false because they refer to two different nodes in the underlying data structure.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QTextStream &amp;operator&lt;&lt;(QTextStream &amp;<db:emphasis>str</db:emphasis>, const QDomNode &amp;<db:emphasis>node</db:emphasis>)</db:title>
<db:para>Writes the XML representation of the node <db:code role="parameter">node</db:code> and all its children to the stream <db:code role="parameter">str</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
