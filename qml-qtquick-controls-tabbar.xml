<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TabBar QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Allows the user to switch between different views or subtasks.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Container</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TabBar is part of <db:simplelist><db:member>qtquickcontrols-navigation</db:member><db:member>qtquickcontrols-containers</db:member><db:member>qtquickcontrols-focusscopes</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link> provides a tab-based navigation model.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-tabbar-wireframe.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link> is populated with <db:link xlink:href="qml-qtquick-controls-tabbutton.xml">TabButton</db:link> controls, and can be used together with any layout or container control that provides <db:code>currentIndex</db:code> -property, such as <db:link xlink:href="qml-qtquick-layouts-stacklayout.xml">StackLayout</db:link> or <db:link xlink:href="qml-qtquick-controls-swipeview.xml">SwipeView</db:link></db:para>
<db:programlisting language="qml">TabBar {
    id: bar
    width: parent.width
    TabButton {
        text: qsTr(&quot;Home&quot;)
    }
    TabButton {
        text: qsTr(&quot;Discover&quot;)
    }
    TabButton {
        text: qsTr(&quot;Activity&quot;)
    }
}

StackLayout {
    width: parent.width
    currentIndex: bar.currentIndex
    Item {
        id: homeTab
    }
    Item {
        id: discoverTab
    }
    Item {
        id: activityTab
    }
}
</db:programlisting>
<db:para>As shown above, <db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link> is typically populated with a static set of tab buttons that are defined inline as children of the tab bar. It is also possible to <db:link xlink:href="qml-qtquick-controls-container.xml#addItem-method">add</db:link>, <db:link xlink:href="qml-qtquick-controls-container.xml#insertItem-method">insert</db:link>, <db:link xlink:href="qml-qtquick-controls-container.xml#moveItem-method">move</db:link>, and <db:link xlink:href="qml-qtquick-controls-container.xml#removeItem-method">remove</db:link> items dynamically at run time. The items can be accessed using <db:link xlink:href="qml-qtquick-controls-container.xml#itemAt-method">itemAt</db:link>() or <db:link xlink:href="qml-qtquick-controls-container.xml#contentChildren-prop">contentChildren</db:link>.</db:para>
<db:para>When <db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link> is paired with another container such as <db:link xlink:href="qml-qtquick-controls-swipeview.xml">SwipeView</db:link>, it is necessary to make a two-way binding between the <db:link xlink:href="qml-qtquick-controls-container.xml#currentIndex-prop">currentIndex</db:link> property of each control. To do this without breaking bindings, avoid setting <db:code>currentIndex</db:code> directly, and instead use <db:link xlink:href="qml-qtquick-controls-container.xml#setCurrentIndex-method">setCurrentIndex</db:link>(), for example. See <db:link xlink:href="qml-qtquick-controls-container.xml#managing-the-current-index">Managing the Current Index</db:link> for more information.</db:para>
<db:para>To perform an action when <db:code>currentIndex</db:code> changes, use the <db:code>onCurrentIndexChanged</db:code> <db:link xlink:href="qtqml-syntax-objectattributes.xml#property-change-signal-handlers">property change signal handler</db:link>:</db:para>
<db:programlisting language="qml">onCurrentIndexChanged: {
    print(&quot;currentIndex changed to&quot;, currentIndex)
    // ...
}
</db:programlisting>
<db:section xml:id="resizing-tabs">
<db:title>Resizing Tabs</db:title>
<db:para>By default, <db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link> resizes its buttons to fit the width of the control. The available space is distributed equally to each button. The default resizing behavior can be overridden by setting an explicit width for the buttons.</db:para>
<db:para>The following example illustrates how to keep each tab button at their implicit size instead of being resized to fit the tabbar:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-tabbar-explicit.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">TabBar {
    width: parent.width
    TabButton {
        text: &quot;First&quot;
        width: implicitWidth
    }
    TabButton {
        text: &quot;Second&quot;
        width: implicitWidth
    }
    TabButton {
        text: &quot;Third&quot;
        width: implicitWidth
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="flickable-tabs">
<db:title>Flickable Tabs</db:title>
<db:para>If the total width of the buttons exceeds the available width of the tab bar, it automatically becomes flickable.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-tabbar-flickable.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">TabBar {
    id: bar
    width: parent.width

    Repeater {
        model: [&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;, &quot;Fifth&quot;]

        TabButton {
            text: modelData
            width: Math.max(100, bar.width / 5)
        }
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-tabbutton.xml">TabButton</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-tabbar">Customizing TabBar</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-navigation.xml">Navigation Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-containers.xml">Container Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-focus.xml">Focus Management in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="contentHeight-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] contentHeight : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentHeight</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the content height. It is used for calculating the total implicit height of the tab bar.</db:para>
<db:note>
<db:para>This property is available in <db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link> since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.2 (Qt 5.9), but it was promoted to the Container base type in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.5 (Qt 5.12).</db:para>
</db:note>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-container.xml#contentHeight-prop">Container::contentHeight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentWidth-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] contentWidth : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentWidth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the content width. It is used for calculating the total implicit width of the tab bar.</db:para>
<db:note>
<db:para>This property is available in <db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link> since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.2 (Qt 5.9), but it was promoted to the Container base type in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.5 (Qt 5.12).</db:para>
</db:note>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-container.xml#contentWidth-prop">Container::contentWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position-prop">
<db:title>position : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>position</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position of the tab bar.</db:para>
<db:note>
<db:para>If the tab bar is assigned as a header or footer of <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link> or <db:link xlink:href="qml-qtquick-controls-page.xml">Page</db:link>, the appropriate position is set automatically.</db:para>
</db:note>
<db:para>Possible values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>TabBar.Header</db:para>
</db:td>
<db:td>
<db:para>The tab bar is at the top, as a window or page header.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TabBar.Footer</db:para>
</db:td>
<db:td>
<db:para>The tab bar is at the bottom, as a window or page footer.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is style-specific.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-applicationwindow.xml#header-attached-prop">ApplicationWindow::header</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-applicationwindow.xml#footer-attached-prop">ApplicationWindow::footer</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-page.xml#header-prop">Page::header</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-page.xml#footer-prop">Page::footer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="index-attached-prop">
<db:title>[read-only, since QtQuick.Controls 2.3 (Qt 5.10)] TabBar.index : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>TabBar.index</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property holds the index of each tab button in the <db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link>.</db:para>
<db:para>It is attached to each tab button of the <db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="position-attached-prop">
<db:title>[read-only, since QtQuick.Controls 2.3 (Qt 5.10)] TabBar.position : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>TabBar.position</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property holds the position of the tab bar.</db:para>
<db:para>It is attached to each tab button of the <db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link>.</db:para>
<db:para>Possible values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>TabBar.Header</db:para>
</db:td>
<db:td>
<db:para>The tab bar is at the top, as a window or page header.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TabBar.Footer</db:para>
</db:td>
<db:td>
<db:para>The tab bar is at the bottom, as a window or page footer.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="tabBar-attached-prop">
<db:title>[read-only, since QtQuick.Controls 2.3 (Qt 5.10)] TabBar.tabBar : TabBar</db:title>
<db:fieldsynopsis>
<db:type>TabBar</db:type>
<db:varname>TabBar.tabBar</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property holds the tab bar that manages this tab button.</db:para>
<db:para>It is attached to each tab button of the <db:link xlink:href="qml-qtquick-controls-tabbar.xml">TabBar</db:link>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
</db:section>
</db:article>
