<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Robot Arm Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to add a C++ backend to a 3D project from Qt Design Studio.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;backend.h&quot;
#include &amp;lt;QTransform&amp;gt;

Backend::Backend(QObject *parent) : QObject(parent)
{
    connect(&amp;amp;m_rotation1Angle, &amp;amp;AnimatedParam::valueChanged, this, &amp;amp;Backend::rot1AngleChanged);
    connect(&amp;amp;m_rotation2Angle, &amp;amp;AnimatedParam::valueChanged, this, &amp;amp;Backend::rot2AngleChanged);
    connect(&amp;amp;m_rotation3Angle, &amp;amp;AnimatedParam::valueChanged, this, &amp;amp;Backend::rot3AngleChanged);
    connect(&amp;amp;m_rotation4Angle, &amp;amp;AnimatedParam::valueChanged, this, &amp;amp;Backend::rot4AngleChanged);
    connect(&amp;amp;m_clawsAngle, &amp;amp;AnimatedParam::valueChanged, this, &amp;amp;Backend::clawsAngleChanged);

    m_status.setBinding([this]() {
        return m_isCollision.value() ? QString(&quot;Collision!&quot;)
                : m_rotation1Angle.isRunning() || m_rotation2Angle.isRunning() || m_rotation3Angle.isRunning()
                        || m_rotation4Angle.isRunning()
                ? QString(&quot;Busy&quot;)
                : QString(&quot;Ready&quot;);
    });

    connect(&amp;amp;m_rotation1Angle, &amp;amp;AnimatedParam::valueChanged, this, &amp;amp;Backend::detectCollision);
    connect(&amp;amp;m_rotation2Angle, &amp;amp;AnimatedParam::valueChanged, this, &amp;amp;Backend::detectCollision);
    connect(&amp;amp;m_rotation3Angle, &amp;amp;AnimatedParam::valueChanged, this, &amp;amp;Backend::detectCollision);
    connect(&amp;amp;m_rotation4Angle, &amp;amp;AnimatedParam::valueChanged, this, &amp;amp;Backend::detectCollision);
}

int Backend::rotation1Angle() const
{
    return m_rotation1Angle.value();
}

void Backend::setRot1Angle(const int angle)
{
    m_rotation1Angle.setValue(angle);
}

int Backend::rotation2Angle() const
{
    return m_rotation2Angle.value();
}

void Backend::setRot2Angle(const int angle)
{
    m_rotation2Angle.setValue(angle);
}

int Backend::rotation3Angle() const
{
    return m_rotation3Angle.value();
}

void Backend::setRot3Angle(const int angle)
{
    m_rotation3Angle.setValue(angle);
}

int Backend::rotation4Angle() const
{
    return m_rotation4Angle.value();
}

void Backend::setRot4Angle(const int angle)
{
    m_rotation4Angle.setValue(angle);
}

int Backend::clawsAngle() const
{
    return m_clawsAngle.value();
}

void Backend::setClawsAngle(const int angle)
{
    m_clawsAngle.setValue(angle);
}

QString Backend::status() const
{
    return m_status;
}

QBindable&amp;lt;QString&amp;gt; Backend::bindableStatus() const
{
    return &amp;amp;m_status;
}

void Backend::detectCollision()
{
    // simple aproximate collision detection, uses hardcoded model dimensions

    QPolygon pol1(QRect(-70, 0, 70, 300));

    QTransform t;

    t.rotate(8.7);
    t.translate(0, 259);

    t.rotate(-20.);
    t.rotate(rotation3Angle());

    QPolygon pol2 = t.mapToPolygon(QRect(-35, 0, 35, 233));
    t.translate(0, 233);
    t.rotate(15);
    t.rotate(rotation2Angle());

    QPolygon pol3 = t.mapToPolygon(QRect(-27, 0, 27, 212));
    t.translate(0, 212);
    t.rotate(rotation1Angle());

    QPolygon pol4 = t.mapToPolygon(QRect(-42, 0, 42, 180));

    m_isCollision.setValue(pol1.intersects(pol3) || pol1.intersects(pol4) || pol2.intersects(pol4));
}

</db:programlisting>
</db:article>
