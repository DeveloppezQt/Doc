<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>States Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The States example shows how to use the Qt state machine to play animations.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

class Pixmap : public QGraphicsObject
{
    Q_OBJECT
public:
    Pixmap(const QPixmap &amp;pix) : QGraphicsObject(), p(pix)
    {
    }

    void paint(QPainter *painter, const QStyleOptionGraphicsItem *, QWidget *) Q_DECL_OVERRIDE
    {
        painter-&gt;drawPixmap(QPointF(), p);
    }

    QRectF boundingRect() const Q_DECL_OVERRIDE
    {
        return QRectF( QPointF(0, 0), p.size());
    }

private:
    QPixmap p;
};

class GraphicsView : public QGraphicsView
{
public:
    GraphicsView(QGraphicsScene *scene) : QGraphicsView(scene)
    {
    }

    virtual void resizeEvent(QResizeEvent *) Q_DECL_OVERRIDE
    {
        fitInView(sceneRect(), Qt::KeepAspectRatio);
    }
};

int main(int argc, char *argv[])
{
    Q_INIT_RESOURCE(states);

    QApplication app(argc, argv);

    // Text edit and button
    QTextEdit *edit = new QTextEdit;
    edit-&gt;setText(&quot;asdf lkjha yuoiqwe asd iuaysd u iasyd uiy &quot;
                  &quot;asdf lkjha yuoiqwe asd iuaysd u iasyd uiy &quot;
                  &quot;asdf lkjha yuoiqwe asd iuaysd u iasyd uiy &quot;
                  &quot;asdf lkjha yuoiqwe asd iuaysd u iasyd uiy!&quot;);

    QPushButton *button = new QPushButton;
    QGraphicsProxyWidget *buttonProxy = new QGraphicsProxyWidget;
    buttonProxy-&gt;setWidget(button);
    QGraphicsProxyWidget *editProxy = new QGraphicsProxyWidget;
    editProxy-&gt;setWidget(edit);

    QGroupBox *box = new QGroupBox;
    box-&gt;setFlat(true);
    box-&gt;setTitle(&quot;Options&quot;);

    QVBoxLayout *layout2 = new QVBoxLayout;
    box-&gt;setLayout(layout2);
    layout2-&gt;addWidget(new QRadioButton(&quot;Herring&quot;));
    layout2-&gt;addWidget(new QRadioButton(&quot;Blue Parrot&quot;));
    layout2-&gt;addWidget(new QRadioButton(&quot;Petunias&quot;));
    layout2-&gt;addStretch();

    QGraphicsProxyWidget *boxProxy = new QGraphicsProxyWidget;
    boxProxy-&gt;setWidget(box);

    // Parent widget
    QGraphicsWidget *widget = new QGraphicsWidget;
    QGraphicsLinearLayout *layout = new QGraphicsLinearLayout(Qt::Vertical, widget);
    layout-&gt;addItem(editProxy);
    layout-&gt;addItem(buttonProxy);
    widget-&gt;setLayout(layout);

    Pixmap *p1 = new Pixmap(QPixmap(&quot;:/digikam.png&quot;));
    Pixmap *p2 = new Pixmap(QPixmap(&quot;:/akregator.png&quot;));
    Pixmap *p3 = new Pixmap(QPixmap(&quot;:/accessories-dictionary.png&quot;));
    Pixmap *p4 = new Pixmap(QPixmap(&quot;:/k3b.png&quot;));
    Pixmap *p5 = new Pixmap(QPixmap(&quot;:/help-browser.png&quot;));
    Pixmap *p6 = new Pixmap(QPixmap(&quot;:/kchart.png&quot;));

    QGraphicsScene scene(0, 0, 400, 300);
    scene.setBackgroundBrush(scene.palette().window());
    scene.addItem(widget);
    scene.addItem(boxProxy);
    scene.addItem(p1);
    scene.addItem(p2);
    scene.addItem(p3);
    scene.addItem(p4);
    scene.addItem(p5);
    scene.addItem(p6);

    QStateMachine machine;
    QState *state1 = new QState(&amp;machine);
    QState *state2 = new QState(&amp;machine);
    QState *state3 = new QState(&amp;machine);
    machine.setInitialState(state1);

    // State 1
    state1-&gt;assignProperty(button, &quot;text&quot;, &quot;Switch to state 2&quot;);
    state1-&gt;assignProperty(widget, &quot;geometry&quot;, QRectF(0, 0, 400, 150));
    state1-&gt;assignProperty(box, &quot;geometry&quot;, QRect(-200, 150, 200, 150));
    state1-&gt;assignProperty(p1, &quot;pos&quot;, QPointF(68, 200)); // 185));
    state1-&gt;assignProperty(p2, &quot;pos&quot;, QPointF(168, 200)); // 185));
    state1-&gt;assignProperty(p3, &quot;pos&quot;, QPointF(268, 200)); // 185));
    state1-&gt;assignProperty(p4, &quot;pos&quot;, QPointF(68 - 150, 48 - 150));
    state1-&gt;assignProperty(p5, &quot;pos&quot;, QPointF(168, 48 - 150));
    state1-&gt;assignProperty(p6, &quot;pos&quot;, QPointF(268 + 150, 48 - 150));
    state1-&gt;assignProperty(p1, &quot;rotation&quot;, qreal(0));
    state1-&gt;assignProperty(p2, &quot;rotation&quot;, qreal(0));
    state1-&gt;assignProperty(p3, &quot;rotation&quot;, qreal(0));
    state1-&gt;assignProperty(p4, &quot;rotation&quot;, qreal(-270));
    state1-&gt;assignProperty(p5, &quot;rotation&quot;, qreal(-90));
    state1-&gt;assignProperty(p6, &quot;rotation&quot;, qreal(270));
    state1-&gt;assignProperty(boxProxy, &quot;opacity&quot;, qreal(0));
    state1-&gt;assignProperty(p1, &quot;opacity&quot;, qreal(1));
    state1-&gt;assignProperty(p2, &quot;opacity&quot;, qreal(1));
    state1-&gt;assignProperty(p3, &quot;opacity&quot;, qreal(1));
    state1-&gt;assignProperty(p4, &quot;opacity&quot;, qreal(0));
    state1-&gt;assignProperty(p5, &quot;opacity&quot;, qreal(0));
    state1-&gt;assignProperty(p6, &quot;opacity&quot;, qreal(0));

    // State 2
    state2-&gt;assignProperty(button, &quot;text&quot;, &quot;Switch to state 3&quot;);
    state2-&gt;assignProperty(widget, &quot;geometry&quot;, QRectF(200, 150, 200, 150));
    state2-&gt;assignProperty(box, &quot;geometry&quot;, QRect(9, 150, 190, 150));
    state2-&gt;assignProperty(p1, &quot;pos&quot;, QPointF(68 - 150, 185 + 150));
    state2-&gt;assignProperty(p2, &quot;pos&quot;, QPointF(168, 185 + 150));
    state2-&gt;assignProperty(p3, &quot;pos&quot;, QPointF(268 + 150, 185 + 150));
    state2-&gt;assignProperty(p4, &quot;pos&quot;, QPointF(64, 48));
    state2-&gt;assignProperty(p5, &quot;pos&quot;, QPointF(168, 48));
    state2-&gt;assignProperty(p6, &quot;pos&quot;, QPointF(268, 48));
    state2-&gt;assignProperty(p1, &quot;rotation&quot;, qreal(-270));
    state2-&gt;assignProperty(p2, &quot;rotation&quot;, qreal(90));
    state2-&gt;assignProperty(p3, &quot;rotation&quot;, qreal(270));
    state2-&gt;assignProperty(p4, &quot;rotation&quot;, qreal(0));
    state2-&gt;assignProperty(p5, &quot;rotation&quot;, qreal(0));
    state2-&gt;assignProperty(p6, &quot;rotation&quot;, qreal(0));
    state2-&gt;assignProperty(boxProxy, &quot;opacity&quot;, qreal(1));
    state2-&gt;assignProperty(p1, &quot;opacity&quot;, qreal(0));
    state2-&gt;assignProperty(p2, &quot;opacity&quot;, qreal(0));
    state2-&gt;assignProperty(p3, &quot;opacity&quot;, qreal(0));
    state2-&gt;assignProperty(p4, &quot;opacity&quot;, qreal(1));
    state2-&gt;assignProperty(p5, &quot;opacity&quot;, qreal(1));
    state2-&gt;assignProperty(p6, &quot;opacity&quot;, qreal(1));

    // State 3
    state3-&gt;assignProperty(button, &quot;text&quot;, &quot;Switch to state 1&quot;);
    state3-&gt;assignProperty(p1, &quot;pos&quot;, QPointF(0, 5));
    state3-&gt;assignProperty(p2, &quot;pos&quot;, QPointF(0, 5 + 64 + 5));
    state3-&gt;assignProperty(p3, &quot;pos&quot;, QPointF(5, 5 + (64 + 5) + 64));
    state3-&gt;assignProperty(p4, &quot;pos&quot;, QPointF(5 + 64 + 5, 5));
    state3-&gt;assignProperty(p5, &quot;pos&quot;, QPointF(5 + 64 + 5, 5 + 64 + 5));
    state3-&gt;assignProperty(p6, &quot;pos&quot;, QPointF(5 + 64 + 5, 5 + (64 + 5) + 64));
    state3-&gt;assignProperty(widget, &quot;geometry&quot;, QRectF(138, 5, 400 - 138, 200));
    state3-&gt;assignProperty(box, &quot;geometry&quot;, QRect(5, 205, 400, 90));
    state3-&gt;assignProperty(p1, &quot;opacity&quot;, qreal(1));
    state3-&gt;assignProperty(p2, &quot;opacity&quot;, qreal(1));
    state3-&gt;assignProperty(p3, &quot;opacity&quot;, qreal(1));
    state3-&gt;assignProperty(p4, &quot;opacity&quot;, qreal(1));
    state3-&gt;assignProperty(p5, &quot;opacity&quot;, qreal(1));
    state3-&gt;assignProperty(p6, &quot;opacity&quot;, qreal(1));

    QAbstractTransition *t1 = state1-&gt;addTransition(button, SIGNAL(clicked()), state2);
    QSequentialAnimationGroup *animation1SubGroup = new QSequentialAnimationGroup;
    animation1SubGroup-&gt;addPause(250);
    animation1SubGroup-&gt;addAnimation(new QPropertyAnimation(box, &quot;geometry&quot;));
    t1-&gt;addAnimation(animation1SubGroup);
    t1-&gt;addAnimation(new QPropertyAnimation(widget, &quot;geometry&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p1, &quot;pos&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p2, &quot;pos&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p3, &quot;pos&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p4, &quot;pos&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p5, &quot;pos&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p6, &quot;pos&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p1, &quot;rotation&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p2, &quot;rotation&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p3, &quot;rotation&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p4, &quot;rotation&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p5, &quot;rotation&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p6, &quot;rotation&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p1, &quot;opacity&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p2, &quot;opacity&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p3, &quot;opacity&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p4, &quot;opacity&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p5, &quot;opacity&quot;));
    t1-&gt;addAnimation(new QPropertyAnimation(p6, &quot;opacity&quot;));

    QAbstractTransition *t2 = state2-&gt;addTransition(button, SIGNAL(clicked()), state3);
    t2-&gt;addAnimation(new QPropertyAnimation(box, &quot;geometry&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(widget, &quot;geometry&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p1, &quot;pos&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p2, &quot;pos&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p3, &quot;pos&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p4, &quot;pos&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p5, &quot;pos&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p6, &quot;pos&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p1, &quot;rotation&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p2, &quot;rotation&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p3, &quot;rotation&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p4, &quot;rotation&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p5, &quot;rotation&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p6, &quot;rotation&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p1, &quot;opacity&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p2, &quot;opacity&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p3, &quot;opacity&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p4, &quot;opacity&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p5, &quot;opacity&quot;));
    t2-&gt;addAnimation(new QPropertyAnimation(p6, &quot;opacity&quot;));

    QAbstractTransition *t3 = state3-&gt;addTransition(button, SIGNAL(clicked()), state1);
    t3-&gt;addAnimation(new QPropertyAnimation(box, &quot;geometry&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(widget, &quot;geometry&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p1, &quot;pos&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p2, &quot;pos&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p3, &quot;pos&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p4, &quot;pos&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p5, &quot;pos&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p6, &quot;pos&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p1, &quot;rotation&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p2, &quot;rotation&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p3, &quot;rotation&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p4, &quot;rotation&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p5, &quot;rotation&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p6, &quot;rotation&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p1, &quot;opacity&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p2, &quot;opacity&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p3, &quot;opacity&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p4, &quot;opacity&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p5, &quot;opacity&quot;));
    t3-&gt;addAnimation(new QPropertyAnimation(p6, &quot;opacity&quot;));

    machine.start();

    GraphicsView view(&amp;scene);

    view.show();

    return app.exec();
}

#include &quot;main.moc&quot;

</db:programlisting>
</db:article>
