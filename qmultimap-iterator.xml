<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QMultiMap::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmultimap-iterator.xml">QMultiMap::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmultimap.xml">QMultiMap</db:link>&lt;Key, T&gt;::iterator allows you to iterate over a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> and to modify the value (but not the key) stored under a particular key. If you want to iterate over a const <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>, you should use <db:link xlink:href="qmultimap-const-iterator.xml">QMultiMap::const_iterator</db:link>. It is generally good practice to use <db:link xlink:href="qmultimap-const-iterator.xml">QMultiMap::const_iterator</db:link> on a non-const <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> as well, unless you need to change the <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qmultimap-iterator.xml">QMultiMap::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> function like <db:link xlink:href="qmultimap.xml#begin">QMultiMap::begin</db:link>(), <db:link xlink:href="qmultimap.xml#end">QMultiMap::end</db:link>(), or <db:link xlink:href="qmultimap.xml#find">QMultiMap::find</db:link>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a map:</db:para>
<db:para>Unlike <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>, which stores its items in an arbitrary order, <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> stores its items ordered by key. Items that share the same key will appear consecutively, from the most recently to the least recently inserted value.</db:para>
<db:para>Here's an example that increments every value stored in the <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> by 2:</db:para>
<db:programlisting language="cpp">for (auto it = multimap.begin(), end = multimap.end(); i != end; ++i)
    i.value() += 2;
</db:programlisting>
<db:para>To remove elements from a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> you can use <db:link xlink:href="qmultimap.xml#erase_if">erase_if</db:link>(<db:link xlink:href="qmultimap.xml">QMultiMap</db:link>&lt;Key, T&gt; &amp;map, Predicate pred):</db:para>
<db:programlisting language="cpp">erase_if(multimap, [](const QMultiMap&amp;lt;QString, int&amp;gt;::iterator it) { return it.value() &amp;gt; 10; });
</db:programlisting>
<db:para>Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap-const-iterator.xml">QMultiMap::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmultimap-key-iterator.xml">QMultiMap::key_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmultimap.xml#key_value_iterator-typedef">QMultiMap::key_value_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>[alias] iterator::iterator_category</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator_category</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A synonym for <db:emphasis>std::bidirectional_iterator_tag</db:emphasis> indicating this iterator is a bidirectional iterator.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="iterator-1">
<db:title>iterator::iterator()</db:title>
<db:constructorsynopsis>
<db:methodname>iterator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like <db:link xlink:href="qmultimap-iterator.xml#key">key</db:link>(), <db:link xlink:href="qmultimap-iterator.xml#value">value</db:link>(), and operator++() must not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#begin">QMultiMap::begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#end">QMultiMap::end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>const Key &amp;iterator::key() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const Key &amp;</db:type>
<db:methodname>key</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const Key &amp; key() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current item's key as a const reference.</db:para>
<db:para>There is no direct way of changing an item's key through an iterator, although it can be done by calling <db:link xlink:href="qmultimap.xml#erase">QMultiMap::erase</db:link>() followed by <db:link xlink:href="qmultimap.xml#insert">QMultiMap::insert</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap-iterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>T &amp;iterator::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T &amp;</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the current item's value.</db:para>
<db:para>You can change the value of an item by using value() on the left side of an assignment, for example:</db:para>
<db:programlisting language="cpp">if (i.key() == &quot;Hello&quot;)
    i.value() = &quot;Bonjour&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap-iterator.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap-iterator.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>T &amp;iterator::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T &amp;</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the current item's value.</db:para>
<db:para>Same as <db:link xlink:href="qmultimap-iterator.xml#value">value</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap-iterator.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>iterator &amp;iterator::operator++()</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator++</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator++()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix ++ operator (++i) advances the iterator to the next item in the multi map and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qmultimap.xml#end">QMultiMap::end</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap-iterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>iterator iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator</db:type>
<db:methodname>operator++</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator++(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (i++) advances the iterator to the next item in the multi map and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--">
<db:title>iterator &amp;iterator::operator--()</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator--</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator--()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix -- operator (--i) makes the preceding item current and returns an iterator pointing to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qmultimap.xml#begin">QMultiMap::begin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>iterator iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator</db:type>
<db:methodname>operator--</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator--(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix -- operator (i--) makes the preceding item current and returns an iterator pointing to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--gt">
<db:title>T *iterator::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current item's value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap-iterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const iterator &amp;<db:emphasis>lhs</db:emphasis>, const iterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> points to the same item as the <db:code role="parameter">rhs</db:code> iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const iterator &amp;<db:emphasis>lhs</db:emphasis>, const iterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> points to a different item than the <db:code role="parameter">rhs</db:code> iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for iterator</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qmultimap-iterator.xml">iterator</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="operator-2b-eq">
<db:title>iterator &amp;iterator::operator+=(iterator::difference_type <db:emphasis>n</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator--eq">iterator &amp;iterator::operator-=(iterator::difference_type <db:emphasis>n</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-2b">iterator operator+(iterator <db:emphasis>it</db:emphasis>, iterator::difference_type <db:emphasis>j</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-2b-1">iterator operator+(iterator::difference_type <db:emphasis>j</db:emphasis>, iterator <db:emphasis>it</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-">iterator operator-(iterator <db:emphasis>it</db:emphasis>, iterator::difference_type <db:emphasis>j</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator--1">iterator operator-(iterator::difference_type <db:emphasis>j</db:emphasis>, iterator <db:emphasis>it</db:emphasis>)</db:bridgehead>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use std::next, std::prev or std::advance instead.</db:para>
<db:para>Move an iterator by <db:emphasis>n</db:emphasis> positions. These operations can be expensive for large values of <db:emphasis>n</db:emphasis>; <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> iterators are not random access.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
