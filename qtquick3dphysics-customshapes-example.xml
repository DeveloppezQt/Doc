<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics - Custom Shapes Example</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates using different shapes.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/customshapes-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates loading and spawning several rigid body meshes as well as animating them. The scene consists of a dice tower, a tablecloth, a cup and a handful of dice. The cup is animated to collect spawning dice and put them in the dice tower. The dice will then roll down and out on the tablecloth.</db:para>
<db:section xml:id="environment">
<db:title>Environment</db:title>
<db:para>As usual we have a <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml">PhysicsWorld</db:link> and a <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>. In the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> we have our environment which sets up a lightprobe:</db:para>
<db:programlisting language="qml">environment: SceneEnvironment {
    clearColor: &quot;white&quot;
    backgroundMode: SceneEnvironment.SkyBox
    antialiasingMode: SceneEnvironment.MSAA
    antialiasingQuality: SceneEnvironment.High
    lightProbe: proceduralSky
}
</db:programlisting>
</db:section>
<db:section xml:id="textures">
<db:title>Textures</db:title>
<db:para>We define four textures which will be used for the skybox, the tablecloth and the numbers on the dice:</db:para>
<db:programlisting language="qml">Texture {
    id: proceduralSky
    textureData: ProceduralSkyTextureData {
        sunLongitude: -115
    }
}

Texture {
    id: weaveNormal
    source: &quot;maps/weave.png&quot;
    scaleU: 200
    scaleV: 200
    generateMipmaps: true
    mipFilter: Texture.Linear
}

Texture {
    id: numberNormal
    source: &quot;maps/numbers-normal.png&quot;
}

Texture {
    id: numberFill
    source: &quot;maps/numbers.png&quot;
    generateMipmaps: true
    mipFilter: Texture.Linear
}
</db:programlisting>
</db:section>
<db:section xml:id="scene">
<db:title>Scene</db:title>
<db:para>We have a Node which contains our scene with the camera and a directional light:</db:para>
<db:programlisting language="qml">id: scene
scale: Qt.vector3d(2, 2, 2)
PerspectiveCamera {
    id: camera
    position: Qt.vector3d(-45, 25, 60)
    eulerRotation: Qt.vector3d(-6, -33, 0)
    clipFar: 1000
    clipNear: 0.1
}

DirectionalLight {
    eulerRotation: Qt.vector3d(-45, 25, 0)
    castsShadow: true
    brightness: 1
    shadowMapQuality: Light.ShadowMapQualityVeryHigh
}
</db:programlisting>
</db:section>
<db:section xml:id="tablecloth">
<db:title>Tablecloth</db:title>
<db:para>We add the tablecloth which is a <db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link> consisting of a model with a weave texture and a <db:link xlink:href="qml-qtquick3d-physics-heightfieldshape.xml">HeightFieldShape</db:link> for collision.</db:para>
<db:programlisting language="qml">StaticRigidBody {
    position: Qt.vector3d(-15, -8, 0)
    id: tablecloth

    Model {
        geometry: HeightFieldGeometry {
            id: tableclothGeometry
            extents: Qt.vector3d(150, 20, 150)
            source: &quot;maps/cloth-heightmap.png&quot;
            smoothShading: false
        }
        materials: PrincipledMaterial {
            baseColor: &quot;#447722&quot;
            roughness: 0.8
            normalMap: weaveNormal
            normalStrength: 0.7
        }
    }

    collisionShapes: HeightFieldShape {
        id: hfShape
        extents: tableclothGeometry.extents
        source: &quot;maps/cloth-heightmap.png&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="cup">
<db:title>Cup</db:title>
<db:para>We define the cup as a <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> with a Model and a <db:link xlink:href="qml-qtquick3d-physics-trianglemeshshape.xml">TriangleMeshShape</db:link> as the collision shape. It has a Behavior on the <db:code>eulerRotation</db:code> and <db:code>position</db:code> properties as these are part of an animation.</db:para>
<db:programlisting language="qml">DynamicRigidBody {
    id: diceCup
    isKinematic: true
    mass: 0
    property vector3d bottomPos: Qt.vector3d(11, 6, 0)
    property vector3d topPos: Qt.vector3d(11, 45, 0)
    property vector3d unloadPos: Qt.vector3d(0, 45, 0)
    position: bottomPos
    kinematicPivot: Qt.vector3d(0, 6, 0)
    kinematicPosition: bottomPos
    collisionShapes: TriangleMeshShape {
        id: cupShape
        source: &quot;meshes/simpleCup.mesh&quot;
    }
    Model {
        source: &quot;meshes/cup.mesh&quot;
        materials: PrincipledMaterial {
            baseColor: &quot;#cc9988&quot;
            roughness: 0.3
            metalness: 1
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="tower">
<db:title>Tower</db:title>
<db:para>The tower is just a <db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link> with a Model and a <db:link xlink:href="qml-qtquick3d-physics-trianglemeshshape.xml">TriangleMeshShape</db:link> for collision.</db:para>
<db:programlisting language="qml">StaticRigidBody {
    id: diceTower
    x: -4
    Model {
        id: testModel
        source: &quot;meshes/tower.mesh&quot;
        materials: [
            PrincipledMaterial {
                baseColor: &quot;#ccccce&quot;
                roughness: 0.3
            },
            PrincipledMaterial {
                id: glassMaterial
                baseColor: &quot;#aaaacc&quot;
                transmissionFactor: 0.95
                thicknessFactor: 1
                roughness: 0.05
            }
        ]
    }
    collisionShapes: TriangleMeshShape {
        id: triShape
        source: &quot;meshes/tower.mesh&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="dice">
<db:title>Dice</db:title>
<db:para>To generate the dice we use a Component and a <db:link xlink:href="qml-qtquick3d-repeater3d.xml">Repeater3D</db:link>. The Component contains a <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> with a <db:link xlink:href="qml-qtquick3d-physics-convexmeshshape.xml">ConvexMeshShape</db:link> and a Model. The position, color, scale and mesh source are randomly generated for each die.</db:para>
<db:programlisting language="qml">Component {
    id: diceComponent

    DynamicRigidBody {
        id: thisBody
        function randomInRange(min, max) {
            return Math.random() * (max - min) + min
        }

        function restore() {
            reset(initialPosition, eulerRotation)
        }

        scale: Qt.vector3d(scaleFactor, scaleFactor, scaleFactor)
        eulerRotation: Qt.vector3d(randomInRange(0, 360),
                                   randomInRange(0, 360),
                                   randomInRange(0, 360))

        property vector3d initialPosition: Qt.vector3d(11 + 1.5 * Math.cos(index/(Math.PI/4)),
                                                       diceCup.bottomPos.y + index * 1.5,
                                                       0)
        position: initialPosition

        property real scaleFactor: randomInRange(0.8, 1.4)
        property color baseCol: Qt.hsla(randomInRange(0, 1),
                                        randomInRange(0.6, 1.0),
                                        randomInRange(0.4, 0.7),
                                        1.0)

        collisionShapes: ConvexMeshShape {
            id: diceShape
            source: Math.random() &amp;lt; 0.25 ? &quot;meshes/icosahedron.mesh&quot;
                  : Math.random() &amp;lt; 0.5 ? &quot;meshes/dodecahedron.mesh&quot;
                  : Math.random() &amp;lt; 0.75 ? &quot;meshes/octahedron.mesh&quot;
                                         : &quot;meshes/tetrahedron.mesh&quot;
        }

        Model {
            id: thisModel
            source: diceShape.source
            materials: PrincipledMaterial {
                metalness: 1.0
                roughness: randomInRange(0.2, 0.6)
                baseColor: baseCol
                emissiveMap: numberFill
                emissiveFactor: Qt.vector3d(1, 1, 1)
                normalMap: numberNormal
                normalStrength: 0.75
            }
        }
    }
}

Repeater3D {
    id: dicePool
    model: 25
    delegate: diceComponent
    function restore() {
        for (var i = 0; i &amp;lt; count; i++) {
            objectAt(i).restore()
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="animation">
<db:title>Animation</db:title>
<db:para>To make the dice move from the cup to the dice tower we animate the cup and move it up and then tip it over. To make sure that the animation stays in sync with the physical simulation we use an <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link> which we connect to the <db:code>onFrameDone</db:code> signal on the <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml">PhysicsWorld</db:link>. After every simulated frame we progress the animation with the elapsed timestep.</db:para>
<db:programlisting language="qml">Connections {
    target: physicsWorld
    property real totalAnimationTime: 7500
    function onFrameDone(timeStep) {
        let progressStep = timeStep / totalAnimationTime
        animationController.progress += progressStep
        if (animationController.progress &amp;gt;= 1) {
            animationController.completeToEnd()
            animationController.reload()
            animationController.progress = 0
        }
    }
}

AnimationController {
    id: animationController
    animation: SequentialAnimation {
        PauseAnimation { duration: 2500 }
        PropertyAnimation {
            target: diceCup
            property: &quot;kinematicPosition&quot;
            to: diceCup.topPos
            duration: 2500
        }
        ParallelAnimation {
            PropertyAnimation {
                target: diceCup
                property: &quot;kinematicEulerRotation.z&quot;
                to: 130
                duration: 1500
            }
            PropertyAnimation {
                target: diceCup
                property: &quot;kinematicPosition&quot;
                to: diceCup.unloadPos
                duration: 1500
            }
        }
        PauseAnimation { duration: 1000 }
        ParallelAnimation {
            PropertyAnimation {
                target: diceCup
                property: &quot;kinematicEulerRotation.z&quot;
                to: 0
                duration: 1500
            }
            PropertyAnimation {
                target: diceCup
                property: &quot;kinematicPosition&quot;
                to: diceCup.topPos
                duration: 1500
            }
        }
        PropertyAnimation { target: diceCup; property: &quot;kinematicPosition&quot;; to: diceCup.bottomPos; duration: 1500 }
        PauseAnimation { duration: 2000 }
        ScriptAction { script: dicePool.restore() }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="controller">
<db:title>Controller</db:title>
<db:para>Finally a <db:link xlink:href="qml-qtquick3d-helpers-wasdcontroller.xml">WasdController</db:link> is added to be able to control the camera using a keyboard:</db:para>
<db:programlisting language="qml">WasdController {
    keysEnabled: true
    controlledObject: camera
    speed: 0.2
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="customshapes/CMakeLists.txt">customshapes/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshapes/customshapes.pro">customshapes/customshapes.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshapes/main.cpp">customshapes/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshapes/main.qml">customshapes/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshapes/qml.qrc">customshapes/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshapes/resources.qrc">customshapes/resources.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="customshapes/maps/cloth-heightmap.png">customshapes/maps/cloth-heightmap.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshapes/maps/numbers-normal.png">customshapes/maps/numbers-normal.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshapes/maps/numbers.png">customshapes/maps/numbers.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customshapes/maps/weave.png">customshapes/maps/weave.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
