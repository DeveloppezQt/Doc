<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHistoryState Class</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhistorystate.xml">QHistoryState</db:link> class provides a means of returning to a previously active substate.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHistoryState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS StateMachine)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::StateMachine)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += statemachine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractstate.xml" xlink:role="class">QAbstractState</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QHistoryState is part of <db:simplelist><db:member>statemachine</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A history state is a pseudo-state that represents the child state that the parent state was in the last time the parent state was exited. A transition with a history state as its target is in fact a transition to one or more other child states of the parent state. <db:link xlink:href="qhistorystate.xml">QHistoryState</db:link> is part of <db:link xlink:href="qtstatemachine-overview.xml">Qt State Machine Framework</db:link>.</db:para>
<db:para>Use the <db:link xlink:href="qhistorystate.xml#setDefaultState">setDefaultState</db:link>() function to set the state that should be entered if the parent state has never been entered. Example:</db:para>
<db:programlisting language="cpp">QStateMachine machine;

QState *s1 = new QState();
QState *s11 = new QState(s1);
QState *s12 = new QState(s1);

QHistoryState *s1h = new QHistoryState(s1);
s1h-&amp;gt;setDefaultState(s11);

machine.addState(s1);

QState *s2 = new QState();
machine.addState(s2);

QPushButton *button = new QPushButton();
// Clicking the button will cause the state machine to enter the child state
// that s1 was in the last time s1 was exited, or the history state's default
// state if s1 has never been entered.
s1-&amp;gt;addTransition(button, SIGNAL(clicked()), s1h);
</db:programlisting>
<db:para>If more than one default state has to be entered, or if the transition to the default state(s) has to be acted upon, the <db:link xlink:href="qhistorystate.xml#defaultTransition">defaultTransition</db:link> should be set instead. Note that the eventTest() method of that transition will never be called: the selection and execution of the transition is done automatically when entering the history state.</db:para>
<db:para>By default a history state is shallow, meaning that it won't remember nested states. This can be configured through the <db:link xlink:href="qhistorystate.xml#historyType">historyType</db:link> property.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HistoryType-enum">
<db:title>enum QHistoryState::HistoryType</db:title>
<db:enumsynopsis>
<db:enumname>HistoryType</db:enumname>
<db:enumitem>
<db:enumidentifier>ShallowHistory</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DeepHistory</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the type of history that a <db:link xlink:href="qhistorystate.xml">QHistoryState</db:link> records.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhistorystate.xml">QHistoryState</db:link></db:emphasis>::ShallowHistory</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Only the immediate child states of the parent state are recorded. In this case a transition with the history state as its target will end up in the immediate child state that the parent was in the last time it was exited. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhistorystate.xml">QHistoryState</db:link></db:emphasis>::DeepHistory</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Nested states are recorded. In this case a transition with the history state as its target will end up in the most deeply nested descendant state the parent was in the last time it was exited.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="defaultState-prop">
<db:title>defaultState : QAbstractState*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstractState*</db:type>
<db:varname>defaultState</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">defaultState</db:synopsisinfo>
<db:synopsisinfo role="setter">setDefaultState</db:synopsisinfo>
<db:synopsisinfo role="notifier">defaultStateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the default state of this history state</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractstate.xml#QAbstractState">QAbstractState</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qhistorystate.xml#defaultState">defaultState</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qhistorystate.xml#setDefaultState">setDefaultState</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractstate.xml#QAbstractState">QAbstractState</db:link></db:type> *<db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qhistorystate.xml#defaultStateChanged">defaultStateChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="defaultTransition-prop">
<db:title>[bindable] defaultTransition : QAbstractTransition*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstractTransition*</db:type>
<db:varname>defaultTransition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">defaultTransition</db:synopsisinfo>
<db:synopsisinfo role="setter">setDefaultTransition</db:synopsisinfo>
<db:synopsisinfo role="notifier">defaultTransitionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the default transition of this history state</db:para>
</db:section>
<db:section xml:id="historyType-prop">
<db:title>[bindable] historyType : HistoryType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>HistoryType</db:type>
<db:varname>historyType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">historyType</db:synopsisinfo>
<db:synopsisinfo role="setter">setHistoryType</db:synopsisinfo>
<db:synopsisinfo role="notifier">historyTypeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the type of history that this history state records</db:para>
<db:para>The default value of this property is <db:link xlink:href="qhistorystate.xml#HistoryType-enum">QHistoryState::ShallowHistory</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHistoryState">
<db:title>QHistoryState::QHistoryState(QState *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QHistoryState</db:methodname>
<db:methodparam>
<db:type>QState *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHistoryState(QState *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new shallow history state with the given <db:code role="parameter">parent</db:code> state.</db:para>
</db:section>
<db:section xml:id="QHistoryState-1">
<db:title>QHistoryState::QHistoryState(QHistoryState::HistoryType <db:emphasis>type</db:emphasis>, QState *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QHistoryState</db:methodname>
<db:methodparam>
<db:type>QHistoryState::HistoryType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QState *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QHistoryState(QHistoryState::HistoryType type, QState *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new history state of the given <db:code role="parameter">type</db:code>, with the given <db:code role="parameter">parent</db:code> state.</db:para>
</db:section>
<db:section xml:id="dtor.QHistoryState">
<db:title>[virtual] QHistoryState::~QHistoryState()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QHistoryState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHistoryState()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this history state.</db:para>
</db:section>
<db:section xml:id="defaultState">
<db:title>QAbstractState *QHistoryState::defaultState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractState *</db:type>
<db:methodname>defaultState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">defaultState</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractState * defaultState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this history state's default state. The default state indicates the state to transition to if the parent state has never been entered before.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qhistorystate.xml#defaultState-prop">defaultState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#setDefaultState">setDefaultState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultStateChanged">
<db:title>void QHistoryState::defaultStateChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>defaultStateChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">defaultState</db:synopsisinfo>
<db:synopsisinfo role="signature">void defaultStateChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:link xlink:href="qhistorystate.xml#defaultState">defaultState</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qhistorystate.xml#defaultState-prop">defaultState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#defaultState">QHistoryState::defaultState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultTransition">
<db:title>QAbstractTransition *QHistoryState::defaultTransition() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractTransition *</db:type>
<db:methodname>defaultTransition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">defaultTransition</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractTransition * defaultTransition() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this history state's default transition. The default transition is taken when the history state has never been entered before. The target states of the default transition therefore make up the default state.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qhistorystate.xml#defaultTransition-prop">defaultTransition</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#setDefaultTransition">setDefaultTransition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultTransitionChanged">
<db:title>void QHistoryState::defaultTransitionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>defaultTransitionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">defaultTransition</db:synopsisinfo>
<db:synopsisinfo role="signature">void defaultTransitionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:link xlink:href="qhistorystate.xml#defaultTransition">defaultTransition</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qhistorystate.xml#defaultTransition-prop">defaultTransition</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#defaultTransition">QHistoryState::defaultTransition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QHistoryState::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractstate.xml#event" role="function">QAbstractState::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="historyType">
<db:title>QHistoryState::HistoryType QHistoryState::historyType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHistoryState::HistoryType</db:type>
<db:methodname>historyType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">historyType</db:synopsisinfo>
<db:synopsisinfo role="signature">QHistoryState::HistoryType historyType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of history that this history state records.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qhistorystate.xml#historyType-prop">historyType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#setHistoryType">setHistoryType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="historyTypeChanged">
<db:title>void QHistoryState::historyTypeChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>historyTypeChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">historyType</db:synopsisinfo>
<db:synopsisinfo role="signature">void historyTypeChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:link xlink:href="qhistorystate.xml#historyType">historyType</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qhistorystate.xml#historyType-prop">historyType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#historyType">QHistoryState::historyType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onEntry">
<db:title>[override virtual protected] void QHistoryState::onEntry(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>onEntry</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void onEntry(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractstate.xml#onEntry" role="function">QAbstractState::onEntry(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="onExit">
<db:title>[override virtual protected] void QHistoryState::onExit(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>onExit</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void onExit(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractstate.xml#onExit" role="function">QAbstractState::onExit(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setDefaultState">
<db:title>void QHistoryState::setDefaultState(QAbstractState *<db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDefaultState</db:methodname>
<db:methodparam>
<db:type>QAbstractState *</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">defaultState</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultState(QAbstractState *state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this history state's default state to be the given <db:code role="parameter">state</db:code>. <db:code role="parameter">state</db:code> must be a sibling of this history state.</db:para>
<db:para>Note that this function does not set <db:code role="parameter">state</db:code> as the initial state of its parent.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qhistorystate.xml#defaultState-prop">defaultState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#defaultState">defaultState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultTransition">
<db:title>void QHistoryState::setDefaultTransition(QAbstractTransition *<db:emphasis>transition</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDefaultTransition</db:methodname>
<db:methodparam>
<db:type>QAbstractTransition *</db:type>
<db:parameter>transition</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">defaultTransition</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultTransition(QAbstractTransition *transition)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this history state's default transition to be the given <db:code role="parameter">transition</db:code>. This will set the source state of the <db:code role="parameter">transition</db:code> to the history state.</db:para>
<db:para>Note that the eventTest method of the <db:code role="parameter">transition</db:code> will never be called.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qhistorystate.xml#defaultTransition-prop">defaultTransition</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#defaultTransition">defaultTransition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHistoryType">
<db:title>void QHistoryState::setHistoryType(QHistoryState::HistoryType <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHistoryType</db:methodname>
<db:methodparam>
<db:type>QHistoryState::HistoryType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">historyType</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHistoryType(QHistoryState::HistoryType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">type</db:code> of history that this history state records.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qhistorystate.xml#historyType-prop">historyType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#historyType">historyType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
