<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHistoryState Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhistorystate.xml">QHistoryState</db:link> class provides a means of returning to a previously active substate.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHistoryState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractstate.xml" xlink:role="class">QAbstractState</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QHistoryState is part of <db:simplelist><db:member><db:link xlink:href="statemachine.xml">State Machine Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A history state is a pseudo-state that represents the child state that the parent state was in the last time the parent state was exited. A transition with a history state as its target is in fact a transition to one of the other child states of the parent state. <db:link xlink:href="qhistorystate.xml">QHistoryState</db:link> is part of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
<db:para>Use the <db:link xlink:href="qhistorystate.xml#setDefaultState">setDefaultState</db:link>() function to set the state that should be entered if the parent state has never been entered. Example:</db:para>
<db:programlisting language="cpp">QStateMachine machine;

QState *s1 = new QState();
QState *s11 = new QState(s1);
QState *s12 = new QState(s1);

QHistoryState *s1h = new QHistoryState(s1);
s1h-&gt;setDefaultState(s11);

machine.addState(s1);

QState *s2 = new QState();
machine.addState(s2);

QPushButton *button = new QPushButton();
// Clicking the button will cause the state machine to enter the child state
// that s1 was in the last time s1 was exited, or the history state's default
// state if s1 has never been entered.
s1-&gt;addTransition(button, SIGNAL(clicked()), s1h);
</db:programlisting>
<db:para>By default a history state is shallow, meaning that it won't remember nested states. This can be configured through the <db:link xlink:href="qhistorystate.xml#historyType">historyType</db:link> property.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HistoryType-enum">
<db:title>enum QHistoryState::HistoryType</db:title>
<db:para>This enum specifies the type of history that a <db:link xlink:href="qhistorystate.xml">QHistoryState</db:link> records.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhistorystate.xml">QHistoryState</db:link></db:emphasis>::ShallowHistory</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Only the immediate child states of the parent state are recorded. In this case a transition with the history state as its target will end up in the immediate child state that the parent was in the last time it was exited. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhistorystate.xml">QHistoryState</db:link></db:emphasis>::DeepHistory</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Nested states are recorded. In this case a transition with the history state as its target will end up in the most deeply nested descendant state the parent was in the last time it was exited.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHistoryState">
<db:title>QHistoryState::QHistoryState(QState *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a new shallow history state with the given <db:code role="parameter">parent</db:code> state.</db:para>
</db:section>
<db:section xml:id="QHistoryState-1">
<db:title>QHistoryState::QHistoryState(QHistoryState::HistoryType <db:emphasis>type</db:emphasis>, QState *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a new history state of the given <db:code role="parameter">type</db:code>, with the given <db:code role="parameter">parent</db:code> state.</db:para>
</db:section>
<db:section xml:id="dtor.QHistoryState">
<db:title>[virtual noexcept] QHistoryState::~QHistoryState()</db:title>
<db:para>Destroys this history state.</db:para>
</db:section>
<db:section xml:id="defaultState">
<db:title>QAbstractState *QHistoryState::defaultState() const</db:title>
<db:para>Returns this history state's default state. The default state indicates the state to transition to if the parent state has never been entered before.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#setDefaultState">setDefaultState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultStateChanged">
<db:title>[since 5.4] void QHistoryState::defaultStateChanged()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qhistorystate.xml#defaultState">defaultState</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#defaultState">QHistoryState::defaultState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QHistoryState::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractstate.xml#event" role="function">QAbstractState::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="historyType">
<db:title>QHistoryState::HistoryType QHistoryState::historyType() const</db:title>
<db:para>Returns the type of history that this history state records.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#setHistoryType">setHistoryType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="historyTypeChanged">
<db:title>[since 5.4] void QHistoryState::historyTypeChanged()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qhistorystate.xml#historyType">historyType</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#historyType">QHistoryState::historyType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onEntry">
<db:title>[override virtual protected] void QHistoryState::onEntry(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractstate.xml#onEntry" role="function">QAbstractState::onEntry(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="onExit">
<db:title>[override virtual protected] void QHistoryState::onExit(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractstate.xml#onExit" role="function">QAbstractState::onExit(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setDefaultState">
<db:title>void QHistoryState::setDefaultState(QAbstractState *<db:emphasis>state</db:emphasis>)</db:title>
<db:para>Sets this history state's default state to be the given <db:code role="parameter">state</db:code>. <db:code role="parameter">state</db:code> must be a sibling of this history state.</db:para>
<db:para>Note that this function does not set <db:code role="parameter">state</db:code> as the initial state of its parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#defaultState">defaultState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHistoryType">
<db:title>void QHistoryState::setHistoryType(QHistoryState::HistoryType <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">type</db:code> of history that this history state records.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhistorystate.xml#historyType">historyType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
