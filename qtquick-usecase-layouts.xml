<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Use Case - Positioners and Layouts In QML</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to create layouts for visual components in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>There are several ways to position items in QML.</db:para>
<db:para>Below is a brief overview. For more details, see <db:link xlink:href="qtquick-positioning-topic.xml">Important Concepts In Qt Quick - Positioning</db:link>.</db:para>
<db:section xml:id="manual-positioning">
<db:title>Manual Positioning</db:title>
<db:para>Items can be placed at specific x,y coordinates on the screen by setting their x,y properties. This will setup their position relative to the top left corner of their parent, according to the <db:link xlink:href="qtquick-visualcanvas-coordinates.xml">visual coordinate system</db:link> rules.</db:para>
<db:para>Combined with using <db:link xlink:href="qtqml-syntax-propertybinding.xml">bindings</db:link> instead of constant values for these properties, relative positioning is also easily accomplished by setting the x and y coordinates to the appropriate bindings.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 100; height: 100

    Rectangle {
        // Manually positioned at 20,20
        x: 20
        y: 20
        width: 80
        height: 80
        color: &quot;red&quot;
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-uses-layouts-direct.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="anchors">
<db:title>Anchors</db:title>
<db:para>The Item type provides the abilitiy to anchor to other <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> types. There are seven anchor lines for each item: <db:emphasis>left</db:emphasis>, <db:emphasis>right</db:emphasis>, <db:emphasis>vertical center</db:emphasis>, <db:emphasis>top</db:emphasis>, <db:emphasis>bottom</db:emphasis>, <db:emphasis>baseline</db:emphasis> and <db:emphasis>horizontal center</db:emphasis>. The three vertical anchor lines can be anchored to any of the three vertical anchor lines of another item, and the four horizontal anchor lines can be anchored to the horizontal anchor lines of another item.</db:para>
<db:para>For full details, see <db:link xlink:href="qtquick-positioning-anchors.xml">Positioning with Anchors</db:link> and the documentation of the <db:link xlink:href="qml-qtquick-item.xml#anchors.top-prop">anchors property</db:link>.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 200; height: 200

    Rectangle {
        // Anchored to 20px off the top right corner of the parent
        anchors.right: parent.right
        anchors.top: parent.top
        anchors.margins: 20 // Sets all margins at once

        width: 80
        height: 80
        color: &quot;orange&quot;
    }

    Rectangle {
        // Anchored to 20px off the top center corner of the parent.
        // Notice the different group property syntax for 'anchors' compared to
        // the previous Rectangle. Both are valid.
        anchors { horizontalCenter: parent.horizontalCenter; top: parent.top; topMargin: 20 }

        width: 80
        height: 80
        color: &quot;green&quot;
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-uses-layouts-anchors.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="positioners">
<db:title>Positioners</db:title>
<db:para>For the common case of wanting to <db:emphasis>position</db:emphasis> a set of types in a regular pattern, Qt Quick provides some positioner types. Items placed in a positioner are automatically positioned in some way; for example, a <db:link xlink:href="qml-qtquick-row.xml">Row</db:link> positions items to be horizontally adjacent (forming a row).</db:para>
<db:para>For full details see <db:link xlink:href="qtquick-positioning-layouts.xml">Item Positioners</db:link>.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 300; height: 100

    Row { // The &quot;Row&quot; type lays out its child items in a horizontal line
        spacing: 20 // Places 20px of space between items

        Rectangle { width: 80; height: 80; color: &quot;red&quot; }
        Rectangle { width: 80; height: 80; color: &quot;green&quot; }
        Rectangle { width: 80; height: 80; color: &quot;blue&quot; }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-uses-layouts-positioners.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="layout-types">
<db:title>Layout Types</db:title>
<db:para><db:emphasis>Layout types</db:emphasis> function in a similar way as positioners but allow further refinement or restrictions to the layout. Specifically, the layout types allow you to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>set the alignment of text and other items</db:para>
</db:listitem>
<db:listitem>
<db:para>resize and fill the allotted application areas automatically</db:para>
</db:listitem>
<db:listitem>
<db:para>set size constraints such as minimum or maximum dimensions</db:para>
</db:listitem>
<db:listitem>
<db:para>set the spacing between items within the layout</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="qml">GroupBox {
    id: gridBox
    title: &quot;Grid layout&quot;
    Layout.fillWidth: true

    GridLayout {
        id: gridLayout
        rows: 3
        flow: GridLayout.TopToBottom
        anchors.fill: parent
        Label { text: &quot;Line 1&quot; }
        Label { text: &quot;Line 2&quot; }
        Label { text: &quot;Line 3&quot; }

        TextField { }
        TextField { }
        TextField { }

        TextArea {
            text: &quot;This widget spans over three rows in the GridLayout.\n&quot;
                  + &quot;All items in the GridLayout are implicitly positioned from top to bottom.&quot;
            Layout.rowSpan: 3
            Layout.fillHeight: true
            Layout.fillWidth: true
        }
    }
}
</db:programlisting>
<db:para>The snippet above comes from the <db:link xlink:href="qtquick-layouts-example.xml">Basic Layouts</db:link> example. The snippet shows the simplicity of adding various fields and items in a layout. The <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml">GridLayout</db:link> can be resized and its format is customizable through various properties.</db:para>
<db:para>For more information about the layout types, visit:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquicklayouts-overview.xml">Qt Quick Layouts Overview</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-layouts-example.xml">Basic Layouts</db:link> example</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para><db:link xlink:href="qtquicklayouts-index.xml">Qt Quick Layouts</db:link> was introduced in Qt 5.1 and requires <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2.1.</db:para>
</db:note>
</db:section>
</db:article>
