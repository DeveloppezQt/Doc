<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLFramebufferObject Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> class encapsulates an OpenGL framebuffer object.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLFramebufferObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLFramebufferObject is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> class encapsulates an OpenGL framebuffer object, defined by the <db:code>GL_EXT_framebuffer_object</db:code> extension. It provides a rendering surface that can be painted on with a <db:link xlink:href="qpainter.xml">QPainter</db:link> with the help of <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link>, or rendered to using native OpenGL calls. This surface can be bound and used as a regular texture in your own OpenGL drawing code. By default, the <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> class generates a 2D OpenGL texture (using the <db:code>GL_TEXTURE_2D</db:code> target), which is used as the internal rendering target.</db:para>
<db:para><db:emphasis role="bold">It is important to have a current OpenGL context when creating a <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link>, otherwise initialization will fail.</db:emphasis></db:para>
<db:para>Create the QOpenGLFrameBufferObject instance with the <db:link xlink:href="qopenglframebufferobject.xml#Attachment-enum">CombinedDepthStencil</db:link> attachment if you want <db:link xlink:href="qpainter.xml">QPainter</db:link> to render correctly. Note that you need to create a <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> with more than one sample per pixel for primitives to be antialiased when drawing using a <db:link xlink:href="qpainter.xml">QPainter</db:link>. To create a multisample framebuffer object you should use one of the constructors that take a <db:link xlink:href="qopenglframebufferobjectformat.xml">QOpenGLFramebufferObjectFormat</db:link> parameter, and set the <db:link xlink:href="qopenglframebufferobjectformat.xml#samples">QOpenGLFramebufferObjectFormat::samples</db:link>() property to a non-zero value.</db:para>
<db:para>For multisample framebuffer objects a color render buffer is created, otherwise a texture with the specified texture target is created. The color render buffer or texture will have the specified internal format, and will be bound to the <db:code>GL_COLOR_ATTACHMENT0</db:code> attachment in the framebuffer object.</db:para>
<db:para>Multiple render targets are also supported, in case the OpenGL implementation supports this. Here there will be multiple textures (or, in case of multisampling, renderbuffers) present and each of them will get attached to <db:code>GL_COLOR_ATTACHMENT0</db:code>, <db:code>1</db:code>, <db:code>2</db:code>, ...</db:para>
<db:para>If you want to use a framebuffer object with multisampling enabled as a texture, you first need to copy from it to a regular framebuffer object using QOpenGLContext::blitFramebuffer().</db:para>
<db:para>It is possible to draw into a <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> using <db:link xlink:href="qpainter.xml">QPainter</db:link> and <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> in a separate thread.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Attachment-enum">
<db:title>enum QOpenGLFramebufferObject::Attachment</db:title>
<db:enumsynopsis>
<db:enumname>Attachment</db:enumname>
<db:enumitem>
<db:enumidentifier>NoAttachment</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CombinedDepthStencil</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Depth</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type is used to configure the depth and stencil buffers attached to the framebuffer object when it is created.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link></db:emphasis>::NoAttachment</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No attachment is added to the framebuffer object. Note that the OpenGL depth and stencil tests won't work when rendering to a framebuffer object without any depth or stencil buffers. This is the default value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link></db:emphasis>::CombinedDepthStencil</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>If the <db:code>GL_EXT_packed_depth_stencil</db:code> extension is present, a combined depth and stencil buffer is attached. If the extension is not present, only a depth buffer is attached.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link></db:emphasis>::Depth</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A depth buffer is attached to the framebuffer object.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>attachment()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="FramebufferRestorePolicy-enum">
<db:title>enum QOpenGLFramebufferObject::FramebufferRestorePolicy</db:title>
<db:enumsynopsis>
<db:enumname>FramebufferRestorePolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>DontRestoreFramebufferBinding</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RestoreFramebufferBindingToDefault</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RestoreFrameBufferBinding</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type is used to configure the behavior related to restoring framebuffer bindings when calling blitFramebuffer().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link></db:emphasis>::DontRestoreFramebufferBinding</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Do not restore the previous framebuffer binding. The caller is responsible for tracking and setting the framebuffer binding as needed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link></db:emphasis>::RestoreFramebufferBindingToDefault</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>After the blit operation, bind the default framebuffer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link></db:emphasis>::RestoreFrameBufferBinding</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Restore the previously bound framebuffer. This is potentially expensive because of the need to query the currently bound framebuffer.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>blitFramebuffer()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="bind">
<db:title>bool QOpenGLFramebufferObject::bind()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>bind</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool bind()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Switches rendering from the default, windowing system provided framebuffer to this framebuffer object. Returns <db:code>true</db:code> upon success, false otherwise.</db:para>
<db:note>
<db:para>If <db:link xlink:href="qopenglframebufferobject.xml#takeTexture">takeTexture</db:link>() was called, a new texture is created and associated with the framebuffer object. This is potentially expensive and changes the context state (the currently bound texture).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobject.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindDefault">
<db:title>[static] bool QOpenGLFramebufferObject::bindDefault()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>bindDefault</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool bindDefault()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Switches rendering back to the default, windowing system provided framebuffer. Returns <db:code>true</db:code> upon success, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobject.xml#bind">bind</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglframebufferobject.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handle">
<db:title>GLuint QOpenGLFramebufferObject::handle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>handle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint handle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the OpenGL framebuffer object handle for this framebuffer object (returned by the <db:code>glGenFrameBuffersEXT()</db:code> function). This handle can be used to attach new images or buffers to the framebuffer. The user is responsible for cleaning up and destroying these objects.</db:para>
</db:section>
<db:section xml:id="hasOpenGLFramebufferBlit">
<db:title>[static] bool QOpenGLFramebufferObject::hasOpenGLFramebufferBlit()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasOpenGLFramebufferBlit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasOpenGLFramebufferBlit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the OpenGL <db:code>GL_EXT_framebuffer_blit</db:code> extension is present on this system; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>blitFramebuffer()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasOpenGLFramebufferObjects">
<db:title>[static] bool QOpenGLFramebufferObject::hasOpenGLFramebufferObjects()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasOpenGLFramebufferObjects</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasOpenGLFramebufferObjects()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the OpenGL <db:code>GL_EXT_framebuffer_object</db:code> extension is present on this system; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="height">
<db:title>int QOpenGLFramebufferObject::height() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>height</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int height() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of the framebuffer object attachments.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QOpenGLFramebufferObject::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the framebuffer object is valid.</db:para>
<db:para>The framebuffer can become invalid if the initialization process fails, the user attaches an invalid buffer to the framebuffer object, or a non-power of two width/height is specified as the texture size if the texture target is <db:code>GL_TEXTURE_2D</db:code>. The non-power of two limitation does not apply if the OpenGL version is 2.0 or higher, or if the GL_ARB_texture_non_power_of_two extension is present.</db:para>
<db:para>The framebuffer can also become invalid if the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> that the framebuffer was created within is destroyed and there are no other shared contexts that can take over ownership of the framebuffer.</db:para>
</db:section>
<db:section xml:id="release">
<db:title>bool QOpenGLFramebufferObject::release()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>release</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool release()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Switches rendering back to the default, windowing system provided framebuffer. Returns <db:code>true</db:code> upon success, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobject.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeTexture">
<db:title>GLuint QOpenGLFramebufferObject::takeTexture()</db:title>
<db:methodsynopsis>
<db:type>GLuint</db:type>
<db:methodname>takeTexture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint takeTexture()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the texture id for the texture attached to this framebuffer object. The ownership of the texture is transferred to the caller.</db:para>
<db:para>If the framebuffer object is currently bound, an implicit <db:link xlink:href="qopenglframebufferobject.xml#release">release</db:link>() will be done. During the next call to <db:link xlink:href="qopenglframebufferobject.xml#bind">bind</db:link>() a new texture will be created.</db:para>
<db:para>If a multisample framebuffer object is used, then there is no texture and the return value from this function will be invalid. Similarly, incomplete framebuffer objects will also return 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobject.xml#texture">texture</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglframebufferobject.xml#bind">bind</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglframebufferobject.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="texture">
<db:title>GLuint QOpenGLFramebufferObject::texture() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>texture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint texture() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the texture id for the texture attached as the default rendering target in this framebuffer object. This texture id can be bound as a normal texture in your own OpenGL code.</db:para>
<db:para>If a multisample framebuffer object is used then the value returned from this function will be invalid.</db:para>
<db:para>When multiple textures are attached, the return value is the ID of the first one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobject.xml#takeTexture">takeTexture</db:link>()</db:member>
<db:member>textures()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toImage">
<db:title>QImage QOpenGLFramebufferObject::toImage(bool <db:emphasis>flipped</db:emphasis> = true) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImage</db:type>
<db:methodname>toImage</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>flipped</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage toImage(bool flipped) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the contents of this framebuffer object as a <db:link xlink:href="qimage.xml">QImage</db:link>.</db:para>
<db:para>If <db:code role="parameter">flipped</db:code> is true the image is flipped from OpenGL coordinates to raster coordinates. If used together with <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link>, <db:code role="parameter">flipped</db:code> should be the opposite of the value of <db:link xlink:href="qopenglpaintdevice.xml#paintFlipped">QOpenGLPaintDevice::paintFlipped</db:link>().</db:para>
<db:para>The returned image has a format of premultiplied ARGB32 or RGB32. The latter is used only when internalTextureFormat() is set to <db:code>GL_RGB</db:code>. Since Qt 5.2 the function will fall back to premultiplied RGBA8888 or RGBx8888 when reading to (A)RGB32 is not supported, and this includes OpenGL ES. Since Qt 5.4 an A2BGR30 image is returned if the internal format is RGB10_A2, and since Qt 5.12 a RGBA64 image is return if the internal format is RGBA16.</db:para>
<db:para>If the rendering in the framebuffer was not done with premultiplied alpha in mind, create a wrapper <db:link xlink:href="qimage.xml">QImage</db:link> with a non-premultiplied format. This is necessary before performing operations like QImage::save() because otherwise the image data would get unpremultiplied, even though it was not premultiplied in the first place. To create such a wrapper without performing a copy of the pixel data, do the following:</db:para>
<db:programlisting language="cpp">QImage fboImage(fbo.toImage());
QImage image(fboImage.constBits(), fboImage.width(), fboImage.height(), QImage::Format_ARGB32);
</db:programlisting>
<db:para>For multisampled framebuffer objects the samples are resolved using the <db:code>GL_EXT_framebuffer_blit</db:code> extension. If the extension is not available, the contents of the returned image is undefined.</db:para>
<db:para>For singlesampled framebuffers the contents is retrieved via <db:code>glReadPixels</db:code>. This is a potentially expensive and inefficient operation. Therefore it is recommended that this function is used as seldom as possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpaintdevice.xml#paintFlipped">QOpenGLPaintDevice::paintFlipped</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>int QOpenGLFramebufferObject::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the framebuffer object attachments.</db:para>
</db:section>
</db:section>
</db:article>
