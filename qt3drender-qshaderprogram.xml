<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QShaderProgram Class</db:title>
<db:subtitle>Qt3DRender::QShaderProgram</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates a Shader Program.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QShaderProgram</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-render-shaderprogram.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A shader program consists of several different shaders, such as vertex and fragment shaders.</db:para>
<db:para>Qt3D will automatically populate a set of default uniforms if they are encountered during the shader instrospection phase.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th rowspan="1">
<db:para>Default Uniform</db:para>
</db:th>
<db:th colspan="2" rowspan="1">
<db:para>Associated Qt3D Parameter name</db:para>
</db:th>
<db:th colspan="3" rowspan="1">
<db:para>GLSL declaration</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>ModelMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>modelMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 modelMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>ViewMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>viewMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 viewMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>ProjectionMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>projectionMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 projectionMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>ModelViewMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>modelView</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 modelView;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>ViewProjectionMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>viewProjectionMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 viewProjectionMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>ModelViewProjectionMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>modelViewProjection  mvp</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 modelViewProjection;  uniform mat4 mvp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>InverseModelMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>inverseModelMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 inverseModelMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>InverseViewMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>inverseViewMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 inverseViewMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>InverseProjectionMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>inverseProjectionMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 inverseProjectionMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>InverseModelViewMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>inverseModelView</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 inverseModelView;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>InverseViewProjectionMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>inverseViewProjectionMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 inverseViewProjectionMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>InverseModelViewProjectionMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>inverseModelViewProjection</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 inverseModelViewProjection;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>ModelNormalMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>modelNormalMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat3 modelNormalMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>ModelViewNormalMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>modelViewNormal</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat3 modelViewNormal;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>ViewportMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>viewportMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 viewportMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>InverseViewportMatrix</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>inverseViewportMatrix</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform mat4 inverseViewportMatrix;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>AspectRatio  (surface width / surface height)</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>aspectRatio</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform float aspectRatio;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>Exposure</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>exposure</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform float exposure;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>Gamma</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>gamma</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform float gamma;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>Time  (in nano seconds)</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>time</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform float time;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>EyePosition</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>eyePosition</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>uniform vec3 eyePosition;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="1">
<db:para>SkinningPalette</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para>skinningPalette[0]</db:para>
</db:td>
<db:td colspan="3" rowspan="1">
<db:para>const int maxJoints = 100;  uniform mat4 skinningPalette[maxJoints];</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ShaderType-enum">
<db:title>enum QShaderProgram::ShaderType</db:title>
<db:enumsynopsis>
<db:enumname>ShaderType</db:enumname>
<db:enumitem>
<db:enumidentifier>Vertex</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Fragment</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TessellationControl</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TessellationEvaluation</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Geometry</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Compute</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum identifies the type of shader used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml">QShaderProgram</db:link></db:emphasis>::Vertex</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Vertex shader</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml">QShaderProgram</db:link></db:emphasis>::Fragment</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Fragment shader</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml">QShaderProgram</db:link></db:emphasis>::TessellationControl</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Tesselation control shader</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml">QShaderProgram</db:link></db:emphasis>::TessellationEvaluation</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Tesselation evaluation shader</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml">QShaderProgram</db:link></db:emphasis>::Geometry</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Geometry shader</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml">QShaderProgram</db:link></db:emphasis>::Compute</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Compute shader</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QShaderProgram::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>NotReady</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ready</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum identifies the status of shader used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml">QShaderProgram</db:link></db:emphasis>::NotReady</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The shader hasn't been compiled and linked yet</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml">QShaderProgram</db:link></db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The shader was successfully compiled</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml">QShaderProgram</db:link></db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An error occurred while compiling the shader</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="computeShaderCode-prop">
<db:title>computeShaderCode : QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>computeShaderCode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">computeShaderCode</db:synopsisinfo>
<db:synopsisinfo role="setter">setComputeShaderCode</db:synopsisinfo>
<db:synopsisinfo role="notifier">computeShaderCodeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the compute shader code used by this shader program.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold">computeShaderCode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setComputeShaderCode</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>computeShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">computeShaderCodeChanged</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>computeShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="fragmentShaderCode-prop">
<db:title>fragmentShaderCode : QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>fragmentShaderCode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">fragmentShaderCode</db:synopsisinfo>
<db:synopsisinfo role="setter">setFragmentShaderCode</db:synopsisinfo>
<db:synopsisinfo role="notifier">fragmentShaderCodeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the fragment shader code used by this shader program.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold">fragmentShaderCode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFragmentShaderCode</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>fragmentShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">fragmentShaderCodeChanged</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>fragmentShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="geometryShaderCode-prop">
<db:title>geometryShaderCode : QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>geometryShaderCode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">geometryShaderCode</db:synopsisinfo>
<db:synopsisinfo role="setter">setGeometryShaderCode</db:synopsisinfo>
<db:synopsisinfo role="notifier">geometryShaderCodeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the geometry shader code used by this shader program.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold">geometryShaderCode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setGeometryShaderCode</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>geometryShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">geometryShaderCodeChanged</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>geometryShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="log-prop">
<db:title>[read-only] log : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>log</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">log</db:synopsisinfo>
<db:synopsisinfo role="notifier">logChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the log of the current shader program. This is useful to diagnose a compilation failure of the shader program.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">log</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">logChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>log</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Status</db:type>
<db:varname>status</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">status</db:synopsisinfo>
<db:synopsisinfo role="notifier">statusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the status of the current shader program.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qshaderprogram.xml#Status-enum">Qt3DRender::QShaderProgram::Status</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderprogram.xml#status">status</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">statusChanged</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qshaderprogram.xml#Status-enum">Qt3DRender::QShaderProgram::Status</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="tessellationControlShaderCode-prop">
<db:title>tessellationControlShaderCode : QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>tessellationControlShaderCode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tessellationControlShaderCode</db:synopsisinfo>
<db:synopsisinfo role="setter">setTessellationControlShaderCode</db:synopsisinfo>
<db:synopsisinfo role="notifier">tessellationControlShaderCodeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the tesselation control shader code used by this shader program.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold">tessellationControlShaderCode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTessellationControlShaderCode</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>tessellationControlShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">tessellationControlShaderCodeChanged</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>tessellationControlShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="tessellationEvaluationShaderCode-prop">
<db:title>tessellationEvaluationShaderCode : QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>tessellationEvaluationShaderCode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tessellationEvaluationShaderCode</db:synopsisinfo>
<db:synopsisinfo role="setter">setTessellationEvaluationShaderCode</db:synopsisinfo>
<db:synopsisinfo role="notifier">tessellationEvaluationShaderCodeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the tesselation evaluation shader code used by this shader program.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold">tessellationEvaluationShaderCode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTessellationEvaluationShaderCode</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>tessellationEvaluationShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">tessellationEvaluationShaderCodeChanged</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>tessellationEvaluationShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="vertexShaderCode-prop">
<db:title>vertexShaderCode : QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>vertexShaderCode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">vertexShaderCode</db:synopsisinfo>
<db:synopsisinfo role="setter">setVertexShaderCode</db:synopsisinfo>
<db:synopsisinfo role="notifier">vertexShaderCodeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the vertex shader code used by this shader program.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold">vertexShaderCode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVertexShaderCode</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>vertexShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">vertexShaderCodeChanged</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>vertexShaderCode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="loadSource">
<db:title>[static] QByteArray QShaderProgram::loadSource(const QUrl &amp;<db:emphasis>sourceUrl</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>loadSource</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>sourceUrl</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray loadSource(const QUrl &amp;sourceUrl)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the shader code loaded from <db:code role="parameter">sourceUrl</db:code>.</db:para>
</db:section>
<db:section xml:id="sceneChangeEvent">
<db:title>[override virtual protected] void QShaderProgram::sceneChangeEvent(const Qt3DCore::QSceneChangePtr &amp;<db:emphasis>change</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>sceneChangeEvent</db:methodname>
<db:methodparam>
<db:type>const Qt3DCore::QSceneChangePtr &amp;</db:type>
<db:parameter>change</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &amp;change) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qt3dcore-qnode.xml#sceneChangeEvent" role="function">QNode::sceneChangeEvent(const Qt3DCore::QSceneChangePtr &amp;change)</db:link>.</db:para>
<db:para>Posts a scene change with parameter <db:code role="parameter">change</db:code>.</db:para>
</db:section>
<db:section xml:id="setShaderCode">
<db:title>void QShaderProgram::setShaderCode(Qt3DRender::QShaderProgram::ShaderType <db:emphasis>type</db:emphasis>, const QByteArray &amp;<db:emphasis>shaderCode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setShaderCode</db:methodname>
<db:methodparam>
<db:type>Qt3DRender::QShaderProgram::ShaderType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>shaderCode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setShaderCode(Qt3DRender::QShaderProgram::ShaderType type, const QByteArray &amp;shaderCode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the shader code for <db:code role="parameter">type</db:code> of shader to the <db:code role="parameter">shaderCode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qshaderprogram.xml#shaderCode">shaderCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shaderCode">
<db:title>QByteArray QShaderProgram::shaderCode(Qt3DRender::QShaderProgram::ShaderType <db:emphasis>type</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>shaderCode</db:methodname>
<db:methodparam>
<db:type>Qt3DRender::QShaderProgram::ShaderType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray shaderCode(Qt3DRender::QShaderProgram::ShaderType type) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the shader code for <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qshaderprogram.xml#setShaderCode">setShaderCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status">
<db:title>Qt3DRender::QShaderProgram::Status QShaderProgram::status() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt3DRender::QShaderProgram::Status</db:type>
<db:methodname>status</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">status</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt3DRender::QShaderProgram::Status status() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the status of the current shader program.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qt3drender-qshaderprogram.xml#status-prop">status</db:link>. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
