<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>const_iterator Class</db:title>
<db:subtitle>QDirListing::const_iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This class was introduced in Qt 6.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>const_iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>const_iterator is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The iterator type returned by <db:link xlink:href="qdirlisting.xml#cbegin">QDirListing::cbegin</db:link>().</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>This is a forward-only, single-pass iterator (you cannot iterate directory entries in reverse order)</db:para>
</db:listitem>
<db:listitem>
<db:para>Can't be copied, only std::move()d.</db:para>
</db:listitem>
<db:listitem>
<db:para> The return value of post-increment on objects that model std::input_iterator is partially-formed (a copy of an iterator that has since been advanced), the only valid operations on such an object are destruction and assignment of a new iterator. Therefore the post-increment operator advances the iterator and returns void.</db:para>
</db:listitem>
<db:listitem>
<db:para>Doesn't allow random access</db:para>
</db:listitem>
<db:listitem>
<db:para>Can be used in ranged-for loops; or with C++20 std::ranges algorithms that don't require random access iterators</db:para>
</db:listitem>
<db:listitem>
<db:para>Dereferencing a valid iterator returns a const DirEntry &amp;</db:para>
</db:listitem>
<db:listitem>
<db:para>(c)<db:link xlink:href="qdirlisting.xml#end">end</db:link>() returns a <db:link xlink:href="qdirlisting-sentinel.xml">QDirListing::sentinel</db:link> that signals the end of the iteration. Dereferencing an iterator that compares equal to <db:link xlink:href="qdirlisting.xml#end">end</db:link>() is undefined behavior</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>The &quot;classical&quot; STL algorithms don't support iterator/sentinel, so you need to use C++20 std::ranges algorithms for <db:link xlink:href="qdirlisting.xml">QDirListing</db:link>, or else a 3rd-party library that provides range-based algorithms in C++17.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirlisting.xml">QDirListing</db:link></db:member>
<db:member><db:link xlink:href="qdirlisting-sentinel.xml">QDirListing::sentinel</db:link></db:member>
<db:member><db:link xlink:href="qdirlisting-direntry.xml">QDirListing::DirEntry</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="pointer-typedef">
<db:title>[alias] const_iterator::pointer</db:title>
<db:para>A typedef for const QDirListing::DirEntry *.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>[alias] const_iterator::reference</db:title>
<db:para>A typedef for const QDirListing::DirEntry &amp;.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-2a">
<db:title>QDirListing::const_iterator::reference const_iterator::operator*() const</db:title>
<db:para>Returns a const QDirListing::DirEntry &amp; of the directory entry this iterator points to.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QDirListing::const_iterator &amp;const_iterator::operator++()</db:title>
<db:para>Pre-increment operator. Advances the iterator and returns a reference to it.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>void const_iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>Post-increment operator.</db:para>
<db:para><db:link xlink:href="qdirlisting-const-iterator.xml">QDirListing::const_iterator</db:link> models C++20 <db:link xlink:href="https://en.cppreference.com/w/cpp/iterator/input_iterator">std::input_iterator</db:link>, that is, it is a move-only, forward-only, single-pass iterator, that doesn't allow random access.</db:para>
<db:para>The return value of post-increment on objects that model std::input_iterator is partially-formed (a copy of an iterator that has since been advanced), the only valid operations on such an object are destruction and assignment of a new iterator. Therefore the post-increment operator advances the iterator and returns void.</db:para>
</db:section>
<db:section xml:id="operator--gt">
<db:title>QDirListing::const_iterator::pointer const_iterator::operator-&gt;() const</db:title>
<db:para>Returns a const QDirListing::DirEntry * to the directory entry this iterator points to.</db:para>
</db:section>
</db:section>
</db:article>
