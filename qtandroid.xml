<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtAndroid Namespace</db:title>
<db:productname>QtAndroidExtras</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Android Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtandroid.xml">QtAndroid</db:link> namespace provides miscellaneous functions to aid Android development.</db:para>
<db:para>This namespace was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtAndroid</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += androidextras</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="BindFlag-enum">
<db:title>[since 5.10] enum QtAndroid::BindFlag</db:title>
<db:bridgehead renderas="sect2">flags QtAndroid::BindFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>BindFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AutoCreate</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DebugUnbind</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotForeground</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AboveClient</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllowOomManagement</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WaivePriority</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Important</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AdjustWithActivity</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExternalService</db:enumidentifier>
<db:enumvalue>-2147483648</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QtAndroid::BindFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum is used with <db:link xlink:href="qtandroid.xml#bindService">QtAndroid::bindService</db:link> to describe the mode in which the binding is performed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>No options.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::AutoCreate</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Automatically creates the service as long as the binding exist. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_AUTO_CREATE">BIND_AUTO_CREATE</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::DebugUnbind</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Include debugging help for mismatched calls to unbind. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_DEBUG_UNBIND">BIND_DEBUG_UNBIND</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::NotForeground</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Don't allow this binding to raise the target service's process to the foreground scheduling priority. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_NOT_FOREGROUND">BIND_NOT_FOREGROUND</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::AboveClient</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Indicates that the client application binding to this service considers the service to be more important than the app itself. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_ABOVE_CLIENT">BIND_ABOVE_CLIENT</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::AllowOomManagement</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Allow the process hosting the bound service to go through its normal memory management. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_ALLOW_OOM_MANAGEMENT">BIND_ALLOW_OOM_MANAGEMENT</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::WaivePriority</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Don't impact the scheduling or memory management priority of the target service's hosting process. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_WAIVE_PRIORITY">BIND_WAIVE_PRIORITY</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::Important</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>This service is assigned a higher priority so that it is available to the client when needed. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_IMPORTANT">BIND_IMPORTANT</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::AdjustWithActivity</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>If binding from an activity, allow the target service's process importance to be raised based on whether the activity is visible to the user. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_ADJUST_WITH_ACTIVITY">BIND_ADJUST_WITH_ACTIVITY</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">BindFlag</db:emphasis>::ExternalService</db:code></db:para>
</db:td>
<db:td><db:code>-2147483648</db:code></db:td>
<db:td>
<db:para>The service being bound is an isolated, external service. See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#BIND_EXTERNAL_SERVICE">BIND_EXTERNAL_SERVICE</db:link> documentation for more details.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.10.</db:para>
<db:para>The <db:code>BindFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;BindFlag&gt;. </db:code>It stores an OR combination of <db:code>BindFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="PermissionResult-enum">
<db:title>[since 5.10] enum QtAndroid::PermissionResult</db:title>
<db:enumsynopsis>
<db:enumname>PermissionResult</db:enumname>
<db:enumitem>
<db:enumidentifier>Granted</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Denied</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to describe the permission status.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">PermissionResult</db:emphasis>::Granted</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The permission was granted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtandroid.xml">QtAndroid</db:link></db:emphasis>::<db:emphasis role="bold">PermissionResult</db:emphasis>::Denied</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The permission was denied.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="PermissionResultCallback-typedef">
<db:title>QtAndroid::PermissionResultCallback</db:title>
<db:typedefsynopsis>
<db:typedefname>PermissionResultCallback</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for std::function&lt;void(const <db:link xlink:href="qtandroid.xml#PermissionResultMap-typedef">PermissionResultMap</db:link> &amp;)&gt;.</db:para>
</db:section>
<db:section xml:id="PermissionResultMap-typedef">
<db:title>QtAndroid::PermissionResultMap</db:title>
<db:typedefsynopsis>
<db:typedefname>PermissionResultMap</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:link xlink:href="qhash.xml#qhash">QHash</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qtandroid.xml#PermissionResult-enum">PermissionResult</db:link>&gt;.</db:para>
</db:section>
<db:section xml:id="Runnable-typedef">
<db:title>QtAndroid::Runnable</db:title>
<db:typedefsynopsis>
<db:typedefname>Runnable</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for std::function&lt;void()&gt;.</db:para>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="androidActivity">
<db:title>[since 5.3] QAndroidJniObject QtAndroid::androidActivity()</db:title>
<db:methodsynopsis>
<db:type>QAndroidJniObject</db:type>
<db:methodname>androidActivity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject androidActivity()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a handle to this application's main Activity</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link></db:member>
<db:member><db:link xlink:href="qtandroid.xml#androidService">androidService</db:link>()</db:member>
<db:member><db:link xlink:href="qtandroid.xml#androidContext">androidContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="androidContext">
<db:title>[since 5.8] QAndroidJniObject QtAndroid::androidContext()</db:title>
<db:methodsynopsis>
<db:type>QAndroidJniObject</db:type>
<db:methodname>androidContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject androidContext()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a handle to this application's main Context. Depending on the nature of the application the Context object is either the main Service or Activity object.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link></db:member>
<db:member><db:link xlink:href="qtandroid.xml#androidActivity">androidActivity</db:link>()</db:member>
<db:member><db:link xlink:href="qtandroid.xml#androidService">androidService</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="androidSdkVersion">
<db:title>[since 5.3] int QtAndroid::androidSdkVersion()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>androidSdkVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int androidSdkVersion()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Android SDK version. This is also known as the API level.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="androidService">
<db:title>[since 5.7] QAndroidJniObject QtAndroid::androidService()</db:title>
<db:methodsynopsis>
<db:type>QAndroidJniObject</db:type>
<db:methodname>androidService</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject androidService()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a handle to this application's main Service</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link></db:member>
<db:member><db:link xlink:href="qtandroid.xml#androidActivity">androidActivity</db:link>()</db:member>
<db:member><db:link xlink:href="qtandroid.xml#androidContext">androidContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindService">
<db:title>[since 5.10] bool QtAndroid::bindService(const QAndroidIntent &amp;<db:emphasis>serviceIntent</db:emphasis>, const QAndroidServiceConnection &amp;<db:emphasis>serviceConnection</db:emphasis>, QtAndroid::BindFlags <db:emphasis>flags</db:emphasis> = BindFlag::None)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>bindService</db:methodname>
<db:methodparam>
<db:type>const QAndroidIntent &amp;</db:type>
<db:parameter>serviceIntent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAndroidServiceConnection &amp;</db:type>
<db:parameter>serviceConnection</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtAndroid::BindFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>BindFlag::None</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool bindService(const QAndroidIntent &amp;serviceIntent, const QAndroidServiceConnection &amp;serviceConnection, QtAndroid::BindFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds the service given by <db:code role="parameter">serviceIntent</db:code>, <db:code role="parameter">serviceConnection</db:code> and <db:code role="parameter">flags</db:code>. The <db:code role="parameter">serviceIntent</db:code> object identifies the service to connect to. The <db:code role="parameter">serviceConnection</db:code> is a listener that receives the information as the service is started and stopped.</db:para>
<db:para>Returns true on success</db:para>
<db:para>See <db:link xlink:href="https://developer.android.com/reference/android/content/Context.html#bindService%28android.content.Intent,%20android.content.ServiceConnection,%20int%29">Android documentation</db:link> documentation for more details.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidintent.xml">QAndroidIntent</db:link></db:member>
<db:member><db:link xlink:href="qandroidserviceconnection.xml">QAndroidServiceConnection</db:link></db:member>
<db:member><db:link xlink:href="qtandroid.xml#BindFlag-enum">BindFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkPermission">
<db:title>[since 5.10] QtAndroid::PermissionResult QtAndroid::checkPermission(const QString &amp;<db:emphasis>permission</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QtAndroid::PermissionResult</db:type>
<db:methodname>checkPermission</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>permission</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtAndroid::PermissionResult checkPermission(const QString &amp;permission)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Checks if the <db:code role="parameter">permission</db:code> was granted or not. This function should be called every time when the application starts for needed permissions, as the users might disable them from Android Settings.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="hideSplashScreen">
<db:title>[since 5.7] void QtAndroid::hideSplashScreen()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hideSplashScreen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hideSplashScreen()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Hides the splash screen immediately.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="hideSplashScreen-1">
<db:title>[since 5.10] void QtAndroid::hideSplashScreen(int <db:emphasis>duration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hideSplashScreen</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void hideSplashScreen(int duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Hides the splash screen, fading it for <db:code role="parameter">duration</db:code> milliseconds.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="requestPermissions">
<db:title>[since 5.10] void QtAndroid::requestPermissions(const QStringList &amp;<db:emphasis>permissions</db:emphasis>, const QtAndroid::PermissionResultCallback &amp;<db:emphasis>callbackFunc</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestPermissions</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>permissions</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtAndroid::PermissionResultCallback &amp;</db:type>
<db:parameter>callbackFunc</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestPermissions(const QStringList &amp;permissions, const QtAndroid::PermissionResultCallback &amp;callbackFunc)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Asynchronously requests <db:code role="parameter">permissions</db:code> to be granted to this application, <db:code role="parameter">callbackFunc</db:code> will be called with the results.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="requestPermissionsSync">
<db:title>[since 5.10] QtAndroid::PermissionResultMap QtAndroid::requestPermissionsSync(const QStringList &amp;<db:emphasis>permissions</db:emphasis>, int <db:emphasis>timeoutMs</db:emphasis> = INT_MAX)</db:title>
<db:methodsynopsis>
<db:type>QtAndroid::PermissionResultMap</db:type>
<db:methodname>requestPermissionsSync</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>permissions</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeoutMs</db:parameter>
<db:initializer>INT_MAX</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtAndroid::PermissionResultMap requestPermissionsSync(const QStringList &amp;permissions, int timeoutMs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Synchronously requests <db:code role="parameter">permissions</db:code> to be granted to this application, waits <db:code role="parameter">timeoutMs</db:code> to complete.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="runOnAndroidThread">
<db:title>[since 5.7] void QtAndroid::runOnAndroidThread(const QtAndroid::Runnable &amp;<db:emphasis>runnable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>runOnAndroidThread</db:methodname>
<db:methodparam>
<db:type>const QtAndroid::Runnable &amp;</db:type>
<db:parameter>runnable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void runOnAndroidThread(const QtAndroid::Runnable &amp;runnable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Posts the given <db:code role="parameter">runnable</db:code> on the android thread. The <db:code role="parameter">runnable</db:code> will be queued and executed on the Android UI thread, unless it called on the Android UI thread, in which case the runnable will be executed immediately.</db:para>
<db:para>This function is useful to set asynchronously properties of objects that must be set on on Android UI thread.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="runOnAndroidThreadSync">
<db:title>[since 5.7] void QtAndroid::runOnAndroidThreadSync(const QtAndroid::Runnable &amp;<db:emphasis>runnable</db:emphasis>, int <db:emphasis>timeoutMs</db:emphasis> = INT_MAX)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>runOnAndroidThreadSync</db:methodname>
<db:methodparam>
<db:type>const QtAndroid::Runnable &amp;</db:type>
<db:parameter>runnable</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeoutMs</db:parameter>
<db:initializer>INT_MAX</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void runOnAndroidThreadSync(const QtAndroid::Runnable &amp;runnable, int timeoutMs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Posts the <db:code role="parameter">runnable</db:code> on the Android UI thread and waits until the runnable is executed, or until <db:code role="parameter">timeoutMs</db:code> has passed</db:para>
<db:para>This function is useful to create objects, or get properties on Android UI thread:</db:para>
<db:programlisting language="cpp">QAndroidJniObject javaControl;
QtAndroid::runOnAndroidThreadSync([&amp;amp;javaControl](){

    // create our Java control on Android UI thread.
    javaControl = QAndroidJniObject(&quot;android/webkit/WebView&quot;,
                                                &quot;(Landroid/content/Context;)V&quot;,
                                                QtAndroid::androidActivity().object&amp;lt;jobject&amp;gt;());
    javaControl.callMethod&amp;lt;void&amp;gt;(&quot;setWebViewClient&quot;,
                                   &quot;(Landroid/webkit/WebViewClient;)V&quot;,
                                   QAndroidJniObject(&quot;android/webkit/WebViewClient&quot;).object());
});

// Continue the execution normally
qDebug() &amp;lt;&amp;lt; javaControl.isValid();
</db:programlisting>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="shouldShowRequestPermissionRationale">
<db:title>[since 5.10] bool QtAndroid::shouldShowRequestPermissionRationale(const QString &amp;<db:emphasis>permission</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>shouldShowRequestPermissionRationale</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>permission</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool shouldShowRequestPermissionRationale(const QString &amp;permission)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if you should show UI with a rationale for requesting a <db:code role="parameter">permission</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="startActivity">
<db:title>[since 5.3] void QtAndroid::startActivity(const QAndroidJniObject &amp;<db:emphasis>intent</db:emphasis>, int <db:emphasis>receiverRequestCode</db:emphasis>, QAndroidActivityResultReceiver *<db:emphasis>resultReceiver</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>startActivity</db:methodname>
<db:methodparam>
<db:type>const QAndroidJniObject &amp;</db:type>
<db:parameter>intent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>receiverRequestCode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAndroidActivityResultReceiver *</db:type>
<db:parameter>resultReceiver</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startActivity(const QAndroidJniObject &amp;intent, int receiverRequestCode, QAndroidActivityResultReceiver *resultReceiver)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the activity given by <db:code role="parameter">intent</db:code> and provides the result asynchronously through the <db:code role="parameter">resultReceiver</db:code> if this is non-null.</db:para>
<db:para>If <db:code role="parameter">resultReceiver</db:code> is null, then the <db:code>startActivity()</db:code> method in the <db:code>androidActivity()</db:code> will be called. Otherwise <db:code>startActivityForResult()</db:code> will be called.</db:para>
<db:para>The <db:code role="parameter">receiverRequestCode</db:code> is a request code unique to the <db:code role="parameter">resultReceiver</db:code>, and will be returned along with the result, making it possible to use the same receiver for more than one intent.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="startIntentSender">
<db:title>[since 5.3] void QtAndroid::startIntentSender(const QAndroidJniObject &amp;<db:emphasis>intentSender</db:emphasis>, int <db:emphasis>receiverRequestCode</db:emphasis>, QAndroidActivityResultReceiver *<db:emphasis>resultReceiver</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>startIntentSender</db:methodname>
<db:methodparam>
<db:type>const QAndroidJniObject &amp;</db:type>
<db:parameter>intentSender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>receiverRequestCode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAndroidActivityResultReceiver *</db:type>
<db:parameter>resultReceiver</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startIntentSender(const QAndroidJniObject &amp;intentSender, int receiverRequestCode, QAndroidActivityResultReceiver *resultReceiver)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the activity given by <db:code role="parameter">intentSender</db:code> and provides the result asynchronously through the <db:code role="parameter">resultReceiver</db:code> if this is non-null.</db:para>
<db:para>If <db:code role="parameter">resultReceiver</db:code> is null, then the <db:code>startIntentSender()</db:code> method in the <db:code>androidActivity()</db:code> will be called. Otherwise <db:code>startIntentSenderForResult()</db:code> will be called.</db:para>
<db:para>The <db:code role="parameter">receiverRequestCode</db:code> is a request code unique to the <db:code role="parameter">resultReceiver</db:code>, and will be returned along with the result, making it possible to use the same receiver for more than one intent.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
</db:section>
</db:article>
