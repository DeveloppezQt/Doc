<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MethodNode QML Type</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Calls a method on the server.</db:para>
<db:para>This type was introduced in QtOpcUa 5.12.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtOpcUa</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtOpcUa 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Node</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This QML element supports calling method nodes on a server. The target object node ID has to be specified by the <db:link xlink:href="qml-qtopcua-methodnode.xml#objectNodeId-prop">objectNodeId</db:link> property.</db:para>
<db:programlisting language="cpp">import QtOpcUa as QtOpcUa

QtOpcUa.MethodNode {
    nodeId : QtOpcUa.NodeId {
        identifier: &quot;s=Example.Method&quot;
        ns: &quot;Example Namespace&quot;
    }
    objectNodeId : QtOpcUa.NodeId {
        identifier: &quot;s=Example.Object&quot;
        ns: &quot;Example Namespace&quot;
    }
    connection: myConnection
 }
 </db:programlisting>
<db:para>The actual function call can be triggered by a signal.</db:para>
<db:programlisting language="cpp">Button {
      text: &quot;Start&quot;
      onClicked: myNode.callMethod
}
</db:programlisting>
<db:para>or by JavaScript</db:para>
<db:programlisting language="cpp">myNode.callMethod()
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="inputArguments-prop">
<db:title>inputArguments : list&lt;MethodArgument&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;MethodArgument&gt;</db:type>
<db:varname>inputArguments</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Arguments to be used when calling the method on the server.</db:para>
<db:para>This example shows how to call a method with two double arguments.</db:para>
<db:programlisting language="cpp">QtOpcUa.MethodNode {
    ...
    inputArguments: [
        QtOpcUa.MethodArgument {
            value: 3
            type: QtOpcUa.Constants.Double
        },
        QtOpcUa.MethodArgument {
            value: 4
            type: QtOpcUa.Constants.Double
        }
    ]
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-methodnode.xml#callMethod-method">callMethod</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="objectNodeId-prop">
<db:title>objectNodeId : OpcUaNode</db:title>
<db:fieldsynopsis>
<db:type>OpcUaNode</db:type>
<db:varname>objectNodeId</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Determines the actual node on which the method is called. It can be a relative or absolute node Id.</db:para>
</db:section>
<db:section xml:id="outputArguments-prop">
<db:title>[read-only] outputArguments : list&lt;var&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;var&gt;</db:type>
<db:varname>outputArguments</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns values from the method call. Depending on the output arguments, this list may contain zero or more values. The <db:link xlink:href="qml-qtopcua-methodnode.xml#resultStatus-prop">resultStatus</db:link> has to be checked separately. In case the method call failed, the list will be empty.</db:para>
<db:programlisting language="cpp">if (node.status.isGood) {
    // print two arguments
    console.log(&quot;Number of return values:&quot;, node.outputArguments.length)
    console.log(&quot;Return value #1:&quot;, node.outputArguments[0])
    console.log(&quot;Return value #2:&quot;, node.outputArguments[1])
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-methodnode.xml#callMethod-method">callMethod</db:link></db:member>
<db:member><db:link xlink:href="qml-qtopcua-methodnode.xml#resultStatus-prop">resultStatus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resultStatus-prop">
<db:title>[read-only] resultStatus : Status</db:title>
<db:fieldsynopsis>
<db:type>Status</db:type>
<db:varname>resultStatus</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Status of the last method call. This property has to be checked to determine if the method call was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-status.xml">Status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type-prop">
<db:title>type : QOpcUa::Types</db:title>
<db:fieldsynopsis>
<db:type>QOpcUa::Types</db:type>
<db:varname>type</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the type of the argument that is expected by the server. The value variant is converted to that type when calling the method. The type has to match the method on the server exactly, otherwise the method call will fail.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-methodnode.xml#callMethod-method">MethodNode::callMethod</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="callMethod-method">
<db:title>callMethod()</db:title>
<db:para>Calls the method on the connected server.</db:para>
</db:section>
</db:section>
</db:article>
