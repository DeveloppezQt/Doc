<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CubeMapTexture QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Defines a cube map texture for use in 3D scenes.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Texture</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick3d-cubemaptexture.xml">CubeMapTexture</db:link> is a Texture that represents a cube map texture. A cube map texture has 6 faces (X+, X-, Y+, Y-, Z+, Z-), where each face is an individual 2D image. <db:link xlink:href="qml-qtquick3d-cubemaptexture.xml">CubeMapTexture</db:link> allows <db:link xlink:href="qml-qtquick3d-custommaterial.xml">custom materials</db:link> and <db:link xlink:href="qml-qtquick3d-effect.xml">post-processing effects</db:link> to work with cube map textures in their shaders. A cube map can also be used to define the scene environment's <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#skyBoxCubeMap-prop">skybox</db:link>.</db:para>
<db:programlisting language="qml">CustomMaterial {
    property TextureInput customTexture: TextureInput {
        texture: CubeMapTexture {
            source: &quot;cubemap.ktx&quot;
        }
    }
    fragmentShader: &quot;shader.frag&quot;
}
</db:programlisting>
<db:para>Here shader.frag can be implemented assuming <db:code>customTexture</db:code> is sampler uniform with the GLSL type a <db:code>samplerCube</db:code>. This means that the <db:code>texture()</db:code> GLSL function takes a <db:code>vec3</db:code> as the texture coordinate for that sampler. If we used <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link>, the type would have been <db:code>sampler2D</db:code>.</db:para>
<db:programlisting language="cpp" role="bad">void MAIN()
{
    vec4 c = texture(customTexture, NORMAL);
    BASE_COLOR = vec4(c.rgb, 1.0);
}
</db:programlisting>
<db:para>Sourcing a Texture from a container with a cubemap only loads face 0 (X+) and results in a 2D texture. Whereas sourcing a <db:link xlink:href="qml-qtquick3d-cubemaptexture.xml">CubeMapTexture</db:link> from the same asset loads all 6 faces and results in a cubemap texture.</db:para>
<db:para><db:link xlink:href="qml-qtquick3d-cubemaptexture.xml">CubeMapTexture</db:link> inherits all its properties from Texture. The important difference is that <db:link xlink:href="qml-qtquick3d-texture.xml#source-prop">source</db:link> must refer to a image file containing a cubemap, or to a list of image files. In practice a single file means a <db:link xlink:href="https://www.khronos.org/ktx/">KTX</db:link> container containing 6 face images.</db:para>
<db:para>Sourcing a <db:link xlink:href="qml-qtquick3d-cubemaptexture.xml">CubeMapTexture</db:link> from 6 individual images can be done in two different ways. Either as a semicolon-separated list of file names in X+, X-, Y+, Y-, Z+, Z- order:</db:para>
<db:programlisting language="qml">CubeMapTexture {
    source: &quot;maps/right.jpg;maps/left.jpg;maps/top.jpg;maps/bottom.jpg;maps/front.jpg;maps/back.jpg&quot;
}
</db:programlisting>
<db:para>or as a string containing a &quot;%p&quot; placeholder, where &quot;%p&quot; will be replaced by the strings &quot;posx&quot;, &quot;negx&quot;, &quot;posy&quot;, &quot;negy&quot;, &quot;posz&quot;, and &quot;negz&quot; to generate the six filenames:</db:para>
<db:programlisting language="qml">CubeMapTexture {
    source: &quot;maps/sky_%p.png&quot;
    // equivalent to:
    // source: &quot;maps/sky_posx.png;maps/sky_negx.png;maps/sky_posy.png;maps/sky_negy.png;maps/sky_posz.png;maps/sky_negz.png&quot;
}
</db:programlisting>
<db:note>
<db:para>Sourcing image data via other means, such as <db:link xlink:href="qml-qtquick3d-texture.xml#sourceItem-prop">sourceItem</db:link> or <db:link xlink:href="qml-qtquick3d-texture.xml#textureData-prop">textureData</db:link> is not supported for <db:link xlink:href="qml-qtquick3d-cubemaptexture.xml">CubeMapTexture</db:link> at the moment.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-effect.xml">Effect</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
