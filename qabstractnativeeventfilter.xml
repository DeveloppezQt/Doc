<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractNativeEventFilter Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractnativeeventfilter.xml">QAbstractNativeEventFilter</db:link> class provides an interface for receiving native events, such as MSG or XCB event structs.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractNativeEventFilter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractNativeEventFilter">
<db:title>QAbstractNativeEventFilter::QAbstractNativeEventFilter()</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractNativeEventFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractNativeEventFilter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a native event filter.</db:para>
<db:para>By default this doesn't do anything. Remember to install it on the application object.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractNativeEventFilter">
<db:title>[virtual] QAbstractNativeEventFilter::~QAbstractNativeEventFilter()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractNativeEventFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractNativeEventFilter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the native event filter.</db:para>
<db:para>This automatically removes it from the application.</db:para>
</db:section>
<db:section xml:id="nativeEventFilter">
<db:title>[pure virtual] bool QAbstractNativeEventFilter::nativeEventFilter(const QByteArray &amp;<db:emphasis>eventType</db:emphasis>, void *<db:emphasis>message</db:emphasis>, qintptr *<db:emphasis>result</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>nativeEventFilter</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>eventType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qintptr *</db:type>
<db:parameter>result</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool nativeEventFilter(const QByteArray &amp;eventType, void *message, qintptr *result) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is called for every native event.</db:para>
<db:note>
<db:para>The filter function here receives native messages, for example, MSG or XCB event structs.</db:para>
</db:note>
<db:para>It is called by the QPA platform plugin. On Windows, it is called by the event dispatcher.</db:para>
<db:para>The type of event <db:code role="parameter">eventType</db:code> is specific to the platform plugin chosen at run-time, and can be used to cast <db:code role="parameter">message</db:code> to the right type.</db:para>
<db:para>On X11, <db:code role="parameter">eventType</db:code> is set to &quot;xcb_generic_event_t&quot;, and the <db:code role="parameter">message</db:code> can be casted to a xcb_generic_event_t pointer.</db:para>
<db:para>On Windows, <db:code role="parameter">eventType</db:code> is set to &quot;windows_generic_MSG&quot; for messages sent to toplevel windows, and &quot;windows_dispatcher_MSG&quot; for system-wide messages such as messages from a registered hot key. In both cases, the <db:code role="parameter">message</db:code> can be casted to a MSG pointer. The <db:code role="parameter">result</db:code> pointer is only used on Windows, and corresponds to the LRESULT pointer.</db:para>
<db:para>On macOS, <db:code role="parameter">eventType</db:code> is set to &quot;mac_generic_NSEvent&quot;, and the <db:code role="parameter">message</db:code> can be casted to an NSEvent pointer.</db:para>
<db:para>In your reimplementation of this function, if you want to filter the <db:code role="parameter">message</db:code> out, i.e. stop it being handled further, return true; otherwise return false.</db:para>
<db:para><db:emphasis role="bold">Linux example</db:emphasis></db:para>
<db:programlisting language="cpp">class MyXcbEventFilter : public QAbstractNativeEventFilter
{
public:
    bool nativeEventFilter(const QByteArray &amp;amp;eventType, void *message, qintptr *) override
    {
        if (eventType == &quot;xcb_generic_event_t&quot;) {
            xcb_generic_event_t* ev = static_cast&amp;lt;xcb_generic_event_t *&amp;gt;(message);
            // ...
        }
        return false;
    }
};
</db:programlisting>
<db:para><db:emphasis role="bold">Windows example</db:emphasis></db:para>
<db:programlisting language="cpp">class MyMSGEventFilter : public QAbstractNativeEventFilter
{
public:
    bool nativeEventFilter(const QByteArray &amp;amp;eventType, void *message, qintptr *) override
    {
        if (eventType == &quot;windows_generic_MSG&quot;) {
            MSG *msg = static_cast&amp;lt;MSG *&amp;gt;(message);
            // ...
        } else if (eventType == &quot;windows_dispatcher_MSG&quot;) {
            MSG *msg = static_cast&amp;lt;MSG *&amp;gt;(message);
            // ...
        }
        return false;
    }
};
</db:programlisting>
<db:para><db:emphasis role="bold">macOS example</db:emphasis></db:para>
<db:para>mycocoaeventfilter.h:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QAbstractNativeEventFilter&amp;gt;

class MyCocoaEventFilter : public QAbstractNativeEventFilter
{
public:
    bool nativeEventFilter(const QByteArray &amp;amp;eventType, void *message, qintptr *) override;
};
</db:programlisting>
<db:para>mycocoaeventfilter.mm:</db:para>
<db:programlisting language="cpp">#include &quot;mycocoaeventfilter.h&quot;

#import &amp;lt;AppKit/AppKit.h&amp;gt;

bool MyCocoaEventFilter::nativeEventFilter(const QByteArray &amp;amp;eventType, void *message, qintptr *)
{
    if (eventType == &quot;mac_generic_NSEvent&quot;) {
        NSEvent *event = static_cast&amp;lt;NSEvent *&amp;gt;(message);
        if ([event type] == NSKeyDown) {
            // Handle key event
            qDebug() &amp;lt;&amp;lt; QString::fromNSString([event characters]);
        }
    }
    return false;
}
</db:programlisting>
<db:para>myapp.pro:</db:para>
<db:programlisting language="cpp">HEADERS += mycocoaeventfilter.h
OBJECTIVE_SOURCES += mycocoaeventfilter.mm
LIBS += -framework AppKit
</db:programlisting>
</db:section>
</db:section>
</db:article>
