<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QSpinBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> class provides a spin box widget.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSpinBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractspinbox.xml" xlink:role="class">QAbstractSpinBox</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSpinBox is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qspinbox.xml">QSpinBox</db:link> is designed to handle integers and discrete sets of values (e.g., month names); use <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> for floating point values.</db:para>
<db:para><db:link xlink:href="qspinbox.xml">QSpinBox</db:link> allows the user to choose a value by clicking the up/down buttons or pressing up/down on the keyboard to increase/decrease the value currently displayed. The user can also type the value in manually. The spin box supports integer values but can be extended to use different strings with <db:link xlink:href="qspinbox.xml#validate">validate</db:link>(), <db:link xlink:href="qspinbox.xml#textFromValue">textFromValue</db:link>() and <db:link xlink:href="qspinbox.xml#valueFromText">valueFromText</db:link>().</db:para>
<db:para>Every time the value changes <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> emits two <db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>() signals, one providing an int and the other a <db:link xlink:href="qstring.xml">QString</db:link>. The <db:link xlink:href="qstring.xml">QString</db:link> overload provides the value with both prefix() and suffix(). The current value can be fetched with value() and set with setValue().</db:para>
<db:para>Clicking the up/down buttons or using the keyboard accelerator's up and down arrows will increase or decrease the current value in steps of size singleStep(). If you want to change this behaviour you can reimplement the virtual function <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(). The minimum and maximum value and the step size can be set using one of the constructors, and can be changed later with setMinimum(), setMaximum() and setSingleStep().</db:para>
<db:para>Most spin boxes are directional, but <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> can also operate as a circular spin box, i.e. if the range is 0-99 and the current value is 99, clicking &quot;up&quot; will give 0 if wrapping() is set to true. Use setWrapping() if you want circular behavior.</db:para>
<db:para>The displayed value can be prepended and appended with arbitrary strings indicating, for example, currency or the unit of measurement. See setPrefix() and setSuffix(). The text in the spin box is retrieved with text() (which includes any prefix() and suffix()), or with cleanText() (which has no prefix(), no suffix() and no leading or trailing whitespace).</db:para>
<db:para>It is often desirable to give the user a special (often default) choice in addition to the range of numeric values. See setSpecialValueText() for how to do this with <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-spinbox.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista spin box</db:para>
</db:td>
<db:td>
<db:para>A spin box shown in the <db:link xlink:href="gallery-windowsvista.xml">Windows Vista widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-spinbox.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion spin box</db:para>
</db:td>
<db:td>
<db:para>A spin box shown in the <db:link xlink:href="gallery-fusion.xml">Fusion widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-spinbox.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh spin box</db:para>
</db:td>
<db:td>
<db:para>A spin box shown in the <db:link xlink:href="gallery-macintosh.xml">Macintosh widget style</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="subclassing-qspinbox">
<db:title>Subclassing QSpinBox</db:title>
<db:para>If using prefix(), suffix(), and specialValueText() don't provide enough control, you subclass <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> and reimplement <db:link xlink:href="qspinbox.xml#valueFromText">valueFromText</db:link>() and <db:link xlink:href="qspinbox.xml#textFromValue">textFromValue</db:link>(). For example, here's the code for a custom spin box that allows the user to enter icon sizes (e.g., &quot;32 x 32&quot;):</db:para>
<db:programlisting language="cpp">int IconSizeSpinBox::valueFromText(const QString &amp;text) const
{
    QRegExp regExp(tr(&quot;(\\d+)(\\s*[xx]\\s*\\d+)?&quot;));

    if (regExp.exactMatch(text)) {
        return regExp.cap(1).toInt();
    } else {
        return 0;
    }
}

QString IconSizeSpinBox::textFromValue(int value) const
{
    return tr(&quot;%1 x %1&quot;).arg(value);
}
</db:programlisting>
<db:para>See the <db:link xlink:href="qtwidgets-widgets-icons-example.xml">Icons</db:link> example for the full source code.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:member>
<db:member><db:link xlink:href="qslider.xml">QSlider</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-spinboxes-example.xml">Spin Boxes Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSpinBox">
<db:title>[explicit] QSpinBox::QSpinBox(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a spin box with 0 as minimum value and 99 as maximum value, a step value of 1. The value is initially set to 0. It is parented to <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setMinimum()</db:link></db:member>
<db:member><db:link xlink:href="">setMaximum()</db:link></db:member>
<db:member><db:link xlink:href="">setSingleStep()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSpinBox">
<db:title>[virtual noexcept] QSpinBox::~QSpinBox()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSpinBox::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#event" role="function">QAbstractSpinBox::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="fixup">
<db:title>[override virtual protected] void QSpinBox::fixup(QString &amp;<db:emphasis>input</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#fixup" role="function">QAbstractSpinBox::fixup(QString &amp;input) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setRange">
<db:title>void QSpinBox::setRange(int <db:emphasis>minimum</db:emphasis>, int <db:emphasis>maximum</db:emphasis>)</db:title>
<db:para>Convenience function to set the <db:code role="parameter">minimum</db:code>, and <db:code role="parameter">maximum</db:code> values with a single function call.</db:para>
<db:programlisting language="cpp">setRange(minimum, maximum);
</db:programlisting>
<db:para>is equivalent to:</db:para>
<db:programlisting language="cpp">setMinimum(minimum);
setMaximum(maximum);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>minimum</db:member>
<db:member>maximum</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFromValue">
<db:title>[virtual protected] QString QSpinBox::textFromValue(int <db:emphasis>value</db:emphasis>) const</db:title>
<db:para>This virtual function is used by the spin box whenever it needs to display the given <db:code role="parameter">value</db:code>. The default implementation returns a string containing <db:code role="parameter">value</db:code> printed in the standard way using QWidget::locale().toString(), but with the thousand separator removed. Reimplementations may return anything. (See the example in the detailed description.)</db:para>
<db:para>Note: <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> does not call this function for specialValueText() and that neither prefix() nor suffix() should be included in the return value.</db:para>
<db:para>If you reimplement this, you may also need to reimplement <db:link xlink:href="qspinbox.xml#valueFromText">valueFromText</db:link>() and <db:link xlink:href="qspinbox.xml#validate">validate</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#valueFromText">valueFromText</db:link>()</db:member>
<db:member><db:link xlink:href="qspinbox.xml#validate">validate</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#groupSeparator">QLocale::groupSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validate">
<db:title>[override virtual protected] QValidator::State QSpinBox::validate(QString &amp;<db:emphasis>text</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#validate" role="function">QAbstractSpinBox::validate(QString &amp;input, int &amp;pos) const</db:link>.</db:para>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QSpinBox::valueChanged(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the spin box's value is changed. The new value's integer value is passed in <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="valueChanged-1">
<db:title>void QSpinBox::valueChanged(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The new value is passed in <db:code role="parameter">text</db:code> with prefix() and suffix().</db:para>
</db:section>
<db:section xml:id="valueFromText">
<db:title>[virtual protected] int QSpinBox::valueFromText(const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:para>This virtual function is used by the spin box whenever it needs to interpret <db:code role="parameter">text</db:code> entered by the user as a value.</db:para>
<db:para>Subclasses that need to display spin box values in a non-numeric way need to reimplement this function.</db:para>
<db:para>Note: <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> handles specialValueText() separately; this function is only concerned with the other values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#textFromValue">textFromValue</db:link>()</db:member>
<db:member><db:link xlink:href="qspinbox.xml#validate">validate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
