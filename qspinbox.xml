<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSpinBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> class provides a spin box widget.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSpinBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractspinbox.xml" xlink:role="class">QAbstractSpinBox</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSpinBox is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qspinbox.xml">QSpinBox</db:link> is designed to handle integers and discrete sets of values (e.g., month names); use <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> for floating point values.</db:para>
<db:para><db:link xlink:href="qspinbox.xml">QSpinBox</db:link> allows the user to choose a value by clicking the up/down buttons or pressing up/down on the keyboard to increase/decrease the value currently displayed. The user can also type the value in manually. The spin box supports integer values but can be extended to use different strings with <db:link xlink:href="qspinbox.xml#validate">validate</db:link>(), <db:link xlink:href="qspinbox.xml#textFromValue">textFromValue</db:link>() and <db:link xlink:href="qspinbox.xml#valueFromText">valueFromText</db:link>().</db:para>
<db:para>Every time the value changes <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> emits two <db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>() signals, one providing an int and the other a <db:link xlink:href="qstring.xml">QString</db:link>. The <db:link xlink:href="qstring.xml">QString</db:link> overload provides the value with both <db:link xlink:href="qspinbox.xml#prefix-prop">prefix</db:link>() and <db:link xlink:href="qspinbox.xml#suffix-prop">suffix</db:link>(). The current value can be fetched with <db:link xlink:href="qspinbox.xml#value-prop">value</db:link>() and set with <db:link xlink:href="qspinbox.xml#value-prop">setValue</db:link>().</db:para>
<db:para>Clicking the up/down buttons or using the keyboard accelerator's up and down arrows will increase or decrease the current value in steps of size <db:link xlink:href="qspinbox.xml#singleStep-prop">singleStep</db:link>(). If you want to change this behaviour you can reimplement the virtual function <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(). The minimum and maximum value and the step size can be set using one of the constructors, and can be changed later with <db:link xlink:href="qspinbox.xml#minimum-prop">setMinimum</db:link>(), <db:link xlink:href="qspinbox.xml#maximum-prop">setMaximum</db:link>() and <db:link xlink:href="qspinbox.xml#singleStep-prop">setSingleStep</db:link>().</db:para>
<db:para>Most spin boxes are directional, but <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> can also operate as a circular spin box, i.e. if the range is 0-99 and the current value is 99, clicking &quot;up&quot; will give 0 if <db:link xlink:href="qabstractspinbox.xml#wrapping-prop">wrapping</db:link>() is set to true. Use <db:link xlink:href="qabstractspinbox.xml#wrapping-prop">setWrapping</db:link>() if you want circular behavior.</db:para>
<db:para>The displayed value can be prepended and appended with arbitrary strings indicating, for example, currency or the unit of measurement. See <db:link xlink:href="qspinbox.xml#prefix-prop">setPrefix</db:link>() and <db:link xlink:href="qspinbox.xml#suffix-prop">setSuffix</db:link>(). The text in the spin box is retrieved with <db:link xlink:href="qabstractspinbox.xml#text-prop">text</db:link>() (which includes any <db:link xlink:href="qspinbox.xml#prefix-prop">prefix</db:link>() and <db:link xlink:href="qspinbox.xml#suffix-prop">suffix</db:link>()), or with <db:link xlink:href="qspinbox.xml#cleanText-prop">cleanText</db:link>() (which has no <db:link xlink:href="qspinbox.xml#prefix-prop">prefix</db:link>(), no <db:link xlink:href="qspinbox.xml#suffix-prop">suffix</db:link>() and no leading or trailing whitespace).</db:para>
<db:para>It is often desirable to give the user a special (often default) choice in addition to the range of numeric values. See <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">setSpecialValueText</db:link>() for how to do this with <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-spinbox.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista spin box</db:para>
</db:td>
<db:td>
<db:para>A spin box shown in the <db:link xlink:href="gallery-windowsvista.xml">Windows Vista widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-spinbox.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion spin box</db:para>
</db:td>
<db:td>
<db:para>A spin box shown in the <db:link xlink:href="gallery-fusion.xml">Fusion widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-spinbox.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh spin box</db:para>
</db:td>
<db:td>
<db:para>A spin box shown in the <db:link xlink:href="gallery-macintosh.xml">Macintosh widget style</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="subclassing-qspinbox">
<db:title>Subclassing QSpinBox</db:title>
<db:para>If using <db:link xlink:href="qspinbox.xml#prefix-prop">prefix</db:link>(), <db:link xlink:href="qspinbox.xml#suffix-prop">suffix</db:link>(), and <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>() don't provide enough control, you subclass <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> and reimplement <db:link xlink:href="qspinbox.xml#valueFromText">valueFromText</db:link>() and <db:link xlink:href="qspinbox.xml#textFromValue">textFromValue</db:link>(). For example, here's the code for a custom spin box that allows the user to enter icon sizes (e.g., &quot;32 x 32&quot;):</db:para>
<db:programlisting language="cpp">int IconSizeSpinBox::valueFromText(const QString &amp;text) const
{
    static const QRegularExpression regExp(tr(&quot;(\\d+)(\\s*[xx]\\s*\\d+)?&quot;));
    Q_ASSERT(regExp.isValid());

    const QRegularExpressionMatch match = regExp.match(text);
    if (match.isValid())
        return match.captured(1).toInt();
    return 0;
}

QString IconSizeSpinBox::textFromValue(int value) const
{
    return tr(&quot;%1 x %1&quot;).arg(value);
}
</db:programlisting>
<db:para>See the <db:link xlink:href="qtwidgets-widgets-icons-example.xml">Icons</db:link> example for the full source code.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:member>
<db:member><db:link xlink:href="qslider.xml">QSlider</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-spinboxes-example.xml">Spin Boxes Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cleanText-prop">
<db:title>[read-only] cleanText : const QString</db:title>
<db:para>This property holds the text of the spin box excluding any prefix, suffix, or leading or trailing whitespace.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">cleanText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractspinbox.xml#text-prop">text</db:link></db:member>
<db:member><db:link xlink:href="qspinbox.xml#prefix-prop">QSpinBox::prefix</db:link></db:member>
<db:member><db:link xlink:href="qspinbox.xml#suffix-prop">QSpinBox::suffix</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayIntegerBase-prop">
<db:title>[since 5.2] displayIntegerBase : int</db:title>
<db:para>This property holds the base used to display the value of the spin box</db:para>
<db:para>The default displayIntegerBase value is 10.</db:para>
<db:para>This property was introduced in Qt 5.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">displayIntegerBase</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDisplayIntegerBase</db:emphasis>(<db:type>int</db:type> <db:emphasis>base</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#textFromValue">textFromValue</db:link>()</db:member>
<db:member><db:link xlink:href="qspinbox.xml#valueFromText">valueFromText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximum-prop">
<db:title>maximum : int</db:title>
<db:para>This property holds the maximum value of the spin box</db:para>
<db:para>When setting this property the minimum is adjusted if necessary, to ensure that the range remains valid.</db:para>
<db:para>The default maximum value is 99.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maximum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximum</db:emphasis>(<db:type>int</db:type> <db:emphasis>max</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#setRange">setRange</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimum-prop">
<db:title>minimum : int</db:title>
<db:para>This property holds the minimum value of the spin box</db:para>
<db:para>When setting this property the <db:link xlink:href="qspinbox.xml#maximum-prop">maximum</db:link> is adjusted if necessary to ensure that the range remains valid.</db:para>
<db:para>The default minimum value is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minimum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimum</db:emphasis>(<db:type>int</db:type> <db:emphasis>min</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#setRange">setRange</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prefix-prop">
<db:title>prefix : QString</db:title>
<db:para>This property holds the spin box's prefix</db:para>
<db:para>The prefix is prepended to the start of the displayed value. Typical use is to display a unit of measurement or a currency symbol. For example:</db:para>
<db:programlisting language="cpp">sb-&gt;setPrefix(&quot;$&quot;);
</db:programlisting>
<db:para>To turn off the prefix display, set this property to an empty string. The default is no prefix. The prefix is not displayed when <db:link xlink:href="qspinbox.xml#value-prop">value</db:link>() == <db:link xlink:href="qspinbox.xml#minimum-prop">minimum</db:link>() and <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>() is set.</db:para>
<db:para>If no prefix is set, prefix() returns an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">prefix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPrefix</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>prefix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#suffix-prop">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qspinbox.xml#suffix-prop">setSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">setSpecialValueText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleStep-prop">
<db:title>singleStep : int</db:title>
<db:para>This property holds the step value</db:para>
<db:para>When the user uses the arrows to change the spin box's value the value will be incremented/decremented by the amount of the singleStep. The default value is 1. Setting a singleStep value of less than 0 does nothing.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">singleStep</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSingleStep</db:emphasis>(<db:type>int</db:type> <db:emphasis>val</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="suffix-prop">
<db:title>suffix : QString</db:title>
<db:para>This property holds the suffix of the spin box</db:para>
<db:para>The suffix is appended to the end of the displayed value. Typical use is to display a unit of measurement or a currency symbol. For example:</db:para>
<db:programlisting language="cpp">sb-&gt;setSuffix(&quot; km&quot;);
</db:programlisting>
<db:para>To turn off the suffix display, set this property to an empty string. The default is no suffix. The suffix is not displayed for the <db:link xlink:href="qspinbox.xml#minimum-prop">minimum</db:link>() if <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>() is set.</db:para>
<db:para>If no suffix is set, suffix() returns an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">suffix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSuffix</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>suffix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#prefix-prop">prefix</db:link>()</db:member>
<db:member><db:link xlink:href="qspinbox.xml#prefix-prop">setPrefix</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">setSpecialValueText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value-prop">
<db:title>value : int</db:title>
<db:para>This property holds the value of the spin box</db:para>
<db:para>setValue() will emit <db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>() if the new value is different from the old one. The value property has a second notifier signal which includes the spin box's prefix and suffix.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">value</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setValue</db:emphasis>(<db:type>int</db:type> <db:emphasis>val</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>i</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qspinbox.xml#valueChanged-1">valueChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSpinBox">
<db:title>[explicit] QSpinBox::QSpinBox(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a spin box with 0 as minimum value and 99 as maximum value, a step value of 1. The value is initially set to 0. It is parented to <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#minimum-prop">setMinimum</db:link>()</db:member>
<db:member><db:link xlink:href="qspinbox.xml#maximum-prop">setMaximum</db:link>()</db:member>
<db:member><db:link xlink:href="qspinbox.xml#singleStep-prop">setSingleStep</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSpinBox">
<db:title>[virtual noexcept] QSpinBox::~QSpinBox()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSpinBox::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#event" role="function">QAbstractSpinBox::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="fixup">
<db:title>[override virtual protected] void QSpinBox::fixup(QString &amp;<db:emphasis>input</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#fixup" role="function">QAbstractSpinBox::fixup(QString &amp;input) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setRange">
<db:title>void QSpinBox::setRange(int <db:emphasis>minimum</db:emphasis>, int <db:emphasis>maximum</db:emphasis>)</db:title>
<db:para>Convenience function to set the <db:code role="parameter">minimum</db:code>, and <db:code role="parameter">maximum</db:code> values with a single function call.</db:para>
<db:programlisting language="cpp">setRange(minimum, maximum);
</db:programlisting>
<db:para>is equivalent to:</db:para>
<db:programlisting language="cpp">setMinimum(minimum);
setMaximum(maximum);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#minimum-prop">minimum</db:link></db:member>
<db:member><db:link xlink:href="qspinbox.xml#maximum-prop">maximum</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFromValue">
<db:title>[virtual protected] QString QSpinBox::textFromValue(int <db:emphasis>value</db:emphasis>) const</db:title>
<db:para>This virtual function is used by the spin box whenever it needs to display the given <db:code role="parameter">value</db:code>. The default implementation returns a string containing <db:code role="parameter">value</db:code> printed in the standard way using <db:link xlink:href="qwidget.xml#locale-prop">QWidget::locale</db:link>().toString(), but with the thousand separator removed unless <db:link xlink:href="qabstractspinbox.xml#showGroupSeparator-prop">setGroupSeparatorShown</db:link>() is set. Reimplementations may return anything. (See the example in the detailed description.)</db:para>
<db:para>Note: <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> does not call this function for <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>() and that neither <db:link xlink:href="qspinbox.xml#prefix-prop">prefix</db:link>() nor <db:link xlink:href="qspinbox.xml#suffix-prop">suffix</db:link>() should be included in the return value.</db:para>
<db:para>If you reimplement this, you may also need to reimplement <db:link xlink:href="qspinbox.xml#valueFromText">valueFromText</db:link>() and <db:link xlink:href="qspinbox.xml#validate">validate</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#valueFromText">valueFromText</db:link>()</db:member>
<db:member><db:link xlink:href="qspinbox.xml#validate">validate</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#groupSeparator">QLocale::groupSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validate">
<db:title>[override virtual protected] QValidator::State QSpinBox::validate(QString &amp;<db:emphasis>text</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#validate" role="function">QAbstractSpinBox::validate(QString &amp;input, int &amp;pos) const</db:link>.</db:para>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QSpinBox::valueChanged(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the spin box's value is changed. The new value's integer value is passed in <db:code role="parameter">i</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qspinbox.xml#value-prop">value</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="valueChanged-1">
<db:title>void QSpinBox::valueChanged(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The new value is passed in <db:code role="parameter">text</db:code> with <db:link xlink:href="qspinbox.xml#prefix-prop">prefix</db:link>() and <db:link xlink:href="qspinbox.xml#suffix-prop">suffix</db:link>().</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qspinbox.xml#value-prop">value</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="valueFromText">
<db:title>[virtual protected] int QSpinBox::valueFromText(const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:para>This virtual function is used by the spin box whenever it needs to interpret <db:code role="parameter">text</db:code> entered by the user as a value.</db:para>
<db:para>Subclasses that need to display spin box values in a non-numeric way need to reimplement this function.</db:para>
<db:para>Note: <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> handles <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>() separately; this function is only concerned with the other values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml#textFromValue">textFromValue</db:link>()</db:member>
<db:member><db:link xlink:href="qspinbox.xml#validate">validate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
