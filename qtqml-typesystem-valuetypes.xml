<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Value Types</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of QML value types.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QML supports built-in and custom value types.</db:para>
<db:para>A <db:emphasis>value type</db:emphasis> is one that is passed by value rather than by reference, such as an int or a string. This contrasts with <db:link xlink:href="qtqml-typesystem-topic.xml#qml-object-types">QML Object Types</db:link>. Object types are passed by reference. If you assign an instance of an object type to two different properties, both properties carry the same value. Modifying the object is reflected in both properties. If you assign an instance of a value type to two different properties, the properties carry separate values. If you modify one of them, the other one stays the same. Unlike an object type, a value type cannot be used to declare QML objects: it is not possible, for example, to declare an int{} object or a size{} object.</db:para>
<db:para>Value types can be used to refer to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A single value (e.g. <db:link xlink:href="qml-int.xml">int</db:link> refers to a single number)</db:para>
</db:listitem>
<db:listitem>
<db:para>A value that contains properties and methods (e.g. <db:link xlink:href="qml-size.xml">size</db:link> refers to a value with width and height properties)</db:para>
</db:listitem>
<db:listitem>
<db:para>The generic type <db:link xlink:href="qml-var.xml">var</db:link>. It can hold values of any other type but is itself a value type.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When a variable or property holds a value type and it is assigned to another variable or property, then a copy of the value is made.</db:para>
<db:section xml:id="available-value-types">
<db:title>Available Value Types</db:title>
<db:para>Some value types are supported by the engine by default and do not require an <db:link xlink:href="qtqml-syntax-imports.xml">import statement</db:link> to be used, while others do require the client to import the module which provides them. All of the value types listed below may be used as a property type in a QML document, with the following exceptions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>void, which marks the absence of a value</db:para>
</db:listitem>
<db:listitem>
<db:para>list must be used in conjunction with an object or value type as element</db:para>
</db:listitem>
<db:listitem>
<db:para>enumeration cannot be used directly as the enumeration must be defined by a registered QML object type</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="built-in-value-types-provided-by-the-qml-language">
<db:title>Built-in Value Types Provided By The QML Language</db:title>
<db:para>The built-in value types supported natively in the QML language are listed below: <db:variablelist role="qmlvaluetypes">
<db:varlistentry>
<db:term><db:link xlink:href="qml-bool.xml" xlink:role="">bool</db:link></db:term>
<db:listitem>
<db:para>a binary true/false value.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-date.xml" xlink:role="">date</db:link></db:term>
<db:listitem>
<db:para>a date value.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-double.xml" xlink:role="">double</db:link></db:term>
<db:listitem>
<db:para>a number with a decimal point, stored in double precision.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-enumeration.xml" xlink:role="">enumeration</db:link></db:term>
<db:listitem>
<db:para>a named enumeration value.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-int.xml" xlink:role="">int</db:link></db:term>
<db:listitem>
<db:para>a whole number, e.g. 0, 10, or -20.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-list.xml" xlink:role="">list</db:link></db:term>
<db:listitem>
<db:para>a list of QML objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-real.xml" xlink:role="">real</db:link></db:term>
<db:listitem>
<db:para>a number with a decimal point.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-string.xml" xlink:role="">string</db:link></db:term>
<db:listitem>
<db:para>A free form text string.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-url.xml" xlink:role="">url</db:link></db:term>
<db:listitem>
<db:para>a resource locator.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-var.xml" xlink:role="">var</db:link></db:term>
<db:listitem>
<db:para>a generic property type.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-variant.xml" xlink:role="">variant</db:link></db:term>
<db:listitem>
<db:para>a generic property type.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-void.xml" xlink:role="">void</db:link></db:term>
<db:listitem>
<db:para>The empty value type.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:para>
</db:section>
<db:section xml:id="value-types-provided-by-qml-modules">
<db:title>Value Types Provided By QML Modules</db:title>
<db:para>QML modules may extend the QML language with more value types.</db:para>
<db:para>The value types provided by the QtQml module are: <db:variablelist role="qtqmlvaluetypes">
<db:varlistentry>
<db:term><db:link xlink:href="qml-point.xml" xlink:role="">point</db:link></db:term>
<db:listitem>
<db:para>a value with x and y attributes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-rect.xml" xlink:role="">rect</db:link></db:term>
<db:listitem>
<db:para>a value with x, y, width and height attributes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-size.xml" xlink:role="">size</db:link></db:term>
<db:listitem>
<db:para>a value with width and height attributes.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:para>
<db:para>The value types provided by the QtQuick module are: <db:variablelist role="qtquickvaluetypes">
<db:varlistentry>
<db:term><db:link xlink:href="qml-color.xml" xlink:role="">color</db:link></db:term>
<db:listitem>
<db:para>an ARGB color value.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-font.xml" xlink:role="">font</db:link></db:term>
<db:listitem>
<db:para>a font value with the properties of QFont.  The font type refers to a font value with the properties of QFont.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-matrix4x4.xml" xlink:role="">matrix4x4</db:link></db:term>
<db:listitem>
<db:para>A matrix4x4 type is a 4-row and 4-column matrix.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-quaternion.xml" xlink:role="">quaternion</db:link></db:term>
<db:listitem>
<db:para>A quaternion type has scalar, x, y, and z attributes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-vector2d.xml" xlink:role="">vector2d</db:link></db:term>
<db:listitem>
<db:para>A vector2d type has x and y attributes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-vector3d.xml" xlink:role="">vector3d</db:link></db:term>
<db:listitem>
<db:para>a value with x, y, and z attributes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-vector4d.xml" xlink:role="">vector4d</db:link></db:term>
<db:listitem>
<db:para>A vector4d type has x, y, z and w attributes.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:para>
<db:para>The <db:link xlink:href="qml-qtqml-qt.xml">Qt</db:link> global object provides useful functions for manipulating values of value types.</db:para>
<db:para>You may define your own value types as described in <db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link>. In order to use types provided by a particular QML module, clients must import that module in their QML documents.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-change-behavior-for-value-types">
<db:title>Property Change Behavior for Value Types</db:title>
<db:para>Some value types have properties: for example, the <db:link xlink:href="qml-font.xml">font</db:link> type has pixelSize, family and bold properties. Unlike properties of <db:link xlink:href="qtqml-typesystem-topic.xml#qml-object-types">object types</db:link>, properties of value types do not provide their own property change signals. It is only possible to create a property change signal handler for the value type property itself:</db:para>
<db:programlisting language="cpp">Text {
    // invalid!
    onFont.pixelSizeChanged: doSomething()

    // also invalid!
    font {
        onPixelSizeChanged: doSomething()
    }

    // but this is ok
    onFontChanged: doSomething()
}
</db:programlisting>
<db:para>Be aware, however, that a property change signal for a value type is emitted whenever <db:emphasis>any</db:emphasis> of its attributes have changed, as well as when the property itself changes. Take the following code, for example:</db:para>
<db:programlisting language="qml">Text {
    onFontChanged: console.log(&quot;font changed&quot;)

    Text { id: otherText }

    focus: true

    // changing any of the font attributes, or reassigning the property
    // to a different font value, will invoke the onFontChanged handler
    Keys.onDigit1Pressed: font.pixelSize += 1
    Keys.onDigit2Pressed: font.b = !font.b
    Keys.onDigit3Pressed: font = otherText.font
}
</db:programlisting>
<db:para>In contrast, properties of an <db:link xlink:href="qtqml-typesystem-topic.xml#qml-object-types">object type</db:link> emit their own property change signals, and a property change signal handler for an object-type property is only invoked when the property is reassigned to a different object value.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-topic.xml">The QML Type System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
