<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlaceMatchRequest Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplacematchrequest.xml">QPlaceMatchRequest</db:link> class is used to find places from one manager that match those from another. It represents a set of request parameters.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlaceMatchRequest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlaceMatchRequest is part of <db:simplelist><db:member>QtLocation-places</db:member><db:member>QtLocation-places-requests</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Places from another manager that may have corresponding/matching places in the current manager are assigned using <db:link xlink:href="qplacematchrequest.xml#setPlaces">setPlaces</db:link>() or <db:link xlink:href="qplacematchrequest.xml#setResults">setResults</db:link>(). A set of further parameters are specified which determines the criteria for matching.</db:para>
<db:para>The typical key for matching is the <db:link xlink:href="qplacematchrequest.xml#AlternativeId-var">QPlaceMatchRequest::AlternativeId</db:link>, the value is an alternative identifier attribute type of the format x_id_&lt;provider name&gt; for example x_id_here. The provider name is name supplied to the <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> instance.</db:para>
<db:para>See <db:link xlink:href="location-places-cpp.xml#matching-places-between-managers">Matching places between managers</db:link> for an example on how to use a match request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacematchreply.xml">QPlaceMatchReply</db:link></db:member>
<db:member><db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlaceMatchRequest">
<db:title>QPlaceMatchRequest::QPlaceMatchRequest()</db:title>
<db:para>Default constructor. Constructs a new request object.</db:para>
</db:section>
<db:section xml:id="QPlaceMatchRequest-1">
<db:title>QPlaceMatchRequest::QPlaceMatchRequest(const QPlaceMatchRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPlaceMatchRequest">
<db:title>[noexcept] QPlaceMatchRequest::~QPlaceMatchRequest()</db:title>
<db:para>Destroys the request object.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QPlaceMatchRequest::clear()</db:title>
<db:para>Clears the match request.</db:para>
</db:section>
<db:section xml:id="parameters">
<db:title>QVariantMap QPlaceMatchRequest::parameters() const</db:title>
<db:para>Returns the parameters for matching places.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacematchrequest.xml#setParameters">setParameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="places">
<db:title>QList&lt;QPlace&gt; QPlaceMatchRequest::places() const</db:title>
<db:para>Returns a list of places which are to be matched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacematchrequest.xml#setPlaces">setPlaces</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setParameters">
<db:title>void QPlaceMatchRequest::setParameters(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">parameters</db:code> for matching places.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacematchrequest.xml#parameters">parameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlaces">
<db:title>void QPlaceMatchRequest::setPlaces(const QList&lt;QPlace&gt; <db:emphasis>places</db:emphasis>)</db:title>
<db:para>Sets a list of <db:code role="parameter">places</db:code> which are to be matched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacematchrequest.xml#places">places</db:link>()</db:member>
<db:member><db:link xlink:href="qplacematchrequest.xml#setResults">setResults</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResults">
<db:title>void QPlaceMatchRequest::setResults(const QList&lt;QPlaceSearchResult&gt; &amp;<db:emphasis>results</db:emphasis>)</db:title>
<db:para>Convenience function which uses a set of search <db:code role="parameter">results</db:code> to set the places which should be matched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacematchrequest.xml#setPlaces">setPlaces</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QPlaceMatchRequest::operator!=(const QPlaceMatchRequest &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> is not equal to this match request, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QPlaceMatchRequest &amp;QPlaceMatchRequest::operator=(const QPlaceMatchRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this search request and returns a reference to this match request.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QPlaceMatchRequest::operator==(const QPlaceMatchRequest &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> is equal to this match request, otherwise returns false.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="AlternativeId-var">
<db:title>const QString QPlaceMatchRequest::AlternativeId</db:title>
<db:para>The key to specify that matching is to be accomplished via an alternative place identifier.</db:para>
</db:section>
</db:section>
</db:article>
