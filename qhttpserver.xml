<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHttpServer Class</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> is a simplified API for <db:link xlink:href="qabstracthttpserver.xml">QAbstractHttpServer</db:link> and <db:link xlink:href="qhttpserverrouter.xml">QHttpServerRouter</db:link>.</db:para>
<db:para>This class was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHttpServer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS HttpServer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::HttpServer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += httpserver</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstracthttpserver.xml" xlink:role="class">QAbstractHttpServer</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="cpp">QHttpServer server;

server.route(&quot;/&quot;, [] () {
    return &quot;hello world&quot;;
});
server.listen();

</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MissingHandler-typedef">
<db:title>[alias] QHttpServer::MissingHandler</db:title>
<db:typedefsynopsis>
<db:typedefname>MissingHandler</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Type alias for std::function&lt;void(const <db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link> &amp;request, <db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link> &amp;&amp;responder)&gt;.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHttpServer">
<db:title>[explicit] QHttpServer::QHttpServer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServer(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an instance of <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QHttpServer">
<db:title>[virtual] QHttpServer::~QHttpServer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QHttpServer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHttpServer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link>.</db:para>
</db:section>
<db:section xml:id="afterRequest">
<db:title>void QHttpServer::afterRequest(ViewHandler &amp;&amp;<db:emphasis>viewHandler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>afterRequest</db:methodname>
<db:methodparam>
<db:type>ViewHandler &amp;&amp;</db:type>
<db:parameter>viewHandler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void afterRequest(ViewHandler &amp;&amp;viewHandler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Register a function to be run after each request.</db:para>
<db:para>The <db:code role="parameter">viewHandler</db:code> argument can be a function pointer, non-mutable lambda, or any other copiable callable with const call operator. The callable can take one or two optional arguments: <db:code>QHttpServerResponse &amp;&amp;</db:code> and <db:code>const QHttpServerRequest &amp;</db:code>. If both are given, they can be in either order.</db:para>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">QHttpServer server;

// Valid:
server.afterRequest([] (QHttpServerResponse &amp;amp;&amp;amp;resp, const QHttpServerRequest &amp;amp;request) {
    return std::move(resp);
}
server.afterRequest([] (const QHttpServerRequest &amp;amp;request, QHttpServerResponse &amp;amp;&amp;amp;resp) {
    return std::move(resp);
}
server.afterRequest([] (QHttpServerResponse &amp;amp;&amp;amp;resp) { return std::move(resp); }

// Invalid (compile time error):
// resp must be passed by universal reference
server.afterRequest([] (QHttpServerResponse &amp;amp;resp, const QHttpServerRequest &amp;amp;request) {
    return std::move(resp);
}
// request must be passed by const reference
server.afterRequest([] (QHttpServerResponse &amp;amp;&amp;amp;resp, QHttpServerRequest &amp;amp;request) {
    return std::move(resp);
}

</db:programlisting>
</db:section>
<db:section xml:id="route">
<db:title>bool QHttpServer::route(Args &amp;&amp;... <db:emphasis>args</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>route</db:methodname>
<db:methodparam>
<db:type>Args &amp;&amp;...</db:type>
<db:parameter>args</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool route(Args &amp;&amp;... args)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is just a wrapper to simplify the router API.</db:para>
<db:para>This function takes variadic arguments <db:code role="parameter">args</db:code>. The last argument is a callback (<db:code>ViewHandler</db:code>). The remaining arguments are used to create a new <db:code>Rule</db:code> (the default is <db:link xlink:href="qhttpserverrouterrule.xml">QHttpServerRouterRule</db:link>). This is in turn added to the <db:link xlink:href="qhttpserverrouter.xml">QHttpServerRouter</db:link>. It returns <db:code>true</db:code> if a new rule is created, otherwise it returns <db:code>false</db:code>.</db:para>
<db:para><db:code>ViewHandler</db:code> can be a function pointer, non-mutable lambda, or any other copiable callable with const call operator. The callable can take two optional special arguments: <db:code>const QHttpServerRequest&amp;</db:code> and <db:code>QHttpServerResponder&amp;&amp;</db:code>. These special arguments must be the last in the parameter list, but in any order, and there can be none, one, or both of them present.</db:para>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">QHttpServer server;

// Valid:
server.route(&quot;test&quot;, [] (const int page) { return &quot;&quot;; });
server.route(&quot;test&quot;, [] (const int page, const QHttpServerRequest &amp;amp;request) { return &quot;&quot;; });
server.route(&quot;test&quot;, [] (QHttpServerResponder &amp;amp;&amp;amp;responder) { return &quot;&quot;; });

// Invalid (compile time error):
server.route(&quot;test&quot;, [] (const QHttpServerRequest &amp;amp;request, const int page) { return &quot;&quot;; }); // request must be last
server.route(&quot;test&quot;, [] (QHttpServerRequest &amp;amp;request) { return &quot;&quot;; });      // request must be passed by const reference
server.route(&quot;test&quot;, [] (QHttpServerResponder &amp;amp;responder) { return &quot;&quot;; });  // responder must be passed by universal reference
</db:programlisting>
<db:para>The request handler may return <db:code>QFuture&lt;QHttpServerResponse&gt;</db:code> if asynchronous processing is desired:</db:para>
<db:programlisting language="cpp">server.route(&quot;/feature/&quot;, [] (int id) {
    return QtConcurrent::run([] () {
        return QHttpServerResponse(&quot;the future is coming&quot;);
    });
});
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpserverrouter.xml#addRule">QHttpServerRouter::addRule</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="router">
<db:title>QHttpServerRouter *QHttpServer::router()</db:title>
<db:methodsynopsis>
<db:type>QHttpServerRouter *</db:type>
<db:methodname>router</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerRouter * router()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the router object.</db:para>
</db:section>
<db:section xml:id="setMissingHandler">
<db:title>void QHttpServer::setMissingHandler(QHttpServer::MissingHandler <db:emphasis>handler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMissingHandler</db:methodname>
<db:methodparam>
<db:type>QHttpServer::MissingHandler</db:type>
<db:parameter>handler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMissingHandler(QHttpServer::MissingHandler handler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set a handler to call for unhandled paths.</db:para>
<db:para>The invocable passed as <db:code role="parameter">handler</db:code> will be invoked for each request that cannot be handled by any of registered route handlers. Passing a default-constructed std::function resets the handler to the default one that produces replies with status 404 Not Found.</db:para>
</db:section>
</db:section>
</db:article>
