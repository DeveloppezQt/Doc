<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Coordinate System</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Information about the coordinate system used by the paint system.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The coordinate system is controlled by the <db:link xlink:href="qpainter.xml">QPainter</db:link> class. Together with the <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> and <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> classes, <db:link xlink:href="qpainter.xml">QPainter</db:link> form the basis of Qt's painting system, Arthur. <db:link xlink:href="qpainter.xml">QPainter</db:link> is used to perform drawing operations, <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> is an abstraction of a two-dimensional space that can be painted on using a <db:link xlink:href="qpainter.xml">QPainter</db:link>, and <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> provides the interface that the painter uses to draw onto different types of devices.</db:para>
<db:para>The <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> class is the base class of objects that can be painted: Its drawing capabilities are inherited by the QWidget, <db:link xlink:href="qimage.xml">QImage</db:link>, <db:link xlink:href="qpixmap.xml">QPixmap</db:link>, <db:link xlink:href="qpicture.xml">QPicture</db:link>, and QOpenGLPaintDevice classes. The default coordinate system of a paint device has its origin at the top-left corner. The <db:emphasis>x</db:emphasis> values increase to the right and the <db:emphasis>y</db:emphasis> values increase downwards. The default unit is one pixel on pixel-based devices and one point (1/72 of an inch) on printers.</db:para>
<db:para>The mapping of the logical <db:link xlink:href="qpainter.xml">QPainter</db:link> coordinates to the physical <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> coordinates are handled by <db:link xlink:href="qpainter.xml">QPainter</db:link>'s transformation matrix, viewport and &quot;window&quot;. The logical and physical coordinate systems coincide by default. <db:link xlink:href="qpainter.xml">QPainter</db:link> also supports coordinate transformations (e.g. rotation and scaling).</db:para>
<db:section xml:id="rendering">
<db:title>Rendering</db:title>
<db:section xml:id="logical-representation">
<db:title>Logical Representation</db:title>
<db:para>The size (width and height) of a graphics primitive always correspond to its mathematical model, ignoring the width of the pen it is rendered with:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/coordinatesystem-rect.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/coordinatesystem-line.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link>(<db:link xlink:href="qpoint.xml">QPoint</db:link>(1, 2), <db:link xlink:href="qpoint.xml">QPoint</db:link>(7, 6))</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qline.xml">QLine</db:link>(<db:link xlink:href="qpoint.xml">QPoint</db:link>(2, 7), <db:link xlink:href="qpoint.xml">QPoint</db:link>(6, 1))</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qline.xml">QLine</db:link>(2, 7, 6, 1)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link>(<db:link xlink:href="qpoint.xml">QPoint</db:link>(1, 2), <db:link xlink:href="qsize.xml">QSize</db:link>(6, 4))</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link>(1, 2, 6, 4)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="aliased-painting">
<db:title>Aliased Painting</db:title>
<db:para>When drawing, the pixel rendering is controlled by the <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::Antialiasing</db:link> render hint.</db:para>
<db:para>The <db:link xlink:href="qpainter.xml#RenderHint-enum">RenderHint</db:link> enum is used to specify flags to <db:link xlink:href="qpainter.xml">QPainter</db:link> that may or may not be respected by any given engine. The <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::Antialiasing</db:link> value indicates that the engine should antialias edges of primitives if possible, i.e. smoothing the edges by using different color intensities.</db:para>
<db:para>But by default the painter is <db:emphasis>aliased</db:emphasis> and other rules apply: When rendering with a one pixel wide pen the pixels will be rendered to the <db:emphasis>right and below the mathematically defined points</db:emphasis>. For example:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/coordinatesystem-rect-raster.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/coordinatesystem-line-raster.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp">QPainter painter(this);

painter.setPen(Qt::darkGreen);
// Using the (x  y  w  h) overload
painter.drawRect(1, 2, 6, 4);
</db:programlisting>
</db:td>
<db:td>
<db:programlisting language="cpp">QPainter painter(this);

painter.setPen(Qt::darkGreen);
painter.drawLine(2, 7, 6, 1);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When rendering with a pen with an even number of pixels, the pixels will be rendered symmetrically around the mathematical defined points, while rendering with a pen with an odd number of pixels, the spare pixel will be rendered to the right and below the mathematical point as in the one pixel case. See the <db:link xlink:href="qrectf.xml">QRectF</db:link> diagrams below for concrete examples.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th colspan="2">
<db:para><db:link xlink:href="qrectf.xml">QRectF</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-diagram-zero.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrectf-diagram-one.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Logical representation</db:para>
</db:td>
<db:td>
<db:para>One pixel wide pen</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrectf-diagram-two.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrectf-diagram-three.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Two pixel wide pen</db:para>
</db:td>
<db:td>
<db:para>Three pixel wide pen</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that for historical reasons the return value of the <db:link xlink:href="qrect.xml#right">QRect::right</db:link>() and <db:link xlink:href="qrect.xml#bottom">QRect::bottom</db:link>() functions deviate from the true bottom-right corner of the rectangle.</db:para>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link>'s <db:link xlink:href="qrect.xml#right">right</db:link>() function returns <db:link xlink:href="qrect.xml#left">left</db:link>() + <db:link xlink:href="qrect.xml#width">width</db:link>() - 1 and the <db:link xlink:href="qrect.xml#bottom">bottom</db:link>() function returns <db:link xlink:href="qrect.xml#top">top</db:link>() + <db:link xlink:href="qrect.xml#height">height</db:link>() - 1. The bottom-right green point in the diagrams shows the return coordinates of these functions.</db:para>
<db:para>We recommend that you simply use <db:link xlink:href="qrectf.xml">QRectF</db:link> instead: The <db:link xlink:href="qrectf.xml">QRectF</db:link> class defines a rectangle in the plane using floating point coordinates for accuracy (<db:link xlink:href="qrect.xml">QRect</db:link> uses integer coordinates), and the <db:link xlink:href="qrectf.xml#right">QRectF::right</db:link>() and <db:link xlink:href="qrectf.xml#bottom">QRectF::bottom</db:link>() functions <db:emphasis>do</db:emphasis> return the true bottom-right corner.</db:para>
<db:para>Alternatively, using <db:link xlink:href="qrect.xml">QRect</db:link>, apply <db:link xlink:href="qrect.xml#x">x</db:link>() + <db:link xlink:href="qrect.xml#width">width</db:link>() and <db:link xlink:href="qrect.xml#y">y</db:link>() + <db:link xlink:href="qrect.xml#height">height</db:link>() to find the bottom-right corner, and avoid the <db:link xlink:href="qrect.xml#right">right</db:link>() and <db:link xlink:href="qrect.xml#bottom">bottom</db:link>() functions.</db:para>
</db:section>
<db:section xml:id="anti-aliased-painting">
<db:title>Anti-aliased Painting</db:title>
<db:para>If you set <db:link xlink:href="qpainter.xml">QPainter</db:link>'s <db:link xlink:href="qpainter.xml#RenderHint-enum">anti-aliasing</db:link> render hint, the pixels will be rendered symmetrically on both sides of the mathematically defined points:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/coordinatesystem-rect-antialias.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/coordinatesystem-line-antialias.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp">QPainter painter(this);
painter.setRenderHint(
    QPainter::Antialiasing);
painter.setPen(Qt::darkGreen);
// Using the (x  y  w  h) overload
painter.drawRect(1, 2, 6, 4);
</db:programlisting>
</db:td>
<db:td>
<db:programlisting language="cpp">QPainter painter(this);
painter.setRenderHint(
    QPainter::Antialiasing);
painter.setPen(Qt::darkGreen);
painter.drawLine(2, 7, 6, 1);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="transformations">
<db:title>Transformations</db:title>
<db:para>By default, the <db:link xlink:href="qpainter.xml">QPainter</db:link> operates on the associated device's own coordinate system, but it also has complete support for affine coordinate transformations.</db:para>
<db:para>You can scale the coordinate system by a given offset using the <db:link xlink:href="qpainter.xml#scale">QPainter::scale</db:link>() function, you can rotate it clockwise using the <db:link xlink:href="qpainter.xml#rotate">QPainter::rotate</db:link>() function and you can translate it (i.e. adding a given offset to the points) using the <db:link xlink:href="qpainter.xml#translate">QPainter::translate</db:link>() function.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-clock.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-rotation.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-scale.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-translation.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>nop</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpainter.xml#rotate">rotate</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpainter.xml#scale">scale</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpainter.xml#translate">translate</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can also twist the coordinate system around the origin using the <db:link xlink:href="qpainter.xml#shear">QPainter::shear</db:link>() function. All the transformation operations operate on <db:link xlink:href="qpainter.xml">QPainter</db:link>'s transformation matrix that you can retrieve using the <db:link xlink:href="qpainter.xml#worldTransform">QPainter::worldTransform</db:link>() function. A matrix transforms a point in the plane to another point.</db:para>
<db:para>If you need the same transformations over and over, you can also use <db:link xlink:href="qtransform.xml">QTransform</db:link> objects and the <db:link xlink:href="qpainter.xml#worldTransform">QPainter::worldTransform</db:link>() and <db:link xlink:href="qpainter.xml#setWorldTransform">QPainter::setWorldTransform</db:link>() functions. You can at any time save the <db:link xlink:href="qpainter.xml">QPainter</db:link>'s transformation matrix by calling the <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>() function which saves the matrix on an internal stack. The <db:link xlink:href="qpainter.xml#restore">QPainter::restore</db:link>() function pops it back.</db:para>
<db:para>One frequent need for the transformation matrix is when reusing the same drawing code on a variety of paint devices. Without transformations, the results are tightly bound to the resolution of the paint device. Printers have high resolution, e.g. 600 dots per inch, whereas screens often have between 72 and 100 dots per inch.</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th colspan="2">
<db:para>Analog Clock Example</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/coordinatesystem-analogclock.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>The Analog Clock example shows how to draw the contents of a custom widget using <db:link xlink:href="qpainter.xml">QPainter</db:link>'s transformation matrix.</db:para>
<db:para>We recommend compiling and running this example before you read any further. In particular, try resizing the window to different sizes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td colspan="2">
<db:programlisting language="cpp">void AnalogClockWindow::render(QPainter *p)
{
    static const QPoint hourHand[3] = {
        QPoint(7, 8),
        QPoint(-7, 8),
        QPoint(0, -40)
    };
    static const QPoint minuteHand[3] = {
        QPoint(7, 8),
        QPoint(-7, 8),
        QPoint(0, -70)
    };

    QColor hourColor(127, 0, 127);
    QColor minuteColor(0, 127, 127, 191);

    p-&amp;gt;setRenderHint(QPainter::Antialiasing);
    p-&amp;gt;translate(width() / 2, height() / 2);

    int side = qMin(width(), height());
    p-&amp;gt;scale(side / 200.0, side / 200.0);
</db:programlisting>
<db:para>We translate the coordinate system so that point (0, 0) is in the widget's center, instead of being at the top-left corner. We also scale the system by <db:code>side</db:code> / 100, where <db:code>side</db:code> is either the widget's width or the height, whichever is shortest. We want the clock to be square, even if the device isn't.</db:para>
<db:para>This will give us a 200 x 200 square area, with the origin (0, 0) in the center, that we can draw on. What we draw will show up in the largest possible square that will fit in the widget.</db:para>
<db:para>See also the <db:link xlink:href="coordsys.xml#window-viewport-conversion">Window-Viewport Conversion</db:link> section.</db:para>
<db:programlisting language="cpp">    QTime time = QTime::currentTime();

    p-&amp;gt;save();
    p-&amp;gt;rotate(30.0 * ((time.hour() + time.minute() / 60.0)));
    p-&amp;gt;drawConvexPolygon(hourHand, 3);
    p-&amp;gt;restore();
</db:programlisting>
<db:para>We draw the clock's hour hand by rotating the coordinate system and calling <db:link xlink:href="qpainter.xml#drawConvexPolygon">QPainter::drawConvexPolygon</db:link>(). Thank's to the rotation, it's drawn pointed in the right direction.</db:para>
<db:para>The polygon is specified as an array of alternating <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis> values, stored in the <db:code>hourHand</db:code> static variable (defined at the beginning of the function), which corresponds to the four points (2, 0), (0, 2), (-2, 0), and (0, -25).</db:para>
<db:para>The calls to <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>() and <db:link xlink:href="qpainter.xml#restore">QPainter::restore</db:link>() surrounding the code guarantees that the code that follows won't be disturbed by the transformations we've used.</db:para>
<db:programlisting language="cpp">    p-&amp;gt;save();
    p-&amp;gt;rotate(6.0 * (time.minute() + time.second() / 60.0));
    p-&amp;gt;drawConvexPolygon(minuteHand, 3);
    p-&amp;gt;restore();
</db:programlisting>
<db:para>We do the same for the clock's minute hand, which is defined by the four points (1, 0), (0, 1), (-1, 0), and (0, -40). These coordinates specify a hand that is thinner and longer than the minute hand.</db:para>
<db:programlisting language="cpp">    p-&amp;gt;setPen(minuteColor);

    for (int j = 0; j &amp;lt; 60; ++j) {
        if ((j % 5) != 0)
            p-&amp;gt;drawLine(92, 0, 96, 0);
        p-&amp;gt;rotate(6.0);
    }
</db:programlisting>
<db:para>Finally, we draw the clock face, which consists of twelve short lines at 30-degree intervals. At the end of that, the painter is rotated in a way which isn't very useful, but we're done with painting so that doesn't matter.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For more information about the transformation matrix, see the <db:link xlink:href="qtransform.xml">QTransform</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="window-viewport-conversion">
<db:title>Window-Viewport Conversion</db:title>
<db:para>When drawing with <db:link xlink:href="qpainter.xml">QPainter</db:link>, we specify points using logical coordinates which then are converted into the physical coordinates of the paint device.</db:para>
<db:para>The mapping of the logical coordinates to the physical coordinates are handled by <db:link xlink:href="qpainter.xml">QPainter</db:link>'s world transformation <db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>() (described in the <db:link xlink:href="coordsys.xml#transformations">Transformations</db:link> section), and <db:link xlink:href="qpainter.xml">QPainter</db:link>'s <db:link xlink:href="qpainter.xml#viewport">viewport</db:link>() and <db:link xlink:href="qpainter.xml#window">window</db:link>(). The viewport represents the physical coordinates specifying an arbitrary rectangle. The &quot;window&quot; describes the same rectangle in logical coordinates. By default the logical and physical coordinate systems coincide, and are equivalent to the paint device's rectangle.</db:para>
<db:para>Using window-viewport conversion you can make the logical coordinate system fit your preferences. The mechanism can also be used to make the drawing code independent of the paint device. You can, for example, make the logical coordinates extend from (-50, -50) to (50, 50) with (0, 0) in the center by calling the <db:link xlink:href="qpainter.xml#setWindow">QPainter::setWindow</db:link>() function:</db:para>
<db:programlisting language="cpp">QPainter painter(this);
painter.setWindow(QRect(-50, -50, 100, 100));
</db:programlisting>
<db:para>Now, the logical coordinates (-50,-50) correspond to the paint device's physical coordinates (0, 0). Independent of the paint device, your painting code will always operate on the specified logical coordinates.</db:para>
<db:para>By setting the &quot;window&quot; or viewport rectangle, you perform a linear transformation of the coordinates. Note that each corner of the &quot;window&quot; maps to the corresponding corner of the viewport, and vice versa. For that reason it normally is a good idea to let the viewport and &quot;window&quot; maintain the same aspect ratio to prevent deformation:</db:para>
<db:programlisting language="cpp">int side = qMin(width(), height());
int x = (width() - side / 2);
int y = (height() - side / 2);

painter.setViewport(x, y, side, side);
</db:programlisting>
<db:para>If we make the logical coordinate system a square, we should also make the viewport a square using the <db:link xlink:href="qpainter.xml#setViewport">QPainter::setViewport</db:link>() function. In the example above we make it equivalent to the largest square that fit into the paint device's rectangle. By taking the paint device's size into consideration when setting the window or viewport, it is possible to keep the drawing code independent of the paint device.</db:para>
<db:para>Note that the window-viewport conversion is only a linear transformation, i.e. it does not perform clipping. This means that if you paint outside the currently set &quot;window&quot;, your painting is still transformed to the viewport using the same linear algebraic approach.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/coordinatesystem-transformations.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The viewport, &quot;window&quot; and transformation matrix determine how logical <db:link xlink:href="qpainter.xml">QPainter</db:link> coordinates map to the paint device's physical coordinates. By default the world transformation matrix is the identity matrix, and the &quot;window&quot; and viewport settings are equivalent to the paint device's settings, i.e. the world, &quot;window&quot; and device coordinate systems are equivalent, but as we have seen, the systems can be manipulated using transformation operations and window-viewport conversion. The illustration above describes the process.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtgui-analogclock-example.xml">Analog Clock Window Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
