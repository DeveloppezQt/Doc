<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Syntax Highlighter Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Syntax Highlighter example shows how to perform simple syntax highlighting.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;highlighter.h&quot;

Highlighter::Highlighter(QTextDocument *parent)
    : QSyntaxHighlighter(parent)
{
    HighlightingRule rule;

    keywordFormat.setForeground(Qt::darkBlue);
    keywordFormat.setFontWeight(QFont::Bold);
    QStringList keywordPatterns;
    keywordPatterns &amp;lt;&amp;lt; &quot;\\bchar\\b&quot; &amp;lt;&amp;lt; &quot;\\bclass\\b&quot; &amp;lt;&amp;lt; &quot;\\bconst\\b&quot;
                    &amp;lt;&amp;lt; &quot;\\bdouble\\b&quot; &amp;lt;&amp;lt; &quot;\\benum\\b&quot; &amp;lt;&amp;lt; &quot;\\bexplicit\\b&quot;
                    &amp;lt;&amp;lt; &quot;\\bfriend\\b&quot; &amp;lt;&amp;lt; &quot;\\binline\\b&quot; &amp;lt;&amp;lt; &quot;\\bint\\b&quot;
                    &amp;lt;&amp;lt; &quot;\\blong\\b&quot; &amp;lt;&amp;lt; &quot;\\bnamespace\\b&quot; &amp;lt;&amp;lt; &quot;\\boperator\\b&quot;
                    &amp;lt;&amp;lt; &quot;\\bprivate\\b&quot; &amp;lt;&amp;lt; &quot;\\bprotected\\b&quot; &amp;lt;&amp;lt; &quot;\\bpublic\\b&quot;
                    &amp;lt;&amp;lt; &quot;\\bshort\\b&quot; &amp;lt;&amp;lt; &quot;\\bsignals\\b&quot; &amp;lt;&amp;lt; &quot;\\bsigned\\b&quot;
                    &amp;lt;&amp;lt; &quot;\\bslots\\b&quot; &amp;lt;&amp;lt; &quot;\\bstatic\\b&quot; &amp;lt;&amp;lt; &quot;\\bstruct\\b&quot;
                    &amp;lt;&amp;lt; &quot;\\btemplate\\b&quot; &amp;lt;&amp;lt; &quot;\\btypedef\\b&quot; &amp;lt;&amp;lt; &quot;\\btypename\\b&quot;
                    &amp;lt;&amp;lt; &quot;\\bunion\\b&quot; &amp;lt;&amp;lt; &quot;\\bunsigned\\b&quot; &amp;lt;&amp;lt; &quot;\\bvirtual\\b&quot;
                    &amp;lt;&amp;lt; &quot;\\bvoid\\b&quot; &amp;lt;&amp;lt; &quot;\\bvolatile\\b&quot; &amp;lt;&amp;lt; &quot;\\bbool\\b&quot;;
    foreach (const QString &amp;amp;pattern, keywordPatterns) {
        rule.pattern = QRegularExpression(pattern);
        rule.format = keywordFormat;
        highlightingRules.append(rule);
    }

    classFormat.setFontWeight(QFont::Bold);
    classFormat.setForeground(Qt::darkMagenta);
    rule.pattern = QRegularExpression(&quot;\\bQ[A-Za-z]+\\b&quot;);
    rule.format = classFormat;
    highlightingRules.append(rule);

    singleLineCommentFormat.setForeground(Qt::red);
    rule.pattern = QRegularExpression(&quot;//[^\n]*&quot;);
    rule.format = singleLineCommentFormat;
    highlightingRules.append(rule);

    multiLineCommentFormat.setForeground(Qt::red);

    quotationFormat.setForeground(Qt::darkGreen);
    rule.pattern = QRegularExpression(&quot;\&quot;.*\&quot;&quot;);
    rule.format = quotationFormat;
    highlightingRules.append(rule);

    functionFormat.setFontItalic(true);
    functionFormat.setForeground(Qt::blue);
    rule.pattern = QRegularExpression(&quot;\\b[A-Za-z0-9_]+(?=\\()&quot;);
    rule.format = functionFormat;
    highlightingRules.append(rule);

    commentStartExpression = QRegularExpression(&quot;/\\*&quot;);
    commentEndExpression = QRegularExpression(&quot;\\*/&quot;);
}

void Highlighter::highlightBlock(const QString &amp;amp;text)
{
    foreach (const HighlightingRule &amp;amp;rule, highlightingRules) {
        QRegularExpressionMatchIterator matchIterator = rule.pattern.globalMatch(text);
        while (matchIterator.hasNext()) {
            QRegularExpressionMatch match = matchIterator.next();
            setFormat(match.capturedStart(), match.capturedLength(), rule.format);
        }
    }
    setCurrentBlockState(0);

    int startIndex = 0;
    if (previousBlockState() != 1)
        startIndex = text.indexOf(commentStartExpression);

    while (startIndex &amp;gt;= 0) {
        QRegularExpressionMatch match = commentEndExpression.match(text, startIndex);
        int endIndex = match.capturedStart();
        int commentLength = 0;
        if (endIndex == -1) {
            setCurrentBlockState(1);
            commentLength = text.length() - startIndex;
        } else {
            commentLength = endIndex - startIndex
                            + match.capturedLength();
        }
        setFormat(startIndex, commentLength, multiLineCommentFormat);
        startIndex = text.indexOf(commentStartExpression, startIndex + commentLength);
    }
}

</db:programlisting>
</db:article>
