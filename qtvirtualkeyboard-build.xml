<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building Qt Virtual Keyboard</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Qt Virtual Keyboard.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>This document describes how to build the Qt Virtual Keyboard plugin.</db:para>
<db:para>The project is split into the following subprojects:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>examples/virtualkeyboard/basic</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Virtual Keyboard Demo application</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>src/components/</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Virtual Keyboard Components QML plugin (<db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.<db:link xlink:href="qml-qtquick-virtualkeyboard-virtualkeyboard.xml">VirtualKeyboard</db:link>.Components)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>src/plugin/</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Virtual Keyboard platform input context plugin. This plugin provides the QPlatformInputContext interface and works as a layer between QML input context and platform.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>src/plugins/</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>A directory containing Qt Virtual Keyboard plugins (<db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.<db:link xlink:href="qml-qtquick-virtualkeyboard-virtualkeyboard.xml">VirtualKeyboard</db:link>.Plugins), which implement complex input methods, such as the <db:emphasis>HunspellInputMethod</db:emphasis>. Build time configuration specifies which plugins are built and loaded at runtime.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>src/settings/</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Virtual Keyboard Settings QML plugin (<db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.<db:link xlink:href="qml-qtquick-virtualkeyboard-virtualkeyboard.xml">VirtualKeyboard</db:link>.Settings). This plugin provides application-configurable settings for the virtual keyboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>src/styles/</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Virtual Keyboard Styles QML plugin (<db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.<db:link xlink:href="qml-qtquick-virtualkeyboard-virtualkeyboard.xml">VirtualKeyboard</db:link>.Styles).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>src/virtualkeyboard/</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Virtual Keyboard module and QML plugin.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="configuration-options">
<db:title>Configuration Options</db:title>
<db:para>The table below contains the top-level options for configuring the virtual keyboard features. These options are passed to the <db:emphasis>configure</db:emphasis> tool.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Arguments</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
<db:th>
<db:para>Remarks</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-enable &lt;code&gt;[,&lt;code&gt;]*</db:emphasis>&quot;</db:para>
</db:td>
<db:td>
<db:para>Supported language codes or 'all'</db:para>
</db:td>
<db:td>
<db:para>Enables the specified language</db:para>
</db:td>
<db:td>
<db:para>The specified languages can be explicitly enabled using this option. Each language code has the format <db:emphasis>language[_country]</db:emphasis>, where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>language</db:emphasis> is a lowercase, two-letter, ISO 639 language code</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>country</db:emphasis> is an uppercase, two-letter, ISO 3166 country code</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This option can be used to define the language support as required. The virtual keyboard can support one or more languages at a time.</db:para>
<db:para>For example, <db:code>-vkb-enable de_DE,fi_FI</db:code> enables support for the German and Finnish languages.</db:para>
<db:para>The virtual keyboard automatically includes all supported languages if no other languages are specified.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-handwriting</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>[no|myscript-hwr|cerence-hwr]</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Enables or disabled handwriting input</db:para>
</db:td>
<db:td>
<db:para>This flag enables handwriting input. By default, the engine is automatically activated if it is located in the proper plugins folder even without using of this option. But, in case MyScript and Cerence SDK co-exist, one of [no|myscript-hwr|cerence-hwr] must be configured.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>[-no]-vkb-arrow-keynavigation</db:emphasis></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Enables or disables arrow key navigation for the keyboard</db:para>
</db:td>
<db:td>
<db:para>Allows controlling the keyboard using the arrow and return keys. This feature is off by default.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-style</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>[standard|retro]</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Choose the style of the virtual keyboard</db:para>
</db:td>
<db:td>
<db:para>The Qt Virtual Keyboard supports two styles, standard and retro. Both styles will be included in the package, but this option allows you to change the built-in default style.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>[-no]-vkb-cangjie</db:emphasis></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Enables or disables the Cangjie input method for Traditional Chinese.</db:para>
</db:td>
<db:td>
<db:para>This option enables or disables the Cangjie input method for the Traditional Chinese language. The input method is enabled by default if support for Traditional Chinese is enabled.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>[-no]-vkb-zhuyin</db:emphasis></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Enables or disables the Zhuyin input method for Traditional Chinese.</db:para>
</db:td>
<db:td>
<db:para>This option enables or disables the Zhuyin input method for the Traditional Chinese language. The input method is enabled by default if support for Traditional Chinese is enabled.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>[-no]-vkb-desktop</db:emphasis></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Enables or disables Desktop integration</db:para>
</db:td>
<db:td>
<db:para>By default, the desktop integration is enabled when the target environment is X11 or Windows desktop. With this option, the desktop integration can be disabled.</db:para>
<db:note>
<db:para>For embedded integration, where the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link> is instantitated by the application, there is no need to use this option explicitly. The virtual keyboard will not create the desktop input panel if the application creates <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link> before the focus is set to an input field.</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>[-no]-vkb-layouts</db:emphasis></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Enables or disables built-in layouts</db:para>
</db:td>
<db:td>
<db:para>By default, the virtual keyboard plugin contains the English keyboard layout. By specifiying <db:emphasis>-no-vkb-layouts</db:emphasis>, the built-in layout(s) are excluded from the virtual keyboard plugin.</db:para>
<db:note>
<db:para>In this scenario, the <db:code>QT_VIRTUALKEYBOARD_LAYOUT_PATH</db:code> environment variable should be set to the file system directory containing the custom keyboard layouts before running the application.</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-hunspell</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>[no|3rdparty|system]</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Choose Hunspell integration</db:para>
</db:td>
<db:td>
<db:para>Forces the Hunspell integration method to the specified option. The <db:emphasis>3rdparty</db:emphasis> option selects the local build of the Hunspell source code using project files in the virtual keyboard repo. This option requires that the Hunspell git repository has been cloned into <db:emphasis>src/plugins/hunspell/3rdparty/hunspell</db:emphasis> directory. The <db:emphasis>system</db:emphasis> option selects the system package via <db:emphasis>pkg-config</db:emphasis>. The <db:emphasis>no</db:emphasis> option disables the Hunspell plugin.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-no-bundle-pinyin</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>n/a</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Disables bundling of pinyin resources</db:para>
</db:td>
<db:td>
<db:para>This option excludes pinyin resources from the plugin binary. This option may be used to reduce the plugin binary size.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-no-bundle-tcime</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>n/a</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Disables bundling of tcime resources</db:para>
</db:td>
<db:td>
<db:para>This option excludes tcime resources from the plugin binary. This option may be used to reduce the plugin binary size.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-cerence-sdk</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>path/to/cerence/sdk</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Configures the Cerence SDK location and enables the Cerence Handwriting and XT9 integrations.</db:para>
</db:td>
<db:td>
<db:para>The Cerence SDK zip file must be unpacked using the <db:emphasis>src/plugins/cerence/unpack.py</db:emphasis> script. By default, the SDK is unpacked to <db:emphasis>src/plugins/cerence/sdk</db:emphasis>, where the build scripts can pick it up automatically. However, by using the second parameter to the unpack.py script, it is possible to use different location for the SDK. In that case, the location must be passed to the build script using the -vkb-cerence-sdk command line parameter.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-cerence-static</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>handwriting</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Enables static linking of the Cerence Handwriting engine.</db:para>
</db:td>
<db:td>
<db:para>The Cerence Handwriting engine is linked dynamically by default. Use <db:emphasis>-vkb-cerence-static</db:emphasis> to force static linking.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-bundle-cerence-hwr</db:emphasis> or <db:emphasis>-vkb-bundle-cerence</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>n/a</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Enables bundling of Cerence Handwriting resources</db:para>
</db:td>
<db:td>
<db:para>This option bundles the Cerence Handwriting resources in the plugin binary.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-bundle-xt9</db:emphasis> or <db:emphasis>-vkb-bundle-cerence</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>n/a</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Enables bundling of XT9 resources</db:para>
</db:td>
<db:td>
<db:para>This option bundles the XT9 resources in the plugin binary.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-myscript-sdk</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>path/to/myscript/sdk</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Configures the MyScript Text SDK location and enables the MyScript Handwriting integration.</db:para>
</db:td>
<db:td>
<db:para>The MyScript Text SDK (zip) which is unpacked to <db:emphasis>src/plugins/myscript/sdk</db:emphasis>, can be picked up automatically by the build scripts. However, the SDK can be placed in different location. In that case, the location must be passed to the build script using the <db:code>-vkb-myscript-sdk</db:code> command line parameter.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>-vkb-myscript-arch</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>[x86|x64|armv7hf|armv7|arm64]</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Configures the target CPU architecture</db:para>
</db:td>
<db:td>
<db:para>The MyScript Text SDK offers shared (dynamic) libraries for different CPU architectures - <db:emphasis>[x86|x64|armv7hf|armv7|arm64]</db:emphasis> for Linux and <db:emphasis>[x86|x64]</db:emphasis> for Windows. It can automatically configured. However, a user also can specify the target CPU architecture using the <db:code>-vkb-myscript-arch</db:code> command line parameter.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="hunspell-integration">
<db:title>Hunspell Integration</db:title>
<db:para>By default, <db:emphasis>HunspellInputMethod</db:emphasis> will not be available unless the Hunspell library and development headers are found. For Linux/X11 targets, the Hunspell library can be provided by installing the libhunspell-dev package. Alternatively, the Hunspell git repository can be cloned into the <db:emphasis>src/plugins/hunspell/3rdparty/hunspell</db:emphasis> directory. The sources are automatically detected by the qmake and the project will be configured to use the local Hunspell. If Hunspell sources are used, then the dictionary files must also be copied into the <db:emphasis>src/plugins/hunspell/3rdparty/hunspell/data</db:emphasis> directory.</db:para>
<db:para>An example of how the directory structure should look after setting up the Hunspell sources and dictionary files is listed below:</db:para>
<db:programlisting language="cpp" role="bad">3rdparty
└── hunspell
    ├── data
    │   ├── en_GB.aff
    │   └── en_GB.dic
    ├── hunspell &amp;lt;-- Hunspell git repository
    └── CMakeLists.txt
</db:programlisting>
</db:section>
<db:section xml:id="cerence-handwriting-integration">
<db:title>Cerence Handwriting Integration</db:title>
<db:para>Cerence Handwriting integration supports the Alphabetic and CJK (Chinese Japanese Korean) engines. Both engines are integrated via T9WriteInputMethod. The input method is initialized with one engine at the time. The engine selection happens automatically based on the current input locale.</db:para>
<db:section xml:id="cerence-handwriting-compatibility">
<db:title>Cerence Handwriting Compatibility</db:title>
<db:para>Qt Virtual Keyboard is compatible with Cerence Handwriting v8.7 or later.</db:para>
</db:section>
<db:section xml:id="cerence-handwriting-build-preparations">
<db:title>Cerence Handwriting Build Preparations</db:title>
<db:para>The contents of the SDK must unpacked using the <db:emphasis>unpack.py</db:emphasis> script located in the <db:emphasis>cerence</db:emphasis> directory. This ensures the correct directory structure for CMake to find the content.</db:para>
<db:programlisting language="cpp" role="bad">$ cd src/plugins/cerence/
$ python unpack.py filename.zip
</db:programlisting>
<db:para>This will unpack the contents to the <db:emphasis>src/plugins/cerence/sdk</db:emphasis> directory, where the CMake can pick it up automatically.</db:para>
<db:para>Alternatively, you can unpack to any other directory by adding extra parameter to the command line. In this case, the location of the SDK must be passed to the <db:emphasis>configure</db:emphasis> script.</db:para>
<db:programlisting language="cpp" role="bad">configure ... -vkb-cerence-sdk /path/to/cerence/sdk
</db:programlisting>
</db:section>
<db:section xml:id="layout-of-the-cerence-sdk">
<db:title>Layout of the Cerence SDK</db:title>
<db:para>The extracted content of the SDK looks like this:</db:para>
<db:programlisting language="cpp" role="bad">sdk
├───t9write
│   ├───api
│   ├───data
│   │   ├───arabic
│   │   ├───hebrew
│   │   └───thai
│   └───lib
│       ├───linux
│       │   ├───arm64
│       │   │   ├───shared
│       │   │   │   ├───alphabetic
│       │   │   │   └───cjk
│       │   │   └───static
│       │   │       ├───alphabetic
│       │   │       └───cjk
│       │   └───x86_64
│       │       ├───shared
│       │       │   ├───alphabetic
│       │       │   └───cjk
│       │       └───static
│       │           ├───alphabetic
│       │           └───cjk
│       └───win32
│           ├───x86
│           │   ├───shared
│           │   │   ├───alphabetic
│           │   │   └───cjk
│           │   └───static
│           │       ├───alphabetic
│           │       └───cjk
│           └───x86_64
│               ├───shared
│               │   ├───alphabetic
│               │   └───cjk
│               └───static
│                   ├───alphabetic
│                   └───cjk
└───xt9
    ├───api
    ├───data
    └───lib
        ├───linux
        │   ├───arm64
        │   │   ├───shared
        │   │   └───static
        │   └───x86_64
        │       ├───shared
        │       └───static
        └───win32
            ├───x86
            │   ├───shared
            │   └───static
            └───x86_64
                ├───shared
                └───static
</db:programlisting>
<db:para>Where the contents of each directory are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Directory</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
<db:th>
<db:para>Remarks</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>api</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>This directory should contain all of the API files</db:para>
</db:td>
<db:td>
<db:para>The API files usually located in the &quot;api&quot; and &quot;public&quot; directories of the SDK, but sometimes in the &quot;demo&quot; directory.</db:para>
<db:para>When using both Alphabetic and CJK engines at the same time, any overlapping files can be copied from either SDK.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>data</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>This directory should contain all HWR databases and optionally XT9 databases.</db:para>
</db:td>
<db:td>
<db:para>HWR database for the Cerence Handwriting Alphabetic:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>_databas_le.bin</db:emphasis></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>HWR database for the Cerence Handwriting CJK:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>cjk_HK_std_le.hdb</db:emphasis> HongKong Chinese</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>cjk_J_std_le.hdb</db:emphasis> Japanese</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>cjk_K_mkt_le.hdb</db:emphasis> Korean</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>cjk_S_gb18030_le.hdb</db:emphasis> Simplified Chinese</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>cjk_T_std_le.hdb</db:emphasis> Traditional Chinese</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Language database:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>File extension is either <db:emphasis>.ldb</db:emphasis> or <db:emphasis>.phd</db:emphasis></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>lib/&lt;target&gt;/&lt;linkage&gt;/&lt;engine-variant&gt;</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Directory structure holding supported target builds.</db:para>
</db:td>
<db:td>
<db:para>These directories should hold the desired target libraries. If both shared and static libraries are found, shared libraries are preferred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The Cerence Handwriting and XT9 integration code is automatically activated when the Cerence SDK is detected.</db:para>
<db:para>All other extensions should be cleaned from the <db:emphasis>[qtbase]/plugins/virtualkeyboard</db:emphasis> directory before building the Cerence extensions to avoid conflicting behavior at runtime. The Cerence extensions do not require any other virtual keyboard plugin to function.</db:para>
<db:para>Handwriting databases and language databases for XT9 are installed in the <db:emphasis>[qtbase]/qtvirtualkeyboard/cerence</db:emphasis> directory. In addition, there are two other alternatives for locating these files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A custom runtime location defined by <db:link xlink:href="qtvirtualkeyboard-deployment-guide.xml#environment-variables">Environment Variables</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:emphasis>-vkb-bundle-cerence</db:emphasis> command line option to embed resources in the plugin binaries</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="myscript-text-sdk-integration">
<db:title>MyScript Text SDK Integration</db:title>
<db:para>MyScript Text is designed for building applications that enable the recognition of handwritten text. MyScript Text supports the recognition of isolated characters, cursive, print and superimposed writing. MyScript superimposed writing is integrated into Qt Virtual Keyboard. It enables the recognition of letters, words or parts of words written one over the other, without any explicit separation between consecutive fragments. It is capable of running on memory and CPU constrained devices.</db:para>
<db:section xml:id="input-handwriting-styles-of-myscript-text-sdk">
<db:title>Input handwriting styles of MyScript Text SDK</db:title>
<db:para>The end-user can write one word fragment over the other, or one character over the other, as depicted below. Space between two written words are automatically added, so that there is no need for an explicit gesture.</db:para>
<db:figure>
<db:title>Writing one character over the other</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata>
<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" width="21.057215mm" height="23.094498mm" viewbox="0 0 74.612178 81.830896" id="svg4891" version="1.1"> <defs id="defs4893"></defs> <metadata id="metadata4896"> </metadata> <g id="layer1" transform="translate(523.68284,-132.09962)"> <filter id="dropshadow" height="130%"> <fegaussianblur in="SourceAlpha" stddeviation="3"></fegaussianblur> <feoffset dx="2" dy="2" result="offsetblur"></feoffset> <fecomponenttransfer xmlns="http://www.w3.org/2000/svg"> <fefunca type="linear" slope="0.5"></fefunca> </fecomponenttransfer> <femerge> <femergenode></femergenode> <femergenode in="SourceGraphic"></femergenode> </femerge></filter> <path style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" stroke-dasharray="300" stroke-dashoffset="300" d="m -523.25902,200.29853 c 6.95139,11.10595 25.78874,3.22177 32.32488,-4.04061 11.79865,-13.1096 17.63403,-31.02787 14.14214,-48.48732 -0.50587,-2.52933 -5.5167,-18.22189 -9.09137,-14.64721 -5.55428,5.55427 -5.5673,24.06358 -6.06092,30.80965 -0.76585,10.46668 -2.8203,20.43699 -4.04061,30.80965 -0.6416,5.45361 -0.50508,9.28437 -0.50508,14.64722 0,1.34687 1.34687,4.04061 0,4.04061 -0.61968,0 0.23734,-4.20009 2.52539,-10.60661 3.69589,-10.34851 8.06488,-17.115 18.68782,-21.71828 2.1627,-0.93717 6.32571,-2.23606 7.07106,0 1.75433,5.26298 -3.71882,27.10875 8.08123,24.74874 1.4766,-0.29532 3.0107,-0.92173 4.04061,-2.0203 1.59968,-1.70633 2.42154,-4.00433 3.53553,-6.06092 1.07581,-1.98612 2.0203,-4.04061 3.03046,-6.06091" id="path4899"> <animate begin="0s;hOpacityFinal.end" attributename="stroke-dashoffset" from="300px" to="0px" dur="2s" fill="freeze" id="h"></animate> <animate begin="h.end" attributename="opacity" from="1" to="0.2" dur="2s" fill="freeze" id="hOpacity"></animate> <animate begin="oOpacity.end" attributename="opacity" from="0.2" to="0" dur="0.1s" fill="remove" id="hOpacityFinal"></animate> <set begin="hOpacityFinal.end" attributename="opacity" to="1"></set> </path> <path style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" stroke-dasharray="150" stroke-dashoffset="150" d="m -503.05597,187.16655 c 6.30156,1.57539 7.48006,2.26745 14.64721,2.0203 4.68337,-0.16149 7.79914,-1.02611 11.11168,-4.54568 10.51043,-11.16733 -11.38898,-18.31643 -18.18274,-3.03046 -0.77578,1.7455 -0.56279,12.84339 0,14.14214 6.50612,15.01414 20.7593,7.81972 27.77919,-2.52539 1.4399,-2.12194 2.02031,-4.71404 3.03046,-7.07106" id="path4901"> <animate begin="h.end+0.01s" attributename="stroke-dashoffset" from="150px" to="0px" dur="2s" fill="freeze" id="e"></animate> <animate begin="e.end" attributename="opacity" from="1" to="0.2" dur="2s" fill="freeze" id="eOpacity"></animate> <animate begin="oOpacity.end" attributename="opacity" from="0.2" to="0" dur="0.1s" fill="remove" id="eOpacityFinal"></animate> <set begin="h.end" attributename="opacity" to="1"></set> </path> <path style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" stroke-dasharray="200" stroke-dashoffset="200" d="m -501.03566,200.80361 c 11.64322,7.6781 20.14867,-6.67932 24.24366,-16.16244 1.65295,-3.82789 5.7942,-16.09995 4.54568,-21.71828 -0.76783,-3.45526 -2.7246,-6.56132 -4.54568,-9.59645 -10.0858,-16.80967 -16.78281,-1.60069 -18.68782,10.10152 -1.35371,8.31563 -3.14678,22.86131 -0.50508,31.31473 4.4811,14.33953 15.24399,22.1694 26.76904,8.5863 3.22845,-3.80496 5.30918,-10.30708 7.07107,-15.15229" id="path4903"> <animate begin="e.end+0.01s" attributename="stroke-dashoffset" from="200px" to="0px" dur="2s" fill="freeze" id="l"></animate> <animate begin="l.end" attributename="opacity" from="1" to="0.2" dur="2s" fill="freeze" id="lOpacity"></animate> <animate begin="oOpacity.end" attributename="opacity" from="0.2" to="0" dur="0.1s" fill="remove" id="lOpacityFinal"></animate> <set begin="e.end" attributename="opacity" to="1"></set> </path> <path style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" stroke-dasharray="220" stroke-dashoffset="220" d="m -507.60165,205.3493 c 1.53719,3.07439 0.25722,2.0203 4.54568,2.0203 11.013,0 16.92189,-7.83289 21.21321,-17.67767 1.48054,-3.39653 3.24098,-15.42468 3.03045,-18.68782 -0.31004,-4.80567 -4.96262,-9.4326 -7.57614,-12.62691 -5.01521,-6.1297 -7.93642,-7.18375 -11.61676,1.51523 -3.61721,8.54979 -5.0193,26.86342 -2.0203,35.86042 3.71905,11.15714 12.82566,21.08507 24.74874,11.61675 3.11162,-2.47099 4.71404,-6.39763 7.07106,-9.59645" id="path4905"> <animate begin="l.end+0.01s" attributename="stroke-dashoffset" from="220px" to="0px" dur="2s" fill="freeze" id="l2"></animate> <animate begin="l2.end" attributename="opacity" from="1" to="0.2" dur="2s" fill="freeze" id="l2Opacity"></animate> <animate begin="oOpacity.end" attributename="opacity" from="0.2" to="0" dur="0.1s" fill="remove" id="l2OpacityFinal"></animate> <set begin="l.end" attributename="opacity" to="1"></set> </path> <path style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" stroke-dasharray="120" stroke-dashoffset="120" d="m -483.86307,185.14624 c -4.91638,-10.38229 -25.09874,-2.01585 -21.71828,9.09138 4.18358,13.74606 25.60472,15.81949 31.31473,2.0203 8.05585,-19.4683 -24.24366,-20.3309 -24.24366,-12.12183" id="path4907"> <animate begin="l2.end+0.01s" attributename="stroke-dashoffset" from="100px" to="0px" dur="2s" fill="freeze" id="o"></animate> <animate begin="o.end" attributename="opacity" from="1" to="0" dur="2s" fill="freeze" id="oOpacity"></animate> <set begin="l2.end" attributename="opacity" to="1"></set> </path> </g></svg></db:imagedata>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:figure>
<db:title>Writing fragments of word over the others</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata>
<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" version="1.1" id="svg2" viewbox="0 0 156.63411 96.840738" height="27.330608mm" width="44.205627mm"> <defs id="defs4"></defs> <metadata id="metadata7"> </metadata> <g transform="translate(-19.991064,-156.76845)" id="layer1"> <path id="path3338" stroke-dasharray="700" stroke-dashoffset="700" d="m 20.203051,228.07773 c 7.019038,3.28583 18.296996,2.19868 25.253814,2.0203 27.834023,-0.71369 42.825541,-21.91043 41.416254,-47.98224 -0.323001,-5.97553 -7.191269,-26.45641 -10.606602,-24.74874 -10.259596,5.1298 -9.124503,41.18434 -7.576144,52.02286 1.430314,10.01219 2.165272,8.95563 3.030458,20.20305 0.514408,6.68731 0.563751,12.53255 1.515229,19.19289 0.191958,1.34371 0.355181,2.69156 0.505076,4.04061 0.01859,0.16733 0,0.67344 0,0.50508 0,-2.49868 0.106479,0.64925 -1.010153,-4.04061 -1.138171,-4.78032 -2.879899,-14.31543 -2.525381,-18.68782 0.215131,-2.65328 1.334905,-5.19519 2.525381,-7.57615 1.190476,-2.38095 2.750791,-4.60015 4.545687,-6.56599 2.880061,-3.15435 5.631315,-6.15186 10.101525,-5.55584 7.218425,0.96246 9.158962,18.77507 9.596449,24.24367 0.312712,3.90889 -0.730173,4.84918 1.010153,8.08122 2.037193,3.78335 3.387013,4.88523 8.081223,5.55583 5.47716,0.78246 9.60547,-2.86344 13.63706,-6.06091 2.23856,-1.77541 4.56788,-3.62491 6.06091,-6.06092 4.94323,-8.06526 6.7262,-26.15308 -6.06091,-28.28427 -20.629129,-3.43819 -15.11782,36.04559 11.11167,35.35534 3.30658,-0.087 6.53787,-1.26596 9.59645,-2.52538 25.47885,-10.49129 20.89279,-45.3686 11.61676,-65.65992 -1.54311,-3.37554 -5.32932,-11.06285 -9.09137,-13.13198 -1.47519,-0.81135 -3.36718,0 -5.05077,0 -1.01015,0 -2.08112,-0.34521 -3.03046,0 -9.66282,3.51375 -12.01346,27.64821 -11.11167,36.36549 0.68611,6.63247 4.06851,21.716 8.08122,26.76905 8.89766,11.20446 20.90822,13.3675 34.34518,14.64721 4.58435,0.4366 7.15182,0.9294 10.10153,-2.02031" style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;"> <animate begin="0s;helOpacityFinal.end" attributename="stroke-dashoffset" from="700px" to="0px" dur="2s" fill="freeze" id="hel"></animate> <animate begin="hel.end" attributename="opacity" from="1" to="0.2" dur="3s" fill="freeze" id="helOpacity"></animate> <animate begin="loOpacity.end" attributename="opacity" from="0.2" to="0" dur="0.1s" fill="remove" id="helOpacityFinal"></animate> <set begin="helOpacityFinal.end" attributename="opacity" to="1"></set> </path> <path id="path3344" stroke-dasharray="500" stroke-dashoffset="500" d="m 41.416254,231.61326 c 3.094802,7.92585 11.797035,7.22396 19.192898,7.57614 31.260076,1.48858 50.776938,-24.97346 43.436558,-55.55839 -2.10376,-8.76565 -7.342388,-19.06976 -17.172591,-20.70812 -0.664273,-0.11071 -1.494441,-0.42069 -2.020305,0 -0.542049,0.43364 -0.354492,1.34267 -0.505077,2.0203 -0.522917,2.35313 -1.164511,4.68619 -1.515229,7.07107 -2.708747,18.41948 0.296465,32.36077 6.565992,49.49747 2.682486,7.33213 5.639357,17.22468 15.15229,17.67767 13.38648,0.63746 15.45757,-25.2821 7.07106,-32.82995 -1.55953,-1.40358 -5.88665,6.03367 -4.54568,15.15228 1.46349,9.95173 11.80613,17.40505 21.71828,15.15229 4.41964,-1.00446 11.43406,-9.0399 12.6269,-11.11167 7.10359,-12.33781 -9.7499,-22.51604 -18.18274,-26.26397 -11.05732,-4.91436 -18.5283,7.61904 -12.62691,11.61675 9.07281,6.1461 23.89173,1.97435 32.32488,-1.51523 4.27171,-1.7676 7.7445,-5.05076 11.61676,-7.57614" style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4"> <animate begin="hel.end" attributename="stroke-dashoffset" from="500px" to="0px" dur="3s" fill="freeze" id="lo"></animate> <animate begin="lo.end" attributename="opacity" from="1" to="0" dur="2s" fill="freeze" id="loOpacity"></animate> <set begin="hel.end" attributename="opacity" to="1"></set> </path> </g></svg></db:imagedata>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:section>
<db:section xml:id="language-coverage-of-myscript-text-sdk">
<db:title>Language coverage of MyScript Text SDK</db:title>
<db:para>MyScript Superimposed supports 72 languages.</db:para>
</db:section>
<db:section xml:id="myscript-text-sdk-packages-installation">
<db:title>MyScript Text SDK Packages Installation</db:title>
<db:para>The MyScript delivery team can provide you the packages with various <db:code>.zip</db:code> archives. To access all the code, tools, and resources needed for building your own handwriting application, <db:emphasis role="bold">extract all the packages in the same destination folder</db:emphasis> as <db:code>src/plugins/myscript/sdk</db:code>, where the CMake can pick it up automatically.</db:para>
<db:para>Alternatively, you can extract the packages to any other directory. In this case, the location of the SDK must be passed to the <db:emphasis>configure</db:emphasis> script.</db:para>
<db:programlisting language="cpp" role="bad">configure ... -vkb-myscript-sdk /path/to/myscript/sdk
</db:programlisting>
<db:para>The file hierarchy should look like below:</db:para>
<db:programlisting language="cpp" role="bad">myscript
└── sdk
    ├─── conf
    ├─── doc
    ├─── edk
    ├─── engine
    │   └─── bin
    │       ├─── lin-arm64
    │       │   └─── *.so
    │       ├─── lin-armv7
    │       │   └─── *.so
    │       ├─── lin-armv7hf
    │       │   └─── *.so
    │       ├─── lin-x64
    │       │   └─── *.so
    │       ├─── lin-x86
    │       │   └─── *.so
    │       ├─── win-x64
    │       │   └─── *.dll
    │       ├─── win-x86
    │       │   └─── *.dll
    │       (etc.)
    ├─── rdk
    ├─── resources
    │   ├─── ar
    │   │   └─── *.res
    │   ├─── en_GB
    │   │   └─── *.res
    │   ├─── ja_JP
    │   │   └─── *.res
    │   ├─── ko_KR
    │   │   └─── *.res
    │   ├─── zh_CN
    │   │   └─── *.res
    │   (etc.)
    ├─── tools
    └─── voim
        ├─── api
        ├─── bin
        │   ├─── lin-arm64
        │   │   └─── *.so
        │   ├─── lin-armv7
        │   │   └─── *.so
        │   ├─── lin-armv7hf
        │   │   └─── *.so
        │   ├─── lin-x64
        │   │   └─── *.so
        │   ├─── lin-x86
        │   │   └─── *.so
        │   ├─── win-x64
        │   │   └─── *.dll
        │   ├─── win-x86
        │   │   └─── *.dll
        │   (etc.)
        └─── conf
</db:programlisting>
<db:para>The description for the contents of each directory are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Directory</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>conf</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Contains the language configuration files that the Engine uses to configure language resources.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>doc</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Contains the HTML documentation files. The file <db:code>index.html</db:code> displays the main page.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>edk</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Contains the Engine Development Kit and handwriting programming elements for each supported programming language API, including code samples.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>engine</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Contains libraries of each engine object, depending on the target platforms it could be SO, A, or DLL.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>rdk</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Contains the Resource Development Kit, i.e. tools and examples for creating custom resources.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>resources</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Contains resource files with the /c .res extension. They are binary assets used at run time by the different MyScript technologies to achieve the various recognition tasks.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>tools</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Contains useful programmer tools including InkTool for ink testing.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>voim</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Contains libraries of MyScript Text Input Method. It is an extension SDK to the MyScript Text recognition system and designed for building input methods using handwriting recognition easily and quickly.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="setting-the-certificate-of-myscript-text-sdk">
<db:title>Setting the Certificate of MyScript Text SDK</db:title>
<db:para><db:emphasis role="bold">A valid certificate is mandatory to use the MyScript Text SDK.</db:emphasis> This is a security measure that uniquely identifies you as a legitimate customer of MyScript technologies. The certificate helps MyScript trace customers' identify and the products that have been purchased.</db:para>
<db:para>The certificate is delivered in the <db:code>[your_login].vo.zip package</db:code>. When you unzip this package, the certificate is automatically put in the appropriate location. This ensure that the certificate is instantly working within the services and code samples that you have been provided with.</db:para>
</db:section>
<db:section xml:id="how-to-build-qt-virtual-keyboard-with-myscript-text-sdk">
<db:title>How to build Qt Virtual Keyboard with MyScript Text SDK</db:title>
<db:para>The MyScript integration code is automatically activated when the MyScript Text SDK is detected.</db:para>
<db:para>Language resources for MyScript Text SDK are installed in the <db:emphasis>[qtbase]/qtvirtualkeyboard/myscript</db:emphasis> directory.</db:para>
</db:section>
</db:section>
<db:section xml:id="static-builds">
<db:title>Static builds</db:title>
<db:para>The virtual keyboard can be built and linked statically against the application. This implies that Qt is also built statically (using the -static option in the configure command line).</db:para>
</db:section>
</db:section>
</db:article>
