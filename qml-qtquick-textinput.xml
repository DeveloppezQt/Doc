<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TextInput QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Displays an editable line of text.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TextInput is part of <db:simplelist><db:member>qtquick-visual</db:member><db:member>qtquick-input</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> type displays a single line of editable plain text.</db:para>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> is used to accept a line of text input. Input constraints can be placed on a <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> item (for example, through a <db:link xlink:href="qml-qtquick-textinput.xml#validator-prop">validator</db:link> or <db:link xlink:href="qml-qtquick-textinput.xml#inputMask-prop">inputMask</db:link>), and setting <db:link xlink:href="qml-qtquick-textinput.xml#echoMode-prop">echoMode</db:link> to an appropriate value enables <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> to be used for a password input field.</db:para>
<db:para>On macOS, the Up/Down key bindings for Home/End are explicitly disabled. If you want such bindings (on any platform), you will need to construct them in QML.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-text.xml">Text</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="horizontalAlignment-prop">
<db:title>horizontalAlignment : enumeration</db:title>
<db:bridgehead renderas="sect2">verticalAlignment : enumeration</db:bridgehead><db:para>Sets the horizontal alignment of the text within the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> item's width and height. By default, the text alignment follows the natural alignment of the text, for example text that is read from left to right will be aligned to the left.</db:para>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> does not have vertical alignment, as the natural height is exactly the height of the single line of text. If you set the height manually to something larger, <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> will always be top aligned vertically. You can use anchors to align it however you want within another item.</db:para>
<db:para>The valid values for horizontalAlignment are TextInput.AlignLeft, TextInput.AlignRight and TextInput.AlignHCenter.</db:para>
<db:para>Valid values for verticalAlignment are TextInput.AlignTop (default), TextInput.AlignBottom TextInput.AlignVCenter.</db:para>
<db:para>When using the attached property <db:link xlink:href="qml-qtquick-layoutmirroring.xml#enabled-prop">LayoutMirroring::enabled</db:link> to mirror application layouts, the horizontal alignment of text will also be mirrored. However, the property horizontalAlignment will remain unchanged. To query the effective horizontal alignment of <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>, use the read-only property <db:link xlink:href="qml-qtquick-textinput.xml#effectiveHorizontalAlignment-prop">effectiveHorizontalAlignment</db:link>.</db:para>
</db:section>
<db:section xml:id="bottomPadding-prop">
<db:title>bottomPadding : real</db:title>
<db:bridgehead renderas="sect2">leftPadding : real</db:bridgehead><db:bridgehead renderas="sect2">padding : real</db:bridgehead><db:bridgehead renderas="sect2">rightPadding : real</db:bridgehead><db:bridgehead renderas="sect2">topPadding : real</db:bridgehead><db:para>These properties hold the padding around the content. This space is reserved in addition to the <db:link xlink:href="qml-qtquick-textinput.xml#contentWidth-prop">contentWidth</db:link> and <db:link xlink:href="qml-qtquick-textinput.xml#contentHeight-prop">contentHeight</db:link>.</db:para>
<db:para>The individual padding properties assume the value of the padding property unless they are set explicitly. For example, if padding is set to 4 and leftPadding to 8, 8 will be used as the left padding.</db:para>
<db:note>
<db:para>If an explicit width or height is given to a <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>, care must be taken to ensure it is large enough to accommodate the relevant padding values. For example: if topPadding and bottomPadding are set to 10, but the height of the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> is only set to 20, the text will not have enough vertical space in which to be rendered, and will appear clipped.</db:para>
</db:note>
</db:section>
<db:section xml:id="acceptableInput-prop">
<db:title>[read-only] acceptableInput : bool</db:title>
<db:para>This property is always true unless a validator or input mask has been set. If a validator or input mask has been set, this property will only be true if the current text is acceptable to the validator or input mask as a final string (not as an intermediate string).</db:para>
</db:section>
<db:section xml:id="activeFocusOnPress-prop">
<db:title>activeFocusOnPress : bool</db:title>
<db:para>Whether the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> should gain active focus on a mouse press. By default this is set to true.</db:para>
</db:section>
<db:section xml:id="autoScroll-prop">
<db:title>autoScroll : bool</db:title>
<db:para>Whether the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> should scroll when the text is longer than the width. By default this is set to true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#ensureVisible-method">ensureVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canPaste-prop">
<db:title>[read-only] canPaste : bool</db:title>
<db:para>Returns true if the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> is writable and the content of the clipboard is suitable for pasting into the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
</db:section>
<db:section xml:id="canRedo-prop">
<db:title>[read-only] canRedo : bool</db:title>
<db:para>Returns true if the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> is writable and there are <db:link xlink:href="qml-qtquick-textinput.xml#undo-method">undone</db:link> operations that can be redone.</db:para>
</db:section>
<db:section xml:id="canUndo-prop">
<db:title>[read-only] canUndo : bool</db:title>
<db:para>Returns true if the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> is writable and there are previous operations that can be undone.</db:para>
</db:section>
<db:section xml:id="color-prop">
<db:title>color : color</db:title>
<db:para>The text color.</db:para>
</db:section>
<db:section xml:id="contentHeight-prop">
<db:title>[read-only] contentHeight : real</db:title>
<db:para>Returns the height of the text, including the height past the height that is covered if the text does not fit within the set height.</db:para>
</db:section>
<db:section xml:id="contentWidth-prop">
<db:title>[read-only] contentWidth : real</db:title>
<db:para>Returns the width of the text, including the width past the width which is covered due to insufficient wrapping if <db:link xlink:href="qml-qtquick-textinput.xml#wrapMode-prop">wrapMode</db:link> is set.</db:para>
</db:section>
<db:section xml:id="cursorDelegate-prop">
<db:title>cursorDelegate : Component</db:title>
<db:para>The delegate for the cursor in the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
<db:para>If you set a cursorDelegate for a <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>, this delegate will be used for drawing the cursor instead of the standard cursor. An instance of the delegate will be created and managed by the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> when a cursor is needed, and the x property of the delegate instance will be set so as to be one pixel before the top left of the current character.</db:para>
<db:para>Note that the root item of the delegate component must be a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> or <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> derived item.</db:para>
</db:section>
<db:section xml:id="cursorPosition-prop">
<db:title>cursorPosition : int</db:title>
<db:para>The position of the cursor in the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>. The cursor is positioned between characters.</db:para>
<db:note>
<db:para>The <db:emphasis>characters</db:emphasis> in this case refer to the string of <db:link xlink:href="qchar.xml">QChar</db:link> objects, therefore 16-bit Unicode characters, and the position is considered an index into this string. This does not necessarily correspond to individual graphemes in the writing system, as a single grapheme may be represented by multiple Unicode characters, such as in the case of surrogate pairs, linguistic ligatures or diacritics.</db:para>
</db:note>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml#displayText-prop">displayText</db:link> is different if <db:link xlink:href="qml-qtquick-textinput.xml#echoMode-prop">echoMode</db:link> is set to TextInput.Password: then each <db:link xlink:href="qml-qtquick-textinput.xml#passwordCharacter-prop">passwordCharacter</db:link> is a &quot;narrow&quot; character (the cursorPosition always moves by 1), even if the text in the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> is not.</db:para>
</db:section>
<db:section xml:id="cursorRectangle-prop">
<db:title>[read-only] cursorRectangle : rectangle</db:title>
<db:para>The rectangle where the standard text cursor is rendered within the text input. Read only.</db:para>
<db:para>The position and height of a custom <db:link xlink:href="qml-qtquick-textinput.xml#cursorDelegate-prop">cursorDelegate</db:link> are updated to follow the cursorRectangle automatically when it changes. The width of the delegate is unaffected by changes in the cursor rectangle.</db:para>
</db:section>
<db:section xml:id="cursorVisible-prop">
<db:title>cursorVisible : bool</db:title>
<db:para>Set to true when the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> shows a cursor.</db:para>
<db:para>This property is set and unset when the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> gets active focus, so that other properties can be bound to whether the cursor is currently showing. As it gets set and unset automatically, when you set the value yourself you must keep in mind that your value may be overwritten.</db:para>
<db:para>It can be set directly in script, for example if a KeyProxy might forward keys to it and you desire it to look active when this happens (but without actually giving it active focus).</db:para>
<db:para>It should not be set directly on the item, like in the below QML, as the specified value will be overridden and lost on focus changes.</db:para>
<db:programlisting language="cpp">TextInput {
    text: &quot;Text&quot;
    cursorVisible: false
}
</db:programlisting>
<db:para>In the above snippet the cursor will still become visible when the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> gains active focus.</db:para>
</db:section>
<db:section xml:id="displayText-prop">
<db:title>[read-only] displayText : string</db:title>
<db:para>This is the text displayed in the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-textinput.xml#echoMode-prop">echoMode</db:link> is set to TextInput::Normal, this holds the same value as the <db:link xlink:href="qml-qtquick-textinput.xml#text-prop">TextInput::text</db:link> property. Otherwise, this property holds the text visible to the user, while the <db:link xlink:href="qml-qtquick-textinput.xml#text-prop">text</db:link> property holds the actual entered text.</db:para>
<db:note>
<db:para>Unlike the <db:link xlink:href="qml-qtquick-textinput.xml#text-prop">TextInput::text</db:link> property, this contains partial text input from an input method.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#preeditText-prop">preeditText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="echoMode-prop">
<db:title>echoMode : enumeration</db:title>
<db:para>Specifies how the text should be displayed in the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>TextInput.Normal</db:para>
</db:td>
<db:td>
<db:para>Displays the text as it is. (Default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.Password</db:para>
</db:td>
<db:td>
<db:para>Displays the <db:link xlink:href="qml-qtquick-textinput.xml#passwordCharacter-prop">passwordCharacter</db:link> instead of the actual characters. While editing, newly entered characters are displayed in clear text for a short period specified by the <db:link xlink:href="qml-qtquick-textinput.xml#passwordMaskDelay-prop">passwordMaskDelay</db:link> property.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.NoEcho</db:para>
</db:td>
<db:td>
<db:para>Displays nothing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.PasswordEchoOnEdit</db:para>
</db:td>
<db:td>
<db:para>Content is masked as with TextInput.Password. During editing, newly entered characters are displayed in clear text as long as the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> has active focus.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="effectiveHorizontalAlignment-prop">
<db:title>[read-only] effectiveHorizontalAlignment : enumeration</db:title>
<db:para>When using the attached property <db:link xlink:href="qml-qtquick-layoutmirroring.xml#enabled-prop">LayoutMirroring::enabled</db:link> to mirror application layouts, the horizontal alignment of text will also be mirrored. However, the property <db:link xlink:href="qml-qtquick-textinput.xml#horizontalAlignment-prop">horizontalAlignment</db:link> will remain unchanged. To query the effective horizontal alignment of <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>, use the read-only property effectiveHorizontalAlignment.</db:para>
</db:section>
<db:section xml:id="font.bold-prop">
<db:title>font.bold : bool</db:title>
<db:para>Sets whether the font weight is bold.</db:para>
</db:section>
<db:section xml:id="font.capitalization-prop">
<db:title>font.capitalization : enumeration</db:title>
<db:para>Sets the capitalization for the text.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Font.MixedCase</db:para>
</db:td>
<db:td>
<db:para>the normal case: no capitalization change is applied</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.AllUppercase</db:para>
</db:td>
<db:td>
<db:para>alters the text to be rendered in all uppercase type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.AllLowercase</db:para>
</db:td>
<db:td>
<db:para>alters the text to be rendered in all lowercase type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.SmallCaps</db:para>
</db:td>
<db:td>
<db:para>alters the text to be rendered in small-caps type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Capitalize</db:para>
</db:td>
<db:td>
<db:para>alters the text to be rendered with the first character of each word as an uppercase character</db:para>
<db:programlisting language="qml">TextInput { text: &quot;Hello&quot;; font.capitalization: Font.AllLowercase }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="font.contextFontMerging-prop">
<db:title>[since 6.8] font.contextFontMerging : bool</db:title>
<db:para>If the selected font does not contain a certain character, Qt automatically chooses a similar-looking fallback font that contains the character. By default this is done on a character-by-character basis.</db:para>
<db:para>This means that in certain uncommon cases, many different fonts may be used to represent one string of text even if it's in the same script. Setting contextFontMerging to true will try finding the fallback font that matches the largest subset of the input string instead. This will be more expensive for strings where missing glyphs occur, but may give more consistent results. By default, contextFontMerging is false.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::StyleStrategy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font.family-prop">
<db:title>font.family : string</db:title>
<db:para>Sets the family name of the font.</db:para>
<db:para>The family name is case insensitive and may optionally include a foundry name, e.g. &quot;Helvetica [Cronyx]&quot;. If the family is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.</db:para>
</db:section>
<db:section xml:id="font.features-prop">
<db:title>[since 6.6] font.features : object</db:title>
<db:para>Applies integer values to specific OpenType features when shaping the text based on the contents in <db:code role="parameter">features</db:code>. This provides advanced access to the font shaping process, and can be used to support font features that are otherwise not covered in the API.</db:para>
<db:para>The font features are represented by a map from four-letter tags to integer values. This integer value passed along with the tag in most cases represents a boolean value: A zero value means the feature is disabled, and a non-zero value means it is enabled. For certain font features, however, it may have other interpretations. For example, when applied to the salt feature, the value is an index that specifies the stylistic alternative to use.</db:para>
<db:para>For example, the frac font feature will convert diagonal fractions separated with a slash (such as 1/2) with a different representation. Typically this will involve baking the full fraction into a single character width (such as ½).</db:para>
<db:para>If a font supports the frac feature, then it can be enabled in the shaper as in the following code:</db:para>
<db:programlisting language="qml">Text {
    text: &quot;One divided by two is 1/2&quot;
    font.family: &quot;MyFractionFont&quot;
    font.features: { &quot;frac&quot;: 1 }
}
</db:programlisting>
<db:para>Multiple features can be assigned values in the same mapping. For instance, if you would like to also disable kerning for the font, you can explicitly disable this as follows:</db:para>
<db:programlisting language="qml">Text {
    text: &quot;One divided by two is 1/2&quot;
    font.family: &quot;MyFractionFont&quot;
    font.features: { &quot;frac&quot;: 1, &quot;kern&quot;: 0 }
}
</db:programlisting>
<db:para>You can also collect the font properties in an object:</db:para>
<db:programlisting language="qml">Text {
    text: &quot;One divided by two is 1/2&quot;
    font: {
        family: &quot;MyFractionFont&quot;
        features: { &quot;frac&quot;: 1, &quot;kern&quot;: 0 }
    }
}
</db:programlisting>
<db:note>
<db:para>By default, Qt will enable and disable certain font features based on other font properties. In particular, the kern feature will be enabled/disabled depending on the <db:link xlink:href="qml-qtquick-textinput.xml#font.kerning-prop">font.kerning</db:link> property of the <db:link xlink:href="qfont.xml">QFont</db:link>. In addition, all ligature features (liga, clig, dlig, hlig) will be disabled if a <db:link xlink:href="qml-qtquick-textinput.xml#font.letterSpacing-prop">font.letterSpacing</db:link> is set, but only for writing systems where the use of ligature is cosmetic. For writing systems where ligatures are required, the features will remain in their default state. The values set using font.features will override the default behavior. If, for instance, &quot;kern&quot; is set to 1, then kerning will always be enabled, regardless of whether the <db:link xlink:href="qml-qtquick-textinput.xml#font.kerning-prop">font.kerning</db:link> property is set to false. Similarly, if it is set to 0, it will always be disabled.</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setFeature">QFont::setFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font.hintingPreference-prop">
<db:title>font.hintingPreference : enumeration</db:title>
<db:para>Sets the preferred hinting on the text. This is a hint to the underlying text rendering system to use a certain level of hinting, and has varying support across platforms. See the table in the documentation for <db:link xlink:href="qfont.xml#HintingPreference-enum">QFont::HintingPreference</db:link> for more details.</db:para>
<db:note>
<db:para>This property only has an effect when used together with render type <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.NativeRendering.</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Font.PreferDefaultHinting</db:para>
</db:td>
<db:td>
<db:para>Use the default hinting level for the target platform.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.PreferNoHinting</db:para>
</db:td>
<db:td>
<db:para>If possible, render text without hinting the outlines of the glyphs. The text layout will be typographically accurate, using the same metrics as are used e.g. when printing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.PreferVerticalHinting</db:para>
</db:td>
<db:td>
<db:para>If possible, render text with no horizontal hinting, but align glyphs to the pixel grid in the vertical direction. The text will appear crisper on displays where the density is too low to give an accurate rendering of the glyphs. But since the horizontal metrics of the glyphs are unhinted, the text's layout will be scalable to higher density devices (such as printers) without impacting details such as line breaks.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.PreferFullHinting</db:para>
</db:td>
<db:td>
<db:para>If possible, render text with hinting in both horizontal and vertical directions. The text will be altered to optimize legibility on the target device, but since the metrics will depend on the target size of the text, the positions of glyphs, line breaks, and other typographical detail will not scale, meaning that a text layout may look different on devices with different pixel densities.</db:para>
<db:programlisting language="qml">TextInput { text: &quot;Hello&quot;; renderType: TextInput.NativeRendering; font.hintingPreference: Font.PreferVerticalHinting }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="font.italic-prop">
<db:title>font.italic : bool</db:title>
<db:para>Sets whether the font has an italic style.</db:para>
</db:section>
<db:section xml:id="font.kerning-prop">
<db:title>font.kerning : bool</db:title>
<db:para>Enables or disables the kerning OpenType feature when shaping the text. Disabling this may improve performance when creating or changing the text, at the expense of some cosmetic features. The default value is true.</db:para>
<db:programlisting language="qml">TextInput { text: &quot;OATS FLAVOUR WAY&quot;; font.kerning: false }
</db:programlisting>
</db:section>
<db:section xml:id="font.letterSpacing-prop">
<db:title>font.letterSpacing : real</db:title>
<db:para>Sets the letter spacing for the font.</db:para>
<db:para>Letter spacing changes the default spacing between individual letters in the font. A positive value increases the letter spacing by the corresponding pixels; a negative value decreases the spacing.</db:para>
</db:section>
<db:section xml:id="font.pixelSize-prop">
<db:title>font.pixelSize : int</db:title>
<db:para>Sets the font size in pixels.</db:para>
<db:para>Using this function makes the font device dependent. Use pointSize to set the size of the font in a device independent manner.</db:para>
</db:section>
<db:section xml:id="font.pointSize-prop">
<db:title>font.pointSize : real</db:title>
<db:para>Sets the font size in points. The point size must be greater than zero.</db:para>
</db:section>
<db:section xml:id="font.preferShaping-prop">
<db:title>font.preferShaping : bool</db:title>
<db:para>Sometimes, a font will apply complex rules to a set of characters in order to display them correctly. In some writing systems, such as Brahmic scripts, this is required in order for the text to be legible, but in e.g. Latin script, it is merely a cosmetic feature. Setting the preferShaping property to false will disable all such features when they are not required, which will improve performance in most cases.</db:para>
<db:para>The default value is true.</db:para>
<db:programlisting language="qml">TextInput { text: &quot;Some text&quot;; font.preferShaping: false }
</db:programlisting>
</db:section>
<db:section xml:id="font.preferTypoLineMetrics-prop">
<db:title>[since 6.8] font.preferTypoLineMetrics : bool</db:title>
<db:para>competing sets of the vertical line metrics that provide the <db:link xlink:href="qfontmetricsf.xml#ascent">ascent</db:link>, <db:link xlink:href="qfontmetricsf.xml#descent">descent</db:link> and <db:link xlink:href="qfontmetricsf.xml#leading">leading</db:link> of the font. These are often referred to as the <db:link xlink:href="https://learn.microsoft.com/en-us/typography/opentype/spec/os2#uswinascent">win</db:link> (Windows) metrics and the <db:link xlink:href="https://learn.microsoft.com/en-us/typography/opentype/spec/os2#sta">typo</db:link> (typographical) metrics. While the specification recommends using the typo metrics for line spacing, many applications prefer the win metrics unless the USE_TYPO_METRICS flag is set in the <db:link xlink:href="https://learn.microsoft.com/en-us/typography/opentype/spec/os2#fsselection">fsSelection</db:link> field of the font. For backwards-compatibility reasons, this is also the case for Qt applications. This is not an issue for fonts that set the USE_TYPO_METRICS flag to indicate that the typo metrics are valid, nor for fonts where the win metrics and typo metrics match up. However, for certain fonts the win metrics may be larger than the preferable line spacing and the USE_TYPO_METRICS flag may be unset by mistake. For such fonts, setting font.preferTypoLineMetrics may give superior results.</db:para>
<db:para>By default, preferTypoLineMetrics is false.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::StyleStrategy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font.strikeout-prop">
<db:title>font.strikeout : bool</db:title>
<db:para>Sets whether the font has a strikeout style.</db:para>
</db:section>
<db:section xml:id="font.styleName-prop">
<db:title>font.styleName : string</db:title>
<db:para>Sets the style name of the font.</db:para>
<db:para>The style name is case insensitive. If set, the font will be matched against style name instead of the font properties <db:link xlink:href="qml-qtquick-textinput.xml#font.weight-prop">font.weight</db:link>, <db:link xlink:href="qml-qtquick-textinput.xml#font.bold-prop">font.bold</db:link> and <db:link xlink:href="qml-qtquick-textinput.xml#font.italic-prop">font.italic</db:link>.</db:para>
</db:section>
<db:section xml:id="font.underline-prop">
<db:title>font.underline : bool</db:title>
<db:para>Sets whether the text is underlined.</db:para>
</db:section>
<db:section xml:id="font.variableAxes-prop">
<db:title>[since 6.7] font.variableAxes : object</db:title>
<db:para>Applies floating point values to variable axes in variable fonts.</db:para>
<db:para>Variable fonts provide a way to store multiple variations (with different weights, widths or styles) in the same font file. The variations are given as floating point values for a pre-defined set of parameters, called &quot;variable axes&quot;. Specific instances are typically given names by the font designer, and, in Qt, these can be selected using setStyleName() just like traditional sub-families.</db:para>
<db:para>In some cases, it is also useful to provide arbitrary values for the different axes. For instance, if a font has a Regular and Bold sub-family, you may want a weight in-between these. You could then manually request this by supplying a custom value for the &quot;wght&quot; axis in the font.</db:para>
<db:programlisting language="qml">Text {
    text: &quot;Foobar&quot;
    font.family: &quot;MyVariableFont&quot;
    font.variableAxes: { &quot;wght&quot;: (Font.Normal + Font.Bold) / 2.0 }
}
</db:programlisting>
<db:para>If the &quot;wght&quot; axis is supported by the font and the given value is within its defined range, a font corresponding to the weight 550.0 will be provided.</db:para>
<db:para>There are a few standard axes than many fonts provide, such as &quot;wght&quot; (weight), &quot;wdth&quot; (width), &quot;ital&quot; (italic) and &quot;opsz&quot; (optical size). They each have indivdual ranges defined in the font itself. For instance, &quot;wght&quot; may span from 100 to 900 (<db:link xlink:href="qfont.xml#Weight-enum">QFont::Thin</db:link> to <db:link xlink:href="qfont.xml#Weight-enum">QFont::Black</db:link>) whereas &quot;ital&quot; can span from 0 to 1 (from not italic to fully italic).</db:para>
<db:para>A font may also choose to define custom axes; the only limitation is that the name has to meet the requirements for a <db:link xlink:href="qfont-tag.xml">QFont::Tag</db:link> (sequence of four latin-1 characters.)</db:para>
<db:para>By default, no variable axes are set.</db:para>
<db:note>
<db:para>On Windows, variable axes are not supported if the optional GDI font backend is in use.</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setVariableAxis">QFont::setVariableAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font.weight-prop">
<db:title>font.weight : int</db:title>
<db:para>The requested weight of the font. The weight requested must be an integer between 1 and 1000, or one of the predefined values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Font.Thin</db:para>
</db:td>
<db:td>
<db:para>100</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.ExtraLight</db:para>
</db:td>
<db:td>
<db:para>200</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Light</db:para>
</db:td>
<db:td>
<db:para>300</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Normal</db:para>
</db:td>
<db:td>
<db:para>400 (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Medium</db:para>
</db:td>
<db:td>
<db:para>500</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.DemiBold</db:para>
</db:td>
<db:td>
<db:para>600</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Bold</db:para>
</db:td>
<db:td>
<db:para>700</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.ExtraBold</db:para>
</db:td>
<db:td>
<db:para>800</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Black</db:para>
</db:td>
<db:td>
<db:para>900</db:para>
<db:programlisting language="qml">TextInput { text: &quot;Hello&quot;; font.weight: Font.DemiBold }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="font.wordSpacing-prop">
<db:title>font.wordSpacing : real</db:title>
<db:para>Sets the word spacing for the font.</db:para>
<db:para>Word spacing changes the default spacing between individual words. A positive value increases the word spacing by a corresponding amount of pixels, while a negative value decreases the inter-word spacing accordingly.</db:para>
</db:section>
<db:section xml:id="inputMask-prop">
<db:title>inputMask : string</db:title>
<db:para>Allows you to set an input mask on the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>, restricting the allowable text inputs. See <db:link xlink:href="qlineedit.xml#inputMask-prop">QLineEdit::inputMask</db:link> for further details, as the exact same mask strings are used by <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#acceptableInput-prop">acceptableInput</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#validator-prop">validator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodComposing-prop">
<db:title>[read-only] inputMethodComposing : bool</db:title>
<db:para>This property holds whether the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> has partial text input from an input method.</db:para>
<db:para>While it is composing an input method may rely on mouse or key events from the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> to edit or commit the partial text. This property can be used to determine when to disable events handlers that may interfere with the correct operation of an input method.</db:para>
</db:section>
<db:section xml:id="inputMethodHints-prop">
<db:title>inputMethodHints : enumeration</db:title>
<db:para>Provides hints to the input method about the expected content of the text input and how it should operate.</db:para>
<db:para>The value is a bit-wise combination of flags, or Qt.ImhNone if no hints are set.</db:para>
<db:para>Flags that alter behaviour are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Qt.ImhHiddenText</db:para>
</db:td>
<db:td>
<db:para>Characters should be hidden, as is typically used when entering passwords.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhSensitiveData</db:para>
</db:td>
<db:td>
<db:para>Typed text should not be stored by the active input method in any persistent storage like predictive user dictionary.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhNoAutoUppercase</db:para>
</db:td>
<db:td>
<db:para>The input method should not try to automatically switch to upper case when a sentence ends.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhPreferNumbers</db:para>
</db:td>
<db:td>
<db:para>Numbers are preferred (but not required).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhPreferUppercase</db:para>
</db:td>
<db:td>
<db:para>Upper case letters are preferred (but not required).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhPreferLowercase</db:para>
</db:td>
<db:td>
<db:para>Lower case letters are preferred (but not required).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhNoPredictiveText</db:para>
</db:td>
<db:td>
<db:para>Do not use predictive text (i.e. dictionary lookup) while typing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhDate</db:para>
</db:td>
<db:td>
<db:para>The text editor functions as a date field.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhTime</db:para>
</db:td>
<db:td>
<db:para>The text editor functions as a time field.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Flags that restrict input (exclusive flags) are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Qt.ImhDigitsOnly</db:para>
</db:td>
<db:td>
<db:para>Only digits are allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhFormattedNumbersOnly</db:para>
</db:td>
<db:td>
<db:para>Only number input is allowed. This includes decimal point and minus sign.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhUppercaseOnly</db:para>
</db:td>
<db:td>
<db:para>Only upper case letter input is allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhLowercaseOnly</db:para>
</db:td>
<db:td>
<db:para>Only lower case letter input is allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhDialableCharactersOnly</db:para>
</db:td>
<db:td>
<db:para>Only characters suitable for phone dialing are allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhEmailCharactersOnly</db:para>
</db:td>
<db:td>
<db:para>Only characters suitable for email addresses are allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ImhUrlCharactersOnly</db:para>
</db:td>
<db:td>
<db:para>Only characters suitable for URLs are allowed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Masks:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Qt.ImhExclusiveInputMask</db:para>
</db:td>
<db:td>
<db:para>This mask yields nonzero if any of the exclusive flags are used.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="length-prop">
<db:title>[read-only] length : int</db:title>
<db:para>Returns the total number of characters in the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> item.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> has an <db:link xlink:href="qml-qtquick-textinput.xml#inputMask-prop">inputMask</db:link> the length will include mask characters and may differ from the length of the string returned by the <db:link xlink:href="qml-qtquick-textinput.xml#text-prop">text</db:link> property.</db:para>
<db:para>This property can be faster than querying the length the <db:link xlink:href="qml-qtquick-textinput.xml#text-prop">text</db:link> property as it doesn't require any copying or conversion of the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>'s internal string data.</db:para>
</db:section>
<db:section xml:id="maximumLength-prop">
<db:title>maximumLength : int</db:title>
<db:para>The maximum permitted length of the text in the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
<db:para>If the text is too long, it is truncated at the limit.</db:para>
<db:para>By default, this property contains a value of 32767.</db:para>
</db:section>
<db:section xml:id="mouseSelectionMode-prop">
<db:title>mouseSelectionMode : enumeration</db:title>
<db:para>Specifies how text should be selected using a mouse.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>TextInput.SelectCharacters</db:para>
</db:td>
<db:td>
<db:para>(default) The selection is updated with individual characters.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.SelectWords</db:para>
</db:td>
<db:td>
<db:para>The selection is updated with whole words.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property only applies when <db:link xlink:href="qml-qtquick-textinput.xml#selectByMouse-prop">selectByMouse</db:link> is true.</db:para>
</db:section>
<db:section xml:id="overwriteMode-prop">
<db:title>overwriteMode : bool</db:title>
<db:para>Whether text entered by the user will overwrite existing text.</db:para>
<db:para>As with many text editors, the text editor widget can be configured to insert or overwrite existing text with new text entered by the user.</db:para>
<db:para>If this property is true, existing text is overwritten, character-for-character by new text; otherwise, text is inserted at the cursor position, displacing existing text.</db:para>
<db:para>By default, this property is false (new text does not overwrite existing text).</db:para>
</db:section>
<db:section xml:id="passwordCharacter-prop">
<db:title>passwordCharacter : string</db:title>
<db:para>This is the character displayed when <db:link xlink:href="qml-qtquick-textinput.xml#echoMode-prop">echoMode</db:link> is set to Password or PasswordEchoOnEdit. By default it is the password character used by the platform theme.</db:para>
<db:para>If this property is set to a string with more than one character, the first character is used. If the string is empty, the value is ignored and the property is not set.</db:para>
</db:section>
<db:section xml:id="passwordMaskDelay-prop">
<db:title>passwordMaskDelay : int</db:title>
<db:para>Sets the delay before visible character is masked with password character, in milliseconds.</db:para>
<db:para>The reset method will be called by assigning undefined.</db:para>
</db:section>
<db:section xml:id="persistentSelection-prop">
<db:title>persistentSelection : bool</db:title>
<db:para>Whether the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> should keep its selection when it loses active focus to another item in the scene. By default this is set to false;</db:para>
</db:section>
<db:section xml:id="preeditText-prop">
<db:title>[read-only] preeditText : string</db:title>
<db:para>This property contains partial text input from an input method.</db:para>
<db:para>To turn off partial text that results from predictions, set the Qt.ImhNoPredictiveText flag in <db:link xlink:href="qml-qtquick-textinput.xml#inputMethodHints-prop">inputMethodHints</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#displayText-prop">displayText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#inputMethodHints-prop">inputMethodHints</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>readOnly : bool</db:title>
<db:para>Sets whether user input can modify the contents of the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
<db:para>If readOnly is set to true, then user input will not affect the text property. Any bindings or attempts to set the text property will still work.</db:para>
</db:section>
<db:section xml:id="renderType-prop">
<db:title>renderType : enumeration</db:title>
<db:para>Override the default rendering type for this component.</db:para>
<db:para>Supported render types are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>TextInput.QtRendering</db:para>
</db:td>
<db:td>
<db:para>Text is rendered using a scalable distance field for each glyph.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.NativeRendering</db:para>
</db:td>
<db:td>
<db:para>Text is rendered using a platform-specific technique.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.CurveRendering</db:para>
</db:td>
<db:td>
<db:para>Text is rendered using a curve rasterizer running directly on the graphics hardware. (Introduced in Qt 6.7.0.)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Select TextInput.NativeRendering if you prefer text to look native on the target platform and do not require advanced features such as transformation of the text. Using such features in combination with the NativeRendering render type will lend poor and sometimes pixelated results.</db:para>
<db:para>Both TextInput.QtRendering and TextInput.CurveRendering are hardware-accelerated techniques. QtRendering is the faster of the two, but uses more memory and will exhibit rendering artifacts at large sizes. CurveRendering should be considered as an alternative in cases where QtRendering does not give good visual results or where reducing graphics memory consumption is a priority.</db:para>
<db:para>The default rendering type is determined by <db:link xlink:href="qquickwindow.xml#textRenderType">QQuickWindow::textRenderType</db:link>().</db:para>
</db:section>
<db:section xml:id="selectByMouse-prop">
<db:title>selectByMouse : bool</db:title>
<db:para>Defaults to true.</db:para>
<db:para>If true, the user can use the mouse to select text in the usual way.</db:para>
<db:note>
<db:para>In versions prior to 6.4, the default was false; but if you enabled this property, you could also select text on a touchscreen by dragging your finger across it. This interfered with flicking when <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> was used inside a Flickable. For consistency with TextField, selectByMouse now really means what it says: if true, you can select text by dragging <db:emphasis>only</db:emphasis> with a mouse. If this change does not suit your application, you can set selectByMouse to false, or import an older API version (for example import QtQuick 6.3) to revert to the previous behavior. The option to revert behavior by changing the import version will be removed in a later version of Qt.</db:para>
</db:note>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : string</db:title>
<db:para>This read-only property provides the text currently selected in the text input.</db:para>
<db:para>It is equivalent to the following snippet, but is faster and easier to use.</db:para>
<db:programlisting language="qml">myTextInput.text.toString().substring(myTextInput.selectionStart,
    myTextInput.selectionEnd);
</db:programlisting>
</db:section>
<db:section xml:id="selectedTextColor-prop">
<db:title>selectedTextColor : color</db:title>
<db:para>The highlighted text color, used in selections.</db:para>
</db:section>
<db:section xml:id="selectionColor-prop">
<db:title>selectionColor : color</db:title>
<db:para>The text highlight color, used behind selections.</db:para>
</db:section>
<db:section xml:id="selectionEnd-prop">
<db:title>[read-only] selectionEnd : int</db:title>
<db:para>The cursor position after the last character in the current selection.</db:para>
<db:para>This property is read-only. To change the selection, use select(start,end), <db:link xlink:href="qml-qtquick-textinput.xml#selectAll-method">selectAll</db:link>(), or <db:link xlink:href="qml-qtquick-textinput.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#selectionStart-prop">selectionStart</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#cursorPosition-prop">cursorPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#selectedText-prop">selectedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionStart-prop">
<db:title>[read-only] selectionStart : int</db:title>
<db:para>The cursor position before the first character in the current selection.</db:para>
<db:para>This property is read-only. To change the selection, use select(start,end), <db:link xlink:href="qml-qtquick-textinput.xml#selectAll-method">selectAll</db:link>(), or <db:link xlink:href="qml-qtquick-textinput.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#selectionEnd-prop">selectionEnd</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#cursorPosition-prop">cursorPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#selectedText-prop">selectedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:para>The text in the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
<db:para>Note that some keyboards use a predictive function. In this case, the text being composed by the input method is not part of this property. The part of the text related to the predictions is underlined and stored in the <db:link xlink:href="qml-qtquick-textinput.xml#preeditText-prop">preeditText</db:link> property. To get whole text displayed in the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> use <db:link xlink:href="qml-qtquick-textinput.xml#displayText-prop">displayText</db:link> property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#clear-method">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#displayText-prop">displayText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#preeditText-prop">preeditText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validator-prop">
<db:title>validator : Validator</db:title>
<db:para>Allows you to set a validator on the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>. When a validator is set the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> will only accept input which leaves the text property in an acceptable or intermediate state. The accepted signal will only be sent if the text is in an acceptable state when enter is pressed.</db:para>
<db:para>Currently supported validators are <db:link xlink:href="qml-qtquick-intvalidator.xml">IntValidator</db:link>, <db:link xlink:href="qml-qtquick-doublevalidator.xml">DoubleValidator</db:link> and <db:link xlink:href="qml-qtquick-regularexpressionvalidator.xml">RegularExpressionValidator</db:link>. An example of using validators is shown below, which allows input of integers between 11 and 31 into the text input:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
TextInput{
    validator: IntValidator{bottom: 11; top: 31;}
    focus: true
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#acceptableInput-prop">acceptableInput</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#inputMask-prop">inputMask</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wrapMode-prop">
<db:title>wrapMode : enumeration</db:title>
<db:para>Set this property to wrap the text to the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> item's width. The text will only wrap if an explicit width has been set.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>TextInput.NoWrap</db:para>
</db:td>
<db:td>
<db:para>(default) no wrapping will be performed. If the text contains insufficient newlines, then <db:link xlink:href="qml-qtquick-textinput.xml#contentWidth-prop">contentWidth</db:link> will exceed a set width.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.WordWrap</db:para>
</db:td>
<db:td>
<db:para>wrapping is done on word boundaries only. If a word is too long, <db:link xlink:href="qml-qtquick-textinput.xml#contentWidth-prop">contentWidth</db:link> will exceed a set width.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.WrapAnywhere</db:para>
</db:td>
<db:td>
<db:para>wrapping is done at any point on a line, even if it occurs in the middle of a word.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.Wrap</db:para>
</db:td>
<db:td>
<db:para>if possible, wrapping occurs at a word boundary; otherwise it will occur at the appropriate point on the line, even in the middle of a word.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default is <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.NoWrap. If you set a width, consider using <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.Wrap.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="accepted-signal">
<db:title>accepted()</db:title>
<db:para>This signal is emitted when the Return or Enter key is pressed. Note that if there is a <db:link xlink:href="qml-qtquick-textinput.xml#validator-prop">validator</db:link> or <db:link xlink:href="qml-qtquick-textinput.xml#inputMask-prop">inputMask</db:link> set on the text input, the signal will only be emitted if the input is in an acceptable state.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="editingFinished-signal">
<db:title>editingFinished()</db:title>
<db:para>This signal is emitted when the Return or Enter key is pressed or the text input loses focus. Note that if there is a validator or <db:link xlink:href="qml-qtquick-textinput.xml#inputMask-prop">inputMask</db:link> set on the text input and enter/return is pressed, this signal will only be emitted if the input follows the <db:link xlink:href="qml-qtquick-textinput.xml#inputMask-prop">inputMask</db:link> and the validator returns an acceptable state.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onEditingFinished</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="textEdited-signal">
<db:title>textEdited()</db:title>
<db:para>This signal is emitted whenever the text is edited. Unlike textChanged(), this signal is not emitted when the text is changed programmatically, for example, by changing the value of the text property or by calling clear().</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onTextEdited</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="clear-method">
<db:title>clear()</db:title>
<db:para>Clears the contents of the text input and resets partial text input from an input method.</db:para>
<db:para>Use this method instead of setting the <db:link xlink:href="qml-qtquick-textinput.xml#text-prop">text</db:link> property to an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#reset">QInputMethod::reset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copy-method">
<db:title>copy()</db:title>
<db:para>Copies the currently selected text to the system clipboard.</db:para>
<db:note>
<db:para>If the echo mode is set to a mode other than Normal then copy will not work. This is to prevent using copy as a method of bypassing password features of the line control.</db:para>
</db:note>
</db:section>
<db:section xml:id="cut-method">
<db:title>cut()</db:title>
<db:para>Moves the currently selected text to the system clipboard.</db:para>
<db:note>
<db:para>If the echo mode is set to a mode other than Normal then cut will not work. This is to prevent using cut as a method of bypassing password features of the line control.</db:para>
</db:note>
</db:section>
<db:section xml:id="deselect-method">
<db:title>deselect()</db:title>
<db:para>Removes active text selection.</db:para>
</db:section>
<db:section xml:id="ensureVisible-method">
<db:title>ensureVisible(int <db:emphasis>position</db:emphasis>)</db:title>
<db:para>Scrolls the contents of the text input so that the specified character <db:code role="parameter">position</db:code> is visible inside the boundaries of the text input.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#autoScroll-prop">autoScroll</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getText-method">
<db:title>string getText(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Returns the section of text that is between the <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> has an <db:link xlink:href="qml-qtquick-textinput.xml#inputMask-prop">inputMask</db:link> the length will include mask characters.</db:para>
</db:section>
<db:section xml:id="insert-method">
<db:title>insert(int <db:emphasis>position</db:emphasis>, string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">text</db:code> into the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> at <db:code role="parameter">position</db:code>.</db:para>
</db:section>
<db:section xml:id="isRightToLeft-method">
<db:title>isRightToLeft(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Returns true if the natural reading direction of the editor text found between positions <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> is right to left.</db:para>
</db:section>
<db:section xml:id="moveCursorSelection-method">
<db:title>moveCursorSelection(int <db:emphasis>position</db:emphasis>, SelectionMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Moves the cursor to <db:code role="parameter">position</db:code> and updates the selection according to the optional <db:code role="parameter">mode</db:code> parameter. (To only move the cursor, set the <db:link xlink:href="qml-qtquick-textinput.xml#cursorPosition-prop">cursorPosition</db:link> property.)</db:para>
<db:para>When this method is called it additionally sets either the <db:link xlink:href="qml-qtquick-textinput.xml#selectionStart-prop">selectionStart</db:link> or the <db:link xlink:href="qml-qtquick-textinput.xml#selectionEnd-prop">selectionEnd</db:link> (whichever was at the previous cursor position) to the specified position. This allows you to easily extend and contract the selected text range.</db:para>
<db:para>The selection mode specifies whether the selection is updated on a per character or a per word basis. If not specified the selection mode will default to TextInput.SelectCharacters.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>TextInput.SelectCharacters</db:para>
</db:td>
<db:td>
<db:para>Sets either the <db:link xlink:href="qml-qtquick-textinput.xml#selectionStart-prop">selectionStart</db:link> or <db:link xlink:href="qml-qtquick-textinput.xml#selectionEnd-prop">selectionEnd</db:link> (whichever was at the previous cursor position) to the specified position.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.SelectWords</db:para>
</db:td>
<db:td>
<db:para>Sets the <db:link xlink:href="qml-qtquick-textinput.xml#selectionStart-prop">selectionStart</db:link> and <db:link xlink:href="qml-qtquick-textinput.xml#selectionEnd-prop">selectionEnd</db:link> to include all words between the specified position and the previous cursor position. Words partially in the range are included.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, take this sequence of calls:</db:para>
<db:programlisting language="cpp">cursorPosition = 5
moveCursorSelection(9, TextInput.SelectCharacters)
moveCursorSelection(7, TextInput.SelectCharacters)
</db:programlisting>
<db:para>This moves the cursor to position 5, extend the selection end from 5 to 9 and then retract the selection end from 9 to 7, leaving the text from position 5 to 7 selected (the 6th and 7th characters).</db:para>
<db:para>The same sequence with <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.SelectWords will extend the selection start to a word boundary before or on position 5 and extend the selection end to a word boundary on or past position 9.</db:para>
</db:section>
<db:section xml:id="paste-method">
<db:title>paste()</db:title>
<db:para>Replaces the currently selected text by the contents of the system clipboard.</db:para>
</db:section>
<db:section xml:id="positionAt-method">
<db:title>int positionAt(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, CursorPosition <db:emphasis>position</db:emphasis>)</db:title>
<db:para>This function returns the character position at <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> pixels from the top left of the textInput. Position 0 is before the first character, position 1 is after the first character but before the second, and so on until position text.length, which is after all characters.</db:para>
<db:para>This means that for all x values before the first character this function returns 0, and for all x values after the last character this function returns text.length. If the y value is above the text the position will be that of the nearest character on the first line and if it is below the text the position of the nearest character on the last line will be returned.</db:para>
<db:para>The cursor <db:code role="parameter">position</db:code> parameter specifies how the cursor position should be resolved:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>TextInput.CursorBetweenCharacters</db:para>
</db:td>
<db:td>
<db:para>Returns the position between characters that is nearest x. This is the default value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>TextInput.CursorOnCharacter</db:para>
</db:td>
<db:td>
<db:para>Returns the position before the character that is nearest x.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="positionToRectangle-method">
<db:title>rect positionToRectangle(int <db:emphasis>pos</db:emphasis>)</db:title>
<db:para>This function takes a character position <db:code role="parameter">pos</db:code> and returns the rectangle that the cursor would occupy, if it was placed at that character position.</db:para>
<db:para>This is similar to setting the <db:link xlink:href="qml-qtquick-textinput.xml#cursorPosition-prop">cursorPosition</db:link>, and then querying the cursor rectangle, but the <db:link xlink:href="qml-qtquick-textinput.xml#cursorPosition-prop">cursorPosition</db:link> is not changed.</db:para>
</db:section>
<db:section xml:id="redo-method">
<db:title>redo()</db:title>
<db:para>Redoes the last operation if redo is <db:link xlink:href="qml-qtquick-textinput.xml#canRedo-prop">available</db:link>.</db:para>
</db:section>
<db:section xml:id="remove-method">
<db:title>remove(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Removes the section of text that is between the <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions from the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
</db:section>
<db:section xml:id="select-method">
<db:title>select(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Causes the text from <db:code role="parameter">start</db:code> to <db:code role="parameter">end</db:code> to be selected.</db:para>
<db:para>If either start or end is out of range, the selection is not changed.</db:para>
<db:para>After calling this, <db:link xlink:href="qml-qtquick-textinput.xml#selectionStart-prop">selectionStart</db:link> will become the lesser and <db:link xlink:href="qml-qtquick-textinput.xml#selectionEnd-prop">selectionEnd</db:link> will become the greater (regardless of the order passed to this method).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#selectionStart-prop">selectionStart</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml#selectionEnd-prop">selectionEnd</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectAll-method">
<db:title>selectAll()</db:title>
<db:para>Causes all text to be selected.</db:para>
</db:section>
<db:section xml:id="selectWord-method">
<db:title>selectWord()</db:title>
<db:para>Causes the word closest to the current cursor position to be selected.</db:para>
</db:section>
<db:section xml:id="undo-method">
<db:title>undo()</db:title>
<db:para>Undoes the last operation if undo is <db:link xlink:href="qml-qtquick-textinput.xml#canUndo-prop">available</db:link>. Deselects any current selection, and updates the selection start to the current cursor position.</db:para>
</db:section>
</db:section>
</db:article>
