<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>FileDialog QML Type</db:title>
<db:productname>QtQuickDialogs</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Dialogs Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Dialog component for choosing files from a local filesystem.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Dialogs 1.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>FileDialog is part of <db:simplelist><db:member>qtquickdialogs</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> provides a basic file chooser: it allows the user to select existing files and/or directories, or create new filenames. The dialog is initially invisible. You need to set the properties as desired first, then set <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#visible-prop">visible</db:link> to true or call <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#open-method">open</db:link>().</db:para>
<db:para>Here is a minimal example to open a file dialog and exit after the user chooses a file:</db:para>
<db:programlisting language="qml">import QtQuick 2.2
import QtQuick.Dialogs 1.0

FileDialog {
    id: fileDialog
    title: &quot;Please choose a file&quot;
    folder: shortcuts.home
    onAccepted: {
        console.log(&quot;You chose: &quot; + fileDialog.fileUrls)
        Qt.quit()
    }
    onRejected: {
        console.log(&quot;Canceled&quot;)
        Qt.quit()
    }
    Component.onCompleted: visible = true
}
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> window is automatically transient for its parent window. So whether you declare the dialog inside an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> or inside a <db:link xlink:href="qml-qtquick-window-window.xml">Window</db:link>, the dialog will appear centered over the window containing the item, or over the Window that you declared.</db:para>
<db:para>The implementation of <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> will be a platform file dialog if possible. If that isn't possible, then it will try to instantiate a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. If that also isn't possible, then it will fall back to a QML implementation, DefaultFileDialog.qml. In that case you can customize the appearance by editing this file. DefaultFileDialog.qml contains a Rectangle to hold the dialog's contents, because certain embedded systems do not support multiple top-level windows. When the dialog becomes visible, it will automatically be wrapped in a Window if possible, or simply reparented on top of the main window if there can only be one window.</db:para>
<db:para>The QML implementation has a sidebar containing <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#shortcuts-prop">shortcuts</db:link> to common platform-specific locations, and user-modifiable favorites. It uses application-specific <db:link xlink:href="qt-labs-settings-qmlmodule.xml">settings</db:link> to store the user's favorites, as well as other user-modifiable state, such as whether or not the sidebar is shown, the positions of the splitters, and the dialog size. The settings are stored in a section called <db:code>QQControlsFileDialog</db:code> of the application-specific <db:link xlink:href="qsettings.xml">QSettings</db:link>. For example when testing an application with the qml tool, the <db:code>QQControlsFileDialog</db:code> section will be created in the <db:code>Qml Runtime</db:code> settings file (or registry entry). If an application is started via a custom C++ main() function, it is recommended to set the <db:link xlink:href="qcoreapplication.xml#applicationName-prop">name</db:link>, <db:link xlink:href="qcoreapplication.xml#organizationName-prop">organization</db:link> and <db:link xlink:href="qcoreapplication.xml#organizationDomain-prop">domain</db:link> in order to control the location of the application's settings. If you use <db:link xlink:href="qt-labs-settings-qmlmodule.xml">Settings</db:link> objects in other parts of an application, they will be stored in other sections of the same file.</db:para>
<db:para><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> stores its settings globally instead of per-application. Platform-native file dialogs may or may not store settings in various platform-dependent ways.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="fileUrl-prop">
<db:title>[read-only] fileUrl : url</db:title>
<db:para>The path of the file which was selected by the user.</db:para>
<db:note>
<db:para>This property is set only if exactly one file was selected. In all other cases, it will be empty.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#fileUrls-prop">fileUrls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileUrls-prop">
<db:title>[read-only] fileUrls : list&lt;url&gt;</db:title>
<db:para>The list of file paths which were selected by the user.</db:para>
</db:section>
<db:section xml:id="folder-prop">
<db:title>folder : url</db:title>
<db:para>The path to the currently selected folder. Setting this property before invoking <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#open-method">open</db:link>() will cause the file browser to be initially positioned on the specified folder.</db:para>
<db:para>The value of this property is also updated after the dialog is closed.</db:para>
<db:para>By default, the url is empty.</db:para>
<db:note>
<db:para>On iOS, if you set <db:code role="parameter">folder</db:code> to <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#shortcuts-prop">shortcuts.pictures</db:link>, a native image picker dialog will be used for accessing the user's photo album. The URL returned can be set as <db:link xlink:href="qml-qtquick-image.xml#source-prop">source</db:link> for <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>. This feature was added in Qt 5.5.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#shortcuts-prop">shortcuts</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modality-prop">
<db:title>modality : Qt::WindowModality</db:title>
<db:para>Whether the dialog should be shown modal with respect to the window containing the dialog's parent Item, modal with respect to the whole application, or non-modal.</db:para>
<db:para>By default it is <db:code>Qt.WindowModal</db:code>.</db:para>
<db:para>Modality does not mean that there are any blocking calls to wait for the dialog to be accepted or rejected; it's only that the user will be prevented from interacting with the parent window and/or the application windows at the same time. You probably need to write an onAccepted handler to actually load or save the chosen file.</db:para>
</db:section>
<db:section xml:id="nameFilters-prop">
<db:title>nameFilters : list&lt;string&gt;</db:title>
<db:para>A list of strings to be used as file name filters. Each string can be a space-separated list of filters; filters may include the ? and * wildcards. The list of filters can also be enclosed in parentheses and a textual description of the filter can be provided.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="qml">FileDialog {
    nameFilters: [ &quot;Image files (*.jpg *.png)&quot;, &quot;All files (*)&quot; ]
}
</db:programlisting>
<db:note>
<db:para>Directories are not excluded by filters.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectedNameFilter-prop">selectedNameFilter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectExisting-prop">
<db:title>selectExisting : bool</db:title>
<db:para>Whether only existing files or directories can be selected.</db:para>
<db:para>By default, this property is true. This property must be set to the desired value before opening the dialog. Setting this property to false implies that the dialog is for naming a file to which to save something, or naming a folder to be created; therefore <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectMultiple-prop">selectMultiple</db:link> must be false.</db:para>
</db:section>
<db:section xml:id="selectFolder-prop">
<db:title>selectFolder : bool</db:title>
<db:para>Whether the selected item should be a folder.</db:para>
<db:para>By default, this property is false. This property must be set to the desired value before opening the dialog. Setting this property to true implies that <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectMultiple-prop">selectMultiple</db:link> must be false and <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectExisting-prop">selectExisting</db:link> must be true.</db:para>
</db:section>
<db:section xml:id="selectMultiple-prop">
<db:title>selectMultiple : bool</db:title>
<db:para>Whether more than one filename can be selected.</db:para>
<db:para>By default, this property is false. This property must be set to the desired value before opening the dialog. Setting this property to true implies that <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectExisting-prop">selectExisting</db:link> must be true.</db:para>
</db:section>
<db:section xml:id="selectedNameFilter-prop">
<db:title>selectedNameFilter : string</db:title>
<db:para>Which of the <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#nameFilters-prop">nameFilters</db:link> is currently selected.</db:para>
<db:para>This property can be set before the dialog is visible, to set the default name filter, and can also be set while the dialog is visible to set the current name filter. It is also updated when the user selects a different filter.</db:para>
</db:section>
<db:section xml:id="shortcuts-prop">
<db:title>[read-only, since 5.5] shortcuts : Object</db:title>
<db:para>A map of some useful paths from <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link> to their URLs. Each path is verified to exist on the user's computer before being added to this list, at the time when the <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> is created.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:code>desktop</db:code></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::DesktopLocation</db:link></db:para>
</db:td>
<db:td>
<db:para>The user's desktop directory.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>documents</db:code></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::DocumentsLocation</db:link></db:para>
</db:td>
<db:td>
<db:para>The directory containing user document files.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>home</db:code></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::HomeLocation</db:link></db:para>
</db:td>
<db:td>
<db:para>The user's home directory.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>music</db:code></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::MusicLocation</db:link></db:para>
</db:td>
<db:td>
<db:para>The directory containing the user's music or other audio files.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>movies</db:code></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::MoviesLocation</db:link></db:para>
</db:td>
<db:td>
<db:para>The directory containing the user's movies and videos.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>pictures</db:code></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::PicturesLocation</db:link></db:para>
</db:td>
<db:td>
<db:para>The directory containing the user's pictures or photos. It is always a kind of <db:code>file</db:code>: URL; but on some platforms, it will be specialized, such that the <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> will be realized as a gallery browser dialog.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, <db:code>shortcuts.home</db:code> will provide the URL of the user's home directory.</db:para>
<db:para>This property was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="sidebarVisible-prop">
<db:title>[since 5.4] sidebarVisible : bool</db:title>
<db:para>This property holds whether the sidebar in the dialog containing shortcuts and bookmarks is visible. By default it depends on the setting stored in the <db:code>QQControlsFileDialog</db:code> section of the application's <db:link xlink:href="qt-labs-settings-qmlmodule.xml">Settings</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : string</db:title>
<db:para>The title of the dialog window.</db:para>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:para>This property holds whether the dialog is visible. By default this is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#modality-prop">modality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="close-method">
<db:title>void close()</db:title>
<db:para>Closes the dialog.</db:para>
</db:section>
<db:section xml:id="open-method">
<db:title>void open()</db:title>
<db:para>Shows the dialog to the user. It is equivalent to setting <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#visible-prop">visible</db:link> to true.</db:para>
</db:section>
</db:section>
</db:article>
