<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>FileDialog QML Type</db:title>
<db:productname>QtQuickDialogs</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Dialogs Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A file dialog.</db:para>
<db:para>This type was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Dialogs</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-dialogs-dialog.xml">Dialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> type provides a QML API for file dialogs.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickdialogs-filedialog-gtk.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To show a file dialog, construct an instance of <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link>, set the desired properties, and call <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#open-method">open</db:link>(). The <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#currentFolder-prop">currentFolder</db:link> property can be used to determine the folder in which the dialog opens. The <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectedFile-prop">selectedFile</db:link> and <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectedFiles-prop">selectedFiles</db:link> properties can be used to determine which file(s) are selected when the dialog opens, and are also updated when the user selects a file in the dialog and when the dialog is accepted.</db:para>
<db:programlisting language="qml">import QtCore
import QtQuick
import QtQuick.Controls
import QtQuick.Dialogs

ApplicationWindow {
    width: 640
    height: 480
    visible: true

    header: ToolBar {
        Button {
            text: qsTr(&quot;Choose Image...&quot;)
            onClicked: fileDialog.open()
        }
    }

    Image {
        id: image
        anchors.fill: parent
        fillMode: Image.PreserveAspectFit
    }

    FileDialog {
        id: fileDialog
        currentFolder: StandardPaths.standardLocations(StandardPaths.PicturesLocation)[0]
        onAccepted: image.source = selectedFile
    }
}
</db:programlisting>
<db:section xml:id="availability">
<db:title>Availability</db:title>
<db:para>A native platform file dialog is currently available on the following platforms:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Android</db:para>
</db:listitem>
<db:listitem>
<db:para>iOS</db:para>
</db:listitem>
<db:listitem>
<db:para>Linux (when running with the GTK+ platform theme)</db:para>
</db:listitem>
<db:listitem>
<db:para>macOS</db:para>
</db:listitem>
<db:listitem>
<db:para>Windows</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt Quick Dialogs uses a Qt Quick implementation as a fallback on platforms that do not have a native implementation available.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-folderdialog.xml">FolderDialog</db:link></db:member>
<db:member><db:link xlink:href="qml-qtcore-standardpaths.xml">StandardPaths</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptLabel-prop">
<db:title>acceptLabel : string</db:title>
<db:para>This property holds the label text shown on the button that accepts the dialog.</db:para>
<db:para>When set to an empty string, the default label of the underlying platform is used. The default label is typically <db:guilabel>Open</db:guilabel> or <db:guilabel>Save</db:guilabel> depending on which <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#fileMode-prop">fileMode</db:link> the dialog is used in.</db:para>
<db:para>The default value is an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#rejectLabel-prop">rejectLabel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentFolder-prop">
<db:title>currentFolder : url</db:title>
<db:para>This property holds the folder where files are selected. It can be set to control the initial directory that is shown when the dialog is opened.</db:para>
<db:para>For selecting a folder, use <db:link xlink:href="qml-qtquick-dialogs-folderdialog.xml">FolderDialog</db:link> instead.</db:para>
</db:section>
<db:section xml:id="defaultSuffix-prop">
<db:title>defaultSuffix : string</db:title>
<db:para>This property holds a suffix that is added to selected files that have no suffix specified. The suffix is typically used to indicate the file type (e.g. &quot;txt&quot; indicates a text file).</db:para>
<db:para>If the first character is a dot ('.'), it is removed.</db:para>
</db:section>
<db:section xml:id="fileMode-prop">
<db:title>fileMode : enumeration</db:title>
<db:para>This property holds the mode of the dialog.</db:para>
<db:para>Available values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>FileDialog.OpenFile</db:para>
</db:td>
<db:td>
<db:para>The dialog is used to select an existing file (default).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>FileDialog.OpenFiles</db:para>
</db:td>
<db:td>
<db:para>The dialog is used to select multiple existing files.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>FileDialog.SaveFile</db:para>
</db:td>
<db:td>
<db:para>The dialog is used to select any file. The file does not have to exist.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="nameFilters-prop">
<db:title>nameFilters : list&lt;string&gt;</db:title>
<db:para>This property holds the filters that restrict the types of files that can be selected.</db:para>
<db:programlisting language="cpp">FileDialog {
    nameFilters: [&quot;Text files (*.txt)&quot;, &quot;HTML files (*.html *.htm)&quot;]
}
</db:programlisting>
<db:para>Different platforms may restrict the files that can be selected in different ways. For example, macOS will disable file entries that do not match the filters, whereas Windows will hide them.</db:para>
<db:note>
<db:para><db:emphasis role="bold">*.*</db:emphasis> is not a portable filter, because the historical assumption that the file extension determines the file type is not consistent on every operating system. It is possible to have a file with no dot in its name (for example, <db:code>Makefile</db:code>). In a native Windows file dialog, <db:emphasis role="bold">*.*</db:emphasis> will match such files, while in other types of file dialogs it may not. So it is better to use <db:emphasis role="bold">*</db:emphasis> if you mean to select any file.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectedNameFilter-prop">selectedNameFilter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="options-prop">
<db:title>options : flags</db:title>
<db:para>This property holds the various options that affect the look and feel of the dialog.</db:para>
<db:para>By default, all options are disabled.</db:para>
<db:para>Options should be set before showing the dialog. Setting them while the dialog is visible is not guaranteed to have an immediate effect on the dialog (depending on the option and on the platform).</db:para>
<db:para>Available options:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>FileDialog.DontResolveSymlinks</db:para>
</db:td>
<db:td>
<db:para>Don't resolve symlinks in the file dialog. By default symlinks are resolved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>FileDialog.DontConfirmOverwrite</db:para>
</db:td>
<db:td>
<db:para>Don't ask for confirmation if an existing file is selected. By default confirmation is requested.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>FileDialog.ReadOnly</db:para>
</db:td>
<db:td>
<db:para>Indicates that the dialog doesn't allow creating directories.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>FileDialog.HideNameFilterDetails</db:para>
</db:td>
<db:td>
<db:para>Indicates if the file name filter details are hidden or not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>FileDialog.DontUseNativeDialog</db:para>
</db:td>
<db:td>
<db:para>Forces the dialog to use a non-native quick implementation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="rejectLabel-prop">
<db:title>rejectLabel : string</db:title>
<db:para>This property holds the label text shown on the button that rejects the dialog.</db:para>
<db:para>When set to an empty string, the default label of the underlying platform is used. The default label is typically <db:guilabel>Cancel</db:guilabel>.</db:para>
<db:para>The default value is an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#acceptLabel-prop">acceptLabel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedFile-prop">
<db:title>selectedFile : url</db:title>
<db:para>This property holds the last file that was selected in the dialog.</db:para>
<db:para>It can be set to control the file that is selected when the dialog is opened.</db:para>
<db:para>If there are multiple selected files, this property refers to the first file.</db:para>
<db:para>The value of this property is updated each time the user selects a file in the dialog, and when the dialog is accepted. Handle the <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#accepted-signal">accepted</db:link>() signal to get the final selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectedFiles-prop">selectedFiles</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-dialogs-dialog.xml#accepted-signal">accepted</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#currentFolder-prop">currentFolder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedFiles-prop">
<db:title>selectedFiles : list&lt;url&gt;</db:title>
<db:para>This property holds the last files that were selected in the dialog.</db:para>
<db:para>The value of this property is updated each time the user selects files in the dialog, and when the dialog is accepted. Handle the <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#accepted-signal">accepted</db:link>() signal to get the final selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-dialog.xml#accepted-signal">accepted</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#currentFolder-prop">currentFolder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedNameFilter-prop">
<db:title>selectedNameFilter group</db:title>
<db:bridgehead renderas="sect2" xml:id="selectedNameFilter.extensions-prop">selectedNameFilter.extensions : list&lt;string&gt;</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="selectedNameFilter.globs-prop">selectedNameFilter.globs : list&lt;string&gt;</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="selectedNameFilter.index-prop">selectedNameFilter.index : int</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="selectedNameFilter.name-prop">selectedNameFilter.name : string</db:bridgehead>
<db:para>These properties hold the currently selected name filter.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">index</db:emphasis> : int</db:para>
</db:td>
<db:td>
<db:para>This property determines which <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#nameFilters-prop">name filter</db:link> is selected. The specified filter is selected when the dialog is opened. The value is updated when the user selects another filter.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>[read-only] <db:emphasis role="bold">name</db:emphasis> : string</db:para>
</db:td>
<db:td>
<db:para>This property holds the name of the selected filter. In the example below, the name of the first filter is <db:code>&quot;Text files&quot;</db:code> and the second is <db:code>&quot;HTML files&quot;</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>[read-only] <db:emphasis role="bold">extensions</db:emphasis> : list&lt;string&gt;</db:para>
</db:td>
<db:td>
<db:para>This property holds the list of extensions of the selected filter. In the example below, the list of extensions of the first filter is <db:code>[&quot;txt&quot;]</db:code> and the second is <db:code>[&quot;html&quot;, &quot;htm&quot;]</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>[read-only] <db:emphasis role="bold">globs</db:emphasis> : list&lt;string&gt;</db:para>
</db:td>
<db:td>
<db:para>This property holds the list of globs of the selected filter. In the example below, the list of globs of the first filter is <db:code>[&quot;*.txt&quot;]</db:code> and the second is <db:code>[&quot;*.html&quot;, &quot;*.htm&quot;]</db:code>.</db:para>
<db:para>This property is useful in conjunction with <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link>'s <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#nameFilters-prop">nameFilters</db:link> property, for example.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:programlisting language="cpp">FileDialog {
    id: fileDialog
    selectedNameFilter.index: 1
    nameFilters: [&quot;Text files (*.txt)&quot;, &quot;HTML files (*.html *.htm)&quot;]
}

MyDocument {
    id: document
    fileType: fileDialog.selectedNameFilter.extensions[0]
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#nameFilters-prop">nameFilters</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for FileDialog</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="currentFile-prop">
<db:title>[deprecated in 6.3] currentFile : url</db:title>
<db:para>This property is deprecated since QtQuick.Dialogs 6.3. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectedFile-prop">selectedFile</db:link> instead.</db:para>
<db:para>This property holds the currently selected file in the dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectedFile-prop">selectedFile</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#currentFiles-prop">currentFiles</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#currentFolder-prop">currentFolder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentFiles-prop">
<db:title>[deprecated in 6.3] currentFiles : list&lt;url&gt;</db:title>
<db:para>This property is deprecated since QtQuick.Dialogs 6.3. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectedFiles-prop">selectedFiles</db:link> instead.</db:para>
<db:para>This property holds the currently selected files in the dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#selectedFiles-prop">selectedFiles</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#currentFile-prop">currentFile</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-dialogs-filedialog.xml#currentFolder-prop">currentFolder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
