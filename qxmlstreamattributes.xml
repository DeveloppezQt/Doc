<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlStreamAttributes Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlstreamattributes.xml">QXmlStreamAttributes</db:link> class represents a vector of <db:link xlink:href="qxmlstreamattribute.xml">QXmlStreamAttribute</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlStreamAttributes</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlist.xml" xlink:role="class">QList</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlStreamAttributes is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Attributes are returned by a <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> in <db:link xlink:href="qxmlstreamreader.xml#attributes">attributes</db:link>() when the reader reports a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">start element</db:link>. The class can also be used with a <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> as an argument to <db:link xlink:href="qxmlstreamwriter.xml#writeAttributes">writeAttributes</db:link>().</db:para>
<db:para>The convenience function <db:link xlink:href="qxmlstreamattributes.xml#value">value</db:link>() loops over the vector and returns an attribute value for a given namespaceUri and an attribute's name.</db:para>
<db:para>New attributes can be added with <db:link xlink:href="qxmlstreamattributes.xml#append">append</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlStreamAttributes">
<db:title>QXmlStreamAttributes::QXmlStreamAttributes()</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamAttributes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamAttributes()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>A constructor for <db:link xlink:href="qxmlstreamattributes.xml">QXmlStreamAttributes</db:link>.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>void QXmlStreamAttributes::append(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a new attribute with <db:code role="parameter">name</db:code> in the namespace described with <db:code role="parameter">namespaceUri</db:code>, and value <db:code role="parameter">value</db:code>. The <db:code role="parameter">namespaceUri</db:code> can be empty.</db:para>
</db:section>
<db:section xml:id="append-1">
<db:title>void QXmlStreamAttributes::append(const QString &amp;<db:emphasis>qualifiedName</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(const QString &amp;qualifiedName, const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends a new attribute with qualified name <db:code role="parameter">qualifiedName</db:code> and value <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="hasAttribute">
<db:title>bool QXmlStreamAttributes::hasAttribute(const QString &amp;<db:emphasis>qualifiedName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasAttribute(const QString &amp;qualifiedName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qxmlstreamattributes.xml">QXmlStreamAttributes</db:link> has an attribute whose qualified name is <db:code role="parameter">qualifiedName</db:code>; otherwise returns false.</db:para>
<db:para>Note that this is not namespace aware. For instance, if this <db:link xlink:href="qxmlstreamattributes.xml">QXmlStreamAttributes</db:link> contains an attribute whose lexical name is &quot;xlink:href&quot; this doesn't tell that an attribute named href in the XLink namespace is present, since the xlink prefix can be bound to any namespace. Use the overload that takes a namespace URI and a local name as parameter, for namespace aware code.</db:para>
</db:section>
<db:section xml:id="hasAttribute-1">
<db:title>bool QXmlStreamAttributes::hasAttribute(QLatin1String <db:emphasis>qualifiedName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasAttribute</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasAttribute(QLatin1String qualifiedName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="hasAttribute-2">
<db:title>bool QXmlStreamAttributes::hasAttribute(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasAttribute(const QString &amp;namespaceUri, const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if this <db:link xlink:href="qxmlstreamattributes.xml">QXmlStreamAttributes</db:link> has an attribute whose namespace URI and name correspond to <db:code role="parameter">namespaceUri</db:code> and <db:code role="parameter">name</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QStringView QXmlStreamAttributes::value(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView value(const QString &amp;namespaceUri, const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the attribute <db:code role="parameter">name</db:code> in the namespace described with <db:code role="parameter">namespaceUri</db:code>, or an empty string reference if the attribute is not defined. The <db:code role="parameter">namespaceUri</db:code> can be empty.</db:para>
</db:section>
<db:section xml:id="value-1">
<db:title>QStringView QXmlStreamAttributes::value(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, QLatin1String <db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView value(const QString &amp;namespaceUri, QLatin1String name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the value of the attribute <db:code role="parameter">name</db:code> in the namespace described with <db:code role="parameter">namespaceUri</db:code>, or an empty string reference if the attribute is not defined. The <db:code role="parameter">namespaceUri</db:code> can be empty.</db:para>
</db:section>
<db:section xml:id="value-2">
<db:title>QStringView QXmlStreamAttributes::value(QLatin1String <db:emphasis>namespaceUri</db:emphasis>, QLatin1String <db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView value(QLatin1String namespaceUri, QLatin1String name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the value of the attribute <db:code role="parameter">name</db:code> in the namespace described with <db:code role="parameter">namespaceUri</db:code>, or an empty string reference if the attribute is not defined. The <db:code role="parameter">namespaceUri</db:code> can be empty.</db:para>
</db:section>
<db:section xml:id="value-3">
<db:title>QStringView QXmlStreamAttributes::value(const QString &amp;<db:emphasis>qualifiedName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView value(const QString &amp;qualifiedName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the value of the attribute with qualified name <db:code role="parameter">qualifiedName</db:code> , or an empty string reference if the attribute is not defined. A qualified name is the raw name of an attribute in the XML data. It consists of the namespace prefix, followed by colon, followed by the attribute's local name. Since the namespace prefix is not unique (the same prefix can point to different namespaces and different prefixes can point to the same namespace), you shouldn't use qualified names, but a resolved namespaceUri and the attribute's local name.</db:para>
</db:section>
<db:section xml:id="value-4">
<db:title>QStringView QXmlStreamAttributes::value(QLatin1String <db:emphasis>qualifiedName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView value(QLatin1String qualifiedName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the value of the attribute with qualified name <db:code role="parameter">qualifiedName</db:code> , or an empty string reference if the attribute is not defined. A qualified name is the raw name of an attribute in the XML data. It consists of the namespace prefix, followed by colon, followed by the attribute's local name. Since the namespace prefix is not unique (the same prefix can point to different namespaces and different prefixes can point to the same namespace), you shouldn't use qualified names, but a resolved namespaceUri and the attribute's local name.</db:para>
</db:section>
</db:section>
</db:article>
