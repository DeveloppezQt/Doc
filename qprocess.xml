<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProcess Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprocess.xml">QProcess</db:link> class is used to start external programs and to communicate with them.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProcess</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiodevice.xml" xlink:role="class">QIODevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QProcess is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="running-a-process">
<db:title>Running a Process</db:title>
<db:para>To start a process, pass the name and command line arguments of the program you want to run as arguments to <db:link xlink:href="qprocess.xml#start">start</db:link>(). Arguments are supplied as individual strings in a <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
<db:para>Alternatively, you can set the program to run with <db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>() and <db:link xlink:href="qprocess.xml#setArguments">setArguments</db:link>(), and then call <db:link xlink:href="qprocess.xml#start">start</db:link>() or <db:link xlink:href="qprocess.xml#open">open</db:link>().</db:para>
<db:para>For example, the following code snippet runs the analog clock example in the Fusion style on X11 platforms by passing strings containing &quot;-style&quot; and &quot;fusion&quot; as two items in the list of arguments:</db:para>
<db:programlisting language="cpp">    QObject *parent;
    ...
    QString program = &quot;./path/to/Qt/examples/widgets/analogclock&quot;;
    QStringList arguments;
    arguments &amp;lt;&amp;lt; &quot;-style&quot; &amp;lt;&amp;lt; &quot;fusion&quot;;

    QProcess *myProcess = new QProcess(parent);
    myProcess-&amp;gt;start(program, arguments);
</db:programlisting>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> then enters the <db:link xlink:href="qprocess.xml#ProcessState-enum">Starting</db:link> state, and when the program has started, <db:link xlink:href="qprocess.xml">QProcess</db:link> enters the <db:link xlink:href="qprocess.xml#ProcessState-enum">Running</db:link> state and emits <db:link xlink:href="qprocess.xml#started">started</db:link>().</db:para>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> allows you to treat a process as a sequential I/O device. You can write to and read from the process just as you would access a network connection using <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>. You can then write to the process's standard input by calling <db:link xlink:href="qiodevice.xml#write">write</db:link>(), and read the standard output by calling <db:link xlink:href="qiodevice.xml#read">read</db:link>(), <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>(), and <db:link xlink:href="qiodevice.xml#getChar">getChar</db:link>(). Because it inherits <db:link xlink:href="qiodevice.xml">QIODevice</db:link>, <db:link xlink:href="qprocess.xml">QProcess</db:link> can also be used as an input source for <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link>, or for generating data to be uploaded using <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
<db:para>When the process exits, <db:link xlink:href="qprocess.xml">QProcess</db:link> reenters the <db:link xlink:href="qprocess.xml#ProcessState-enum">NotRunning</db:link> state (the initial state), and emits <db:link xlink:href="qprocess.xml#finished">finished</db:link>().</db:para>
<db:para>The <db:link xlink:href="qprocess.xml#finished">finished</db:link>() signal provides the exit code and exit status of the process as arguments, and you can also call <db:link xlink:href="qprocess.xml#exitCode">exitCode</db:link>() to obtain the exit code of the last process that finished, and <db:link xlink:href="qprocess.xml#exitStatus">exitStatus</db:link>() to obtain its exit status. If an error occurs at any point in time, <db:link xlink:href="qprocess.xml">QProcess</db:link> will emit the <db:link xlink:href="qprocess.xml#errorOccurred">errorOccurred</db:link>() signal. You can also call <db:link xlink:href="qprocess.xml#error">error</db:link>() to find the type of error that occurred last, and <db:link xlink:href="qprocess.xml#state">state</db:link>() to find the current process state.</db:para>
<db:note>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> is not supported on VxWorks, iOS, tvOS, watchOS, or the Universal Windows Platform.</db:para>
</db:note>
</db:section>
<db:section xml:id="communicating-via-channels">
<db:title>Communicating via Channels</db:title>
<db:para>Processes have two predefined output channels: The standard output channel (stdout) supplies regular console output, and the standard error channel (stderr) usually supplies the errors that are printed by the process. These channels represent two separate streams of data. You can toggle between them by calling <db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>(). <db:link xlink:href="qprocess.xml">QProcess</db:link> emits <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() when data is available on the current read channel. It also emits <db:link xlink:href="qprocess.xml#readyReadStandardOutput">readyReadStandardOutput</db:link>() when new standard output data is available, and when new standard error data is available, <db:link xlink:href="qprocess.xml#readyReadStandardError">readyReadStandardError</db:link>() is emitted. Instead of calling <db:link xlink:href="qiodevice.xml#read">read</db:link>(), <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>(), or <db:link xlink:href="qiodevice.xml#getChar">getChar</db:link>(), you can explicitly read all data from either of the two channels by calling <db:link xlink:href="qprocess.xml#readAllStandardOutput">readAllStandardOutput</db:link>() or <db:link xlink:href="qprocess.xml#readAllStandardError">readAllStandardError</db:link>().</db:para>
<db:para>The terminology for the channels can be misleading. Be aware that the process's output channels correspond to <db:link xlink:href="qprocess.xml">QProcess</db:link>'s <db:emphasis>read</db:emphasis> channels, whereas the process's input channels correspond to <db:link xlink:href="qprocess.xml">QProcess</db:link>'s <db:emphasis>write</db:emphasis> channels. This is because what we read using <db:link xlink:href="qprocess.xml">QProcess</db:link> is the process's output, and what we write becomes the process's input.</db:para>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> can merge the two output channels, so that standard output and standard error data from the running process both use the standard output channel. Call <db:link xlink:href="qprocess.xml#setProcessChannelMode">setProcessChannelMode</db:link>() with <db:link xlink:href="qprocess.xml#ProcessChannelMode-enum">MergedChannels</db:link> before starting the process to activate this feature. You also have the option of forwarding the output of the running process to the calling, main process, by passing <db:link xlink:href="qprocess.xml#ProcessChannelMode-enum">ForwardedChannels</db:link> as the argument. It is also possible to forward only one of the output channels - typically one would use <db:link xlink:href="qprocess.xml#ProcessChannelMode-enum">ForwardedErrorChannel</db:link>, but <db:link xlink:href="qprocess.xml#ProcessChannelMode-enum">ForwardedOutputChannel</db:link> also exists. Note that using channel forwarding is typically a bad idea in GUI applications - you should present errors graphically instead.</db:para>
<db:para>Certain processes need special environment settings in order to operate. You can set environment variables for your process by calling <db:link xlink:href="qprocess.xml#setProcessEnvironment">setProcessEnvironment</db:link>(). To set a working directory, call <db:link xlink:href="qprocess.xml#setWorkingDirectory">setWorkingDirectory</db:link>(). By default, processes are run in the current working directory of the calling process.</db:para>
<db:para>The positioning and the screen Z-order of windows belonging to GUI applications started with <db:link xlink:href="qprocess.xml">QProcess</db:link> are controlled by the underlying windowing system. For Qt 5 applications, the positioning can be specified using the -qwindowgeometry command line option; X11 applications generally accept a -geometry command line option.</db:para>
<db:note>
<db:para>On QNX, setting the working directory may cause all application threads, with the exception of the <db:link xlink:href="qprocess.xml">QProcess</db:link> caller thread, to temporarily freeze during the spawning process, owing to a limitation in the operating system.</db:para>
</db:note>
</db:section>
<db:section xml:id="synchronous-process-api">
<db:title>Synchronous Process API</db:title>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> provides a set of functions which allow it to be used without an event loop, by suspending the calling thread until certain signals are emitted:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#waitForStarted">waitForStarted</db:link>() blocks until the process has started.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#waitForReadyRead">waitForReadyRead</db:link>() blocks until new data is available for reading on the current read channel.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#waitForBytesWritten">waitForBytesWritten</db:link>() blocks until one payload of data has been written to the process.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#waitForFinished">waitForFinished</db:link>() blocks until the process has finished.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Calling these functions from the main thread (the thread that calls <db:link xlink:href="qapplication.xml#exec">QApplication::exec</db:link>()) may cause your user interface to freeze.</db:para>
<db:para>The following example runs gzip to compress the string &quot;Qt rocks!&quot;, without an event loop:</db:para>
<db:programlisting language="cpp">    QProcess gzip;
    gzip.start(&quot;gzip&quot;, QStringList() &amp;lt;&amp;lt; &quot;-c&quot;);
    if (!gzip.waitForStarted())
        return false;

    gzip.write(&quot;Qt rocks!&quot;);
    gzip.closeWriteChannel();

    if (!gzip.waitForFinished())
        return false;

    QByteArray result = gzip.readAll();
</db:programlisting>
</db:section>
<db:section xml:id="notes-for-windows-users">
<db:title>Notes for Windows Users</db:title>
<db:para>Some Windows commands (for example, dir) are not provided by separate applications, but by the command interpreter itself. If you attempt to use <db:link xlink:href="qprocess.xml">QProcess</db:link> to execute these commands directly, it won't work. One possible solution is to execute the command interpreter itself (cmd.exe on some Windows systems), and ask the interpreter to execute the desired command.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuffer.xml">QBuffer</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CreateProcessArgumentModifier-typedef">
<db:title>QProcess::CreateProcessArgumentModifier</db:title>
<db:typedefsynopsis>
<db:typedefname>CreateProcessArgumentModifier</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:note>
<db:para>This typedef is only available on desktop Windows.</db:para>
</db:note>
<db:para>On Windows, <db:link xlink:href="qprocess.xml">QProcess</db:link> uses the Win32 API function CreateProcess to start child processes. While <db:link xlink:href="qprocess.xml">QProcess</db:link> provides a comfortable way to start processes without worrying about platform details, it is in some cases desirable to fine-tune the parameters that are passed to CreateProcess. This is done by defining a CreateProcessArgumentModifier function and passing it to setCreateProcessArgumentsModifier.</db:para>
<db:para>A CreateProcessArgumentModifier function takes one parameter: a pointer to a CreateProcessArguments struct. The members of this struct will be passed to CreateProcess after the CreateProcessArgumentModifier function is called.</db:para>
<db:para>The following example demonstrates how to pass custom flags to CreateProcess. When starting a console process B from a console process A, <db:link xlink:href="qprocess.xml">QProcess</db:link> will reuse the console window of process A for process B by default. In this example, a new console window with a custom color scheme is created for the child process B instead.</db:para>
<db:programlisting language="cpp">    QProcess process;
    process.setCreateProcessArgumentsModifier([] (QProcess::CreateProcessArguments *args)
    {
        args-&amp;gt;flags |= CREATE_NEW_CONSOLE;
        args-&amp;gt;startupInfo-&amp;gt;dwFlags &amp;amp;= ~STARTF_USESTDHANDLES;
        args-&amp;gt;startupInfo-&amp;gt;dwFlags |= STARTF_USEFILLATTRIBUTE;
        args-&amp;gt;startupInfo-&amp;gt;dwFillAttribute = BACKGROUND_BLUE | FOREGROUND_RED
                                           | FOREGROUND_INTENSITY;
    });
    process.start(&quot;C:\\Windows\\System32\\cmd.exe&quot;, QStringList() &amp;lt;&amp;lt; &quot;/k&quot; &amp;lt;&amp;lt; &quot;title&quot; &amp;lt;&amp;lt; &quot;The Child Process&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess-createprocessarguments.xml">QProcess::CreateProcessArguments</db:link></db:member>
<db:member><db:link xlink:href="qprocess.xml#setCreateProcessArgumentsModifier">setCreateProcessArgumentsModifier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ExitStatus-enum">
<db:title>enum QProcess::ExitStatus</db:title>
<db:enumsynopsis>
<db:enumname>ExitStatus</db:enumname>
<db:enumitem>
<db:enumidentifier>NormalExit</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CrashExit</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the different exit statuses of <db:link xlink:href="qprocess.xml">QProcess</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::NormalExit</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The process exited normally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::CrashExit</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The process crashed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#exitStatus">exitStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="InputChannelMode-enum">
<db:title>[since 5.2] enum QProcess::InputChannelMode</db:title>
<db:enumsynopsis>
<db:enumname>InputChannelMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ManagedInputChannel</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ForwardedInputChannel</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the process input channel modes of <db:link xlink:href="qprocess.xml">QProcess</db:link>. Pass one of these values to <db:link xlink:href="qprocess.xml#setInputChannelMode">setInputChannelMode</db:link>() to set the current write channel mode.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::ManagedInputChannel</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> manages the input of the running process. This is the default input channel mode of <db:link xlink:href="qprocess.xml">QProcess</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::ForwardedInputChannel</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> forwards the input of the main process onto the running process. The child process reads its standard input from the same source as the main process. Note that the main process must not try to read its standard input while the child process is running.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setInputChannelMode">setInputChannelMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ProcessChannel-enum">
<db:title>enum QProcess::ProcessChannel</db:title>
<db:enumsynopsis>
<db:enumname>ProcessChannel</db:enumname>
<db:enumitem>
<db:enumidentifier>StandardOutput</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StandardError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the process channels used by the running process. Pass one of these values to <db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>() to set the current read channel of <db:link xlink:href="qprocess.xml">QProcess</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::StandardOutput</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The standard output (stdout) of the running process.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::StandardError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The standard error (stderr) of the running process.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ProcessChannelMode-enum">
<db:title>enum QProcess::ProcessChannelMode</db:title>
<db:enumsynopsis>
<db:enumname>ProcessChannelMode</db:enumname>
<db:enumitem>
<db:enumidentifier>SeparateChannels</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MergedChannels</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ForwardedChannels</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ForwardedOutputChannel</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ForwardedErrorChannel</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the process output channel modes of <db:link xlink:href="qprocess.xml">QProcess</db:link>. Pass one of these values to <db:link xlink:href="qprocess.xml#setProcessChannelMode">setProcessChannelMode</db:link>() to set the current read channel mode.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::SeparateChannels</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> manages the output of the running process, keeping standard output and standard error data in separate internal buffers. You can select the <db:link xlink:href="qprocess.xml">QProcess</db:link>'s current read channel by calling <db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>(). This is the default channel mode of <db:link xlink:href="qprocess.xml">QProcess</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::MergedChannels</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> merges the output of the running process into the standard output channel (stdout). The standard error channel (stderr) will not receive any data. The standard output and standard error data of the running process are interleaved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::ForwardedChannels</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> forwards the output of the running process onto the main process. Anything the child process writes to its standard output and standard error will be written to the standard output and standard error of the main process.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::ForwardedErrorChannel</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qprocess.xml">QProcess</db:link> manages the standard output of the running process, but forwards its standard error onto the main process. This reflects the typical use of command line tools as filters, where the standard output is redirected to another process or a file, while standard error is printed to the console for diagnostic purposes. (This value was introduced in Qt 5.2.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::ForwardedOutputChannel</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Complementary to ForwardedErrorChannel. (This value was introduced in Qt 5.2.)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Windows intentionally suppresses output from GUI-only applications to inherited consoles. This does <db:emphasis>not</db:emphasis> apply to output redirected to files or pipes. To forward the output of GUI-only applications on the console nonetheless, you must use SeparateChannels and do the forwarding yourself by reading the output and writing it to the appropriate output channels.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setProcessChannelMode">setProcessChannelMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ProcessError-enum">
<db:title>enum QProcess::ProcessError</db:title>
<db:enumsynopsis>
<db:enumname>ProcessError</db:enumname>
<db:enumitem>
<db:enumidentifier>FailedToStart</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Crashed</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Timedout</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the different types of errors that are reported by <db:link xlink:href="qprocess.xml">QProcess</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::FailedToStart</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The process failed to start. Either the invoked program is missing, or you may have insufficient permissions to invoke the program.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::Crashed</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The process crashed some time after starting successfully.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::Timedout</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The last waitFor...() function timed out. The state of <db:link xlink:href="qprocess.xml">QProcess</db:link> is unchanged, and you can try calling waitFor...() again.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::WriteError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An error occurred when attempting to write to the process. For example, the process may not be running, or it may have closed its input channel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::ReadError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error occurred when attempting to read from the process. For example, the process may not be running.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>An unknown error occurred. This is the default return value of <db:link xlink:href="qprocess.xml#error">error</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ProcessState-enum">
<db:title>enum QProcess::ProcessState</db:title>
<db:enumsynopsis>
<db:enumname>ProcessState</db:enumname>
<db:enumitem>
<db:enumidentifier>NotRunning</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Starting</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Running</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the different states of <db:link xlink:href="qprocess.xml">QProcess</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::NotRunning</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The process is not running.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::Starting</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The process is starting, but the program has not yet been invoked.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocess.xml">QProcess</db:link></db:emphasis>::Running</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The process is running and is ready for reading and writing.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProcess">
<db:title>[explicit] QProcess::QProcess(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QProcess</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcess(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qprocess.xml">QProcess</db:link> object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QProcess">
<db:title>[virtual] QProcess::~QProcess()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QProcess</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QProcess()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the <db:link xlink:href="qprocess.xml">QProcess</db:link> object, i.e., killing the process.</db:para>
<db:para>Note that this function will not return until the process is terminated.</db:para>
</db:section>
<db:section xml:id="arguments">
<db:title>[since 5.0] QStringList QProcess::arguments() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>arguments</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList arguments() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the command line arguments the process was last started with.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setArguments">setArguments</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atEnd">
<db:title>[override virtual] bool QProcess::atEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atEnd</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atEnd() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#atEnd" role="function">QIODevice::atEnd() const</db:link>.</db:para>
<db:para>Returns true if the process is not running, and no more data is available for reading; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="bytesAvailable">
<db:title>[override virtual] qint64 QProcess::bytesAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>bytesAvailable</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 bytesAvailable() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#bytesAvailable" role="function">QIODevice::bytesAvailable() const</db:link>.</db:para>
</db:section>
<db:section xml:id="bytesToWrite">
<db:title>[override virtual] qint64 QProcess::bytesToWrite() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>bytesToWrite</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 bytesToWrite() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#bytesToWrite" role="function">QIODevice::bytesToWrite() const</db:link>.</db:para>
</db:section>
<db:section xml:id="canReadLine">
<db:title>[override virtual] bool QProcess::canReadLine() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canReadLine</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canReadLine() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#canReadLine" role="function">QIODevice::canReadLine() const</db:link>.</db:para>
<db:para>This function operates on the current read channel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#readChannel">readChannel</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="close">
<db:title>[override virtual] void QProcess::close()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#close" role="function">QIODevice::close()</db:link>.</db:para>
<db:para>Closes all communication with the process and kills it. After calling this function, <db:link xlink:href="qprocess.xml">QProcess</db:link> will no longer emit <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>(), and data can no longer be read or written.</db:para>
</db:section>
<db:section xml:id="closeReadChannel">
<db:title>void QProcess::closeReadChannel(QProcess::ProcessChannel <db:emphasis>channel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>closeReadChannel</db:methodname>
<db:methodparam>
<db:type>QProcess::ProcessChannel</db:type>
<db:parameter>channel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closeReadChannel(QProcess::ProcessChannel channel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the read channel <db:code role="parameter">channel</db:code>. After calling this function, <db:link xlink:href="qprocess.xml">QProcess</db:link> will no longer receive data on the channel. Any data that has already been received is still available for reading.</db:para>
<db:para>Call this function to save memory, if you are not interested in the output of the process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#closeWriteChannel">closeWriteChannel</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closeWriteChannel">
<db:title>void QProcess::closeWriteChannel()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>closeWriteChannel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closeWriteChannel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Schedules the write channel of <db:link xlink:href="qprocess.xml">QProcess</db:link> to be closed. The channel will close once all data has been written to the process. After calling this function, any attempts to write to the process will fail.</db:para>
<db:para>Closing the write channel is necessary for programs that read input data until the channel has been closed. For example, the program &quot;more&quot; is used to display text data in a console on both Unix and Windows. But it will not display the text data until <db:link xlink:href="qprocess.xml">QProcess</db:link>'s write channel has been closed. Example:</db:para>
<db:programlisting language="cpp">QProcess more;
more.start(&quot;more&quot;);
more.write(&quot;Text to display&quot;);
more.closeWriteChannel();
// QProcess will emit readyRead() once &quot;more&quot; starts printing
</db:programlisting>
<db:para>The write channel is implicitly opened when <db:link xlink:href="qprocess.xml#start">start</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#closeReadChannel">closeReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createProcessArgumentsModifier">
<db:title>[since 5.7] QProcess::CreateProcessArgumentModifier QProcess::createProcessArgumentsModifier() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProcess::CreateProcessArgumentModifier</db:type>
<db:methodname>createProcessArgumentsModifier</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcess::CreateProcessArgumentModifier createProcessArgumentsModifier() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a previously set CreateProcess modifier function.</db:para>
<db:note>
<db:para>This function is available only on the Windows platform.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setCreateProcessArgumentsModifier">setCreateProcessArgumentsModifier</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#CreateProcessArgumentModifier-typedef">QProcess::CreateProcessArgumentModifier</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QProcess::ProcessError QProcess::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProcess::ProcessError</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcess::ProcessError error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of error that occurred last.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>[since 5.6] void QProcess::errorOccurred(QProcess::ProcessError <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QProcess::ProcessError</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QProcess::ProcessError error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error occurs with the process. The specified <db:code role="parameter">error</db:code> describes the type of error that occurred.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="execute">
<db:title>[static] int QProcess::execute(const QString &amp;<db:emphasis>program</db:emphasis>, const QStringList &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>execute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>program</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>arguments</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int execute(const QString &amp;program, const QStringList &amp;arguments)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the program <db:code role="parameter">program</db:code> with the arguments <db:code role="parameter">arguments</db:code> in a new process, waits for it to finish, and then returns the exit code of the process. Any data the new process writes to the console is forwarded to the calling process.</db:para>
<db:para>The environment and working directory are inherited from the calling process.</db:para>
<db:para>Argument handling is identical to the respective <db:link xlink:href="qprocess.xml#start">start</db:link>() overload.</db:para>
<db:para>If the process cannot be started, -2 is returned. If the process crashes, -1 is returned. Otherwise, the process' exit code is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="execute-1">
<db:title>[static] int QProcess::execute(const QString &amp;<db:emphasis>command</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>execute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>command</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int execute(const QString &amp;command)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Starts the program <db:code role="parameter">command</db:code> in a new process, waits for it to finish, and then returns the exit code.</db:para>
<db:para>Argument handling is identical to the respective <db:link xlink:href="qprocess.xml#start">start</db:link>() overload.</db:para>
<db:para>After the <db:code role="parameter">command</db:code> string has been split and unquoted, this function behaves like the overload which takes the arguments as a string list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exitCode">
<db:title>int QProcess::exitCode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>exitCode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int exitCode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the exit code of the last process that finished.</db:para>
<db:para>This value is not valid unless <db:link xlink:href="qprocess.xml#exitStatus">exitStatus</db:link>() returns <db:link xlink:href="qprocess.xml#ExitStatus-enum">NormalExit</db:link>.</db:para>
</db:section>
<db:section xml:id="exitStatus">
<db:title>[since 4.1] QProcess::ExitStatus QProcess::exitStatus() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProcess::ExitStatus</db:type>
<db:methodname>exitStatus</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcess::ExitStatus exitStatus() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the exit status of the last process that finished.</db:para>
<db:para>On Windows, if the process was terminated with TerminateProcess() from another application, this function will still return <db:link xlink:href="qprocess.xml#ExitStatus-enum">NormalExit</db:link> unless the exit code is less than 0.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QProcess::finished(int <db:emphasis>exitCode</db:emphasis>, QProcess::ExitStatus <db:emphasis>exitStatus</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>exitCode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QProcess::ExitStatus</db:type>
<db:parameter>exitStatus</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished(int exitCode, QProcess::ExitStatus exitStatus)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the process finishes. <db:code role="parameter">exitCode</db:code> is the exit code of the process (only valid for normal exits), and <db:code role="parameter">exitStatus</db:code> is the exit status. After the process has finished, the buffers in <db:link xlink:href="qprocess.xml">QProcess</db:link> are still intact. You can still read any data that the process may have written before it finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#exitStatus">exitStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputChannelMode">
<db:title>[since 5.2] QProcess::InputChannelMode QProcess::inputChannelMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProcess::InputChannelMode</db:type>
<db:methodname>inputChannelMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcess::InputChannelMode inputChannelMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the channel mode of the <db:link xlink:href="qprocess.xml">QProcess</db:link> standard input channel.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setInputChannelMode">setInputChannelMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#InputChannelMode-enum">InputChannelMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSequential">
<db:title>[override virtual] bool QProcess::isSequential() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSequential</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSequential() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#isSequential" role="function">QIODevice::isSequential() const</db:link>.</db:para>
</db:section>
<db:section xml:id="kill">
<db:title>void QProcess::kill()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>kill</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void kill()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Kills the current process, causing it to exit immediately.</db:para>
<db:para>On Windows, kill() uses TerminateProcess, and on Unix and macOS, the SIGKILL signal is sent to the process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#terminate">terminate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeArguments">
<db:title>[since 4.7] QString QProcess::nativeArguments() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>nativeArguments</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString nativeArguments() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the additional native command line arguments for the program.</db:para>
<db:note>
<db:para>This function is available only on the Windows platform.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setNativeArguments">setNativeArguments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nullDevice">
<db:title>[static, since 5.2] QString QProcess::nullDevice()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>nullDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString nullDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The null device of the operating system.</db:para>
<db:para>The returned file path uses native directory separators.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setStandardInputFile">QProcess::setStandardInputFile</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setStandardOutputFile">QProcess::setStandardOutputFile</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setStandardErrorFile">QProcess::setStandardErrorFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[override virtual] bool QProcess::open(QIODevice::OpenMode <db:emphasis>mode</db:emphasis> = ReadWrite)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QIODevice::OpenMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>ReadWrite</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open(QIODevice::OpenMode mode) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#open" role="function">QIODevice::open(QIODevice::OpenMode mode)</db:link>.</db:para>
<db:para>Starts the program set by <db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>() with arguments set by <db:link xlink:href="qprocess.xml#setArguments">setArguments</db:link>(). The OpenMode is set to <db:code role="parameter">mode</db:code>.</db:para>
<db:para>This method is an alias for <db:link xlink:href="qprocess.xml#start">start</db:link>(), and exists only to fully implement the interface defined by <db:link xlink:href="qiodevice.xml">QIODevice</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setArguments">setArguments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processChannelMode">
<db:title>[since 4.2] QProcess::ProcessChannelMode QProcess::processChannelMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProcess::ProcessChannelMode</db:type>
<db:methodname>processChannelMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcess::ProcessChannelMode processChannelMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the channel mode of the <db:link xlink:href="qprocess.xml">QProcess</db:link> standard output and standard error channels.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setProcessChannelMode">setProcessChannelMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#ProcessChannelMode-enum">ProcessChannelMode</db:link></db:member>
<db:member><db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processEnvironment">
<db:title>[since 4.6] QProcessEnvironment QProcess::processEnvironment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProcessEnvironment</db:type>
<db:methodname>processEnvironment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcessEnvironment processEnvironment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the environment that <db:link xlink:href="qprocess.xml">QProcess</db:link> will pass to its child process, or an empty object if no environment has been set using setEnvironment() or <db:link xlink:href="qprocess.xml#setProcessEnvironment">setProcessEnvironment</db:link>(). If no environment has been set, the environment of the calling process will be used.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setProcessEnvironment">setProcessEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setEnvironment" role="deprecated">setEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#isEmpty">QProcessEnvironment::isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processId">
<db:title>[since 5.3] qint64 QProcess::processId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>processId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 processId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the native process identifier for the running process, if available. If no process is currently running, 0 is returned.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="program">
<db:title>[since 5.0] QString QProcess::program() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>program</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString program() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the program the process was last started with.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readAllStandardError">
<db:title>QByteArray QProcess::readAllStandardError()</db:title>
<db:methodsynopsis>
<db:type>QByteArray</db:type>
<db:methodname>readAllStandardError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray readAllStandardError()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Regardless of the current read channel, this function returns all data available from the standard error of the process as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#readyReadStandardError">readyReadStandardError</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#readAllStandardOutput">readAllStandardOutput</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#readChannel">readChannel</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readAllStandardOutput">
<db:title>QByteArray QProcess::readAllStandardOutput()</db:title>
<db:methodsynopsis>
<db:type>QByteArray</db:type>
<db:methodname>readAllStandardOutput</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray readAllStandardOutput()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Regardless of the current read channel, this function returns all data available from the standard output of the process as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#readyReadStandardOutput">readyReadStandardOutput</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#readAllStandardError">readAllStandardError</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#readChannel">readChannel</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readChannel">
<db:title>QProcess::ProcessChannel QProcess::readChannel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProcess::ProcessChannel</db:type>
<db:methodname>readChannel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcess::ProcessChannel readChannel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current read channel of the <db:link xlink:href="qprocess.xml">QProcess</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readData">
<db:title>[override virtual protected] qint64 QProcess::readData(char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>maxlen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>readData</db:methodname>
<db:methodparam>
<db:type>char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxlen</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 readData(char *data, qint64 maxlen) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#readData" role="function">QIODevice::readData(char *data, qint64 maxSize)</db:link>.</db:para>
</db:section>
<db:section xml:id="readyReadStandardError">
<db:title>void QProcess::readyReadStandardError()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>readyReadStandardError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void readyReadStandardError()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the process has made new data available through its standard error channel (stderr). It is emitted regardless of the current <db:link xlink:href="qprocess.xml#readChannel">read channel</db:link>.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#readAllStandardError">readAllStandardError</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#readChannel">readChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readyReadStandardOutput">
<db:title>void QProcess::readyReadStandardOutput()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>readyReadStandardOutput</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void readyReadStandardOutput()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the process has made new data available through its standard output channel (stdout). It is emitted regardless of the current <db:link xlink:href="qprocess.xml#readChannel">read channel</db:link>.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#readAllStandardOutput">readAllStandardOutput</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#readChannel">readChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setArguments">
<db:title>[since 5.1] void QProcess::setArguments(const QStringList &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setArguments</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>arguments</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setArguments(const QStringList &amp;arguments)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the <db:code role="parameter">arguments</db:code> to pass to the called program when starting the process. This function must be called before <db:link xlink:href="qprocess.xml#start">start</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#arguments">arguments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCreateProcessArgumentsModifier">
<db:title>[since 5.7] void QProcess::setCreateProcessArgumentsModifier(QProcess::CreateProcessArgumentModifier <db:emphasis>modifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCreateProcessArgumentsModifier</db:methodname>
<db:methodparam>
<db:type>QProcess::CreateProcessArgumentModifier</db:type>
<db:parameter>modifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCreateProcessArgumentsModifier(QProcess::CreateProcessArgumentModifier modifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">modifier</db:code> for the CreateProcess Win32 API call. Pass QProcess::CreateProcessArgumentModifier() to remove a previously set one.</db:para>
<db:note>
<db:para>This function is available only on the Windows platform and requires C++11.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#createProcessArgumentsModifier">createProcessArgumentsModifier</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#CreateProcessArgumentModifier-typedef">QProcess::CreateProcessArgumentModifier</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInputChannelMode">
<db:title>[since 5.2] void QProcess::setInputChannelMode(QProcess::InputChannelMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInputChannelMode</db:methodname>
<db:methodparam>
<db:type>QProcess::InputChannelMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInputChannelMode(QProcess::InputChannelMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the channel mode of the <db:link xlink:href="qprocess.xml">QProcess</db:link> standard input channel to the <db:code role="parameter">mode</db:code> specified. This mode will be used the next time <db:link xlink:href="qprocess.xml#start">start</db:link>() is called.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#inputChannelMode">inputChannelMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#InputChannelMode-enum">InputChannelMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNativeArguments">
<db:title>[since 4.7] void QProcess::setNativeArguments(const QString &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNativeArguments</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>arguments</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNativeArguments(const QString &amp;arguments)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets additional native command line <db:code role="parameter">arguments</db:code> for the program.</db:para>
<db:para>On operating systems where the system API for passing command line <db:code role="parameter">arguments</db:code> to a subprocess natively uses a single string, one can conceive command lines which cannot be passed via <db:link xlink:href="qprocess.xml">QProcess</db:link>'s portable list-based API. In such cases this function must be used to set a string which is <db:emphasis>appended</db:emphasis> to the string composed from the usual argument list, with a delimiting space.</db:para>
<db:note>
<db:para>This function is available only on the Windows platform.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#nativeArguments">nativeArguments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProcessChannelMode">
<db:title>[since 4.2] void QProcess::setProcessChannelMode(QProcess::ProcessChannelMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProcessChannelMode</db:methodname>
<db:methodparam>
<db:type>QProcess::ProcessChannelMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProcessChannelMode(QProcess::ProcessChannelMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the channel mode of the <db:link xlink:href="qprocess.xml">QProcess</db:link> standard output and standard error channels to the <db:code role="parameter">mode</db:code> specified. This mode will be used the next time <db:link xlink:href="qprocess.xml#start">start</db:link>() is called. For example:</db:para>
<db:programlisting language="cpp">QProcess builder;
builder.setProcessChannelMode(QProcess::MergedChannels);
builder.start(&quot;make&quot;, QStringList() &amp;lt;&amp;lt; &quot;-j2&quot;);

if (!builder.waitForFinished())
    qDebug() &amp;lt;&amp;lt; &quot;Make failed:&quot; &amp;lt;&amp;lt; builder.errorString();
else
    qDebug() &amp;lt;&amp;lt; &quot;Make output:&quot; &amp;lt;&amp;lt; builder.readAll();
</db:programlisting>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#processChannelMode">processChannelMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#ProcessChannelMode-enum">ProcessChannelMode</db:link></db:member>
<db:member><db:link xlink:href="qprocess.xml#setReadChannel">setReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProcessEnvironment">
<db:title>[since 4.6] void QProcess::setProcessEnvironment(const QProcessEnvironment &amp;<db:emphasis>environment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProcessEnvironment</db:methodname>
<db:methodparam>
<db:type>const QProcessEnvironment &amp;</db:type>
<db:parameter>environment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProcessEnvironment(const QProcessEnvironment &amp;environment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">environment</db:code> that <db:link xlink:href="qprocess.xml">QProcess</db:link> will pass to the child process.</db:para>
<db:para>For example, the following code adds the environment variable TMPDIR:</db:para>
<db:programlisting language="cpp">QProcess process;
QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
env.insert(&quot;TMPDIR&quot;, &quot;C:\\MyApp\\temp&quot;); // Add an environment variable
process.setProcessEnvironment(env);
process.start(&quot;myapp&quot;);
</db:programlisting>
<db:para>Note how, on Windows, environment variable names are case-insensitive.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#processEnvironment">processEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#systemEnvironment">QProcessEnvironment::systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setEnvironment" role="deprecated">setEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProcessState">
<db:title>[protected] void QProcess::setProcessState(QProcess::ProcessState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProcessState</db:methodname>
<db:methodparam>
<db:type>QProcess::ProcessState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProcessState(QProcess::ProcessState state)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current state of the <db:link xlink:href="qprocess.xml">QProcess</db:link> to the <db:code role="parameter">state</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProgram">
<db:title>[since 5.1] void QProcess::setProgram(const QString &amp;<db:emphasis>program</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProgram</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>program</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProgram(const QString &amp;program)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the <db:code role="parameter">program</db:code> to use when starting the process. This function must be called before <db:link xlink:href="qprocess.xml#start">start</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setArguments">setArguments</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#program">program</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReadChannel">
<db:title>void QProcess::setReadChannel(QProcess::ProcessChannel <db:emphasis>channel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setReadChannel</db:methodname>
<db:methodparam>
<db:type>QProcess::ProcessChannel</db:type>
<db:parameter>channel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setReadChannel(QProcess::ProcessChannel channel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current read channel of the <db:link xlink:href="qprocess.xml">QProcess</db:link> to the given <db:code role="parameter">channel</db:code>. The current input channel is used by the functions <db:link xlink:href="qiodevice.xml#read">read</db:link>(), <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>(), <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>(), and <db:link xlink:href="qiodevice.xml#getChar">getChar</db:link>(). It also determines which channel triggers <db:link xlink:href="qprocess.xml">QProcess</db:link> to emit <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#readChannel">readChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStandardErrorFile">
<db:title>[since 4.2] void QProcess::setStandardErrorFile(const QString &amp;<db:emphasis>fileName</db:emphasis>, QIODevice::OpenMode <db:emphasis>mode</db:emphasis> = Truncate)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStandardErrorFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODevice::OpenMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Truncate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStandardErrorFile(const QString &amp;fileName, QIODevice::OpenMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Redirects the process' standard error to the file <db:code role="parameter">fileName</db:code>. When the redirection is in place, the standard error read channel is closed: reading from it using <db:link xlink:href="qiodevice.xml#read">read</db:link>() will always fail, as will <db:link xlink:href="qprocess.xml#readAllStandardError">readAllStandardError</db:link>(). The file will be appended to if <db:code role="parameter">mode</db:code> is Append, otherwise, it will be truncated.</db:para>
<db:para>See <db:link xlink:href="qprocess.xml#setStandardOutputFile">setStandardOutputFile</db:link>() for more information on how the file is opened.</db:para>
<db:para>Note: if <db:link xlink:href="qprocess.xml#setProcessChannelMode">setProcessChannelMode</db:link>() was called with an argument of <db:link xlink:href="qprocess.xml#ProcessChannelMode-enum">QProcess::MergedChannels</db:link>, this function has no effect.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setStandardInputFile">setStandardInputFile</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setStandardOutputFile">setStandardOutputFile</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setStandardOutputProcess">setStandardOutputProcess</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStandardInputFile">
<db:title>[since 4.2] void QProcess::setStandardInputFile(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStandardInputFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStandardInputFile(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Redirects the process' standard input to the file indicated by <db:code role="parameter">fileName</db:code>. When an input redirection is in place, the <db:link xlink:href="qprocess.xml">QProcess</db:link> object will be in read-only mode (calling <db:link xlink:href="qiodevice.xml#write">write</db:link>() will result in error).</db:para>
<db:para>To make the process read EOF right away, pass <db:link xlink:href="qprocess.xml#nullDevice">nullDevice</db:link>() here. This is cleaner than using <db:link xlink:href="qprocess.xml#closeWriteChannel">closeWriteChannel</db:link>() before writing any data, because it can be set up prior to starting the process.</db:para>
<db:para>If the file <db:code role="parameter">fileName</db:code> does not exist at the moment <db:link xlink:href="qprocess.xml#start">start</db:link>() is called or is not readable, starting the process will fail.</db:para>
<db:para>Calling setStandardInputFile() after the process has started has no effect.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setStandardOutputFile">setStandardOutputFile</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setStandardErrorFile">setStandardErrorFile</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setStandardOutputProcess">setStandardOutputProcess</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStandardOutputFile">
<db:title>[since 4.2] void QProcess::setStandardOutputFile(const QString &amp;<db:emphasis>fileName</db:emphasis>, QIODevice::OpenMode <db:emphasis>mode</db:emphasis> = Truncate)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStandardOutputFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODevice::OpenMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Truncate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStandardOutputFile(const QString &amp;fileName, QIODevice::OpenMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Redirects the process' standard output to the file <db:code role="parameter">fileName</db:code>. When the redirection is in place, the standard output read channel is closed: reading from it using <db:link xlink:href="qiodevice.xml#read">read</db:link>() will always fail, as will <db:link xlink:href="qprocess.xml#readAllStandardOutput">readAllStandardOutput</db:link>().</db:para>
<db:para>To discard all standard output from the process, pass <db:link xlink:href="qprocess.xml#nullDevice">nullDevice</db:link>() here. This is more efficient than simply never reading the standard output, as no <db:link xlink:href="qprocess.xml">QProcess</db:link> buffers are filled.</db:para>
<db:para>If the file <db:code role="parameter">fileName</db:code> doesn't exist at the moment <db:link xlink:href="qprocess.xml#start">start</db:link>() is called, it will be created. If it cannot be created, the starting will fail.</db:para>
<db:para>If the file exists and <db:code role="parameter">mode</db:code> is <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::Truncate</db:link>, the file will be truncated. Otherwise (if <db:code role="parameter">mode</db:code> is <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::Append</db:link>), the file will be appended to.</db:para>
<db:para>Calling setStandardOutputFile() after the process has started has no effect.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setStandardInputFile">setStandardInputFile</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setStandardErrorFile">setStandardErrorFile</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setStandardOutputProcess">setStandardOutputProcess</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStandardOutputProcess">
<db:title>[since 4.2] void QProcess::setStandardOutputProcess(QProcess *<db:emphasis>destination</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStandardOutputProcess</db:methodname>
<db:methodparam>
<db:type>QProcess *</db:type>
<db:parameter>destination</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStandardOutputProcess(QProcess *destination)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pipes the standard output stream of this process to the <db:code role="parameter">destination</db:code> process' standard input.</db:para>
<db:para>The following shell command:</db:para>
<db:programlisting language="cpp">command1 | command2
</db:programlisting>
<db:para>Can be accomplished with <db:link xlink:href="qprocess.xml">QProcess</db:link> with the following code:</db:para>
<db:programlisting language="cpp">QProcess process1;
QProcess process2;

process1.setStandardOutputProcess(&amp;amp;process2);

process1.start(&quot;command1&quot;);
process2.start(&quot;command2&quot;);
</db:programlisting>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="setWorkingDirectory">
<db:title>void QProcess::setWorkingDirectory(const QString &amp;<db:emphasis>dir</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWorkingDirectory</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>dir</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWorkingDirectory(const QString &amp;dir)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the working directory to <db:code role="parameter">dir</db:code>. <db:link xlink:href="qprocess.xml">QProcess</db:link> will start the process in this directory. The default behavior is to start the process in the working directory of the calling process.</db:para>
<db:note>
<db:para>On QNX, this may cause all application threads to temporarily freeze.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#workingDirectory">workingDirectory</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setupChildProcess">
<db:title>[virtual protected] void QProcess::setupChildProcess()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setupChildProcess</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setupChildProcess()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called in the child process context just before the program is executed on Unix or macOS (i.e., after fork(), but before execve()). Reimplement this function to do last minute initialization of the child process. Example:</db:para>
<db:programlisting language="cpp">class SandboxProcess : public QProcess
{
    ...
 protected:
     void setupChildProcess() override;
    ...
};

void SandboxProcess::setupChildProcess()
{
    // Drop all privileges in the child process, and enter
    // a chroot jail.
#if defined Q_OS_UNIX
    ::setgroups(0, 0);
    ::chroot(&quot;/etc/safe&quot;);
    ::chdir(&quot;/&quot;);
    ::setgid(safeGid);
    ::setuid(safeUid);
    ::umask(0);
#endif
}
</db:programlisting>
<db:para>You cannot exit the process (by calling exit(), for instance) from this function. If you need to stop the program before it starts execution, your workaround is to emit <db:link xlink:href="qprocess.xml#finished">finished</db:link>() and then call exit().</db:para>
<db:warning>
<db:para>This function is called by <db:link xlink:href="qprocess.xml">QProcess</db:link> on Unix and macOS only. On Windows and QNX, it is not called.</db:para>
</db:warning>
</db:section>
<db:section xml:id="start">
<db:title>void QProcess::start(const QString &amp;<db:emphasis>program</db:emphasis>, const QStringList &amp;<db:emphasis>arguments</db:emphasis>, QIODevice::OpenMode <db:emphasis>mode</db:emphasis> = ReadWrite)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>program</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>arguments</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODevice::OpenMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>ReadWrite</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(const QString &amp;program, const QStringList &amp;arguments, QIODevice::OpenMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the given <db:code role="parameter">program</db:code> in a new process, passing the command line arguments in <db:code role="parameter">arguments</db:code>.</db:para>
<db:para>The <db:link xlink:href="qprocess.xml">QProcess</db:link> object will immediately enter the Starting state. If the process starts successfully, <db:link xlink:href="qprocess.xml">QProcess</db:link> will emit <db:link xlink:href="qprocess.xml#started">started</db:link>(); otherwise, <db:link xlink:href="qprocess.xml#errorOccurred">errorOccurred</db:link>() will be emitted.</db:para>
<db:note>
<db:para>Processes are started asynchronously, which means the <db:link xlink:href="qprocess.xml#started">started</db:link>() and <db:link xlink:href="qprocess.xml#errorOccurred">errorOccurred</db:link>() signals may be delayed. Call <db:link xlink:href="qprocess.xml#waitForStarted">waitForStarted</db:link>() to make sure the process has started (or has failed to start) and those signals have been emitted.</db:para>
</db:note>
<db:note>
<db:para>No further splitting of the arguments is performed.</db:para>
</db:note>
<db:para><db:emphasis role="bold">Windows:</db:emphasis> The arguments are quoted and joined into a command line that is compatible with the CommandLineToArgvW() Windows function. For programs that have different command line quoting requirements, you need to use <db:link xlink:href="qprocess.xml#setNativeArguments">setNativeArguments</db:link>(). One notable program that does not follow the CommandLineToArgvW() rules is cmd.exe and, by consequence, all batch scripts.</db:para>
<db:para>The OpenMode is set to <db:code role="parameter">mode</db:code>.</db:para>
<db:para>If the <db:link xlink:href="qprocess.xml">QProcess</db:link> object is already running a process, a warning may be printed at the console, and the existing process will continue running unaffected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#processId">processId</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#started">started</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#waitForStarted">waitForStarted</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setNativeArguments">setNativeArguments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start-1">
<db:title>void QProcess::start(const QString &amp;<db:emphasis>command</db:emphasis>, QIODevice::OpenMode <db:emphasis>mode</db:emphasis> = ReadWrite)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>command</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODevice::OpenMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>ReadWrite</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(const QString &amp;command, QIODevice::OpenMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Starts the command <db:code role="parameter">command</db:code> in a new process. The OpenMode is set to <db:code role="parameter">mode</db:code>.</db:para>
<db:para><db:code role="parameter">command</db:code> is a single string of text containing both the program name and its arguments. The arguments are separated by one or more spaces. For example:</db:para>
<db:programlisting language="cpp">QProcess process;
process.start(&quot;del /s *.txt&quot;);
// same as process.start(&quot;del&quot;, QStringList() &amp;lt;&amp;lt; &quot;/s&quot; &amp;lt;&amp;lt; &quot;*.txt&quot;);
...
</db:programlisting>
<db:para>Arguments containing spaces must be quoted to be correctly supplied to the new process. For example:</db:para>
<db:programlisting language="cpp">QProcess process;
process.start(&quot;dir \&quot;My Documents\&quot;&quot;);
</db:programlisting>
<db:para>Literal quotes in the <db:code role="parameter">command</db:code> string are represented by triple quotes. For example:</db:para>
<db:programlisting language="cpp">QProcess process;
process.start(&quot;dir \&quot;Epic 12\&quot;\&quot;\&quot; Singles\&quot;&quot;);
</db:programlisting>
<db:para>After the <db:code role="parameter">command</db:code> string has been split and unquoted, this function behaves like the overload which takes the arguments as a string list.</db:para>
<db:para>You can disable this overload by defining QT_NO_PROCESS_COMBINED_ARGUMENT_START when you compile your applications. This can be useful if you want to ensure that you are not splitting arguments unintentionally, for example. In virtually all cases, using the other overload is the preferred method.</db:para>
<db:para>On operating systems where the system API for passing command line arguments to a subprocess natively uses a single string (Windows), one can conceive command lines which cannot be passed via <db:link xlink:href="qprocess.xml">QProcess</db:link>'s portable list-based API. In these rare cases you need to use <db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>() and <db:link xlink:href="qprocess.xml#setNativeArguments">setNativeArguments</db:link>() instead of this function.</db:para>
</db:section>
<db:section xml:id="start-2">
<db:title>[since 5.1] void QProcess::start(QIODevice::OpenMode <db:emphasis>mode</db:emphasis> = ReadWrite)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>QIODevice::OpenMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>ReadWrite</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(QIODevice::OpenMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Starts the program set by <db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>() with arguments set by <db:link xlink:href="qprocess.xml#setArguments">setArguments</db:link>(). The OpenMode is set to <db:code role="parameter">mode</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setArguments">setArguments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDetached">
<db:title>[since 5.10] bool QProcess::startDetached(qint64 *<db:emphasis>pid</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>startDetached</db:methodname>
<db:methodparam>
<db:type>qint64 *</db:type>
<db:parameter>pid</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startDetached(qint64 *pid)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the program set by <db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>() with arguments set by <db:link xlink:href="qprocess.xml#setArguments">setArguments</db:link>() in a new process, and detaches from it. Returns true on success; otherwise returns false. If the calling process exits, the detached process will continue to run unaffected.</db:para>
<db:para><db:emphasis role="bold">Unix:</db:emphasis> The started process will run in its own session and act like a daemon.</db:para>
<db:para>The process will be started in the directory set by <db:link xlink:href="qprocess.xml#setWorkingDirectory">setWorkingDirectory</db:link>(). If <db:link xlink:href="qprocess.xml#workingDirectory">workingDirectory</db:link>() is empty, the working directory is inherited from the calling process.</db:para>
<db:note>
<db:para>On QNX, this may cause all application threads to temporarily freeze.</db:para>
</db:note>
<db:para>If the function is successful then *<db:code role="parameter">pid</db:code> is set to the process identifier of the started process. Note that the child process may exit and the PID may become invalid without notice. Furthermore, after the child process exits, the same PID may be recycled and used by a completely different process. User code should be careful when using this variable, especially if one intends to forcibly terminate the process by operating system means.</db:para>
<db:para>Only the following property setters are supported by startDetached():</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#setArguments">setArguments</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#setCreateProcessArgumentsModifier">setCreateProcessArgumentsModifier</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#setNativeArguments">setNativeArguments</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#setProcessEnvironment">setProcessEnvironment</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#setProgram">setProgram</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#setStandardErrorFile">setStandardErrorFile</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#setStandardInputFile">setStandardInputFile</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#setStandardOutputFile">setStandardOutputFile</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#setWorkingDirectory">setWorkingDirectory</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All other properties of the <db:link xlink:href="qprocess.xml">QProcess</db:link> object are ignored.</db:para>
<db:note>
<db:para>The called process inherits the console window of the calling process. To suppress console output, redirect standard/error output to <db:link xlink:href="qprocess.xml#nullDevice">QProcess::nullDevice</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#startDetached-1">startDetached</db:link>(const QString &amp;program, const QStringList &amp;arguments, const QString &amp;workingDirectory, qint64 *pid)</db:member>
<db:member><db:link xlink:href="qprocess.xml#startDetached-2">startDetached</db:link>(const QString &amp;command)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDetached-1">
<db:title>[static] bool QProcess::startDetached(const QString &amp;<db:emphasis>program</db:emphasis>, const QStringList &amp;<db:emphasis>arguments</db:emphasis>, const QString &amp;<db:emphasis>workingDirectory</db:emphasis> = QString(), qint64 *<db:emphasis>pid</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>startDetached</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>program</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>arguments</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>workingDirectory</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>qint64 *</db:type>
<db:parameter>pid</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startDetached(const QString &amp;program, const QStringList &amp;arguments, const QString &amp;workingDirectory, qint64 *pid)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qprocess.xml#startDetached">startDetached</db:link>().</db:para>
<db:para>Starts the program <db:code role="parameter">program</db:code> with the arguments <db:code role="parameter">arguments</db:code> in a new process, and detaches from it. Returns true on success; otherwise returns false. If the calling process exits, the detached process will continue to run unaffected.</db:para>
<db:para>Argument handling is identical to the respective <db:link xlink:href="qprocess.xml#start">start</db:link>() overload.</db:para>
<db:para>The process will be started in the directory <db:code role="parameter">workingDirectory</db:code>. If <db:code role="parameter">workingDirectory</db:code> is empty, the working directory is inherited from the calling process.</db:para>
<db:para>If the function is successful then *<db:code role="parameter">pid</db:code> is set to the process identifier of the started process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDetached-2">
<db:title>[static] bool QProcess::startDetached(const QString &amp;<db:emphasis>command</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>startDetached</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>command</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startDetached(const QString &amp;command)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qprocess.xml#startDetached">startDetached</db:link>().</db:para>
<db:para>Starts the command <db:code role="parameter">command</db:code> in a new process, and detaches from it. Returns true on success; otherwise returns false.</db:para>
<db:para>Argument handling is identical to the respective <db:link xlink:href="qprocess.xml#start">start</db:link>() overload.</db:para>
<db:para>After the <db:code role="parameter">command</db:code> string has been split and unquoted, this function behaves like the overload which takes the arguments as a string list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#start-1">start</db:link>(const QString &amp;command, QIODevice::OpenMode mode)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="started">
<db:title>void QProcess::started()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>started</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void started()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted by <db:link xlink:href="qprocess.xml">QProcess</db:link> when the process has started, and <db:link xlink:href="qprocess.xml#state">state</db:link>() returns <db:link xlink:href="qprocess.xml#ProcessState-enum">Running</db:link>.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="state">
<db:title>QProcess::ProcessState QProcess::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProcess::ProcessState</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcess::ProcessState state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current state of the process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#stateChanged">stateChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QProcess::stateChanged(QProcess::ProcessState <db:emphasis>newState</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QProcess::ProcessState</db:type>
<db:parameter>newState</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QProcess::ProcessState newState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the state of <db:link xlink:href="qprocess.xml">QProcess</db:link> changes. The <db:code role="parameter">newState</db:code> argument is the state <db:link xlink:href="qprocess.xml">QProcess</db:link> changed to.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="systemEnvironment">
<db:title>[static, since 4.1] QStringList QProcess::systemEnvironment()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>systemEnvironment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList systemEnvironment()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the environment of the calling process as a list of key=value pairs. Example:</db:para>
<db:programlisting language="cpp">QStringList environment = QProcess::systemEnvironment();
// environment = {&quot;PATH=/usr/bin:/usr/local/bin&quot;,
//                &quot;USER=greg&quot;, &quot;HOME=/home/greg&quot;}
</db:programlisting>
<db:para>This function does not cache the system environment. Therefore, it's possible to obtain an updated version of the environment if low-level C library functions like <db:code>setenv</db:code> or <db:code>putenv</db:code> have been called.</db:para>
<db:para>However, note that repeated calls to this function will recreate the list of environment variables, which is a non-trivial operation.</db:para>
<db:note>
<db:para>For new code, it is recommended to use <db:link xlink:href="qprocessenvironment.xml#systemEnvironment">QProcessEnvironment::systemEnvironment</db:link>()</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#systemEnvironment">QProcessEnvironment::systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProcessEnvironment">setProcessEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="terminate">
<db:title>void QProcess::terminate()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>terminate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void terminate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to terminate the process.</db:para>
<db:para>The process may not exit as a result of calling this function (it is given the chance to prompt the user for any unsaved files, etc).</db:para>
<db:para>On Windows, terminate() posts a WM_CLOSE message to all top-level windows of the process and then to the main thread of the process itself. On Unix and macOS the SIGTERM signal is sent.</db:para>
<db:para>Console applications on Windows that do not run an event loop, or whose event loop does not handle the WM_CLOSE message, can only be terminated by calling <db:link xlink:href="qprocess.xml#kill">kill</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#kill">kill</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForBytesWritten">
<db:title>[override virtual] bool QProcess::waitForBytesWritten(int <db:emphasis>msecs</db:emphasis> = 30000)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>waitForBytesWritten</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
<db:initializer>30000</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForBytesWritten(int msecs) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#waitForBytesWritten" role="function">QIODevice::waitForBytesWritten(int msecs)</db:link>.</db:para>
</db:section>
<db:section xml:id="waitForFinished">
<db:title>bool QProcess::waitForFinished(int <db:emphasis>msecs</db:emphasis> = 30000)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>waitForFinished</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
<db:initializer>30000</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForFinished(int msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Blocks until the process has finished and the <db:link xlink:href="qprocess.xml#finished">finished</db:link>() signal has been emitted, or until <db:code role="parameter">msecs</db:code> milliseconds have passed.</db:para>
<db:para>Returns true if the process finished; otherwise returns false (if the operation timed out, if an error occurred, or if this <db:link xlink:href="qprocess.xml">QProcess</db:link> is already finished).</db:para>
<db:para>This function can operate without an event loop. It is useful when writing non-GUI applications and when performing I/O operations in a non-GUI thread.</db:para>
<db:warning>
<db:para>Calling this function from the main (GUI) thread might cause your user interface to freeze.</db:para>
</db:warning>
<db:para>If msecs is -1, this function will not time out.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#finished">finished</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#waitForStarted">waitForStarted</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#waitForReadyRead">waitForReadyRead</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#waitForBytesWritten">waitForBytesWritten</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForReadyRead">
<db:title>[override virtual] bool QProcess::waitForReadyRead(int <db:emphasis>msecs</db:emphasis> = 30000)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>waitForReadyRead</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
<db:initializer>30000</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForReadyRead(int msecs) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#waitForReadyRead" role="function">QIODevice::waitForReadyRead(int msecs)</db:link>.</db:para>
</db:section>
<db:section xml:id="waitForStarted">
<db:title>bool QProcess::waitForStarted(int <db:emphasis>msecs</db:emphasis> = 30000)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>waitForStarted</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
<db:initializer>30000</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForStarted(int msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Blocks until the process has started and the <db:link xlink:href="qprocess.xml#started">started</db:link>() signal has been emitted, or until <db:code role="parameter">msecs</db:code> milliseconds have passed.</db:para>
<db:para>Returns true if the process was started successfully; otherwise returns false (if the operation timed out or if an error occurred).</db:para>
<db:para>This function can operate without an event loop. It is useful when writing non-GUI applications and when performing I/O operations in a non-GUI thread.</db:para>
<db:warning>
<db:para>Calling this function from the main (GUI) thread might cause your user interface to freeze.</db:para>
</db:warning>
<db:para>If msecs is -1, this function will not time out.</db:para>
<db:note>
<db:para>On some UNIX operating systems, this function may return true but the process may later report a <db:link xlink:href="qprocess.xml#ProcessError-enum">QProcess::FailedToStart</db:link> error.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#started">started</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#waitForReadyRead">waitForReadyRead</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#waitForBytesWritten">waitForBytesWritten</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#waitForFinished">waitForFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="workingDirectory">
<db:title>QString QProcess::workingDirectory() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>workingDirectory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString workingDirectory() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:link xlink:href="qprocess.xml">QProcess</db:link> has been assigned a working directory, this function returns the working directory that the <db:link xlink:href="qprocess.xml">QProcess</db:link> will enter before the program has started. Otherwise, (i.e., no directory has been assigned,) an empty string is returned, and <db:link xlink:href="qprocess.xml">QProcess</db:link> will use the application's current working directory instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setWorkingDirectory">setWorkingDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeData">
<db:title>[override virtual protected] qint64 QProcess::writeData(const char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>len</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>writeData</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 writeData(const char *data, qint64 len) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#writeData" role="function">QIODevice::writeData(const char *data, qint64 maxSize)</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="Q_PID-typedef">
<db:title>Q_PID</db:title>
<db:typedefsynopsis>
<db:typedefname>Q_PID</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for the identifiers used to represent processes on the underlying platform. On Unix, this corresponds to <db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link>; on Windows, it corresponds to _PROCESS_INFORMATION*.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#pid" role="deprecated">QProcess::pid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QT_NO_PROCESS_COMBINED_ARGUMENT_START">
<db:title>[since 5.6] QT_NO_PROCESS_COMBINED_ARGUMENT_START</db:title>
<db:methodsynopsis>
<db:methodname>QT_NO_PROCESS_COMBINED_ARGUMENT_START</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT_NO_PROCESS_COMBINED_ARGUMENT_START</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables the <db:link xlink:href="qprocess.xml#start-1">QProcess::start</db:link>() overload taking a single string. In most cases where it is used, the user intends for the first argument to be treated atomically as per the other overload.</db:para>
<db:para>This macro was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#start-1">QProcess::start</db:link>(const QString &amp;command, QIODevice::OpenMode mode)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QProcess</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qprocess.xml">QProcess</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="environment">
<db:title>QStringList QProcess::environment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>environment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList environment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the environment that <db:link xlink:href="qprocess.xml">QProcess</db:link> will pass to its child process, or an empty <db:link xlink:href="qstringlist.xml">QStringList</db:link> if no environment has been set using <db:link xlink:href="qprocess.xml#setEnvironment">setEnvironment</db:link>(). If no environment has been set, the environment of the calling process will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#processEnvironment">processEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setEnvironment">setEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#systemEnvironment">systemEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QProcess::error(QProcess::ProcessError <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>QProcess::ProcessError</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(QProcess::ProcessError error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qprocess.xml#errorOccurred">errorOccurred</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="finished-1">
<db:title>void QProcess::finished(int <db:emphasis>exitCode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>exitCode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished(int exitCode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use finished(int <db:link xlink:href="qprocess.xml#exitCode">exitCode</db:link>, <db:link xlink:href="qprocess.xml#ExitStatus-enum">QProcess::ExitStatus</db:link> status) instead.</db:para>
</db:section>
<db:section xml:id="pid">
<db:title>Q_PID QProcess::pid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Q_PID</db:type>
<db:methodname>pid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_PID pid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qprocess.xml#processId">processId</db:link>() instead.</db:para>
<db:para>Returns the native process identifier for the running process, if available. If no process is currently running, 0 is returned.</db:para>
<db:note>
<db:para>Unlike <db:link xlink:href="qprocess.xml#processId">processId</db:link>(), pid() returns an integer on Unix and a pointer on Windows.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#Q_PID-typedef">Q_PID</db:link></db:member>
<db:member><db:link xlink:href="qprocess.xml#processId">processId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readChannelMode">
<db:title>QProcess::ProcessChannelMode QProcess::readChannelMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProcess::ProcessChannelMode</db:type>
<db:methodname>readChannelMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcess::ProcessChannelMode readChannelMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the read channel mode of the <db:link xlink:href="qprocess.xml">QProcess</db:link>. This function is equivalent to <db:link xlink:href="qprocess.xml#processChannelMode">processChannelMode</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#setReadChannelMode">setReadChannelMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#processChannelMode">processChannelMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEnvironment">
<db:title>void QProcess::setEnvironment(const QStringList &amp;<db:emphasis>environment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEnvironment</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>environment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEnvironment(const QStringList &amp;environment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Sets the environment that <db:link xlink:href="qprocess.xml">QProcess</db:link> will pass to the child process. The parameter <db:code role="parameter">environment</db:code> is a list of key=value pairs.</db:para>
<db:para>For example, the following code adds the environment variable TMPDIR:</db:para>
<db:programlisting language="cpp">QProcess process;
QStringList env = QProcess::systemEnvironment();
env &amp;lt;&amp;lt; &quot;TMPDIR=C:\\MyApp\\temp&quot;; // Add an environment variable
process.setEnvironment(env);
process.start(&quot;myapp&quot;);
</db:programlisting>
<db:note>
<db:para>This function is less efficient than the <db:link xlink:href="qprocess.xml#setProcessEnvironment">setProcessEnvironment</db:link>() function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#environment">environment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProcessEnvironment">setProcessEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#systemEnvironment">systemEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReadChannelMode">
<db:title>void QProcess::setReadChannelMode(QProcess::ProcessChannelMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setReadChannelMode</db:methodname>
<db:methodparam>
<db:type>QProcess::ProcessChannelMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setReadChannelMode(QProcess::ProcessChannelMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qprocess.xml#setProcessChannelMode">setProcessChannelMode</db:link>(<db:code role="parameter">mode</db:code>) instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#readChannelMode">readChannelMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProcessChannelMode">setProcessChannelMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
