<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstract3DInputHandler Class</db:title>
<db:productname>QtGraphs</db:productname>
<db:edition>Qt Graphs | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Graphs Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The base class for implementations of 3D input handlers.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstract3DInputHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Graphs)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Graphs)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += graphs</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="q3dinputhandler.xml" xlink:role="class">Q3DInputHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtgraphs-abstractinputhandler3d.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="q3dinputhandler.xml" xlink:role="class">Q3DInputHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstract3DInputHandler is part of <db:simplelist><db:member><db:link xlink:href="graphs-3d.xml">Qt Graphs C++ Classes for 3D</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qabstract3dinputhandler.xml">QAbstract3DInputHandler</db:link> is the base class that is subclassed by different input handling implementations that take input events and translate those to camera and light movements. Input handlers also translate raw input events to slicing and selection events in the scene.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="InputView-enum">
<db:title>enum QAbstract3DInputHandler::InputView</db:title>
<db:enumsynopsis>
<db:enumname>InputView</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OnPrimary</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OnSecondary</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Predefined input views for mouse and touch based input handlers.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dinputhandler.xml">QAbstract3DInputHandler</db:link></db:emphasis>::<db:emphasis role="bold">InputView</db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Mouse or touch not on a view.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dinputhandler.xml">QAbstract3DInputHandler</db:link></db:emphasis>::<db:emphasis role="bold">InputView</db:emphasis>::OnPrimary</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Mouse or touch input received on the primary view area. If secondary view is displayed when <db:link xlink:href="qabstract3dinputhandler.xml#inputView-prop">inputView</db:link> becomes OnPrimary, secondary view is closed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstract3dinputhandler.xml">QAbstract3DInputHandler</db:link></db:emphasis>::<db:emphasis role="bold">InputView</db:emphasis>::OnSecondary</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Mouse or touch input received on the secondary view area.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="inputPosition-prop">
<db:title>inputPosition : QPoint</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPoint</db:type>
<db:varname>inputPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">inputPosition</db:synopsisinfo>
<db:synopsisinfo role="setter">setInputPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">positionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the last input position based on the processed input events.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpoint.xml">QPoint</db:link></db:type> <db:emphasis role="bold">inputPosition</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInputPosition</db:emphasis>(const <db:type><db:link xlink:href="qpoint.xml">QPoint</db:link></db:type> &amp;<db:emphasis>position</db:emphasis>, <db:type>bool</db:type> <db:emphasis>forceSelection</db:emphasis> = false)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">positionChanged</db:emphasis>(const <db:type><db:link xlink:href="qpoint.xml">QPoint</db:link></db:type> &amp;<db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputView-prop">
<db:title>inputView : QAbstract3DInputHandler::InputView</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstract3DInputHandler::InputView</db:type>
<db:varname>inputView</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">inputView</db:synopsisinfo>
<db:synopsisinfo role="setter">setInputView</db:synopsisinfo>
<db:synopsisinfo role="notifier">inputViewChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current enumerated input view based on the view of the processed input events.</db:para>
<db:para>One of the <db:link xlink:href="qabstract3dinputhandler.xml#InputView-enum">InputView</db:link> enum values.</db:para>
<db:para>When the view changes, the <db:code>inputViewChanged</db:code> signal is emitted.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstract3dinputhandler.xml#InputView-enum">QAbstract3DInputHandler::InputView</db:link></db:type> <db:emphasis role="bold">inputView</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInputView</db:emphasis>(<db:type><db:link xlink:href="qabstract3dinputhandler.xml#InputView-enum">QAbstract3DInputHandler::InputView</db:link></db:type> <db:emphasis>inputView</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">inputViewChanged</db:emphasis>(<db:type><db:link xlink:href="qabstract3dinputhandler.xml#InputView-enum">QAbstract3DInputHandler::InputView</db:link></db:type> <db:emphasis>view</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dinputhandler.xml#InputView-enum">InputView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scene-prop">
<db:title>scene : Q3DScene*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Q3DScene*</db:type>
<db:varname>scene</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">scene</db:synopsisinfo>
<db:synopsisinfo role="setter">setScene</db:synopsisinfo>
<db:synopsisinfo role="notifier">sceneChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the 3D scene this abstract input handler is controlling.</db:para>
<db:para>One input handler can control one scene. Setting a scene to an input handler does not transfer the ownership of the scene.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="q3dscene.xml">Q3DScene</db:link></db:type> *<db:emphasis role="bold">scene</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setScene</db:emphasis>(<db:type><db:link xlink:href="q3dscene.xml">Q3DScene</db:link></db:type> *<db:emphasis>scene</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sceneChanged</db:emphasis>(<db:type><db:link xlink:href="q3dscene.xml">Q3DScene</db:link></db:type> *<db:emphasis>scene</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstract3DInputHandler-1">
<db:title>[explicit protected] QAbstract3DInputHandler::QAbstract3DInputHandler(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstract3DInputHandler</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstract3DInputHandler(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs the base class. An optional <db:code role="parameter">parent</db:code> parameter can be given and is then passed to <db:link xlink:href="qobject.xml">QObject</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstract3DInputHandler">
<db:title>[virtual] QAbstract3DInputHandler::~QAbstract3DInputHandler()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstract3DInputHandler</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstract3DInputHandler()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the base class.</db:para>
</db:section>
<db:section xml:id="handleSelection">
<db:title>void QAbstract3DInputHandler::handleSelection(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>handleSelection</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void handleSelection(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts an incoming selection query <db:code role="parameter">position</db:code> to a selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscene.xml#selectionQueryPosition-prop">Q3DScene::selectionQueryPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[virtual] void QAbstract3DInputHandler::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseDoubleClickEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseDoubleClickEvent(QMouseEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle mouse double click events. Mouse double click event is given in the <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[virtual] void QAbstract3DInputHandler::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>, const QPoint &amp;<db:emphasis>mousePos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>mousePos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *event, const QPoint &amp;mousePos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle mouse move events. Mouse move event is given in the <db:code role="parameter">event</db:code> and the mouse position in <db:code role="parameter">mousePos</db:code>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[virtual] void QAbstract3DInputHandler::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>, const QPoint &amp;<db:emphasis>mousePos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>mousePos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *event, const QPoint &amp;mousePos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle mouse press events. Mouse press event is given in the <db:code role="parameter">event</db:code> and the mouse position in <db:code role="parameter">mousePos</db:code>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[virtual] void QAbstract3DInputHandler::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>, const QPoint &amp;<db:emphasis>mousePos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>mousePos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *event, const QPoint &amp;mousePos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle mouse release events. Mouse release event is given in the <db:code role="parameter">event</db:code> and the mouse position in <db:code role="parameter">mousePos</db:code>.</db:para>
</db:section>
<db:section xml:id="prevDistance">
<db:title>[protected] int QAbstract3DInputHandler::prevDistance() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>prevDistance</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int prevDistance() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the manhattan length between last two input positions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dinputhandler.xml#setPrevDistance">setPrevDistance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previousInputPos">
<db:title>[protected] QPoint QAbstract3DInputHandler::previousInputPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>previousInputPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint previousInputPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the previous input position.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dinputhandler.xml#setPreviousInputPos">setPreviousInputPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrevDistance">
<db:title>[protected] void QAbstract3DInputHandler::setPrevDistance(int <db:emphasis>distance</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrevDistance</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>distance</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrevDistance(int distance)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">distance</db:code> (manhattan length) between last two input positions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dinputhandler.xml#prevDistance">prevDistance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreviousInputPos">
<db:title>[protected] void QAbstract3DInputHandler::setPreviousInputPos(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreviousInputPos</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreviousInputPos(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the previous input position to the point given by <db:code role="parameter">position</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dinputhandler.xml#previousInputPos">previousInputPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="touchEvent">
<db:title>[virtual] void QAbstract3DInputHandler::touchEvent(QTouchEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>touchEvent</db:methodname>
<db:methodparam>
<db:type>QTouchEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void touchEvent(QTouchEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle touch input events. Touch event is given in the <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[virtual] void QAbstract3DInputHandler::wheelEvent(QWheelEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>wheelEvent</db:methodname>
<db:methodparam>
<db:type>QWheelEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wheelEvent(QWheelEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle wheel events. Wheel event is given in the <db:code role="parameter">event</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
