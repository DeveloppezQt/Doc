<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PieSeries QML Type</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link> type is used for making pie charts.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCharts 2.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtcharts-abstractseries.xml">AbstractSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The following QML shows how to create a simple pie chart.</db:para>
<db:programlisting language="qml">ChartView {
    id: chart
    title: &quot;Top-5 car brand shares in Finland&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignBottom
    antialiasing: true

    PieSeries {
        id: pieSeries
        PieSlice { label: &quot;Volkswagen&quot;; value: 13.5 }
        PieSlice { label: &quot;Toyota&quot;; value: 10.9 }
        PieSlice { label: &quot;Ford&quot;; value: 8.6 }
        PieSlice { label: &quot;Skoda&quot;; value: 8.2 }
        PieSlice { label: &quot;Volvo&quot;; value: 6.8 }
    }
}

Component.onCompleted: {
    // You can also manipulate slices dynamically
    othersSlice = pieSeries.append(&quot;Others&quot;, 52.0);
    pieSeries.find(&quot;Volkswagen&quot;).exploded = true;
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart1.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>count : int</db:title>
<db:para>Number of slices in the series.</db:para>
</db:section>
<db:section xml:id="endAngle-prop">
<db:title>endAngle : real</db:title>
<db:para>Defines the ending angle of the pie.</db:para>
<db:para>Full pie is 360 degrees where 0 degrees is at 12 a'clock.</db:para>
<db:para>Default is value is 360.</db:para>
</db:section>
<db:section xml:id="holeSize-prop">
<db:title>holeSize : real</db:title>
<db:para>Defines the donut hole size.</db:para>
<db:para>The value is a relative value to the chart rectangle where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the minimum size (full pie drawn, without any hole inside).</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the maximum size that can fit the chart. (donut has no width)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When setting this property the size property is adjusted if necessary, to ensure that the inner size is not greater than the outer size.</db:para>
<db:para>Default value is 0.0.</db:para>
</db:section>
<db:section xml:id="horizontalPosition-prop">
<db:title>horizontalPosition : real</db:title>
<db:para>Defines the horizontal position of the pie.</db:para>
<db:para>The value is a relative value to the chart rectangle where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the absolute left.</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the absolute right.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Default value is 0.5 (center).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieseries.xml#verticalPosition-prop">verticalPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size-prop">
<db:title>size : real</db:title>
<db:para>Defines the pie size.</db:para>
<db:para>The value is a relative value to the chart rectangle where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the minimum size (pie not drawn).</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the maximum size that can fit the chart.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Default value is 0.7.</db:para>
</db:section>
<db:section xml:id="startAngle-prop">
<db:title>startAngle : real</db:title>
<db:para>Defines the starting angle of the pie.</db:para>
<db:para>Full pie is 360 degrees where 0 degrees is at 12 a'clock.</db:para>
<db:para>Default is value is 0.</db:para>
</db:section>
<db:section xml:id="sum-prop">
<db:title>sum : real</db:title>
<db:para>Sum of all slices.</db:para>
<db:para>The series keeps track of the sum of all slices it holds.</db:para>
</db:section>
<db:section xml:id="verticalPosition-prop">
<db:title>verticalPosition : real</db:title>
<db:para>Defines the vertical position of the pie.</db:para>
<db:para>The value is a relative value to the chart rectangle where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the absolute top.</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the absolute bottom.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Default value is 0.5 (center).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieseries.xml#horizontalPosition-prop">horizontalPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="onAdded-signal">
<db:title>onAdded(list&lt;PieSlice&gt; <db:emphasis>slices</db:emphasis>)</db:title>
<db:para>Emitted when <db:code role="parameter">slices</db:code> have been added to the series.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnAdded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onClicked-signal">
<db:title>onClicked(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when a <db:code role="parameter">slice</db:code> has been clicked.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onCountChanged-signal">
<db:title>onCountChanged()</db:title>
<db:para>Emitted when the slice count has changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnCountChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onDoubleClicked-signal">
<db:title>onDoubleClicked(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when a <db:code role="parameter">slice</db:code> has been doubleClicked.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnDoubleClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onHovered-signal">
<db:title>onHovered(PieSlice <db:emphasis>slice</db:emphasis>, bool <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted when user has hovered over or away from the <db:code role="parameter">slice</db:code>. <db:code role="parameter">state</db:code> is true when user has hovered over the slice and false when hover has moved away from the slice.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnHovered</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onPressed-signal">
<db:title>onPressed(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when a <db:code role="parameter">slice</db:code> has been pressed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnPressed</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onReleased-signal">
<db:title>onReleased(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when a <db:code role="parameter">slice</db:code> has been released.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnReleased</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onRemoved-signal">
<db:title>onRemoved(list&lt;PieSlice&gt; <db:emphasis>slices</db:emphasis>)</db:title>
<db:para>Emitted when <db:code role="parameter">slices</db:code> have been removed from the series.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnRemoved</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onSliceAdded-signal">
<db:title>onSliceAdded(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>Emitted when <db:code role="parameter">slice</db:code> has been added to the series.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnSliceAdded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onSliceRemoved-signal">
<db:title>onSliceRemoved(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>Emitted when <db:code role="parameter">slice</db:code> has been removed from the series.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnSliceRemoved</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="onSumChanged-signal">
<db:title>onSumChanged()</db:title>
<db:para>Emitted when the sum of all slices has changed. This may happen for example if you add or remove slices, or if you change value of a slice.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onOnSumChanged</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="append-method">
<db:title>PieSlice append(string <db:emphasis>label</db:emphasis>, real <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Adds a new slice with <db:code role="parameter">label</db:code> and <db:code role="parameter">value</db:code> to the pie.</db:para>
</db:section>
<db:section xml:id="at-method">
<db:title>PieSlice at(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns slice at <db:code role="parameter">index</db:code>. Returns null if the index is not valid.</db:para>
</db:section>
<db:section xml:id="clear-method">
<db:title>clear()</db:title>
<db:para>Removes all slices from the pie.</db:para>
</db:section>
<db:section xml:id="find-method">
<db:title>PieSlice find(string <db:emphasis>label</db:emphasis>)</db:title>
<db:para>Returns the first slice with <db:code role="parameter">label</db:code>. Returns null if the index is not valid.</db:para>
</db:section>
<db:section xml:id="remove-method">
<db:title>bool remove(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>Removes the <db:code role="parameter">slice</db:code> from the pie. Returns true if the removal was successful, false otherwise.</db:para>
</db:section>
</db:section>
</db:article>
