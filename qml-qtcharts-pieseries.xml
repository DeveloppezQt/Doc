<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PieSeries QML Type</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Presents data in pie charts.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCharts 2.15</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>AbstractSeries</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpieseries.xml">QPieSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A pie series consists of slices that are defined using the <db:link xlink:href="qml-qtcharts-pieslice.xml">PieSlice</db:link> type. The slices can have any values as the <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link> type calculates the percentage of a slice compared with the sum of all slices in the series to determine the actual size of the slice in the chart.</db:para>
<db:para>Pie size and position on the chart are controlled by using relative values that range from 0.0 to 1.0. These relate to the actual chart rectangle.</db:para>
<db:para>By default, the pie is defined as a full pie. A partial pie can be created by setting a starting angle and angle span for the series. A full pie is 360 degrees, where 0 is at 12 a'clock.</db:para>
<db:para>The following QML example shows how to create a simple pie chart.</db:para>
<db:programlisting language="qml">ChartView {
    id: chart
    title: &quot;Top-5 car brand shares in Finland&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignBottom
    antialiasing: true

    PieSeries {
        id: pieSeries
        PieSlice { label: &quot;Volkswagen&quot;; value: 13.5 }
        PieSlice { label: &quot;Toyota&quot;; value: 10.9 }
        PieSlice { label: &quot;Ford&quot;; value: 8.6 }
        PieSlice { label: &quot;Skoda&quot;; value: 8.2 }
        PieSlice { label: &quot;Volvo&quot;; value: 6.8 }
    }
}

Component.onCompleted: {
    // You can also manipulate slices dynamically, like append a slice or set a slice exploded
    othersSlice = pieSeries.append(&quot;Others&quot;, 52.0);
    pieSeries.find(&quot;Volkswagen&quot;).exploded = true;
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart1.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieslice.xml">PieSlice</db:link></db:member>
<db:member><db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The number of slices in the series.</db:para>
</db:section>
<db:section xml:id="endAngle-prop">
<db:title>endAngle : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>endAngle</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The ending angle of the pie.</db:para>
<db:para>A full pie is 360 degrees, where 0 degrees is at 12 a'clock.</db:para>
<db:para>The default value is 360.</db:para>
</db:section>
<db:section xml:id="holeSize-prop">
<db:title>holeSize : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>holeSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The donut hole size.</db:para>
<db:para>The value is relative to the chart rectangle, so that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the minimum size (full pie drawn without a hole).</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the maximum size that can fit the chart (the donut has no width).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When setting this property, the <db:link xlink:href="qml-qtcharts-pieseries.xml#size-prop">size</db:link> property is adjusted if necessary, to ensure that the hole size is not greater than the pie size.</db:para>
<db:para>The default value is 0.0.</db:para>
</db:section>
<db:section xml:id="horizontalPosition-prop">
<db:title>horizontalPosition : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>horizontalPosition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The horizontal position of the pie.</db:para>
<db:para>The value is relative to the chart rectangle, so that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the absolute left.</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the absolute right.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default value is 0.5 (center).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieseries.xml#verticalPosition-prop">verticalPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size-prop">
<db:title>size : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>size</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The pie size.</db:para>
<db:para>The value is relative to the chart rectangle, so that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the minimum size (pie not drawn).</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the maximum size that can fit the chart.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When setting this property, the <db:link xlink:href="qml-qtcharts-pieseries.xml#holeSize-prop">holeSize</db:link> property is adjusted if necessary, to ensure that the hole size is not greater than the pie size.</db:para>
<db:para>The default value is 0.7.</db:para>
</db:section>
<db:section xml:id="startAngle-prop">
<db:title>startAngle : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>startAngle</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The starting angle of the pie.</db:para>
<db:para>A full pie is 360 degrees, where 0 degrees is at 12 a'clock.</db:para>
<db:para>The default value is 0.</db:para>
</db:section>
<db:section xml:id="sum-prop">
<db:title>[read-only] sum : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>sum</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The sum of all slices.</db:para>
<db:para>The series keeps track of the sum of all the slices it holds.</db:para>
</db:section>
<db:section xml:id="verticalPosition-prop">
<db:title>verticalPosition : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>verticalPosition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The vertical position of the pie.</db:para>
<db:para>The value is relative to the chart rectangle, so that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the absolute top.</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the absolute bottom.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default value is 0.5 (center).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieseries.xml#horizontalPosition-prop">horizontalPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="added-signal">
<db:title>added(list&lt;PieSlice&gt; <db:emphasis>slices</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slices specified by <db:code role="parameter">slices</db:code> are added to the series.</db:para>
<db:para>The corresponding signal handler is <db:code>onAdded</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAdded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="clicked-signal">
<db:title>clicked(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slice specified by <db:code role="parameter">slice</db:code> is clicked.</db:para>
<db:para>The corresponding signal handler is <db:code>onClicked</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="doubleClicked-signal">
<db:title>doubleClicked(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slice specified by <db:code role="parameter">slice</db:code> is double-clicked.</db:para>
<db:para>The corresponding signal handler is <db:code>onDoubleClicked</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDoubleClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="hovered-signal">
<db:title>hovered(PieSlice <db:emphasis>slice</db:emphasis>, bool <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted when a mouse is hovered over the slice specified by <db:code role="parameter">slice</db:code>. When the mouse moves over the slice, <db:code role="parameter">state</db:code> turns <db:code>true</db:code>, and when the mouse moves away again, it turns <db:code>false</db:code>.</db:para>
<db:para>The corresponding signal handler is <db:code>onHovered</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onHovered</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="pressed-signal">
<db:title>pressed(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks the slice specified by <db:code role="parameter">slice</db:code> and holds down the mouse button.</db:para>
<db:para>The corresponding signal handler is <db:code>onPressed</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPressed</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="released-signal">
<db:title>released(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user releases the mouse press on the slice specified by <db:code role="parameter">slice</db:code>.</db:para>
<db:para>The corresponding signal handler is <db:code>onReleased</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onReleased</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="removed-signal">
<db:title>removed(list&lt;PieSlice&gt; <db:emphasis>slices</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slices specified by <db:code role="parameter">slices</db:code> are removed from the series.</db:para>
<db:para>The corresponding signal handler is <db:code>onRemoved</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRemoved</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="sliceAdded-signal">
<db:title>sliceAdded(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slice specified by <db:code role="parameter">slice</db:code> is added to the series.</db:para>
<db:para>The corresponding signal handler is <db:code>onSliceAdded</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSliceAdded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="sliceRemoved-signal">
<db:title>sliceRemoved(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slice specified by <db:code role="parameter">slice</db:code> is removed from the series.</db:para>
<db:para>The corresponding signal handler is <db:code>onSliceRemoved</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSliceRemoved</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="append-method">
<db:title>PieSlice append(string <db:emphasis>label</db:emphasis>, real <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Adds a new slice with the label <db:code role="parameter">label</db:code> and the value <db:code role="parameter">value</db:code> to the pie.</db:para>
</db:section>
<db:section xml:id="at-method">
<db:title>PieSlice at(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the slice at the position specified by <db:code role="parameter">index</db:code>. Returns null if the index is not valid.</db:para>
</db:section>
<db:section xml:id="clear-method">
<db:title>clear()</db:title>
<db:para>Removes all slices from the pie.</db:para>
</db:section>
<db:section xml:id="find-method">
<db:title>PieSlice find(string <db:emphasis>label</db:emphasis>)</db:title>
<db:para>Returns the first slice that has the label <db:code role="parameter">label</db:code>. Returns null if the label is not found.</db:para>
</db:section>
<db:section xml:id="remove-method">
<db:title>bool remove(PieSlice <db:emphasis>slice</db:emphasis>)</db:title>
<db:para>Removes the slice specified by <db:code role="parameter">slice</db:code> from the pie. Returns <db:code>true</db:code> if the removal was successful, <db:code>false</db:code> otherwise.</db:para>
</db:section>
</db:section>
</db:article>
