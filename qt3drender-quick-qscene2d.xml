<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScene2D Class</db:title>
<db:subtitle>Qt3DRender::Quick::QScene2D</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This class enables rendering qml into a texture, which then can be used as a part of 3D scene.</db:para>
<db:para>This class was introduced in Qt 5.9.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Qt3DQuickScene2D/QScene2D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3dquickscene2d)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3dquickscene2d)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dquickscene2d</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick-scene2d-scene2d.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class uses <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> to render the given <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> into an offscreen surface, which is attached to a texture provided by the user. This allows the component to directly render into the texture without intermediate copy and the user to freely specify how the texture is used in the 3D scene.</db:para>
<db:para>The entities using the <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link> can be associated with the class to enable interaction with the item; if an entity has a <db:link xlink:href="qt3drender-qobjectpicker.xml">QObjectPicker</db:link> component, the pick events from that picker are sent to the <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link> and converted to mouse events and finally sent to the item.</db:para>
<db:note>
<db:para>Only mouse events are supported. The item does not support keyboard input.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RenderPolicy-enum">
<db:title>enum QScene2D::RenderPolicy</db:title>
<db:enumsynopsis>
<db:enumname>RenderPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>Continuous</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SingleShot</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type describes types of render policies available.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-quick.xml">Quick</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link></db:emphasis>::Continuous</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qml-qtquick-scene2d-scene2d.xml">Scene2D</db:link> is rendering continuously. This is the default render policy.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-quick.xml">Quick</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link></db:emphasis>::SingleShot</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qml-qtquick-scene2d-scene2d.xml">Scene2D</db:link> renders to the texture only once after which the resources allocated for rendering are released.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="item-prop">
<db:title>item : QQuickItem*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QQuickItem*</db:type>
<db:varname>item</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">item</db:synopsisinfo>
<db:synopsisinfo role="setter">setItem</db:synopsisinfo>
<db:synopsisinfo role="notifier">itemChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>, which is rendered by <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link> to the texture.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:type> *<db:emphasis role="bold">item</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setItem</db:emphasis>(<db:type><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:type> *<db:emphasis>item</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">itemChanged</db:emphasis>(<db:type><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:type> *<db:emphasis>item</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="mouseEnabled-prop">
<db:title>mouseEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>mouseEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isMouseEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setMouseEnabled</db:synopsisinfo>
<db:synopsisinfo role="notifier">mouseEnabledChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds whether mouse events are enabled for the rendered item. The mouse events are generated from object picking events of the entities added to the <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link>. Mouse is enabled by default.</db:para>
<db:note>
<db:para>Events are delayed by one frame due to object picking happening in the backend.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isMouseEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMouseEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">mouseEnabledChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="output-prop">
<db:title>output : Qt3DRender::QRenderTargetOutput*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DRender::QRenderTargetOutput*</db:type>
<db:varname>output</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">output</db:synopsisinfo>
<db:synopsisinfo role="setter">setOutput</db:synopsisinfo>
<db:synopsisinfo role="notifier">outputChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the <db:link xlink:href="qt3drender-qrendertargetoutput.xml">QRenderTargetOutput</db:link>, which specifies where the <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link> is rendering to.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qrendertargetoutput.xml">Qt3DRender::QRenderTargetOutput</db:link></db:type> *<db:emphasis role="bold">output</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOutput</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qrendertargetoutput.xml">Qt3DRender::QRenderTargetOutput</db:link></db:type> *<db:emphasis>output</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">outputChanged</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qrendertargetoutput.xml">Qt3DRender::QRenderTargetOutput</db:link></db:type> *<db:emphasis>output</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="renderPolicy-prop">
<db:title>renderPolicy : RenderPolicy</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>RenderPolicy</db:type>
<db:varname>renderPolicy</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">renderPolicy</db:synopsisinfo>
<db:synopsisinfo role="setter">setRenderPolicy</db:synopsisinfo>
<db:synopsisinfo role="notifier">renderPolicyChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the render policy of this <db:link xlink:href="qml-qtquick-scene2d-scene2d.xml">Scene2D</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-quick-qscene2d.xml#RenderPolicy-enum">QScene2D::RenderPolicy</db:link></db:type> <db:emphasis role="bold">renderPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRenderPolicy</db:emphasis>(<db:type><db:link xlink:href="qt3drender-quick-qscene2d.xml#RenderPolicy-enum">QScene2D::RenderPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">renderPolicyChanged</db:emphasis>(<db:type><db:link xlink:href="qt3drender-quick-qscene2d.xml#RenderPolicy-enum">QScene2D::RenderPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScene2D">
<db:title>[explicit] QScene2D::QScene2D(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QScene2D</db:methodname>
<db:methodparam>
<db:type>Qt3DCore::QNode *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QScene2D(Qt3DCore::QNode *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>The constructor creates a new <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link> instance with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="addEntity">
<db:title>void QScene2D::addEntity(Qt3DCore::QEntity *<db:emphasis>entity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addEntity</db:methodname>
<db:methodparam>
<db:type>Qt3DCore::QEntity *</db:type>
<db:parameter>entity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addEntity(Qt3DCore::QEntity *entity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds an <db:code role="parameter">entity</db:code> to the the <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link> object. If the entities have <db:link xlink:href="qt3drender-qobjectpicker.xml">QObjectPicker</db:link>, the pick events from that entity are sent to <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link> and converted to mouse events.</db:para>
</db:section>
<db:section xml:id="entities">
<db:title>QList&lt;Qt3DCore::QEntity *&gt; QScene2D::entities() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Qt3DCore::QEntity *&gt;</db:type>
<db:methodname>entities</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Qt3DCore::QEntity *&gt; entities() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieve entities associated with the <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link>.</db:para>
</db:section>
<db:section xml:id="removeEntity">
<db:title>void QScene2D::removeEntity(Qt3DCore::QEntity *<db:emphasis>entity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeEntity</db:methodname>
<db:methodparam>
<db:type>Qt3DCore::QEntity *</db:type>
<db:parameter>entity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeEntity(Qt3DCore::QEntity *entity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes an <db:code role="parameter">entity</db:code> from the the <db:link xlink:href="qt3drender-quick-qscene2d.xml">QScene2D</db:link> object.</db:para>
</db:section>
</db:section>
</db:article>
