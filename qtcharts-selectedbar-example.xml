<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changing the Color and State of Bars</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use a selection feature for the bar chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:para>The example shows how to change the color and state of bars using setBarSelected().</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_selectedbar.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We create the sets and fill them with the data. Then we create a series and append data to it.</db:para>
<db:programlisting language="cpp">QBarSet *setChicken = createChickenSet();
QBarSet *setPork = createPorkSet();
QBarSet *setTurkey = createTurkeySet();
QBarSet *setHam = createHamSet();
qreal totalSum = setChicken-&gt;sum() + setPork-&gt;sum() + setTurkey-&gt;sum() + setHam-&gt;sum();
QList&lt;QBarSet *&gt; setList = QList&lt;QBarSet *&gt;{setChicken, setPork, setTurkey, setHam};

auto series = new QBarSeries;
series-&gt;append(setList);
</db:programlisting>
<db:para>We create the chart and add series to it. Also, we add a title to the chart, set animation for the chart, and align the legend.</db:para>
<db:programlisting language="cpp">auto chart = new QChart;
chart-&gt;addSeries(series);
chart-&gt;setTitle(tr(&quot;Meat Consumption (Click on bars to select them)&quot;));
chart-&gt;setAnimationOptions(QChart::SeriesAnimations);
chart-&gt;legend()-&gt;setVisible(true);
chart-&gt;legend()-&gt;setAlignment(Qt::AlignBottom);
chart-&gt;layout()-&gt;setContentsMargins(0, 0, 0, 0);
</db:programlisting>
<db:para>Here we set the color for the selected bars.</db:para>
<db:programlisting language="cpp">const auto barSets = series-&gt;barSets();
for (QBarSet *barSet : barSets)
    barSet-&gt;setSelectedColor(barSet-&gt;brush().color().darker());
</db:programlisting>
<db:para>Next step is adding axes: <db:link xlink:href="qbarcategoryaxis-qtcharts.xml">QBarCategoryAxis</db:link> for years of measurements and <db:link xlink:href="qvalueaxis-qtcharts.xml">QValueAxis</db:link> for values range.</db:para>
<db:programlisting language="cpp">QStringList categories = createYearCategories();
auto axisX = new QBarCategoryAxis;
axisX-&gt;setCategories(categories);
chart-&gt;addAxis(axisX, Qt::AlignBottom);
series-&gt;attachAxis(axisX);

auto axisY = new QValueAxis;
axisY-&gt;setRange(0, 20);
axisY-&gt;setTitleText(tr(&quot;Tons&quot;));
axisY-&gt;setLabelsAngle(-90);
axisY-&gt;setTitleVisible(true);
chart-&gt;addAxis(axisY, Qt::AlignLeft);
series-&gt;attachAxis(axisY);
</db:programlisting>
<db:para>Then we add the chart view to put the chart in.</db:para>
<db:programlisting language="cpp">auto chartView = new QChartView(chart, this);
chartView-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>Here we create a widget for labels of values of selected and unselected bars.</db:para>
<db:programlisting language="cpp">auto labelWidget = new QWidget(this);
auto labelLayout = new QHBoxLayout(labelWidget);
labelLayout-&gt;setAlignment(Qt::AlignCenter);

auto totalSumLabel = new QLabel(tr(&quot;Total sum: %1 T&quot;).arg(totalSum), this);
labelLayout-&gt;addWidget(totalSumLabel);
totalSumLabel-&gt;setContentsMargins(0, 0, 54, 0);

auto selectedSumLabel = new QLabel(tr(&quot;Selected sum: 0 T&quot;), this);
labelLayout-&gt;addWidget(selectedSumLabel);

auto unselectedSumLabel = new QLabel(tr(&quot;Unselected sum: %1 T&quot;).arg(totalSum), this);
labelLayout-&gt;addWidget(unselectedSumLabel);
unselectedSumLabel-&gt;setContentsMargins(54, 0, 0, 0);
</db:programlisting>
<db:para>We connect selecting of a specific bar with labels of values using a lambda. <db:code>set-&gt;toggleSelection({index})</db:code> sets the bar selected.</db:para>
<db:programlisting language="cpp">QObject::connect(series, &amp;QAbstractBarSeries::clicked, series, [=](int index, QBarSet *set) {
    set-&gt;toggleSelection({index});
    qreal selectedSum = 0.;
    for (int i = 0; i &lt; setList.size(); ++i) {
        auto selectedIndices = setList.at(i)-&gt;selectedBars();
        for (int k = 0; k &lt; selectedIndices.size(); ++k)
            selectedSum += setList.at(i)-&gt;at(selectedIndices.at(k));
    }
    selectedSumLabel-&gt;setText(tr(&quot;Selected sum: %1 T&quot;).arg(selectedSum));
    // Because of rounding errors, selectedSum can result in being bigger than total sum
    qreal unselectedSum = totalSum - selectedSum &lt; 0 ? 0. : totalSum - selectedSum;
    unselectedSumLabel-&gt;setText(
        tr(&quot;Unselected sum: %1 T&quot;)
            .arg(unselectedSum)
        );
});
</db:programlisting>
<db:para>Finally, we create the main layout.</db:para>
<db:programlisting language="cpp">auto mainLayout = new QVBoxLayout(this);

mainLayout-&gt;addWidget(chartView);
mainLayout-&gt;addWidget(labelWidget);
</db:programlisting>
</db:article>
