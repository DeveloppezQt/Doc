<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Component QML Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates a QML component definition.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml 2.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qt3d-render-sceneloader.xml" xlink:role="">SceneLoader</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Component is part of <db:simplelist><db:member>qml-utility-elements</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Components are reusable, encapsulated QML types with well-defined interfaces.</db:para>
<db:para>Components are often defined by <db:link xlink:href="qtqml-documents-topic.xml">component files</db:link> - that is, .qml files. The <db:emphasis>Component</db:emphasis> type essentially allows QML components to be defined inline, within a <db:link xlink:href="qtqml-documents-topic.xml">QML document</db:link>, rather than as a separate QML file. This may be useful for reusing a small component within a QML file, or for defining a component that logically belongs with other QML components within a file.</db:para>
<db:para>For example, here is a component that is used by multiple <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> objects. It contains a single item, a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    width: 100; height: 100

    Component {
        id: redSquare

        Rectangle {
            color: &quot;red&quot;
            width: 10
            height: 10
        }
    }

    Loader { sourceComponent: redSquare }
    Loader { sourceComponent: redSquare; x: 20 }
}
</db:programlisting>
<db:para>Notice that while a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> by itself would be automatically rendered and displayed, this is not the case for the above rectangle because it is defined inside a Component. The component encapsulates the QML types within, as if they were defined in a separate QML file, and is not loaded until requested (in this case, by the two <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> objects). Because Component is not derived from Item, you cannot anchor anything to it.</db:para>
<db:para>Defining a Component is similar to defining a <db:link xlink:href="qtqml-documents-topic.xml">QML document</db:link>. A QML document has a single top-level item that defines the behavior and properties of that component, and cannot define properties or behavior outside of that top-level item. In the same way, a Component definition contains a single top level item (which in the above example is a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>) and cannot define any data outside of this item, with the exception of an <db:emphasis>id</db:emphasis> (which in the above example is <db:emphasis>redSquare</db:emphasis>).</db:para>
<db:para>The Component type is commonly used to provide graphical components for views. For example, the <db:link xlink:href="qml-qtquick-listview.xml#delegate-prop">ListView::delegate</db:link> property requires a Component to specify how each list item is to be displayed.</db:para>
<db:para>Component objects can also be created dynamically using <db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">Qt.createComponent</db:link>().</db:para>
<db:section xml:id="creation-context">
<db:title>Creation Context</db:title>
<db:para>The creation context of a Component corresponds to the context where the Component was declared. This context is used as the parent context (creating a <db:link xlink:href="qtqml-documents-scope.xml#component-instance-hierarchy">context hierarchy</db:link>) when the component is instantiated by an object such as a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> or a Loader.</db:para>
<db:para>In the following example, comp1 is created within the root context of MyItem.qml, and any objects instantiated from this component will have access to the ids and properties within that context, such as internalSettings.color. When comp1 is used as a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> delegate in another context (as in main.qml below), it will continue to have access to the properties of its creation context (which would otherwise be private to external users).</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>MyItem.qml</db:para>
</db:td>
<db:td>
<db:programlisting language="qml">Item {
    property Component mycomponent: comp1

    QtObject {
        id: internalSettings
        property color color: &quot;green&quot;
    }

    Component {
        id: comp1
        Rectangle { color: internalSettings.color; width: 400; height: 50 }
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>main.qml</db:para>
</db:td>
<db:td>
<db:programlisting language="qml">ListView {
    width: 400; height: 400
    model: 5
    delegate: myItem.mycomponent    //will create green Rectangles

    MyItem { id: myItem }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is important that the lifetime of the creation context outlive any created objects. See <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml#maintaining-dynamically-created-objects">Maintaining Dynamically Created Objects</db:link> for more details.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="progress-prop">
<db:title>[read-only] progress : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>progress</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The progress of loading the component, from 0.0 (nothing loaded) to 1.0 (finished).</db:para>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>status</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the status of component loading. The status can be one of the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Component.Null - no data is available for the component</db:para>
</db:listitem>
<db:listitem>
<db:para>Component.Ready - the component has been loaded, and can be used to create instances.</db:para>
</db:listitem>
<db:listitem>
<db:para>Component.Loading - the component is currently being loaded</db:para>
</db:listitem>
<db:listitem>
<db:para>Component.Error - an error occurred while loading the component. Calling <db:link xlink:href="qml-qtqml-component.xml#errorString-method">errorString</db:link>() will provide a human-readable description of any errors.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="url-prop">
<db:title>[read-only] url : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>url</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The component URL. This is the URL that was used to construct the component.</db:para>
</db:section>
</db:section>
<db:section xml:id="attached-signal-documentation">
<db:title>Attached Signal Documentation</db:title>
<db:section xml:id="completed-signal">
<db:title>completed()</db:title>
<db:para>Emitted after the object has been instantiated. This can be used to execute script code at startup, once the full QML environment has been established.</db:para>
<db:para>The corresponding handler is onCompleted. It can be declared on any object. The order of running the onCompleted handlers is undefined.</db:para>
<db:programlisting language="qml">Rectangle {
    Component.onCompleted: console.log(&quot;Completed Running!&quot;)
    Rectangle {
        Component.onCompleted: console.log(&quot;Nested Completed Running!&quot;)
    }
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onCompleted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="destruction-signal">
<db:title>destruction()</db:title>
<db:para>Emitted as the object begins destruction. This can be used to undo work done in response to the <db:link xlink:href="qml-qtqml-component.xml#completed-signal">completed</db:link>() signal, or other imperative code in your application.</db:para>
<db:para>The corresponding handler is onDestruction. It can be declared on any object. The order of running the onDestruction handlers is undefined.</db:para>
<db:programlisting language="qml">Rectangle {
    Component.onDestruction: console.log(&quot;Destruction Beginning!&quot;)
    Rectangle {
        Component.onDestruction: console.log(&quot;Nested Destruction Beginning!&quot;)
    }
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onDestruction</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-index.xml">Qt QML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="createObject-method">
<db:title>object createObject(QtObject <db:emphasis>parent</db:emphasis>, object <db:emphasis>properties</db:emphasis>)</db:title>
<db:para>Creates and returns an object instance of this component that will have the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">properties</db:code>. The <db:code role="parameter">properties</db:code> argument is optional. Returns null if object creation fails.</db:para>
<db:para>The object will be created in the same context as the one in which the component was created. This function will always return null when called on components which were not created in QML.</db:para>
<db:para>If you wish to create an object without setting a parent, specify null for the <db:code role="parameter">parent</db:code> value. Note that if the returned object is to be displayed, you must provide a valid <db:code role="parameter">parent</db:code> value or set the returned object's <db:link xlink:href="qml-qtquick-item.xml#parent-prop">parent</db:link> property, otherwise the object will not be visible.</db:para>
<db:para>If a <db:code role="parameter">parent</db:code> is not provided to createObject(), a reference to the returned object must be held so that it is not destroyed by the garbage collector. This is true regardless of whether <db:link xlink:href="qml-qtquick-item.xml#parent-prop">Item::parent</db:link> is set afterwards, because setting the Item parent does not change object ownership. Only the graphical parent is changed.</db:para>
<db:para>As of QtQuick 1.1, this method accepts an optional <db:code role="parameter">properties</db:code> argument that specifies a map of initial property values for the created object. These values are applied before the object creation is finalized. This is more efficient than setting property values after object creation, particularly where large sets of property values are defined, and also allows property bindings to be set up (using <db:link xlink:href="qml-qtqml-qt.xml#binding-method">Qt.binding</db:link>) before the object is created.</db:para>
<db:para>The <db:code role="parameter">properties</db:code> argument is specified as a map of property-value items. For example, the code below creates an object with initial x and y values of 100 and 100, respectively:</db:para>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>js</db:code></db:emphasis>var component = Qt.createComponent(&quot;Button.qml&quot;); if (component.status == Component.Ready) component.createObject(parent, {x: 100, y: 100}); <db:emphasis role="bold">&lt;Unknown command&gt;<db:code>endjs</db:code></db:emphasis></db:para>
<db:para>Dynamically created instances can be deleted with the destroy() method. See <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">Dynamic QML Object Creation from JavaScript</db:link> for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-component.xml#incubateObject-method">incubateObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString-method">
<db:title>string errorString()</db:title>
<db:para>Returns a human-readable description of any error.</db:para>
<db:para>The string includes the file, location, and description of each error. If multiple errors are present, they are separated by a newline character.</db:para>
<db:para>If no errors are present, an empty string is returned.</db:para>
</db:section>
<db:section xml:id="incubateObject-method">
<db:title>object incubateObject(Item <db:emphasis>parent</db:emphasis>, object <db:emphasis>properties</db:emphasis>, enumeration <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Creates an incubator for an instance of this component. Incubators allow new component instances to be instantiated asynchronously and do not cause freezes in the UI.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument specifies the parent the created instance will have. Omitting the parameter or passing null will create an object with no parent. In this case, a reference to the created object must be held so that it is not destroyed by the garbage collector.</db:para>
<db:para>The <db:code role="parameter">properties</db:code> argument is specified as a map of property-value items which will be set on the created object during its construction. <db:code role="parameter">mode</db:code> may be Qt.Synchronous or Qt.Asynchronous, and controls whether the instance is created synchronously or asynchronously. The default is asynchronous. In some circumstances, even if Qt.Synchronous is specified, the incubator may create the object asynchronously. This happens if the component calling incubateObject() is itself being created asynchronously.</db:para>
<db:para>All three arguments are optional.</db:para>
<db:para>If successful, the method returns an incubator, otherwise null. The incubator has the following properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>status The status of the incubator. Valid values are Component.Ready, Component.Loading and Component.Error.</db:para>
</db:listitem>
<db:listitem>
<db:para>object The created object instance. Will only be available once the incubator is in the Ready status.</db:para>
</db:listitem>
<db:listitem>
<db:para>onStatusChanged Specifies a callback function to be invoked when the status changes. The status is passed as a parameter to the callback.</db:para>
</db:listitem>
<db:listitem>
<db:para>forceCompletion() Call to complete incubation synchronously.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following example demonstrates how to use an incubator:</db:para>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>js</db:code></db:emphasis>var component = Qt.createComponent(&quot;Button.qml&quot;);</db:para>
<db:para>var incubator = component.incubateObject(parent, { x: 10, y: 10 }); if (incubator.status != Component.Ready) { incubator.onStatusChanged = function(status) { if (status == Component.Ready) { print (&quot;Object&quot;, incubator.object, &quot;is now ready!&quot;); } } } else { print (&quot;Object&quot;, incubator.object, &quot;is ready immediately!&quot;); } <db:emphasis role="bold">&lt;Unknown command&gt;<db:code>endjs</db:code></db:emphasis></db:para>
<db:para>Dynamically created instances can be deleted with the destroy() method. See <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">Dynamic QML Object Creation from JavaScript</db:link> for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-component.xml#createObject-method">createObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
