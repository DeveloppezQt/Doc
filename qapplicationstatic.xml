<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QApplicationStatic&gt;</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QApplicationStatic</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_APPLICATION_STATIC">
<db:title>[since 6.3] Q_APPLICATION_STATIC(<db:emphasis>Type</db:emphasis>, <db:emphasis>VariableName</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>This macro extends <db:link xlink:href="qglobalstatic.xml#Q_GLOBAL_STATIC">Q_GLOBAL_STATIC</db:link> and creates a global and static object of type <db:link xlink:href="qglobalstatic.xml">QGlobalStatic</db:link>, of name <db:code role="parameter">VariableName</db:code>, initialized by the variadic arguments, and that behaves as a pointer to <db:code role="parameter">Type</db:code>, where the actual lifetime of the type is bound to the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>. The object created by Q_APPLICATION_STATIC initializes itself on the first use, which means that it will not increase the application or the library's load time. Additionally, the object is initialized in a thread-safe manner on all platforms.</db:para>
<db:para>In contrast to <db:link xlink:href="qglobalstatic.xml#Q_GLOBAL_STATIC">Q_GLOBAL_STATIC</db:link> where the type is only meant to be destroyed at program exit, here the actual lifetime of the type is bound to the lifetime of the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>. This makes it ideal to store semi-static QObjects, which should also be destroyed once the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is destroyed. This means the type will get deleted once the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> emits the destroyed signal. It is permitted for the object to be recreated when it's accessed again, if a new <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> has also been created.</db:para>
<db:para>Since the value is bound to the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>, it should only ever be accessed if there is a valid <db:link xlink:href="qcoreapplication.xml#instance">QCoreApplication::instance</db:link>(). Accessing this object before <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is created or after it's destroyed will produce warnings and may have unpredictable behavior.</db:para>
<db:para>The typical use of this macro is as follows, in a global context (that is, outside of any function bodies):</db:para>
<db:programlisting language="cpp">Q_APPLICATION_STATIC(MyQObjectType, staticType, &quot;some string&quot;, function())
</db:programlisting>
<db:para>Do note that the arguments passed in variadic fashion to this macro are evaluated every time the object is constructed, so in the above example, the function function will be called more than once if the object is recreated.</db:para>
<db:para>Aside from the value also being bound to the lifetime of the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>, this macro behaves identically to <db:link xlink:href="qglobalstatic.xml#Q_GLOBAL_STATIC">Q_GLOBAL_STATIC</db:link>(). Please see that macro's documentation for more information.</db:para>
<db:section xml:id="threading-guarantees">
<db:title>Threading guarantees</db:title>
<db:para>The Q_APPLICATION_STATIC macro ensures that the object is initialized only once (per lifetime of a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>), even if multiple threads try to concurrently access the object. This is done by providing a per-object mutex; application and library developers need to be aware that their object will be constructed with this mutex locked and therefore must not reenter the same object's initialization, or a deadlock will occur.</db:para>
<db:para>There is no thread-safety on the destruction of the object: user code must not access this object once the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> destructor starts to run. User code must arrange to ensure this does not happen, such as by not accessing it once the main thread's event loop has exited.</db:para>
<db:para>Like <db:link xlink:href="qglobalstatic.xml#Q_GLOBAL_STATIC">Q_GLOBAL_STATIC</db:link>, Q_APPLICATION_STATIC provides no thread-safety guarantees for accesses to the object once creation is finished. It is up to user code to ensure that no racy data accesses happen.</db:para>
<db:para>In case the object created by this operation is a <db:link xlink:href="qobject.xml">QObject</db:link>, its associated thread will be the one that succeeded in creating it. It will be destroyed by the main thread, so a <db:link xlink:href="qobject.xml#moveToThread">moveToThread</db:link>() to the main thread or to no thread before destruction is adviseable. Doing so from the constructor of the class in question is a sensible solution if one can't guarantee that the main thread will be the one to initialize the object.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This macro was introduced in Qt 6.3.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglobalstatic.xml#Q_GLOBAL_STATIC">Q_GLOBAL_STATIC</db:link></db:member>
<db:member><db:link xlink:href="qglobalstatic.xml">QGlobalStatic</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
