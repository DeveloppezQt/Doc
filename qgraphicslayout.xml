<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGraphicsLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> class provides the base class for all layouts in Graphics View.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicslayoutitem.xml" xlink:role="class">QGraphicsLayoutItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsanchorlayout.xml" xlink:role="class">QGraphicsAnchorLayout</db:link>, <db:link xlink:href="qgraphicsgridlayout.xml" xlink:role="class">QGraphicsGridLayout</db:link>, and <db:link xlink:href="qgraphicslinearlayout.xml" xlink:role="class">QGraphicsLinearLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsLayout is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> is an abstract class that defines a virtual API for arranging <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> children and other <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> objects for a <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>. <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> assigns responsibility to a <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> through <db:link xlink:href="qgraphicswidget.xml#setLayout">QGraphicsWidget::setLayout</db:link>(). As the widget is resized, the layout will automatically arrange the widget's children. <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> inherits <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>, so, it can be managed by any layout, including its own subclasses.</db:para>
<db:section xml:id="writing-a-custom-layout">
<db:title>Writing a Custom Layout</db:title>
<db:para>You can use <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> as a base to write your own custom layout (e.g., a flowlayout), but it is more common to use one of its subclasses instead - <db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link> or <db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link>. When creating a custom layout, the following functions must be reimplemented as a bare minimum:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Function</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgraphicslayoutitem.xml#setGeometry">QGraphicsLayoutItem::setGeometry</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Notifies you when the geometry of the layout is set. You can store the geometry in your own layout class in a reimplementation of this function.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgraphicslayoutitem.xml#sizeHint">QGraphicsLayoutItem::sizeHint</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns the layout's size hints.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgraphicslayout.xml#count">QGraphicsLayout::count</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns the number of items in your layout.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgraphicslayout.xml#itemAt">QGraphicsLayout::itemAt</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns a pointer to an item in your layout.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgraphicslayout.xml#removeAt">QGraphicsLayout::removeAt</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Removes an item from your layout without destroying it.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For more details on how to implement each function, refer to the individual function documentation.</db:para>
<db:para>Each layout defines its own API for arranging widgets and layout items. For example, with a grid layout, you require a row and a column index with optional row and column spans, alignment, spacing, and more. A linear layout, however, requires a single row or column index to position its items. For a grid layout, the order of insertion does not affect the layout in any way, but for a linear layout, the order is essential. When writing your own layout subclass, you are free to choose the API that best suits your layout.</db:para>
<db:para><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> provides the <db:link xlink:href="qgraphicslayout.xml#addChildLayoutItem">addChildLayoutItem</db:link>() convenience function to add layout items to a custom layout. The function will automatically reparent graphics items, if required.</db:para>
</db:section>
<db:section xml:id="activating-the-layout">
<db:title>Activating the Layout</db:title>
<db:para>When the layout's geometry changes, <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> immediately rearranges all of its managed items by calling <db:link xlink:href="qgraphicslayoutitem.xml#setGeometry">setGeometry</db:link>() on each item. This rearrangement is called <db:emphasis>activating</db:emphasis> the layout.</db:para>
<db:para><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> updates its own geometry to match the <db:link xlink:href="qgraphicslayoutitem.xml#contentsRect">contentsRect</db:link>() of the <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link> it is managing. Thus, it will automatically rearrange all its items when the widget is resized. <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> caches the sizes of all its managed items to avoid calling <db:link xlink:href="qgraphicslayoutitem.xml#setGeometry">setGeometry</db:link>() too often.</db:para>
<db:note>
<db:para>A <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> will have the same geometry as the <db:link xlink:href="qgraphicslayoutitem.xml#contentsRect">contentsRect</db:link>() of the widget (not the layout) it is assigned to.</db:para>
</db:note>
<db:section xml:id="activating-the-layout-implicitly">
<db:title>Activating the Layout Implicitly</db:title>
<db:para>The layout can be activated implicitly using one of two ways: by calling <db:link xlink:href="qgraphicslayout.xml#activate">activate</db:link>() or by calling <db:link xlink:href="qgraphicslayout.xml#invalidate">invalidate</db:link>(). Calling <db:link xlink:href="qgraphicslayout.xml#activate">activate</db:link>() activates the layout immediately. In contrast, calling <db:link xlink:href="qgraphicslayout.xml#invalidate">invalidate</db:link>() is delayed, as it posts a <db:link xlink:href="qevent.xml#Type-enum">LayoutRequest</db:link> event to the managed widget. Due to event compression, the <db:link xlink:href="qgraphicslayout.xml#activate">activate</db:link>() will only be called once after control has returned to the event loop. This is referred to as <db:emphasis>invalidating</db:emphasis> the layout. Invalidating the layout also invalidates any cached information. Also, the <db:link xlink:href="qgraphicslayout.xml#invalidate">invalidate</db:link>() function is a virtual function. So, you can invalidate your own cache in a subclass of <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> by reimplementing this function.</db:para>
</db:section>
</db:section>
<db:section xml:id="event-handling">
<db:title>Event Handling</db:title>
<db:para><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> listens to events for the widget it manages through the virtual <db:link xlink:href="qgraphicslayout.xml#widgetEvent">widgetEvent</db:link>() event handler. When the layout is assigned to a widget, all events delivered to the widget are first processed by <db:link xlink:href="qgraphicslayout.xml#widgetEvent">widgetEvent</db:link>(). This allows the layout to be aware of any relevant state changes on the widget such as visibility changes or layout direction changes.</db:para>
</db:section>
<db:section xml:id="margin-handling">
<db:title>Margin Handling</db:title>
<db:para>The margins of a <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> can be modified by reimplementing <db:link xlink:href="qgraphicslayout.xml#setContentsMargins">setContentsMargins</db:link>() and <db:link xlink:href="qgraphicslayout.xml#getContentsMargins">getContentsMargins</db:link>().</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsLayout">
<db:title>QGraphicsLayout::QGraphicsLayout(QGraphicsLayoutItem *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Contructs a <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> object.</db:para>
<db:para><db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>'s constructor and the <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>'s isLayout argument is set to <db:emphasis>true</db:emphasis>.</db:para>
<db:para>If <db:code role="parameter">parent</db:code> is a <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> the layout will be installed on that widget. (Note that installing a layout will delete the old one installed.)</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsLayout">
<db:title>[virtual noexcept] QGraphicsLayout::~QGraphicsLayout()</db:title>
<db:para>Destroys the <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> object.</db:para>
</db:section>
<db:section xml:id="activate">
<db:title>void QGraphicsLayout::activate()</db:title>
<db:para>Activates the layout, causing all items in the layout to be immediately rearranged. This function is based on calling <db:link xlink:href="qgraphicslayout.xml#count">count</db:link>() and <db:link xlink:href="qgraphicslayout.xml#itemAt">itemAt</db:link>(), and then calling <db:link xlink:href="qgraphicslayoutitem.xml#setGeometry">setGeometry</db:link>() on all items sequentially. When activated, the layout will adjust its geometry to its parent's <db:link xlink:href="qgraphicslayoutitem.xml#contentsRect">contentsRect</db:link>(). The parent will then invalidate any layout of its own.</db:para>
<db:para>If called in sequence or recursively, e.g., by one of the arranged items in response to being resized, this function will do nothing.</db:para>
<db:para>Note that the layout is free to use geometry caching to optimize this process. To forcefully invalidate any such cache, you can call <db:link xlink:href="qgraphicslayout.xml#invalidate">invalidate</db:link>() before calling activate().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayout.xml#invalidate">invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addChildLayoutItem">
<db:title>[protected, since 4.6] void QGraphicsLayout::addChildLayoutItem(QGraphicsLayoutItem *<db:emphasis>layoutItem</db:emphasis>)</db:title>
<db:para>This function is a convenience function provided for custom layouts, and will go through all items in the layout and reparent their graphics items to the closest <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> ancestor of the layout.</db:para>
<db:para>If <db:code role="parameter">layoutItem</db:code> is already in a different layout, it will be removed from that layout.</db:para>
<db:para>If custom layouts want special behaviour they can ignore to use this function, and implement their own behaviour.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#graphicsItem">graphicsItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>[pure virtual] int QGraphicsLayout::count() const</db:title>
<db:para>This pure virtual function must be reimplemented in a subclass of <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> to return the number of items in the layout.</db:para>
<db:para>The subclass is free to decide how to store the items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayout.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayout.xml#removeAt">removeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getContentsMargins">
<db:title>[override virtual] void QGraphicsLayout::getContentsMargins(qreal *<db:emphasis>left</db:emphasis>, qreal *<db:emphasis>top</db:emphasis>, qreal *<db:emphasis>right</db:emphasis>, qreal *<db:emphasis>bottom</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#getContentsMargins" role="function">QGraphicsLayoutItem::getContentsMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const</db:link>.</db:para>
</db:section>
<db:section xml:id="invalidate">
<db:title>[virtual] void QGraphicsLayout::invalidate()</db:title>
<db:para>Clears any cached geometry and size hint information in the layout, and posts a <db:link xlink:href="qevent.xml#Type-enum">LayoutRequest</db:link> event to the managed parent <db:link xlink:href="qgraphicslayoutitem.xml">QGraphicsLayoutItem</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayout.xml#activate">activate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setGeometry">setGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isActivated">
<db:title>bool QGraphicsLayout::isActivated() const</db:title>
<db:para>Returns <db:code>true</db:code> if the layout is currently being activated; otherwise, returns <db:code>false</db:code>. If the layout is being activated, this means that it is currently in the process of rearranging its items (i.e., the <db:link xlink:href="qgraphicslayout.xml#activate">activate</db:link>() function has been called, and has not yet returned).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayout.xml#activate">activate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayout.xml#invalidate">invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt">
<db:title>[pure virtual] QGraphicsLayoutItem *QGraphicsLayout::itemAt(int <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>This pure virtual function must be reimplemented in a subclass of <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> to return a pointer to the item at index <db:code role="parameter">i</db:code>. The reimplementation can assume that <db:code role="parameter">i</db:code> is valid (i.e., it respects the value of <db:link xlink:href="qgraphicslayout.xml#count">count</db:link>()). Together with <db:link xlink:href="qgraphicslayout.xml#count">count</db:link>(), it is provided as a means of iterating over all items in a layout.</db:para>
<db:para>The subclass is free to decide how to store the items, and the visual arrangement does not have to be reflected through this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayout.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayout.xml#removeAt">removeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAt">
<db:title>[pure virtual] void QGraphicsLayout::removeAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This pure virtual function must be reimplemented in a subclass of <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> to remove the item at <db:code role="parameter">index</db:code>. The reimplementation can assume that <db:code role="parameter">index</db:code> is valid (i.e., it respects the value of <db:link xlink:href="qgraphicslayout.xml#count">count</db:link>()).</db:para>
<db:para>The implementation must ensure that the <db:link xlink:href="qgraphicslayoutitem.xml#parentLayoutItem">parentLayoutItem</db:link>() of the removed item does not point to this layout, since the item is considered to be removed from the layout hierarchy.</db:para>
<db:para>If the layout is to be reused between applications, we recommend that the layout deletes the item, but the graphics view framework does not depend on this.</db:para>
<db:para>The subclass is free to decide how to store the items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayout.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayout.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContentsMargins">
<db:title>void QGraphicsLayout::setContentsMargins(qreal <db:emphasis>left</db:emphasis>, qreal <db:emphasis>top</db:emphasis>, qreal <db:emphasis>right</db:emphasis>, qreal <db:emphasis>bottom</db:emphasis>)</db:title>
<db:para>Sets the contents margins to <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code> and <db:code role="parameter">bottom</db:code>. The default contents margins for toplevel layouts are style dependent (by querying the pixelMetric for <db:link xlink:href="qstyle.xml#PixelMetric-enum">QStyle::PM_LayoutLeftMargin</db:link>, <db:link xlink:href="qstyle.xml#PixelMetric-enum">QStyle::PM_LayoutTopMargin</db:link>, <db:link xlink:href="qstyle.xml#PixelMetric-enum">QStyle::PM_LayoutRightMargin</db:link> and <db:link xlink:href="qstyle.xml#PixelMetric-enum">QStyle::PM_LayoutBottomMargin</db:link>).</db:para>
<db:para>For sublayouts the default margins are 0.</db:para>
<db:para>Changing the contents margins automatically invalidates the layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayout.xml#invalidate">invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateGeometry">
<db:title>[override virtual] void QGraphicsLayout::updateGeometry()</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#updateGeometry" role="function">QGraphicsLayoutItem::updateGeometry()</db:link>.</db:para>
</db:section>
<db:section xml:id="widgetEvent">
<db:title>[virtual] void QGraphicsLayout::widgetEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>This virtual event handler receives all events for the managed widget. <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> uses this event handler to listen for layout related events such as geometry changes, layout changes or layout direction changes.</db:para>
<db:para><db:code role="parameter">e</db:code> is a pointer to the event.</db:para>
<db:para>You can reimplement this event handler to track similar events for your own custom layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#event">QGraphicsWidget::event</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">QGraphicsItem::sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
