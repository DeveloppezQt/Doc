<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGraphicsEffect Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link> class is the base class for all graphics effects.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsEffect</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsblureffect.xml" xlink:role="class">QGraphicsBlurEffect</db:link>, <db:link xlink:href="qgraphicscolorizeeffect.xml" xlink:role="class">QGraphicsColorizeEffect</db:link>, <db:link xlink:href="qgraphicsdropshadoweffect.xml" xlink:role="class">QGraphicsDropShadowEffect</db:link>, and <db:link xlink:href="qgraphicsopacityeffect.xml" xlink:role="class">QGraphicsOpacityEffect</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsEffect is part of <db:simplelist><db:member>multimedia</db:member><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Effects alter the appearance of elements by hooking into the rendering pipeline and operating between the source (e.g., a <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link>) and the destination device (e.g., <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s viewport). Effects can be disabled by calling setEnabled(false). If effects are disabled, the source is rendered directly.</db:para>
<db:para>To add a visual effect to a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, for example, you can use one of the standard effects, or alternately, create your own effect by creating a subclass of <db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link>. The effect can then be installed on the item using <db:link xlink:href="qgraphicsitem.xml#setGraphicsEffect">QGraphicsItem::setGraphicsEffect</db:link>().</db:para>
<db:para>Qt provides the following standard effects:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsblureffect.xml">QGraphicsBlurEffect</db:link> - blurs the item by a given radius</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsdropshadoweffect.xml">QGraphicsDropShadowEffect</db:link> - renders a dropshadow behind the item</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicscolorizeeffect.xml">QGraphicsColorizeEffect</db:link> - renders the item in shades of any given color</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsopacityeffect.xml">QGraphicsOpacityEffect</db:link> - renders the item with an opacity</db:para>
</db:listitem>
</db:itemizedlist>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td colspan="2">
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicseffect-plain.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicseffect-blur.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicseffect-colorize.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicseffect-opacity.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicseffect-drop-shadow.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicseffect-widget.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>For more information on how to use each effect, refer to the specific effect's documentation.</db:para>
<db:para>To create your own custom effect, create a subclass of <db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link> (or any other existing effects) and reimplement the virtual function <db:link xlink:href="qgraphicseffect.xml#draw">draw</db:link>(). This function is called whenever the effect needs to redraw. The <db:link xlink:href="qgraphicseffect.xml#draw">draw</db:link>() function takes the painter with which to draw as an argument. For more information, refer to the documenation for <db:link xlink:href="qgraphicseffect.xml#draw">draw</db:link>(). In the <db:link xlink:href="qgraphicseffect.xml#draw">draw</db:link>() function you can call <db:link xlink:href="qgraphicseffect.xml#sourcePixmap">sourcePixmap</db:link>() to get a pixmap of the graphics effect source which you can then process.</db:para>
<db:para>If your effect changes, use <db:link xlink:href="qgraphicseffect.xml#update">update</db:link>() to request for a redraw. If your custom effect changes the bounding rectangle of the source, e.g., a radial glow effect may need to apply an extra margin, you can reimplement the virtual <db:link xlink:href="qgraphicseffect.xml#boundingRectFor">boundingRectFor</db:link>() function, and call <db:link xlink:href="qgraphicseffect.xml#updateBoundingRect">updateBoundingRect</db:link>() to notify the framework whenever this rectangle changes. The virtual <db:link xlink:href="qgraphicseffect.xml#sourceChanged">sourceChanged</db:link>() function is called to notify the effects that the source has changed in some way - e.g., if the source is a <db:link xlink:href="qgraphicsrectitem.xml">QGraphicsRectItem</db:link> and its rectangle parameters have changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setGraphicsEffect">QGraphicsItem::setGraphicsEffect</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#setGraphicsEffect">QWidget::setGraphicsEffect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ChangeFlag-enum">
<db:title>enum QGraphicsEffect::ChangeFlag</db:title>
<db:bridgehead renderas="sect2">flags QGraphicsEffect::ChangeFlags</db:bridgehead>
<db:para>This enum describes what has changed in QGraphicsEffectSource.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link></db:emphasis>::SourceAttached</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>The effect is installed on a source.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link></db:emphasis>::SourceDetached</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>The effect is uninstalled on a source.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link></db:emphasis>::SourceBoundingRectChanged</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>The bounding rect of the source has changed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link></db:emphasis>::SourceInvalidated</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>The visual appearance of the source has changed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ChangeFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ChangeFlag&gt;. </db:code>It stores an OR combination of <db:code>ChangeFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="PixmapPadMode-enum">
<db:title>enum QGraphicsEffect::PixmapPadMode</db:title>
<db:para>This enum describes how the pixmap returned from <db:link xlink:href="qgraphicseffect.xml#sourcePixmap">sourcePixmap</db:link> should be padded.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link></db:emphasis>::NoPad</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The pixmap should not receive any additional padding.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link></db:emphasis>::PadToTransparentBorder</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The pixmap should be padded to ensure it has a completely transparent border.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link></db:emphasis>::PadToEffectiveBoundingRect</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The pixmap should be padded to match the effective bounding rectangle of the effect.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsEffect">
<db:title>QGraphicsEffect::QGraphicsEffect(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a new <db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link> instance having the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsEffect">
<db:title>[virtual noexcept] QGraphicsEffect::~QGraphicsEffect()</db:title>
<db:para>Removes the effect from the source, and destroys the graphics effect.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRectF QGraphicsEffect::boundingRect() const</db:title>
<db:para>Returns the effective bounding rectangle for this effect, i.e., the bounding rectangle of the source in device coordinates, adjusted by any margins applied by the effect itself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicseffect.xml#boundingRectFor">boundingRectFor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicseffect.xml#updateBoundingRect">updateBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRectFor">
<db:title>[virtual] QRectF QGraphicsEffect::boundingRectFor(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:para>Returns the effective bounding rectangle for this effect, given the provided <db:code role="parameter">rect</db:code> in the device coordinates. When writing you own custom effect, you must call <db:link xlink:href="qgraphicseffect.xml#updateBoundingRect">updateBoundingRect</db:link>() whenever any parameters are changed that may cause this this function to return a different value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicseffect.xml#sourceBoundingRect">sourceBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="draw">
<db:title>[pure virtual protected] void QGraphicsEffect::draw(QPainter *<db:emphasis>painter</db:emphasis>)</db:title>
<db:para>This pure virtual function draws the effect and is called whenever the source needs to be drawn.</db:para>
<db:para>Reimplement this function in a <db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link> subclass to provide the effect's drawing implementation, using <db:code role="parameter">painter</db:code>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">MyGraphicsEffect::draw(QPainter *painter)
{
    ...
    QPoint offset;
    if (sourceIsPixmap()) {
        // No point in drawing in device coordinates (pixmap will be scaled anyways).
        const QPixmap pixmap = sourcePixmap(Qt::LogicalCoordinates, &amp;offset);
        ...
        painter-&gt;drawPixmap(offset, pixmap);
    } else {
        // Draw pixmap in device coordinates to avoid pixmap scaling;
        const QPixmap pixmap = sourcePixmap(Qt::DeviceCoordinates, &amp;offset);
        painter-&gt;setWorldTransform(QTransform());
        ...
        painter-&gt;drawPixmap(offset, pixmap);
    }
    ...
}
</db:programlisting>
<db:para>This function should not be called explicitly by the user, since it is meant for reimplementation purposes only.</db:para>
</db:section>
<db:section xml:id="drawSource">
<db:title>[protected] void QGraphicsEffect::drawSource(QPainter *<db:emphasis>painter</db:emphasis>)</db:title>
<db:para>Draws the source directly using the given <db:code role="parameter">painter</db:code>.</db:para>
<db:para>This function should only be called from <db:link xlink:href="qgraphicseffect.xml#draw">QGraphicsEffect::draw</db:link>().</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">MyGraphicsOpacityEffect::draw(QPainter *painter)
{
    // Fully opaque; draw directly without going through a pixmap.
    if (qFuzzyCompare(m_opacity, 1)) {
        drawSource(painter);
        return;
    }
    ...
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicseffect.xml#draw">QGraphicsEffect::draw</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enabledChanged">
<db:title>void QGraphicsEffect::enabledChanged(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the effect is enabled or disabled. The <db:code role="parameter">enabled</db:code> parameter holds the effects's new enabled state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">isEnabled()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceBoundingRect">
<db:title>[protected] QRectF QGraphicsEffect::sourceBoundingRect(Qt::CoordinateSystem <db:emphasis>system</db:emphasis> = Qt::LogicalCoordinates) const</db:title>
<db:para>Returns the bounding rectangle of the source mapped to the given <db:code role="parameter">system</db:code>.</db:para>
<db:para>Calling this function with <db:link xlink:href="qt.xml#CoordinateSystem-enum">Qt::DeviceCoordinates</db:link> outside of <db:link xlink:href="qgraphicseffect.xml#draw">QGraphicsEffect::draw</db:link>() will give undefined results, as there is no device context available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicseffect.xml#draw">draw</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceChanged">
<db:title>[virtual protected] void QGraphicsEffect::sourceChanged(QGraphicsEffect::ChangeFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>This virtual function is called by <db:link xlink:href="qgraphicseffect.xml">QGraphicsEffect</db:link> to notify the effect that the source has changed. If the effect applies any cache, then this cache must be purged in order to reflect the new appearance of the source.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> describes what has changed.</db:para>
</db:section>
<db:section xml:id="sourceIsPixmap">
<db:title>[protected] bool QGraphicsEffect::sourceIsPixmap() const</db:title>
<db:para>Returns true if the source effectively is a pixmap, e.g., a <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link>.</db:para>
<db:para>This function is useful for optimization purposes. For instance, there's no point in drawing the source in device coordinates to avoid pixmap scaling if this function returns true - the source pixmap will be scaled anyways.</db:para>
</db:section>
<db:section xml:id="sourcePixmap">
<db:title>[protected] QPixmap QGraphicsEffect::sourcePixmap(Qt::CoordinateSystem <db:emphasis>system</db:emphasis> = Qt::LogicalCoordinates, QPoint *<db:emphasis>offset</db:emphasis> = 0, QGraphicsEffect::PixmapPadMode <db:emphasis>mode</db:emphasis> = PadToEffectiveBoundingRect) const</db:title>
<db:para>Returns a pixmap with the source painted into it.</db:para>
<db:para>The <db:code role="parameter">system</db:code> specifies which coordinate system to be used for the source. The optional <db:code role="parameter">offset</db:code> parameter returns the offset where the pixmap should be painted at using the current painter. For control on how the pixmap is padded use the <db:code role="parameter">mode</db:code> parameter.</db:para>
<db:para>The returned pixmap is clipped to the current painter's device rectangle when <db:code role="parameter">system</db:code> is <db:link xlink:href="qt.xml#CoordinateSystem-enum">Qt::DeviceCoordinates</db:link>.</db:para>
<db:para>Calling this function with <db:link xlink:href="qt.xml#CoordinateSystem-enum">Qt::DeviceCoordinates</db:link> outside of <db:link xlink:href="qgraphicseffect.xml#draw">QGraphicsEffect::draw</db:link>() will give undefined results, as there is no device context available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicseffect.xml#draw">draw</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicseffect.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update">
<db:title>void QGraphicsEffect::update()</db:title>
<db:para>Schedules a redraw of the effect. Call this function whenever the effect needs to be redrawn. This function does not trigger a redraw of the source.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicseffect.xml#updateBoundingRect">updateBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateBoundingRect">
<db:title>[protected] void QGraphicsEffect::updateBoundingRect()</db:title>
<db:para>This function notifies the effect framework when the effect's bounding rectangle has changed. As a custom effect author, you must call this function whenever you change any parameters that will cause the virtual <db:link xlink:href="qgraphicseffect.xml#boundingRectFor">boundingRectFor</db:link>() function to return a different value.</db:para>
<db:para>This function will call <db:link xlink:href="qgraphicseffect.xml#update">update</db:link>() if this is necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicseffect.xml#boundingRectFor">boundingRectFor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicseffect.xml#boundingRect">boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicseffect.xml#sourceBoundingRect">sourceBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
