<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAxObject Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxobject.xml">QAxObject</db:link> class provides a QObject that wraps a COM object.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS AxContainer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::AxContainer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += axcontainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaxbaseobject.xml" xlink:role="class">QAxBaseObject</db:link> and <db:link xlink:href="qaxbase.xml" xlink:role="class">QAxBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaxscriptengine.xml" xlink:role="class">QAxScriptEngine</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qaxobject.xml">QAxObject</db:link> can be instantiated as an empty object, with the name of the COM object it should wrap, or with a pointer to the IUnknown that represents an existing COM object. If the COM object implements the <db:code>IDispatch</db:code> interface, the properties, methods and events of that object become available as Qt properties, slots and signals. The base class, <db:link xlink:href="qaxbase.xml">QAxBase</db:link>, provides an API to access the COM object directly through the IUnknown pointer.</db:para>
<db:para><db:link xlink:href="qaxobject.xml">QAxObject</db:link> is a QObject and can be used as such, e.g. it can be organized in an object hierarchy, receive events and connect to signals and slots.</db:para>
<db:para><db:link xlink:href="qaxobject.xml">QAxObject</db:link> also inherits most of its ActiveX-related functionality from <db:link xlink:href="qaxbase.xml">QAxBase</db:link>, notably <db:link xlink:href="qaxbase.xml#dynamicCall">dynamicCall</db:link>() and <db:link xlink:href="qaxbase.xml#querySubObject">querySubObject</db:link>().</db:para>
<db:warning>
<db:para>You can subclass <db:link xlink:href="qaxobject.xml">QAxObject</db:link>, but you cannot use the Q_OBJECT macro in the subclass (the generated moc-file will not compile), so you cannot add further signals, slots or properties. This limitation is due to the metaobject information generated in runtime. To work around this problem, aggregate the <db:link xlink:href="qaxobject.xml">QAxObject</db:link> as a member of the QObject subclass.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml">QAxBase</db:link></db:member>
<db:member><db:link xlink:href="qaxwidget.xml">QAxWidget</db:link></db:member>
<db:member><db:link xlink:href="qaxscript.xml">QAxScript</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAxObject">
<db:title>[explicit] QAxObject::QAxObject(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Creates an empty COM object and propagates <db:code role="parameter">parent</db:code> to the QObject constructor. To initialize the object, call <db:link xlink:href="qaxobjectinterface.xml#setControl">setControl</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbaseobject.xml#control-prop">setControl()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QAxObject-1">
<db:title>[explicit] QAxObject::QAxObject(IUnknown *<db:emphasis>iface</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Creates a <db:link xlink:href="qaxobject.xml">QAxObject</db:link> that wraps the COM object referenced by <db:code role="parameter">iface</db:code>. <db:code role="parameter">parent</db:code> is propagated to the QObject constructor.</db:para>
</db:section>
<db:section xml:id="QAxObject-2">
<db:title>[explicit] QAxObject::QAxObject(const QString &amp;<db:emphasis>c</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Creates a <db:link xlink:href="qaxobject.xml">QAxObject</db:link> that wraps the COM object <db:code role="parameter">c</db:code>. <db:code role="parameter">parent</db:code> is propagated to the QObject constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbaseobject.xml#control-prop">setControl()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QAxObject">
<db:title>[override virtual noexcept] QAxObject::~QAxObject()</db:title>
<db:para>Releases the COM object and destroys the <db:link xlink:href="qaxobject.xml">QAxObject</db:link>, cleaning up all allocated resources.</db:para>
</db:section>
<db:section xml:id="connectNotify">
<db:title>[override virtual protected] void QAxObject::connectNotify(const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>)</db:title>
</db:section>
<db:section xml:id="doVerb">
<db:title>bool QAxObject::doVerb(const QString &amp;<db:emphasis>verb</db:emphasis>)</db:title>
<db:para>Requests the COM object to perform the action <db:code role="parameter">verb</db:code>. The possible verbs are returned by <db:link xlink:href="qaxbase.xml#verbs">verbs</db:link>().</db:para>
<db:para>The function returns true if the object could perform the action, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
