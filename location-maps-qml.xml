<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Maps and Navigation (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> user interfaces for displaying, navigating and interacting with maps, as well as geocoding and navigation.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">Maps and Navigation</db:emphasis> provides <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> user interface types for displaying geographic information on a map, as well as allowing user interaction with map overlay objects and the display itself. It also contains utilities for geocoding (finding a geographic coordinate from a street address) and navigation (including driving and walking directions).</db:para>
<db:para>It builds upon the API concepts and types in the <db:link xlink:href="location-positioning-qml.xml">QML Positioning API</db:link>. A more hands-on introduction of the Maps and Navigation types can be found in the <db:link xlink:href="qml-location5-maps.xml">Maps and Navigation tutorial</db:link>.</db:para>
<db:section xml:id="maps">
<db:title>Maps</db:title>
<db:section xml:id="displaying-maps">
<db:title>Displaying Maps</db:title>
<db:para>Displaying a map is done using the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> QML types. The Map type supports user interaction through the <db:link xlink:href="qml-qtlocation-mapgesturearea.xml">MapGestureArea</db:link> QML type. The Map object draws the map on-screen using OpenGL (ES), allowing for hardware-accelerated rendering where available.</db:para>
<db:para><db:emphasis role="bold">Key Types</db:emphasis></db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link></db:para>
</db:td>
<db:td>
<db:para>A location-based services plugin provides data including map data which is then displayed in a Map object.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-map.xml">Map</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtquick-module.xml">QtQuick</db:link> item to display a map on-screen.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-mapgesturearea.xml">MapGestureArea</db:link></db:para>
</db:td>
<db:td>
<db:para>Interaction helper for panning, flicking and pinch-to-zoom gesture on a Map.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that the client must create a <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> object prior to using a <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> type in order to have access to map data to display.</db:para>
</db:section>
<db:section xml:id="putting-objects-on-a-map-map-overlay-objects">
<db:title>Putting Objects on a Map (Map Overlay Objects)</db:title>
<db:para>Maps can also contain map overlay objects, which are used to display information on its surface. There is a set of basic pre-defined map overlay objects, as well as the ability to implement custom map overlay objects using the <db:link xlink:href="qml-qtlocation-mapquickitem.xml">MapQuickItem</db:link> type, which can contain any standard <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> item.</db:para>
<db:para><db:emphasis role="bold">Key Types</db:emphasis></db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link></db:para>
</db:td>
<db:td>
<db:para>A geographic circle (all points at a set distance from a center), optionally with a border.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-maprectangle.xml">MapRectangle</db:link></db:para>
</db:td>
<db:td>
<db:para>A rectangle whose top left and bottom right points are specified as <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> types, optionally with a border.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-mappolygon.xml">MapPolygon</db:link></db:para>
</db:td>
<db:td>
<db:para>A polygon made of an arbitrary list of <db:link xlink:href="qml-coordinate.xml">coordinates</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-mappolyline.xml">MapPolyline</db:link></db:para>
</db:td>
<db:td>
<db:para>A polyline made of an arbitrary list of <db:link xlink:href="qml-coordinate.xml">coordinates</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-mapquickitem.xml">MapQuickItem</db:link></db:para>
</db:td>
<db:td>
<db:para>Turns any arbitrary <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> Item into a map overlay object. <db:link xlink:href="qml-qtlocation-mapquickitem.xml">MapQuickItem</db:link> is an enabler for specifying custom map overlay objects.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="model-view-design-with-map-overlay-objects">
<db:title>Model-View Design with Map Overlay Objects</db:title>
<db:para>To automatically generate map overlay objects based on the contents of a <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> model (for example a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> item), the <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link> type is available. It accepts any map overlay object as its delegate, and can only be created within a <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link>.</db:para>
<db:para><db:emphasis role="bold">Key Types</db:emphasis></db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link></db:para>
</db:td>
<db:td>
<db:para>Populates a Map with map overlay objects based on the data provided by a model.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="interaction-with-map-overlay-objects">
<db:title>Interaction with Map Overlay Objects</db:title>
<db:para>Properties of map overlay objects that influence their appearance on the display can be changed at any time, and many can also be used in animations. Animating coordinate-based map overlay objects, such as <db:link xlink:href="qml-qtlocation-mappolygon.xml">MapPolygon</db:link> and <db:link xlink:href="qml-qtlocation-mappolyline.xml">MapPolyline</db:link>, is not yet available.</db:para>
</db:section>
</db:section>
<db:section xml:id="geocoding-address-to-coordinate-and-vice-versa-f6f306c5">
<db:title>Geocoding â€“ Address to Coordinate and Vice Versa</db:title>
<db:para>Geocoding is the translation of geographic coordinates into addresses, or vice versa. Such a translation usually involves sending the source data to a server which then performs the translation and returns the results, although some location-based service provider <db:link xlink:href="qml-qtlocation-plugin.xml">plugins</db:link> may be able to provide some geocoding functionality without sending data to a remote server. The availability and accuracy of the translation usually depends on the location or address being translated, as different areas of the Earth are mapped to varying degrees of accuracy.</db:para>
<db:para>A geocoding query in QML is performed using the <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link> type. For an address-to-coordinate query, its <db:code>query</db:code> property may be set to either an <db:link xlink:href="qml-qtpositioning-address.xml">Address</db:link> object or a string containing the textual form of the address to search for. To perform the reverse, the same property can be set to a <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> instead. Results are made available in the contents of the model.</db:para>
<db:para><db:emphasis role="bold">Key Types</db:emphasis></db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link></db:para>
</db:td>
<db:td>
<db:para>A location-based services plugin provides data including geocoding translation results which are exposed to clients via a <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Queries the Plugin for geocoding translations and provides access to results via indexes in the model.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtpositioning-address.xml">Address</db:link></db:para>
</db:td>
<db:td>
<db:para>Structured address for use in queries and results of geocoding.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that the client must create a <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> object prior to using a <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link> object. This will enable access to geocoding translation services and thus data to display.</db:para>
</db:section>
<db:section xml:id="routing-and-navigation">
<db:title>Routing and Navigation</db:title>
<db:para>Routing is the determination of a navigable path from one point to another on a map. Given a map that is aware of features that aid or hinder navigation, such as bridges, waterways and so on, a series of segments that make up the journey can be constructed. If these <db:link xlink:href="qml-qtlocation-routesegment.xml">RouteSegment</db:link>s are simple then we can add navigation information at the connecting points, <db:link xlink:href="qml-qtlocation-routemaneuver.xml">RouteManeuver</db:link>s, between the segments.</db:para>
<db:para><db:emphasis role="bold">Key Types</db:emphasis></db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-route.xml">Route</db:link></db:para>
</db:td>
<db:td>
<db:para>The entire path to be navigated.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routesegment.xml">RouteSegment</db:link></db:para>
</db:td>
<db:td>
<db:para>The individual components of a route.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routemaneuver.xml">RouteManeuver</db:link></db:para>
</db:td>
<db:td>
<db:para>The navigation information that joins segments.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link></db:para>
</db:td>
<db:td>
<db:para>The means of making requests on the backend to supply route information.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
