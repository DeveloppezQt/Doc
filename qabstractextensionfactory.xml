<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractExtensionFactory Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractextensionfactory.xml">QAbstractExtensionFactory</db:link> class provides an interface for extension factories in Qt Designer.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractExtensionFactory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Designer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Designer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qextensionfactory.xml" xlink:role="class">QExtensionFactory</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qabstractextensionfactory.xml">QAbstractExtensionFactory</db:link> is not intended to be instantiated directly; use the <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> instead.</db:para>
<db:para>In <db:emphasis>Qt Designer</db:emphasis>, extension factories are used to look up and create named extensions as they are required. For that reason, when implementing a custom extension, you must also create a <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link>, i.e a class that is able to make an instance of your extension, and register it using <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager.xml">extension manager</db:link>.</db:para>
<db:para>When an extension is required, <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager.xml">extension manager</db:link> will run through all its registered factories calling <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() for each until the first one that is able to create the requested extension for the selected object, is found. This factory will then make an instance of the extension.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link></db:member>
<db:member><db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAbstractExtensionFactory">
<db:title>[virtual] QAbstractExtensionFactory::~QAbstractExtensionFactory()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractExtensionFactory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractExtensionFactory()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the extension factory.</db:para>
</db:section>
<db:section xml:id="extension">
<db:title>[pure virtual] QObject *QAbstractExtensionFactory::extension(QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>iid</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>extension</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>iid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * extension(QObject *object, const QString &amp;iid) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the extension specified by <db:code role="parameter">iid</db:code> for the given <db:code role="parameter">object</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
