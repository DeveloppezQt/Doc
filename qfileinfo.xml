<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFileInfo Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> class provides system-independent file information.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFileInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFileInfo is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about a file's name and position (path) in the file system, its access rights and whether it is a directory or symbolic link, etc. The file's size and last modified/read times are also available. <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> can also be used to obtain information about a Qt <db:link xlink:href="resources.xml">resource</db:link>.</db:para>
<db:para>A <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> can point to a file with either a relative or an absolute file path. Absolute file paths begin with the directory separator &quot;/&quot; (or with a drive specification on Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current working directory. An example of an absolute path is the string &quot;/tmp/quartz&quot;. A relative path might look like &quot;src/fatlib&quot;. You can use the function <db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>() to check whether a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> is using a relative or an absolute file path. You can call the function <db:link xlink:href="qfileinfo.xml#makeAbsolute">makeAbsolute</db:link>() to convert a relative <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s path to an absolute path.</db:para>
<db:para>The file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> works on is set in the constructor or later with <db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>(). Use <db:link xlink:href="qfileinfo.xml#exists">exists</db:link>() to see if the file exists and <db:link xlink:href="qfileinfo.xml#size">size</db:link>() to get its size.</db:para>
<db:para>The file's type is obtained with <db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>(), <db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>() and <db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>(). The <db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>() function provides the name of the file the symlink points to.</db:para>
<db:para>On Unix (including macOS and iOS), the symlink has the same <db:link xlink:href="qfileinfo.xml#size">size</db:link>() has the file it points to, because Unix handles symlinks transparently; similarly, opening a symlink using <db:link xlink:href="qfile.xml">QFile</db:link> effectively opens the link's target. For example:</db:para>
<db:programlisting language="cpp">#ifdef Q_OS_UNIX

QFileInfo info1(&quot;/home/bob/bin/untabify&quot;);
info1.isSymLink();          // returns true
info1.absoluteFilePath();   // returns &quot;/home/bob/bin/untabify&quot;
info1.size();               // returns 56201
info1.symLinkTarget();      // returns &quot;/opt/pretty++/bin/untabify&quot;

QFileInfo info2(info1.symLinkTarget());
info2.isSymLink();          // returns false
info2.absoluteFilePath();   // returns &quot;/opt/pretty++/bin/untabify&quot;
info2.size();               // returns 56201

#endif
</db:programlisting>
<db:para>On Windows, symlinks (shortcuts) are .lnk files. The reported <db:link xlink:href="qfileinfo.xml#size">size</db:link>() is that of the symlink (not the link's target), and opening a symlink using <db:link xlink:href="qfile.xml">QFile</db:link> opens the .lnk file. For example:</db:para>
<db:programlisting language="cpp">#ifdef Q_OS_WIN

QFileInfo info1(&quot;C:\\Documents and Settings\\Bob\\untabify.lnk&quot;);
info1.isSymLink();          // returns true
info1.absoluteFilePath();   // returns &quot;C:/Documents and Settings/Bob/untabify.lnk&quot;
info1.size();               // returns 743
info1.symLinkTarget();      // returns &quot;C:/Pretty++/untabify&quot;

QFileInfo info2(info1.symLinkTarget());
info2.isSymLink();          // returns false
info2.absoluteFilePath();   // returns &quot;C:/Pretty++/untabify&quot;
info2.size();               // returns 63942

#endif
</db:programlisting>
<db:para>Elements of the file's name can be extracted with <db:link xlink:href="qfileinfo.xml#path">path</db:link>() and <db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>(). The <db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()'s parts can be extracted with <db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>(), <db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>() or <db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>(). <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects to directories created by Qt classes will not have a trailing file separator. If you wish to use trailing separators in your own file info objects, just append one to the file name given to the constructors or <db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>().</db:para>
<db:para>The file's dates are returned by <db:link xlink:href="qfileinfo.xml#created">created</db:link>(), <db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>() and <db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>(). Information about the file's access permissions is obtained with <db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>(), <db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>() and <db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>(). The file's ownership is available from <db:link xlink:href="qfileinfo.xml#owner">owner</db:link>(), <db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>(), <db:link xlink:href="qfileinfo.xml#group">group</db:link>() and <db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>(). You can examine a file's permissions and ownership in a single statement using the <db:link xlink:href="qfileinfo.xml#permission">permission</db:link>() function.</db:para>
<db:anchor xml:id="ntfs-permissions"/>
<db:note>
<db:para>On NTFS file systems, ownership and permissions checking is disabled by default for performance reasons. To enable it, include the following line:</db:para>
</db:note>
<db:programlisting language="cpp">extern Q_CORE_EXPORT int qt_ntfs_permission_lookup;
</db:programlisting>
<db:para>Permission checking is then turned on and off by incrementing and decrementing qt_ntfs_permission_lookup by 1.</db:para>
<db:programlisting language="cpp">qt_ntfs_permission_lookup++; // turn checking on
qt_ntfs_permission_lookup--; // turn it off again
</db:programlisting>
<db:section xml:id="performance-issues">
<db:title>Performance Issues</db:title>
<db:para>Some of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s functions query the file system, but for performance reasons, some functions only operate on the file name itself. For example: To return the absolute path of a relative file name, <db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>() has to query the file system. The <db:link xlink:href="qfileinfo.xml#path">path</db:link>() function, however, can work on the file name directly, and so it is faster.</db:para>
<db:note>
<db:para>To speed up performance, <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> caches information about the file.</db:para>
</db:note>
<db:para>To speed up performance, <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> caches information about the file. Because files can be changed by other users or programs, or even by other parts of the same program, there is a function that refreshes the file information: <db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>(). If you want to switch off a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s caching and force it to access the file system every time you request information from it call <db:link xlink:href="qfileinfo.xml#setCaching">setCaching</db:link>(false).</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFileInfo">
<db:title>QFileInfo::QFileInfo()</db:title>
<db:para>Constructs an empty <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object.</db:para>
<db:para>Note that an empty <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object contain no file reference.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-1">
<db:title>QFileInfo::QFileInfo(const QFile &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about file <db:code role="parameter">file</db:code>.</db:para>
<db:para>If the <db:code role="parameter">file</db:code> has a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-3">
<db:title>QFileInfo::QFileInfo(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about the given file. The <db:code role="parameter">file</db:code> can also include an absolute or relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">QDir::setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelativePath">QDir::isRelativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-4">
<db:title>QFileInfo::QFileInfo(const QDir &amp;<db:emphasis>dir</db:emphasis>, const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about the given <db:code role="parameter">file</db:code> in the directory <db:code role="parameter">dir</db:code>.</db:para>
<db:para>If <db:code role="parameter">dir</db:code> has a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:para>If <db:code role="parameter">file</db:code> is an absolute path, then the directory specified by <db:code role="parameter">dir</db:code> will be disregarded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-2">
<db:title>QFileInfo::QFileInfo(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that is a copy of the given <db:code role="parameter">fileinfo</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFileInfo">
<db:title>[noexcept] QFileInfo::~QFileInfo()</db:title>
<db:para>Destroys the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> and frees its resources.</db:para>
</db:section>
<db:section xml:id="absoluteDir">
<db:title>QDir QFileInfo::absoluteDir() const</db:title>
<db:para>Returns the file's absolute path as a <db:link xlink:href="qdir.xml">QDir</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#dir">dir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="absoluteFilePath">
<db:title>QString QFileInfo::absoluteFilePath() const</db:title>
<db:para>Returns an absolute path including the file name.</db:para>
<db:para>The absolute path name consists of the full path and the file name. On Unix this will always begin with the root, '/', directory. On Windows this will always begin 'D:/' where D is a drive letter, except for network shares that are not mapped to a drive letter, in which case the path will begin '//sharename/'. <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will uppercase drive letters. Note that <db:link xlink:href="qdir.xml">QDir</db:link> does not do this. The code snippet below shows this.</db:para>
<db:programlisting language="cpp">    QFileInfo fi(&quot;c:/temp/foo&quot;); =&gt; fi.absoluteFilePath() =&gt; &quot;C:/temp/foo&quot;
</db:programlisting>
<db:para>This function returns the same as <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>(), unless <db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>() is true. In contrast to <db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>(), symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements are not necessarily removed.</db:para>
<db:warning>
<db:para>If <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>() is empty the behavior of this function is undefined.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="absolutePath">
<db:title>QString QFileInfo::absolutePath() const</db:title>
<db:para>Returns a file's path absolute path. This doesn't include the file name.</db:para>
<db:para>On Unix the absolute path will always begin with the root, '/', directory. On Windows this will always begin 'D:/' where D is a drive letter, except for network shares that are not mapped to a drive letter, in which case the path will begin '//sharename/'.</db:para>
<db:para>In contrast to <db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>() symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements are not necessarily removed.</db:para>
<db:warning>
<db:para>If <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>() is empty the behavior of this function is undefined.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#path">path</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="baseName">
<db:title>QString QFileInfo::baseName() const</db:title>
<db:para>Returns the base name of the file without the path.</db:para>
<db:para>The base name consists of all characters in the file up to (but not including) the <db:emphasis>first</db:emphasis> '.' character.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString base = fi.baseName();  // base = &quot;archive&quot;
</db:programlisting>
<db:para>The base name of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeBaseName">completeBaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bundleName">
<db:title>[since 4.3] QString QFileInfo::bundleName() const</db:title>
<db:para>Returns the name of the bundle.</db:para>
<db:para>On macOS and iOS this returns the proper localized name for a bundle if the path <db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>(). On all other platforms an empty <db:link xlink:href="qstring.xml">QString</db:link> is returned.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/Applications/Safari.app&quot;);
QString bundle = fi.bundleName();                // name = &quot;Safari&quot;
</db:programlisting>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="caching">
<db:title>bool QFileInfo::caching() const</db:title>
<db:para>Returns true if caching is enabled; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setCaching">setCaching</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canonicalFilePath">
<db:title>QString QFileInfo::canonicalFilePath() const</db:title>
<db:para>Returns the canonical path including the file name, i.e. an absolute path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</db:para>
<db:para>If the file does not exist, canonicalFilePath() returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#dir">dir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canonicalPath">
<db:title>QString QFileInfo::canonicalPath() const</db:title>
<db:para>Returns the file's path canonical path (excluding the file name), i.e. an absolute path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</db:para>
<db:para>If the file does not exist, canonicalPath() returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#path">path</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completeBaseName">
<db:title>QString QFileInfo::completeBaseName() const</db:title>
<db:para>Returns the complete base name of the file without the path.</db:para>
<db:para>The complete base name consists of all characters in the file up to (but not including) the <db:emphasis>last</db:emphasis> '.' character.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString base = fi.completeBaseName();  // base = &quot;archive.tar&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completeSuffix">
<db:title>QString QFileInfo::completeSuffix() const</db:title>
<db:para>Returns the complete suffix (extension) of the file.</db:para>
<db:para>The complete suffix consists of all characters in the file after (but not including) the first '.'.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString ext = fi.completeSuffix();  // ext = &quot;tar.gz&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeBaseName">completeBaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="created">
<db:title>QDateTime QFileInfo::created() const</db:title>
<db:para>Returns the date and time when the file was created.</db:para>
<db:para>On most Unix systems, this function returns the time of the last status change. A status change occurs when the file is created, but it also occurs whenever the user writes or sets inode information (for example, changing the file permissions).</db:para>
<db:para>If neither creation time nor &quot;last status change&quot; time are not available, returns the same as <db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dir">
<db:title>QDir QFileInfo::dir() const</db:title>
<db:para>Returns the path of the object's parent directory as a <db:link xlink:href="qdir.xml">QDir</db:link> object.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The <db:link xlink:href="qdir.xml">QDir</db:link> returned always corresponds to the object's parent directory, even if the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> represents a directory.</db:para>
<db:para>For each of the following, dir() returns a <db:link xlink:href="qdir.xml">QDir</db:link> for &quot;~/examples/191697&quot;.</db:para>
<db:programlisting language="cpp">    QFileInfo fileInfo1(&quot;~/examples/191697/.&quot;);
    QFileInfo fileInfo2(&quot;~/examples/191697/..&quot;);
    QFileInfo fileInfo3(&quot;~/examples/191697/main.cpp&quot;);
</db:programlisting>
<db:para>For each of the following, dir() returns a <db:link xlink:href="qdir.xml">QDir</db:link> for &quot;.&quot;.</db:para>
<db:programlisting language="cpp">    QFileInfo fileInfo4(&quot;.&quot;);
    QFileInfo fileInfo5(&quot;..&quot;);
    QFileInfo fileInfo6(&quot;main.cpp&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absoluteDir">absoluteDir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exists">
<db:title>bool QFileInfo::exists() const</db:title>
<db:para>Returns true if the file exists; otherwise returns false.</db:para>
<db:note>
<db:para>If the file is a symlink that points to a non-existing file, false is returned.</db:para>
</db:note>
</db:section>
<db:section xml:id="exists-1">
<db:title>[static, since 5.2] bool QFileInfo::exists(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>Returns true if the <db:code role="parameter">file</db:code> exists; otherwise returns false.</db:para>
<db:note>
<db:para>If <db:code role="parameter">file</db:code> is a symlink that points to a non-existing file, false is returned.</db:para>
</db:note>
<db:note>
<db:para>Using this function is faster than using QFileInfo(file).exists() for file system access.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QFileInfo::fileName() const</db:title>
<db:para>Returns the name of the file, excluding the path.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString name = fi.fileName();                // name = &quot;archive.tar.gz&quot;
</db:programlisting>
<db:para>Note that, if this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object is given a path ending in a slash, the name of the file is considered empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filePath">
<db:title>QString QFileInfo::filePath() const</db:title>
<db:para>Returns the file name, including the path (which may be absolute or relative).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="group">
<db:title>QString QFileInfo::group() const</db:title>
<db:para>Returns the group of the file. On Windows, on systems where files do not have groups, or if an error occurs, an empty string is returned.</db:para>
<db:para>This function can be time consuming under Unix (in the order of milliseconds).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#owner">owner</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="groupId">
<db:title>uint QFileInfo::groupId() const</db:title>
<db:para>Returns the id of the group the file belongs to.</db:para>
<db:para>On Windows and on systems where files do not have groups this function always returns (uint) -2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#owner">owner</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAbsolute">
<db:title>bool QFileInfo::isAbsolute() const</db:title>
<db:para>Returns true if the file path name is absolute, otherwise returns false if the path is relative.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBundle">
<db:title>[since 4.3] bool QFileInfo::isBundle() const</db:title>
<db:para>Returns true if this object points to a bundle or to a symbolic link to a bundle on macOS and iOS; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDir">
<db:title>bool QFileInfo::isDir() const</db:title>
<db:para>Returns true if this object points to a directory or to a symbolic link to a directory; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isExecutable">
<db:title>bool QFileInfo::isExecutable() const</db:title>
<db:para>Returns true if the file is executable; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#permission">permission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFile">
<db:title>bool QFileInfo::isFile() const</db:title>
<db:para>Returns true if this object points to a file or to a symbolic link to a file. Returns false if the object points to something which isn't a file, such as a directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isHidden">
<db:title>bool QFileInfo::isHidden() const</db:title>
<db:para>Returns true if this is a `hidden' file; otherwise returns false.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This function returns true for the special entries &quot;.&quot; and &quot;..&quot; on Unix, even though <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link> threats them as shown.</db:para>
</db:section>
<db:section xml:id="isNativePath">
<db:title>[since 5.0] bool QFileInfo::isNativePath() const</db:title>
<db:para>Returns true if the file path can be used directly with native APIs. Returns false if the file is otherwise supported by a virtual file system inside Qt, such as <db:link xlink:href="resources.xml">the Qt Resource System</db:link>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Native paths may still require conversion of path separators and character encoding, depending on platform and input requirements of the native API.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#toNativeSeparators">QDir::toNativeSeparators</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#encodeName">QFile::encodeName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadable">
<db:title>bool QFileInfo::isReadable() const</db:title>
<db:para>Returns true if the user can read the file; otherwise returns false.</db:para>
<db:note>
<db:para>If the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled, the result on Windows will merely reflect whether the file exists.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#permission">permission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRelative">
<db:title>bool QFileInfo::isRelative() const</db:title>
<db:para>Returns true if the file path name is relative, otherwise returns false if the path is absolute (e.g. under Unix a path is absolute if it begins with a &quot;/&quot;).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isAbsolute">isAbsolute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRoot">
<db:title>bool QFileInfo::isRoot() const</db:title>
<db:para>Returns true if the object points to a directory or to a symbolic link to a directory, and that directory is the root directory; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isSymLink">
<db:title>bool QFileInfo::isSymLink() const</db:title>
<db:para>Returns true if this object points to a symbolic link (or to a shortcut on Windows); otherwise returns false.</db:para>
<db:para>On Unix (including macOS and iOS), opening a symlink effectively opens the <db:link xlink:href="qfileinfo.xml#symLinkTarget">link's target</db:link>. On Windows, it opens the .lnk file itself.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo info(fileName);
if (info.isSymLink())
    fileName = info.symLinkTarget();
</db:programlisting>
<db:note>
<db:para>If the symlink points to a non existing file, <db:link xlink:href="qfileinfo.xml#exists">exists</db:link>() returns false.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isWritable">
<db:title>bool QFileInfo::isWritable() const</db:title>
<db:para>Returns true if the user can write to the file; otherwise returns false.</db:para>
<db:note>
<db:para>If the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled, the result on Windows will merely reflect whether the file is marked as Read Only.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#permission">permission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastModified">
<db:title>QDateTime QFileInfo::lastModified() const</db:title>
<db:para>Returns the date and time when the file was last modified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#created">created</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastRead">
<db:title>QDateTime QFileInfo::lastRead() const</db:title>
<db:para>Returns the date and time when the file was last read (accessed).</db:para>
<db:para>On platforms where this information is not available, returns the same as <db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#created">created</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="makeAbsolute">
<db:title>bool QFileInfo::makeAbsolute()</db:title>
<db:para>Converts the file's path to an absolute path if it is not already in that form. Returns true to indicate that the path was converted; otherwise returns false to indicate that the path was already absolute.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="owner">
<db:title>QString QFileInfo::owner() const</db:title>
<db:para>Returns the owner of the file. On systems where files do not have owners, or if an error occurs, an empty string is returned.</db:para>
<db:para>This function can be time consuming under Unix (in the order of milliseconds). On Windows, it will return an empty string unless the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has been enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ownerId">
<db:title>uint QFileInfo::ownerId() const</db:title>
<db:para>Returns the id of the owner of the file.</db:para>
<db:para>On Windows and on systems where files do not have owners this function returns ((uint) -2).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#owner">owner</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="path">
<db:title>QString QFileInfo::path() const</db:title>
<db:para>Returns the file's path. This doesn't include the file name.</db:para>
<db:para>Note that, if this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object is given a path ending in a slash, the name of the file is considered empty and this function will return the entire path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#dir">dir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permission">
<db:title>bool QFileInfo::permission(QFileDevice::Permissions <db:emphasis>permissions</db:emphasis>) const</db:title>
<db:para>Tests for file permissions. The <db:code role="parameter">permissions</db:code> argument can be several flags of type QFile::Permissions OR-ed together to check for permission combinations.</db:para>
<db:para>On systems where files do not have permissions this function always returns true.</db:para>
<db:note>
<db:para>The result might be inaccurate on Windows if the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
if (fi.permission(QFile::WriteUser | QFile::ReadGroup))
    qWarning(&quot;I can change the file; my group can read the file&quot;);
if (fi.permission(QFile::WriteGroup | QFile::WriteOther))
    qWarning(&quot;The group or others can change the file&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permissions">
<db:title>QFileDevice::Permissions QFileInfo::permissions() const</db:title>
<db:para>Returns the complete OR-ed together combination of QFile::Permissions for the file.</db:para>
<db:note>
<db:para>The result might be inaccurate on Windows if the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled.</db:para>
</db:note>
</db:section>
<db:section xml:id="refresh">
<db:title>void QFileInfo::refresh()</db:title>
<db:para>Refreshes the information about the file, i.e. reads in information from the file system the next time a cached property is fetched.</db:para>
</db:section>
<db:section xml:id="setCaching">
<db:title>void QFileInfo::setCaching(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, enables caching of file information. If <db:code role="parameter">enable</db:code> is false caching is disabled.</db:para>
<db:para>When caching is enabled, <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> reads the file information from the file system the first time it's needed, but generally not later.</db:para>
<db:para>Caching is enabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#caching">caching</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile">
<db:title>void QFileInfo::setFile(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>Sets the file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">file</db:code>.</db:para>
<db:para>The <db:code role="parameter">file</db:code> can also include an absolute or relative file path. Absolute paths begin with the directory separator (e.g. &quot;/&quot; under Unix) or a drive specification (under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString absolute = &quot;/local/bin&quot;;
QString relative = &quot;local/bin&quot;;
QFileInfo absFile(absolute);
QFileInfo relFile(relative);

QDir::setCurrent(QDir::rootPath());
// absFile and relFile now point to the same file

QDir::setCurrent(&quot;/tmp&quot;);
// absFile now points to &quot;/local/bin&quot;,
// while relFile points to &quot;/tmp/local/bin&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">QDir::setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelativePath">QDir::isRelativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile-1">
<db:title>void QFileInfo::setFile(const QFile &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">file</db:code>.</db:para>
<db:para>If <db:code role="parameter">file</db:code> includes a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile-2">
<db:title>void QFileInfo::setFile(const QDir &amp;<db:emphasis>dir</db:emphasis>, const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">file</db:code> in directory <db:code role="parameter">dir</db:code>.</db:para>
<db:para>If <db:code role="parameter">file</db:code> includes a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qint64 QFileInfo::size() const</db:title>
<db:para>Returns the file size in bytes. If the file does not exist or cannot be fetched, 0 is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="suffix">
<db:title>QString QFileInfo::suffix() const</db:title>
<db:para>Returns the suffix (extension) of the file.</db:para>
<db:para>The suffix consists of all characters in the file after (but not including) the last '.'.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString ext = fi.suffix();  // ext = &quot;gz&quot;
</db:programlisting>
<db:para>The suffix of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeBaseName">completeBaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QFileInfo::swap(QFileInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this file info with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="symLinkTarget">
<db:title>[since 4.2] QString QFileInfo::symLinkTarget() const</db:title>
<db:para>Returns the absolute path to the file or directory a symlink (or shortcut on Windows) points to, or a an empty string if the object isn't a symbolic link.</db:para>
<db:para>This name may not represent an existing file; it is only a string. <db:link xlink:href="qfileinfo.xml#exists">QFileInfo::exists</db:link>() returns true if the symlink points to an existing file.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QFileInfo::operator!=(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object refers to a different file than the one specified by <db:code role="parameter">fileinfo</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default, since 5.2] QFileInfo &amp;QFileInfo::operator=(QFileInfo &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QFileInfo &amp;QFileInfo::operator=(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>)</db:title>
<db:para>Makes a copy of the given <db:code role="parameter">fileinfo</db:code> and assigns it to this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QFileInfo::operator==(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object refers to a file in the same location as <db:code role="parameter">fileinfo</db:code>; otherwise returns false.</db:para>
<db:para>Note that the result of comparing two empty <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects, containing no file references (file paths that do not exist or are empty), is undefined.</db:para>
<db:warning>
<db:para>This will not compare two different symbolic links pointing to the same file.</db:para>
</db:warning>
<db:warning>
<db:para>Long and short file names that refer to the same file on Windows are treated as if they referred to different files.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QFileInfoList-typedef">
<db:title>QFileInfoList</db:title>
<db:para>Synonym for <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>&gt;.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QFileInfo</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="readLink">
<db:title>[deprecated] QString QFileInfo::readLink() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>() instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
