<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFileInfo Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> class provides an OS-independent API to retrieve information about file system entries.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
<db:para>This class is <db:emphasis>equality-comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFileInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFileInfo is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about a file system entry, such as its name, path, access rights and whether it is a regular file, directory or symbolic link. The entry's size and last modified/read times are also available. <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> can also be used to obtain information about a Qt <db:link xlink:href="resources.xml">resource</db:link>.</db:para>
<db:para>A <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> can point to a file system entry with either an absolute or a relative path:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para> On Unix, absolute paths begin with the directory separator '/'. On Windows, absolute paths begin with a drive specification (for example, D:/).</db:para>
</db:listitem>
<db:listitem>
<db:para> Relative paths begin with a directory name or a regular file name and specify a file system entry's path relative to the current working directory.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>An example of an absolute path is the string &quot;/tmp/quartz&quot;. A relative path may look like &quot;src/fatlib&quot;. You can use the function <db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>() to check whether a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> is using a relative or an absolute path. You can call the function <db:link xlink:href="qfileinfo.xml#makeAbsolute">makeAbsolute</db:link>() to convert a relative <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s path to an absolute path.</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:para>The file system entry path that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> works on is set in the constructor or later with <db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>(). Use <db:link xlink:href="qfileinfo.xml#exists">exists</db:link>() to see if the entry actually exists and <db:link xlink:href="qfileinfo.xml#size">size</db:link>() to get its size.</db:para>
<db:para>The file system entry's type is obtained with <db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>(), <db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>(), and <db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>(). The <db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>() function provides the absolute path of the target the symlink points to.</db:para>
<db:para>The path elements of the file system entry can be extracted with <db:link xlink:href="qfileinfo.xml#path">path</db:link>() and <db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>(). The <db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()'s parts can be extracted with <db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>(), <db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>(), or <db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>(). <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects referring to directories created by Qt classes will not have a trailing directory separator '/'. If you wish to use trailing separators in your own file info objects, just append one to the entry's path given to the constructors or <db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>().</db:para>
<db:para>Date and time related information are returned by <db:link xlink:href="qfileinfo.xml#birthTime">birthTime</db:link>(), <db:link xlink:href="qfileinfo.xml#fileTime">fileTime</db:link>(), <db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>(), <db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>(), and <db:link xlink:href="qfileinfo.xml#metadataChangeTime">metadataChangeTime</db:link>(). Information about access permissions can be obtained with <db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>(), <db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>(), and <db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>(). Ownership information can be obtained with <db:link xlink:href="qfileinfo.xml#owner">owner</db:link>(), <db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>(), <db:link xlink:href="qfileinfo.xml#group">group</db:link>(), and <db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>(). You can also examine permissions and ownership in a single statement using the <db:link xlink:href="qfileinfo.xml#permission">permission</db:link>() function.</db:para>
<db:section xml:id="symbolic-links-and-shortcuts">
<db:title>Symbolic Links and Shortcuts</db:title>
<db:para>On Unix (including macOS and iOS), the property getter functions in this class return the properties such as times and size of the target, not the symlink, because Unix handles symlinks transparently. Opening a symlink using <db:link xlink:href="qfile.xml">QFile</db:link> effectively opens the link's target. For example:</db:para>
<db:programlisting language="cpp">#ifdef Q_OS_UNIX

QFileInfo info1(&quot;/home/bob/bin/untabify&quot;);
info1.isSymLink();          // returns true
info1.absoluteFilePath();   // returns &quot;/home/bob/bin/untabify&quot;
info1.size();               // returns 56201
info1.symLinkTarget();      // returns &quot;/opt/pretty++/bin/untabify&quot;

QFileInfo info2(info1.symLinkTarget());
info2.isSymLink();          // returns false
info2.absoluteFilePath();   // returns &quot;/opt/pretty++/bin/untabify&quot;
info2.size();               // returns 56201

#endif
</db:programlisting>
<db:para>On Windows, shortcuts (.lnk files) are currently treated as symlinks. As on Unix systems, the property getters return the size of the target, not the .lnk file itself. This behavior is deprecated and will likely be removed in a future version of Qt, after which .lnk files will be treated as regular files.</db:para>
<db:programlisting language="cpp">#ifdef Q_OS_WIN

QFileInfo info1(&quot;C:\\Users\\Bob\\untabify.lnk&quot;);
info1.isSymLink();          // returns true
info1.absoluteFilePath();   // returns &quot;C:/Users/Bob/untabify.lnk&quot;
info1.size();               // returns 63942
info1.symLinkTarget();      // returns &quot;C:/Pretty++/untabify&quot;

QFileInfo info2(info1.symLinkTarget());
info2.isSymLink();          // returns false
info2.absoluteFilePath();   // returns &quot;C:/Pretty++/untabify&quot;
info2.size();               // returns 63942

#endif
</db:programlisting>
</db:section>
<db:section xml:id="ntfs-permissions">
<db:title>NTFS permissions</db:title>
<db:para>On NTFS file systems, ownership and permissions checking is disabled by default for performance reasons. To enable it, include the following line:</db:para>
<db:programlisting language="cpp">extern Q_CORE_EXPORT int qt_ntfs_permission_lookup;
</db:programlisting>
<db:para>Permission checking is then turned on and off by incrementing and decrementing qt_ntfs_permission_lookup by 1.</db:para>
<db:programlisting language="cpp">qt_ntfs_permission_lookup++; // turn checking on
qt_ntfs_permission_lookup--; // turn it off again
</db:programlisting>
<db:note>
<db:para>Since this is a non-atomic global variable, it is only safe to increment or decrement qt_ntfs_permission_lookup before any threads other than the main thread have started or after every thread other than the main thread has ended.</db:para>
</db:note>
<db:note>
<db:para>From Qt 6.6 the variable qt_ntfs_permission_lookup is deprecated. Please use the following alternatives.</db:para>
</db:note>
<db:para>The safe and easy way to manage permission checks is to use the RAII class QNtfsPermissionCheckGuard.</db:para>
<db:programlisting language="cpp">void complexFunction()
{
    QNtfsPermissionCheckGuard permissionGuard;  // check is enabled

    // do complex things here that need permission check enabled

}   // as the guard goes out of scope the check is disabled
</db:programlisting>
<db:para>If you need more fine-grained control, it is possible to manage the permission with the following functions instead:</db:para>
<db:programlisting language="cpp">qAreNtfsPermissionChecksEnabled();   // check status
qEnableNtfsPermissionChecks();       // turn checking on
qDisableNtfsPermissionChecks();      // turn it off again
</db:programlisting>
</db:section>
<db:section xml:id="performance-considerations">
<db:title>Performance Considerations</db:title>
<db:para>Some of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s functions have to query the file system, but for performance reasons, some functions only operate on the path string. For example: To return the absolute path of a relative entry's path, <db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>() has to query the file system. The <db:link xlink:href="qfileinfo.xml#path">path</db:link>() function, however, can work on the file name directly, and so it is faster.</db:para>
<db:para><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> also caches information about the file system entry it refers to. Because the file system can be changed by other users or programs, or even by other parts of the same program, there is a function that refreshes the information stored in <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>, namely <db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>(). To switch off a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s caching (that is, force it to query the underlying file system every time you request information from it), call <db:link xlink:href="qfileinfo.xml#setCaching">setCaching</db:link>(false).</db:para>
<db:para>Fetching information from the file system is typically done by calling (possibly) expensive system functions, so <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> (depending on the implementation) might not fetch all the information from the file system at construction. To make sure that all information is read from the file system immediately, use the <db:link xlink:href="qfileinfo.xml#stat">stat</db:link>() member function.</db:para>
<db:para><db:link xlink:href="qfileinfo.xml#birthTime">birthTime</db:link>(), <db:link xlink:href="qfileinfo.xml#fileTime">fileTime</db:link>(), <db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>(), <db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>(), and <db:link xlink:href="qfileinfo.xml#metadataChangeTime">metadataChangeTime</db:link>() return times in <db:emphasis>local time</db:emphasis> by default. Since native file system API typically uses UTC, this requires a conversion. If you don't actually need the local time, you can avoid this by requesting the time in <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> directly.</db:para>
</db:section>
<db:section xml:id="platform-specific-issues">
<db:title>Platform Specific Issues</db:title>
<db:para>On Android, some limitations apply when dealing with <db:link xlink:href="https://developer.android.com/guide/topics/providers/content-provider-basics#ContentURIs">content URIs</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Access permissions might be needed by prompting the user through the QFileDialog which implements <db:link xlink:href="https://developer.android.com/training/data-storage/shared/documents-files">Android's native file picker</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Aim to follow the <db:link xlink:href="https://developer.android.com/training/data-storage#scoped-storage">Scoped storage</db:link> guidelines, such as using app specific directories instead of other public external directories. For more information, also see <db:link xlink:href="https://developer.android.com/training/data-storage/use-cases">storage best practices</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Due to the design of Qt APIs (e.g. <db:link xlink:href="qfile.xml">QFile</db:link>), it's not possible to fully integrate the latter APIs with Android's <db:link xlink:href="https://developer.android.com/reference/android/provider/MediaStore">MediaStore</db:link> APIs.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFileInfo">
<db:title>QFileInfo::QFileInfo()</db:title>
<db:para>Constructs an empty <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object that doesn't refer to any file system entry.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-1">
<db:title>[explicit] QFileInfo::QFileInfo(const QFileDevice &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about file <db:code role="parameter">file</db:code>.</db:para>
<db:para>If the <db:code role="parameter">file</db:code> has a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-3">
<db:title>[explicit] QFileInfo::QFileInfo(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about a file system entry located at <db:code role="parameter">path</db:code> that can be absolute or relative.</db:para>
<db:para>If <db:code role="parameter">path</db:code> is relative, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">QDir::setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelativePath">QDir::isRelativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-4">
<db:title>[since 6.0] QFileInfo::QFileInfo(const std::filesystem::path &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about the given <db:code role="parameter">file</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">QDir::setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelativePath">QDir::isRelativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-5">
<db:title>[explicit] QFileInfo::QFileInfo(const QDir &amp;<db:emphasis>dir</db:emphasis>, const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about the given file system entry <db:code role="parameter">path</db:code> that is relative to the directory <db:code role="parameter">dir</db:code>.</db:para>
<db:para>If <db:code role="parameter">dir</db:code> has a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:para>If <db:code role="parameter">path</db:code> is absolute, then the directory specified by <db:code role="parameter">dir</db:code> will be disregarded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-6">
<db:title>[since 6.0] QFileInfo::QFileInfo(const QDir &amp;<db:emphasis>dir</db:emphasis>, const std::filesystem::path &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about the file system entry at <db:code role="parameter">path</db:code> that is relative to the directory <db:code role="parameter">dir</db:code>.</db:para>
<db:para>If <db:code role="parameter">dir</db:code> has a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:para>If <db:code role="parameter">path</db:code> is absolute, then the directory specified by <db:code role="parameter">dir</db:code> will be disregarded.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QFileInfo-2">
<db:title>QFileInfo::QFileInfo(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that is a copy of the given <db:code role="parameter">fileinfo</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFileInfo">
<db:title>[noexcept] QFileInfo::~QFileInfo()</db:title>
<db:para>Destroys the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> and frees its resources.</db:para>
</db:section>
<db:section xml:id="absoluteDir">
<db:title>QDir QFileInfo::absoluteDir() const</db:title>
<db:para>Returns a <db:link xlink:href="qdir.xml">QDir</db:link> object representing the absolute path of the parent directory of the file system entry that this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to.</db:para>
<db:programlisting language="cpp">// Given a current working directory of &quot;/home/user/Documents/memos/&quot;
QFileInfo info1(u&quot;relativeFile&quot;_s);
qDebug() &lt;&lt; info1.absolutePath(); // &quot;/home/user/Documents/memos/&quot;
qDebug() &lt;&lt; info1.baseName(); // &quot;relativeFile&quot;
qDebug() &lt;&lt; info1.absoluteDir(); // QDir(u&quot;/home/user/Documents/memos&quot;_s)
qDebug() &lt;&lt; info1.absoluteDir().path(); // &quot;/home/user/Documents/memos&quot;

// A QFileInfo on a dir
QFileInfo info2(u&quot;/home/user/Documents/memos&quot;_s);
qDebug() &lt;&lt; info2.absolutePath(); // &quot;/home/user/Documents&quot;
qDebug() &lt;&lt; info2.baseName(); // &quot;memos&quot;
qDebug() &lt;&lt; info2.absoluteDir(); // QDir(u&quot;/home/user/Documents&quot;_s)
qDebug() &lt;&lt; info2.absoluteDir().path(); // &quot;/home/user/Documents&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#dir">dir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="absoluteFilePath">
<db:title>QString QFileInfo::absoluteFilePath() const</db:title>
<db:para>Returns the absolute full path to the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to, including the entry's name.</db:para>
<db:para>On Unix, absolute paths begin with the directory separator '/'. On Windows, absolute paths begin with a drive specification (for example, D:/).</db:para>
<db:para>On Windows, the paths of network shares that are not mapped to a drive letter begin with //sharename/.</db:para>
<db:para><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will uppercase drive letters. Note that <db:link xlink:href="qdir.xml">QDir</db:link> does not do this. The code snippet below shows this.</db:para>
<db:programlisting language="cpp">    QFileInfo fi(&quot;c:/temp/foo&quot;);
    qDebug() &lt;&lt; fi.absoluteFilePath(); // &quot;C:/temp/foo&quot;
</db:programlisting>
<db:para>This function returns the same as <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>(), unless <db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>() is true. In contrast to <db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>(), symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements are not necessarily removed.</db:para>
<db:warning>
<db:para>If <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>() is empty the behavior of this function is undefined.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="absolutePath">
<db:title>QString QFileInfo::absolutePath() const</db:title>
<db:para>Returns the absolute path of the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to, excluding the entry's name.</db:para>
<db:para>On Unix, absolute paths begin with the directory separator '/'. On Windows, absolute paths begin with a drive specification (for example, D:/).</db:para>
<db:para>On Windows, the paths of network shares that are not mapped to a drive letter begin with //sharename/.</db:para>
<db:para>In contrast to <db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>() symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements are not necessarily removed.</db:para>
<db:warning>
<db:para>If <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>() is empty the behavior of this function is undefined.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#path">path</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="baseName">
<db:title>QString QFileInfo::baseName() const</db:title>
<db:para>Returns the base name of the file without the path.</db:para>
<db:para>The base name consists of all characters in the file up to (but not including) the <db:emphasis>first</db:emphasis> '.' character.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString base = fi.baseName();  // base = &quot;archive&quot;
</db:programlisting>
<db:para>The base name of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeBaseName">completeBaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="birthTime">
<db:title>QDateTime QFileInfo::birthTime() const</db:title>
<db:para>Returns the date and time when the file was created (born), in local time.</db:para>
<db:para>If the file birth time is not available, this function returns an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function overloads QFileInfo::birthTime(const <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> &amp;tz), and returns the same as birthTime(QTimeZone::LocalTime).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime">metadataChangeTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime">fileTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="birthTime-1">
<db:title>[since 6.6] QDateTime QFileInfo::birthTime(const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:title>
<db:para>Returns the date and time when the file was created (born).</db:para>
<db:para>The returned time is in the time zone specified by <db:code role="parameter">tz</db:code>. For example, you can use <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::LocalTime</db:link> or <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> to get the time in the Local time zone or UTC, respectively. Since native file system API typically uses UTC, using <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> is often faster, as it does not require any conversions.</db:para>
<db:para>If the file birth time is not available, this function returns an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#lastModified-1">lastModified</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead-1">lastRead</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime-1">metadataChangeTime</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime-1">fileTime</db:link>(QFileDevice::FileTime, const QTimeZone &amp;)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bundleName">
<db:title>QString QFileInfo::bundleName() const</db:title>
<db:para>Returns the name of the bundle.</db:para>
<db:para>On macOS and iOS this returns the proper localized name for a bundle if the path <db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>(). On all other platforms an empty <db:link xlink:href="qstring.xml">QString</db:link> is returned.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/Applications/Safari.app&quot;);
QString bundle = fi.bundleName();                // name = &quot;Safari&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="caching">
<db:title>bool QFileInfo::caching() const</db:title>
<db:para>Returns true if caching is enabled; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setCaching">setCaching</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canonicalFilePath">
<db:title>QString QFileInfo::canonicalFilePath() const</db:title>
<db:para>Returns the file system entry's canonical path, including the entry's name, that is, an absolute path without symbolic links or redundant '.' or '..' elements.</db:para>
<db:para>If the entry does not exist, canonicalFilePath() returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#dir">dir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canonicalPath">
<db:title>QString QFileInfo::canonicalPath() const</db:title>
<db:para>Returns the file system entry's canonical path (excluding the entry's name), i.e. an absolute path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</db:para>
<db:para>If the entry does not exist, this method returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#path">path</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completeBaseName">
<db:title>QString QFileInfo::completeBaseName() const</db:title>
<db:para>Returns the complete base name of the file without the path.</db:para>
<db:para>The complete base name consists of all characters in the file up to (but not including) the <db:emphasis>last</db:emphasis> '.' character.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString base = fi.completeBaseName();  // base = &quot;archive.tar&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completeSuffix">
<db:title>QString QFileInfo::completeSuffix() const</db:title>
<db:para>Returns the complete suffix (extension) of the file.</db:para>
<db:para>The complete suffix consists of all characters in the file after (but not including) the first '.'.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString ext = fi.completeSuffix();  // ext = &quot;tar.gz&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeBaseName">completeBaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dir">
<db:title>QDir QFileInfo::dir() const</db:title>
<db:para>Returns a <db:link xlink:href="qdir.xml">QDir</db:link> object representing the path of the parent directory of the file system entry that this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qdir.xml">QDir</db:link> returned always corresponds to the object's parent directory, even if the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> represents a directory.</db:para>
</db:note>
<db:para>For each of the following, dir() returns the <db:link xlink:href="qdir.xml">QDir</db:link> &quot;~/examples/191697&quot;.</db:para>
<db:programlisting language="cpp">    QFileInfo fileInfo1(&quot;~/examples/191697/.&quot;);
    QFileInfo fileInfo2(&quot;~/examples/191697/..&quot;);
    QFileInfo fileInfo3(&quot;~/examples/191697/main.cpp&quot;);
</db:programlisting>
<db:para>For each of the following, dir() returns the <db:link xlink:href="qdir.xml">QDir</db:link> &quot;.&quot;.</db:para>
<db:programlisting language="cpp">    QFileInfo fileInfo4(&quot;.&quot;);
    QFileInfo fileInfo5(&quot;..&quot;);
    QFileInfo fileInfo6(&quot;main.cpp&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absoluteDir">absoluteDir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exists">
<db:title>bool QFileInfo::exists() const</db:title>
<db:para>Returns true if the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to exists; otherwise returns false.</db:para>
<db:note>
<db:para>If the entry is a symlink that points to a non-existing target, this method returns false.</db:para>
</db:note>
</db:section>
<db:section xml:id="exists-1">
<db:title>[static] bool QFileInfo::exists(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Returns true if the file system entry <db:code role="parameter">path</db:code> exists; otherwise returns false.</db:para>
<db:note>
<db:para>If <db:code role="parameter">path</db:code> is a symlink that points to a non-existing target, this method returns false.</db:para>
</db:note>
<db:note>
<db:para>Using this function is faster than using QFileInfo(path).exists() for file system access.</db:para>
</db:note>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QFileInfo::fileName() const</db:title>
<db:para>Returns the name of the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to, excluding the path.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString name = fi.fileName();                // name = &quot;archive.tar.gz&quot;
</db:programlisting>
<db:note>
<db:para>If this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> is given a path ending with a directory separator '/', the entry's name part is considered empty.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filePath">
<db:title>QString QFileInfo::filePath() const</db:title>
<db:para>Returns the path of the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to; the path may be absolute or relative.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileTime">
<db:title>QDateTime QFileInfo::fileTime(QFileDevice::FileTime <db:emphasis>time</db:emphasis>) const</db:title>
<db:para>Returns the file time specified by <db:code role="parameter">time</db:code>.</db:para>
<db:para>If the time cannot be determined, an invalid date time is returned.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function overloads <db:link xlink:href="qfileinfo.xml#fileTime-1">QFileInfo::fileTime</db:link>(QFileDevice::FileTime, const QTimeZone &amp;), and returns the same as fileTime(time, QTimeZone::LocalTime).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime">birthTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime">metadataChangeTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileTime-1">
<db:title>[since 6.6] QDateTime QFileInfo::fileTime(QFileDevice::FileTime <db:emphasis>time</db:emphasis>, const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:title>
<db:para>Returns the file time specified by <db:code role="parameter">time</db:code>.</db:para>
<db:para>The returned time is in the time zone specified by <db:code role="parameter">tz</db:code>. For example, you can use <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::LocalTime</db:link> or <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> to get the time in the Local time zone or UTC, respectively. Since native file system API typically uses UTC, using <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> is often faster, as it does not require any conversions.</db:para>
<db:para>If the time cannot be determined, an invalid date time is returned.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime-1">birthTime</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastModified-1">lastModified</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead-1">lastRead</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime-1">metadataChangeTime</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qdatetime.xml#isValid">QDateTime::isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemAbsoluteFilePath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemAbsoluteFilePath() const</db:title>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemAbsolutePath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemAbsolutePath() const</db:title>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemCanonicalFilePath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemCanonicalFilePath() const</db:title>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemCanonicalPath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemCanonicalPath() const</db:title>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemFilePath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemFilePath() const</db:title>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemJunctionTarget">
<db:title>[since 6.2] std::filesystem::path QFileInfo::filesystemJunctionTarget() const</db:title>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#junctionTarget">junctionTarget</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#junctionTarget">junctionTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemPath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemPath() const</db:title>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#path">path</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#path">path</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemReadSymLink">
<db:title>[since 6.6] std::filesystem::path QFileInfo::filesystemReadSymLink() const</db:title>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#readSymLink">readSymLink</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#readSymLink">readSymLink</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemSymLinkTarget">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemSymLinkTarget() const</db:title>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="group">
<db:title>QString QFileInfo::group() const</db:title>
<db:para>Returns the group of the file. On Windows, on systems where files do not have groups, or if an error occurs, an empty string is returned.</db:para>
<db:para>This function can be time consuming under Unix (in the order of milliseconds).</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#owner">owner</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="groupId">
<db:title>uint QFileInfo::groupId() const</db:title>
<db:para>Returns the id of the group the file belongs to.</db:para>
<db:para>On Windows and on systems where files do not have groups this function always returns (uint) -2.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#owner">owner</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAbsolute">
<db:title>bool QFileInfo::isAbsolute() const</db:title>
<db:para>Returns true if the file system entry's path is absolute, otherwise returns false (that is, the path is relative).</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAlias">
<db:title>[since 6.4] bool QFileInfo::isAlias() const</db:title>
<db:para>Returns true if this object points to an alias; otherwise returns false.</db:para>
<db:para>Aliases only exist on macOS. They are treated as regular files, so opening an alias will open the file itself. In order to open the file or directory an alias references use <db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>().</db:para>
<db:note>
<db:para>Even if an alias points to a non existing file, isAlias() returns true.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBundle">
<db:title>bool QFileInfo::isBundle() const</db:title>
<db:para>Returns true if this object points to a bundle or to a symbolic link to a bundle on macOS and iOS; otherwise returns false.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDir">
<db:title>bool QFileInfo::isDir() const</db:title>
<db:para>Returns true if this object points to a directory or to a symbolic link to a directory. Returns false if the object points to something that is not a directory (such as a file) or that does not exist.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isExecutable">
<db:title>bool QFileInfo::isExecutable() const</db:title>
<db:para>Returns true if the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to is executable; otherwise returns false.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#permission">permission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFile">
<db:title>bool QFileInfo::isFile() const</db:title>
<db:para>Returns true if this object points to a file or to a symbolic link to a file. Returns false if the object points to something that is not a file (such as a directory) or that does not exist.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isHidden">
<db:title>bool QFileInfo::isHidden() const</db:title>
<db:para>Returns true if the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to is `hidden'; otherwise returns false.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This function returns true for the special entries &quot;.&quot; and &quot;..&quot; on Unix, even though <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link> treats them as shown. And note that, since this function inspects the file name, on Unix it will inspect the name of the symlink, if this file is a symlink, not the target's name.</db:para>
<db:para>On Windows, this function returns true if the target file is hidden (not the symlink).</db:para>
</db:section>
<db:section xml:id="isJunction">
<db:title>bool QFileInfo::isJunction() const</db:title>
<db:para>Returns true if the object points to a junction; otherwise returns false.</db:para>
<db:para>Junctions only exist on Windows' NTFS file system, and are typically created by the mklink command. They can be thought of as symlinks for directories, and can only be created for absolute paths on the local volume.</db:para>
</db:section>
<db:section xml:id="isNativePath">
<db:title>bool QFileInfo::isNativePath() const</db:title>
<db:para>Returns true if the file path can be used directly with native APIs. Returns false if the file is otherwise supported by a virtual file system inside Qt, such as <db:link xlink:href="resources.xml">the Qt Resource System</db:link>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Native paths may still require conversion of path separators and character encoding, depending on platform and input requirements of the native API.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#toNativeSeparators">QDir::toNativeSeparators</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#encodeName">QFile::encodeName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadable">
<db:title>bool QFileInfo::isReadable() const</db:title>
<db:para>Returns true if the user can read the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to; otherwise returns false.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:note>
<db:para>If the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled, the result on Windows will merely reflect whether the entry exists.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#permission">permission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRelative">
<db:title>bool QFileInfo::isRelative() const</db:title>
<db:para>Returns true if the file system entry's path is relative, otherwise returns false (that is, the path is absolute).</db:para>
<db:para>On Unix, absolute paths begin with the directory separator '/'. On Windows, absolute paths begin with a drive specification (for example, D:/).</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isAbsolute">isAbsolute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRoot">
<db:title>bool QFileInfo::isRoot() const</db:title>
<db:para>Returns true if the object points to a directory or to a symbolic link to a directory, and that directory is the root directory; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isShortcut">
<db:title>bool QFileInfo::isShortcut() const</db:title>
<db:para>Returns true if this object points to a shortcut; otherwise returns false.</db:para>
<db:para>Shortcuts only exist on Windows and are typically .lnk files. For instance, true will be returned for shortcuts (*.lnk files) on Windows, but false will be returned on Unix (including macOS and iOS).</db:para>
<db:para>The shortcut (.lnk) files are treated as regular files. Opening those will open the .lnk file itself. In order to open the file a shortcut references to, it must uses <db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>() on a shortcut.</db:para>
<db:note>
<db:para>Even if a shortcut (broken shortcut) points to a non existing file, isShortcut() returns true.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymbolicLink">isSymbolicLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSymLink">
<db:title>bool QFileInfo::isSymLink() const</db:title>
<db:para>Returns true if this object points to a symbolic link, shortcut, or alias; otherwise returns false.</db:para>
<db:para>Symbolic links exist on Unix (including macOS and iOS) and Windows and are typically created by the ln -s or mklink commands, respectively. Opening a symbolic link effectively opens the <db:link xlink:href="qfileinfo.xml#symLinkTarget">link's target</db:link>.</db:para>
<db:para>In addition, true will be returned for shortcuts (*.lnk files) on Windows, and aliases on macOS. This behavior is deprecated and will likely change in a future version of Qt. Opening a shortcut or alias will open the .lnk or alias file itself.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo info(fileName);
if (info.isSymLink())
    fileName = info.symLinkTarget();
</db:programlisting>
<db:note>
<db:para><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>() returns true if the symlink points to an existing target, otherwise it returns false.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSymbolicLink">
<db:title>bool QFileInfo::isSymbolicLink() const</db:title>
<db:para>Returns true if this object points to a symbolic link; otherwise returns false.</db:para>
<db:para>Symbolic links exist on Unix (including macOS and iOS) and Windows (NTFS-symlink) and are typically created by the ln -s or mklink commands, respectively.</db:para>
<db:para>Unix handles symlinks transparently. Opening a symbolic link effectively opens the <db:link xlink:href="qfileinfo.xml#symLinkTarget">link's target</db:link>.</db:para>
<db:para>In contrast to <db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>(), false will be returned for shortcuts (*.lnk files) on Windows and aliases on macOS. Use <db:link xlink:href="qfileinfo.xml#isShortcut">QFileInfo::isShortcut</db:link>() and <db:link xlink:href="qfileinfo.xml#isAlias">QFileInfo::isAlias</db:link>() instead.</db:para>
<db:note>
<db:para><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>() returns true if the symlink points to an existing target, otherwise it returns false.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isShortcut">isShortcut</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isWritable">
<db:title>bool QFileInfo::isWritable() const</db:title>
<db:para>Returns true if the user can write to the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to; otherwise returns false.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:note>
<db:para>If the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled, the result on Windows will merely reflect whether the entry is marked as Read Only.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#permission">permission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="junctionTarget">
<db:title>[since 6.2] QString QFileInfo::junctionTarget() const</db:title>
<db:para>Resolves an NTFS junction to the path it references.</db:para>
<db:para>Returns the absolute path to the directory an NTFS junction points to, or an empty string if the object is not an NTFS junction.</db:para>
<db:para>There is no guarantee that the directory named by the NTFS junction actually exists.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isJunction">isJunction</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymbolicLink">isSymbolicLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isShortcut">isShortcut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastModified">
<db:title>QDateTime QFileInfo::lastModified() const</db:title>
<db:para>Returns the date and time when the file was last modified.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function overloads <db:link xlink:href="qfileinfo.xml#lastModified-1">QFileInfo::lastModified</db:link>(const QTimeZone &amp;), and returns the same as lastModified(QTimeZone::LocalTime).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime">birthTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime">metadataChangeTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime">fileTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastModified-1">
<db:title>[since 6.6] QDateTime QFileInfo::lastModified(const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:title>
<db:para>Returns the date and time when the file was last modified.</db:para>
<db:para>The returned time is in the time zone specified by <db:code role="parameter">tz</db:code>. For example, you can use <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::LocalTime</db:link> or <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> to get the time in the Local time zone or UTC, respectively. Since native file system API typically uses UTC, using <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> is often faster, as it does not require any conversions.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime-1">birthTime</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead-1">lastRead</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime-1">metadataChangeTime</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime-1">fileTime</db:link>(QFileDevice::FileTime, const QTimeZone &amp;)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastRead">
<db:title>QDateTime QFileInfo::lastRead() const</db:title>
<db:para>Returns the date and time when the file was last read (accessed).</db:para>
<db:para>On platforms where this information is not available, returns the same time as <db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>().</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function overloads <db:link xlink:href="qfileinfo.xml#lastRead-1">QFileInfo::lastRead</db:link>(const QTimeZone &amp;), and returns the same as lastRead(QTimeZone::LocalTime).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime">birthTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime">metadataChangeTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime">fileTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastRead-1">
<db:title>[since 6.6] QDateTime QFileInfo::lastRead(const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:title>
<db:para>Returns the date and time when the file was last read (accessed).</db:para>
<db:para>The returned time is in the time zone specified by <db:code role="parameter">tz</db:code>. For example, you can use <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::LocalTime</db:link> or <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> to get the time in the Local time zone or UTC, respectively. Since native file system API typically uses UTC, using <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> is often faster, as it does not require any conversions.</db:para>
<db:para>On platforms where this information is not available, returns the same time as <db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>().</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime-1">birthTime</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastModified-1">lastModified</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime-1">metadataChangeTime</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime-1">fileTime</db:link>(QFileDevice::FileTime, const QTimeZone &amp;)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="makeAbsolute">
<db:title>bool QFileInfo::makeAbsolute()</db:title>
<db:para>If the file system entry's path is relative, this method converts it to an absolute path and returns true; if the path is already absolute, this method returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metadataChangeTime">
<db:title>QDateTime QFileInfo::metadataChangeTime() const</db:title>
<db:para>Returns the date and time when the file's metadata was last changed, in local time.</db:para>
<db:para>A metadata change occurs when the file is first created, but it also occurs whenever the user writes or sets inode information (for example, changing the file permissions).</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function overloads QFileInfo::metadataChangeTime(const <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> &amp;tz), and returns the same as metadataChangeTime(QTimeZone::LocalTime).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime">birthTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime">fileTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metadataChangeTime-1">
<db:title>[since 6.6] QDateTime QFileInfo::metadataChangeTime(const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:title>
<db:para>Returns the date and time when the file's metadata was last changed. A metadata change occurs when the file is first created, but it also occurs whenever the user writes or sets inode information (for example, changing the file permissions).</db:para>
<db:para>The returned time is in the time zone specified by <db:code role="parameter">tz</db:code>. For example, you can use <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::LocalTime</db:link> or <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> to get the time in the Local time zone or UTC, respectively. Since native file system API typically uses UTC, using <db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link> is often faster, as it does not require any conversions.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime-1">birthTime</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastModified-1">lastModified</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead-1">lastRead</db:link>(const QTimeZone &amp;)</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime-1">fileTime</db:link>(QFileDevice::FileTime time, const QTimeZone &amp;)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="owner">
<db:title>QString QFileInfo::owner() const</db:title>
<db:para>Returns the owner of the file. On systems where files do not have owners, or if an error occurs, an empty string is returned.</db:para>
<db:para>This function can be time consuming under Unix (in the order of milliseconds). On Windows, it will return an empty string unless the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has been enabled.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ownerId">
<db:title>uint QFileInfo::ownerId() const</db:title>
<db:para>Returns the id of the owner of the file.</db:para>
<db:para>On Windows and on systems where files do not have owners this function returns ((uint) -2).</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#owner">owner</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="path">
<db:title>QString QFileInfo::path() const</db:title>
<db:para>Returns the path of the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to, excluding the entry's name.</db:para>
<db:note>
<db:para>If this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> is given a path ending with a directory separator '/', the entry's name part is considered empty. In this case, this function will return the entire path.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#dir">dir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permission">
<db:title>bool QFileInfo::permission(QFileDevice::Permissions <db:emphasis>permissions</db:emphasis>) const</db:title>
<db:para>Tests for file permissions. The <db:code role="parameter">permissions</db:code> argument can be several flags of type QFile::Permissions OR-ed together to check for permission combinations.</db:para>
<db:para>On systems where files do not have permissions this function always returns true.</db:para>
<db:note>
<db:para>The result might be inaccurate on Windows if the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
if (fi.permission(QFile::WriteUser | QFile::ReadGroup))
    qWarning(&quot;I can change the file; my group can read the file&quot;);
if (fi.permission(QFile::WriteGroup | QFile::WriteOther))
    qWarning(&quot;The group or others can change the file&quot;);
</db:programlisting>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permissions">
<db:title>QFileDevice::Permissions QFileInfo::permissions() const</db:title>
<db:para>Returns the complete OR-ed together combination of QFile::Permissions for the file.</db:para>
<db:note>
<db:para>The result might be inaccurate on Windows if the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled.</db:para>
</db:note>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
</db:section>
<db:section xml:id="readSymLink">
<db:title>[since 6.6] QString QFileInfo::readSymLink() const</db:title>
<db:para>Read the path the symlink references.</db:para>
<db:para>Returns the raw path referenced by the symbolic link, without resolving a relative path relative to the directory containing the symbolic link. The returned string will only be an absolute path if the symbolic link actually references it as such. Returns an empty string if the object is not a symbolic link.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="refresh">
<db:title>void QFileInfo::refresh()</db:title>
<db:para>Refreshes the information about the file system entry this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> refers to, that is, reads in information from the file system the next time a cached property is fetched.</db:para>
</db:section>
<db:section xml:id="setCaching">
<db:title>void QFileInfo::setCaching(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, enables caching of file information. If <db:code role="parameter">enable</db:code> is false caching is disabled.</db:para>
<db:para>When caching is enabled, <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> reads the file information from the file system the first time it's needed, but generally not later.</db:para>
<db:para>Caching is enabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#caching">caching</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile">
<db:title>void QFileInfo::setFile(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Sets the path of the file system entry that this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">path</db:code> that can be absolute or relative.</db:para>
<db:para>On Unix, absolute paths begin with the directory separator '/'. On Windows, absolute paths begin with a drive specification (for example, D:/).</db:para>
<db:para>Relative paths begin with a directory name or a regular file name and specify a file system entry's path relative to the current working directory.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo info(&quot;/usr/bin/env&quot;);

QString path = info.absolutePath(); // path = /usr/bin
QString base = info.baseName(); // base = env

info.setFile(&quot;/etc/hosts&quot;);

path = info.absolutePath(); // path = /etc
base = info.baseName(); // base = hosts
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">QDir::setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelativePath">QDir::isRelativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile-1">
<db:title>[since 6.0] void QFileInfo::setFile(const std::filesystem::path &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Sets the path of file system entry that this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">path</db:code>.</db:para>
<db:para>If <db:code role="parameter">path</db:code> is relative, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="setFile-2">
<db:title>void QFileInfo::setFile(const QFileDevice &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">file</db:code>.</db:para>
<db:para>If <db:code role="parameter">file</db:code> includes a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile-3">
<db:title>void QFileInfo::setFile(const QDir &amp;<db:emphasis>dir</db:emphasis>, const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the path of the file system entry that this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">path</db:code> in directory <db:code role="parameter">dir</db:code>.</db:para>
<db:para>If <db:code role="parameter">dir</db:code> has a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:para>If <db:code role="parameter">path</db:code> is absolute, then the directory specified by <db:code role="parameter">dir</db:code> will be disregarded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qint64 QFileInfo::size() const</db:title>
<db:para>Returns the file size in bytes. If the file does not exist or cannot be fetched, 0 is returned.</db:para>
<db:para>If the file is a symlink, this function returns information about the target, not the symlink.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stat">
<db:title>[since 6.0] void QFileInfo::stat()</db:title>
<db:para>Reads all attributes from the file system.</db:para>
<db:para>This is useful when information about the file system is collected in a worker thread, and then passed to the UI in the form of caching <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> instances.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setCaching">setCaching</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="suffix">
<db:title>QString QFileInfo::suffix() const</db:title>
<db:para>Returns the suffix (extension) of the file.</db:para>
<db:para>The suffix consists of all characters in the file after (but not including) the last '.'.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString ext = fi.suffix();  // ext = &quot;gz&quot;
</db:programlisting>
<db:para>The suffix of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeBaseName">completeBaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QFileInfo::swap(QFileInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this file info with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="symLinkTarget">
<db:title>QString QFileInfo::symLinkTarget() const</db:title>
<db:para>Returns the absolute path to the file or directory a symbolic link points to, or an empty string if the object isn't a symbolic link.</db:para>
<db:para>This name may not represent an existing file; it is only a string.</db:para>
<db:note>
<db:para><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>() returns true if the symlink points to an existing target, otherwise it returns false.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QFileInfo &amp;QFileInfo::operator=(QFileInfo &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QFileInfo &amp;QFileInfo::operator=(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>)</db:title>
<db:para>Makes a copy of the given <db:code role="parameter">fileinfo</db:code> and assigns it to this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QFileInfoList-typedef">
<db:title>QFileInfoList</db:title>
<db:para>Synonym for <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>&gt;.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QFileInfo &amp;<db:emphasis>lhs</db:emphasis>, const QFileInfo &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> <db:code role="parameter">lhs</db:code> refers to a different file system entry than the one referred to by <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QFileInfo &amp;<db:emphasis>lhs</db:emphasis>, const QFileInfo &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> <db:code role="parameter">lhs</db:code> and <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> <db:code role="parameter">rhs</db:code> refer to the same entry on the file system; otherwise returns false.</db:para>
<db:para>Note that the result of comparing two empty <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects, containing no file system entry references (paths that do not exist or are empty), is undefined.</db:para>
<db:warning>
<db:para>This will not compare two different symbolic links pointing to the same target.</db:para>
</db:warning>
<db:warning>
<db:para>On Windows, long and short paths that refer to the same file system entry are treated as if they referred to different entries.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QT_IMPLICIT_QFILEINFO_CONSTRUCTION">
<db:title>[since 6.0] QT_IMPLICIT_QFILEINFO_CONSTRUCTION</db:title>
<db:para>Defining this macro makes most <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> constructors implicit instead of explicit. Since construction of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects is expensive, one should avoid accidentally creating them, especially if cheaper alternatives exist. For instance:</db:para>
<db:programlisting language="cpp" role="bad">QDirIterator it(dir);
while (it.hasNext()) {
    // Implicit conversion from QString (returned by it.next()):
    // may create unnecessary data structures and cause additional
    // accesses to the file system. Unless this macro is defined,
    // this line does not compile.

    QFileInfo fi = it.next();

    ~~~
}

</db:programlisting>
<db:para>Instead, use the right API:</db:para>
<db:programlisting language="cpp">QDirIterator it(dir);
while (it.hasNext()) {
    // Extract the QFileInfo from the iterator directly:
    QFileInfo fi = it.nextFileInfo();

    ~~~
}

</db:programlisting>
<db:para>Construction from <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qfile.xml">QFile</db:link>, and so on is always possible by using direct initialization instead of copy initialization:</db:para>
<db:programlisting language="cpp">QFileInfo fi1 = some_string; // Does not compile unless this macro is defined
QFileInfo fi2(some_string);  // OK
QFileInfo fi3{some_string};  // Possibly better, avoids the risk of the Most Vexing Parse
auto fi4 = QFileInfo(some_string); // OK

</db:programlisting>
<db:para>This macro is provided for compatibility reason. Its usage is not recommended in new code.</db:para>
<db:para>This macro was introduced in Qt 6.0.</db:para>
</db:section>
</db:section>
</db:article>
