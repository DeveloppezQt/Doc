<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFileInfo Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> class provides system-independent file information.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFileInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFileInfo is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about a file's name and position (path) in the file system, its access rights and whether it is a directory or symbolic link, etc. The file's size and last modified/read times are also available. <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> can also be used to obtain information about a Qt <db:link xlink:href="resources.xml">resource</db:link>.</db:para>
<db:para>A <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> can point to a file with either a relative or an absolute file path. Absolute file paths begin with the directory separator &quot;/&quot; (or with a drive specification on Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current working directory. An example of an absolute path is the string &quot;/tmp/quartz&quot;. A relative path might look like &quot;src/fatlib&quot;. You can use the function <db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>() to check whether a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> is using a relative or an absolute file path. You can call the function <db:link xlink:href="qfileinfo.xml#makeAbsolute">makeAbsolute</db:link>() to convert a relative <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s path to an absolute path.</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:para>The file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> works on is set in the constructor or later with <db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>(). Use <db:link xlink:href="qfileinfo.xml#exists">exists</db:link>() to see if the file exists and <db:link xlink:href="qfileinfo.xml#size">size</db:link>() to get its size.</db:para>
<db:para>The file's type is obtained with <db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>(), <db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>() and <db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>(). The <db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>() function provides the name of the file the symlink points to.</db:para>
<db:para>On Unix (including macOS and iOS), the property getter functions in this class return the properties such as times and size of the target file, not the symlink, because Unix handles symlinks transparently. Opening a symlink using <db:link xlink:href="qfile.xml">QFile</db:link> effectively opens the link's target. For example:</db:para>
<db:programlisting language="cpp">#ifdef Q_OS_UNIX

QFileInfo info1(&quot;/home/bob/bin/untabify&quot;);
info1.isSymLink();          // returns true
info1.absoluteFilePath();   // returns &quot;/home/bob/bin/untabify&quot;
info1.size();               // returns 56201
info1.symLinkTarget();      // returns &quot;/opt/pretty++/bin/untabify&quot;

QFileInfo info2(info1.symLinkTarget());
info2.isSymLink();          // returns false
info2.absoluteFilePath();   // returns &quot;/opt/pretty++/bin/untabify&quot;
info2.size();               // returns 56201

#endif
</db:programlisting>
<db:para>On Windows, shortcuts (.lnk files) are currently treated as symlinks. As on Unix systems, the property getters return the size of the targeted file, not the .lnk file itself. This behavior is deprecated and will likely be removed in a future version of Qt, after which .lnk files will be treated as regular files.</db:para>
<db:programlisting language="cpp">#ifdef Q_OS_WIN

QFileInfo info1(&quot;C:\\Documents and Settings\\Bob\\untabify.lnk&quot;);
info1.isSymLink();          // returns true
info1.absoluteFilePath();   // returns &quot;C:/Documents and Settings/Bob/untabify.lnk&quot;
info1.size();               // returns 743
info1.symLinkTarget();      // returns &quot;C:/Pretty++/untabify&quot;

QFileInfo info2(info1.symLinkTarget());
info2.isSymLink();          // returns false
info2.absoluteFilePath();   // returns &quot;C:/Pretty++/untabify&quot;
info2.size();               // returns 63942

#endif
</db:programlisting>
<db:para>Elements of the file's name can be extracted with <db:link xlink:href="qfileinfo.xml#path">path</db:link>() and <db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>(). The <db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()'s parts can be extracted with <db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>(), <db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>() or <db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>(). <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects to directories created by Qt classes will not have a trailing file separator. If you wish to use trailing separators in your own file info objects, just append one to the file name given to the constructors or <db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>().</db:para>
<db:para>The file's dates are returned by <db:link xlink:href="qfileinfo.xml#birthTime">birthTime</db:link>(), <db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>(), <db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>() and <db:link xlink:href="qfileinfo.xml#fileTime">fileTime</db:link>(). Information about the file's access permissions is obtained with <db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>(), <db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>() and <db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>(). The file's ownership is available from <db:link xlink:href="qfileinfo.xml#owner">owner</db:link>(), <db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>(), <db:link xlink:href="qfileinfo.xml#group">group</db:link>() and <db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>(). You can examine a file's permissions and ownership in a single statement using the <db:link xlink:href="qfileinfo.xml#permission">permission</db:link>() function.</db:para>
<db:anchor xml:id="ntfs-permissions"/>
<db:note>
<db:para>On NTFS file systems, ownership and permissions checking is disabled by default for performance reasons. To enable it, include the following line:</db:para>
</db:note>
<db:programlisting language="cpp">extern Q_CORE_EXPORT int qt_ntfs_permission_lookup;
</db:programlisting>
<db:para>Permission checking is then turned on and off by incrementing and decrementing qt_ntfs_permission_lookup by 1.</db:para>
<db:programlisting language="cpp">qt_ntfs_permission_lookup++; // turn checking on
qt_ntfs_permission_lookup--; // turn it off again
</db:programlisting>
<db:section xml:id="performance-issues">
<db:title>Performance Issues</db:title>
<db:para>Some of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s functions query the file system, but for performance reasons, some functions only operate on the file name itself. For example: To return the absolute path of a relative file name, <db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>() has to query the file system. The <db:link xlink:href="qfileinfo.xml#path">path</db:link>() function, however, can work on the file name directly, and so it is faster.</db:para>
<db:note>
<db:para>To speed up performance, <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> caches information about the file.</db:para>
</db:note>
<db:para>Because files can be changed by other users or programs, or even by other parts of the same program, there is a function that refreshes the file information: <db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>(). If you want to switch off a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s caching and force it to access the file system every time you request information from it call <db:link xlink:href="qfileinfo.xml#setCaching">setCaching</db:link>(false). If you want to make sure that all information is read from the file system, use <db:link xlink:href="qfileinfo.xml#stat">stat</db:link>().</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFileInfo-1">
<db:title>QFileInfo::QFileInfo()</db:title>
<db:constructorsynopsis>
<db:methodname>QFileInfo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileInfo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object.</db:para>
<db:para>Note that an empty <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object contain no file reference.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-2">
<db:title>[explicit] QFileInfo::QFileInfo(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileInfo</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileInfo(const QString &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about the given file. The <db:code role="parameter">file</db:code> can also include an absolute or relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">QDir::setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelativePath">QDir::isRelativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-3">
<db:title>[explicit] QFileInfo::QFileInfo(const QFileDevice &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileInfo</db:methodname>
<db:methodparam>
<db:type>const QFileDevice &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileInfo(const QFileDevice &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about file <db:code role="parameter">file</db:code>.</db:para>
<db:para>If the <db:code role="parameter">file</db:code> has a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-4">
<db:title>[explicit] QFileInfo::QFileInfo(const QDir &amp;<db:emphasis>dir</db:emphasis>, const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileInfo</db:methodname>
<db:methodparam>
<db:type>const QDir &amp;</db:type>
<db:parameter>dir</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileInfo(const QDir &amp;dir, const QString &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about the given <db:code role="parameter">file</db:code> relative to the directory <db:code role="parameter">dir</db:code>.</db:para>
<db:para>If <db:code role="parameter">dir</db:code> has a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:para>If <db:code role="parameter">file</db:code> is an absolute path, then the directory specified by <db:code role="parameter">dir</db:code> will be disregarded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-6">
<db:title>[since 6.0] QFileInfo::QFileInfo(const std::filesystem::path &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileInfo</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileInfo(const std::filesystem::path &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about the given <db:code role="parameter">file</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setFile">setFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">QDir::setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelativePath">QDir::isRelativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFileInfo-7">
<db:title>[since 6.0] QFileInfo::QFileInfo(const QDir &amp;<db:emphasis>dir</db:emphasis>, const std::filesystem::path &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileInfo</db:methodname>
<db:methodparam>
<db:type>const QDir &amp;</db:type>
<db:parameter>dir</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileInfo(const QDir &amp;dir, const std::filesystem::path &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that gives information about the given <db:code role="parameter">file</db:code> relative to the directory <db:code role="parameter">dir</db:code>.</db:para>
<db:para>If <db:code role="parameter">dir</db:code> has a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:para>If <db:code role="parameter">file</db:code> is an absolute path, then the directory specified by <db:code role="parameter">dir</db:code> will be disregarded.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QFileInfo-5">
<db:title>QFileInfo::QFileInfo(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileInfo</db:methodname>
<db:methodparam>
<db:type>const QFileInfo &amp;</db:type>
<db:parameter>fileinfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileInfo(const QFileInfo &amp;fileinfo)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> that is a copy of the given <db:code role="parameter">fileinfo</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFileInfo">
<db:title>QFileInfo::~QFileInfo()</db:title>
<db:destructorsynopsis>
<db:methodname>~QFileInfo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QFileInfo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> and frees its resources.</db:para>
</db:section>
<db:section xml:id="absoluteDir">
<db:title>QDir QFileInfo::absoluteDir() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDir</db:type>
<db:methodname>absoluteDir</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDir absoluteDir() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file's absolute path as a <db:link xlink:href="qdir.xml">QDir</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#dir">dir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="absoluteFilePath">
<db:title>QString QFileInfo::absoluteFilePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>absoluteFilePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString absoluteFilePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an absolute path including the file name.</db:para>
<db:para>The absolute path name consists of the full path and the file name. On Unix this will always begin with the root, '/', directory. On Windows this will always begin 'D:/' where D is a drive letter, except for network shares that are not mapped to a drive letter, in which case the path will begin '//sharename/'. <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will uppercase drive letters. Note that <db:link xlink:href="qdir.xml">QDir</db:link> does not do this. The code snippet below shows this.</db:para>
<db:programlisting language="cpp">    QFileInfo fi(&quot;c:/temp/foo&quot;); =&amp;gt; fi.absoluteFilePath() =&amp;gt; &quot;C:/temp/foo&quot;
</db:programlisting>
<db:para>This function returns the same as <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>(), unless <db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>() is true. In contrast to <db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>(), symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements are not necessarily removed.</db:para>
<db:warning>
<db:para>If <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>() is empty the behavior of this function is undefined.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="absolutePath">
<db:title>QString QFileInfo::absolutePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>absolutePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString absolutePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a file's path absolute path. This doesn't include the file name.</db:para>
<db:para>On Unix the absolute path will always begin with the root, '/', directory. On Windows this will always begin 'D:/' where D is a drive letter, except for network shares that are not mapped to a drive letter, in which case the path will begin '//sharename/'.</db:para>
<db:para>In contrast to <db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>() symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements are not necessarily removed.</db:para>
<db:warning>
<db:para>If <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>() is empty the behavior of this function is undefined.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#path">path</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="baseName">
<db:title>QString QFileInfo::baseName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>baseName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString baseName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the base name of the file without the path.</db:para>
<db:para>The base name consists of all characters in the file up to (but not including) the <db:emphasis>first</db:emphasis> '.' character.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString base = fi.baseName();  // base = &quot;archive&quot;
</db:programlisting>
<db:para>The base name of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeBaseName">completeBaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="birthTime">
<db:title>[since 5.10] QDateTime QFileInfo::birthTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>birthTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime birthTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the date and time when the file was created / born.</db:para>
<db:para>If the file birth time is not available, this function returns an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:para>If the file is a symlink, the time of the target file is returned (not the symlink).</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime">metadataChangeTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bundleName">
<db:title>QString QFileInfo::bundleName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>bundleName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString bundleName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the bundle.</db:para>
<db:para>On macOS and iOS this returns the proper localized name for a bundle if the path <db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>(). On all other platforms an empty <db:link xlink:href="qstring.xml">QString</db:link> is returned.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/Applications/Safari.app&quot;);
QString bundle = fi.bundleName();                // name = &quot;Safari&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="caching">
<db:title>bool QFileInfo::caching() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>caching</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool caching() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if caching is enabled; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setCaching">setCaching</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canonicalFilePath">
<db:title>QString QFileInfo::canonicalFilePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>canonicalFilePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString canonicalFilePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the canonical path including the file name, i.e. an absolute path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</db:para>
<db:para>If the file does not exist, canonicalFilePath() returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#dir">dir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canonicalPath">
<db:title>QString QFileInfo::canonicalPath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>canonicalPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString canonicalPath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file's path canonical path (excluding the file name), i.e. an absolute path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</db:para>
<db:para>If the file does not exist, canonicalPath() returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#path">path</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completeBaseName">
<db:title>QString QFileInfo::completeBaseName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>completeBaseName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString completeBaseName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the complete base name of the file without the path.</db:para>
<db:para>The complete base name consists of all characters in the file up to (but not including) the <db:emphasis>last</db:emphasis> '.' character.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString base = fi.completeBaseName();  // base = &quot;archive.tar&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completeSuffix">
<db:title>QString QFileInfo::completeSuffix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>completeSuffix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString completeSuffix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the complete suffix (extension) of the file.</db:para>
<db:para>The complete suffix consists of all characters in the file after (but not including) the first '.'.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString ext = fi.completeSuffix();  // ext = &quot;tar.gz&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeBaseName">completeBaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dir">
<db:title>QDir QFileInfo::dir() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDir</db:type>
<db:methodname>dir</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDir dir() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the path of the object's parent directory as a <db:link xlink:href="qdir.xml">QDir</db:link> object.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The <db:link xlink:href="qdir.xml">QDir</db:link> returned always corresponds to the object's parent directory, even if the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> represents a directory.</db:para>
<db:para>For each of the following, dir() returns the <db:link xlink:href="qdir.xml">QDir</db:link> &quot;~/examples/191697&quot;.</db:para>
<db:programlisting language="cpp">    QFileInfo fileInfo1(&quot;~/examples/191697/.&quot;);
    QFileInfo fileInfo2(&quot;~/examples/191697/..&quot;);
    QFileInfo fileInfo3(&quot;~/examples/191697/main.cpp&quot;);
</db:programlisting>
<db:para>For each of the following, dir() returns the <db:link xlink:href="qdir.xml">QDir</db:link> &quot;.&quot;.</db:para>
<db:programlisting language="cpp">    QFileInfo fileInfo4(&quot;.&quot;);
    QFileInfo fileInfo5(&quot;..&quot;);
    QFileInfo fileInfo6(&quot;main.cpp&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absoluteDir">absoluteDir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exists">
<db:title>bool QFileInfo::exists() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>exists</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool exists() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the file exists; otherwise returns false.</db:para>
<db:note>
<db:para>If the file is a symlink that points to a non-existing file, false is returned.</db:para>
</db:note>
</db:section>
<db:section xml:id="exists-1">
<db:title>[static, since 5.2] bool QFileInfo::exists(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>exists</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool exists(const QString &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:code role="parameter">file</db:code> exists; otherwise returns false.</db:para>
<db:note>
<db:para>If <db:code role="parameter">file</db:code> is a symlink that points to a non-existing file, false is returned.</db:para>
</db:note>
<db:note>
<db:para>Using this function is faster than using QFileInfo(file).exists() for file system access.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QFileInfo::fileName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the file, excluding the path.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString name = fi.fileName();                // name = &quot;archive.tar.gz&quot;
</db:programlisting>
<db:para>Note that, if this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object is given a path ending in a slash, the name of the file is considered empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#suffix">suffix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filePath">
<db:title>QString QFileInfo::filePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>filePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString filePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file name, including the path (which may be absolute or relative).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileTime">
<db:title>[since 5.10] QDateTime QFileInfo::fileTime(QFile::FileTime <db:emphasis>time</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fileTime</db:methodname>
<db:methodparam>
<db:type>QFile::FileTime</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fileTime(QFile::FileTime time) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file time specified by <db:code role="parameter">time</db:code>. If the time cannot be determined, an invalid date time is returned.</db:para>
<db:para>If the file is a symlink, the time of the target file is returned (not the symlink).</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledevice.xml#FileTime-enum">QFile::FileTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml#isValid">QDateTime::isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemAbsoluteFilePath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemAbsoluteFilePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemAbsoluteFilePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemAbsoluteFilePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemAbsolutePath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemAbsolutePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemAbsolutePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemAbsolutePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemCanonicalFilePath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemCanonicalFilePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemCanonicalFilePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemCanonicalFilePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemCanonicalPath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemCanonicalPath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemCanonicalPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemCanonicalPath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemFilePath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemFilePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemFilePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemFilePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemPath">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemPath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemPath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#path">path</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#path">path</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemSymLinkTarget">
<db:title>[since 6.0] std::filesystem::path QFileInfo::filesystemSymLinkTarget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemSymLinkTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemSymLinkTarget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>() as a std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="group">
<db:title>QString QFileInfo::group() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>group</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString group() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the group of the file. On Windows, on systems where files do not have groups, or if an error occurs, an empty string is returned.</db:para>
<db:para>This function can be time consuming under Unix (in the order of milliseconds).</db:para>
<db:para>If the file is a symlink, this function returns the owning group of the target (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#owner">owner</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="groupId">
<db:title>uint QFileInfo::groupId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>uint</db:type>
<db:methodname>groupId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint groupId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the id of the group the file belongs to.</db:para>
<db:para>On Windows and on systems where files do not have groups this function always returns (uint) -2.</db:para>
<db:para>If the file is a symlink, this function returns the id of the group owning the target (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#owner">owner</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAbsolute">
<db:title>bool QFileInfo::isAbsolute() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAbsolute</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAbsolute() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the file path is absolute, otherwise returns false (i.e. the path is relative).</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBundle">
<db:title>bool QFileInfo::isBundle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBundle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBundle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object points to a bundle or to a symbolic link to a bundle on macOS and iOS; otherwise returns false.</db:para>
<db:para>If the file is a symlink, this function returns true if the target is a bundle (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDir">
<db:title>bool QFileInfo::isDir() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDir</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDir() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object points to a directory or to a symbolic link to a directory; otherwise returns false.</db:para>
<db:para>If the file is a symlink, this function returns true if the target is a directory (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isExecutable">
<db:title>bool QFileInfo::isExecutable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isExecutable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isExecutable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the file is executable; otherwise returns false.</db:para>
<db:para>If the file is a symlink, this function returns true if the target is executable (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#permission">permission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFile">
<db:title>bool QFileInfo::isFile() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFile() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object points to a file or to a symbolic link to a file. Returns false if the object points to something which isn't a file, such as a directory.</db:para>
<db:para>If the file is a symlink, this function returns true if the target is a regular file (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isBundle">isBundle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isHidden">
<db:title>bool QFileInfo::isHidden() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isHidden</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isHidden() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this is a `hidden' file; otherwise returns false.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This function returns true for the special entries &quot;.&quot; and &quot;..&quot; on Unix, even though <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link> threats them as shown. And note that, since this function inspects the file name, on Unix it will inspect the name of the symlink, if this file is a symlink, not the target's name.</db:para>
<db:para>On Windows, this function returns true if the target file is hidden (not the symlink).</db:para>
</db:section>
<db:section xml:id="isJunction">
<db:title>[since 5.15] bool QFileInfo::isJunction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isJunction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isJunction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the object points to a junction; otherwise returns false.</db:para>
<db:para>Junctions only exist on Windows' NTFS file system, and are typically created by the mklink command. They can be thought of as symlinks for directories, and can only be created for absolute paths on the local volume.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="isNativePath">
<db:title>[since 5.0] bool QFileInfo::isNativePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNativePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNativePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the file path can be used directly with native APIs. Returns false if the file is otherwise supported by a virtual file system inside Qt, such as <db:link xlink:href="resources.xml">the Qt Resource System</db:link>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Native paths may still require conversion of path separators and character encoding, depending on platform and input requirements of the native API.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#toNativeSeparators">QDir::toNativeSeparators</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#encodeName">QFile::encodeName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalFilePath">canonicalFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadable">
<db:title>bool QFileInfo::isReadable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReadable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReadable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the user can read the file; otherwise returns false.</db:para>
<db:para>If the file is a symlink, this function returns true if the target is readable (not the symlink).</db:para>
<db:note>
<db:para>If the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled, the result on Windows will merely reflect whether the file exists.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#permission">permission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRelative">
<db:title>bool QFileInfo::isRelative() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isRelative</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isRelative() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the file path is relative, otherwise returns false (i.e. the path is absolute). (E.g. under Unix a path is absolute if it begins with a &quot;/&quot;).</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isAbsolute">isAbsolute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRoot">
<db:title>bool QFileInfo::isRoot() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isRoot</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isRoot() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the object points to a directory or to a symbolic link to a directory, and that directory is the root directory; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isShortcut">
<db:title>bool QFileInfo::isShortcut() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isShortcut</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isShortcut() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object points to a shortcut; otherwise returns false.</db:para>
<db:para>Shortcuts only exist on Windows and are typically .lnk files. For instance, true will be returned for shortcuts (*.lnk files) on Windows, but false will be returned on Unix (including macOS and iOS).</db:para>
<db:para>The shortcut (.lnk) files are treated as regular files. Opening those will open the .lnk file itself. In order to open the file a shortcut references to, it must uses <db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>() on a shortcut.</db:para>
<db:note>
<db:para>Even if a shortcut (broken shortcut) points to a non existing file, isShortcut() returns true.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymbolicLink">isSymbolicLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSymLink">
<db:title>bool QFileInfo::isSymLink() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSymLink</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSymLink() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object points to a symbolic link or shortcut; otherwise returns false.</db:para>
<db:para>Symbolic links exist on Unix (including macOS and iOS) and Windows and are typically created by the ln -s or mklink commands, respectively. Opening a symbolic link effectively opens the <db:link xlink:href="qfileinfo.xml#symLinkTarget">link's target</db:link>.</db:para>
<db:para>In addition, true will be returned for shortcuts (*.lnk files) on Windows. This behavior is deprecated and will likely change in a future version of Qt. Opening those will open the .lnk file itself.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo info(fileName);
if (info.isSymLink())
    fileName = info.symLinkTarget();
</db:programlisting>
<db:note>
<db:para>If the symlink points to a non existing file, <db:link xlink:href="qfileinfo.xml#exists">exists</db:link>() returns false.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSymbolicLink">
<db:title>bool QFileInfo::isSymbolicLink() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSymbolicLink</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSymbolicLink() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object points to a symbolic link; otherwise returns false.</db:para>
<db:para>Symbolic links exist on Unix (including macOS and iOS) and Windows (NTFS-symlink) and are typically created by the ln -s or mklink commands, respectively.</db:para>
<db:para>Unix handles symlinks transparently. Opening a symbolic link effectively opens the <db:link xlink:href="qfileinfo.xml#symLinkTarget">link's target</db:link>.</db:para>
<db:para>In contrast to <db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>(), false will be returned for shortcuts (*.lnk files) on Windows. Use <db:link xlink:href="qfileinfo.xml#isShortcut">QFileInfo::isShortcut</db:link>() instead.</db:para>
<db:note>
<db:para>If the symlink points to a non existing file, <db:link xlink:href="qfileinfo.xml#exists">exists</db:link>() returns false.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isShortcut">isShortcut</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isWritable">
<db:title>bool QFileInfo::isWritable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWritable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWritable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the user can write to the file; otherwise returns false.</db:para>
<db:para>If the file is a symlink, this function returns true if the target is writeable (not the symlink).</db:para>
<db:note>
<db:para>If the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled, the result on Windows will merely reflect whether the file is marked as Read Only.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#permission">permission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastModified">
<db:title>QDateTime QFileInfo::lastModified() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>lastModified</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime lastModified() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the date and local time when the file was last modified.</db:para>
<db:para>If the file is a symlink, the time of the target file is returned (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime">birthTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime">metadataChangeTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime">fileTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastRead">
<db:title>QDateTime QFileInfo::lastRead() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>lastRead</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime lastRead() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the date and local time when the file was last read (accessed).</db:para>
<db:para>On platforms where this information is not available, returns the same as <db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>().</db:para>
<db:para>If the file is a symlink, the time of the target file is returned (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#birthTime">birthTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#metadataChangeTime">metadataChangeTime</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileTime">fileTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="makeAbsolute">
<db:title>bool QFileInfo::makeAbsolute()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>makeAbsolute</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool makeAbsolute()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the file's path to an absolute path if it is not already in that form. Returns true to indicate that the path was converted; otherwise returns false to indicate that the path was already absolute.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metadataChangeTime">
<db:title>[since 5.10] QDateTime QFileInfo::metadataChangeTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>metadataChangeTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime metadataChangeTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the date and time when the file metadata was changed. A metadata change occurs when the file is created, but it also occurs whenever the user writes or sets inode information (for example, changing the file permissions).</db:para>
<db:para>If the file is a symlink, the time of the target file is returned (not the symlink).</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#lastModified">lastModified</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#lastRead">lastRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="owner">
<db:title>QString QFileInfo::owner() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>owner</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString owner() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the owner of the file. On systems where files do not have owners, or if an error occurs, an empty string is returned.</db:para>
<db:para>This function can be time consuming under Unix (in the order of milliseconds). On Windows, it will return an empty string unless the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has been enabled.</db:para>
<db:para>If the file is a symlink, this function returns the owner of the target (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#ownerId">ownerId</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ownerId">
<db:title>uint QFileInfo::ownerId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>uint</db:type>
<db:methodname>ownerId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint ownerId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the id of the owner of the file.</db:para>
<db:para>On Windows and on systems where files do not have owners this function returns ((uint) -2).</db:para>
<db:para>If the file is a symlink, this function returns the id of the owner of the target (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#owner">owner</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#groupId">groupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="path">
<db:title>QString QFileInfo::path() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>path</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString path() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file's path. This doesn't include the file name.</db:para>
<db:para>Note that, if this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object is given a path ending in a slash, the name of the file is considered empty and this function will return the entire path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#canonicalPath">canonicalPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#dir">dir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permission">
<db:title>bool QFileInfo::permission(QFile::Permissions <db:emphasis>permissions</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>permission</db:methodname>
<db:methodparam>
<db:type>QFile::Permissions</db:type>
<db:parameter>permissions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool permission(QFile::Permissions permissions) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Tests for file permissions. The <db:code role="parameter">permissions</db:code> argument can be several flags of type QFile::Permissions OR-ed together to check for permission combinations.</db:para>
<db:para>On systems where files do not have permissions this function always returns true.</db:para>
<db:note>
<db:para>The result might be inaccurate on Windows if the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
if (fi.permission(QFile::WriteUser | QFile::ReadGroup))
    qWarning(&quot;I can change the file; my group can read the file&quot;);
if (fi.permission(QFile::WriteGroup | QFile::WriteOther))
    qWarning(&quot;The group or others can change the file&quot;);
</db:programlisting>
<db:para>If the file is a symlink, this function checks the permissions of the target (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isExecutable">isExecutable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permissions">
<db:title>QFile::Permissions QFileInfo::permissions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFile::Permissions</db:type>
<db:methodname>permissions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFile::Permissions permissions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the complete OR-ed together combination of QFile::Permissions for the file.</db:para>
<db:note>
<db:para>The result might be inaccurate on Windows if the <db:link xlink:href="qfileinfo.xml#ntfs-permissions">NTFS permissions</db:link> check has not been enabled.</db:para>
</db:note>
<db:para>If the file is a symlink, this function returns the permissions of the target (not the symlink).</db:para>
</db:section>
<db:section xml:id="refresh">
<db:title>void QFileInfo::refresh()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>refresh</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void refresh()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Refreshes the information about the file, i.e. reads in information from the file system the next time a cached property is fetched.</db:para>
</db:section>
<db:section xml:id="setCaching">
<db:title>void QFileInfo::setCaching(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCaching</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCaching(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true, enables caching of file information. If <db:code role="parameter">enable</db:code> is false caching is disabled.</db:para>
<db:para>When caching is enabled, <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> reads the file information from the file system the first time it's needed, but generally not later.</db:para>
<db:para>Caching is enabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#caching">caching</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile">
<db:title>void QFileInfo::setFile(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFile(const QString &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">file</db:code>.</db:para>
<db:para>The <db:code role="parameter">file</db:code> can also include an absolute or relative file path. Absolute paths begin with the directory separator (e.g. &quot;/&quot; under Unix) or a drive specification (under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString absolute = &quot;/local/bin&quot;;
QString relative = &quot;local/bin&quot;;
QFileInfo absFile(absolute);
QFileInfo relFile(relative);

QDir::setCurrent(QDir::rootPath());
// absFile and relFile now point to the same file

QDir::setCurrent(&quot;/tmp&quot;);
// absFile now points to &quot;/local/bin&quot;,
// while relFile points to &quot;/tmp/local/bin&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">QDir::setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelativePath">QDir::isRelativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile-1">
<db:title>void QFileInfo::setFile(const QFileDevice &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFile</db:methodname>
<db:methodparam>
<db:type>const QFileDevice &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFile(const QFileDevice &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">file</db:code>.</db:para>
<db:para>If <db:code role="parameter">file</db:code> includes a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile-2">
<db:title>void QFileInfo::setFile(const QDir &amp;<db:emphasis>dir</db:emphasis>, const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFile</db:methodname>
<db:methodparam>
<db:type>const QDir &amp;</db:type>
<db:parameter>dir</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFile(const QDir &amp;dir, const QString &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">file</db:code> in directory <db:code role="parameter">dir</db:code>.</db:para>
<db:para>If <db:code role="parameter">file</db:code> includes a relative path, the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> will also have a relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isRelative">isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFile-3">
<db:title>[since 6.0] void QFileInfo::setFile(const std::filesystem::path &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFile</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFile(const std::filesystem::path &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the file that the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> provides information about to <db:code role="parameter">file</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>qint64 QFileInfo::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file size in bytes. If the file does not exist or cannot be fetched, 0 is returned.</db:para>
<db:para>If the file is a symlink, the size of the target file is returned (not the symlink).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stat">
<db:title>[since 6.0] void QFileInfo::stat()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads all attributes from the file system.</db:para>
<db:para>This is useful when information about the file system is collected in a worker thread, and then passed to the UI in the form of caching <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> instances.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#setCaching">setCaching</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#refresh">refresh</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="suffix">
<db:title>QString QFileInfo::suffix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>suffix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString suffix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the suffix (extension) of the file.</db:para>
<db:para>The suffix consists of all characters in the file after (but not including) the last '.'.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
QString ext = fi.suffix();  // ext = &quot;gz&quot;
</db:programlisting>
<db:para>The suffix of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeSuffix">completeSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#baseName">baseName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#completeBaseName">completeBaseName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QFileInfo::swap(QFileInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QFileInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QFileInfo &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this file info with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="symLinkTarget">
<db:title>QString QFileInfo::symLinkTarget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>symLinkTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString symLinkTarget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the absolute path to the file or directory a symbolic link points to, or an empty string if the object isn't a symbolic link.</db:para>
<db:para>This name may not represent an existing file; it is only a string. <db:link xlink:href="qfileinfo.xml#exists">QFileInfo::exists</db:link>() returns true if the symlink points to an existing file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#exists">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isSymLink">isSymLink</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isDir">isDir</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QFileInfo::operator!=(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QFileInfo &amp;</db:type>
<db:parameter>fileinfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QFileInfo &amp;fileinfo) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object refers to a different file than the one specified by <db:code role="parameter">fileinfo</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QFileInfo &amp;QFileInfo::operator=(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFileInfo &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QFileInfo &amp;</db:type>
<db:parameter>fileinfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileInfo &amp; operator=(const QFileInfo &amp;fileinfo)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes a copy of the given <db:code role="parameter">fileinfo</db:code> and assigns it to this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.2] QFileInfo &amp;QFileInfo::operator=(QFileInfo &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFileInfo &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QFileInfo &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileInfo &amp; operator=(QFileInfo &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QFileInfo::operator==(const QFileInfo &amp;<db:emphasis>fileinfo</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QFileInfo &amp;</db:type>
<db:parameter>fileinfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QFileInfo &amp;fileinfo) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object refers to a file in the same location as <db:code role="parameter">fileinfo</db:code>; otherwise returns false.</db:para>
<db:para>Note that the result of comparing two empty <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects, containing no file references (file paths that do not exist or are empty), is undefined.</db:para>
<db:warning>
<db:para>This will not compare two different symbolic links pointing to the same file.</db:para>
</db:warning>
<db:warning>
<db:para>Long and short file names that refer to the same file on Windows are treated as if they referred to different files.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QFileInfoList-typedef">
<db:title>QFileInfoList</db:title>
<db:typedefsynopsis>
<db:typedefname>QFileInfoList</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>&gt;.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QT_IMPLICIT_QFILEINFO_CONSTRUCTION">
<db:title>[since 6.0] QT_IMPLICIT_QFILEINFO_CONSTRUCTION</db:title>
<db:methodsynopsis>
<db:methodname>QT_IMPLICIT_QFILEINFO_CONSTRUCTION</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT_IMPLICIT_QFILEINFO_CONSTRUCTION</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Defining this macro makes most <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> constructors implicit instead of explicit. Since construction of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects is expensive, one should avoid accidentally creating them, especially if cheaper alternatives exist. For instance:</db:para>
<db:programlisting language="cpp" role="bad">QDirIterator it(dir);
while (it.hasNext()) {
    // Implicit conversion from QString (returned by it.next()):
    // may create unnecessary data strucutres and cause additional
    // accesses to the file system. Unless this macro is defined,
    // this line does not compile.

    QFileInfo fi = it.next();

    ~~~
}

</db:programlisting>
<db:para>Instead, use the right API:</db:para>
<db:programlisting language="cpp">QDirIterator it(dir);
while (it.hasNext()) {
    it.next();

    // Extract the QFileInfo from the iterator directly:
    QFileInfo fi = it.fileInfo();

    ~~~
}
</db:programlisting>
<db:para>Construction from <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qfile.xml">QFile</db:link>, and so on is always possible by using direct initialization instead of copy initialization:</db:para>
<db:programlisting language="cpp">QFileInfo fi1 = some_string; // Does not compile unless this macro is defined
QFileInfo fi2(some_string);  // OK
QFileInfo fi3{some_string};  // Possibly better, avoids the risk of the Most Vexing Parse
auto fi4 = QFileInfo(some_string); // OK
</db:programlisting>
<db:para>This macro is provided for compatibility reason. Its usage is not recommended in new code.</db:para>
<db:para>This macro was introduced in Qt 6.0.</db:para>
</db:section>
</db:section>
</db:article>
