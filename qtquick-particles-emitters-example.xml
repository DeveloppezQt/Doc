<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Particles Examples - Emitters</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of examples using Emitters in the QML particle system.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-emitters-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This is a collection of small QML examples relating to using Emitters in the particle system. Each example is a small QML file emphasizing a particular type or feature.</db:para>
<db:para>Velocity from motion gives the effect of strong particle motion through primarily moving the emitters:</db:para>
<db:programlisting language="qml">Emitter {
    id: trailsNormal
    system: sys1

    emitRate: 500
    lifeSpan: 2000

    y: mouseArea.pressed ? mouseArea.mouseY : circle.cy
    x: mouseArea.pressed ? mouseArea.mouseX : circle.cx

    velocity: PointDirection {xVariation: 4; yVariation: 4;}
    acceleration: PointDirection {xVariation: 10; yVariation: 10;}
    velocityFromMovement: 8

    size: 8
    sizeVariation: 4
}
</db:programlisting>
<db:para>Burst and pulse calls the burst and pulse methods on two idential emitters.</db:para>
<db:programlisting language="qml">    if (root.lastWasPulse) {
        burstEmitter.burst(500);
        root.lastWasPulse = false;
    } else {
        pulseEmitter.pulse(500);
        root.lastWasPulse = true;
    }
</db:programlisting>
<db:para>Note how burst takes an argument of number of particles to emit, and pulse takes an argument of number of milliseconds to emit for. This gives a slightly different behaviour, which is easy to see in this example.</db:para>
<db:para>Custom Emitter connects to the emitParticles signal to set arbitrary values on particle data as they're emitted;</db:para>
<db:programlisting language="qml">onEmitParticles: (particles) =&amp;gt; {
    for (var i=0; i&amp;lt;particles.length; i++) {
        let particle = particles[i];
        particle.startSize = Math.max(02,Math.min(492,Math.tan(particle.t/2)*24));
        let theta = Math.floor(Math.random() * 6.0);
        particle.red = theta == 0 || theta == 1 || theta == 2 ? 0.2 : 1;
        particle.green = theta == 2 || theta == 3 || theta == 4 ? 0.2 : 1;
        particle.blue = theta == 4 || theta == 5 || theta == 0 ? 0.2 : 1;
        theta /= 6.0;
        theta *= 2.0*Math.PI;
        theta += sys.convert(sys.petalRotation);//Convert from degrees to radians
        particle.initialVX = sys.petalLength * Math.cos(theta);
        particle.initialVY = sys.petalLength * Math.sin(theta);
        particle.initialAX = particle.initialVX * -0.5;
        particle.initialAY = particle.initialVY * -0.5;
    }
}
</db:programlisting>
<db:para>This is used to emit curving particles in six rotating spokes.</db:para>
<db:para>Emit mask sets an image mask on the Emitter, to emit out of an arbitrary shape.</db:para>
<db:programlisting language="qml">shape: MaskShape {
    source: &quot;images/starfish_mask.png&quot;
}
</db:programlisting>
<db:para>Maximum emitted emits no more than a certain number of particles at a time. This example makes it easy to see what happens when the limit is reached.</db:para>
<db:para>Shape and Direction emits particles out of an unfilled Ellipse shape, using a <db:link xlink:href="qml-qtquick-particles-targetdirection.xml">TargetDirection</db:link></db:para>
<db:programlisting language="qml">shape: EllipseShape {fill: false}
velocity: TargetDirection {
    targetX: root.width/2
    targetY: root.height/2
    proportionalMagnitude: true
    magnitude: 0.5
}
</db:programlisting>
<db:para>This sends the particles towards the center of the ellipse with proportional speed, keeping the ellipse outline as they move to the center.</db:para>
<db:para><db:link xlink:href="qml-qtquick-particles-trailemitter.xml">TrailEmitter</db:link> uses that type to add smoke particles to trail the fire particles in the scene.</db:para>
<db:programlisting language="qml">onEmitParticles: (particles) =&amp;gt; {
    for (var i=0; i&amp;lt;particles.length; i++) {
        let particle = particles[i];
        particle.startSize = Math.max(02,Math.min(492,Math.tan(particle.t/2)*24));
        let theta = Math.floor(Math.random() * 6.0);
        particle.red = theta == 0 || theta == 1 || theta == 2 ? 0.2 : 1;
        particle.green = theta == 2 || theta == 3 || theta == 4 ? 0.2 : 1;
        particle.blue = theta == 4 || theta == 5 || theta == 0 ? 0.2 : 1;
        theta /= 6.0;
        theta *= 2.0*Math.PI;
        theta += sys.convert(sys.petalRotation);//Convert from degrees to radians
        particle.initialVX = sys.petalLength * Math.cos(theta);
        particle.initialVY = sys.petalLength * Math.sin(theta);
        particle.initialAX = particle.initialVX * -0.5;
        particle.initialAY = particle.initialVY * -0.5;
    }
}
</db:programlisting>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/particles/emitters?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
