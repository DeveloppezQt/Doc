<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Notifications Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to pass HTML5 web notifications to users.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/notifications-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>WebEngine Notifications</db:emphasis> demonstrates how to use the <db:link xlink:href="qwebengineprofile.xml#setNotificationPresenter">QWebEngineProfile::setNotificationPresenter</db:link>() method and <db:link xlink:href="qwebenginenotification.xml">QWebEngineNotification</db:link> class to show an HTML5 web notification to the user.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="html-page">
<db:title>HTML Page</db:title>
<db:para>In this example, we create an internal HTML page that is added through a resource collection file (.qrc). The page displays buttons for requesting permissions and contains necessary JavaScript code to trigger this request:</db:para>
<db:programlisting language="cpp">            Notification.requestPermission().then(function (permission) {
                if (permission == 'granted')
                    createNotification()
            })
</db:programlisting>
<db:para>Also page contains a button for creating a notification. The following JavaScript constructions are executed on the press event:</db:para>
<db:programlisting language="cpp">    function createNotification() {
        let title = 'Notification #' + ++notificationsCreated
        let options = { body: 'Visit doc.qt.io for more info!', icon: 'icon.png', }

        let notification = new Notification(title, options)
    }
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title>Main Function</db:title>
<db:para>In the <db:code>main</db:code> function, we instantiate a <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>, load our internal HTML page, and set up the required callbacks for notifications handling.</db:para>
<db:section xml:id="requesting-feature-permissions">
<db:title>Requesting Feature Permissions</db:title>
<db:para>We then use the <db:link xlink:href="qwebenginepage.xml#featurePermissionRequested">QWebEnginePage::featurePermissionRequested</db:link>() call to request the user's permission to show notifications on their device.</db:para>
<db:programlisting language="cpp">    QObject::connect(view.page(), &amp;amp;QWebEnginePage::featurePermissionRequested,
                     [&amp;amp;] (const QUrl &amp;amp;origin, QWebEnginePage::Feature feature) {
                         if (feature != QWebEnginePage::Notifications)
                             return;
                         view.page()-&amp;gt;setFeaturePermission(origin, feature, QWebEnginePage::PermissionGrantedByUser);
                     });
</db:programlisting>
</db:section>
<db:section xml:id="handling-new-notifications">
<db:title>Handling New Notifications</db:title>
<db:para>We then construct a <db:code>NotificationPopup</db:code> that encapsulates the data of the HTML web notification. We also use the <db:link xlink:href="qwebengineprofile.xml#setNotificationPresenter">QWebEngineProfile::setNotificationPresenter</db:link>() call to set our handler, which we use in conjunction with our <db:code>popup</db:code> to handle all new notifications.</db:para>
<db:programlisting language="cpp">    auto popup = new NotificationPopup(&amp;amp;view);
    profile-&amp;gt;setNotificationPresenter([&amp;amp;] (std::unique_ptr&amp;lt;QWebEngineNotification&amp;gt; notification)
                                      { popup-&amp;gt;present(notification); });
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="presenting-notifications-to-users">
<db:title>Presenting Notifications to Users</db:title>
<db:para>The <db:code>NotificationPopup</db:code> class in this example is a simple <db:link xlink:href="qwidget.xml">QWidget</db:link>-based class that uses multiple <db:link xlink:href="qlabel.xml">QLabel</db:link> instances for displaying the notification's title, message, and icon.</db:para>
<db:programlisting language="cpp">class NotificationPopup : public QWidget
{
    Q_OBJECT

    QLabel m_icon, m_title, m_message;
    std::unique_ptr&amp;lt;QWebEngineNotification&amp;gt; notification;
</db:programlisting>
<db:section xml:id="presenting-notifications">
<db:title>Presenting Notifications</db:title>
<db:para>Inside the <db:code>present</db:code> method, we first close and release the previous notification if we have one and then take ownership of a new notification by calling the <db:code>std::unique_ptr::swap</db:code> method on our internal notification instance.</db:para>
<db:programlisting language="cpp">    void present(std::unique_ptr&amp;lt;QWebEngineNotification&amp;gt; &amp;amp;newNotification)
    {
        if (notification) {
            notification-&amp;gt;close();
            notification.reset();
        }

        notification.swap(newNotification);
</db:programlisting>
<db:para>Then we query the notification instance for a title, a message, and an icon by calling <db:link xlink:href="qwebenginenotification.xml#title-prop">QWebEngineNotification::title</db:link>(), <db:link xlink:href="qwebenginenotification.xml#message-prop">QWebEngineNotification::message</db:link>(), <db:link xlink:href="qwebenginenotification.xml#icon">QWebEngineNotification::icon</db:link>() and set up the appropriate labels in our popup.</db:para>
<db:programlisting language="cpp">        m_title.setText(&quot;&amp;lt;b&amp;gt;&quot; + notification-&amp;gt;title() + &quot;&amp;lt;/b&amp;gt;&quot;);
        m_message.setText(notification-&amp;gt;message());
        m_icon.setPixmap(QPixmap::fromImage(notification-&amp;gt;icon()).scaledToHeight(m_icon.height()));
</db:programlisting>
<db:para>After that we are ready to display our notification to the user by calling the <db:link xlink:href="qwidget.xml#show">QWidget::show</db:link>() method. On this step we also call the <db:link xlink:href="qwebenginenotification.xml#show">QWebEngineNotification::show</db:link>() method to notify <db:code>JavaScript</db:code> code about our <db:emphasis>show</db:emphasis> event.</db:para>
<db:programlisting language="cpp">        show();
        notification-&amp;gt;show();
</db:programlisting>
<db:para>Finally, we set up a callback to handle the <db:emphasis>close</db:emphasis> event from the <db:code>JavaScript</db:code> side by connecting to the <db:link xlink:href="qwebenginenotification.xml#closed">QWebEngineNotification::closed</db:link>() signal. We also schedule a timer event to close our active notification automatically.</db:para>
<db:programlisting language="cpp">        connect(notification.get(), &amp;amp;QWebEngineNotification::closed, this, &amp;amp;NotificationPopup::onClosed);
        QTimer::singleShot(10000, notification.get(), [&amp;amp;] () { onClosed(); });

    }
</db:programlisting>
</db:section>
<db:section xml:id="closing-active-notification">
<db:title>Closing Active Notification</db:title>
<db:para>We execute the <db:emphasis>close</db:emphasis> step for the currently active notification either by timeout or by handling the <db:code>JavaScript</db:code> event. First, we hide the popup widget itself by calling <db:link xlink:href="qwidget.xml#hide">QWidget::hide</db:link>(). Then, we notify the <db:code>JavaScript</db:code> code by calling the <db:link xlink:href="qwebenginenotification.xml#close">QWebEngineNotification::close</db:link>() method. Finally, we destroy the notification object through the <db:code>std::unique_ptr::reset()</db:code> method.</db:para>
<db:programlisting language="cpp">    void onClosed()
    {
        hide();
        notification-&amp;gt;close();
        notification.reset();
    }
</db:programlisting>
</db:section>
<db:section xml:id="implementing-user-interaction">
<db:title>Implementing User Interaction</db:title>
<db:para>To implement the <db:emphasis>click</db:emphasis> step for a notification, we handle mouse interaction through <db:link xlink:href="qwidget.xml#mouseReleaseEvent">QWidget::mouseReleaseEvent</db:link>(). On this event, the <db:code>JavaScript</db:code> code is notified by calling the <db:link xlink:href="qwebenginenotification.xml#click">QWebEngineNotification::click</db:link>() method. Then we automatically perform the <db:emphasis>close</db:emphasis> step as a notification is considered fully handled and no longer needed, and therefore can be destroyed.</db:para>
<db:programlisting language="cpp">    void mouseReleaseEvent(QMouseEvent *event) override
    {
        QWidget::mouseReleaseEvent(event);
        if (notification &amp;amp;&amp;amp; event-&amp;gt;button() == Qt::LeftButton) {
            notification-&amp;gt;click();
            onClosed();
        }
    }
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebengine.git/tree/examples/webenginewidgets/notifications?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
