<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Dialog QML Type</db:title>
<db:productname>QtQuickDialogs</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Dialogs Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A generic <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> dialog wrapper with standard buttons.</db:para>
<db:para>This type was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Dialogs 1.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Dialog is part of <db:simplelist><db:member>qtquickdialogs</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The purpose of Dialog is to wrap arbitrary content into a <db:emphasis>dialog window</db:emphasis> including a row of platform-tailored buttons.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#contentItem-prop">contentItem</db:link> is the default property (the only allowed child element), and items declared inside the Dialog will actually be children of another Item inside the <db:code>contentItem</db:code>. The row of <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#standardButtons-prop">standardButtons</db:link> will also be inside <db:code>contentItem</db:code> below the declared content, and Dialog will attempt to size itself to fit the content and the buttons.</db:para>
<db:para>Alternatively it is possible to bind <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#contentItem-prop">contentItem</db:link> to a custom Item, in which case there will be no buttons, no margins, and the custom content will fill the whole dialog. This is much like creating a <db:link xlink:href="qml-qtquick-window-window.xml">Window</db:link>, except that on platforms which do not support showing multiple windows, the window borders will be simulated and it will be shown in same scene.</db:para>
<db:note>
<db:para>do not attempt to bind the width or height of the dialog to the width or height of its content, because Dialog already tries to size itself to the content. If your goal is to change or eliminate the margins, you must override <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#contentItem-prop">contentItem</db:link>. If your goal is simply to show a window (whether modal or not), and your platform supports it, it is simpler to use <db:link xlink:href="qml-qtquick-window-window.xml">Window</db:link> instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="clickedButton-prop">
<db:title>[read-only] clickedButton : StandardButton</db:title>
<db:fieldsynopsis>
<db:type>StandardButton</db:type>
<db:varname>clickedButton</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the button pressed by the user. Its value is one of the flags set for the <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#standardButtons-prop">standardButtons</db:link> property.</db:para>
</db:section>
<db:section xml:id="contentItem-prop">
<db:title>contentItem : QObject</db:title>
<db:fieldsynopsis>
<db:type>QObject</db:type>
<db:varname>contentItem</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The QML object which implements the dialog contents. Should be an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>.</db:para>
<db:para>For example the following dialog will show custom content and no buttons:</db:para>
<db:programlisting language="qml">import QtQuick 2.3
import QtQuick.Controls 1.2
import QtQuick.Dialogs 1.2

Dialog {
    visible: true
    title: &quot;Blue sky dialog&quot;

    contentItem: Rectangle {
        color: &quot;lightskyblue&quot;
        implicitWidth: 400
        implicitHeight: 100
        Text {
            text: &quot;Hello blue sky!&quot;
            color: &quot;navy&quot;
            anchors.centerIn: parent
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="modality-prop">
<db:title>modality : Qt::WindowModality</db:title>
<db:fieldsynopsis>
<db:type>Qt::WindowModality</db:type>
<db:varname>modality</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the dialog should be shown modal with respect to the window containing the dialog's parent Item, modal with respect to the whole application, or non-modal.</db:para>
<db:para>By default it is <db:code>Qt.WindowModal</db:code>.</db:para>
<db:para>Modality does not mean that there are any blocking calls to wait for the dialog to be accepted or rejected: only that the user will be prevented from interacting with the parent window or the application windows until the dialog is dismissed.</db:para>
</db:section>
<db:section xml:id="standardButtons-prop">
<db:title>standardButtons : StandardButtons</db:title>
<db:fieldsynopsis>
<db:type>StandardButtons</db:type>
<db:varname>standardButtons</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Dialog has a row of buttons along the bottom, each of which has a <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ButtonRole</db:link> that determines which signal will be emitted when the button is pressed. You can also find out which specific button was pressed after the fact via the <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#clickedButton-prop">clickedButton</db:link> property. You can control which buttons are available by setting standardButtons to a bitwise-or combination of the following flags:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>StandardButton.Ok</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">OK</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Open</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">Open</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Save</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Save</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Cancel</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Cancel</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">RejectRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Close</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Close</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">RejectRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Discard</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Discard</db:emphasis> or <db:emphasis role="bold">Don't Save</db:emphasis> button, depending on the platform, defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">DestructiveRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Apply</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">Apply</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ApplyRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Reset</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Reset</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ResetRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.RestoreDefaults</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Restore Defaults</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ResetRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Help</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Help</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">HelpRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.SaveAll</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Save All</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Yes</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Yes</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">YesRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.YesToAll</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Yes to All</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">YesRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.No</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">No</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">NoRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.NoToAll</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">No to All</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">NoRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Abort</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">Abort</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">RejectRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Retry</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Retry</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Ignore</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">Ignore</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example the following dialog will show a calendar with the ability to save or cancel a date:</db:para>
<db:programlisting language="qml">import QtQuick 2.3
import QtQuick.Controls 1.2
import QtQuick.Dialogs 1.2

Dialog {
    id: dateDialog
    visible: true
    title: &quot;Choose a date&quot;
    standardButtons: StandardButton.Save | StandardButton.Cancel

    onAccepted: console.log(&quot;Saving the date &quot; +
        calendar.selectedDate.toLocaleDateString())

    Calendar {
        id: calendar
        onDoubleClicked: dateDialog.click(StandardButton.Save)
    }
}
</db:programlisting>
<db:para>The default is <db:code>StandardButton.Ok</db:code>.</db:para>
<db:para>The enum values are the same as in <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::StandardButtons</db:link>.</db:para>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>title</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The title of the dialog window.</db:para>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>visible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the dialog is visible. By default this is <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-dialog.xml#modality-prop">modality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="accepted-signal">
<db:title>accepted()</db:title>
<db:para>This signal is emitted when the user has pressed any button which has the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>: <db:emphasis role="bold">OK</db:emphasis>, <db:emphasis role="bold">Open</db:emphasis>, <db:emphasis role="bold">Save</db:emphasis>, <db:emphasis role="bold">Save All</db:emphasis>, <db:emphasis role="bold">Retry</db:emphasis> or <db:emphasis role="bold">Ignore</db:emphasis>.</db:para>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="actionChosen-signal">
<db:title>[since QtQuick.Controls 1.8] actionChosen(var <db:emphasis>action</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user has pressed any button or a key associated with some role (such as the Enter or Escape keys). The <db:code role="parameter">action</db:code> parameter carries information about the event:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>StandardButton button - The role of the button which was pressed. If a key was pressed instead, this will be <db:code>StandardButton.Ok</db:code> if accepted and <db:code>StandardButton.Cancel</db:code> if rejected.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.Key key - The key which was pressed, or <db:code>0</db:code> if none</db:para>
</db:listitem>
<db:listitem>
<db:para>bool accepted - Set this to <db:code>false</db:code> to stop the event from triggering its predefined action</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By handling this signal and setting the <db:code>action.accepted</db:code> field to <db:code>false</db:code>, it's possible to implement some validation on the dialog contents before accepting it, for example.</db:para>
<db:para>The corresponding handler is <db:code>onActionChosen</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActionChosen</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 1.8.</db:para>
</db:section>
<db:section xml:id="apply-signal">
<db:title>apply()</db:title>
<db:para>This signal is emitted when the user has pressed the <db:emphasis role="bold">Apply</db:emphasis> button.</db:para>
<db:para>The corresponding handler is <db:code>onApply</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onApply</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="discard-signal">
<db:title>discard()</db:title>
<db:para>This signal is emitted when the user has pressed the <db:emphasis role="bold">Discard</db:emphasis> button.</db:para>
<db:para>The corresponding handler is <db:code>onDiscard</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDiscard</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="help-signal">
<db:title>help()</db:title>
<db:para>This signal is emitted when the user has pressed the <db:emphasis role="bold">Help</db:emphasis> button. Depending on platform, the dialog may not be automatically dismissed because the help that your application provides may need to be relevant to the text shown in this dialog in order to assist the user in making a decision. However on other platforms it's not possible to show a dialog and a help window at the same time. If you want to be sure that the dialog will close, you can set <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#visible-prop">visible</db:link> to <db:code>false</db:code> in your handler.</db:para>
<db:para>The corresponding handler is <db:code>onHelp</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onHelp</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="no-signal">
<db:title>no()</db:title>
<db:para>This signal is emitted when the user has pressed any button which has the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">NoRole</db:link>: <db:emphasis role="bold">No</db:emphasis> or <db:emphasis role="bold">No to All</db:emphasis>.</db:para>
<db:para>The corresponding handler is <db:code>onNo</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onNo</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="rejected-signal">
<db:title>rejected()</db:title>
<db:para>This signal is emitted when the user has dismissed the dialog, by closing the dialog window, by pressing a <db:emphasis role="bold">Cancel</db:emphasis>, <db:emphasis role="bold">Close</db:emphasis> or <db:emphasis role="bold">Abort</db:emphasis> button on the dialog, or by pressing the back button or the escape key.</db:para>
<db:para>The corresponding handler is <db:code>onRejected</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRejected</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="reset-signal">
<db:title>reset()</db:title>
<db:para>This signal is emitted when the user has pressed any button which has the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ResetRole</db:link>: <db:emphasis role="bold">Reset</db:emphasis> or <db:emphasis role="bold">Restore Defaults</db:emphasis>.</db:para>
<db:para>The corresponding handler is <db:code>onReset</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onReset</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="yes-signal">
<db:title>yes()</db:title>
<db:para>This signal is emitted when the user has pressed any button which has the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">YesRole</db:link>: <db:emphasis role="bold">Yes</db:emphasis> or <db:emphasis role="bold">Yes to All</db:emphasis>.</db:para>
<db:para>The corresponding handler is <db:code>onYes</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onYes</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="close-method">
<db:title>void close()</db:title>
<db:para>Closes the dialog.</db:para>
</db:section>
<db:section xml:id="open-method">
<db:title>void open()</db:title>
<db:para>Shows the dialog to the user. It is equivalent to setting <db:link xlink:href="qml-qtquick-dialogs-dialog.xml#visible-prop">visible</db:link> to <db:code>true</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
