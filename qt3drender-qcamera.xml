<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCamera Class</db:title>
<db:subtitle>Qt3DRender::QCamera</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qt3drender-qcamera.xml">QCamera</db:link> class defines a view point through which the scene will be rendered.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Qt3DRender/QCamera</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3drender)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3drender)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qt3d-render-camera.xml" xlink:role="">Camera</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qentity.xml" xlink:role="class">Qt3DCore::QEntity</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CameraTranslationOption-enum">
<db:title>enum QCamera::CameraTranslationOption</db:title>
<db:para>This enum specifies how camera view center is translated</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml">QCamera</db:link></db:emphasis>::TranslateViewCenter</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Translate the view center causing the view direction to remain the same</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml">QCamera</db:link></db:emphasis>::DontTranslateViewCenter</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Don't translate the view center causing the view direction to change</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="aspectRatio-prop">
<db:title>aspectRatio : float</db:title>
<db:para>Holds the current aspect ratio.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">aspectRatio</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setAspectRatio">setAspectRatio</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>aspectRatio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">aspectRatioChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>aspectRatio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="bottom-prop">
<db:title>bottom : float</db:title>
<db:para>Holds the current bottom of the camera.</db:para>
<db:para>This property is only relevant when <db:link xlink:href="qt3drender-qcamera.xml#projectionType-prop">projectionType</db:link> is <db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::OrthographicProjection</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">bottom</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setBottom">setBottom</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>bottom</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">bottomChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>bottom</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="exposure-prop">
<db:title>exposure : float</db:title>
<db:para>Holds the current exposure of the camera.</db:para>
<db:para>The default value is 0.0.</db:para>
<db:para>The <db:link xlink:href="qml-qt3d-extras-metalroughmaterial.xml">MetalRoughMaterial</db:link> in Qt 3D Extras is currently the only provided material that makes use of camera exposure. Negative values will cause the material to be darker, and positive values will cause it to be lighter.</db:para>
<db:para>Custom materials may choose to interpret the value differently.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">exposure</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setExposure">setExposure</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>exposure</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">exposureChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>exposure</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="farPlane-prop">
<db:title>farPlane : float</db:title>
<db:para>Holds the current camera far plane. Objects that are farther from the camera than the farPlane will not be rendered.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">farPlane</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setFarPlane">setFarPlane</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>farPlane</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">farPlaneChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>farPlane</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="fieldOfView-prop">
<db:title>fieldOfView : float</db:title>
<db:para>Holds the current vertical field of view in degrees.</db:para>
<db:para>Along with <db:link xlink:href="qt3drender-qcamera.xml#aspectRatio-prop">aspectRatio</db:link>, this property determines how much of the scene is visible to the camera. In that respect you might think of it as analogous to choosing a wide angle (wide horizontal field of view) or telephoto (narrow horizontal field of view) lens depending on how much of a scene you want to capture.</db:para>
<db:para>fieldOfView is only relevant when <db:link xlink:href="qt3drender-qcamera.xml#projectionType-prop">projectionType</db:link> is <db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::PerspectiveProjection</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">fieldOfView</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setFieldOfView">setFieldOfView</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>fieldOfView</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">fieldOfViewChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>fieldOfView</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="left-prop">
<db:title>left : float</db:title>
<db:para>Holds the current left of the camera.</db:para>
<db:para>This property is only relevant when <db:link xlink:href="qt3drender-qcamera.xml#projectionType-prop">projectionType</db:link> is <db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::OrthographicProjection</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">left</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setLeft">setLeft</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>left</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">leftChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>left</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="lens-prop">
<db:title>[read-only] lens : Qt3DRender::QCameraLens* const</db:title>
<db:para>Holds the <db:link xlink:href="qt3drender-qcameralens.xml">Qt3DRender::QCameraLens</db:link> component of the camera.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qcameralens.xml">Qt3DRender::QCameraLens</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#lens">lens</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="nearPlane-prop">
<db:title>nearPlane : float</db:title>
<db:para>Holds the current camera near plane. Objects that are closer to the camera than the nearPlane will not be rendered.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">nearPlane</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setNearPlane">setNearPlane</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>nearPlane</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">nearPlaneChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>nearPlane</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="position-prop">
<db:title>position : QVector3D</db:title>
<db:para>Holds the camera's position in coordinates relative to the parent entity.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QVector3D</db:type> <db:emphasis role="bold">position</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setPosition">setPosition</db:link></db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">positionChanged</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="projectionMatrix-prop">
<db:title>projectionMatrix : QMatrix4x4</db:title>
<db:para>Holds the current projection matrix of the camera.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QMatrix4x4</db:type> <db:emphasis role="bold">projectionMatrix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setProjectionMatrix">setProjectionMatrix</db:link></db:emphasis>(const <db:type>QMatrix4x4</db:type> &amp;<db:emphasis>projectionMatrix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">projectionMatrixChanged</db:emphasis>(const <db:type>QMatrix4x4</db:type> &amp;<db:emphasis>projectionMatrix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="projectionType-prop">
<db:title>projectionType : Qt3DRender::QCameraLens::ProjectionType</db:title>
<db:para>Holds the type of the camera projection. The default value is <db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::PerspectiveProjection</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::OrthographicProjection</db:link> - Parallel lines appear parallel. Objects appear the same size regardless of distance.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::PerspectiveProjection</db:link> - Parallel lines appear to meet in the distance. Objects appear to shrink the farther they are from the camera.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::FrustumProjection</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::CustomProjection</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">Qt3DRender::QCameraLens::ProjectionType</db:link></db:type> <db:emphasis role="bold">projectionType</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setProjectionType">setProjectionType</db:link></db:emphasis>(<db:type><db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">Qt3DRender::QCameraLens::ProjectionType</db:link></db:type> <db:emphasis>type</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">projectionTypeChanged</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">Qt3DRender::QCameraLens::ProjectionType</db:link></db:type> <db:emphasis>projectionType</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">Qt3DRender::QCameraLens::ProjectionType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right-prop">
<db:title>right : float</db:title>
<db:para>Holds the current right of the camera.</db:para>
<db:para>This property is only relevant when <db:link xlink:href="qt3drender-qcamera.xml#projectionType-prop">projectionType</db:link> is <db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::OrthographicProjection</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">right</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setRight">setRight</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>right</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rightChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>right</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="top-prop">
<db:title>top : float</db:title>
<db:para>Holds the current top of the camera.</db:para>
<db:para>This property is only relevant when <db:link xlink:href="qt3drender-qcamera.xml#projectionType-prop">projectionType</db:link> is <db:link xlink:href="qt3drender-qcameralens.xml#ProjectionType-enum">QCameraLens::OrthographicProjection</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">top</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setTop">setTop</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>top</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">topChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>top</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="transform-prop">
<db:title>[read-only] transform : Qt3DCore::QTransform* const</db:title>
<db:para>Holds the <db:link xlink:href="qt3dcore-qtransform.xml">Qt3DCore::QTransform</db:link> component of the camera.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3dcore-qtransform.xml">Qt3DCore::QTransform</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#transform">transform</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="upVector-prop">
<db:title>upVector : QVector3D</db:title>
<db:para>Holds the camera's up vector in coordinates relative to the parent entity.</db:para>
<db:para>The up vector indicates which direction the top of the camera is facing. Think of taking a picture: after positioning yourself and pointing the camera at your target, you might rotate the camera left or right, giving you a portrait or landscape (or angled!) shot. upVector allows you to control this type of movement.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QVector3D</db:type> <db:emphasis role="bold">upVector</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setUpVector">setUpVector</db:link></db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>upVector</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">upVectorChanged</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>upVector</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewCenter-prop">
<db:title>viewCenter : QVector3D</db:title>
<db:para>Holds the camera's view center in coordinates relative to the parent entity.</db:para>
<db:para>Intuitively, the viewCenter is the location the camera is pointing at.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QVector3D</db:type> <db:emphasis role="bold">viewCenter</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qcamera.xml#setViewCenter">setViewCenter</db:link></db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>viewCenter</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">viewCenterChanged</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>viewCenter</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewVector-prop">
<db:title>[read-only] viewVector : const QVector3D</db:title>
<db:para>Holds the camera's view vector in coordinates relative to the parent entity.</db:para>
<db:para>This vector decribes the displacement from the camera (<db:link xlink:href="qt3drender-qcamera.xml#position-prop">position</db:link>) to its target (<db:link xlink:href="qt3drender-qcamera.xml#viewCenter-prop">viewCenter</db:link>).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QVector3D</db:type> <db:emphasis role="bold">viewVector</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">viewVectorChanged</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>viewVector</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCamera">
<db:title>[explicit] QCamera::QCamera(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Creates a new <db:link xlink:href="qt3drender-qcamera.xml">QCamera</db:link> instance with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="lens">
<db:title>Qt3DRender::QCameraLens *QCamera::lens() const</db:title>
<db:para>Returns the current lens.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qt3drender-qcamera.xml#lens-prop">lens</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pan">
<db:title>void QCamera::pan(float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Adjusts the pan angle of the camera by <db:code role="parameter">angle</db:code> in degrees.</db:para>
</db:section>
<db:section xml:id="pan-1">
<db:title>void QCamera::pan(float <db:emphasis>angle</db:emphasis>, const QVector3D &amp;<db:emphasis>axis</db:emphasis>)</db:title>
<db:para>Adjusts the pan angle of the camera by <db:code role="parameter">angle</db:code> in degrees on a chosen <db:code role="parameter">axis</db:code>.</db:para>
</db:section>
<db:section xml:id="panAboutViewCenter">
<db:title>void QCamera::panAboutViewCenter(float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Adjusts the camera pan about view center by <db:code role="parameter">angle</db:code> in degrees.</db:para>
</db:section>
<db:section xml:id="panAboutViewCenter-1">
<db:title>void QCamera::panAboutViewCenter(float <db:emphasis>angle</db:emphasis>, const QVector3D &amp;<db:emphasis>axis</db:emphasis>)</db:title>
<db:para>Adjusts the camera pan about view center by <db:code role="parameter">angle</db:code> in degrees on <db:code role="parameter">axis</db:code>.</db:para>
</db:section>
<db:section xml:id="panRotation">
<db:title>QQuaternion QCamera::panRotation(float <db:emphasis>angle</db:emphasis>) const</db:title>
<db:para>Returns the calculated pan rotation in relation to the <db:code role="parameter">angle</db:code> in degrees taken in to adjust the camera's pan or left/right rotation on the Y axis.</db:para>
</db:section>
<db:section xml:id="roll">
<db:title>void QCamera::roll(float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Adjusts the camera roll by <db:code role="parameter">angle</db:code> in degrees.</db:para>
</db:section>
<db:section xml:id="rollAboutViewCenter">
<db:title>void QCamera::rollAboutViewCenter(float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Adjusts the camera roll about view center by <db:code role="parameter">angle</db:code> in degrees.</db:para>
</db:section>
<db:section xml:id="rollRotation">
<db:title>QQuaternion QCamera::rollRotation(float <db:emphasis>angle</db:emphasis>) const</db:title>
<db:para>Returns the calculated roll rotation in relation to the <db:code role="parameter">angle</db:code> in degrees taken in to adjust the camera's roll or lean left/right rotation on the Z axis.</db:para>
</db:section>
<db:section xml:id="rotate">
<db:title>void QCamera::rotate(const QQuaternion &amp;<db:emphasis>q</db:emphasis>)</db:title>
<db:para>Rotates the camera with the use of a Quaternion in <db:code role="parameter">q</db:code>.</db:para>
</db:section>
<db:section xml:id="rotateAboutViewCenter">
<db:title>void QCamera::rotateAboutViewCenter(const QQuaternion &amp;<db:emphasis>q</db:emphasis>)</db:title>
<db:para>Rotates the camera about the view center with the use of a Quaternion in <db:code role="parameter">q</db:code>.</db:para>
</db:section>
<db:section xml:id="rotation">
<db:title>QQuaternion QCamera::rotation(float <db:emphasis>angle</db:emphasis>, const QVector3D &amp;<db:emphasis>axis</db:emphasis>) const</db:title>
<db:para>Returns the calculated rotation in relation to the <db:code role="parameter">angle</db:code> in degrees and chosen <db:code role="parameter">axis</db:code> taken in.</db:para>
</db:section>
<db:section xml:id="setAspectRatio">
<db:title>void QCamera::setAspectRatio(float <db:emphasis>aspectRatio</db:emphasis>)</db:title>
<db:para>Sets the camera's aspect ratio to <db:code role="parameter">aspectRatio</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#aspectRatio-prop">aspectRatio</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#aspectRatio-prop">aspectRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBottom">
<db:title>void QCamera::setBottom(float <db:emphasis>bottom</db:emphasis>)</db:title>
<db:para>Sets the bottom of the camera to <db:code role="parameter">bottom</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#bottom-prop">bottom</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#bottom-prop">bottom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExposure">
<db:title>void QCamera::setExposure(float <db:emphasis>exposure</db:emphasis>)</db:title>
<db:para>Sets the camera's exposure to <db:code role="parameter">exposure</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#exposure-prop">exposure</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#exposure-prop">exposure</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFarPlane">
<db:title>void QCamera::setFarPlane(float <db:emphasis>farPlane</db:emphasis>)</db:title>
<db:para>Sets the camera's far plane to <db:code role="parameter">farPlane</db:code></db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#farPlane-prop">farPlane</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#farPlane-prop">farPlane</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFieldOfView">
<db:title>void QCamera::setFieldOfView(float <db:emphasis>fieldOfView</db:emphasis>)</db:title>
<db:para>Sets the camera's field of view to <db:code role="parameter">fieldOfView</db:code> in degrees.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#fieldOfView-prop">fieldOfView</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#fieldOfView-prop">fieldOfView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLeft">
<db:title>void QCamera::setLeft(float <db:emphasis>left</db:emphasis>)</db:title>
<db:para>Sets the left of the camera to <db:code role="parameter">left</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#left-prop">left</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#left-prop">left</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNearPlane">
<db:title>void QCamera::setNearPlane(float <db:emphasis>nearPlane</db:emphasis>)</db:title>
<db:para>Sets the camera's near plane to <db:code role="parameter">nearPlane</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#nearPlane-prop">nearPlane</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#nearPlane-prop">nearPlane</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPosition">
<db:title>void QCamera::setPosition(const QVector3D &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:para>Sets the camera's position in 3D space to <db:code role="parameter">position</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#position-prop">position</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#position-prop">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProjectionMatrix">
<db:title>void QCamera::setProjectionMatrix(const QMatrix4x4 &amp;<db:emphasis>projectionMatrix</db:emphasis>)</db:title>
<db:para>Sets the camera's projection matrix to <db:code role="parameter">projectionMatrix</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#projectionMatrix-prop">projectionMatrix</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#projectionMatrix-prop">projectionMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProjectionType">
<db:title>void QCamera::setProjectionType(Qt3DRender::QCameraLens::ProjectionType <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets the camera's projection type to <db:code role="parameter">type</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#projectionType-prop">projectionType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#projectionType-prop">projectionType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRight">
<db:title>void QCamera::setRight(float <db:emphasis>right</db:emphasis>)</db:title>
<db:para>Sets the right of the camera to <db:code role="parameter">right</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#right-prop">right</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#right-prop">right</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTop">
<db:title>void QCamera::setTop(float <db:emphasis>top</db:emphasis>)</db:title>
<db:para>Sets the top of the camera to <db:code role="parameter">top</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#top-prop">top</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#top-prop">top</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUpVector">
<db:title>void QCamera::setUpVector(const QVector3D &amp;<db:emphasis>upVector</db:emphasis>)</db:title>
<db:para>Sets the camera's up vector to <db:code role="parameter">upVector</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#upVector-prop">upVector</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#upVector-prop">upVector</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setViewCenter">
<db:title>void QCamera::setViewCenter(const QVector3D &amp;<db:emphasis>viewCenter</db:emphasis>)</db:title>
<db:para>Sets the camera's view center to <db:code role="parameter">viewCenter</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qcamera.xml#viewCenter-prop">viewCenter</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qcamera.xml#viewCenter-prop">viewCenter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tilt">
<db:title>void QCamera::tilt(float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Adjusts the tilt angle of the camera by <db:code role="parameter">angle</db:code> in degrees.</db:para>
</db:section>
<db:section xml:id="tiltAboutViewCenter">
<db:title>void QCamera::tiltAboutViewCenter(float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Adjusts the camera tilt about view center by <db:code role="parameter">angle</db:code> in degrees.</db:para>
</db:section>
<db:section xml:id="tiltRotation">
<db:title>QQuaternion QCamera::tiltRotation(float <db:emphasis>angle</db:emphasis>) const</db:title>
<db:para>Returns the calculated tilt rotation in relation to the <db:code role="parameter">angle</db:code> in degrees taken in to adjust the camera's tilt or up/down rotation on the X axis.</db:para>
</db:section>
<db:section xml:id="transform">
<db:title>Qt3DCore::QTransform *QCamera::transform() const</db:title>
<db:para>Returns the camera's position via transform.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qt3drender-qcamera.xml#transform-prop">transform</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="translate">
<db:title>void QCamera::translate(const QVector3D &amp;<db:emphasis>vLocal</db:emphasis>, Qt3DRender::QCamera::CameraTranslationOption <db:emphasis>option</db:emphasis> = TranslateViewCenter)</db:title>
<db:para>Translates the camera's position and its view vector by <db:code role="parameter">vLocal</db:code> in local coordinates. The <db:code role="parameter">option</db:code> allows for toggling whether the view center should be translated.</db:para>
</db:section>
<db:section xml:id="translateWorld">
<db:title>void QCamera::translateWorld(const QVector3D &amp;<db:emphasis>vWorld</db:emphasis>, Qt3DRender::QCamera::CameraTranslationOption <db:emphasis>option</db:emphasis> = TranslateViewCenter)</db:title>
<db:para>Translates the camera's position and its view vector by <db:code role="parameter">vWorld</db:code> in world coordinates. The <db:code role="parameter">option</db:code> allows for toggling whether the view center should be translated.</db:para>
</db:section>
<db:section xml:id="viewAll">
<db:title>void QCamera::viewAll()</db:title>
<db:para>Rotates and moves the camera so that it's <db:link xlink:href="qt3drender-qcamera.xml#viewCenter-prop">viewCenter</db:link> is the center of the scene's bounding volume and the entire scene fits in the view port.</db:para>
<db:note>
<db:para>Only works if the lens is in perspective or orthographic projection mode.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt3d-render-camera.xml#projectionType-prop">Qt3D.Render::Camera::projectionType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewEntity">
<db:title>void QCamera::viewEntity(Qt3DCore::QEntity *<db:emphasis>entity</db:emphasis>)</db:title>
<db:para>Rotates and moves the camera so that it's <db:link xlink:href="qt3drender-qcamera.xml#viewCenter-prop">viewCenter</db:link> is the center of the <db:code role="parameter">entity</db:code>'s bounding volume and the entire entity fits in the view port.</db:para>
<db:note>
<db:para>Only works if the lens is in perspective or orthographic projection mode.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt3d-render-camera.xml#projectionType-prop">Camera.projectionType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewSphere">
<db:title>void QCamera::viewSphere(const QVector3D &amp;<db:emphasis>center</db:emphasis>, float <db:emphasis>radius</db:emphasis>)</db:title>
<db:para>Rotates and moves the camera so that it's <db:link xlink:href="qt3drender-qcamera.xml#viewCenter-prop">viewCenter</db:link> is <db:code role="parameter">center</db:code> and a sphere of <db:code role="parameter">radius</db:code> fits in the view port.</db:para>
<db:note>
<db:para>Only works if the lens is in perspective or orthographic projection mode.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt3d-render-camera.xml#projectionType-prop">Qt3D.Render::Camera::projectionType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QCamera</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qt3drender-qcamera.xml">QCamera</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="viewMatrix-prop">
<db:title>[read-only, deprecated] viewMatrix : const QMatrix4x4</db:title>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Holds the camera's view matrix in coordinates relative to the parent entity.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QMatrix4x4</db:type> <db:emphasis role="bold">viewMatrix</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">viewMatrixChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
</db:article>
