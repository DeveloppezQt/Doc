<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGLBuffer Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link> class provides functions for creating and managing GL buffer objects.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 4.7.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGLBuffer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGLBuffer is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Buffer objects are created in the GL server so that the client application can avoid uploading vertices, indices, texture image data, etc every time they are needed.</db:para>
<db:para><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link> objects can be copied around as a reference to the underlying GL buffer object:</db:para>
<db:programlisting language="cpp">    QGLBuffer buffer1(QGLBuffer::IndexBuffer);
    buffer1.create();

    QGLBuffer buffer2 = buffer1;
</db:programlisting>
<db:para><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link> performs a shallow copy when objects are copied in this manner, but does not implement copy-on-write semantics. The original object will be affected whenever the copy is modified.</db:para>
<db:note>
<db:para>This class has been deprecated in favor of <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Access-enum">
<db:title>enum QGLBuffer::Access</db:title>
<db:enumsynopsis>
<db:enumname>Access</db:enumname>
<db:enumitem>
<db:enumidentifier>ReadOnly</db:enumidentifier>
<db:enumvalue>0x88B8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteOnly</db:enumidentifier>
<db:enumvalue>0x88B9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadWrite</db:enumidentifier>
<db:enumvalue>0x88BA</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the access mode for <db:link xlink:href="qglbuffer.xml#map">QGLBuffer::map</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x88B8</db:code></db:td>
<db:td>
<db:para>The buffer will be mapped for reading only.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::WriteOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x88B9</db:code></db:td>
<db:td>
<db:para>The buffer will be mapped for writing only.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::ReadWrite</db:code></db:para>
</db:td>
<db:td><db:code>0x88BA</db:code></db:td>
<db:td>
<db:para>The buffer will be mapped for reading and writing.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QGLBuffer::Type</db:title>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>VertexBuffer</db:enumidentifier>
<db:enumvalue>0x8892</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IndexBuffer</db:enumidentifier>
<db:enumvalue>0x8893</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PixelPackBuffer</db:enumidentifier>
<db:enumvalue>0x88EB</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PixelUnpackBuffer</db:enumidentifier>
<db:enumvalue>0x88EC</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the type of GL buffer object to create with <db:link xlink:href="qglbuffer.xml" role="deprecated">QGLBuffer</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::VertexBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x8892</db:code></db:td>
<db:td>
<db:para>Vertex buffer object for use when specifying vertex arrays.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::IndexBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x8893</db:code></db:td>
<db:td>
<db:para>Index buffer object for use with <db:code>glDrawElements()</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::PixelPackBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x88EB</db:code></db:td>
<db:td>
<db:para>Pixel pack buffer object for reading pixel data from the GL server (for example, with <db:code>glReadPixels()</db:code>). Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::PixelUnpackBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x88EC</db:code></db:td>
<db:td>
<db:para>Pixel unpack buffer object for writing pixel data to the GL server (for example, with <db:code>glTexImage2D()</db:code>). Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="UsagePattern-enum">
<db:title>enum QGLBuffer::UsagePattern</db:title>
<db:enumsynopsis>
<db:enumname>UsagePattern</db:enumname>
<db:enumitem>
<db:enumidentifier>StreamDraw</db:enumidentifier>
<db:enumvalue>0x88E0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StreamRead</db:enumidentifier>
<db:enumvalue>0x88E1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StreamCopy</db:enumidentifier>
<db:enumvalue>0x88E2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StaticDraw</db:enumidentifier>
<db:enumvalue>0x88E4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StaticRead</db:enumidentifier>
<db:enumvalue>0x88E5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StaticCopy</db:enumidentifier>
<db:enumvalue>0x88E6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DynamicDraw</db:enumidentifier>
<db:enumvalue>0x88E8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DynamicRead</db:enumidentifier>
<db:enumvalue>0x88E9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DynamicCopy</db:enumidentifier>
<db:enumvalue>0x88EA</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the usage pattern of a <db:link xlink:href="qglbuffer.xml" role="deprecated">QGLBuffer</db:link> object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::StreamDraw</db:code></db:para>
</db:td>
<db:td><db:code>0x88E0</db:code></db:td>
<db:td>
<db:para>The data will be set once and used a few times for drawing operations. Under OpenGL/ES 1.1 this is identical to StaticDraw.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::StreamRead</db:code></db:para>
</db:td>
<db:td><db:code>0x88E1</db:code></db:td>
<db:td>
<db:para>The data will be set once and used a few times for reading data back from the GL server. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::StreamCopy</db:code></db:para>
</db:td>
<db:td><db:code>0x88E2</db:code></db:td>
<db:td>
<db:para>The data will be set once and used a few times for reading data back from the GL server for use in further drawing operations. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::StaticDraw</db:code></db:para>
</db:td>
<db:td><db:code>0x88E4</db:code></db:td>
<db:td>
<db:para>The data will be set once and used many times for drawing operations.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::StaticRead</db:code></db:para>
</db:td>
<db:td><db:code>0x88E5</db:code></db:td>
<db:td>
<db:para>The data will be set once and used many times for reading data back from the GL server. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::StaticCopy</db:code></db:para>
</db:td>
<db:td><db:code>0x88E6</db:code></db:td>
<db:td>
<db:para>The data will be set once and used many times for reading data back from the GL server for use in further drawing operations. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::DynamicDraw</db:code></db:para>
</db:td>
<db:td><db:code>0x88E8</db:code></db:td>
<db:td>
<db:para>The data will be modified repeatedly and used many times for drawing operations.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::DynamicRead</db:code></db:para>
</db:td>
<db:td><db:code>0x88E9</db:code></db:td>
<db:td>
<db:para>The data will be modified repeatedly and used many times for reading data back from the GL server. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglbuffer.xml">QGLBuffer</db:link></db:emphasis>::DynamicCopy</db:code></db:para>
</db:td>
<db:td><db:code>0x88EA</db:code></db:td>
<db:td>
<db:para>The data will be modified repeatedly and used many times for reading data back from the GL server for use in further drawing operations. Not supported under OpenGL/ES.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGLBuffer">
<db:title>QGLBuffer::QGLBuffer()</db:title>
<db:constructorsynopsis>
<db:methodname>QGLBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLBuffer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new buffer object of type <db:link xlink:href="qglbuffer.xml#Type-enum">QGLBuffer::VertexBuffer</db:link>.</db:para>
<db:para>Note: this constructor just creates the <db:link xlink:href="qglbuffer.xml" role="deprecated">QGLBuffer</db:link> instance. The actual buffer object in the GL server is not created until <db:link xlink:href="qglbuffer.xml#create">create</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGLBuffer-1">
<db:title>[explicit] QGLBuffer::QGLBuffer(QGLBuffer::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGLBuffer</db:methodname>
<db:methodparam>
<db:type>QGLBuffer::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLBuffer(QGLBuffer::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new buffer object of <db:code role="parameter">type</db:code>.</db:para>
<db:para>Note: this constructor just creates the <db:link xlink:href="qglbuffer.xml" role="deprecated">QGLBuffer</db:link> instance. The actual buffer object in the GL server is not created until <db:link xlink:href="qglbuffer.xml#create">create</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGLBuffer-2">
<db:title>QGLBuffer::QGLBuffer(const QGLBuffer &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGLBuffer</db:methodname>
<db:methodparam>
<db:type>const QGLBuffer &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLBuffer(const QGLBuffer &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a shallow copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>Note: <db:link xlink:href="qglbuffer.xml" role="deprecated">QGLBuffer</db:link> does not implement copy-on-write semantics, so <db:code role="parameter">other</db:code> will be affected whenever the copy is modified.</db:para>
</db:section>
<db:section xml:id="dtor.QGLBuffer">
<db:title>QGLBuffer::~QGLBuffer()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGLBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGLBuffer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this buffer object, including the storage being used in the GL server.</db:para>
</db:section>
<db:section xml:id="allocate">
<db:title>void QGLBuffer::allocate(const void *<db:emphasis>data</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>allocate</db:methodname>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void allocate(const void *data, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Allocates <db:code role="parameter">count</db:code> bytes of space to the buffer, initialized to the contents of <db:code role="parameter">data</db:code>. Any previous contents will be removed.</db:para>
<db:para>It is assumed that <db:link xlink:href="qglbuffer.xml#create">create</db:link>() has been called on this buffer and that it has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="allocate-1">
<db:title>void QGLBuffer::allocate(int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>allocate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void allocate(int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Allocates <db:code role="parameter">count</db:code> bytes of space to the buffer. Any previous contents will be removed.</db:para>
<db:para>It is assumed that <db:link xlink:href="qglbuffer.xml#create">create</db:link>() has been called on this buffer and that it has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bind">
<db:title>bool QGLBuffer::bind()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>bind</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool bind()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds the buffer associated with this object to the current GL context. Returns <db:code>false</db:code> if binding was not possible, usually because <db:link xlink:href="qglbuffer.xml#type">type</db:link>() is not supported on this GL implementation.</db:para>
<db:para>The buffer must be bound to the same QGLContext current when <db:link xlink:href="qglbuffer.xml#create">create</db:link>() was called, or to another QGLContext that is sharing with it. Otherwise, false will be returned from this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#release">release</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bufferId">
<db:title>GLuint QGLBuffer::bufferId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>bufferId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint bufferId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the GL identifier associated with this buffer; zero if the buffer has not been created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#isCreated">isCreated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>bool QGLBuffer::create()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>create</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool create()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates the buffer object in the GL server. Returns <db:code>true</db:code> if the object was created; false otherwise.</db:para>
<db:para>This function must be called with a current QGLContext. The buffer will be bound to and can only be used in that context (or any other context that is shared with it).</db:para>
<db:para>This function will return false if the GL implementation does not support buffers, or there is no current QGLContext.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#isCreated">isCreated</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#allocate">allocate</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroy">
<db:title>void QGLBuffer::destroy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Destroys this buffer object, including the storage being used in the GL server. All references to the buffer will become invalid.</db:para>
</db:section>
<db:section xml:id="isCreated">
<db:title>bool QGLBuffer::isCreated() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCreated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCreated() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this buffer has been created; false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="map">
<db:title>void *QGLBuffer::map(QGLBuffer::Access <db:emphasis>access</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>void *</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>QGLBuffer::Access</db:type>
<db:parameter>access</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void * map(QGLBuffer::Access access)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the contents of this buffer into the application's memory space and returns a pointer to it. Returns null if memory mapping is not possible. The <db:code role="parameter">access</db:code> parameter indicates the type of access to be performed.</db:para>
<db:para>It is assumed that <db:link xlink:href="qglbuffer.xml#create">create</db:link>() has been called on this buffer and that it has been bound to the current context.</db:para>
<db:para>This function is only supported under OpenGL/ES if the <db:code>GL_OES_mapbuffer</db:code> extension is present.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#unmap">unmap</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>bool QGLBuffer::read(int <db:emphasis>offset</db:emphasis>, void *<db:emphasis>data</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>read</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool read(int offset, void *data, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the <db:code role="parameter">count</db:code> bytes in this buffer starting at <db:code role="parameter">offset</db:code> into <db:code role="parameter">data</db:code>. Returns <db:code>true</db:code> on success; false if reading from the buffer is not supported. Buffer reading is not supported under OpenGL/ES.</db:para>
<db:para>It is assumed that this buffer has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release">
<db:title>void QGLBuffer::release()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>release</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void release()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the buffer associated with this object from the current GL context.</db:para>
<db:para>This function must be called with the same QGLContext current as when <db:link xlink:href="qglbuffer.xml#bind">bind</db:link>() was called on the buffer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release-1">
<db:title>[static] void QGLBuffer::release(QGLBuffer::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>release</db:methodname>
<db:methodparam>
<db:type>QGLBuffer::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void release(QGLBuffer::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the buffer associated with <db:code role="parameter">type</db:code> in the current QGLContext.</db:para>
<db:para>This function is a direct call to <db:code>glBindBuffer(type, 0)</db:code> for use when the caller does not know which <db:link xlink:href="qglbuffer.xml" role="deprecated">QGLBuffer</db:link> has been bound to the context but wants to make sure that it is released.</db:para>
<db:programlisting language="cpp">    QGLBuffer::release(QGLBuffer::VertexBuffer);
</db:programlisting>
</db:section>
<db:section xml:id="setUsagePattern">
<db:title>void QGLBuffer::setUsagePattern(QGLBuffer::UsagePattern <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUsagePattern</db:methodname>
<db:methodparam>
<db:type>QGLBuffer::UsagePattern</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUsagePattern(QGLBuffer::UsagePattern value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the usage pattern for this buffer object to <db:code role="parameter">value</db:code>. This function must be called before <db:link xlink:href="qglbuffer.xml#allocate">allocate</db:link>() or <db:link xlink:href="qglbuffer.xml#write">write</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#usagePattern">usagePattern</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#allocate">allocate</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>int QGLBuffer::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the data in this buffer, for reading operations. Returns -1 if fetching the buffer size is not supported, or the buffer has not been created.</db:para>
<db:para>It is assumed that this buffer has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#isCreated">isCreated</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QGLBuffer::Type QGLBuffer::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGLBuffer::Type</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLBuffer::Type type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of buffer represented by this object.</db:para>
</db:section>
<db:section xml:id="unmap">
<db:title>bool QGLBuffer::unmap()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>unmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool unmap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unmaps the buffer after it was mapped into the application's memory space with a previous call to <db:link xlink:href="qglbuffer.xml#map">map</db:link>(). Returns <db:code>true</db:code> if the unmap succeeded; false otherwise.</db:para>
<db:para>It is assumed that this buffer has been bound to the current context, and that it was previously mapped with <db:link xlink:href="qglbuffer.xml#map">map</db:link>().</db:para>
<db:para>This function is only supported under OpenGL/ES if the <db:code>GL_OES_mapbuffer</db:code> extension is present.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="usagePattern">
<db:title>QGLBuffer::UsagePattern QGLBuffer::usagePattern() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGLBuffer::UsagePattern</db:type>
<db:methodname>usagePattern</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLBuffer::UsagePattern usagePattern() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the usage pattern for this buffer object. The default value is <db:link xlink:href="qglbuffer.xml#UsagePattern-enum">StaticDraw</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#setUsagePattern">setUsagePattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>void QGLBuffer::write(int <db:emphasis>offset</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(int offset, const void *data, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the <db:code role="parameter">count</db:code> bytes of this buffer starting at <db:code role="parameter">offset</db:code> with the contents of <db:code role="parameter">data</db:code>. Any other bytes in the buffer will be left unmodified.</db:para>
<db:para>It is assumed that <db:link xlink:href="qglbuffer.xml#create">create</db:link>() has been called on this buffer and that it has been bound to the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglbuffer.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qglbuffer.xml#allocate">allocate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGLBuffer &amp;QGLBuffer::operator=(const QGLBuffer &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGLBuffer &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGLBuffer &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLBuffer &amp; operator=(const QGLBuffer &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns a shallow copy of <db:code role="parameter">other</db:code> to this object.</db:para>
<db:para>Note: <db:link xlink:href="qglbuffer.xml" role="deprecated">QGLBuffer</db:link> does not implement copy-on-write semantics, so <db:code role="parameter">other</db:code> will be affected whenever the copy is modified.</db:para>
</db:section>
</db:section>
</db:article>
