<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGestureEvent Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link> class provides the description of triggered gestures.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGestureEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qevent.xml" xlink:role="class">QEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGestureEvent is part of <db:simplelist><db:member>events</db:member><db:member>gestures</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link> class contains a list of gestures, which can be obtained using the <db:link xlink:href="qgestureevent.xml#gestures">gestures</db:link>() function.</db:para>
<db:para>The gestures are either active or canceled. A list of those that are currently being executed can be obtained using the <db:link xlink:href="qgestureevent.xml#activeGestures">activeGestures</db:link>() function. A list of those which were previously active and have been canceled can be accessed using the <db:link xlink:href="qgestureevent.xml#canceledGestures">canceledGestures</db:link>() function. A gesture might be canceled if the current window loses focus, for example, or because of a timeout, or for other reasons.</db:para>
<db:para>If the event handler does not accept the event by calling the generic <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() function, all individual <db:link xlink:href="qgesture.xml">QGesture</db:link> object that were not accepted and in the <db:link xlink:href="qt.xml#GestureState-enum">Qt::GestureStarted</db:link> state will be propagated up the parent widget chain until a widget accepts them individually, by calling <db:link xlink:href="qgestureevent.xml#accept">QGestureEvent::accept</db:link>() for each of them, or an event filter consumes the event.</db:para>
<db:section xml:id="further-reading">
<db:title>Further Reading</db:title>
<db:para>For an overview of gesture handling in Qt and information on using gestures in your applications, see the <db:link xlink:href="gestures-overview.xml">Gestures in Widgets and Graphics View</db:link> document.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgesture.xml">QGesture</db:link></db:member>
<db:member><db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#grabGesture">QWidget::grabGesture</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsobject.xml#grabGesture">QGraphicsObject::grabGesture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGestureEvent">
<db:title>[explicit] QGestureEvent::QGestureEvent(const QList&lt;QGesture *&gt; &amp;<db:emphasis>gestures</db:emphasis>)</db:title>
<db:para>Creates new <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link> containing a list of <db:code role="parameter">gestures</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGestureEvent">
<db:title>[virtual noexcept] QGestureEvent::~QGestureEvent()</db:title>
<db:para>Destroys <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link>.</db:para>
</db:section>
<db:section xml:id="accept">
<db:title>void QGestureEvent::accept(QGesture *<db:emphasis>gesture</db:emphasis>)</db:title>
<db:para>Sets the accept flag of the given <db:code role="parameter">gesture</db:code> object, the equivalent of calling <db:link xlink:href="qgestureevent.xml#setAccepted">setAccepted</db:link>(gesture, true).</db:para>
<db:para>Setting the accept flag indicates that the event receiver wants the gesture. Unwanted gestures may be propagated to the parent widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgestureevent.xml#ignore">QGestureEvent::ignore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="accept-1">
<db:title>void QGestureEvent::accept(Qt::GestureType <db:emphasis>gestureType</db:emphasis>)</db:title>
<db:para>Sets the accept flag of the given <db:code role="parameter">gestureType</db:code>, the equivalent of calling <db:link xlink:href="qgestureevent.xml#setAccepted">setAccepted</db:link>(gestureType, true).</db:para>
<db:para>Setting the accept flag indicates that the event receiver wants the gesture. Unwanted gestures may be propagated to the parent widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgestureevent.xml#ignore">QGestureEvent::ignore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeGestures">
<db:title>QList&lt;QGesture *&gt; QGestureEvent::activeGestures() const</db:title>
<db:para>Returns a list of active (not canceled) gestures.</db:para>
</db:section>
<db:section xml:id="canceledGestures">
<db:title>QList&lt;QGesture *&gt; QGestureEvent::canceledGestures() const</db:title>
<db:para>Returns a list of canceled gestures.</db:para>
</db:section>
<db:section xml:id="gesture">
<db:title>QGesture *QGestureEvent::gesture(Qt::GestureType <db:emphasis>type</db:emphasis>) const</db:title>
<db:para>Returns a gesture object by <db:code role="parameter">type</db:code>.</db:para>
</db:section>
<db:section xml:id="gestures">
<db:title>QList&lt;QGesture *&gt; QGestureEvent::gestures() const</db:title>
<db:para>Returns all gestures that are delivered in the event.</db:para>
</db:section>
<db:section xml:id="ignore">
<db:title>void QGestureEvent::ignore(QGesture *<db:emphasis>gesture</db:emphasis>)</db:title>
<db:para>Clears the accept flag parameter of the given <db:code role="parameter">gesture</db:code> object, the equivalent of calling <db:link xlink:href="qgestureevent.xml#setAccepted">setAccepted</db:link>(gesture, false).</db:para>
<db:para>Clearing the accept flag indicates that the event receiver does not want the gesture. Unwanted gestures may be propagated to the parent widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgestureevent.xml#accept">QGestureEvent::accept</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ignore-1">
<db:title>void QGestureEvent::ignore(Qt::GestureType <db:emphasis>gestureType</db:emphasis>)</db:title>
<db:para>Clears the accept flag parameter of the given <db:code role="parameter">gestureType</db:code>, the equivalent of calling <db:link xlink:href="qgestureevent.xml#setAccepted">setAccepted</db:link>(gesture, false).</db:para>
<db:para>Clearing the accept flag indicates that the event receiver does not want the gesture. Unwanted gestures may be propagated to the parent widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgestureevent.xml#accept">QGestureEvent::accept</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAccepted">
<db:title>bool QGestureEvent::isAccepted(QGesture *<db:emphasis>gesture</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">gesture</db:code> is accepted; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isAccepted-1">
<db:title>bool QGestureEvent::isAccepted(Qt::GestureType <db:emphasis>gestureType</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the gesture of type <db:code role="parameter">gestureType</db:code> is accepted; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="mapToGraphicsScene">
<db:title>QPointF QGestureEvent::mapToGraphicsScene(const QPointF &amp;<db:emphasis>gesturePoint</db:emphasis>) const</db:title>
<db:para>Returns the scene-local coordinates if the <db:code role="parameter">gesturePoint</db:code> is inside a graphics view.</db:para>
<db:para>This functional might be useful when the gesture event is delivered to a <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link> to translate a point in screen coordinates to scene-local coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#isNull">QPointF::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAccepted">
<db:title>void QGestureEvent::setAccepted(QGesture *<db:emphasis>gesture</db:emphasis>, bool <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the accept flag of the given <db:code role="parameter">gesture</db:code> object to the specified <db:code role="parameter">value</db:code>.</db:para>
<db:para>Setting the accept flag indicates that the event receiver wants the <db:code role="parameter">gesture</db:code>. Unwanted gestures may be propagated to the parent widget.</db:para>
<db:para>By default, gestures in events of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::Gesture</db:link> are accepted, and gestures in <db:link xlink:href="qevent.xml#Type-enum">QEvent::GestureOverride</db:link> events are ignored.</db:para>
<db:para>For convenience, the accept flag can also be set with <db:link xlink:href="qgestureevent.xml#accept">accept</db:link>(gesture), and cleared with <db:link xlink:href="qgestureevent.xml#ignore">ignore</db:link>(gesture).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgestureevent.xml#isAccepted">isAccepted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAccepted-1">
<db:title>void QGestureEvent::setAccepted(Qt::GestureType <db:emphasis>gestureType</db:emphasis>, bool <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the accept flag of the given <db:code role="parameter">gestureType</db:code> object to the specified <db:code role="parameter">value</db:code>.</db:para>
<db:para>Setting the accept flag indicates that the event receiver wants to receive gestures of the specified type, <db:code role="parameter">gestureType</db:code>. Unwanted gestures may be propagated to the parent widget.</db:para>
<db:para>By default, gestures in events of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::Gesture</db:link> are accepted, and gestures in <db:link xlink:href="qevent.xml#Type-enum">QEvent::GestureOverride</db:link> events are ignored.</db:para>
<db:para>For convenience, the accept flag can also be set with <db:link xlink:href="qgestureevent.xml#accept">accept</db:link>(gestureType), and cleared with <db:link xlink:href="qgestureevent.xml#ignore">ignore</db:link>(gestureType).</db:para>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QGestureEvent::widget() const</db:title>
<db:para>Returns the widget on which the event occurred.</db:para>
</db:section>
</db:section>
</db:article>
