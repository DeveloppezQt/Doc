<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Audio Recorder Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Discovering the available devices and supported codecs.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QAudioProbe&gt;
#include &lt;QAudioRecorder&gt;
#include &lt;QDir&gt;
#include &lt;QFileDialog&gt;
#include &lt;QMediaRecorder&gt;

#include &quot;audiorecorder.h&quot;
#include &quot;qaudiolevel.h&quot;

#include &quot;ui_audiorecorder.h&quot;

static qreal getPeakValue(const QAudioFormat &amp;format);
static QVector&lt;qreal&gt; getBufferLevels(const QAudioBuffer &amp;buffer);

template &lt;class T&gt;
static QVector&lt;qreal&gt; getBufferLevels(const T *buffer, int frames, int channels);

AudioRecorder::AudioRecorder(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::AudioRecorder),
    outputLocationSet(false)
{
    ui-&gt;setupUi(this);

    audioRecorder = new QAudioRecorder(this);
    probe = new QAudioProbe;
    connect(probe, SIGNAL(audioBufferProbed(QAudioBuffer)),
            this, SLOT(processBuffer(QAudioBuffer)));
    probe-&gt;setSource(audioRecorder);

    //audio devices
    ui-&gt;audioDeviceBox-&gt;addItem(tr(&quot;Default&quot;), QVariant(QString()));
    foreach (const QString &amp;device, audioRecorder-&gt;audioInputs()) {
        ui-&gt;audioDeviceBox-&gt;addItem(device, QVariant(device));
    }

    //audio codecs
    ui-&gt;audioCodecBox-&gt;addItem(tr(&quot;Default&quot;), QVariant(QString()));
    foreach (const QString &amp;codecName, audioRecorder-&gt;supportedAudioCodecs()) {
        ui-&gt;audioCodecBox-&gt;addItem(codecName, QVariant(codecName));
    }

    //containers
    ui-&gt;containerBox-&gt;addItem(tr(&quot;Default&quot;), QVariant(QString()));
    foreach (const QString &amp;containerName, audioRecorder-&gt;supportedContainers()) {
        ui-&gt;containerBox-&gt;addItem(containerName, QVariant(containerName));
    }

    //sample rate
    ui-&gt;sampleRateBox-&gt;addItem(tr(&quot;Default&quot;), QVariant(0));
    foreach (int sampleRate, audioRecorder-&gt;supportedAudioSampleRates()) {
        ui-&gt;sampleRateBox-&gt;addItem(QString::number(sampleRate), QVariant(
                sampleRate));
    }

    //channels
    ui-&gt;channelsBox-&gt;addItem(tr(&quot;Default&quot;), QVariant(-1));
    ui-&gt;channelsBox-&gt;addItem(QStringLiteral(&quot;1&quot;), QVariant(1));
    ui-&gt;channelsBox-&gt;addItem(QStringLiteral(&quot;2&quot;), QVariant(2));
    ui-&gt;channelsBox-&gt;addItem(QStringLiteral(&quot;4&quot;), QVariant(4));

    //quality
    ui-&gt;qualitySlider-&gt;setRange(0, int(QMultimedia::VeryHighQuality));
    ui-&gt;qualitySlider-&gt;setValue(int(QMultimedia::NormalQuality));

    //bitrates:
    ui-&gt;bitrateBox-&gt;addItem(tr(&quot;Default&quot;), QVariant(0));
    ui-&gt;bitrateBox-&gt;addItem(QStringLiteral(&quot;32000&quot;), QVariant(32000));
    ui-&gt;bitrateBox-&gt;addItem(QStringLiteral(&quot;64000&quot;), QVariant(64000));
    ui-&gt;bitrateBox-&gt;addItem(QStringLiteral(&quot;96000&quot;), QVariant(96000));
    ui-&gt;bitrateBox-&gt;addItem(QStringLiteral(&quot;128000&quot;), QVariant(128000));

    connect(audioRecorder, SIGNAL(durationChanged(qint64)), this,
            SLOT(updateProgress(qint64)));
    connect(audioRecorder, SIGNAL(statusChanged(QMediaRecorder::Status)), this,
            SLOT(updateStatus(QMediaRecorder::Status)));
    connect(audioRecorder, SIGNAL(stateChanged(QMediaRecorder::State)),
            this, SLOT(onStateChanged(QMediaRecorder::State)));
    connect(audioRecorder, SIGNAL(error(QMediaRecorder::Error)), this,
            SLOT(displayErrorMessage()));
}

AudioRecorder::~AudioRecorder()
{
    delete audioRecorder;
    delete probe;
}

void AudioRecorder::updateProgress(qint64 duration)
{
    if (audioRecorder-&gt;error() != QMediaRecorder::NoError || duration &lt; 2000)
        return;

    ui-&gt;statusbar-&gt;showMessage(tr(&quot;Recorded %1 sec&quot;).arg(duration / 1000));
}

void AudioRecorder::updateStatus(QMediaRecorder::Status status)
{
    QString statusMessage;

    switch (status) {
    case QMediaRecorder::RecordingStatus:
        statusMessage = tr(&quot;Recording to %1&quot;).arg(audioRecorder-&gt;actualLocation().toString());
        break;
    case QMediaRecorder::PausedStatus:
        clearAudioLevels();
        statusMessage = tr(&quot;Paused&quot;);
        break;
    case QMediaRecorder::UnloadedStatus:
    case QMediaRecorder::LoadedStatus:
        clearAudioLevels();
        statusMessage = tr(&quot;Stopped&quot;);
    default:
        break;
    }

    if (audioRecorder-&gt;error() == QMediaRecorder::NoError)
        ui-&gt;statusbar-&gt;showMessage(statusMessage);
}

void AudioRecorder::onStateChanged(QMediaRecorder::State state)
{
    switch (state) {
    case QMediaRecorder::RecordingState:
        ui-&gt;recordButton-&gt;setText(tr(&quot;Stop&quot;));
        ui-&gt;pauseButton-&gt;setText(tr(&quot;Pause&quot;));
        break;
    case QMediaRecorder::PausedState:
        ui-&gt;recordButton-&gt;setText(tr(&quot;Stop&quot;));
        ui-&gt;pauseButton-&gt;setText(tr(&quot;Resume&quot;));
        break;
    case QMediaRecorder::StoppedState:
        ui-&gt;recordButton-&gt;setText(tr(&quot;Record&quot;));
        ui-&gt;pauseButton-&gt;setText(tr(&quot;Pause&quot;));
        break;
    }

    ui-&gt;pauseButton-&gt;setEnabled(audioRecorder-&gt;state() != QMediaRecorder::StoppedState);
}

static QVariant boxValue(const QComboBox *box)
{
    int idx = box-&gt;currentIndex();
    if (idx == -1)
        return QVariant();

    return box-&gt;itemData(idx);
}

void AudioRecorder::toggleRecord()
{
    if (audioRecorder-&gt;state() == QMediaRecorder::StoppedState) {
        audioRecorder-&gt;setAudioInput(boxValue(ui-&gt;audioDeviceBox).toString());

        QAudioEncoderSettings settings;
        settings.setCodec(boxValue(ui-&gt;audioCodecBox).toString());
        settings.setSampleRate(boxValue(ui-&gt;sampleRateBox).toInt());
        settings.setBitRate(boxValue(ui-&gt;bitrateBox).toInt());
        settings.setChannelCount(boxValue(ui-&gt;channelsBox).toInt());
        settings.setQuality(QMultimedia::EncodingQuality(ui-&gt;qualitySlider-&gt;value()));
        settings.setEncodingMode(ui-&gt;constantQualityRadioButton-&gt;isChecked() ?
                                 QMultimedia::ConstantQualityEncoding :
                                 QMultimedia::ConstantBitRateEncoding);

        QString container = boxValue(ui-&gt;containerBox).toString();

        audioRecorder-&gt;setEncodingSettings(settings, QVideoEncoderSettings(), container);
        audioRecorder-&gt;record();
    }
    else {
        audioRecorder-&gt;stop();
    }
}

void AudioRecorder::togglePause()
{
    if (audioRecorder-&gt;state() != QMediaRecorder::PausedState)
        audioRecorder-&gt;pause();
    else
        audioRecorder-&gt;record();
}

void AudioRecorder::setOutputLocation()
{
    QString fileName = QFileDialog::getSaveFileName();
    audioRecorder-&gt;setOutputLocation(QUrl::fromLocalFile(fileName));
    outputLocationSet = true;
}

void AudioRecorder::displayErrorMessage()
{
    ui-&gt;statusbar-&gt;showMessage(audioRecorder-&gt;errorString());
}

void AudioRecorder::clearAudioLevels()
{
    for (int i = 0; i &lt; audioLevels.size(); ++i)
        audioLevels.at(i)-&gt;setLevel(0);
}

// This function returns the maximum possible sample value for a given audio format
qreal getPeakValue(const QAudioFormat&amp; format)
{
    // Note: Only the most common sample formats are supported
    if (!format.isValid())
        return qreal(0);

    if (format.codec() != &quot;audio/pcm&quot;)
        return qreal(0);

    switch (format.sampleType()) {
    case QAudioFormat::Unknown:
        break;
    case QAudioFormat::Float:
        if (format.sampleSize() != 32) // other sample formats are not supported
            return qreal(0);
        return qreal(1.00003);
    case QAudioFormat::SignedInt:
        if (format.sampleSize() == 32)
            return qreal(INT_MAX);
        if (format.sampleSize() == 16)
            return qreal(SHRT_MAX);
        if (format.sampleSize() == 8)
            return qreal(CHAR_MAX);
        break;
    case QAudioFormat::UnSignedInt:
        if (format.sampleSize() == 32)
            return qreal(UINT_MAX);
        if (format.sampleSize() == 16)
            return qreal(USHRT_MAX);
        if (format.sampleSize() == 8)
            return qreal(UCHAR_MAX);
        break;
    }

    return qreal(0);
}

// returns the audio level for each channel
QVector&lt;qreal&gt; getBufferLevels(const QAudioBuffer&amp; buffer)
{
    QVector&lt;qreal&gt; values;

    if (!buffer.format().isValid() || buffer.format().byteOrder() != QAudioFormat::LittleEndian)
        return values;

    if (buffer.format().codec() != &quot;audio/pcm&quot;)
        return values;

    int channelCount = buffer.format().channelCount();
    values.fill(0, channelCount);
    qreal peak_value = getPeakValue(buffer.format());
    if (qFuzzyCompare(peak_value, qreal(0)))
        return values;

    switch (buffer.format().sampleType()) {
    case QAudioFormat::Unknown:
    case QAudioFormat::UnSignedInt:
        if (buffer.format().sampleSize() == 32)
            values = getBufferLevels(buffer.constData&lt;quint32&gt;(), buffer.frameCount(), channelCount);
        if (buffer.format().sampleSize() == 16)
            values = getBufferLevels(buffer.constData&lt;quint16&gt;(), buffer.frameCount(), channelCount);
        if (buffer.format().sampleSize() == 8)
            values = getBufferLevels(buffer.constData&lt;quint8&gt;(), buffer.frameCount(), channelCount);
        for (int i = 0; i &lt; values.size(); ++i)
            values[i] = qAbs(values.at(i) - peak_value / 2) / (peak_value / 2);
        break;
    case QAudioFormat::Float:
        if (buffer.format().sampleSize() == 32) {
            values = getBufferLevels(buffer.constData&lt;float&gt;(), buffer.frameCount(), channelCount);
            for (int i = 0; i &lt; values.size(); ++i)
                values[i] /= peak_value;
        }
        break;
    case QAudioFormat::SignedInt:
        if (buffer.format().sampleSize() == 32)
            values = getBufferLevels(buffer.constData&lt;qint32&gt;(), buffer.frameCount(), channelCount);
        if (buffer.format().sampleSize() == 16)
            values = getBufferLevels(buffer.constData&lt;qint16&gt;(), buffer.frameCount(), channelCount);
        if (buffer.format().sampleSize() == 8)
            values = getBufferLevels(buffer.constData&lt;qint8&gt;(), buffer.frameCount(), channelCount);
        for (int i = 0; i &lt; values.size(); ++i)
            values[i] /= peak_value;
        break;
    }

    return values;
}

template &lt;class T&gt;
QVector&lt;qreal&gt; getBufferLevels(const T *buffer, int frames, int channels)
{
    QVector&lt;qreal&gt; max_values;
    max_values.fill(0, channels);

    for (int i = 0; i &lt; frames; ++i) {
        for (int j = 0; j &lt; channels; ++j) {
            qreal value = qAbs(qreal(buffer[i * channels + j]));
            if (value &gt; max_values.at(j))
                max_values.replace(j, value);
        }
    }

    return max_values;
}

void AudioRecorder::processBuffer(const QAudioBuffer&amp; buffer)
{
    if (audioLevels.count() != buffer.format().channelCount()) {
        qDeleteAll(audioLevels);
        audioLevels.clear();
        for (int i = 0; i &lt; buffer.format().channelCount(); ++i) {
            QAudioLevel *level = new QAudioLevel(ui-&gt;centralwidget);
            audioLevels.append(level);
            ui-&gt;levelsLayout-&gt;addWidget(level);
        }
    }

    QVector&lt;qreal&gt; levels = getBufferLevels(buffer);
    for (int i = 0; i &lt; levels.count(); ++i)
        audioLevels.at(i)-&gt;setLevel(levels.at(i));
}

</db:programlisting>
</db:article>
