<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStandardItem Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> class provides an item for use with the <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStandardItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStandardItem is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Items usually contain text, icons, or checkboxes.</db:para>
<db:para>Each item can have its own background brush which is set with the <db:link xlink:href="qstandarditem.xml#setBackground">setBackground</db:link>() function. The current background brush can be found with <db:link xlink:href="qstandarditem.xml#background">background</db:link>(). The text label for each item can be rendered with its own font and brush. These are specified with the <db:link xlink:href="qstandarditem.xml#setFont">setFont</db:link>() and <db:link xlink:href="qstandarditem.xml#setForeground">setForeground</db:link>() functions, and read with <db:link xlink:href="qstandarditem.xml#font">font</db:link>() and <db:link xlink:href="qstandarditem.xml#foreground">foreground</db:link>().</db:para>
<db:para>By default, items are enabled, editable, selectable, checkable, and can be used both as the source of a drag and drop operation and as a drop target. Each item's flags can be changed by calling <db:link xlink:href="qstandarditem.xml#setFlags">setFlags</db:link>(). Checkable items can be checked and unchecked with the <db:link xlink:href="qstandarditem.xml#setCheckState">setCheckState</db:link>() function. The corresponding <db:link xlink:href="qstandarditem.xml#checkState">checkState</db:link>() function indicates whether the item is currently checked.</db:para>
<db:para>You can store application-specific data in an item by calling <db:link xlink:href="qstandarditem.xml#setData">setData</db:link>().</db:para>
<db:para>Each item can have a two-dimensional table of child items. This makes it possible to build hierarchies of items. The typical hierarchy is the tree, in which case the child table is a table with a single column (a list).</db:para>
<db:para>The dimensions of the child table can be set with <db:link xlink:href="qstandarditem.xml#setRowCount">setRowCount</db:link>() and <db:link xlink:href="qstandarditem.xml#setColumnCount">setColumnCount</db:link>(). Items can be positioned in the child table with <db:link xlink:href="qstandarditem.xml#setChild">setChild</db:link>(). Get a pointer to a child item with <db:link xlink:href="qstandarditem.xml#child">child</db:link>(). New rows and columns of children can also be inserted with <db:link xlink:href="qstandarditem.xml#insertRow">insertRow</db:link>() and <db:link xlink:href="qstandarditem.xml#insertColumn">insertColumn</db:link>(), or appended with <db:link xlink:href="qstandarditem.xml#appendRow">appendRow</db:link>() and <db:link xlink:href="qstandarditem.xml#appendColumn">appendColumn</db:link>(). When using the append and insert functions, the dimensions of the child table will grow as needed.</db:para>
<db:para>An existing row of children can be removed with <db:link xlink:href="qstandarditem.xml#removeRow">removeRow</db:link>() or <db:link xlink:href="qstandarditem.xml#takeRow">takeRow</db:link>(); correspondingly, a column can be removed with <db:link xlink:href="qstandarditem.xml#removeColumn">removeColumn</db:link>() or <db:link xlink:href="qstandarditem.xml#takeColumn">takeColumn</db:link>().</db:para>
<db:para>An item's children can be sorted by calling <db:link xlink:href="qstandarditem.xml#sortChildren">sortChildren</db:link>().</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>When subclassing <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> to provide custom items, it is possible to define new types for them so that they can be distinguished from the base class. The <db:link xlink:href="qstandarditem.xml#type">type</db:link>() function should be reimplemented to return a new type value equal to or greater than <db:link xlink:href="qstandarditem.xml#ItemType-enum">UserType</db:link>.</db:para>
<db:para>Reimplement <db:link xlink:href="qstandarditem.xml#data">data</db:link>() and <db:link xlink:href="qstandarditem.xml#setData">setData</db:link>() if you want to perform custom handling of data queries and/or control how an item's data is represented.</db:para>
<db:para>Reimplement <db:link xlink:href="qstandarditem.xml#clone">clone</db:link>() if you want <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> to be able to create instances of your custom item class on demand (see <db:link xlink:href="qstandarditemmodel.xml#setItemPrototype">QStandardItemModel::setItemPrototype</db:link>()).</db:para>
<db:para>Reimplement <db:link xlink:href="qstandarditem.xml#read">read</db:link>() and <db:link xlink:href="qstandarditem.xml#write">write</db:link>() if you want to control how items are represented in their serialized form.</db:para>
<db:para>Reimplement <db:link xlink:href="qstandarditem.xml#operator-lt">operator&lt;</db:link>() if you want to control the semantics of item comparison. <db:link xlink:href="qstandarditem.xml#operator-lt">operator&lt;</db:link>() determines the sorted order when sorting items with <db:link xlink:href="qstandarditem.xml#sortChildren">sortChildren</db:link>() or with <db:link xlink:href="qstandarditemmodel.xml#sort">QStandardItemModel::sort</db:link>().</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml#item-view-convenience-classes">Item View Convenience Classes</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ItemType-enum">
<db:title>enum QStandardItem::ItemType</db:title>
<db:enumsynopsis>
<db:enumname>ItemType</db:enumname>
<db:enumitem>
<db:enumidentifier>Type</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserType</db:enumidentifier>
<db:enumvalue>1000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the types that are used to describe standard items.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandarditem.xml">QStandardItem</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default type for standard items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandarditem.xml">QStandardItem</db:link></db:emphasis>::UserType</db:code></db:para>
</db:td>
<db:td><db:code>1000</db:code></db:td>
<db:td>
<db:para>The minimum value for custom types. Values below UserType are reserved by Qt.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can define new user types in <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> subclasses to ensure that custom items are treated specially; for example, when items are sorted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStandardItem">
<db:title>QStandardItem::QStandardItem()</db:title>
<db:constructorsynopsis>
<db:methodname>QStandardItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an item.</db:para>
</db:section>
<db:section xml:id="QStandardItem-1">
<db:title>[explicit] QStandardItem::QStandardItem(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStandardItem</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an item with the given <db:code role="parameter">text</db:code>.</db:para>
</db:section>
<db:section xml:id="QStandardItem-2">
<db:title>QStandardItem::QStandardItem(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStandardItem</db:methodname>
<db:methodparam>
<db:type>const QIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem(const QIcon &amp;icon, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an item with the given <db:code role="parameter">icon</db:code> and <db:code role="parameter">text</db:code>.</db:para>
</db:section>
<db:section xml:id="QStandardItem-3">
<db:title>[explicit] QStandardItem::QStandardItem(int <db:emphasis>rows</db:emphasis>, int <db:emphasis>columns</db:emphasis> = 1)</db:title>
<db:constructorsynopsis>
<db:methodname>QStandardItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem(int rows, int columns)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an item with <db:code role="parameter">rows</db:code> rows and <db:code role="parameter">columns</db:code> columns of child items.</db:para>
</db:section>
<db:section xml:id="QStandardItem-4">
<db:title>[protected] QStandardItem::QStandardItem(const QStandardItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStandardItem</db:methodname>
<db:methodparam>
<db:type>const QStandardItem &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem(const QStandardItem &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>. Note that <db:link xlink:href="qstandarditem.xml#model">model</db:link>() is not copied.</db:para>
<db:para>This function is useful when reimplementing <db:link xlink:href="qstandarditem.xml#clone">clone</db:link>().</db:para>
</db:section>
<db:section xml:id="dtor.QStandardItem">
<db:title>[virtual] QStandardItem::~QStandardItem()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QStandardItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QStandardItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the item. This causes the item's children to be destructed as well.</db:para>
</db:section>
<db:section xml:id="accessibleDescription">
<db:title>QString QStandardItem::accessibleDescription() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>accessibleDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString accessibleDescription() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's accessible description.</db:para>
<db:para>The accessible description is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setAccessibleDescription">setAccessibleDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#accessibleText">accessibleText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="accessibleText">
<db:title>QString QStandardItem::accessibleText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>accessibleText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString accessibleText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's accessible text.</db:para>
<db:para>The accessible text is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setAccessibleText">setAccessibleText</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#accessibleDescription">accessibleDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appendColumn">
<db:title>void QStandardItem::appendColumn(const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendColumn</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendColumn(const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a column containing <db:code role="parameter">items</db:code>. If necessary, the row count is increased to the size of <db:code role="parameter">items</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#insertColumn">insertColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appendRow">
<db:title>void QStandardItem::appendRow(const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendRow</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendRow(const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a row containing <db:code role="parameter">items</db:code>. If necessary, the column count is increased to the size of <db:code role="parameter">items</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#insertRow">insertRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appendRow-1">
<db:title>void QStandardItem::appendRow(QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendRow</db:methodname>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendRow(QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends a row containing <db:code role="parameter">item</db:code>.</db:para>
<db:para>When building a list or a tree that has only one column, this function provides a convenient way to append a single new item.</db:para>
</db:section>
<db:section xml:id="appendRows">
<db:title>void QStandardItem::appendRows(const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendRows</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendRows(const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends rows containing <db:code role="parameter">items</db:code>. The column count will not change.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#insertRow">insertRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="background">
<db:title>QBrush QStandardItem::background() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>background</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush background() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to render the item's background.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#foreground">foreground</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setBackground">setBackground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkState">
<db:title>Qt::CheckState QStandardItem::checkState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::CheckState</db:type>
<db:methodname>checkState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::CheckState checkState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the checked state of the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setCheckState">setCheckState</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#isCheckable">isCheckable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="child">
<db:title>QStandardItem *QStandardItem::child(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStandardItem *</db:type>
<db:methodname>child</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * child(int row, int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the child item at (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) if one has been set; otherwise returns <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setChild">setChild</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#takeChild">takeChild</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearData">
<db:title>void QStandardItem::clearData()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearData()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all the data from all roles previously set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clone">
<db:title>[virtual] QStandardItem *QStandardItem::clone() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QStandardItem *</db:type>
<db:methodname>clone</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * clone() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this item. The item's children are not copied.</db:para>
<db:para>When subclassing <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link>, you can reimplement this function to provide <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> with a factory that it can use to create new items on demand.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setItemPrototype">QStandardItemModel::setItemPrototype</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="column">
<db:title>int QStandardItem::column() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>column</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int column() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the column where the item is located in its parent's child table, or -1 if the item has no parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#row">row</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnCount">
<db:title>int QStandardItem::columnCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of child item columns that the item has.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setColumnCount">setColumnCount</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#rowCount">rowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[virtual] QVariant QStandardItem::data(int <db:emphasis>role</db:emphasis> = Qt::UserRole + 1) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::UserRole + 1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data(int role) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's data for the given <db:code role="parameter">role</db:code>, or an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> if there is no data for the role.</db:para>
<db:para>If you reimplement this function, your reimplementation should call the base implementation for roles you don't handle, otherwise getting flags, e.g. by calling <db:link xlink:href="qstandarditem.xml#flags">flags</db:link>(), <db:link xlink:href="qstandarditem.xml#isCheckable">isCheckable</db:link>(), <db:link xlink:href="qstandarditem.xml#isEditable">isEditable</db:link>() etc., will not work.</db:para>
<db:note>
<db:para>The default implementation treats <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link> and <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> as referring to the same data.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="emitDataChanged">
<db:title>[protected] void QStandardItem::emitDataChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>emitDataChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void emitDataChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Causes the model associated with this item to emit a <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() signal for this item.</db:para>
<db:para>You normally only need to call this function if you have subclassed <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> and reimplemented <db:link xlink:href="qstandarditem.xml#data">data</db:link>() and/or <db:link xlink:href="qstandarditem.xml#setData">setData</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>Qt::ItemFlags QStandardItem::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::ItemFlags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::ItemFlags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item flags for the item.</db:para>
<db:para>The item flags determine how the user can interact with the item.</db:para>
<db:para>By default, items are enabled, editable, selectable, checkable, and can be used both as the source of a drag and drop operation and as a drop target.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>QFont QStandardItem::font() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont</db:type>
<db:methodname>font</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont font() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font used to render the item's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="foreground">
<db:title>QBrush QStandardItem::foreground() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>foreground</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush foreground() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to render the item's foreground (e.g. text).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setForeground">setForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#background">background</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasChildren">
<db:title>bool QStandardItem::hasChildren() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasChildren</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasChildren() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item has any children; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#rowCount">rowCount</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#columnCount">columnCount</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#child">child</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon">
<db:title>QIcon QStandardItem::icon() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIcon</db:type>
<db:methodname>icon</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIcon icon() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's icon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setIcon">setIcon</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#iconSize-prop">iconSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>QModelIndex QStandardItem::index() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>index</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex index() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> associated with this item.</db:para>
<db:para>When you need to invoke item functionality in a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>-based API (e.g. <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link>), you can call this function to obtain an index that corresponds to the item's location in the model.</db:para>
<db:para>If the item is not associated with a model, an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#model">model</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#itemFromIndex">QStandardItemModel::itemFromIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumn">
<db:title>void QStandardItem::insertColumn(int <db:emphasis>column</db:emphasis>, const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertColumn(int column, const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a column at <db:code role="parameter">column</db:code> containing <db:code role="parameter">items</db:code>. If necessary, the row count is increased to the size of <db:code role="parameter">items</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#insertRow">insertRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumns">
<db:title>void QStandardItem::insertColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertColumns(int column, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">count</db:code> columns of child items at column <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#insertColumn">insertColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#insertRows">insertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRow">
<db:title>void QStandardItem::insertRow(int <db:emphasis>row</db:emphasis>, const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertRow(int row, const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a row at <db:code role="parameter">row</db:code> containing <db:code role="parameter">items</db:code>. If necessary, the column count is increased to the size of <db:code role="parameter">items</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#insertColumn">insertColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRow-1">
<db:title>void QStandardItem::insertRow(int <db:emphasis>row</db:emphasis>, QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertRow(int row, QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts a row at <db:code role="parameter">row</db:code> containing <db:code role="parameter">item</db:code>.</db:para>
<db:para>When building a list or a tree that has only one column, this function provides a convenient way to insert a single new item.</db:para>
</db:section>
<db:section xml:id="insertRows">
<db:title>void QStandardItem::insertRows(int <db:emphasis>row</db:emphasis>, const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertRows(int row, const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">items</db:code> at <db:code role="parameter">row</db:code>. The column count won't be changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#insertRow">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#insertColumn">insertColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRows-1">
<db:title>void QStandardItem::insertRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertRows(int row, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">count</db:code> rows of child items at row <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#insertRow">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#insertColumns">insertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAutoTristate">
<db:title>bool QStandardItem::isAutoTristate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAutoTristate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAutoTristate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the item is tristate and is controlled by <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link>.</db:para>
<db:para>The default value is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setAutoTristate">setAutoTristate</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#isCheckable">isCheckable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#checkState">checkState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCheckable">
<db:title>bool QStandardItem::isCheckable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCheckable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCheckable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the item is user-checkable.</db:para>
<db:para>The default value is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setCheckable">setCheckable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#checkState">checkState</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#isUserTristate">isUserTristate</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#isAutoTristate">isAutoTristate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDragEnabled">
<db:title>bool QStandardItem::isDragEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDragEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDragEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the item is drag enabled. An item that is drag enabled can be dragged by the user.</db:para>
<db:para>The default value is true.</db:para>
<db:para>Note that item dragging must be enabled in the view for dragging to work; see <db:link xlink:href="qabstractitemview.xml#dragEnabled-prop">QAbstractItemView::dragEnabled</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setDragEnabled">setDragEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#isDropEnabled">isDropEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDropEnabled">
<db:title>bool QStandardItem::isDropEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDropEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDropEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the item is drop enabled. When an item is drop enabled, it can be used as a drop target.</db:para>
<db:para>The default value is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setDropEnabled">setDropEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#isDragEnabled">isDragEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEditable">
<db:title>bool QStandardItem::isEditable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEditable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEditable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the item can be edited by the user.</db:para>
<db:para>When an item is editable (and enabled), the user can edit the item by invoking one of the view's edit triggers; see <db:link xlink:href="qabstractitemview.xml#editTriggers-prop">QAbstractItemView::editTriggers</db:link>.</db:para>
<db:para>The default value is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setEditable">setEditable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEnabled">
<db:title>bool QStandardItem::isEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the item is enabled.</db:para>
<db:para>When an item is enabled, the user can interact with it. The possible types of interaction are specified by the other item flags, such as <db:link xlink:href="qstandarditem.xml#isEditable">isEditable</db:link>() and <db:link xlink:href="qstandarditem.xml#isSelectable">isSelectable</db:link>().</db:para>
<db:para>The default value is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setEnabled">setEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSelectable">
<db:title>bool QStandardItem::isSelectable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSelectable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSelectable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the item is selectable by the user.</db:para>
<db:para>The default value is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setSelectable">setSelectable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUserTristate">
<db:title>bool QStandardItem::isUserTristate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isUserTristate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isUserTristate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the item is tristate; that is, if it's checkable with three separate states and the user can cycle through all three states.</db:para>
<db:para>The default value is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setUserTristate">setUserTristate</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#isCheckable">isCheckable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#checkState">checkState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="model">
<db:title>QStandardItemModel *QStandardItem::model() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStandardItemModel *</db:type>
<db:methodname>model</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItemModel * model() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> that this item belongs to.</db:para>
<db:para>If the item is not a child of another item that belongs to the model, this function returns <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#index">index</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="multiData">
<db:title>[virtual, since 6.0] void QStandardItem::multiData(QModelRoleDataSpan <db:emphasis>roleDataSpan</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>multiData</db:methodname>
<db:methodparam>
<db:type>QModelRoleDataSpan</db:type>
<db:parameter>roleDataSpan</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void multiData(QModelRoleDataSpan roleDataSpan) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills the <db:code role="parameter">roleDataSpan</db:code> span with the data from this item.</db:para>
<db:para>The default implementation simply calls <db:link xlink:href="qstandarditem.xml#data">data</db:link>() for each role in the span.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parent">
<db:title>QStandardItem *QStandardItem::parent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStandardItem *</db:type>
<db:methodname>parent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * parent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's parent item, or <db:code>nullptr</db:code> if the item has no parent.</db:para>
<db:note>
<db:para>For toplevel items parent() returns <db:code>nullptr</db:code>. To receive toplevel item's parent use <db:link xlink:href="qstandarditemmodel.xml#invisibleRootItem">QStandardItemModel::invisibleRootItem</db:link>() instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#child">child</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#invisibleRootItem">QStandardItemModel::invisibleRootItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>[virtual] void QStandardItem::read(QDataStream &amp;<db:emphasis>in</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>read</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void read(QDataStream &amp;in)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the item from stream <db:code role="parameter">in</db:code>. Only the data and flags of the item are read, not the child items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeColumn">
<db:title>void QStandardItem::removeColumn(int <db:emphasis>column</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeColumn(int column)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">column</db:code>. The items that were in the column are deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#takeColumn">takeColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#removeRow">removeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeColumns">
<db:title>void QStandardItem::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeColumns(int column, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">count</db:code> columns at column <db:code role="parameter">column</db:code>. The items that were in those columns are deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#removeColumn">removeColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#removeRows">removeRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRow">
<db:title>void QStandardItem::removeRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeRow(int row)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">row</db:code>. The items that were in the row are deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#takeRow">takeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#removeColumn">removeColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRows">
<db:title>void QStandardItem::removeRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeRows(int row, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">count</db:code> rows at row <db:code role="parameter">row</db:code>. The items that were in those rows are deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#removeRow">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#removeColumn">removeColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="row">
<db:title>int QStandardItem::row() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>row</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int row() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the row where the item is located in its parent's child table, or -1 if the item has no parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#column">column</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowCount">
<db:title>int QStandardItem::rowCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of child item rows that the item has.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setRowCount">setRowCount</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#columnCount">columnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAccessibleDescription">
<db:title>void QStandardItem::setAccessibleDescription(const QString &amp;<db:emphasis>accessibleDescription</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAccessibleDescription</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>accessibleDescription</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAccessibleDescription(const QString &amp;accessibleDescription)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's accessible description to the string specified by <db:code role="parameter">accessibleDescription</db:code>.</db:para>
<db:para>The accessible description is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#accessibleDescription">accessibleDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setAccessibleText">setAccessibleText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAccessibleText">
<db:title>void QStandardItem::setAccessibleText(const QString &amp;<db:emphasis>accessibleText</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAccessibleText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>accessibleText</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAccessibleText(const QString &amp;accessibleText)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's accessible text to the string specified by <db:code role="parameter">accessibleText</db:code>.</db:para>
<db:para>The accessible text is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#accessibleText">accessibleText</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setAccessibleDescription">setAccessibleDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoTristate">
<db:title>void QStandardItem::setAutoTristate(bool <db:emphasis>tristate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAutoTristate</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>tristate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAutoTristate(bool tristate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Determines that the item is tristate and controlled by <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> if <db:code role="parameter">tristate</db:code> is <db:code>true</db:code>. This enables automatic management of the state of parent items in <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> (checked if all children are checked, unchecked if all children are unchecked, or partially checked if only some children are checked).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#isAutoTristate">isAutoTristate</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setCheckable">setCheckable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setCheckState">setCheckState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBackground">
<db:title>void QStandardItem::setBackground(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBackground</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBackground(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's background brush to the specified <db:code role="parameter">brush</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#background">background</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCheckState">
<db:title>void QStandardItem::setCheckState(Qt::CheckState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCheckState</db:methodname>
<db:methodparam>
<db:type>Qt::CheckState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCheckState(Qt::CheckState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the check state of the item to be <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#checkState">checkState</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setCheckable">setCheckable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCheckable">
<db:title>void QStandardItem::setCheckable(bool <db:emphasis>checkable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCheckable</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>checkable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCheckable(bool checkable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the item is user-checkable. If <db:code role="parameter">checkable</db:code> is true, the item can be checked by the user; otherwise, the user cannot check the item.</db:para>
<db:para>The item delegate will render a checkable item with a check box next to the item's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#isCheckable">isCheckable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setCheckState">setCheckState</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setUserTristate">setUserTristate</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setAutoTristate">setAutoTristate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setChild">
<db:title>void QStandardItem::setChild(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setChild</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setChild(int row, int column, QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the child item at (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) to <db:code role="parameter">item</db:code>. This item (the parent item) takes ownership of <db:code role="parameter">item</db:code>. If necessary, the row count and column count are increased to fit the item.</db:para>
<db:note>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">item</db:code> removes the item.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#child">child</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setChild-1">
<db:title>void QStandardItem::setChild(int <db:emphasis>row</db:emphasis>, QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setChild</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setChild(int row, QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the child at <db:code role="parameter">row</db:code> to <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="setColumnCount">
<db:title>void QStandardItem::setColumnCount(int <db:emphasis>columns</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnCount(int columns)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of child item columns to <db:code role="parameter">columns</db:code>. If this is less than <db:link xlink:href="qstandarditem.xml#columnCount">columnCount</db:link>(), the data in the unwanted columns is discarded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#columnCount">columnCount</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setRowCount">setRowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>[virtual] void QStandardItem::setData(const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::UserRole + 1)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::UserRole + 1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(const QVariant &amp;value, int role)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's data for the given <db:code role="parameter">role</db:code> to the specified <db:code role="parameter">value</db:code>.</db:para>
<db:para>If you subclass <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> and reimplement this function, your reimplementation should:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>call <db:link xlink:href="qstandarditem.xml#emitDataChanged">emitDataChanged</db:link>() if you do not call the base implementation of setData(). This will ensure that e.g. views using the model are notified of the changes</db:para>
</db:listitem>
<db:listitem>
<db:para>call the base implementation for roles you don't handle, otherwise setting flags, e.g. by calling <db:link xlink:href="qstandarditem.xml#setFlags">setFlags</db:link>(), <db:link xlink:href="qstandarditem.xml#setCheckable">setCheckable</db:link>(), <db:link xlink:href="qstandarditem.xml#setEditable">setEditable</db:link>() etc., will not work.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>The default implementation treats <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link> and <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> as referring to the same data.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qstandarditem.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDragEnabled">
<db:title>void QStandardItem::setDragEnabled(bool <db:emphasis>dragEnabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDragEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>dragEnabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDragEnabled(bool dragEnabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the item is drag enabled. If <db:code role="parameter">dragEnabled</db:code> is true, the item can be dragged by the user; otherwise, the user cannot drag the item.</db:para>
<db:para>Note that you also need to ensure that item dragging is enabled in the view; see <db:link xlink:href="qabstractitemview.xml#dragEnabled-prop">QAbstractItemView::dragEnabled</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#isDragEnabled">isDragEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setDropEnabled">setDropEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDropEnabled">
<db:title>void QStandardItem::setDropEnabled(bool <db:emphasis>dropEnabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDropEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>dropEnabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDropEnabled(bool dropEnabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the item is drop enabled. If <db:code role="parameter">dropEnabled</db:code> is true, the item can be used as a drop target; otherwise, it cannot.</db:para>
<db:para>Note that you also need to ensure that drops are enabled in the view; see <db:link xlink:href="qwidget.xml#acceptDrops-prop">QWidget::acceptDrops</db:link>(); and that the model supports the desired drop actions; see <db:link xlink:href="qabstractitemmodel.xml#supportedDropActions">QAbstractItemModel::supportedDropActions</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#isDropEnabled">isDropEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setDragEnabled">setDragEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEditable">
<db:title>void QStandardItem::setEditable(bool <db:emphasis>editable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEditable</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>editable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEditable(bool editable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the item is editable. If <db:code role="parameter">editable</db:code> is true, the item can be edited by the user; otherwise, the user cannot edit the item.</db:para>
<db:para>How the user can edit items in a view is determined by the view's edit triggers; see <db:link xlink:href="qabstractitemview.xml#editTriggers-prop">QAbstractItemView::editTriggers</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#isEditable">isEditable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEnabled">
<db:title>void QStandardItem::setEnabled(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEnabled(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the item is enabled. If <db:code role="parameter">enabled</db:code> is true, the item is enabled, meaning that the user can interact with the item; if <db:code role="parameter">enabled</db:code> is false, the user cannot interact with the item.</db:para>
<db:para>This flag takes precedence over the other item flags; e.g. if an item is not enabled, it cannot be selected by the user, even if the <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsSelectable</db:link> flag has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#isEnabled">isEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEnabled</db:link></db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlags">
<db:title>void QStandardItem::setFlags(Qt::ItemFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlags</db:methodname>
<db:methodparam>
<db:type>Qt::ItemFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlags(Qt::ItemFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item flags for the item to <db:code role="parameter">flags</db:code>.</db:para>
<db:para>The item flags determine how the user can interact with the item. This is often used to disable an item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#flags">flags</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFont">
<db:title>void QStandardItem::setFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFont</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFont(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the font used to display the item's text to the given <db:code role="parameter">font</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setForeground">
<db:title>void QStandardItem::setForeground(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setForeground</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setForeground(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush used to display the item's foreground (e.g. text) to the given <db:code role="parameter">brush</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#foreground">foreground</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setBackground">setBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIcon">
<db:title>void QStandardItem::setIcon(const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIcon</db:methodname>
<db:methodparam>
<db:type>const QIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIcon(const QIcon &amp;icon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's icon to the <db:code role="parameter">icon</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#icon">icon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowCount">
<db:title>void QStandardItem::setRowCount(int <db:emphasis>rows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowCount(int rows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of child item rows to <db:code role="parameter">rows</db:code>. If this is less than <db:link xlink:href="qstandarditem.xml#rowCount">rowCount</db:link>(), the data in the unwanted rows is discarded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#rowCount">rowCount</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setColumnCount">setColumnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectable">
<db:title>void QStandardItem::setSelectable(bool <db:emphasis>selectable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSelectable</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>selectable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSelectable(bool selectable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the item is selectable. If <db:code role="parameter">selectable</db:code> is true, the item can be selected by the user; otherwise, the user cannot select the item.</db:para>
<db:para>You can control the selection behavior and mode by manipulating their view properties; see <db:link xlink:href="qabstractitemview.xml#selectionMode-prop">QAbstractItemView::selectionMode</db:link> and <db:link xlink:href="qabstractitemview.xml#selectionBehavior-prop">QAbstractItemView::selectionBehavior</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#isSelectable">isSelectable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSizeHint">
<db:title>void QStandardItem::setSizeHint(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSizeHint</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSizeHint(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size hint for the item to be <db:code role="parameter">size</db:code>. If no size hint is set, the item delegate will compute the size hint based on the item data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatusTip">
<db:title>void QStandardItem::setStatusTip(const QString &amp;<db:emphasis>statusTip</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStatusTip</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>statusTip</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStatusTip(const QString &amp;statusTip)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's status tip to the string specified by <db:code role="parameter">statusTip</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#statusTip">statusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setToolTip">setToolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QStandardItem::setText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setText(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's text to the <db:code role="parameter">text</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#text">text</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextAlignment">
<db:title>void QStandardItem::setTextAlignment(Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextAlignment</db:methodname>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextAlignment(Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text alignment for the item's text to the <db:code role="parameter">alignment</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#textAlignment">textAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToolTip">
<db:title>void QStandardItem::setToolTip(const QString &amp;<db:emphasis>toolTip</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setToolTip</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>toolTip</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setToolTip(const QString &amp;toolTip)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's tooltip to the string specified by <db:code role="parameter">toolTip</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#toolTip">toolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUserTristate">
<db:title>void QStandardItem::setUserTristate(bool <db:emphasis>tristate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUserTristate</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>tristate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUserTristate(bool tristate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the item is tristate and controlled by the user. If <db:code role="parameter">tristate</db:code> is true, the user can cycle through three separate states; otherwise, the item is checkable with two states. (Note that this also requires that the item is checkable; see <db:link xlink:href="qstandarditem.xml#isCheckable">isCheckable</db:link>().)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#isUserTristate">isUserTristate</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setCheckable">setCheckable</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setCheckState">setCheckState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWhatsThis">
<db:title>void QStandardItem::setWhatsThis(const QString &amp;<db:emphasis>whatsThis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWhatsThis</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>whatsThis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWhatsThis(const QString &amp;whatsThis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's &quot;What's This?&quot; help to the string specified by <db:code role="parameter">whatsThis</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#whatsThis">whatsThis</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#setToolTip">setToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>QSize QStandardItem::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size hint set for the item, or an invalid <db:link xlink:href="qsize.xml">QSize</db:link> if no size hint has been set.</db:para>
<db:para>If no size hint has been set, the item delegate will compute the size hint based on the item data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setSizeHint">setSizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortChildren">
<db:title>void QStandardItem::sortChildren(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sortChildren</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SortOrder</db:type>
<db:parameter>order</db:parameter>
<db:initializer>Qt::AscendingOrder</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sortChildren(int column, Qt::SortOrder order)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sorts the children of the item using the given <db:code role="parameter">order</db:code>, by the values in the given <db:code role="parameter">column</db:code>.</db:para>
<db:note>
<db:para>This function is recursive, therefore it sorts the children of the item, its grandchildren, etc.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#operator-lt">operator&lt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="statusTip">
<db:title>QString QStandardItem::statusTip() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>statusTip</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString statusTip() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's status tip.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#toolTip">toolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#whatsThis">whatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeChild">
<db:title>QStandardItem *QStandardItem::takeChild(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>QStandardItem *</db:type>
<db:methodname>takeChild</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * takeChild(int row, int column)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the child item at (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) without deleting it, and returns a pointer to the item. If there was no child at the given location, then this function returns <db:code>nullptr</db:code>.</db:para>
<db:para>Note that this function, unlike <db:link xlink:href="qstandarditem.xml#takeRow">takeRow</db:link>() and <db:link xlink:href="qstandarditem.xml#takeColumn">takeColumn</db:link>(), does not affect the dimensions of the child table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#child">child</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#takeRow">takeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#takeColumn">takeColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeColumn">
<db:title>QList&lt;QStandardItem *&gt; QStandardItem::takeColumn(int <db:emphasis>column</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QStandardItem *&gt;</db:type>
<db:methodname>takeColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QStandardItem *&gt; takeColumn(int column)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">column</db:code> without deleting the column items, and returns a list of pointers to the removed items. For items in the column that have not been set, the corresponding pointers in the list will be <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#removeColumn">removeColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#insertColumn">insertColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#takeRow">takeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeRow">
<db:title>QList&lt;QStandardItem *&gt; QStandardItem::takeRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QStandardItem *&gt;</db:type>
<db:methodname>takeRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QStandardItem *&gt; takeRow(int row)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">row</db:code> without deleting the row items, and returns a list of pointers to the removed items. For items in the row that have not been set, the corresponding pointers in the list will be <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#removeRow">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#insertRow">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#takeColumn">takeColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text">
<db:title>QString QStandardItem::text() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>text</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString text() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's text. This is the text that's presented to the user in a view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textAlignment">
<db:title>Qt::Alignment QStandardItem::textAlignment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:methodname>textAlignment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Alignment textAlignment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text alignment for the item's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setTextAlignment">setTextAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolTip">
<db:title>QString QStandardItem::toolTip() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toolTip</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toolTip() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's tooltip.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setToolTip">setToolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#statusTip">statusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#whatsThis">whatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[virtual] int QStandardItem::type() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of this item. The type is used to distinguish custom items from the base class. When subclassing <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link>, you should reimplement this function and return a new value greater than or equal to <db:link xlink:href="qstandarditem.xml#ItemType-enum">UserType</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#ItemType-enum">QStandardItem::Type</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="whatsThis">
<db:title>QString QStandardItem::whatsThis() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>whatsThis</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString whatsThis() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's &quot;What's This?&quot; help.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#toolTip">toolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#statusTip">statusTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>[virtual] void QStandardItem::write(QDataStream &amp;<db:emphasis>out</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(QDataStream &amp;out) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the item to stream <db:code role="parameter">out</db:code>. Only the data and flags of the item are written, not the child items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml#read">read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[virtual] bool QStandardItem::operator&lt;(const QStandardItem &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QStandardItem &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QStandardItem &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is less than <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The default implementation uses the data for the item's sort role (see <db:link xlink:href="qstandarditemmodel.xml#sortRole-prop">QStandardItemModel::sortRole</db:link>) to perform the comparison if the item belongs to a model; otherwise, the data for the item's <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> (<db:link xlink:href="qstandarditem.xml#text">text</db:link>()) is used to perform the comparison.</db:para>
<db:para><db:link xlink:href="qstandarditem.xml#sortChildren">sortChildren</db:link>() and <db:link xlink:href="qstandarditemmodel.xml#sort">QStandardItemModel::sort</db:link>() use this function when sorting items. If you want custom sorting, you can subclass <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> and reimplement this function.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[protected] QStandardItem &amp;QStandardItem::operator=(const QStandardItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStandardItem &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QStandardItem &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem &amp; operator=(const QStandardItem &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code>'s data and flags to this item. Note that <db:link xlink:href="qstandarditem.xml#type">type</db:link>() and <db:link xlink:href="qstandarditem.xml#model">model</db:link>() are not copied.</db:para>
<db:para>This function is useful when reimplementing <db:link xlink:href="qstandarditem.xml#clone">clone</db:link>().</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QStandardItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStandardItem &amp;</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QStandardItem &amp;item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> <db:code role="parameter">item</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:para>This operator uses <db:link xlink:href="qstandarditem.xml#write">QStandardItem::write</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QStandardItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardItem &amp;</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QStandardItem &amp;item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> from stream <db:code role="parameter">in</db:code> into <db:code role="parameter">item</db:code>.</db:para>
<db:para>This operator uses <db:link xlink:href="qstandarditem.xml#read">QStandardItem::read</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
