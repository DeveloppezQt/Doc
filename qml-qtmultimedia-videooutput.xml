<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>VideoOutput QML Type</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Render video or camera viewfinder.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtMultimedia 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>VideoOutput is part of <db:simplelist><db:member>multimedia_qml</db:member><db:member>multimedia_video_qml</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="qml">Rectangle {
    width: 800
    height: 600
    color: &quot;black&quot;

    MediaPlayer {
        id: player
        source: &quot;file://video.webm&quot;
        autoPlay: true
    }

    VideoOutput {
        id: videoOutput
        source: player
        anchors.fill: parent
    }
}

</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> item supports untransformed, stretched, and uniformly scaled video presentation. For a description of stretched uniformly scaled presentation, see the <db:link xlink:href="qml-qtmultimedia-videooutput.xml#fillMode-prop">fillMode</db:link> property description.</db:para>
<db:para>The <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> item works with backends that support either <db:link xlink:href="qvideorenderercontrol.xml">QVideoRendererControl</db:link> or <db:link xlink:href="qvideowindowcontrol.xml">QVideoWindowControl</db:link>. If the backend only supports <db:link xlink:href="qvideowindowcontrol.xml">QVideoWindowControl</db:link>, the video is rendered onto an overlay window that is layered on top of the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> window. Due to the nature of the video overlays, certain features are not available for these kind of backends:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Some transformations like rotations</db:para>
</db:listitem>
<db:listitem>
<db:para>Having other <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> items on top of the <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> item</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Most backends however do support <db:link xlink:href="qvideorenderercontrol.xml">QVideoRendererControl</db:link> and therefore don't have the limitations listed above.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link></db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoOrientation-prop">
<db:title>[since QtMultimedia 5.2] autoOrientation : bool</db:title>
<db:para>This property allows you to enable and disable auto orientation of the video stream, so that its orientation always matches the orientation of the screen. If <db:code>autoOrientation</db:code> is enabled, the <db:code>orientation</db:code> property is overwritten.</db:para>
<db:para>By default <db:code>autoOrientation</db:code> is disabled.</db:para>
<db:para>This property was introduced in QtMultimedia 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-videooutput.xml#orientation-prop">orientation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentRect-prop">
<db:title>[read-only] contentRect : rectangle</db:title>
<db:para>This property holds the item coordinates of the area that would contain video to render. With certain fill modes, this rectangle will be larger than the visible area of the <db:code>VideoOutput</db:code>.</db:para>
<db:para>This property is useful when other coordinates are specified in terms of the source dimensions - this applied for relative (normalized) frame coordinates in the range of 0 to 1.0.</db:para>
<db:para>Areas outside this will be transparent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-videooutput.xml#mapRectToItem-method">mapRectToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-videooutput.xml#mapPointToItem-method">mapPointToItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fillMode-prop">
<db:title>fillMode : enumeration</db:title>
<db:para>Set this property to define how the video is scaled to fit the target area.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Stretch - the video is scaled to fit.</db:para>
</db:listitem>
<db:listitem>
<db:para>PreserveAspectFit - the video is scaled uniformly to fit without cropping</db:para>
</db:listitem>
<db:listitem>
<db:para>PreserveAspectCrop - the video is scaled uniformly to fill, cropping if necessary</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default fill mode is PreserveAspectFit.</db:para>
</db:section>
<db:section xml:id="filters-prop">
<db:title>[read-only] filters : list&lt;object&gt;</db:title>
<db:para>This property holds the list of video filters that are run on the video frames. The order of the filters in the list matches the order in which they will be invoked on the video frames. The objects in the list must be instances of a subclass of <db:link xlink:href="qabstractvideofilter.xml">QAbstractVideoFilter</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideofilter.xml">QAbstractVideoFilter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>orientation : int</db:title>
<db:para>In some cases the source video stream requires a certain orientation to be correct. This includes sources like a camera viewfinder, where the displayed viewfinder should match reality, no matter what rotation the rest of the user interface has.</db:para>
<db:para>This property allows you to apply a rotation (in steps of 90 degrees) to compensate for any user interface rotation, with positive values in the anti-clockwise direction.</db:para>
<db:para>The orientation change will also affect the mapping of coordinates from source to viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-videooutput.xml#autoOrientation-prop">autoOrientation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : variant</db:title>
<db:para>This property holds the source item providing the video frames like <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> or Camera.</db:para>
<db:para>If you are extending your own C++ classes to interoperate with <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link>, you can either provide a <db:link xlink:href="qobject.xml">QObject</db:link> based class with a <db:code>mediaObject</db:code> property that exposes a <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> derived class that has a <db:link xlink:href="qvideorenderercontrol.xml">QVideoRendererControl</db:link> available, or you can provide a <db:link xlink:href="qobject.xml">QObject</db:link> based class with a writable <db:code>videoSurface</db:code> property that can accept a <db:link xlink:href="qabstractvideosurface.xml">QAbstractVideoSurface</db:link> based class and can follow the correct protocol to deliver QVideoFrames to it.</db:para>
</db:section>
<db:section xml:id="sourceRect-prop">
<db:title>[read-only] sourceRect : rectangle</db:title>
<db:para>This property holds the area of the source video content that is considered for rendering. The values are in source pixel coordinates, adjusted for the source's pixel aspect ratio.</db:para>
<db:para>Note that typically the top left corner of this rectangle will be <db:code>0,0</db:code> while the width and height will be the width and height of the input content. Only when the video source has a viewport set, these values will differ.</db:para>
<db:para>The orientation setting does not affect this rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#pixelAspectRatio">QVideoSurfaceFormat::pixelAspectRatio</db:link>()</db:member>
<db:member><db:link xlink:href="qvideosurfaceformat.xml#viewport">QVideoSurfaceFormat::viewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="mapNormalizedPointToItem--method">
<db:title>QPointF mapNormalizedPointToItem (const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Given normalized coordinates <db:code role="parameter">point</db:code> (that is, each component in the range of 0 to 1.0), return the mapped point that it corresponds to (in item coordinates). This mapping is affected by the orientation.</db:para>
<db:para>Depending on the fill mode, this point may lie outside the rendered rectangle.</db:para>
</db:section>
<db:section xml:id="mapNormalizedRectToItem-method">
<db:title>QRectF mapNormalizedRectToItem(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:para>Given a rectangle <db:code role="parameter">rectangle</db:code> in normalized coordinates (that is, each component in the range of 0 to 1.0), return the mapped rectangle that it corresponds to (in item coordinates). This mapping is affected by the orientation.</db:para>
<db:para>Depending on the fill mode, this rectangle may extend outside the rendered rectangle.</db:para>
</db:section>
<db:section xml:id="mapPointToItem-method">
<db:title>QPointF mapPointToItem(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Given a point <db:code role="parameter">point</db:code> in source coordinates, return the corresponding point in item coordinates. This mapping is affected by the orientation.</db:para>
<db:para>Depending on the fill mode, this point may lie outside the rendered rectangle.</db:para>
</db:section>
<db:section xml:id="mapPointToSource-method">
<db:title>QPointF mapPointToSource(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Given a point <db:code role="parameter">point</db:code> in item coordinates, return the corresponding point in source coordinates. This mapping is affected by the orientation.</db:para>
<db:para>If the supplied point lies outside the rendered area, the returned point will be outside the source rectangle.</db:para>
</db:section>
<db:section xml:id="mapPointToSourceNormalized-method">
<db:title>QPointF mapPointToSourceNormalized(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Given a point <db:code role="parameter">point</db:code> in item coordinates, return the corresponding point in normalized source coordinates. This mapping is affected by the orientation.</db:para>
<db:para>If the supplied point lies outside the rendered area, the returned point will be outside the source rectangle. No clamping is performed.</db:para>
</db:section>
<db:section xml:id="mapRectToItem-method">
<db:title>QRectF mapRectToItem(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:para>Given a rectangle <db:code role="parameter">rectangle</db:code> in source coordinates, return the corresponding rectangle in item coordinates. This mapping is affected by the orientation.</db:para>
<db:para>Depending on the fill mode, this rectangle may extend outside the rendered rectangle.</db:para>
</db:section>
<db:section xml:id="mapRectToSource-method">
<db:title>QRectF mapRectToSource(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:para>Given a rectangle <db:code role="parameter">rectangle</db:code> in item coordinates, return the corresponding rectangle in source coordinates. This mapping is affected by the orientation.</db:para>
<db:para>This mapping is affected by the orientation.</db:para>
<db:para>If the supplied point lies outside the rendered area, the returned point will be outside the source rectangle.</db:para>
</db:section>
<db:section xml:id="mapRectToSourceNormalized-method">
<db:title>QRectF mapRectToSourceNormalized(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:para>Given a rectangle <db:code role="parameter">rectangle</db:code> in item coordinates, return the corresponding rectangle in normalized source coordinates. This mapping is affected by the orientation.</db:para>
<db:para>This mapping is affected by the orientation.</db:para>
<db:para>If the supplied point lies outside the rendered area, the returned point will be outside the source rectangle. No clamping is performed.</db:para>
</db:section>
</db:section>
</db:article>
