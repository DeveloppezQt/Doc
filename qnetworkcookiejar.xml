<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkCookieJar Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> class implements a simple jar of <db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link> objects.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkCookieJar</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Cookies are small bits of information that stateless protocols like HTTP use to maintain some persistent information across requests.</db:para>
<db:para>A cookie is set by a remote server when it replies to a request and it expects the same cookie to be sent back when further requests are sent.</db:para>
<db:para>The cookie jar is the object that holds all cookies set in previous requests. Web browsers save their cookie jars to disk in order to conserve permanent cookies across invocations of the application.</db:para>
<db:para><db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> does not implement permanent storage: it only keeps the cookies in memory. Once the <db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> object is deleted, all cookies it held will be discarded as well. If you want to save the cookies, you should derive from this class and implement the saving to disk to your own storage format.</db:para>
<db:para>This class implements only the basic security recommended by the cookie specifications and does not implement any cookie acceptance policy (it accepts all cookies set by any requests). In order to override those rules, you should reimplement the <db:link xlink:href="qnetworkcookiejar.xml#cookiesForUrl">cookiesForUrl</db:link>() and <db:link xlink:href="qnetworkcookiejar.xml#setCookiesFromUrl">setCookiesFromUrl</db:link>() virtual functions. They are called by <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> and <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> when they detect new cookies and when they require cookies.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
<db:member><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setCookieJar">QNetworkAccessManager::setCookieJar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkCookieJar">
<db:title>[explicit] QNetworkCookieJar::QNetworkCookieJar(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkCookieJar</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkCookieJar(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> object and sets the parent object to be <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The cookie jar is initialized to empty.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkCookieJar">
<db:title>[virtual] QNetworkCookieJar::~QNetworkCookieJar()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QNetworkCookieJar</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNetworkCookieJar()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this cookie jar object and discards all cookies stored in it. Cookies are not saved to disk in the <db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> default implementation.</db:para>
<db:para>If you need to save the cookies to disk, you have to derive from <db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> and save the cookies to disk yourself.</db:para>
</db:section>
<db:section xml:id="allCookies">
<db:title>[protected] QList&lt;QNetworkCookie&gt; QNetworkCookieJar::allCookies() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QNetworkCookie&gt;</db:type>
<db:methodname>allCookies</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QNetworkCookie&gt; allCookies() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all cookies stored in this cookie jar. This function is suitable for derived classes to save cookies to disk, as well as to implement cookie expiration and other policies.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookiejar.xml#setAllCookies">setAllCookies</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookiejar.xml#cookiesForUrl">cookiesForUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cookiesForUrl">
<db:title>[virtual] QList&lt;QNetworkCookie&gt; QNetworkCookieJar::cookiesForUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QNetworkCookie&gt;</db:type>
<db:methodname>cookiesForUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QNetworkCookie&gt; cookiesForUrl(const QUrl &amp;url) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cookies to be added to when a request is sent to <db:code role="parameter">url</db:code>. This function is called by the default <db:link xlink:href="qnetworkaccessmanager.xml#createRequest">QNetworkAccessManager::createRequest</db:link>(), which adds the cookies returned by this function to the request being sent.</db:para>
<db:para>If more than one cookie with the same name is found, but with differing paths, the one with longer path is returned before the one with shorter path. In other words, this function returns cookies sorted decreasingly by path length.</db:para>
<db:para>The default <db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> class implements only a very basic security policy (it makes sure that the cookies' domain and path match the reply's). To enhance the security policy with your own algorithms, override cookiesForUrl().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookiejar.xml#setCookiesFromUrl">setCookiesFromUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setCookieJar">QNetworkAccessManager::setCookieJar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteCookie">
<db:title>[virtual, since 5.0] bool QNetworkCookieJar::deleteCookie(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>deleteCookie</db:methodname>
<db:methodparam>
<db:type>const QNetworkCookie &amp;</db:type>
<db:parameter>cookie</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool deleteCookie(const QNetworkCookie &amp;cookie)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes from cookie jar the cookie found to have the same identifier as <db:code role="parameter">cookie</db:code>.</db:para>
<db:para>Returns true if a cookie was deleted, false otherwise.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#hasSameIdentifier">QNetworkCookie::hasSameIdentifier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertCookie">
<db:title>[virtual, since 5.0] bool QNetworkCookieJar::insertCookie(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>insertCookie</db:methodname>
<db:methodparam>
<db:type>const QNetworkCookie &amp;</db:type>
<db:parameter>cookie</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertCookie(const QNetworkCookie &amp;cookie)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">cookie</db:code> to this cookie jar.</db:para>
<db:para>Returns true if <db:code role="parameter">cookie</db:code> was added, false otherwise.</db:para>
<db:para>If a cookie with the same identifier already exists in the cookie jar, it will be overridden.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="setAllCookies">
<db:title>[protected] void QNetworkCookieJar::setAllCookies(const QList&lt;QNetworkCookie&gt; &amp;<db:emphasis>cookieList</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAllCookies</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QNetworkCookie&gt; &amp;</db:type>
<db:parameter>cookieList</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAllCookies(const QList&lt;QNetworkCookie&gt; &amp;cookieList)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the internal list of cookies held by this cookie jar to be <db:code role="parameter">cookieList</db:code>. This function is suitable for derived classes to implement loading cookies from permanent storage, or their own cookie acceptance policies by reimplementing <db:link xlink:href="qnetworkcookiejar.xml#setCookiesFromUrl">setCookiesFromUrl</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookiejar.xml#allCookies">allCookies</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookiejar.xml#setCookiesFromUrl">setCookiesFromUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCookiesFromUrl">
<db:title>[virtual] bool QNetworkCookieJar::setCookiesFromUrl(const QList&lt;QNetworkCookie&gt; &amp;<db:emphasis>cookieList</db:emphasis>, const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setCookiesFromUrl</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QNetworkCookie&gt; &amp;</db:type>
<db:parameter>cookieList</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setCookiesFromUrl(const QList&lt;QNetworkCookie&gt; &amp;cookieList, const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the cookies in the list <db:code role="parameter">cookieList</db:code> to this cookie jar. Before being inserted cookies are normalized.</db:para>
<db:para>Returns true if one or more cookies are set for <db:code role="parameter">url</db:code>, otherwise false.</db:para>
<db:para>If a cookie already exists in the cookie jar, it will be overridden by those in <db:code role="parameter">cookieList</db:code>.</db:para>
<db:para>The default <db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> class implements only a very basic security policy (it makes sure that the cookies' domain and path match the reply's). To enhance the security policy with your own algorithms, override setCookiesFromUrl().</db:para>
<db:para>Also, <db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link> does not have a maximum cookie jar size. Reimplement this function to discard older cookies to create room for new ones.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookiejar.xml#cookiesForUrl">cookiesForUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setCookieJar">QNetworkAccessManager::setCookieJar</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#normalize">QNetworkCookie::normalize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateCookie">
<db:title>[virtual, since 5.0] bool QNetworkCookieJar::updateCookie(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>updateCookie</db:methodname>
<db:methodparam>
<db:type>const QNetworkCookie &amp;</db:type>
<db:parameter>cookie</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool updateCookie(const QNetworkCookie &amp;cookie)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If a cookie with the same identifier as <db:code role="parameter">cookie</db:code> exists in this cookie jar it will be updated. This function uses <db:link xlink:href="qnetworkcookiejar.xml#insertCookie">insertCookie</db:link>().</db:para>
<db:para>Returns true if <db:code role="parameter">cookie</db:code> was updated, false if no cookie in the jar matches the identifier of <db:code role="parameter">cookie</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#hasSameIdentifier">QNetworkCookie::hasSameIdentifier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validateCookie">
<db:title>[virtual protected, since 5.0] bool QNetworkCookieJar::validateCookie(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>, const QUrl &amp;<db:emphasis>url</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>validateCookie</db:methodname>
<db:methodparam>
<db:type>const QNetworkCookie &amp;</db:type>
<db:parameter>cookie</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool validateCookie(const QNetworkCookie &amp;cookie, const QUrl &amp;url) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the domain and path of <db:code role="parameter">cookie</db:code> are valid, false otherwise. The <db:code role="parameter">url</db:code> parameter is used to determine if the domain specified in the cookie is allowed.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
</db:section>
</db:article>
