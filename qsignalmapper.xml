<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSignalMapper Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsignalmapper.xml">QSignalMapper</db:link> class bundles signals from identifiable senders.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSignalMapper</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSignalMapper is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class collects a set of parameterless signals, and re-emits them with integer, string or widget parameters corresponding to the object that sent the signal.</db:para>
<db:para>The class supports the mapping of particular strings or integers with particular objects using <db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>(). The objects' signals can then be connected to the <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() slot which will emit the <db:link xlink:href="qsignalmapper.xml#mapped">mapped</db:link>() signal with the string or integer associated with the original signalling object. Mappings can be removed later using <db:link xlink:href="qsignalmapper.xml#removeMappings">removeMappings</db:link>().</db:para>
<db:para>Example: Suppose we want to create a custom widget that contains a group of buttons (like a tool palette). One approach is to connect each button's clicked() signal to its own custom slot; but in this example we want to connect all the buttons to a single slot and parameterize the slot by the button that was clicked.</db:para>
<db:para>Here's the definition of a simple custom widget that has a single signal, clicked(), which is emitted with the text of the button that was clicked:</db:para>
<db:programlisting language="cpp">class ButtonWidget : public QWidget
{
    Q_OBJECT

public:
    ButtonWidget(const QStringList &amp;texts, QWidget *parent = 0);

signals:
    void clicked(const QString &amp;text);

private:
    QSignalMapper *signalMapper;
};
</db:programlisting>
<db:para>The only function that we need to implement is the constructor:</db:para>
<db:programlisting language="cpp">ButtonWidget::ButtonWidget(const QStringList &amp;texts, QWidget *parent)
    : QWidget(parent)
{
    signalMapper = new QSignalMapper(this);

    QGridLayout *gridLayout = new QGridLayout;
    for (int i = 0; i &lt; texts.size(); ++i) {
        QPushButton *button = new QPushButton(texts[i]);
        connect(button, SIGNAL(clicked()), signalMapper, SLOT(map()));
        signalMapper-&gt;setMapping(button, texts[i]);
        gridLayout-&gt;addWidget(button, i / 3, i % 3);
    }

    connect(signalMapper, SIGNAL(mapped(QString)),
            this, SIGNAL(clicked(QString)));

    setLayout(gridLayout);
}
</db:programlisting>
<db:para>A list of texts is passed to the constructor. A signal mapper is constructed and for each text in the list a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> is created. We connect each button's clicked() signal to the signal mapper's <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() slot, and create a mapping in the signal mapper from each button to the button's text. Finally we connect the signal mapper's <db:link xlink:href="qsignalmapper.xml#mapped">mapped</db:link>() signal to the custom widget's clicked() signal. When the user clicks a button, the custom widget will emit a single clicked() signal whose argument is the text of the button the user clicked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml">QObject</db:link></db:member>
<db:member><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link></db:member>
<db:member><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSignalMapper">
<db:title>[explicit] QSignalMapper::QSignalMapper(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qsignalmapper.xml">QSignalMapper</db:link> with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSignalMapper">
<db:title>[virtual noexcept] QSignalMapper::~QSignalMapper()</db:title>
<db:para>Destroys the <db:link xlink:href="qsignalmapper.xml">QSignalMapper</db:link>.</db:para>
</db:section>
<db:section xml:id="map">
<db:title>void QSignalMapper::map()</db:title>
<db:para>This slot emits signals based on which object sends signals to it.</db:para>
</db:section>
<db:section xml:id="map-1">
<db:title>void QSignalMapper::map(QObject *<db:emphasis>sender</db:emphasis>)</db:title>
<db:para>This slot emits signals based on the <db:code role="parameter">sender</db:code> object.</db:para>
</db:section>
<db:section xml:id="mapped">
<db:title>void QSignalMapper::mapped(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>This signal is emitted when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from an object that has an object mapping set. The object provided by the map is passed in <db:code role="parameter">object</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapped-1">
<db:title>void QSignalMapper::mapped(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>This signal is emitted when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from an object that has a widget mapping set. The object's mapped widget is passed in <db:code role="parameter">widget</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapped-2">
<db:title>void QSignalMapper::mapped(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is emitted when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from an object that has a string mapping set. The object's mapped string is passed in <db:code role="parameter">text</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapped-3">
<db:title>void QSignalMapper::mapped(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This signal is emitted when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from an object that has an integer mapping set. The object's mapped integer is passed in <db:code role="parameter">i</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapping">
<db:title>QObject *QSignalMapper::mapping(int <db:emphasis>id</db:emphasis>) const</db:title>
<db:para>Returns the sender <db:link xlink:href="qobject.xml">QObject</db:link> that is associated with the <db:code role="parameter">id</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapping-1">
<db:title>QObject *QSignalMapper::mapping(QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qsignalmapper.xml#mapping">mapping</db:link>().</db:para>
<db:para>Returns the sender <db:link xlink:href="qobject.xml">QObject</db:link> that is associated with the <db:code role="parameter">object</db:code>.</db:para>
</db:section>
<db:section xml:id="mapping-2">
<db:title>QObject *QSignalMapper::mapping(QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qsignalmapper.xml#mapping">mapping</db:link>().</db:para>
<db:para>Returns the sender <db:link xlink:href="qobject.xml">QObject</db:link> that is associated with the <db:code role="parameter">widget</db:code>.</db:para>
</db:section>
<db:section xml:id="mapping-3">
<db:title>QObject *QSignalMapper::mapping(const QString &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qsignalmapper.xml#mapping">mapping</db:link>().</db:para>
</db:section>
<db:section xml:id="removeMappings">
<db:title>void QSignalMapper::removeMappings(QObject *<db:emphasis>sender</db:emphasis>)</db:title>
<db:para>Removes all mappings for <db:code role="parameter">sender</db:code>.</db:para>
<db:para>This is done automatically when mapped objects are destroyed.</db:para>
<db:note>
<db:para>This does not disconnect any signals. If <db:code role="parameter">sender</db:code> is not destroyed then this will need to be done explicitly if required.</db:para>
</db:note>
</db:section>
<db:section xml:id="setMapping">
<db:title>void QSignalMapper::setMapping(QObject *<db:emphasis>sender</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Adds a mapping so that when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from the <db:code role="parameter">sender</db:code>, the signal mapped(<db:code role="parameter">object</db:code> ) is emitted.</db:para>
<db:para>There may be at most one object for each sender.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#mapping">mapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMapping-1">
<db:title>void QSignalMapper::setMapping(QObject *<db:emphasis>sender</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Adds a mapping so that when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from the <db:code role="parameter">sender</db:code>, the signal mapped(<db:code role="parameter">widget</db:code> ) is emitted.</db:para>
<db:para>There may be at most one widget for each sender.</db:para>
</db:section>
<db:section xml:id="setMapping-2">
<db:title>void QSignalMapper::setMapping(QObject *<db:emphasis>sender</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Adds a mapping so that when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from the <db:code role="parameter">sender</db:code>, the signal mapped(<db:code role="parameter">text</db:code> ) is emitted.</db:para>
<db:para>There may be at most one text for each sender.</db:para>
</db:section>
<db:section xml:id="setMapping-3">
<db:title>void QSignalMapper::setMapping(QObject *<db:emphasis>sender</db:emphasis>, int <db:emphasis>id</db:emphasis>)</db:title>
<db:para>Adds a mapping so that when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from the given <db:code role="parameter">sender</db:code>, the signal mapped(<db:code role="parameter">id</db:code>) is emitted.</db:para>
<db:para>There may be at most one integer ID for each sender.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#mapping">mapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
