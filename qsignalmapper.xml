<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSignalMapper Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsignalmapper.xml">QSignalMapper</db:link> class bundles signals from identifiable senders.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSignalMapper</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSignalMapper is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class collects a set of parameterless signals, and re-emits them with integer, string or widget parameters corresponding to the object that sent the signal. Note that in most cases you can use lambdas for passing custom parameters to slots. This is less costly and will simplify the code.</db:para>
<db:para>The class supports the mapping of particular strings, integers, objects and widgets with particular objects using <db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>(). The objects' signals can then be connected to the <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() slot which will emit a signal (it could be <db:link xlink:href="qsignalmapper.xml#mappedInt">mappedInt</db:link>(), <db:link xlink:href="qsignalmapper.xml#mappedString">mappedString</db:link>() and <db:link xlink:href="qsignalmapper.xml#mappedObject">mappedObject</db:link>()) with a value associated with the original signalling object. Mappings can be removed later using <db:link xlink:href="qsignalmapper.xml#removeMappings">removeMappings</db:link>().</db:para>
<db:para>Example: Suppose we want to create a custom widget that contains a group of buttons (like a tool palette). One approach is to connect each button's clicked() signal to its own custom slot; but in this example we want to connect all the buttons to a single slot and parameterize the slot by the button that was clicked.</db:para>
<db:para>Here's the definition of a simple custom widget that has a single signal, clicked(), which is emitted with the text of the button that was clicked:</db:para>
<db:programlisting language="cpp">class ButtonWidget : public QWidget
{
    Q_OBJECT

public:
    ButtonWidget(const QStringList &amp;amp;texts, QWidget *parent = nullptr);

signals:
    void clicked(const QString &amp;amp;text);

private:
    QSignalMapper *signalMapper;
};
</db:programlisting>
<db:para>The only function that we need to implement is the constructor:</db:para>
<db:programlisting language="cpp">ButtonWidget::ButtonWidget(const QStringList &amp;amp;texts, QWidget *parent)
    : QWidget(parent)
{
    signalMapper = new QSignalMapper(this);

    QGridLayout *gridLayout = new QGridLayout;
    for (int i = 0; i &amp;lt; texts.size(); ++i) {
        QPushButton *button = new QPushButton(texts[i]);
        connect(button, &amp;amp;QPushButton::clicked, signalMapper, &amp;amp;QSignalMapper::map);
        signalMapper-&amp;gt;setMapping(button, texts[i]);
        gridLayout-&amp;gt;addWidget(button, i / 3, i % 3);
    }

    connect(signalMapper, &amp;amp;QSignalMapper::mappedString,
            this, &amp;amp;ButtonWidget::clicked);

    setLayout(gridLayout);
}
</db:programlisting>
<db:para>A list of texts is passed to the constructor. A signal mapper is constructed and for each text in the list a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> is created. We connect each button's clicked() signal to the signal mapper's <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() slot, and create a mapping in the signal mapper from each button to the button's text. Finally we connect the signal mapper's <db:link xlink:href="qsignalmapper.xml#mappedString">mappedString</db:link>() signal to the custom widget's clicked() signal. When the user clicks a button, the custom widget will emit a single clicked() signal whose argument is the text of the button the user clicked.</db:para>
<db:para>This class was mostly useful before lambda functions could be used as slots. The example above can be rewritten simpler without <db:link xlink:href="qsignalmapper.xml">QSignalMapper</db:link> by connecting to a lambda function.</db:para>
<db:programlisting language="cpp">ButtonWidget::ButtonWidget(const QStringList &amp;amp;texts, QWidget *parent)
    : QWidget(parent)
{
    QGridLayout *gridLayout = new QGridLayout;
    for (int i = 0; i &amp;lt; texts.size(); ++i) {
        QString text = texts[i];
        QPushButton *button = new QPushButton(text);
        connect(button, &amp;amp;QPushButton::clicked, [this, text] { clicked(text); });
        gridLayout-&amp;gt;addWidget(button, i / 3, i % 3);
    }
    setLayout(gridLayout);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml">QObject</db:link></db:member>
<db:member><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link></db:member>
<db:member><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSignalMapper">
<db:title>[explicit] QSignalMapper::QSignalMapper(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalMapper</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalMapper(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsignalmapper.xml">QSignalMapper</db:link> with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSignalMapper">
<db:title>[virtual] QSignalMapper::~QSignalMapper()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSignalMapper</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSignalMapper()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qsignalmapper.xml">QSignalMapper</db:link>.</db:para>
</db:section>
<db:section xml:id="map">
<db:title>void QSignalMapper::map()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>map</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void map()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot emits signals based on which object sends signals to it.</db:para>
</db:section>
<db:section xml:id="map-1">
<db:title>void QSignalMapper::map(QObject *<db:emphasis>sender</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void map(QObject *sender)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot emits signals based on the <db:code role="parameter">sender</db:code> object.</db:para>
</db:section>
<db:section xml:id="mappedInt">
<db:title>[since 5.15] void QSignalMapper::mappedInt(int <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mappedInt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mappedInt(int i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from an object that has an integer mapping set. The object's mapped integer is passed in <db:code role="parameter">i</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mappedObject">
<db:title>[since 5.15] void QSignalMapper::mappedObject(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mappedObject</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mappedObject(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from an object that has an object mapping set. The object provided by the map is passed in <db:code role="parameter">object</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mappedString">
<db:title>[since 5.15] void QSignalMapper::mappedString(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mappedString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mappedString(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from an object that has a string mapping set. The object's mapped string is passed in <db:code role="parameter">text</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapping">
<db:title>QObject *QSignalMapper::mapping(int <db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>mapping</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * mapping(int id) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the sender <db:link xlink:href="qobject.xml">QObject</db:link> that is associated with the <db:code role="parameter">id</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#setMapping">setMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapping-1">
<db:title>QObject *QSignalMapper::mapping(const QString &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>mapping</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * mapping(const QString &amp;id) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qsignalmapper.xml#mapping">mapping</db:link>().</db:para>
</db:section>
<db:section xml:id="mapping-2">
<db:title>QObject *QSignalMapper::mapping(QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>mapping</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * mapping(QObject *object) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qsignalmapper.xml#mapping">mapping</db:link>().</db:para>
<db:para>Returns the sender <db:link xlink:href="qobject.xml">QObject</db:link> that is associated with the <db:code role="parameter">object</db:code>.</db:para>
</db:section>
<db:section xml:id="removeMappings">
<db:title>void QSignalMapper::removeMappings(QObject *<db:emphasis>sender</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeMappings</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeMappings(QObject *sender)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all mappings for <db:code role="parameter">sender</db:code>.</db:para>
<db:para>This is done automatically when mapped objects are destroyed.</db:para>
<db:note>
<db:para>This does not disconnect any signals. If <db:code role="parameter">sender</db:code> is not destroyed then this will need to be done explicitly if required.</db:para>
</db:note>
</db:section>
<db:section xml:id="setMapping">
<db:title>void QSignalMapper::setMapping(QObject *<db:emphasis>sender</db:emphasis>, int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMapping</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMapping(QObject *sender, int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a mapping so that when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from the given <db:code role="parameter">sender</db:code>, the signal <db:link xlink:href="qsignalmapper.xml#mappedInt">mappedInt</db:link>(<db:code role="parameter">id</db:code>) is emitted.</db:para>
<db:para>There may be at most one integer ID for each sender.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignalmapper.xml#mapping">mapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMapping-1">
<db:title>void QSignalMapper::setMapping(QObject *<db:emphasis>sender</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMapping</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMapping(QObject *sender, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a mapping so that when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from the <db:code role="parameter">sender</db:code>, the signal <db:link xlink:href="qsignalmapper.xml#mappedString">mappedString</db:link>(<db:code role="parameter">text</db:code> ) is emitted.</db:para>
<db:para>There may be at most one text for each sender.</db:para>
</db:section>
<db:section xml:id="setMapping-2">
<db:title>void QSignalMapper::setMapping(QObject *<db:emphasis>sender</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMapping</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMapping(QObject *sender, QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a mapping so that when <db:link xlink:href="qsignalmapper.xml#map">map</db:link>() is signalled from the <db:code role="parameter">sender</db:code>, the signal <db:link xlink:href="qsignalmapper.xml#mappedObject">mappedObject</db:link>(<db:code role="parameter">object</db:code> ) is emitted.</db:para>
<db:para>There may be at most one object for each sender.</db:para>
</db:section>
</db:section>
</db:article>
