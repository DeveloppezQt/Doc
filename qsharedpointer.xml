<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSharedPointer Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QSharedPointer</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> class holds a strong reference to a shared pointer.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSharedPointer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> is an automatic, shared pointer in C++. It behaves exactly like a normal pointer for normal purposes, including respect for constness.</db:para>
<db:para><db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will delete the pointer it is holding when it goes out of scope, provided no other <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> objects are referencing it.</db:para>
<db:para>A <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object can be created from a normal pointer, another <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object or by promoting a <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> object to a strong reference.</db:para>
<db:section xml:id="thread-safety">
<db:title>Thread-Safety</db:title>
<db:para><db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> and <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> are reentrant classes. This means that, in general, a given <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> or <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> object <db:emphasis role="bold">cannot</db:emphasis> be accessed by multiple threads at the same time without synchronization.</db:para>
<db:para>Different <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> and <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> objects can safely be accessed by multiple threads at the same time. This includes the case where they hold pointers to the same object; the reference counting mechanism is atomic, and no manual synchronization is required.</db:para>
<db:para>It should be noted that, while the pointer value can be accessed in this manner (that is, by multiple threads at the same time, without synchronization), <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> and <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> provide no guarantee about the object being pointed to. The specific thread-safety and reentrancy rules for that object still apply.</db:para>
</db:section>
<db:section xml:id="other-pointer-classes">
<db:title>Other Pointer Classes</db:title>
<db:para>Qt also provides two other pointer wrapper classes: <db:link xlink:href="qpointer.xml">QPointer</db:link> and <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link>. They are incompatible with one another, since each has its very different use case.</db:para>
<db:para><db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> holds a shared pointer by means of an external reference count (i.e., a reference counter placed outside the object). Like its name indicates, the pointer value is shared among all instances of <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> and <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link>. The contents of the object pointed to by the pointer should not be considered shared, however: there is only one object. For that reason, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> does not provide a way to detach or make copies of the pointed object.</db:para>
<db:para><db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link>, on the other hand, holds a pointer to shared data (i.e., a class derived from <db:link xlink:href="qshareddata.xml">QSharedData</db:link>). It does so by means of an internal reference count, placed in the <db:link xlink:href="qshareddata.xml">QSharedData</db:link> base class. This class can, therefore, detach based on the type of access made to the data being guarded: if it's a non-const access, it creates a copy atomically for the operation to complete.</db:para>
<db:para><db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> is a variant of <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link>, except that it only detaches if <db:link xlink:href="qexplicitlyshareddatapointer.xml#detach">QExplicitlySharedDataPointer::detach</db:link>() is explicitly called (hence the name).</db:para>
<db:para><db:link xlink:href="qscopedpointer.xml">QScopedPointer</db:link> simply holds a pointer to a heap allocated object and deletes it in its destructor. This class is useful when an object needs to be heap allocated and deleted, but no more. <db:link xlink:href="qscopedpointer.xml">QScopedPointer</db:link> is lightweight, it makes no use of additional structure or reference counting.</db:para>
<db:para>Finally, <db:link xlink:href="qpointer.xml">QPointer</db:link> holds a pointer to a <db:link xlink:href="qobject.xml">QObject</db:link>-derived object, but it does so weakly. <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> has the same functionality, but its use for that function is deprecated.</db:para>
</db:section>
<db:section xml:id="optional-pointer-tracking">
<db:title>Optional Pointer Tracking</db:title>
<db:para>A feature of <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that can be enabled at compile-time for debugging purposes is a pointer tracking mechanism. When enabled, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> registers in a global set all the pointers that it tracks. This allows one to catch mistakes like assigning the same pointer to two <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> objects.</db:para>
<db:para>This function is enabled by defining the <db:code>QT_SHAREDPOINTER_TRACK_POINTERS</db:code> macro before including the <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> header.</db:para>
<db:para>It is safe to use this feature even with code compiled without the feature. <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will ensure that the pointer is removed from the tracker even from code compiled without pointer tracking.</db:para>
<db:para>Note, however, that the pointer tracking feature has limitations on multiple- or virtual-inheritance (that is, in cases where two different pointer addresses can refer to the same object). In that case, if a pointer is cast to a different type and its value changes, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>'s pointer tracking mechanism may fail to detect that the object being tracked is the same.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link></db:member>
<db:member><db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link></db:member>
<db:member><db:link xlink:href="qscopedpointer.xml">QScopedPointer</db:link></db:member>
<db:member><db:link xlink:href="qenablesharedfromthis.xml">QEnableSharedFromThis</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSharedPointer">
<db:title>QSharedPointer::QSharedPointer()</db:title>
<db:constructorsynopsis>
<db:methodname>QSharedPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that is null (the object is holding a reference to nullptr).</db:para>
</db:section>
<db:section xml:id="QSharedPointer-1">
<db:title>[explicit] QSharedPointer::QSharedPointer(X *<db:emphasis>ptr</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSharedPointer</db:methodname>
<db:methodparam>
<db:type>X *</db:type>
<db:parameter>ptr</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer(X *ptr)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that points to <db:code role="parameter">ptr</db:code>. The pointer <db:code role="parameter">ptr</db:code> becomes managed by this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> and must not be passed to another <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object or deleted outside this object.</db:para>
<db:para>Since Qt 5.8, when the last reference to this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> gets destroyed, <db:code role="parameter">ptr</db:code> will be deleted by calling X's destructor (even if X is not the same as <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>'s template parameter T). Previously, the destructor for T was called.</db:para>
</db:section>
<db:section xml:id="QSharedPointer-2">
<db:title>QSharedPointer::QSharedPointer(X *<db:emphasis>ptr</db:emphasis>, Deleter <db:emphasis>d</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSharedPointer</db:methodname>
<db:methodparam>
<db:type>X *</db:type>
<db:parameter>ptr</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Deleter</db:type>
<db:parameter>d</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer(X *ptr, Deleter d)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that points to <db:code role="parameter">ptr</db:code>. The pointer <db:code role="parameter">ptr</db:code> becomes managed by this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> and must not be passed to another <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object or deleted outside this object.</db:para>
<db:para>The deleter parameter <db:code role="parameter">d</db:code> specifies the custom deleter for this object. The custom deleter is called, instead of the operator delete(), when the strong reference count drops to 0. This is useful, for instance, for calling <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() on a <db:link xlink:href="qobject.xml">QObject</db:link> instead:</db:para>
<db:programlisting language="cpp">    static void doDeleteLater(MyObject *obj)
    {
        obj-&amp;gt;deleteLater();
    }

    void otherFunction()
    {
        QSharedPointer&amp;lt;MyObject&amp;gt; obj =
            QSharedPointer&amp;lt;MyObject&amp;gt;(new MyObject, doDeleteLater);

        // continue using obj
        obj.clear();    // calls obj-&amp;gt;deleteLater();
    }
</db:programlisting>
<db:para>Note that the custom deleter function will be called with a pointer to type X, even if the <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> template parameter T is not the same.</db:para>
<db:para>It is also possible to specify a member function directly, as in:</db:para>
<db:programlisting language="cpp">    QSharedPointer&amp;lt;MyObject&amp;gt; obj =
        QSharedPointer&amp;lt;MyObject&amp;gt;(new MyObject, &amp;amp;QObject::deleteLater);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSharedPointer-3">
<db:title>[since 5.8] QSharedPointer::QSharedPointer(<db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSharedPointer</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer(std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that is null. This is equivalent to the <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> default constructor.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="QSharedPointer-4">
<db:title>[since 5.8] QSharedPointer::QSharedPointer(<db:emphasis>std::nullptr_t</db:emphasis>, Deleter <db:emphasis>d</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSharedPointer</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Deleter</db:type>
<db:parameter>d</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer(std::nullptr_t, Deleter d)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that is null. This is equivalent to the <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> default constructor.</db:para>
<db:para>The deleter parameter <db:code role="parameter">d</db:code> specifies the custom deleter for this object. The custom deleter is called, instead of the operator delete(), when the strong reference count drops to 0.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="QSharedPointer-5">
<db:title>QSharedPointer::QSharedPointer(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSharedPointer</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer(const QSharedPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object that shares <db:code role="parameter">other</db:code>'s pointer.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="QSharedPointer-6">
<db:title>QSharedPointer::QSharedPointer(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSharedPointer</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer(const QWeakPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> by promoting the weak reference <db:code role="parameter">other</db:code> to strong reference and sharing its pointer.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#toStrongRef">QWeakPointer::toStrongRef</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSharedPointer-7">
<db:title>[since 5.4] QSharedPointer::QSharedPointer(QSharedPointer&lt;T&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSharedPointer</db:methodname>
<db:methodparam>
<db:type>QSharedPointer&lt;T&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer(QSharedPointer&lt;T&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="QSharedPointer-8">
<db:title>[since 5.6] QSharedPointer::QSharedPointer(QSharedPointer&lt;X&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSharedPointer</db:methodname>
<db:methodparam>
<db:type>QSharedPointer&lt;X&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer(QSharedPointer&lt;X&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
<db:para>This constructor participates in overload resolution only if X* implicitly converts to T*.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="dtor.QSharedPointer">
<db:title>QSharedPointer::~QSharedPointer()</db:title>
<db:destructorsynopsis>
<db:methodname>~QSharedPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSharedPointer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object. If it is the last reference to the pointer stored, this will delete the pointer as well.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QSharedPointer::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object, dropping the reference that it may have had to the pointer. If this was the last reference, then the pointer itself will be deleted.</db:para>
</db:section>
<db:section xml:id="constCast">
<db:title>QSharedPointer&lt;X&gt; QSharedPointer::constCast() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>constCast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; constCast() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs a <db:code>const_cast</db:code> from this pointer's type to <db:code>X</db:code> and returns a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that shares the reference. This function can be used for up- and for down-casting, but is more useful for up-casting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>[static, since 5.1] QSharedPointer&lt;T&gt; QSharedPointer::create(Args &amp;&amp;... <db:emphasis>args</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSharedPointer&lt;T&gt;</db:type>
<db:methodname>create</db:methodname>
<db:methodparam>
<db:type>Args &amp;&amp;...</db:type>
<db:parameter>args</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;T&gt; create(Args &amp;&amp;... args)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object and allocates a new item of type <db:code>T</db:code>. The <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> internals and the object are allocated in one single memory allocation, which could help reduce memory fragmentation in a long-running application.</db:para>
<db:para>This function will attempt to call a constructor for type <db:code>T</db:code> that can accept all the arguments passed (<db:code role="parameter">args</db:code>). Arguments will be perfectly-forwarded.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>T *QSharedPointer::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the pointer referenced by this object.</db:para>
<db:para>Note: do not delete the pointer returned by this function or pass it to another function that could delete it, including creating <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> or <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> objects.</db:para>
</db:section>
<db:section xml:id="dynamicCast">
<db:title>QSharedPointer&lt;X&gt; QSharedPointer::dynamicCast() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>dynamicCast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; dynamicCast() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs a dynamic cast from this pointer's type to <db:code>X</db:code> and returns a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that shares the reference. If this function is used to up-cast, then <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will perform a <db:code>dynamic_cast</db:code>, which means that if the object being pointed by this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> is not of type <db:code>X</db:code>, the returned object will be null.</db:para>
<db:para>Note: the template type X must have the same const and volatile qualifiers as the template of this object, or the cast will fail. Use <db:link xlink:href="qsharedpointer.xml#constCast">constCast</db:link>() if you need to drop those qualifiers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerDynamicCast">qSharedPointerDynamicCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="get">
<db:title>[since 5.11] T *QSharedPointer::get() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>get</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * get() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qsharedpointer.xml#data">data</db:link>().</db:para>
<db:para>This function is provided for API compatibility with std::shared_ptr.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QSharedPointer::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object refers to nullptr.</db:para>
</db:section>
<db:section xml:id="objectCast">
<db:title>QSharedPointer&lt;X&gt; QSharedPointer::objectCast() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>objectCast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; objectCast() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs a <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() from this pointer's type to <db:code>X</db:code> and returns a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that shares the reference. If this function is used to up-cast, then <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will perform a <db:code>qobject_cast</db:code>, which means that if the object being pointed by this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> is not of type <db:code>X</db:code>, the returned object will be null.</db:para>
<db:para>Note: the template type X must have the same const and volatile qualifiers as the template of this object, or the cast will fail. Use <db:link xlink:href="qsharedpointer.xml#constCast">constCast</db:link>() if you need to drop those qualifiers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerObjectCast">qSharedPointerObjectCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>[since 5.0] void QSharedPointer::reset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qsharedpointer.xml#clear">clear</db:link>(). For std::shared_ptr compatibility.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="reset-1">
<db:title>[since 5.0] void QSharedPointer::reset(T *<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset(T *t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object to point to <db:code role="parameter">t</db:code> instead. Equivalent to:</db:para>
<db:programlisting language="cpp">    QSharedPointer&amp;lt;T&amp;gt; other(t); this-&amp;gt;swap(other);
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="reset-2">
<db:title>[since 5.0] void QSharedPointer::reset(T *<db:emphasis>t</db:emphasis>, Deleter <db:emphasis>deleter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Deleter</db:type>
<db:parameter>deleter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset(T *t, Deleter deleter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> object to point to <db:code role="parameter">t</db:code> instead, with the Deleter <db:code role="parameter">deleter</db:code>. Equivalent to:</db:para>
<db:programlisting language="cpp">    QSharedPointer&amp;lt;T&amp;gt; other(t, deleter); this-&amp;gt;swap(other);
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="staticCast">
<db:title>QSharedPointer&lt;X&gt; QSharedPointer::staticCast() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>staticCast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; staticCast() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs a static cast from this pointer's type to <db:code>X</db:code> and returns a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> that shares the reference. This function can be used for up- and for down-casting, but is more useful for up-casting.</db:para>
<db:para>Note: the template type X must have the same const and volatile qualifiers as the template of this object, or the cast will fail. Use <db:link xlink:href="qsharedpointer.xml#constCast">constCast</db:link>() if you need to drop those qualifiers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#dynamicCast">dynamicCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#constCast">constCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerCast">qSharedPointerCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.3] void QSharedPointer::swap(QSharedPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QSharedPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this shared pointer instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="toWeakRef">
<db:title>QWeakPointer&lt;T&gt; QSharedPointer::toWeakRef() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWeakPointer&lt;T&gt;</db:type>
<db:methodname>toWeakRef</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWeakPointer&lt;T&gt; toWeakRef() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a weak reference object that shares the pointer referenced by this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#QWeakPointer">QWeakPointer::QWeakPointer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-bool">
<db:title>bool QSharedPointer::operator bool() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator bool</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator bool() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the contained pointer is not nullptr. This function is suitable for use in <db:code>if-constructs</db:code>, like:</db:para>
<db:programlisting language="cpp">    if (sharedptr) { ... }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not">
<db:title>bool QSharedPointer::operator!() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object refers to nullptr. This function is suitable for use in <db:code>if-constructs</db:code>, like:</db:para>
<db:programlisting language="cpp">    if (!sharedptr) { ... }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>T &amp;QSharedPointer::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T &amp;</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Provides access to the shared pointer's members.</db:para>
<db:para>If the contained pointer is nullptr, behavior is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--gt">
<db:title>T *QSharedPointer::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Provides access to the shared pointer's members.</db:para>
<db:para>If the contained pointer is nullptr, behavior is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QSharedPointer&lt;T&gt; &amp;QSharedPointer::operator=(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;T&gt; &amp; operator=(const QSharedPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this object share <db:code role="parameter">other</db:code>'s pointer. The current pointer reference is discarded and, if it was the last, the pointer will be deleted.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.0] QSharedPointer&lt;T&gt; &amp;QSharedPointer::operator=(QSharedPointer&lt;T&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QSharedPointer&lt;T&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;T&gt; &amp; operator=(QSharedPointer&lt;T&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>QSharedPointer&lt;T&gt; &amp;QSharedPointer::operator=(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;T&gt; &amp; operator=(const QWeakPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Promotes <db:code role="parameter">other</db:code> to a strong reference and makes this object share a reference to the pointer referenced by it. The current pointer reference is discarded and, if it was the last, the pointer will be deleted.</db:para>
<db:para>If <db:code>T</db:code> is a derived type of the template parameter of this class, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will perform an automatic cast. Otherwise, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-3">
<db:title>[since 5.6] QSharedPointer&lt;T&gt; &amp;QSharedPointer::operator=(QSharedPointer&lt;X&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QSharedPointer&lt;X&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;T&gt; &amp; operator=(QSharedPointer&lt;X&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> instance.</db:para>
<db:para>This assignment operator participates in overload resolution only if X* implicitly converts to T*.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash">
<db:title>[since 5.0] size_t qHash(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>size_t</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">size_t qHash(const QSharedPointer&lt;T&gt; &amp;key, size_t seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="qSharedPointerCast">
<db:title>QSharedPointer&lt;X&gt; qSharedPointerCast(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>qSharedPointerCast</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; qSharedPointerCast(const QSharedPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">other</db:code>, cast to type <db:code>X</db:code>. The types <db:code>T</db:code> and <db:code>X</db:code> must belong to one hierarchy for the <db:code>static_cast</db:code> to succeed.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use <db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link> to cast away the constness.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#staticCast">QSharedPointer::staticCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerDynamicCast">qSharedPointerDynamicCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSharedPointerCast-1">
<db:title>QSharedPointer&lt;X&gt; qSharedPointerCast(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>qSharedPointerCast</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; qSharedPointerCast(const QWeakPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">other</db:code>, cast to type <db:code>X</db:code>. The types <db:code>T</db:code> and <db:code>X</db:code> must belong to one hierarchy for the <db:code>static_cast</db:code> to succeed.</db:para>
<db:para>The <db:code role="parameter">other</db:code> object is converted first to a strong reference. If that conversion fails (because the object it's pointing to has already been deleted), this function returns a null <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use <db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link> to cast away the constness.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#toStrongRef">QWeakPointer::toStrongRef</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerDynamicCast">qSharedPointerDynamicCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSharedPointerConstCast">
<db:title>QSharedPointer&lt;X&gt; qSharedPointerConstCast(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>qSharedPointerConstCast</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; qSharedPointerConstCast(const QSharedPointer&lt;T&gt; &amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">src</db:code>, cast to type <db:code>X</db:code>. The types <db:code>T</db:code> and <db:code>X</db:code> must belong to one hierarchy for the <db:code>const_cast</db:code> to succeed. The <db:code>const</db:code> and <db:code>volatile</db:code> differences between <db:code>T</db:code> and <db:code>X</db:code> are ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#constCast">QSharedPointer::constCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerCast">qSharedPointerCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerDynamicCast">qSharedPointerDynamicCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSharedPointerConstCast-1">
<db:title>QSharedPointer&lt;X&gt; qSharedPointerConstCast(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>qSharedPointerConstCast</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; qSharedPointerConstCast(const QWeakPointer&lt;T&gt; &amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">src</db:code>, cast to type <db:code>X</db:code>. The types <db:code>T</db:code> and <db:code>X</db:code> must belong to one hierarchy for the <db:code>const_cast</db:code> to succeed. The <db:code>const</db:code> and <db:code>volatile</db:code> differences between <db:code>T</db:code> and <db:code>X</db:code> are ignored.</db:para>
<db:para>The <db:code role="parameter">src</db:code> object is converted first to a strong reference. If that conversion fails (because the object it's pointing to has already been deleted), this function returns a null <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#toStrongRef">QWeakPointer::toStrongRef</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerCast">qSharedPointerCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerDynamicCast">qSharedPointerDynamicCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSharedPointerDynamicCast">
<db:title>QSharedPointer&lt;X&gt; qSharedPointerDynamicCast(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>qSharedPointerDynamicCast</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; qSharedPointerDynamicCast(const QSharedPointer&lt;T&gt; &amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">src</db:code>, using a dynamic cast to type <db:code>X</db:code> to obtain an internal pointer of the appropriate type. If the <db:code>dynamic_cast</db:code> fails, the object returned will be null.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use <db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link> to cast away the constness.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#dynamicCast">QSharedPointer::dynamicCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerCast">qSharedPointerCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSharedPointerDynamicCast-1">
<db:title>QSharedPointer&lt;X&gt; qSharedPointerDynamicCast(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>qSharedPointerDynamicCast</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; qSharedPointerDynamicCast(const QWeakPointer&lt;T&gt; &amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">src</db:code>, using a dynamic cast to type <db:code>X</db:code> to obtain an internal pointer of the appropriate type. If the <db:code>dynamic_cast</db:code> fails, the object returned will be null.</db:para>
<db:para>The <db:code role="parameter">src</db:code> object is converted first to a strong reference. If that conversion fails (because the object it's pointing to has already been deleted), this function also returns a null <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use <db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link> to cast away the constness.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#toStrongRef">QWeakPointer::toStrongRef</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerCast">qSharedPointerCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSharedPointerObjectCast">
<db:title>QSharedPointer&lt;X&gt; qSharedPointerObjectCast(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>qSharedPointerObjectCast</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; qSharedPointerObjectCast(const QSharedPointer&lt;T&gt; &amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The qSharedPointerObjectCast function is for casting a shared pointer.</db:para>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">src</db:code>, using a <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() to type <db:code>X</db:code> to obtain an internal pointer of the appropriate type. If the <db:code>qobject_cast</db:code> fails, the object returned will be null.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use <db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link> to cast away the constness.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#objectCast">QSharedPointer::objectCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerCast">qSharedPointerCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSharedPointerObjectCast-1">
<db:title>[since 5.14] std::shared_ptr&lt;X&gt; qSharedPointerObjectCast(const std::shared_ptr&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>std::shared_ptr&lt;X&gt;</db:type>
<db:methodname>qSharedPointerObjectCast</db:methodname>
<db:methodparam>
<db:type>const std::shared_ptr&lt;T&gt; &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">std::shared_ptr&lt;X&gt; qSharedPointerObjectCast(const std::shared_ptr&lt;T&gt; &amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">src</db:code>, using a <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() to type <db:code>X</db:code> to obtain an internal pointer of the appropriate type. If the <db:code>qobject_cast</db:code> fails, the object returned will be null.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use const_pointer_cast to cast away the constness.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="qSharedPointerObjectCast-2">
<db:title>[since 5.14] std::shared_ptr&lt;X&gt; qSharedPointerObjectCast(std::shared_ptr&lt;T&gt; &amp;&amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>std::shared_ptr&lt;X&gt;</db:type>
<db:methodname>qSharedPointerObjectCast</db:methodname>
<db:methodparam>
<db:type>std::shared_ptr&lt;T&gt; &amp;&amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">std::shared_ptr&lt;X&gt; qSharedPointerObjectCast(std::shared_ptr&lt;T&gt; &amp;&amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">src</db:code>, using a <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() to type <db:code>X</db:code> to obtain an internal pointer of the appropriate type.</db:para>
<db:para>If the <db:code>qobject_cast</db:code> succeeds, the function will return a valid shared pointer, and <db:code role="parameter">src</db:code> is reset to null. If the <db:code>qobject_cast</db:code> fails, the object returned will be null, and <db:code role="parameter">src</db:code> will not be modified.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use const_pointer_cast to cast away the constness.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="qSharedPointerObjectCast-3">
<db:title>QSharedPointer&lt;X&gt; qSharedPointerObjectCast(const QWeakPointer&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;X&gt;</db:type>
<db:methodname>qSharedPointerObjectCast</db:methodname>
<db:methodparam>
<db:type>const QWeakPointer&lt;T&gt; &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;X&gt; qSharedPointerObjectCast(const QWeakPointer&lt;T&gt; &amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:link xlink:href="qsharedpointer.xml#qSharedPointerObjectCast">qSharedPointerObjectCast</db:link> function is for casting a shared pointer.</db:para>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">src</db:code>, using a <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() to type <db:code>X</db:code> to obtain an internal pointer of the appropriate type. If the <db:code>qobject_cast</db:code> fails, the object returned will be null.</db:para>
<db:para>The <db:code role="parameter">src</db:code> object is converted first to a strong reference. If that conversion fails (because the object it's pointing to has already been deleted), this function also returns a null <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>Note that <db:code>X</db:code> must have the same cv-qualifiers (<db:code>const</db:code> and <db:code>volatile</db:code>) that <db:code>T</db:code> has, or the code will fail to compile. Use <db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link> to cast away the constness.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qweakpointer.xml#toStrongRef">QWeakPointer::toStrongRef</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerCast">qSharedPointerCast</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedpointer.xml#qSharedPointerConstCast">qSharedPointerConstCast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qobject_pointer_cast">
<db:title>[since 5.14] std::shared_ptr&lt;X&gt; qobject_pointer_cast(const std::shared_ptr&lt;T&gt; &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>std::shared_ptr&lt;X&gt;</db:type>
<db:methodname>qobject_pointer_cast</db:methodname>
<db:methodparam>
<db:type>const std::shared_ptr&lt;T&gt; &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::shared_ptr&lt;X&gt; qobject_pointer_cast(const std::shared_ptr&lt;T&gt; &amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a shared pointer to the pointer held by <db:code role="parameter">src</db:code>.</db:para>
<db:para>Same as <db:link xlink:href="qsharedpointer.xml#qSharedPointerObjectCast">qSharedPointerObjectCast</db:link>(). This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="qobject_pointer_cast-1">
<db:title>[since 5.14] std::shared_ptr&lt;X&gt; qobject_pointer_cast(std::shared_ptr&lt;T&gt; &amp;&amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>std::shared_ptr&lt;X&gt;</db:type>
<db:methodname>qobject_pointer_cast</db:methodname>
<db:methodparam>
<db:type>std::shared_ptr&lt;T&gt; &amp;&amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">std::shared_ptr&lt;X&gt; qobject_pointer_cast(std::shared_ptr&lt;T&gt; &amp;&amp;src)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qsharedpointer.xml#qSharedPointerObjectCast">qSharedPointerObjectCast</db:link>(). This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QSharedPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSharedPointer&lt;X&gt; &amp;</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QSharedPointer&lt;T&gt; &amp;ptr1, const QSharedPointer&lt;X&gt; &amp;ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to distinct pointers.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const X *<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const X *</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QSharedPointer&lt;T&gt; &amp;ptr1, const X *ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to distinct pointers.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s type is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s type is not a base or a derived type from this <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-2">
<db:title>bool operator!=(const T *<db:emphasis>ptr1</db:emphasis>, const QSharedPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const T *</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSharedPointer&lt;X&gt; &amp;</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const T *ptr1, const QSharedPointer&lt;X&gt; &amp;ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the pointer <db:code role="parameter">ptr1</db:code> is not the same pointer as that referenced by <db:code role="parameter">ptr2</db:code>.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s type, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s type, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-3">
<db:title>[since 5.8] bool operator!=(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>lhs</db:emphasis>, <db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QSharedPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> refers to a valid (i.e. non-null) pointer.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#isNull">QSharedPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-4">
<db:title>[since 5.8] bool operator!=(<db:emphasis>std::nullptr_t</db:emphasis>, const QSharedPointer&lt;T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(std::nullptr_t, const QSharedPointer&lt;T&gt; &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">rhs</db:code> refers to a valid (i.e. non-null) pointer.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#isNull">QSharedPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>[since 5.7] QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QSharedPointer&lt;T&gt; &amp;<db:emphasis>ptr</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>ptr</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QSharedPointer&lt;T&gt; &amp;ptr)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the pointer tracked by <db:code role="parameter">ptr</db:code> into the debug object <db:code role="parameter">debug</db:code> for debugging purposes.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="debug.xml">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const QSharedPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSharedPointer&lt;X&gt; &amp;</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QSharedPointer&lt;T&gt; &amp;ptr1, const QSharedPointer&lt;X&gt; &amp;ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to the same pointer.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>ptr1</db:emphasis>, const X *<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const X *</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QSharedPointer&lt;T&gt; &amp;ptr1, const X *ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">ptr1</db:code> and <db:code role="parameter">ptr2</db:code> refer to the same pointer.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s type is different from <db:code role="parameter">ptr1</db:code>'s, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s type is not a base or a derived type from this <db:code role="parameter">ptr1</db:code>'s, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>bool operator==(const T *<db:emphasis>ptr1</db:emphasis>, const QSharedPointer&lt;X&gt; &amp;<db:emphasis>ptr2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const T *</db:type>
<db:parameter>ptr1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSharedPointer&lt;X&gt; &amp;</db:type>
<db:parameter>ptr2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const T *ptr1, const QSharedPointer&lt;X&gt; &amp;ptr2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the pointer <db:code role="parameter">ptr1</db:code> is the same pointer as that referenced by <db:code role="parameter">ptr2</db:code>.</db:para>
<db:para>If <db:code role="parameter">ptr2</db:code>'s template parameter is different from <db:code role="parameter">ptr1</db:code>'s type, <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> will attempt to perform an automatic <db:code>static_cast</db:code> to ensure that the pointers being compared are equal. If <db:code role="parameter">ptr2</db:code>'s template parameter is not a base or a derived type from <db:code role="parameter">ptr1</db:code>'s type, you will get a compiler error.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-3">
<db:title>[since 5.8] bool operator==(const QSharedPointer&lt;T&gt; &amp;<db:emphasis>lhs</db:emphasis>, <db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QSharedPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> refers to nullptr.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#isNull">QSharedPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-4">
<db:title>[since 5.8] bool operator==(<db:emphasis>std::nullptr_t</db:emphasis>, const QSharedPointer&lt;T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSharedPointer&lt;T&gt; &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(std::nullptr_t, const QSharedPointer&lt;T&gt; &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">rhs</db:code> refers to nullptr.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml#isNull">QSharedPointer::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
