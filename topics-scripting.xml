<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scripting</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's scripting features.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt has two main ways to help make an application scriptable. All of them allow easy integration of the <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</db:link> (more widely known as JavaScript) language into the application. Depending on how deep the integration should be, one of these APIs can be used:</db:para>
<db:section xml:id="js-api">
<db:title>JS API</db:title>
<db:para>This is a simple API, but limited to basic functionality. The main classes are <db:link xlink:href="qjsengine.xml">QJSEngine</db:link> and <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, which can be used to embed pure <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</db:link> functionality like evaluating scripts and calling functions.</db:para>
</db:section>
<db:section xml:id="qml">
<db:title>QML</db:title>
<db:para><db:link xlink:href="qtqml-index.xml">QML</db:link> exposes a modified <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</db:link> environment. It is designed to mix well with the JavaScript API mentioned earlier. QML may be used without <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> components, which may be useful for server side scripting. With QML it is possible to mix pure <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</db:link> and declarative components (<db:link xlink:href="qtquick-usecase-integratingjs.xml">Use Case - Integrating JavaScript in QML</db:link>).</db:para>
<db:para>All of these three scripting solutions seamlessly inter-operate with <db:link xlink:href="metaobjects.xml">the Meta-Object System</db:link>, which means that all <db:link xlink:href="signalsandslots.xml">signals and slots</db:link> and <db:link xlink:href="properties.xml">properties</db:link> of a <db:link xlink:href="qobject.xml">QObject</db:link> instance are accessible in an <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</db:link> environment.</db:para>
</db:section>
</db:article>
