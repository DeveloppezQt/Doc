<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFutureWatcher Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link> class allows monitoring a <db:link xlink:href="qfuture.xml">QFuture</db:link> using signals and slots.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFutureWatcher</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qfuturewatcherbase.xml" xlink:role="class">QFutureWatcherBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFutureWatcher is part of <db:simplelist><db:member>thread</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link> provides information and notifications about a <db:link xlink:href="qfuture.xml">QFuture</db:link>. Use the setFuture() function to start watching a particular <db:link xlink:href="qfuture.xml">QFuture</db:link>. The future() function returns the future set with setFuture().</db:para>
<db:para>For convenience, several of <db:link xlink:href="qfuture.xml">QFuture</db:link>'s functions are also available in <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link>: progressValue(), progressMinimum(), progressMaximum(), progressText(), isStarted(), isFinished(), isRunning(), isCanceled(), isPaused(), waitForFinished(), result(), and resultAt(). The cancel(), setPaused(), pause(), resume(), and togglePaused() functions are slots in <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link>.</db:para>
<db:para>Status changes are reported via the started(), finished(), canceled(), paused(), resumed(), resultReadyAt(), and resultsReadyAt() signals. Progress information is provided from the progressRangeChanged(), void progressValueChanged(), and progressTextChanged() signals.</db:para>
<db:para>Throttling control is provided by the setPendingResultsLimit() function. When the number of pending resultReadyAt() or resultsReadyAt() signals exceeds the limit, the computation represented by the future will be throttled automatically. The computation will resume once the number of pending signals drops below the limit.</db:para>
<db:para>Example: Starting a computation and getting a slot callback when it's finished:</db:para>
<db:programlisting language="cpp">// Instantiate the objects and connect to the finished signal.
MyClass myObject;
QFutureWatcher&lt;int&gt; watcher;
connect(&amp;watcher, SIGNAL(finished()), &amp;myObject, SLOT(handleFinished()));

// Start the computation.
QFuture&lt;int&gt; future = QtConcurrent::run(...);
watcher.setFuture(future);
</db:programlisting>
<db:para>Be aware that not all asynchronous computations can be canceled or paused. For example, the future returned by QtConcurrent::run() cannot be canceled; but the future returned by QtConcurrent::mappedReduced() can.</db:para>
<db:para><db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link>&lt;void&gt; is specialized to not contain any of the result fetching functions. Any <db:link xlink:href="qfuture.xml">QFuture</db:link>&lt;T&gt; can be watched by a <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link>&lt;void&gt; as well. This is useful if only status or progress information is needed; not the actual result data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture.xml">QFuture</db:link></db:member>
<db:member><db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
