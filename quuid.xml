<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUuid Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="quuid.xml">QUuid</db:link> class stores a Universally Unique Identifier (UUID).</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUuid</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qbluetoothuuid.xml" xlink:role="class">QBluetoothUuid</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Using <db:emphasis>U</db:emphasis>niversally <db:emphasis>U</db:emphasis>nique <db:emphasis>ID</db:emphasis>entifiers (UUID) is a standard way to uniquely identify entities in a distributed computing environment. A UUID is a 16-byte (128-bit) number generated by some algorithm that is meant to guarantee that the UUID will be unique in the distributed computing environment where it is used. The acronym GUID is often used instead, <db:emphasis>G</db:emphasis>lobally <db:emphasis>U</db:emphasis>nique <db:emphasis>ID</db:emphasis>entifiers, but it refers to the same thing.</db:para>
<db:anchor xml:id="variant-field"/>
<db:para>Actually, the GUID is one <db:emphasis>variant</db:emphasis> of UUID. Multiple variants are in use. Each UUID contains a bit field that specifies which type (variant) of UUID it is. Call <db:link xlink:href="quuid.xml#variant">variant</db:link>() to discover which type of UUID an instance of <db:link xlink:href="quuid.xml">QUuid</db:link> contains. It extracts the three most significant bits of byte 8 of the 16 bytes. In <db:link xlink:href="quuid.xml">QUuid</db:link>, byte 8 is QUuid::data4[0]. If you create instances of <db:link xlink:href="quuid.xml">QUuid</db:link> using the constructor that accepts all the numeric values as parameters, use the following table to set the three most significant bits of parameter b1, which becomes QUuid::data4[0] and contains the variant field in its three most significant bits. In the table, 'x' means <db:emphasis>don't care</db:emphasis>.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>msb0</db:para>
</db:th>
<db:th>
<db:para>msb1</db:para>
</db:th>
<db:th>
<db:para>msb2</db:para>
</db:th>
<db:th>
<db:para>Variant</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>NCS (Network Computing System)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>DCE (Distributed Computing Environment)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>Microsoft (GUID)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Reserved for future expansion</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:anchor xml:id="version-field"/>
<db:para>If <db:link xlink:href="quuid.xml#variant">variant</db:link>() returns <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>, the UUID also contains a <db:emphasis>version</db:emphasis> field in the four most significant bits of QUuid::data3, and you can call <db:link xlink:href="quuid.xml#version">version</db:link>() to discover which version your <db:link xlink:href="quuid.xml">QUuid</db:link> contains. If you create instances of <db:link xlink:href="quuid.xml">QUuid</db:link> using the constructor that accepts all the numeric values as parameters, use the following table to set the four most significant bits of parameter w2, which becomes QUuid::data3 and contains the version field in its four most significant bits.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>msb0</db:para>
</db:th>
<db:th>
<db:para>msb1</db:para>
</db:th>
<db:th>
<db:para>msb2</db:para>
</db:th>
<db:th>
<db:para>msb3</db:para>
</db:th>
<db:th>
<db:para>Version</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Time</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>Embedded POSIX</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Md5(Name)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>Random</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Sha1</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The field layouts for the DCE versions listed in the table above are specified in the <db:link xlink:href="http://www.ietf.org/rfc/rfc4122.txt">Network Working Group UUID Specification</db:link>.</db:para>
<db:para>Most platforms provide a tool for generating new UUIDs, e.g. uuidgen and guidgen. You can also use <db:link xlink:href="quuid.xml#createUuid">createUuid</db:link>(). UUIDs generated by <db:link xlink:href="quuid.xml#createUuid">createUuid</db:link>() are of the random type. Their <db:link xlink:href="quuid.xml#Version-enum">QUuid::Version</db:link> bits are set to <db:link xlink:href="quuid.xml#Version-enum">QUuid::Random</db:link>, and their <db:link xlink:href="quuid.xml#Variant-enum">QUuid::Variant</db:link> bits are set to <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>. The rest of the UUID is composed of random numbers. Theoretically, this means there is a small chance that a UUID generated by <db:link xlink:href="quuid.xml#createUuid">createUuid</db:link>() will not be unique. But it is <db:link xlink:href="http://en.wikipedia.org/wiki/Universally_Unique_Identifier#Random_UUID_probability_of_duplicates">a <db:emphasis>very</db:emphasis> small chance</db:link>.</db:para>
<db:para>UUIDs can be constructed from numeric values or from strings, or using the static <db:link xlink:href="quuid.xml#createUuid">createUuid</db:link>() function. They can be converted to a string with <db:link xlink:href="quuid.xml#toString">toString</db:link>(). UUIDs have a <db:link xlink:href="quuid.xml#variant">variant</db:link>() and a <db:link xlink:href="quuid.xml#version">version</db:link>(), and null UUIDs return true from <db:link xlink:href="quuid.xml#isNull">isNull</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Variant-enum">
<db:title>enum QUuid::Variant</db:title>
<db:para>This enum defines the values used in the <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> of the UUID. The value in the variant field determines the layout of the 128-bit value.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::VarUnknown</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Variant is unknown</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::NCS</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Reserved for NCS (Network Computing System) backward compatibility</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::DCE</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Distributed Computing Environment, the scheme used by <db:link xlink:href="quuid.xml">QUuid</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Microsoft</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Reserved for Microsoft backward compatibility (GUID)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Reserved</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Reserved for future definition</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Version-enum">
<db:title>enum QUuid::Version</db:title>
<db:para>This enum defines the values used in the <db:link xlink:href="quuid.xml#version-field">version field</db:link> of the UUID. The version field is meaningful only if the value in the <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> is <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::VerUnknown</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Version is unknown</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Time</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Time-based, by using timestamp, clock sequence, and MAC network card address (if available) for the node sections</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::EmbeddedPOSIX</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>DCE Security version, with embedded POSIX UUIDs</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Name</db:code></db:para>
</db:td>
<db:td><db:code>Md5</db:code></db:td>
<db:td>
<db:para>Name-based, by using values from a name for all sections</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Md5</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Alias for Name</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Random</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Random-based, by using random numbers for all sections</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Sha1</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUuid">
<db:title>[noexcept] QUuid::QUuid()</db:title>
<db:para>Creates the null UUID. <db:link xlink:href="quuid.xml#toString">toString</db:link>() will output the null UUID as &quot;{00000000-0000-0000-0000-000000000000}&quot;.</db:para>
</db:section>
<db:section xml:id="QUuid-1">
<db:title>[noexcept] QUuid::QUuid(const GUID &amp;<db:emphasis>guid</db:emphasis>)</db:title>
<db:para>Casts a Windows <db:code role="parameter">guid</db:code> to a Qt <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:warning>
<db:para>This function is only for Windows platforms.</db:para>
</db:warning>
</db:section>
<db:section xml:id="QUuid-2">
<db:title>[since 4.8] QUuid::QUuid(const QByteArray &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="quuid.xml">QUuid</db:link> object from the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> <db:code role="parameter">text</db:code>, which must be formatted as five hex fields separated by '-', e.g., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex digit. The curly braces shown here are optional, but it is normal to include them. If the conversion fails, a null UUID is created. See <db:link xlink:href="quuid.xml#toByteArray">toByteArray</db:link>() for an explanation of how the five hex fields map to the public data members in <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#toByteArray">toByteArray</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#QUuid">QUuid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUuid-3">
<db:title>QUuid::QUuid(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="quuid.xml">QUuid</db:link> object from the string <db:code role="parameter">text</db:code>, which must be formatted as five hex fields separated by '-', e.g., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex digit. The curly braces shown here are optional, but it is normal to include them. If the conversion fails, a null UUID is created. See <db:link xlink:href="quuid.xml#toString">toString</db:link>() for an explanation of how the five hex fields map to the public data members in <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#QUuid">QUuid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUuid-4">
<db:title>[noexcept] QUuid::QUuid(uint <db:emphasis>l</db:emphasis>, ushort <db:emphasis>w1</db:emphasis>, ushort <db:emphasis>w2</db:emphasis>, uchar <db:emphasis>b1</db:emphasis>, uchar <db:emphasis>b2</db:emphasis>, uchar <db:emphasis>b3</db:emphasis>, uchar <db:emphasis>b4</db:emphasis>, uchar <db:emphasis>b5</db:emphasis>, uchar <db:emphasis>b6</db:emphasis>, uchar <db:emphasis>b7</db:emphasis>, uchar <db:emphasis>b8</db:emphasis>)</db:title>
<db:para>Creates a UUID with the value specified by the parameters, <db:code role="parameter">l</db:code>, <db:code role="parameter">w1</db:code>, <db:code role="parameter">w2</db:code>, <db:code role="parameter">b1</db:code>, <db:code role="parameter">b2</db:code>, <db:code role="parameter">b3</db:code>, <db:code role="parameter">b4</db:code>, <db:code role="parameter">b5</db:code>, <db:code role="parameter">b6</db:code>, <db:code role="parameter">b7</db:code>, <db:code role="parameter">b8</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// {67C8770B-44F1-410A-AB9A-F9B5446F13EE}
QUuid IID_MyInterface(0x67c8770b, 0x44f1, 0x410a, 0xab, 0x9a, 0xf9, 0xb5, 0x44, 0x6f, 0x13, 0xee);
</db:programlisting>
</db:section>
<db:section xml:id="createUuid">
<db:title>[static] QUuid QUuid::createUuid()</db:title>
<db:para>On any platform other than Windows, this function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Random</db:link>. If the /dev/urandom device exists, then the numbers used to construct the UUID will be of cryptographic quality, which will make the UUID unique. Otherwise, the numbers of the UUID will be obtained from the local pseudo-random number generator (<db:link xlink:href="qtglobal.xml#qrand">qrand</db:link>(), which is seeded by <db:link xlink:href="qtglobal.xml#qsrand">qsrand</db:link>()) which is usually not of cryptograhic quality, which means that the UUID can't be guaranteed to be unique.</db:para>
<db:para>On a Windows platform, a GUID is generated, which almost certainly <db:emphasis>will</db:emphasis> be unique, on this or any other system, networked or not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUuidV3">
<db:title>[static, since 5.0] QUuid QUuid::createUuidV3(const QUuid &amp;<db:emphasis>ns</db:emphasis>, const QByteArray &amp;<db:emphasis>baseData</db:emphasis>)</db:title>
<db:para>This function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Md5</db:link>. <db:code role="parameter">ns</db:code> is the namespace and <db:code role="parameter">baseData</db:code> is the basic data as described by RFC 4122.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#createUuidV5">createUuidV5</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUuidV3-1">
<db:title>[static, since 5.0] QUuid QUuid::createUuidV3(const QUuid &amp;<db:emphasis>ns</db:emphasis>, const QString &amp;<db:emphasis>baseData</db:emphasis>)</db:title>
<db:para>This function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Md5</db:link>. <db:code role="parameter">ns</db:code> is the namespace and <db:code role="parameter">baseData</db:code> is the basic data as described by RFC 4122.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#createUuidV5">createUuidV5</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUuidV5">
<db:title>[static, since 5.0] QUuid QUuid::createUuidV5(const QUuid &amp;<db:emphasis>ns</db:emphasis>, const QByteArray &amp;<db:emphasis>baseData</db:emphasis>)</db:title>
<db:para>This function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Sha1</db:link>. <db:code role="parameter">ns</db:code> is the namespace and <db:code role="parameter">baseData</db:code> is the basic data as described by RFC 4122.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#createUuidV3">createUuidV3</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUuidV5-1">
<db:title>[static, since 5.0] QUuid QUuid::createUuidV5(const QUuid &amp;<db:emphasis>ns</db:emphasis>, const QString &amp;<db:emphasis>baseData</db:emphasis>)</db:title>
<db:para>This function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Sha1</db:link>. <db:code role="parameter">ns</db:code> is the namespace and <db:code role="parameter">baseData</db:code> is the basic data as described by RFC 4122.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#createUuidV3">createUuidV3</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRfc4122">
<db:title>[static, since 4.8] QUuid QUuid::fromRfc4122(const QByteArray &amp;<db:emphasis>bytes</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="quuid.xml">QUuid</db:link> object from the binary representation of the UUID, as specified by RFC 4122 section 4.1.2. See <db:link xlink:href="quuid.xml#toRfc4122">toRfc4122</db:link>() for a further explanation of the order of <db:code role="parameter">bytes</db:code> required.</db:para>
<db:para>The byte array accepted is NOT a human readable format.</db:para>
<db:para>If the conversion fails, a null UUID is created.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#toRfc4122">toRfc4122</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#QUuid">QUuid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[noexcept] bool QUuid::isNull() const</db:title>
<db:para>Returns true if this is the null UUID {00000000-0000-0000-0000-000000000000}; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="toByteArray">
<db:title>[since 4.8] QByteArray QUuid::toByteArray() const</db:title>
<db:para>Returns the binary representation of this <db:link xlink:href="quuid.xml">QUuid</db:link>. The byte array is formatted as five hex fields separated by '-' and enclosed in curly braces, i.e., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex digit. From left to right, the five hex fields are obtained from the four public data members in <db:link xlink:href="quuid.xml">QUuid</db:link> as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field #</db:para>
</db:th>
<db:th>
<db:para>Source</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>data1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>data2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>data3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>data4[0] .. data4[1]</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>5</db:para>
</db:td>
<db:td>
<db:para>data4[2] .. data4[7]</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="toRfc4122">
<db:title>[since 4.8] QByteArray QUuid::toRfc4122() const</db:title>
<db:para>Returns the binary representation of this <db:link xlink:href="quuid.xml">QUuid</db:link>. The byte array is in big endian format, and formatted according to RFC 4122, section 4.1.2 - &quot;Layout and byte order&quot;.</db:para>
<db:para>The order is as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field #</db:para>
</db:th>
<db:th>
<db:para>Source</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>data1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>data2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>data3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>data4[0] .. data4[7]</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QUuid::toString() const</db:title>
<db:para>Returns the string representation of this <db:link xlink:href="quuid.xml">QUuid</db:link>. The string is formatted as five hex fields separated by '-' and enclosed in curly braces, i.e., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex digit. From left to right, the five hex fields are obtained from the four public data members in <db:link xlink:href="quuid.xml">QUuid</db:link> as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field #</db:para>
</db:th>
<db:th>
<db:para>Source</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>data1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>data2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>data3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>data4[0] .. data4[1]</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>5</db:para>
</db:td>
<db:td>
<db:para>data4[2] .. data4[7]</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="variant">
<db:title>[noexcept] QUuid::Variant QUuid::variant() const</db:title>
<db:para>Returns the value in the <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> of the UUID. If the return value is <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>, call <db:link xlink:href="quuid.xml#version">version</db:link>() to see which layout it uses. The null UUID is considered to be of an unknown variant.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="version">
<db:title>[noexcept] QUuid::Version QUuid::version() const</db:title>
<db:para>Returns the <db:link xlink:href="quuid.xml#version-field">version field</db:link> of the UUID, if the UUID's <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> is <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>. Otherwise it returns <db:link xlink:href="quuid.xml#Version-enum">QUuid::VerUnknown</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-GUID">
<db:title>[noexcept] GUID QUuid::operator GUID() const</db:title>
<db:para>Returns a Windows GUID from a <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:warning>
<db:para>This function is only for Windows platforms.</db:para>
</db:warning>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool QUuid::operator!=(const GUID &amp;<db:emphasis>guid</db:emphasis>) const</db:title>
<db:para>Returns true if this UUID is not equal to the Windows GUID <db:code role="parameter">guid</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>[noexcept] bool QUuid::operator!=(const QUuid &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="quuid.xml">QUuid</db:link> and the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> are different; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[noexcept] bool QUuid::operator&lt;(const QUuid &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="quuid.xml">QUuid</db:link> has the same <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> as the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> and is lexicographically <db:emphasis>before</db:emphasis> the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link>. If the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> has a different variant field, the return value is determined by comparing the two <db:link xlink:href="quuid.xml#Variant-enum">variants</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QUuid &amp;QUuid::operator=(const GUID &amp;<db:emphasis>guid</db:emphasis>)</db:title>
<db:para>Assigns a Windows <db:code role="parameter">guid</db:code> to a Qt <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:warning>
<db:para>This function is only for Windows platforms.</db:para>
</db:warning>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool QUuid::operator==(const GUID &amp;<db:emphasis>guid</db:emphasis>) const</db:title>
<db:para>Returns true if this UUID is equal to the Windows GUID <db:code role="parameter">guid</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>[noexcept] bool QUuid::operator==(const QUuid &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="quuid.xml">QUuid</db:link> and the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> are identical; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[noexcept] bool QUuid::operator&gt;(const QUuid &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="quuid.xml">QUuid</db:link> has the same <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> as the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> and is lexicographically <db:emphasis>after</db:emphasis> the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link>. If the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> has a different variant field, the return value is determined by comparing the two <db:link xlink:href="quuid.xml#Variant-enum">variants</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash-17">
<db:title>[noexcept, since 5.0] uint qHash(const QUuid &amp;<db:emphasis>uuid</db:emphasis>, uint <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:para>Returns a hash of the UUID <db:code role="parameter">uuid</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, const QUuid &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Writes the UUID <db:code role="parameter">id</db:code> to the data stream <db:code role="parameter">s</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>dbg</db:emphasis>, const QUuid &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Writes the UUID <db:code role="parameter">id</db:code> to the output stream for debugging information <db:code role="parameter">dbg</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-3">
<db:title>[noexcept, since 5.5] bool operator&lt;=(const QUuid &amp;<db:emphasis>lhs</db:emphasis>, const QUuid &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> has the same <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> as <db:code role="parameter">rhs</db:code> and is lexicographically <db:emphasis>not after</db:emphasis> <db:code role="parameter">rhs</db:code>. If <db:code role="parameter">rhs</db:code> has a different variant field, the return value is determined by comparing the two <db:link xlink:href="quuid.xml#Variant-enum">variants</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-eq-3">
<db:title>[noexcept, since 5.5] bool operator&gt;=(const QUuid &amp;<db:emphasis>lhs</db:emphasis>, const QUuid &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> has the same <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> as <db:code role="parameter">rhs</db:code> and is lexicographically <db:emphasis>not before</db:emphasis> <db:code role="parameter">rhs</db:code>. If <db:code role="parameter">rhs</db:code> has a different variant field, the return value is determined by comparing the two <db:link xlink:href="quuid.xml#Variant-enum">variants</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-21">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, QUuid &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Reads a UUID from the stream <db:code role="parameter">s</db:code> into <db:code role="parameter">id</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
