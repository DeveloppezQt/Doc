<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUuid Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="quuid.xml">QUuid</db:link> class stores a Universally Unique Identifier (UUID).</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUuid</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qbluetoothuuid.xml" xlink:role="class">QBluetoothUuid</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Using <db:emphasis>U</db:emphasis>niversally <db:emphasis>U</db:emphasis>nique <db:emphasis>ID</db:emphasis>entifiers (UUID) is a standard way to uniquely identify entities in a distributed computing environment. A UUID is a 16-byte (128-bit) number generated by some algorithm that is meant to guarantee that the UUID will be unique in the distributed computing environment where it is used. The acronym GUID is often used instead, <db:emphasis>G</db:emphasis>lobally <db:emphasis>U</db:emphasis>nique <db:emphasis>ID</db:emphasis>entifiers, but it refers to the same thing.</db:para>
<db:anchor xml:id="variant-field"/>
<db:para>Actually, the GUID is one <db:emphasis>variant</db:emphasis> of UUID. Multiple variants are in use. Each UUID contains a bit field that specifies which type (variant) of UUID it is. Call <db:link xlink:href="quuid.xml#variant">variant</db:link>() to discover which type of UUID an instance of <db:link xlink:href="quuid.xml">QUuid</db:link> contains. It extracts the three most significant bits of byte 8 of the 16 bytes. In <db:link xlink:href="quuid.xml">QUuid</db:link>, byte 8 is QUuid::data4[0]. If you create instances of <db:link xlink:href="quuid.xml">QUuid</db:link> using the constructor that accepts all the numeric values as parameters, use the following table to set the three most significant bits of parameter b1, which becomes QUuid::data4[0] and contains the variant field in its three most significant bits. In the table, 'x' means <db:emphasis>don't care</db:emphasis>.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>msb0</db:para>
</db:th>
<db:th>
<db:para>msb1</db:para>
</db:th>
<db:th>
<db:para>msb2</db:para>
</db:th>
<db:th>
<db:para>Variant</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>NCS (Network Computing System)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>DCE (Distributed Computing Environment)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>Microsoft (GUID)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Reserved for future expansion</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:anchor xml:id="version-field"/>
<db:para>If <db:link xlink:href="quuid.xml#variant">variant</db:link>() returns <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>, the UUID also contains a <db:emphasis>version</db:emphasis> field in the four most significant bits of QUuid::data3, and you can call <db:link xlink:href="quuid.xml#version">version</db:link>() to discover which version your <db:link xlink:href="quuid.xml">QUuid</db:link> contains. If you create instances of <db:link xlink:href="quuid.xml">QUuid</db:link> using the constructor that accepts all the numeric values as parameters, use the following table to set the four most significant bits of parameter w2, which becomes QUuid::data3 and contains the version field in its four most significant bits.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>msb0</db:para>
</db:th>
<db:th>
<db:para>msb1</db:para>
</db:th>
<db:th>
<db:para>msb2</db:para>
</db:th>
<db:th>
<db:para>msb3</db:para>
</db:th>
<db:th>
<db:para>Version</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Time</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>Embedded POSIX</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Md5(Name)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>Random</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Sha1</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The field layouts for the DCE versions listed in the table above are specified in the <db:link xlink:href="http://www.ietf.org/rfc/rfc4122.txt">Network Working Group UUID Specification</db:link>.</db:para>
<db:para>Most platforms provide a tool for generating new UUIDs, e.g. uuidgen and guidgen. You can also use <db:link xlink:href="quuid.xml#createUuid">createUuid</db:link>(). UUIDs generated by <db:link xlink:href="quuid.xml#createUuid">createUuid</db:link>() are of the random type. Their <db:link xlink:href="quuid.xml#Version-enum">QUuid::Version</db:link> bits are set to <db:link xlink:href="quuid.xml#Version-enum">QUuid::Random</db:link>, and their <db:link xlink:href="quuid.xml#Variant-enum">QUuid::Variant</db:link> bits are set to <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>. The rest of the UUID is composed of random numbers. Theoretically, this means there is a small chance that a UUID generated by <db:link xlink:href="quuid.xml#createUuid">createUuid</db:link>() will not be unique. But it is <db:link xlink:href="http://en.wikipedia.org/wiki/Universally_Unique_Identifier#Random_UUID_probability_of_duplicates">a <db:emphasis>very</db:emphasis> small chance</db:link>.</db:para>
<db:para>UUIDs can be constructed from numeric values or from strings, or using the static <db:link xlink:href="quuid.xml#createUuid">createUuid</db:link>() function. They can be converted to a string with <db:link xlink:href="quuid.xml#toString">toString</db:link>(). UUIDs have a <db:link xlink:href="quuid.xml#variant">variant</db:link>() and a <db:link xlink:href="quuid.xml#version">version</db:link>(), and null UUIDs return true from <db:link xlink:href="quuid.xml#isNull">isNull</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="StringFormat-enum">
<db:title>[since 5.11] enum QUuid::StringFormat</db:title>
<db:enumsynopsis>
<db:enumname>StringFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>WithBraces</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WithoutBraces</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Id128</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used by <db:link xlink:href="quuid.xml#toString">toString</db:link>(StringFormat) to control the formatting of the string representation. The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::WithBraces</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default, <db:link xlink:href="quuid.xml#toString">toString</db:link>() will return five hex fields, separated by dashes and surrounded by braces. Example: {00000000-0000-0000-0000-000000000000}.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::WithoutBraces</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Only the five dash-separated fields, without the braces. Example: 00000000-0000-0000-0000-000000000000.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Id128</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Only the hex digits, without braces or dashes. Note that <db:link xlink:href="quuid.xml">QUuid</db:link> cannot parse this back again as input.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="Variant-enum">
<db:title>enum QUuid::Variant</db:title>
<db:enumsynopsis>
<db:enumname>Variant</db:enumname>
<db:enumitem>
<db:enumidentifier>VarUnknown</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NCS</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DCE</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Microsoft</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Reserved</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the values used in the <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> of the UUID. The value in the variant field determines the layout of the 128-bit value.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::VarUnknown</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Variant is unknown</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::NCS</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Reserved for NCS (Network Computing System) backward compatibility</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::DCE</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Distributed Computing Environment, the scheme used by <db:link xlink:href="quuid.xml">QUuid</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Microsoft</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Reserved for Microsoft backward compatibility (GUID)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Reserved</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Reserved for future definition</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Version-enum">
<db:title>enum QUuid::Version</db:title>
<db:enumsynopsis>
<db:enumname>Version</db:enumname>
<db:enumitem>
<db:enumidentifier>VerUnknown</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Time</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EmbeddedPOSIX</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Md5</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Name</db:enumidentifier>
<db:enumvalue>Md5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Random</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha1</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the values used in the <db:link xlink:href="quuid.xml#version-field">version field</db:link> of the UUID. The version field is meaningful only if the value in the <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> is <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::VerUnknown</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Version is unknown</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Time</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Time-based, by using timestamp, clock sequence, and MAC network card address (if available) for the node sections</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::EmbeddedPOSIX</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>DCE Security version, with embedded POSIX UUIDs</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Name</db:code></db:para>
</db:td>
<db:td><db:code>Md5</db:code></db:td>
<db:td>
<db:para>Name-based, by using values from a name for all sections</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Md5</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Alias for Name</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Random</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Random-based, by using random numbers for all sections</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="quuid.xml">QUuid</db:link></db:emphasis>::Sha1</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUuid-1">
<db:title>QUuid::QUuid()</db:title>
<db:constructorsynopsis>
<db:methodname>QUuid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates the null UUID. <db:link xlink:href="quuid.xml#toString">toString</db:link>() will output the null UUID as &quot;{00000000-0000-0000-0000-000000000000}&quot;.</db:para>
</db:section>
<db:section xml:id="QUuid-2">
<db:title>QUuid::QUuid(uint <db:emphasis>l</db:emphasis>, ushort <db:emphasis>w1</db:emphasis>, ushort <db:emphasis>w2</db:emphasis>, uchar <db:emphasis>b1</db:emphasis>, uchar <db:emphasis>b2</db:emphasis>, uchar <db:emphasis>b3</db:emphasis>, uchar <db:emphasis>b4</db:emphasis>, uchar <db:emphasis>b5</db:emphasis>, uchar <db:emphasis>b6</db:emphasis>, uchar <db:emphasis>b7</db:emphasis>, uchar <db:emphasis>b8</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUuid</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>l</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>ushort</db:type>
<db:parameter>w1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>ushort</db:type>
<db:parameter>w2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uchar</db:type>
<db:parameter>b1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uchar</db:type>
<db:parameter>b2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uchar</db:type>
<db:parameter>b3</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uchar</db:type>
<db:parameter>b4</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uchar</db:type>
<db:parameter>b5</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uchar</db:type>
<db:parameter>b6</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uchar</db:type>
<db:parameter>b7</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uchar</db:type>
<db:parameter>b8</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid(uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a UUID with the value specified by the parameters, <db:code role="parameter">l</db:code>, <db:code role="parameter">w1</db:code>, <db:code role="parameter">w2</db:code>, <db:code role="parameter">b1</db:code>, <db:code role="parameter">b2</db:code>, <db:code role="parameter">b3</db:code>, <db:code role="parameter">b4</db:code>, <db:code role="parameter">b5</db:code>, <db:code role="parameter">b6</db:code>, <db:code role="parameter">b7</db:code>, <db:code role="parameter">b8</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// {67C8770B-44F1-410A-AB9A-F9B5446F13EE}
QUuid IID_MyInterface(0x67c8770b, 0x44f1, 0x410a, 0xab, 0x9a, 0xf9, 0xb5, 0x44, 0x6f, 0x13, 0xee);
</db:programlisting>
</db:section>
<db:section xml:id="QUuid-3">
<db:title>QUuid::QUuid(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUuid</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="quuid.xml">QUuid</db:link> object from the string <db:code role="parameter">text</db:code>, which must be formatted as five hex fields separated by '-', e.g., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where each 'x' is a hex digit. The curly braces shown here are optional, but it is normal to include them. If the conversion fails, a null UUID is created. See <db:link xlink:href="quuid.xml#toString">toString</db:link>() for an explanation of how the five hex fields map to the public data members in <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#QUuid-1">QUuid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUuid-4">
<db:title>[since 4.8] QUuid::QUuid(const QByteArray &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUuid</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid(const QByteArray &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="quuid.xml">QUuid</db:link> object from the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> <db:code role="parameter">text</db:code>, which must be formatted as five hex fields separated by '-', e.g., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where each 'x' is a hex digit. The curly braces shown here are optional, but it is normal to include them. If the conversion fails, a null UUID is created. See <db:link xlink:href="quuid.xml#toByteArray">toByteArray</db:link>() for an explanation of how the five hex fields map to the public data members in <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#toByteArray">toByteArray</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#QUuid-1">QUuid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUuid-5">
<db:title>QUuid::QUuid(const GUID &amp;<db:emphasis>guid</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUuid</db:methodname>
<db:methodparam>
<db:type>const GUID &amp;</db:type>
<db:parameter>guid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid(const GUID &amp;guid)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Casts a Windows <db:code role="parameter">guid</db:code> to a Qt <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:warning>
<db:para>This function is only for Windows platforms.</db:para>
</db:warning>
</db:section>
<db:section xml:id="createUuid">
<db:title>[static] QUuid QUuid::createUuid()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>createUuid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid createUuid()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>On any platform other than Windows, this function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Random</db:link>. On Windows, a GUID is generated using the Windows API and will be of the type that the API decides to create.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUuidV3">
<db:title>[static, since 5.0] QUuid QUuid::createUuidV3(const QUuid &amp;<db:emphasis>ns</db:emphasis>, const QByteArray &amp;<db:emphasis>baseData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>createUuidV3</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>ns</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>baseData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid createUuidV3(const QUuid &amp;ns, const QByteArray &amp;baseData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Md5</db:link>. <db:code role="parameter">ns</db:code> is the namespace and <db:code role="parameter">baseData</db:code> is the basic data as described by RFC 4122.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#createUuidV5">createUuidV5</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUuidV3-1">
<db:title>[static, since 5.0] QUuid QUuid::createUuidV3(const QUuid &amp;<db:emphasis>ns</db:emphasis>, const QString &amp;<db:emphasis>baseData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>createUuidV3</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>ns</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>baseData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid createUuidV3(const QUuid &amp;ns, const QString &amp;baseData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Md5</db:link>. <db:code role="parameter">ns</db:code> is the namespace and <db:code role="parameter">baseData</db:code> is the basic data as described by RFC 4122.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#createUuidV5">createUuidV5</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUuidV5">
<db:title>[static, since 5.0] QUuid QUuid::createUuidV5(const QUuid &amp;<db:emphasis>ns</db:emphasis>, const QByteArray &amp;<db:emphasis>baseData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>createUuidV5</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>ns</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>baseData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid createUuidV5(const QUuid &amp;ns, const QByteArray &amp;baseData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Sha1</db:link>. <db:code role="parameter">ns</db:code> is the namespace and <db:code role="parameter">baseData</db:code> is the basic data as described by RFC 4122.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#createUuidV3">createUuidV3</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUuidV5-1">
<db:title>[static, since 5.0] QUuid QUuid::createUuidV5(const QUuid &amp;<db:emphasis>ns</db:emphasis>, const QString &amp;<db:emphasis>baseData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>createUuidV5</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>ns</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>baseData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid createUuidV5(const QUuid &amp;ns, const QString &amp;baseData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns a new UUID with variant <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link> and version <db:link xlink:href="quuid.xml#Version-enum">QUuid::Sha1</db:link>. <db:code role="parameter">ns</db:code> is the namespace and <db:code role="parameter">baseData</db:code> is the basic data as described by RFC 4122.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#createUuidV3">createUuidV3</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromCFUUID">
<db:title>[static, since 5.7] QUuid QUuid::fromCFUUID(CFUUIDRef <db:emphasis>uuid</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>fromCFUUID</db:methodname>
<db:methodparam>
<db:type>CFUUIDRef</db:type>
<db:parameter>uuid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid fromCFUUID(CFUUIDRef uuid)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a new <db:link xlink:href="quuid.xml">QUuid</db:link> containing a copy of the <db:code role="parameter">uuid</db:code> CFUUID.</db:para>
<db:note>
<db:para>this function is only available on Apple platforms.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="fromNSUUID">
<db:title>[static, since 5.7] QUuid QUuid::fromNSUUID(const NSUUID *<db:emphasis>uuid</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>fromNSUUID</db:methodname>
<db:methodparam>
<db:type>const NSUUID *</db:type>
<db:parameter>uuid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid fromNSUUID(const NSUUID *uuid)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a new <db:link xlink:href="quuid.xml">QUuid</db:link> containing a copy of the <db:code role="parameter">uuid</db:code> NSUUID.</db:para>
<db:note>
<db:para>this function is only available on Apple platforms.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="fromRfc4122">
<db:title>[static, since 4.8] QUuid QUuid::fromRfc4122(const QByteArray &amp;<db:emphasis>bytes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>fromRfc4122</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>bytes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid fromRfc4122(const QByteArray &amp;bytes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="quuid.xml">QUuid</db:link> object from the binary representation of the UUID, as specified by RFC 4122 section 4.1.2. See <db:link xlink:href="quuid.xml#toRfc4122">toRfc4122</db:link>() for a further explanation of the order of <db:code role="parameter">bytes</db:code> required.</db:para>
<db:para>The byte array accepted is NOT a human readable format.</db:para>
<db:para>If the conversion fails, a null UUID is created.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#toRfc4122">toRfc4122</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#QUuid-1">QUuid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static, since 5.10] QUuid QUuid::fromString(QStringView <db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid fromString(QStringView text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="quuid.xml">QUuid</db:link> object from the string <db:code role="parameter">text</db:code>, which must be formatted as five hex fields separated by '-', e.g., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where each 'x' is a hex digit. The curly braces shown here are optional, but it is normal to include them. If the conversion fails, a null UUID is returned. See <db:link xlink:href="quuid.xml#toString">toString</db:link>() for an explanation of how the five hex fields map to the public data members in <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#QUuid-1">QUuid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString-1">
<db:title>[static, since 5.10] QUuid QUuid::fromString(QLatin1String <db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUuid</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid fromString(QLatin1String text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a <db:link xlink:href="quuid.xml">QUuid</db:link> object from the string <db:code role="parameter">text</db:code>, which must be formatted as five hex fields separated by '-', e.g., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where each 'x' is a hex digit. The curly braces shown here are optional, but it is normal to include them. If the conversion fails, a null UUID is returned. See <db:link xlink:href="quuid.xml#toString">toString</db:link>() for an explanation of how the five hex fields map to the public data members in <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="quuid.xml#QUuid-1">QUuid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QUuid::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this is the null UUID {00000000-0000-0000-0000-000000000000}; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="toByteArray">
<db:title>[since 4.8] QByteArray QUuid::toByteArray() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toByteArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toByteArray() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the binary representation of this <db:link xlink:href="quuid.xml">QUuid</db:link>. The byte array is formatted as five hex fields separated by '-' and enclosed in curly braces, i.e., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex digit. From left to right, the five hex fields are obtained from the four public data members in <db:link xlink:href="quuid.xml">QUuid</db:link> as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field #</db:para>
</db:th>
<db:th>
<db:para>Source</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>data1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>data2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>data3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>data4[0] .. data4[1]</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>5</db:para>
</db:td>
<db:td>
<db:para>data4[2] .. data4[7]</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="toByteArray-1">
<db:title>[since 5.11] QByteArray QUuid::toByteArray(QUuid::StringFormat <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toByteArray</db:methodname>
<db:methodparam>
<db:type>QUuid::StringFormat</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toByteArray(QUuid::StringFormat mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string representation of this <db:link xlink:href="quuid.xml">QUuid</db:link>, with the formattiong controlled by the <db:code role="parameter">mode</db:code> parameter. From left to right, the five hex fields are obtained from the four public data members in <db:link xlink:href="quuid.xml">QUuid</db:link> as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field #</db:para>
</db:th>
<db:th>
<db:para>Source</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>data1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>data2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>data3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>data4[0] .. data4[1]</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>5</db:para>
</db:td>
<db:td>
<db:para>data4[2] .. data4[7]</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="toCFUUID">
<db:title>[since 5.7] CFUUIDRef QUuid::toCFUUID() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>CFUUIDRef</db:type>
<db:methodname>toCFUUID</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">CFUUIDRef toCFUUID() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a CFUUID from a <db:link xlink:href="quuid.xml">QUuid</db:link>. The caller owns the CFUUID and is responsible for releasing it.</db:para>
<db:note>
<db:para>this function is only available on Apple platforms.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="toNSUUID">
<db:title>[since 5.7] NSUUID *QUuid::toNSUUID() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>NSUUID *</db:type>
<db:methodname>toNSUUID</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">NSUUID * toNSUUID() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a NSUUID from a <db:link xlink:href="quuid.xml">QUuid</db:link>. The NSUUID is autoreleased.</db:para>
<db:note>
<db:para>this function is only available on Apple platforms.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="toRfc4122">
<db:title>[since 4.8] QByteArray QUuid::toRfc4122() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toRfc4122</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toRfc4122() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the binary representation of this <db:link xlink:href="quuid.xml">QUuid</db:link>. The byte array is in big endian format, and formatted according to RFC 4122, section 4.1.2 - &quot;Layout and byte order&quot;.</db:para>
<db:para>The order is as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field #</db:para>
</db:th>
<db:th>
<db:para>Source</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>data1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>data2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>data3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>data4[0] .. data4[7]</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QUuid::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string representation of this <db:link xlink:href="quuid.xml">QUuid</db:link>. The string is formatted as five hex fields separated by '-' and enclosed in curly braces, i.e., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex digit. From left to right, the five hex fields are obtained from the four public data members in <db:link xlink:href="quuid.xml">QUuid</db:link> as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field #</db:para>
</db:th>
<db:th>
<db:para>Source</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>data1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>data2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>data3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>data4[0] .. data4[1]</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>5</db:para>
</db:td>
<db:td>
<db:para>data4[2] .. data4[7]</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="toString-1">
<db:title>[since 5.11] QString QUuid::toString(QUuid::StringFormat <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:methodparam>
<db:type>QUuid::StringFormat</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString(QUuid::StringFormat mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string representation of this <db:link xlink:href="quuid.xml">QUuid</db:link>, with the formattiong controlled by the <db:code role="parameter">mode</db:code> parameter. From left to right, the five hex fields are obtained from the four public data members in <db:link xlink:href="quuid.xml">QUuid</db:link> as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field #</db:para>
</db:th>
<db:th>
<db:para>Source</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>data1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>data2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>data3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>data4[0] .. data4[1]</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>5</db:para>
</db:td>
<db:td>
<db:para>data4[2] .. data4[7]</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="variant">
<db:title>QUuid::Variant QUuid::variant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUuid::Variant</db:type>
<db:methodname>variant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid::Variant variant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value in the <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> of the UUID. If the return value is <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>, call <db:link xlink:href="quuid.xml#version">version</db:link>() to see which layout it uses. The null UUID is considered to be of an unknown variant.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#version">version</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="version">
<db:title>QUuid::Version QUuid::version() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUuid::Version</db:type>
<db:methodname>version</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid::Version version() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="quuid.xml#version-field">version field</db:link> of the UUID, if the UUID's <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> is <db:link xlink:href="quuid.xml#Variant-enum">QUuid::DCE</db:link>. Otherwise it returns <db:link xlink:href="quuid.xml#Version-enum">QUuid::VerUnknown</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-GUID">
<db:title>GUID QUuid::operator GUID() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GUID</db:type>
<db:methodname>operator GUID</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GUID operator GUID() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a Windows GUID from a <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:warning>
<db:para>This function is only for Windows platforms.</db:para>
</db:warning>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QUuid::operator!=(const QUuid &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QUuid &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="quuid.xml">QUuid</db:link> and the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> are different; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool QUuid::operator!=(const GUID &amp;<db:emphasis>guid</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const GUID &amp;</db:type>
<db:parameter>guid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const GUID &amp;guid) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this UUID is not equal to the Windows GUID <db:code role="parameter">guid</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QUuid::operator&lt;(const QUuid &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QUuid &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="quuid.xml">QUuid</db:link> has the same <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> as the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> and is lexicographically <db:emphasis>before</db:emphasis> the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link>. If the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> has a different variant field, the return value is determined by comparing the two <db:link xlink:href="quuid.xml#Variant-enum">variants</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QUuid &amp;QUuid::operator=(const GUID &amp;<db:emphasis>guid</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QUuid &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const GUID &amp;</db:type>
<db:parameter>guid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QUuid &amp; operator=(const GUID &amp;guid)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns a Windows <db:code role="parameter">guid</db:code> to a Qt <db:link xlink:href="quuid.xml">QUuid</db:link>.</db:para>
<db:warning>
<db:para>This function is only for Windows platforms.</db:para>
</db:warning>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QUuid::operator==(const QUuid &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QUuid &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="quuid.xml">QUuid</db:link> and the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> are identical; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool QUuid::operator==(const GUID &amp;<db:emphasis>guid</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const GUID &amp;</db:type>
<db:parameter>guid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const GUID &amp;guid) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this UUID is equal to the Windows GUID <db:code role="parameter">guid</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool QUuid::operator&gt;(const QUuid &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QUuid &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="quuid.xml">QUuid</db:link> has the same <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> as the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> and is lexicographically <db:emphasis>after</db:emphasis> the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link>. If the <db:code role="parameter">other</db:code> <db:link xlink:href="quuid.xml">QUuid</db:link> has a different variant field, the return value is determined by comparing the two <db:link xlink:href="quuid.xml#Variant-enum">variants</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash">
<db:title>[since 5.0] uint qHash(const QUuid &amp;<db:emphasis>uuid</db:emphasis>, uint <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>uuid</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qHash(const QUuid &amp;uuid, uint seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a hash of the UUID <db:code role="parameter">uuid</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, const QUuid &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;s, const QUuid &amp;id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the UUID <db:code role="parameter">id</db:code> to the data stream <db:code role="parameter">s</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>dbg</db:emphasis>, const QUuid &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>dbg</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug dbg, const QUuid &amp;id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the UUID <db:code role="parameter">id</db:code> to the output stream for debugging information <db:code role="parameter">dbg</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[since 5.5] bool operator&lt;=(const QUuid &amp;<db:emphasis>lhs</db:emphasis>, const QUuid &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QUuid &amp;lhs, const QUuid &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> has the same <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> as <db:code role="parameter">rhs</db:code> and is lexicographically <db:emphasis>not after</db:emphasis> <db:code role="parameter">rhs</db:code>. If <db:code role="parameter">rhs</db:code> has a different variant field, the return value is determined by comparing the two <db:link xlink:href="quuid.xml#Variant-enum">variants</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[since 5.5] bool operator&gt;=(const QUuid &amp;<db:emphasis>lhs</db:emphasis>, const QUuid &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QUuid &amp;lhs, const QUuid &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> has the same <db:link xlink:href="quuid.xml#variant-field">variant field</db:link> as <db:code role="parameter">rhs</db:code> and is lexicographically <db:emphasis>not before</db:emphasis> <db:code role="parameter">rhs</db:code>. If <db:code role="parameter">rhs</db:code> has a different variant field, the return value is determined by comparing the two <db:link xlink:href="quuid.xml#Variant-enum">variants</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quuid.xml#variant">variant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, QUuid &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QUuid &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;s, QUuid &amp;id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a UUID from the stream <db:code role="parameter">s</db:code> into <db:code role="parameter">id</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
