<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStackedWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> class provides a stack of widgets where only one widget is visible at a time.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStackedWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qframe.xml" xlink:role="class">QFrame</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStackedWidget is part of <db:simplelist><db:member>organizers</db:member><db:member>geomanagement</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> can be used to create a user interface similar to the one provided by <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>. It is a convenience layout widget built on top of the <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> class.</db:para>
<db:para>Like <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link>, <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> can be constructed and populated with a number of child widgets (&quot;pages&quot;):</db:para>
<db:programlisting language="cpp">    QWidget *firstPageWidget = new QWidget;
    QWidget *secondPageWidget = new QWidget;
    QWidget *thirdPageWidget = new QWidget;

    QStackedWidget *stackedWidget = new QStackedWidget;
    stackedWidget-&gt;addWidget(firstPageWidget);
    stackedWidget-&gt;addWidget(secondPageWidget);
    stackedWidget-&gt;addWidget(thirdPageWidget);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(stackedWidget);
    setLayout(layout);
</db:programlisting>
<db:para><db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> provides no intrinsic means for the user to switch page. This is typically done through a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> or a <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> that stores the titles of the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>'s pages. For example:</db:para>
<db:programlisting language="cpp">    QComboBox *pageComboBox = new QComboBox;
    pageComboBox-&gt;addItem(tr(&quot;Page 1&quot;));
    pageComboBox-&gt;addItem(tr(&quot;Page 2&quot;));
    pageComboBox-&gt;addItem(tr(&quot;Page 3&quot;));
    connect(pageComboBox, SIGNAL(activated(int)),
            stackedWidget, SLOT(setCurrentIndex(int)));

</db:programlisting>
<db:para>When populating a stacked widget, the widgets are added to an internal list. The <db:link xlink:href="qstackedwidget.xml#indexOf">indexOf</db:link>() function returns the index of a widget in that list. The widgets can either be added to the end of the list using the <db:link xlink:href="qstackedwidget.xml#addWidget">addWidget</db:link>() function, or inserted at a given index using the <db:link xlink:href="qstackedwidget.xml#insertWidget">insertWidget</db:link>() function. The <db:link xlink:href="qstackedwidget.xml#removeWidget">removeWidget</db:link>() function removes a widget from the stacked widget. The number of widgets contained in the stacked widget can be obtained using the <db:link xlink:href="qstackedwidget.xml#count-prop">count</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qstackedwidget.xml#widget">widget</db:link>() function returns the widget at a given index position. The index of the widget that is shown on screen is given by <db:link xlink:href="qstackedwidget.xml#currentIndex-prop">currentIndex</db:link>() and can be changed using <db:link xlink:href="qstackedwidget.xml#currentIndex-prop">setCurrentIndex</db:link>(). In a similar manner, the currently shown widget can be retrieved using the <db:link xlink:href="qstackedwidget.xml#currentWidget">currentWidget</db:link>() function, and altered using the <db:link xlink:href="qstackedwidget.xml#setCurrentWidget">setCurrentWidget</db:link>() function.</db:para>
<db:para>Whenever the current widget in the stacked widget changes or a widget is removed from the stacked widget, the <db:link xlink:href="qstackedwidget.xml#currentChanged">currentChanged</db:link>() and <db:link xlink:href="qstackedwidget.xml#widgetRemoved">widgetRemoved</db:link>() signals are emitted respectively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link></db:member>
<db:member><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-configdialog-example.xml">Config Dialog Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:para>This property holds the number of widgets contained by this stacked widget</db:para>
<db:para>By default, this property contains a value of 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">count</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#currentIndex-prop">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:para>This property holds the index position of the widget that is visible</db:para>
<db:para>The current index is -1 if there is no current widget.</db:para>
<db:para>By default, this property contains a value of -1 because the stack is initially empty.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentIndex</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentIndex</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstackedwidget.xml#currentChanged">currentChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#currentWidget">currentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStackedWidget">
<db:title>[explicit] QStackedWidget::QStackedWidget(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#insertWidget">insertWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QStackedWidget">
<db:title>[virtual noexcept] QStackedWidget::~QStackedWidget()</db:title>
<db:para>Destroys this stacked widget, and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="addWidget">
<db:title>int QStackedWidget::addWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Appends the given <db:code role="parameter">widget</db:code> to the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> and returns the index position. Ownership of <db:code role="parameter">widget</db:code> is passed on to the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>.</db:para>
<db:para>If the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> is empty before this function is called, <db:code role="parameter">widget</db:code> becomes the current widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#insertWidget">insertWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#removeWidget">removeWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentChanged">
<db:title>void QStackedWidget::currentChanged(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the current widget changes.</db:para>
<db:para>The parameter holds the <db:code role="parameter">index</db:code> of the new current widget, or -1 if there isn't a new one (for example, if there are no widgets in the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>).</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qstackedwidget.xml#currentIndex-prop">currentIndex</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#currentWidget">currentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentWidget">
<db:title>QWidget *QStackedWidget::currentWidget() const</db:title>
<db:para>Returns the current widget, or 0 if there are no child widgets.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#currentIndex-prop">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QStackedWidget::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#event" role="function">QFrame::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="indexOf">
<db:title>int QStackedWidget::indexOf(QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:para>Returns the index of the given <db:code role="parameter">widget</db:code>, or -1 if the given <db:code role="parameter">widget</db:code> is not a child of the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#currentIndex-prop">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertWidget">
<db:title>int QStackedWidget::insertWidget(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Inserts the given <db:code role="parameter">widget</db:code> at the given <db:code role="parameter">index</db:code> in the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>. Ownership of <db:code role="parameter">widget</db:code> is passed on to the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>. If <db:code role="parameter">index</db:code> is out of range, the <db:code role="parameter">widget</db:code> is appended (in which case it is the actual index of the <db:code role="parameter">widget</db:code> that is returned).</db:para>
<db:para>If the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> was empty before this function is called, the given <db:code role="parameter">widget</db:code> becomes the current widget.</db:para>
<db:para>Inserting a new widget at an index less than or equal to the current index will increment the current index, but keep the current widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#removeWidget">removeWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeWidget">
<db:title>void QStackedWidget::removeWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">widget</db:code> from the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>. i.e., <db:code role="parameter">widget</db:code> is <db:emphasis>not</db:emphasis> deleted but simply removed from the stacked layout, causing it to be hidden.</db:para>
<db:note>
<db:para>Parent object and parent widget of <db:code role="parameter">widget</db:code> will remain the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>. If the application wants to reuse the removed <db:code role="parameter">widget</db:code>, then it is recommended to re-parent it.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#insertWidget">insertWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#currentWidget">currentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentWidget">
<db:title>void QStackedWidget::setCurrentWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the current widget to be the specified <db:code role="parameter">widget</db:code>. The new current widget must already be contained in this stacked widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#currentWidget">currentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#currentIndex-prop">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QStackedWidget::widget(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the widget at the given <db:code role="parameter">index</db:code>, or 0 if there is no such widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#currentWidget">currentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedwidget.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widgetRemoved">
<db:title>void QStackedWidget::widgetRemoved(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a widget is removed. The widget's <db:code role="parameter">index</db:code> is passed as parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml#removeWidget">removeWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
