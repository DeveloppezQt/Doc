<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TreeViewDelegate QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A delegate that can be assigned to a <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link>.</db:para>
<db:para>This type was introduced in Qt 6.3.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>ItemDelegate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TreeViewDelegate is part of <db:simplelist><db:member>qtquickcontrols-delegates</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-treeviewdelegate.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml">TreeViewDelegate</db:link> is a delegate that can be assigned to the <db:link xlink:href="qml-qtquick-tableview.xml#delegate-prop">delegate property</db:link> of a <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link>. It renders the tree, as well as the other columns, in the view using the application style.</db:para>
<db:programlisting language="cpp">TreeView {
    anchors.fill: parent
    delegate: TreeViewDelegate {}
    // The model needs to be a QAbstractItemModel
    // model: yourTreeModel
}
</db:programlisting>
<db:para><db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml">TreeViewDelegate</db:link> inherits <db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link>, which means that it's composed of three items: a <db:link xlink:href="qml-qtquick-controls-control.xml#background-prop">background</db:link>, a <db:link xlink:href="qml-qtquick-controls-control.xml#contentItem-prop">contentItem</db:link>, and an <db:link xlink:href="qml-qtquick-controls-abstractbutton.xml#indicator-prop">indicator</db:link>. <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml">TreeViewDelegate</db:link> takes care of <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#indentation-prop">indenting</db:link> the contentItem and the indicator according their location in the tree. The indicator will only be visible if the delegate item is inside the <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#isTreeNode-prop">tree column</db:link>, and renders a model item <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#hasChildren-prop">with children</db:link>.</db:para>
<db:para>If you change the indicator, it will no longer be indented by default. Instead you need to indent it yourself by setting the <db:link xlink:href="qml-qtquick-item.xml#x-prop">x position</db:link> of the indicator, taking the <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#depth-prop">depth</db:link> and <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#indentation-prop">indentation</db:link> into account. Below is an example of how to do that:</db:para>
<db:programlisting language="cpp">TreeViewDelegate {
    indicator: Item {
        x: leftMargin + (depth * indentation)
    }
}
</db:programlisting>
<db:para>The position of the contentItem is controlled with <db:link xlink:href="qml-qtquick-controls-control.xml#padding-prop">padding</db:link>. This means that you can change the contentItem without dealing with indentation. But it also means that you should avoid changing padding to something else, as that will remove the indentation. The space to the left of the indicator is instead controlled with <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#leftMargin-prop">leftMargin</db:link>. The space between the indicator and the contentItem is controlled with <db:link xlink:href="qml-qtquick-controls-control.xml#spacing-prop">spacing</db:link>. And the space to the right of the contentItem is controlled with <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#rightMargin-prop">rightMargin</db:link>.</db:para>
<db:section xml:id="interacting-with-pointers">
<db:title>Interacting with pointers</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml">TreeViewDelegate</db:link> inherits <db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link>. This means that it will emit signals such as <db:link xlink:href="qml-qtquick-controls-abstractbutton.xml#clicked-signal">clicked</db:link> when the user clicks on the delegate. If needed, you could connect to that signal to implement application specific functionality, in addition to the default expand/collapse behavior (and even set <db:link xlink:href="qml-qtquick-tableview.xml#pointerNavigationEnabled-prop">pointerNavigationEnabled</db:link> to <db:code>false</db:code>, to disable the default behavior as well).</db:para>
<db:para>But the <db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link> API does not give you information about the position of the click, or which modifiers are being held. If this is needed, a better approach would be to use pointer handlers, for example:</db:para>
<db:programlisting language="cpp">TreeView {
    id: treeView
    delegate: TreeViewDelegate {
        TapHandler {
            acceptedButtons: Qt.RightButton
            onTapped: someContextMenu.open()
        }

        TapHandler {
            acceptedModifiers: Qt.ControlModifier
            onTapped: {
                if (treeView.isExpanded(row))
                    treeView.collapseRecursively(row)
                else
                    treeView.expandRecursively(row)
            }
        }
    }
}
</db:programlisting>
<db:note>
<db:para>If you want to disable the default behavior that occurs when the user clicks on the delegate (like changing the current index), you can set <db:link xlink:href="qml-qtquick-tableview.xml#pointerNavigationEnabled-prop">pointerNavigationEnabled</db:link> to <db:code>false</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="editing-nodes-in-the-tree">
<db:title>Editing nodes in the tree</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml">TreeViewDelegate</db:link> has a default <db:link xlink:href="qml-qtquick-tableview.xml#editDelegate-attached-prop">edit delegate</db:link> assigned. If <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> has <db:link xlink:href="qml-qtquick-tableview.xml#editTriggers-prop">edit triggers</db:link> set, and the <db:link xlink:href="qml-qtquick-tableview.xml#model-prop">model</db:link> has support for <db:link xlink:href="qml-qtquick-tableview.xml#editing-cells">editing model items</db:link>, then the user can activate any of the edit triggers to edit the text of the <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#current-prop">current</db:link> tree node.</db:para>
<db:para>The default edit delegate will try to use the <db:code>Qt.EditRole</db:code> to read and write data to the <db:link xlink:href="qml-qtquick-tableview.xml#model-prop">model</db:link>. If <db:link xlink:href="qabstractitemmodel.xml#data">QAbstractItemModel::data</db:link>() returns an empty string for this role, then <db:code>Qt.DisplayRole</db:code> will be used instead.</db:para>
<db:para>You can always assign your own custom edit delegate to <db:link xlink:href="qml-qtquick-tableview.xml#editDelegate-attached-prop">TableView.editDelegate</db:link> if you have needs outside what the default edit delegate offers.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="current-prop">
<db:title>current : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>current</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds if the delegate represent the <db:link xlink:href="qitemselectionmodel.xml#currentIndex">current index</db:link> in the <db:link xlink:href="qml-qtquick-tableview.xml#selectionModel-prop">selection model</db:link>.</db:para>
</db:section>
<db:section xml:id="depth-prop">
<db:title>depth : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>depth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the depth of the model item drawn by the delegate. The depth of a model item is the same as the number of ancestors it has in the model.</db:para>
</db:section>
<db:section xml:id="editing-prop">
<db:title>[since 6.5] editing : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>editing</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds if the delegate is being <db:link xlink:href="qml-qtquick-tableview.xml#editing-cells">edited.</db:link></db:para>
<db:para>This property was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="expanded-prop">
<db:title>expanded : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>expanded</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is <db:code>true</db:code> if the model item drawn by the delegate is expanded in the view.</db:para>
</db:section>
<db:section xml:id="hasChildren-prop">
<db:title>hasChildren : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>hasChildren</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is <db:code>true</db:code> if the model item drawn by the delegate has children in the model.</db:para>
</db:section>
<db:section xml:id="indentation-prop">
<db:title>indentation : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>indentation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the space a child is indented horizontally relative to its parent.</db:para>
</db:section>
<db:section xml:id="isTreeNode-prop">
<db:title>isTreeNode : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>isTreeNode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is <db:code>true</db:code> if the delegate item draws a node in the tree. Only one column in the view will be used to draw the tree, and therefore, only delegate items in that column will have this property set to <db:code>true</db:code>.</db:para>
<db:para>A node in the tree is <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#indentation-prop">indented</db:link> according to its <db:code>depth</db:code>, and show an <db:link xlink:href="qml-qtquick-controls-abstractbutton.xml#indicator-prop">indicator</db:link> if <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#hasChildren-prop">hasChildren</db:link> is <db:code>true</db:code>. Delegate items in other columns will have this property set to <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="leftMargin-prop">
<db:title>leftMargin : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>leftMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the space between the left edge of the view and the left edge of the indicator (in addition to indentation). If no indicator is visible, the space will be between the left edge of the view and the left edge of the contentItem.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#rightMargin-prop">rightMargin</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#indentation-prop">indentation</db:link></db:member>
<db:member>spacing</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rightMargin-prop">
<db:title>rightMargin : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>rightMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the space between the right edge of the view and the right edge of the contentItem.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#leftMargin-prop">leftMargin</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml#indentation-prop">indentation</db:link></db:member>
<db:member>spacing</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selected-prop">
<db:title>selected : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>selected</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds if the delegate represent a <db:link xlink:href="qitemselectionmodel.xml#selection">selected index</db:link> in the <db:link xlink:href="qml-qtquick-tableview.xml#selectionModel-prop">selection model</db:link>.</db:para>
</db:section>
<db:section xml:id="treeView-prop">
<db:title>treeView : TreeView</db:title>
<db:fieldsynopsis>
<db:type>TreeView</db:type>
<db:varname>treeView</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property points to the <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> that contains the delegate item.</db:para>
</db:section>
</db:section>
</db:article>
