<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Quick Items Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of Qt Quick Items in Quick 3D scene.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/quickitems-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates using <db:link xlink:href="qtquick3d-2d.xml">Qt Quick 2D items in the Quick 3D scene</db:link>.</db:para>
<db:section xml:id="quick-items-in-a-quick-3d-scene">
<db:title>Quick Items in a Quick 3D Scene</db:title>
<db:para>Qt Quick 2D <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>s, together with all their child items, can be added into Quick 3D scenes. When using Qt Quick types in the 3D scene, there are a few things to note:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>When an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> is inside a <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link>, its top-left corner is placed to the Node's origin. This means that the item will often want to specify <db:code>anchors.centerIn: parent</db:code> to ensure the <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link>'s origin serves the center point of the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>3D transforms are inherited from the parent <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link>. If more than one <db:code>Item</db:code> should be affected by the same transform, then these items can be grouped together under a common parent <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> under the <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In Qt 6.0, items do not receive touch/mouse events e.g. with <db:code>MouseArea</db:code>, so they should be non-interactive.</db:para>
</db:listitem>
<db:listitem>
<db:para>Quick items are not affected by lights and shadows.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml#clip-prop">Clipping</db:link> should be avoided and not relied on.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Unlike earlier Qt versions, and other 2D-in-3D embedding approaches, parenting a Qt Quick item to a Qt Quick 3D node does not imply creating a texture, rendering the 2D content to it, and then drawing a textured quad. Rather, Qt 6.0 supports rendering the 2D content within the same render pass as the 3D scene. This can present potentially huge performance improvements in practice. This does not apply when the Item were to render using an additional render target by design, for example because it has <db:link xlink:href="qml-qtquick-item.xml#item-layers">layer.enabled</db:link> set to true, or because it is a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link>.</db:para>
</db:section>
<db:section xml:id="the-test-scene">
<db:title>The test scene</db:title>
<db:para>The important parts of this example are the scene content of the <db:code>View3D</db:code> element.</db:para>
<db:para>We start by adding the layer furthest away from the camera. This layer contains <db:code>Rectangle</db:code>, <db:code>Text</db:code> and <db:code>Image</db:code> elements. To ensure that the elements in the layer are positioned correctly they are grouped together under a common parent <db:code>Item</db:code>. Note that all content is clipped inside this root item so it needs to be sized appropriately.</db:para>
<db:programlisting language="qml">Node {
    position: Qt.vector3d(0, 100, -120)
    Item {
        width: 400
        height: 400
        anchors.centerIn: parent
        Rectangle {
            anchors.fill: parent
            opacity: 0.4
            color: &quot;#202020&quot;
            radius: 10
            border.width: 2
            border.color: &quot;#f0f0f0&quot;
        }
        Text {
            anchors.top: parent.top
            anchors.topMargin: 10
            anchors.horizontalCenter: parent.horizontalCenter
            font.pixelSize: 20
            color: &quot;#e0e0e0&quot;
            style: Text.Raised
            text: qsTr(&quot;Background Item&quot;)
        }
        Image {
            anchors.centerIn: parent
            source: &quot;Built_with_Qt_RGB_logo_vertical&quot;
        }
    }
}
</db:programlisting>
<db:para>Next <db:code>Node</db:code> and its items are positioned a bit closer to the camera. It contains three <db:code>Rectangle</db:code> items which animate both the x position and the rotation. Note that the animations are done on the parent <db:code>Node</db:code> while the content of the Quick <db:code>Item</db:code> remains static. From a performance perspective this is a good approach with more complex items.</db:para>
<db:programlisting language="qml">Node {
    position: Qt.vector3d(0, 150, 100)
    SequentialAnimation on x {
        loops: Animation.Infinite
        NumberAnimation {
            to: -200
            duration: 1500
            easing.type: Easing.InOutQuad
        }
        NumberAnimation {
            to: 200
            duration: 1500
            easing.type: Easing.InOutQuad
        }
    }
    NumberAnimation on eulerRotation.z {
        loops: Animation.Infinite
        from: 0
        to: 360
        duration: 4000
        easing.type: Easing.InOutBack
    }
    Item {
        width: 400
        height: 400
        anchors.centerIn: parent
        // This allows rendering into offscreen surface and caching it.
        layer.enabled: true
        Rectangle {
            x: 150
            y: 100
            width: 100
            height: 100
            radius: 50
            color: &quot;#80808020&quot;
            border.color: &quot;black&quot;
            border.width: 2
        }
        Rectangle {
            x: 90
            y: 200
            width: 100
            height: 100
            radius: 50
            color: &quot;#80808020&quot;
            border.color: &quot;black&quot;
            border.width: 2
        }
        Rectangle {
            x: 210
            y: 200
            width: 100
            height: 100
            radius: 50
            color: &quot;#80808020&quot;
            border.color: &quot;black&quot;
            border.width: 2
        }
    }
}
</db:programlisting>
<db:para>The third item layer of this example contains a single <db:code>Text</db:code> item with an opacity animation. The Text item is automatically centered into the parent <db:code>Node</db:code>.</db:para>
<db:programlisting language="qml">Node {
    position: Qt.vector3d(0, 80, 250)
    Text {
        anchors.centerIn: parent
        width: 300
        wrapMode: Text.WordWrap
        horizontalAlignment: Text.AlignJustify
        font.pixelSize: 14
        color: &quot;#e0e0e0&quot;
        style: Text.Raised
        text: &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod &quot; +
              &quot;tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim &quot; +
              &quot;veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea &quot; +
              &quot;commodo consequat.&quot;
        SequentialAnimation on opacity {
            loops: Animation.Infinite
            NumberAnimation {
                to: 0
                duration: 1500
                easing.type: Easing.InOutQuad
            }
            NumberAnimation {
                to: 1
                duration: 1500
                easing.type: Easing.InOutQuad
            }
        }
    }
}
</db:programlisting>
<db:para>To visualize z-ordering of the above Quick Item layers, we will also setup a model for the 3D wrecking ball. It animates rotation around the top <db:code>Node</db:code>, which makes the sphere move through the other layers.</db:para>
<db:programlisting language="qml">Node {
    position: Qt.vector3d(0, 800, 0)
    SequentialAnimation on eulerRotation.x {
        loops: Animation.Infinite
        NumberAnimation {
            to: 20
            duration: 3500
            easing.type: Easing.InOutQuad
        }
        NumberAnimation {
            to: -20
            duration: 3500
            easing.type: Easing.InOutQuad
        }
    }
    Model {
        source: &quot;#Cylinder&quot;
        y: -300
        scale: Qt.vector3d(0.1, 6.1, 0.1)
        materials: DefaultMaterial {
            diffuseColor: Qt.rgba(0.9, 0.9, 0.9, 1.0)
        }
    }
    Model {
        source: &quot;#Sphere&quot;
        y: -700
        scale: Qt.vector3d(2, 2, 2)
        materials: DefaultMaterial {
            diffuseColor: Qt.rgba(0.4, 0.4, 0.4, 1.0)
        }
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="quickitems/CMakeLists.txt">quickitems/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickitems/main.cpp">quickitems/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickitems/main.qml">quickitems/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickitems/qml.qrc">quickitems/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickitems/quickitems.pro">quickitems/quickitems.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="quickitems/Built_with_Qt_RGB_logo_vertical.png">quickitems/Built_with_Qt_RGB_logo_vertical.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick3d-2d.xml">Qt Quick 3D Scenes with 2D Content</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:section></db:article>
