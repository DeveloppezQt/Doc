<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>FolderListModel QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> provides a model of the contents of a file system folder.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt.labs.folderlistmodel 2.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>FolderListModel is part of <db:simplelist><db:member>qtquick-models</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> provides access to information about the contents of a folder in the local file system, exposing a list of files to views and other data components.</db:para>
<db:note>
<db:para>This type is made available by importing the <db:code>Qt.labs.folderlistmodel</db:code> module. <db:emphasis>Elements in the Qt.labs module are not guaranteed to remain compatible in future versions.</db:emphasis></db:para>
</db:note>
<db:programlisting language="qml">import Qt.labs.folderlistmodel
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#folder-prop">folder</db:link> property specifies the folder to access. Information about the files and directories in the folder is supplied via the model's interface. Components access names and paths via the following roles:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>fileName</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>filePath</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileURL</db:code> (since Qt 5.2; deprecated since Qt 5.15)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileUrl</db:code> (since Qt 5.15)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileBaseName</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileSuffix</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileSize</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileModified</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileAccessed</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileIsDir</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Additionally a file entry can be differentiated from a folder entry via the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#isFolder-method">isFolder</db:link>() method.</db:para>
<db:section xml:id="filtering">
<db:title>Filtering</db:title>
<db:para>Various properties can be set to filter the number of files and directories exposed by the model.</db:para>
<db:para>The <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#nameFilters-prop">nameFilters</db:link> property can be set to contain a list of wildcard filters that are applied to names of files and directories, causing only those that match the filters to be exposed.</db:para>
<db:para>Directories can be included or excluded using the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#showDirs-prop">showDirs</db:link> property, navigation directories can also be excluded by setting the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#showDotAndDotDot-prop">showDotAndDotDot</db:link> property to false, hidden files can be included or excluded using the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#showHidden-prop">showHidden</db:link> property.</db:para>
<db:para>It is sometimes useful to limit the files and directories exposed to those that the user can access. The <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#showOnlyReadable-prop">showOnlyReadable</db:link> property can be set to enable this feature.</db:para>
</db:section>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>The following example shows a <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> being used to provide a list of QML files in a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>:</db:para>
<db:programlisting language="qml">import QtQuick
import Qt.labs.folderlistmodel

ListView {
    width: 200; height: 400

    FolderListModel {
        id: folderModel
        nameFilters: [&quot;*.qml&quot;]
    }

    Component {
        id: fileDelegate
        Text { text: fileName }
    }

    model: folderModel
    delegate: fileDelegate
}
</db:programlisting>
</db:section>
<db:section xml:id="path-separators">
<db:title>Path Separators</db:title>
<db:para>Qt uses &quot;/&quot; as a universal directory separator in the same way that &quot;/&quot; is used as a path separator in URLs. If you always use &quot;/&quot; as a directory separator, Qt will translate your paths to conform to the underlying operating system.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">QML Data Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="caseSensitive-prop">
<db:title>[since 5.7] caseSensitive : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>caseSensitive</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Use case sensitive pattern matching.</db:para>
<db:para>By default, this property is true.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the number of items in the current folder that match the filter criteria.</db:para>
</db:section>
<db:section xml:id="folder-prop">
<db:title>folder : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>folder</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:code role="parameter">folder</db:code> property holds a URL for the folder that the model currently provides.</db:para>
<db:para>The value must be a <db:code>file</db:code>: or <db:code>qrc</db:code>: URL, or a relative URL.</db:para>
<db:para>The default value is an invalid URL.</db:para>
</db:section>
<db:section xml:id="nameFilters-prop">
<db:title>nameFilters : list&lt;string&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;string&gt;</db:type>
<db:varname>nameFilters</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:code role="parameter">nameFilters</db:code> property contains a list of file name filters. The filters may include the ? and * wildcards.</db:para>
<db:para>The example below filters on PNG and JPEG files:</db:para>
<db:programlisting language="qml">FolderListModel {
    nameFilters: [ &quot;*.png&quot;, &quot;*.jpg&quot; ]
}
</db:programlisting>
<db:note>
<db:para>Directories are not excluded by filters.</db:para>
</db:note>
</db:section>
<db:section xml:id="parentFolder-prop">
<db:title>[read-only] parentFolder : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>parentFolder</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the URL of the parent of the current <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#folder-prop">folder</db:link>.</db:para>
</db:section>
<db:section xml:id="rootFolder-prop">
<db:title>rootFolder : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>rootFolder</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is set, the given folder will be treated as the root in the file system, so that you can only traverse subfolders within it.</db:para>
</db:section>
<db:section xml:id="showDirs-prop">
<db:title>showDirs : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>showDirs</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If true, directories are included in the model; otherwise only files are included.</db:para>
<db:para>By default, this property is true.</db:para>
<db:para>Note that the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#nameFilters-prop">nameFilters</db:link> are not applied to directories.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#showDotAndDotDot-prop">showDotAndDotDot</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showDirsFirst-prop">
<db:title>showDirsFirst : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>showDirsFirst</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If true, if directories are included in the model they will always be shown first, then the files.</db:para>
<db:para>By default, this property is false.</db:para>
</db:section>
<db:section xml:id="showDotAndDotDot-prop">
<db:title>showDotAndDotDot : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>showDotAndDotDot</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If true, the &quot;.&quot; and &quot;..&quot; directories are included in the model; otherwise they are excluded.</db:para>
<db:para>By default, this property is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#showDirs-prop">showDirs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showFiles-prop">
<db:title>[since 5.2] showFiles : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>showFiles</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If true, files are included in the model; otherwise only directories are included.</db:para>
<db:para>By default, this property is true.</db:para>
<db:para>This property was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#showDirs-prop">showDirs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showHidden-prop">
<db:title>[since 5.2] showHidden : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>showHidden</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If true, hidden files and directories are included in the model; otherwise they are excluded.</db:para>
<db:para>By default, this property is false.</db:para>
<db:para>This property was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="showOnlyReadable-prop">
<db:title>showOnlyReadable : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>showOnlyReadable</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If true, only readable files and directories are shown; otherwise all files and directories are shown.</db:para>
<db:para>By default, this property is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#showDirs-prop">showDirs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortCaseSensitive-prop">
<db:title>[since 5.12] sortCaseSensitive : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>sortCaseSensitive</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If set to <db:code>true</db:code>, the sort is case sensitive. This property is <db:code>true</db:code> by default.</db:para>
<db:para>This property was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="sortField-prop">
<db:title>sortField : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>sortField</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:code role="parameter">sortField</db:code> property contains field to use for sorting. sortField may be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Unsorted - no sorting is applied.</db:para>
</db:listitem>
<db:listitem>
<db:para>Name - sort by filename</db:para>
</db:listitem>
<db:listitem>
<db:para>Time - sort by time modified</db:para>
</db:listitem>
<db:listitem>
<db:para>Size - sort by file size</db:para>
</db:listitem>
<db:listitem>
<db:para>Type - sort by file type (extension)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#sortReversed-prop">sortReversed</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortReversed-prop">
<db:title>sortReversed : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>sortReversed</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If set to true, reverses the sort order. The default is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml#sortField-prop">sortField</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only, since 5.11] status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>status</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the status of folder reading. It can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link>.Null - no <db:code role="parameter">folder</db:code> has been set</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link>.Ready - the folder has been loaded</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link>.Loading - the folder is currently being loaded</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Use this status to provide an update or respond to the status change in some way. For example, you could:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Trigger a state change:</db:para>
<db:programlisting language="qml">State { name: 'loaded'; when: folderModel.status == FolderListModel.Ready }
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Implement an <db:code>onStatusChanged</db:code> signal handler:</db:para>
<db:programlisting language="qml">FolderListModel {
    id: folderModel
    onStatusChanged: if (folderModel.status == FolderListModel.Ready) console.log('Loaded')
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Bind to the status value:</db:para>
<db:programlisting language="qml">Text { text: folderModel.status == FolderListModel.Ready ? 'Loaded' : 'Not loaded' }
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in Qt 5.11.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="get-method">
<db:title>var get(int <db:emphasis>index</db:emphasis>, string <db:emphasis>property</db:emphasis>)</db:title>
<db:para>Returns the folder <db:code role="parameter">property</db:code> for the given <db:code role="parameter">index</db:code>. The following properties are available:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>fileName</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>filePath</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileURL</db:code> (since Qt 5.2; deprecated since Qt 5.15)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileUrl</db:code> (since Qt 5.15)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileBaseName</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileSuffix</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileSize</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileModified</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileAccessed</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fileIsDir</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="indexOf-method">
<db:title>[since 5.6] int indexOf(url <db:emphasis>file</db:emphasis>)</db:title>
<db:para>Returns the index of the given <db:code role="parameter">file</db:code> URL if the model contains it, or -1 if not.</db:para>
<db:para>This method was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="isFolder-method">
<db:title>bool isFolder(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns true if the entry <db:code role="parameter">index</db:code> is a folder; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
