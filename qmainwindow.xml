<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMainWindow Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> class provides a main application window.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMainWindow</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMainWindow is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="qt-main-window-framework">
<db:title>Qt Main Window Framework</db:title>
<db:para>A main window provides a framework for building an application's user interface. Qt has <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> and its <db:link xlink:href="widget-classes.xml#main-window-and-related-classes">related classes</db:link> for main window management. <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> has its own layout to which you can add <db:link xlink:href="qtoolbar.xml">QToolBar</db:link>s, <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>s, a <db:link xlink:href="qmenubar.xml">QMenuBar</db:link>, and a <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link>. The layout has a center area that can be occupied by any kind of widget. You can see an image of the layout below.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mainwindowlayout.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>Creating a main window without a central widget is not supported. You must have a central widget even if it is just a placeholder.</db:para>
</db:note>
</db:section>
<db:section xml:id="creating-main-window-components">
<db:title>Creating Main Window Components</db:title>
<db:para>A central widget will typically be a standard Qt widget such as a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> or a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. Custom widgets can also be used for advanced applications. You set the central widget with setCentralWidget().</db:para>
<db:para>Main windows have either a single (SDI) or multiple (MDI) document interface. You create MDI applications in Qt by using a <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> as the central widget.</db:para>
<db:para>We will now examine each of the other widgets that can be added to a main window. We give examples on how to create and add them.</db:para>
<db:section xml:id="creating-menus">
<db:title>Creating Menus</db:title>
<db:para>Qt implements menus in <db:link xlink:href="qmenu.xml">QMenu</db:link> and <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> keeps them in a <db:link xlink:href="qmenubar.xml">QMenuBar</db:link>. <db:link xlink:href="qaction.xml">QAction</db:link>s are added to the menus, which display them as menu items.</db:para>
<db:para>You can add new menus to the main window's menu bar by calling menuBar(), which returns the <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> for the window, and then add a menu with <db:link xlink:href="qmenubar.xml#addMenu">QMenuBar::addMenu</db:link>().</db:para>
<db:para><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> comes with a default menu bar, but you can also set one yourself with setMenuBar(). If you wish to implement a custom menu bar (i.e., not use the <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> widget), you can set it with setMenuWidget().</db:para>
<db:para>An example of how to create menus follows:</db:para>
<db:programlisting language="cpp">void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(newAct);
    fileMenu-&gt;addAction(openAct);
    fileMenu-&gt;addAction(saveAct);
</db:programlisting>
<db:para>The createPopupMenu() function creates popup menus when the main window receives context menu events. The default implementation generates a menu with the checkable actions from the dock widgets and toolbars. You can reimplement createPopupMenu() for a custom menu.</db:para>
</db:section>
<db:section xml:id="creating-toolbars">
<db:title>Creating Toolbars</db:title>
<db:para>Toolbars are implemented in the <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> class. You add a toolbar to a main window with addToolBar().</db:para>
<db:para>You control the initial position of toolbars by assigning them to a specific <db:link xlink:href="qt.xml#ToolBarArea-enum">Qt::ToolBarArea</db:link>. You can split an area by inserting a toolbar break - think of this as a line break in text editing - with addToolBarBreak() or insertToolBarBreak(). You can also restrict placement by the user with <db:link xlink:href="qtoolbar.xml#allowedAreas-prop">QToolBar::setAllowedAreas</db:link>() and <db:link xlink:href="qtoolbar.xml#movable-prop">QToolBar::setMovable</db:link>().</db:para>
<db:para>The size of toolbar icons can be retrieved with iconSize(). The sizes are platform dependent; you can set a fixed size with setIconSize(). You can alter the appearance of all tool buttons in the toolbars with setToolButtonStyle().</db:para>
<db:para>An example of toolbar creation follows:</db:para>
<db:programlisting language="cpp">void MainWindow::createToolBars()
{
    fileToolBar = addToolBar(tr(&quot;File&quot;));
    fileToolBar-&gt;addAction(newAct);
</db:programlisting>
</db:section>
<db:section xml:id="creating-dock-widgets">
<db:title>Creating Dock Widgets</db:title>
<db:para>Dock widgets are implemented in the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> class. A dock widget is a window that can be docked into the main window. You add dock widgets to a main window with addDockWidget().</db:para>
<db:para>There are four dock widget areas as given by the <db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetArea</db:link> enum: left, right, top, and bottom. You can specify which dock widget area that should occupy the corners where the areas overlap with setCorner(). By default each area can only contain one row (vertical or horizontal) of dock widgets, but if you enable nesting with setDockNestingEnabled(), dock widgets can be added in either direction.</db:para>
<db:para>Two dock widgets may also be stacked on top of each other. A <db:link xlink:href="qtabbar.xml">QTabBar</db:link> is then used to select which of the widgets should be displayed.</db:para>
<db:para>We give an example of how to create and add dock widgets to a main window:</db:para>
<db:programlisting language="cpp">    QDockWidget *dockWidget = new QDockWidget(tr(&quot;Dock Widget&quot;), this);
    dockWidget-&gt;setAllowedAreas(Qt::LeftDockWidgetArea |
                                Qt::RightDockWidgetArea);
    dockWidget-&gt;setWidget(dockWidgetContents);
    addDockWidget(Qt::LeftDockWidgetArea, dockWidget);
</db:programlisting>
</db:section>
<db:section xml:id="the-status-bar">
<db:title>The Status Bar</db:title>
<db:para>You can set a status bar with setStatusBar(), but one is created the first time statusBar() (which returns the main window's status bar) is called. See <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> for information on how to use it.</db:para>
</db:section>
</db:section>
<db:section xml:id="storing-state">
<db:title>Storing State</db:title>
<db:para><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> can store the state of its layout with saveState(); it can later be retrieved with restoreState(). It is the position and size (relative to the size of the main window) of the toolbars and dock widgets that are stored.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml">QMenuBar</db:link></db:member>
<db:member><db:link xlink:href="qtoolbar.xml">QToolBar</db:link></db:member>
<db:member><db:link xlink:href="qstatusbar.xml">QStatusBar</db:link></db:member>
<db:member><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-dockwidgets-example.xml">Dock Widgets Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-mdi-example.xml">MDI Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-sdi-example.xml">SDI Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-menus-example.xml">Menus Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DockOption-enum">
<db:title>[since 4.3] enum QMainWindow::DockOption</db:title>
<db:bridgehead renderas="sect2">flags QMainWindow::DockOptions</db:bridgehead>
<db:para>This enum contains flags that specify the docking behavior of <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:emphasis>::AnimatedDocks</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Identical to the <db:link xlink:href="qmainwindow.xml#animated-prop">animated</db:link> property.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:emphasis>::AllowNestedDocks</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Identical to the <db:link xlink:href="qmainwindow.xml#dockNestingEnabled-prop">dockNestingEnabled</db:link> property.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:emphasis>::AllowTabbedDocks</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>The user can drop one dock widget &quot;on top&quot; of another. The two widgets are stacked and a tab bar appears for selecting which one is visible.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:emphasis>::ForceTabbedDocks</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Each dock area contains a single stack of tabbed dock widgets. In other words, dock widgets cannot be placed next to each other in a dock area. If this option is set, AllowNestedDocks has no effect.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:emphasis>::VerticalTabs</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>The two vertical dock areas on the sides of the main window show their tabs vertically. If this option is not set, all dock areas show their tabs at the bottom. Implies AllowTabbedDocks. See also <db:link xlink:href="qmainwindow.xml#setTabPosition">setTabPosition</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:emphasis>::GroupedDragging</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>When dragging the titlebar of a dock, all the tabs that are tabbed with it are going to be dragged. Implies AllowTabbedDocks. Does not work well if some QDockWidgets have restrictions in which area they are allowed. (This enum value was added in Qt 5.6.)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>These options only control how dock widgets may be dropped in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>. They do not re-arrange the dock widgets to conform with the specified options. For this reason they should be set before any dock widgets are added to the main window. Exceptions to this are the AnimatedDocks and VerticalTabs options, which may be set at any time.</db:para>
<db:para>This enum was introduced in Qt 4.3.</db:para>
<db:para>The <db:code>DockOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;DockOption&gt;. </db:code>It stores an OR combination of <db:code>DockOption</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="animated-prop">
<db:title>[since 4.2] animated : bool</db:title>
<db:para>This property holds whether manipulating dock widgets and tool bars is animated</db:para>
<db:para>When a dock widget or tool bar is dragged over the main window, the main window adjusts its contents to indicate where the dock widget or tool bar will be docked if it is dropped. Setting this property causes <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> to move its contents in a smooth animation. Clearing this property causes the contents to snap into their new positions.</db:para>
<db:para>By default, this property is set. It may be cleared if the main window contains widgets which are slow at resizing or repainting themselves.</db:para>
<db:para>Setting this property is identical to setting the <db:link xlink:href="qmainwindow.xml#DockOption-enum">AnimatedDocks</db:link> option using <db:link xlink:href="qmainwindow.xml#dockOptions-prop">setDockOptions</db:link>().</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isAnimated</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAnimated</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="dockNestingEnabled-prop">
<db:title>[since 4.2] dockNestingEnabled : bool</db:title>
<db:para>This property holds whether docks can be nested</db:para>
<db:para>If this property is false, dock areas can only contain a single row (horizontal or vertical) of dock widgets. If this property is true, the area occupied by a dock widget can be split in either direction to contain more dock widgets.</db:para>
<db:para>Dock nesting is only necessary in applications that contain a lot of dock widgets. It gives the user greater freedom in organizing their main window. However, dock nesting leads to more complex (and less intuitive) behavior when a dock widget is dragged over the main window, since there are more ways in which a dropped dock widget may be placed in the dock area.</db:para>
<db:para>Setting this property is identical to setting the <db:link xlink:href="qmainwindow.xml#DockOption-enum">AllowNestedDocks</db:link> option using <db:link xlink:href="qmainwindow.xml#dockOptions-prop">setDockOptions</db:link>().</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isDockNestingEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDockNestingEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="dockOptions-prop">
<db:title>[since 4.3] dockOptions : DockOptions</db:title>
<db:para>This property holds the docking behavior of <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:para>
<db:para>The default value is <db:link xlink:href="qmainwindow.xml#DockOption-enum">AnimatedDocks</db:link> | <db:link xlink:href="qmainwindow.xml#DockOption-enum">AllowTabbedDocks</db:link>.</db:para>
<db:para>This property was introduced in Qt 4.3.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmainwindow.xml#DockOption-enum">QMainWindow::DockOptions</db:link></db:type> <db:emphasis role="bold">dockOptions</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDockOptions</db:emphasis>(<db:type><db:link xlink:href="qmainwindow.xml#DockOption-enum">QMainWindow::DockOptions</db:link></db:type> <db:emphasis>options</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="documentMode-prop">
<db:title>[since 4.5] documentMode : bool</db:title>
<db:para>This property holds whether the tab bar for tabbed dockwidgets is set to document mode.</db:para>
<db:para>The default is false.</db:para>
<db:para>This property was introduced in Qt 4.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">documentMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDocumentMode</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#documentMode-prop">QTabBar::documentMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconSize-prop">
<db:title>iconSize : QSize</db:title>
<db:para>size of toolbar icons in this mainwindow.</db:para>
<db:para>The default is the default tool bar icon size of the GUI style. Note that the icons used must be at least of this size as the icons are only scaled down.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">iconSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIconSize</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>iconSize</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="tabShape-prop">
<db:title>[since 4.5] tabShape : QTabWidget::TabShape</db:title>
<db:para>This property holds the tab shape used for tabbed dock widgets.</db:para>
<db:para>The default is <db:link xlink:href="qtabwidget.xml#TabShape-enum">QTabWidget::Rounded</db:link>.</db:para>
<db:para>This property was introduced in Qt 4.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtabwidget.xml#TabShape-enum">QTabWidget::TabShape</db:link></db:type> <db:emphasis role="bold">tabShape</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTabShape</db:emphasis>(<db:type><db:link xlink:href="qtabwidget.xml#TabShape-enum">QTabWidget::TabShape</db:link></db:type> <db:emphasis>tabShape</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#setTabPosition">setTabPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolButtonStyle-prop">
<db:title>toolButtonStyle : Qt::ToolButtonStyle</db:title>
<db:para>style of toolbar buttons in this mainwindow.</db:para>
<db:para>To have the style of toolbuttons follow the system settings, set this property to <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonFollowStyle</db:link>. On Unix, the user settings from the desktop environment will be used. On other platforms, <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonFollowStyle</db:link> means icon only.</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonIconOnly</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonStyle</db:link></db:type> <db:emphasis role="bold">toolButtonStyle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setToolButtonStyle</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonStyle</db:link></db:type> <db:emphasis>toolButtonStyle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="unifiedTitleAndToolBarOnMac-prop">
<db:title>[since 5.2] unifiedTitleAndToolBarOnMac : bool</db:title>
<db:para>This property holds whether the window uses the unified title and toolbar look on macOS</db:para>
<db:para>Note that the Qt 5 implementation has several limitations compared to Qt 4:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use in windows with OpenGL content is not supported. This includes QGLWidget and <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using dockable or movable toolbars may result in painting errors and is not recommended</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in Qt 5.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">unifiedTitleAndToolBarOnMac</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUnifiedTitleAndToolBarOnMac</db:emphasis>(<db:type>bool</db:type> <db:emphasis>set</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMainWindow">
<db:title>[explicit] QMainWindow::QMainWindow(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Constructs a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> with the given <db:code role="parameter">parent</db:code> and the specified widget <db:code role="parameter">flags</db:code>.</db:para>
<db:para><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> sets the <db:link xlink:href="qt.xml#WindowType-enum">Qt::Window</db:link> flag itself, and will hence always be created as a top-level widget.</db:para>
</db:section>
<db:section xml:id="dtor.QMainWindow">
<db:title>[virtual noexcept] QMainWindow::~QMainWindow()</db:title>
<db:para>Destroys the main window.</db:para>
</db:section>
<db:section xml:id="addDockWidget">
<db:title>void QMainWindow::addDockWidget(Qt::DockWidgetArea <db:emphasis>area</db:emphasis>, QDockWidget *<db:emphasis>dockwidget</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">dockwidget</db:code> to the specified <db:code role="parameter">area</db:code>.</db:para>
</db:section>
<db:section xml:id="addDockWidget-1">
<db:title>void QMainWindow::addDockWidget(Qt::DockWidgetArea <db:emphasis>area</db:emphasis>, QDockWidget *<db:emphasis>dockwidget</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">dockwidget</db:code> into the given <db:code role="parameter">area</db:code> in the direction specified by the <db:code role="parameter">orientation</db:code>.</db:para>
</db:section>
<db:section xml:id="addToolBar">
<db:title>void QMainWindow::addToolBar(Qt::ToolBarArea <db:emphasis>area</db:emphasis>, QToolBar *<db:emphasis>toolbar</db:emphasis>)</db:title>
<db:para>Adds the <db:code role="parameter">toolbar</db:code> into the specified <db:code role="parameter">area</db:code> in this main window. The <db:code role="parameter">toolbar</db:code> is placed at the end of the current tool bar block (i.e. line). If the main window already manages <db:code role="parameter">toolbar</db:code> then it will only move the toolbar to <db:code role="parameter">area</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#insertToolBar">insertToolBar</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#addToolBarBreak">addToolBarBreak</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#insertToolBarBreak">insertToolBarBreak</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addToolBar-1">
<db:title>void QMainWindow::addToolBar(QToolBar *<db:emphasis>toolbar</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Equivalent of calling <db:link xlink:href="qmainwindow.xml#addToolBar">addToolBar</db:link>(<db:link xlink:href="qt.xml#ToolBarArea-enum">Qt::TopToolBarArea</db:link>, <db:code role="parameter">toolbar</db:code>)</db:para>
</db:section>
<db:section xml:id="addToolBar-2">
<db:title>QToolBar *QMainWindow::addToolBar(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> object, setting its window title to <db:code role="parameter">title</db:code>, and inserts it into the top toolbar area.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#windowTitle-prop">setWindowTitle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addToolBarBreak">
<db:title>void QMainWindow::addToolBarBreak(Qt::ToolBarArea <db:emphasis>area</db:emphasis> = Qt::TopToolBarArea)</db:title>
<db:para>Adds a toolbar break to the given <db:code role="parameter">area</db:code> after all the other objects that are present.</db:para>
</db:section>
<db:section xml:id="centralWidget">
<db:title>QWidget *QMainWindow::centralWidget() const</db:title>
<db:para>Returns the central widget for the main window. This function returns zero if the central widget has not been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#setCentralWidget">setCentralWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QMainWindow::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="corner">
<db:title>Qt::DockWidgetArea QMainWindow::corner(Qt::Corner <db:emphasis>corner</db:emphasis>) const</db:title>
<db:para>Returns the dock widget area that occupies the specified <db:code role="parameter">corner</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#setCorner">setCorner</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createPopupMenu">
<db:title>[virtual] QMenu *QMainWindow::createPopupMenu()</db:title>
<db:para>Returns a popup menu containing checkable entries for the toolbars and dock widgets present in the main window. If there are no toolbars and dock widgets present, this function returns a null pointer.</db:para>
<db:para>By default, this function is called by the main window when the user activates a context menu, typically by right-clicking on a toolbar or a dock widget.</db:para>
<db:para>If you want to create a custom popup menu, reimplement this function and return a newly-created popup menu. Ownership of the popup menu is transferred to the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#addDockWidget">addDockWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#addToolBar">addToolBar</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#menuBar">menuBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dockWidgetArea">
<db:title>Qt::DockWidgetArea QMainWindow::dockWidgetArea(QDockWidget *<db:emphasis>dockwidget</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetArea</db:link> for <db:code role="parameter">dockwidget</db:code>. If <db:code role="parameter">dockwidget</db:code> has not been added to the main window, this function returns Qt::NoDockWidgetArea.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#addDockWidget">addDockWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#splitDockWidget">splitDockWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetArea</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QMainWindow::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="iconSizeChanged">
<db:title>void QMainWindow::iconSizeChanged(const QSize &amp;<db:emphasis>iconSize</db:emphasis>)</db:title>
<db:para>This signal is emitted when the size of the icons used in the window is changed. The new icon size is passed in <db:code role="parameter">iconSize</db:code>.</db:para>
<db:para>You can connect this signal to other components to help maintain a consistent appearance for your application.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#iconSize-prop">setIconSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertToolBar">
<db:title>void QMainWindow::insertToolBar(QToolBar *<db:emphasis>before</db:emphasis>, QToolBar *<db:emphasis>toolbar</db:emphasis>)</db:title>
<db:para>Inserts the <db:code role="parameter">toolbar</db:code> into the area occupied by the <db:code role="parameter">before</db:code> toolbar so that it appears before it. For example, in normal left-to-right layout operation, this means that <db:code role="parameter">toolbar</db:code> will appear to the left of the toolbar specified by <db:code role="parameter">before</db:code> in a horizontal toolbar area.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#insertToolBarBreak">insertToolBarBreak</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#addToolBar">addToolBar</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#addToolBarBreak">addToolBarBreak</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertToolBarBreak">
<db:title>void QMainWindow::insertToolBarBreak(QToolBar *<db:emphasis>before</db:emphasis>)</db:title>
<db:para>Inserts a toolbar break before the toolbar specified by <db:code role="parameter">before</db:code>.</db:para>
</db:section>
<db:section xml:id="menuBar">
<db:title>QMenuBar *QMainWindow::menuBar() const</db:title>
<db:para>Returns the menu bar for the main window. This function creates and returns an empty menu bar if the menu bar does not exist.</db:para>
<db:para>If you want all windows in a Mac application to share one menu bar, don't use this function to create it, because the menu bar created here will have this <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> as its parent. Instead, you must create a menu bar that does not have a parent, which you can then share among all the Mac windows. Create a parent-less menu bar this way:</db:para>
<db:programlisting language="cpp">QMenuBar *menuBar = new QMenuBar(0);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#setMenuBar">setMenuBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="menuWidget">
<db:title>[since 4.2] QWidget *QMainWindow::menuWidget() const</db:title>
<db:para>Returns the menu bar for the main window. This function returns null if a menu bar hasn't been constructed yet.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#setMenuWidget">setMenuWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeDockWidget">
<db:title>void QMainWindow::removeDockWidget(QDockWidget *<db:emphasis>dockwidget</db:emphasis>)</db:title>
<db:para>Removes the <db:code role="parameter">dockwidget</db:code> from the main window layout and hides it. Note that the <db:code role="parameter">dockwidget</db:code> is <db:emphasis>not</db:emphasis> deleted.</db:para>
</db:section>
<db:section xml:id="removeToolBar">
<db:title>void QMainWindow::removeToolBar(QToolBar *<db:emphasis>toolbar</db:emphasis>)</db:title>
<db:para>Removes the <db:code role="parameter">toolbar</db:code> from the main window layout and hides it. Note that the <db:code role="parameter">toolbar</db:code> is <db:emphasis>not</db:emphasis> deleted.</db:para>
</db:section>
<db:section xml:id="removeToolBarBreak">
<db:title>void QMainWindow::removeToolBarBreak(QToolBar *<db:emphasis>before</db:emphasis>)</db:title>
<db:para>Removes a toolbar break previously inserted before the toolbar specified by <db:code role="parameter">before</db:code>.</db:para>
</db:section>
<db:section xml:id="resizeDocks">
<db:title>[since 5.6] void QMainWindow::resizeDocks(const QList&lt;QDockWidget *&gt; &amp;<db:emphasis>docks</db:emphasis>, const QList&lt;int&gt; &amp;<db:emphasis>sizes</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>Resizes the dock widgets in the list <db:code role="parameter">docks</db:code> to the corresponding size in pixels from the list <db:code role="parameter">sizes</db:code>. If <db:code role="parameter">orientation</db:code> is <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link>, adjusts the width, otherwise adjusts the height of the dock widgets. The sizes will be adjusted such that the maximum and the minimum sizes are respected and the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> itself will not be resized. Any additional/missing space is distributed amongst the widgets according to the relative weight of the sizes.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">resizeDocks({blueWidget, yellowWidget}, {20 , 40}, Qt::Horizontal);
</db:programlisting>
<db:para>If the blue and the yellow widget are nested on the same level they will be resized such that the yellowWidget is twice as big as the blueWidget</db:para>
<db:para>If some widgets are grouped in tabs, only one widget per group should be specified. Widgets not in the list might be changed to repect the constraints.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="restoreDockWidget">
<db:title>bool QMainWindow::restoreDockWidget(QDockWidget *<db:emphasis>dockwidget</db:emphasis>)</db:title>
<db:para>Restores the state of <db:code role="parameter">dockwidget</db:code> if it is created after the call to <db:link xlink:href="qmainwindow.xml#restoreState">restoreState</db:link>(). Returns true if the state was restored; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#restoreState">restoreState</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#saveState">saveState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restoreState">
<db:title>bool QMainWindow::restoreState(const QByteArray &amp;<db:emphasis>state</db:emphasis>, int <db:emphasis>version</db:emphasis> = 0)</db:title>
<db:para>Restores the <db:code role="parameter">state</db:code> of this mainwindow's toolbars and dockwidgets. Also restores the corner settings too. The <db:code role="parameter">version</db:code> number is compared with that stored in <db:code role="parameter">state</db:code>. If they do not match, the mainwindow's state is left unchanged, and this function returns false; otherwise, the state is restored, and this function returns true.</db:para>
<db:para>To restore geometry saved using <db:link xlink:href="qsettings.xml">QSettings</db:link>, you can use code like this:</db:para>
<db:programlisting language="cpp">void MainWindow::readSettings()
{
    QSettings settings(&quot;MyCompany&quot;, &quot;MyApp&quot;);
    restoreGeometry(settings.value(&quot;myWidget/geometry&quot;).toByteArray());
    restoreState(settings.value(&quot;myWidget/windowState&quot;).toByteArray());
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#saveState">saveState</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#saveGeometry">QWidget::saveGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#restoreGeometry">QWidget::restoreGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#restoreDockWidget">restoreDockWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="saveState">
<db:title>QByteArray QMainWindow::saveState(int <db:emphasis>version</db:emphasis> = 0) const</db:title>
<db:para>Saves the current state of this mainwindow's toolbars and dockwidgets. This includes the corner settings which can be set with <db:link xlink:href="qmainwindow.xml#setCorner">setCorner</db:link>(). The <db:code role="parameter">version</db:code> number is stored as part of the data.</db:para>
<db:para>The <db:link xlink:href="qobject.xml#objectName-prop">objectName</db:link> property is used to identify each <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> and <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>. You should make sure that this property is unique for each <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> and <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> you add to the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:para>
<db:para>To restore the saved state, pass the return value and <db:code role="parameter">version</db:code> number to <db:link xlink:href="qmainwindow.xml#restoreState">restoreState</db:link>().</db:para>
<db:para>To save the geometry when the window closes, you can implement a close event like this:</db:para>
<db:programlisting language="cpp">void MyMainWindow::closeEvent(QCloseEvent *event)
{
    QSettings settings(&quot;MyCompany&quot;, &quot;MyApp&quot;);
    settings.setValue(&quot;geometry&quot;, saveGeometry());
    settings.setValue(&quot;windowState&quot;, saveState());
    QMainWindow::closeEvent(event);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#restoreState">restoreState</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#saveGeometry">QWidget::saveGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#restoreGeometry">QWidget::restoreGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCentralWidget">
<db:title>void QMainWindow::setCentralWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the given <db:code role="parameter">widget</db:code> to be the main window's central widget.</db:para>
<db:para>Note: <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> takes ownership of the <db:code role="parameter">widget</db:code> pointer and deletes it at the appropriate time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#centralWidget">centralWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCorner">
<db:title>void QMainWindow::setCorner(Qt::Corner <db:emphasis>corner</db:emphasis>, Qt::DockWidgetArea <db:emphasis>area</db:emphasis>)</db:title>
<db:para>Sets the given dock widget <db:code role="parameter">area</db:code> to occupy the specified <db:code role="parameter">corner</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#corner">corner</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMenuBar">
<db:title>void QMainWindow::setMenuBar(QMenuBar *<db:emphasis>menuBar</db:emphasis>)</db:title>
<db:para>Sets the menu bar for the main window to <db:code role="parameter">menuBar</db:code>.</db:para>
<db:para>Note: <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> takes ownership of the <db:code role="parameter">menuBar</db:code> pointer and deletes it at the appropriate time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#menuBar">menuBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMenuWidget">
<db:title>[since 4.2] void QMainWindow::setMenuWidget(QWidget *<db:emphasis>menuBar</db:emphasis>)</db:title>
<db:para>Sets the menu bar for the main window to <db:code role="parameter">menuBar</db:code>.</db:para>
<db:para><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> takes ownership of the <db:code role="parameter">menuBar</db:code> pointer and deletes it at the appropriate time.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#menuWidget">menuWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatusBar">
<db:title>void QMainWindow::setStatusBar(QStatusBar *<db:emphasis>statusbar</db:emphasis>)</db:title>
<db:para>Sets the status bar for the main window to <db:code role="parameter">statusbar</db:code>.</db:para>
<db:para>Setting the status bar to 0 will remove it from the main window. Note that <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> takes ownership of the <db:code role="parameter">statusbar</db:code> pointer and deletes it at the appropriate time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#statusBar">statusBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabPosition">
<db:title>[since 4.5] void QMainWindow::setTabPosition(Qt::DockWidgetAreas <db:emphasis>areas</db:emphasis>, QTabWidget::TabPosition <db:emphasis>tabPosition</db:emphasis>)</db:title>
<db:para>Sets the tab position for the given dock widget <db:code role="parameter">areas</db:code> to the specified <db:code role="parameter">tabPosition</db:code>. By default, all dock areas show their tabs at the bottom.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qmainwindow.xml#DockOption-enum">VerticalTabs</db:link> dock option overrides the tab positions set by this method.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#tabPosition">tabPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#tabShape-prop">setTabShape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="splitDockWidget">
<db:title>void QMainWindow::splitDockWidget(QDockWidget *<db:emphasis>first</db:emphasis>, QDockWidget *<db:emphasis>second</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>Splits the space covered by the <db:code role="parameter">first</db:code> dock widget into two parts, moves the <db:code role="parameter">first</db:code> dock widget into the first part, and moves the <db:code role="parameter">second</db:code> dock widget into the second part.</db:para>
<db:para>The <db:code role="parameter">orientation</db:code> specifies how the space is divided: A <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> split places the second dock widget to the right of the first; a <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> split places the second dock widget below the first.</db:para>
<db:para><db:emphasis>Note</db:emphasis>: if <db:code role="parameter">first</db:code> is currently in a tabbed docked area, <db:code role="parameter">second</db:code> will be added as a new tab, not as a neighbor of <db:code role="parameter">first</db:code>. This is because a single tab can contain only one dock widget.</db:para>
<db:para><db:emphasis>Note</db:emphasis>: The <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link> influences the order of the dock widgets in the two parts of the divided area. When right-to-left layout direction is enabled, the placing of the dock widgets will be reversed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#tabifyDockWidget">tabifyDockWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#addDockWidget">addDockWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#removeDockWidget">removeDockWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="statusBar">
<db:title>QStatusBar *QMainWindow::statusBar() const</db:title>
<db:para>Returns the status bar for the main window. This function creates and returns an empty status bar if the status bar does not exist.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#setStatusBar">setStatusBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabPosition">
<db:title>[since 4.5] QTabWidget::TabPosition QMainWindow::tabPosition(Qt::DockWidgetArea <db:emphasis>area</db:emphasis>) const</db:title>
<db:para>Returns the tab position for <db:code role="parameter">area</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qmainwindow.xml#DockOption-enum">VerticalTabs</db:link> dock option overrides the tab positions returned by this function.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#setTabPosition">setTabPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#tabShape-prop">tabShape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabifiedDockWidgetActivated">
<db:title>[since 5.8] void QMainWindow::tabifiedDockWidgetActivated(QDockWidget *<db:emphasis>dockWidget</db:emphasis>)</db:title>
<db:para>This signal is emitted when the tabified dock widget is activated by selecting the tab. The activated dock widget is passed in <db:code role="parameter">dockWidget</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#tabifyDockWidget">tabifyDockWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#tabifiedDockWidgets">tabifiedDockWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabifiedDockWidgets">
<db:title>[since 4.5] QList&lt;QDockWidget *&gt; QMainWindow::tabifiedDockWidgets(QDockWidget *<db:emphasis>dockwidget</db:emphasis>) const</db:title>
<db:para>Returns the dock widgets that are tabified together with <db:code role="parameter">dockwidget</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#tabifyDockWidget">tabifyDockWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabifyDockWidget">
<db:title>void QMainWindow::tabifyDockWidget(QDockWidget *<db:emphasis>first</db:emphasis>, QDockWidget *<db:emphasis>second</db:emphasis>)</db:title>
<db:para>Moves <db:code role="parameter">second</db:code> dock widget on top of <db:code role="parameter">first</db:code> dock widget, creating a tabbed docked area in the main window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#tabifiedDockWidgets">tabifiedDockWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeCentralWidget">
<db:title>[since Qt 5.2] QWidget *QMainWindow::takeCentralWidget()</db:title>
<db:para>Removes the central widget from this main window.</db:para>
<db:para>The ownership of the removed widget is passed to the caller.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="toolBarArea">
<db:title>Qt::ToolBarArea QMainWindow::toolBarArea(QToolBar *<db:emphasis>toolbar</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qt.xml#ToolBarArea-enum">Qt::ToolBarArea</db:link> for <db:code role="parameter">toolbar</db:code>. If <db:code role="parameter">toolbar</db:code> has not been added to the main window, this function returns Qt::NoToolBarArea.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#addToolBar">addToolBar</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#addToolBarBreak">addToolBarBreak</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#ToolBarArea-enum">Qt::ToolBarArea</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolBarBreak">
<db:title>bool QMainWindow::toolBarBreak(QToolBar *<db:emphasis>toolbar</db:emphasis>) const</db:title>
<db:para>Returns whether there is a toolbar break before the <db:code role="parameter">toolbar</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#addToolBarBreak">addToolBarBreak</db:link>()</db:member>
<db:member><db:link xlink:href="qmainwindow.xml#insertToolBarBreak">insertToolBarBreak</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolButtonStyleChanged">
<db:title>void QMainWindow::toolButtonStyleChanged(Qt::ToolButtonStyle <db:emphasis>toolButtonStyle</db:emphasis>)</db:title>
<db:para>This signal is emitted when the style used for tool buttons in the window is changed. The new style is passed in <db:code role="parameter">toolButtonStyle</db:code>.</db:para>
<db:para>You can connect this signal to other components to help maintain a consistent appearance for your application.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml#toolButtonStyle-prop">setToolButtonStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
