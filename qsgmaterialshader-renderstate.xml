<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>RenderState Class</db:title>
<db:subtitle>QSGMaterialShader::RenderState</db:subtitle>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates the current rendering state during a call to <db:link xlink:href="qsgmaterialshader.xml#updateUniformData">QSGMaterialShader::updateUniformData</db:link>() and the other <db:code>update</db:code> type of functions.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>RenderState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The render state contains a number of accessors that the shader needs to respect in order to conform to the current state of the scene graph.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DirtyState-enum">
<db:title>enum RenderState::DirtyState</db:title>
<db:bridgehead renderas="sect2">flags RenderState::DirtyStates</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-renderstate.xml">RenderState</db:link></db:emphasis>::DirtyMatrix</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Used to indicate that the matrix has changed and must be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-renderstate.xml">RenderState</db:link></db:emphasis>::DirtyOpacity</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Used to indicate that the opacity has changed and must be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-renderstate.xml">RenderState</db:link></db:emphasis>::DirtyCachedMaterialData</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>Used to indicate that the cached material state has changed and must be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-renderstate.xml">RenderState</db:link></db:emphasis>::DirtyAll</db:code></db:para>
</db:td>
<db:td><db:code>0xFFFF</db:code></db:td>
<db:td>
<db:para>Used to indicate that everything needs to be updated.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>DirtyStates</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;DirtyState&gt;. </db:code>It stores an OR combination of <db:code>DirtyState</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="combinedMatrix">
<db:title>QMatrix4x4 RenderState::combinedMatrix() const</db:title>
<db:para>Returns the matrix combined of modelview matrix and project matrix.</db:para>
</db:section>
<db:section xml:id="determinant">
<db:title>float RenderState::determinant() const</db:title>
<db:para>Returns the modelview determinant to be used for rendering.</db:para>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>float RenderState::devicePixelRatio() const</db:title>
<db:para>Returns the ratio between physical pixels and device-independent pixels to be used for rendering.</db:para>
</db:section>
<db:section xml:id="deviceRect">
<db:title>QRect RenderState::deviceRect() const</db:title>
<db:para>Returns the device rect of the surface being rendered to</db:para>
</db:section>
<db:section xml:id="dirtyStates">
<db:title>QSGMaterialShader::RenderState::DirtyStates RenderState::dirtyStates() const</db:title>
<db:para>Returns which rendering states that have changed and needs to be updated for geometry rendered with this material to conform to the current rendering state.</db:para>
</db:section>
<db:section xml:id="isMatrixDirty">
<db:title>bool RenderState::isMatrixDirty() const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qsgmaterialshader-renderstate.xml#dirtyStates">dirtyStates</db:link>() contain the dirty matrix state, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isOpacityDirty">
<db:title>bool RenderState::isOpacityDirty() const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qsgmaterialshader-renderstate.xml#dirtyStates">dirtyStates</db:link>() contains the dirty opacity state, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="modelViewMatrix">
<db:title>QMatrix4x4 RenderState::modelViewMatrix() const</db:title>
<db:para>Returns the model view matrix.</db:para>
<db:para>If the material has the RequiresFullMatrix flag set, this is guaranteed to be the complete transform matrix calculated from the scenegraph.</db:para>
<db:para>However, if this flag is not set, the renderer may choose to alter this matrix. For example, it may pre-transform vertices on the CPU and set this matrix to identity.</db:para>
<db:para>In a situation such as the above, it is still possible to retrieve the actual matrix determinant by setting the RequiresDeterminant flag in the material and calling the <db:link xlink:href="qsgmaterialshader-renderstate.xml#determinant">determinant</db:link>() accessor.</db:para>
</db:section>
<db:section xml:id="opacity">
<db:title>float RenderState::opacity() const</db:title>
<db:para>Returns the accumulated opacity to be used for rendering.</db:para>
</db:section>
<db:section xml:id="projectionMatrix">
<db:title>QMatrix4x4 RenderState::projectionMatrix() const</db:title>
<db:para>Returns the projection matrix.</db:para>
</db:section>
<db:section xml:id="resourceUpdateBatch">
<db:title>QRhiResourceUpdateBatch *RenderState::resourceUpdateBatch()</db:title>
<db:para>Returns a resource update batch to which upload and copy operatoins can be queued. This is typically used by <db:link xlink:href="qsgmaterialshader.xml#updateSampledImage">QSGMaterialShader::updateSampledImage</db:link>() to enqueue texture image content updates.</db:para>
</db:section>
<db:section xml:id="rhi">
<db:title>QRhi *RenderState::rhi()</db:title>
<db:para>Returns the current <db:link xlink:href="qrhi.xml">QRhi</db:link>.</db:para>
</db:section>
<db:section xml:id="uniformData">
<db:title>QByteArray *RenderState::uniformData()</db:title>
<db:para>Returns a pointer to the data for the uniform (constant) buffer in the shader. Uniform data must only be updated from <db:link xlink:href="qsgmaterialshader.xml#updateUniformData">QSGMaterialShader::updateUniformData</db:link>(). The return value is null in the other reimplementable functions, such as, <db:link xlink:href="qsgmaterialshader.xml#updateSampledImage">QSGMaterialShader::updateSampledImage</db:link>().</db:para>
<db:note>
<db:para>It is strongly recommended to declare the uniform block with <db:code>std140</db:code> in the shader, and to carefully study the standard uniform block layout as described in section 7.6.2.2 of the OpenGL specification. It is up to the <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> implementation to ensure data gets placed at the right location in this <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, taking alignment requirements into account. Shader code translated to other shading languages is expected to use the same offsets for block members, even when the target language uses different packing rules by default.</db:para>
</db:note>
<db:note>
<db:para>Avoid copying from C++ POD types, such as, structs, in order to update multiple members at once, unless it has been verified that the layouts of the C++ struct and the GLSL uniform block match.</db:para>
</db:note>
</db:section>
<db:section xml:id="viewportRect">
<db:title>QRect RenderState::viewportRect() const</db:title>
<db:para>Returns the viewport rect of the surface being rendered to.</db:para>
</db:section>
</db:section>
</db:article>
