<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>RenderState Class</db:title>
<db:subtitle>QSGMaterialShader::RenderState</db:subtitle>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgmaterialshader-renderstate.xml">QSGMaterialShader::RenderState</db:link> encapsulates the current rendering state during a call to <db:link xlink:href="qsgmaterialshader.xml#updateState">QSGMaterialShader::updateState</db:link>().</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>RenderState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The render state contains a number of accessors that the shader needs to respect in order to conform to the current state of the scene graph.</db:para>
<db:para>The instance is only valid inside a call to <db:link xlink:href="qsgmaterialshader.xml#updateState">QSGMaterialShader::updateState</db:link>() and should not be used outisde this function.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DirtyState-enum">
<db:title>enum RenderState::DirtyState</db:title>
<db:bridgehead renderas="sect2">flags RenderState::DirtyStates</db:bridgehead>
<db:enumsynopsis>
<db:enumname>DirtyState</db:enumname>
<db:enumitem>
<db:enumidentifier>DirtyMatrix</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyOpacity</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyCachedMaterialData</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyAll</db:enumidentifier>
<db:enumvalue>0xFFFF</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QSGMaterialShader::RenderState::DirtyStates</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-renderstate.xml">RenderState</db:link></db:emphasis>::DirtyMatrix</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Used to indicate that the matrix has changed and must be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-renderstate.xml">RenderState</db:link></db:emphasis>::DirtyOpacity</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Used to indicate that the opacity has changed and must be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-renderstate.xml">RenderState</db:link></db:emphasis>::DirtyCachedMaterialData</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>Used to indicate that the cached material data have changed and must be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-renderstate.xml">RenderState</db:link></db:emphasis>::DirtyAll</db:code></db:para>
</db:td>
<db:td><db:code>0xFFFF</db:code></db:td>
<db:td>
<db:para>Used to indicate that everything needs to be updated.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>DirtyStates</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;DirtyState&gt;. </db:code>It stores an OR combination of <db:code>DirtyState</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="combinedMatrix">
<db:title>QMatrix4x4 RenderState::combinedMatrix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMatrix4x4</db:type>
<db:methodname>combinedMatrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 combinedMatrix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the matrix combined of modelview matrix and project matrix.</db:para>
</db:section>
<db:section xml:id="context">
<db:title>QOpenGLContext *RenderState::context() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLContext *</db:type>
<db:methodname>context</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLContext * context() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> that is being used for rendering</db:para>
</db:section>
<db:section xml:id="determinant">
<db:title>float RenderState::determinant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>determinant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float determinant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the modelview determinant to be used for rendering.</db:para>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>float RenderState::devicePixelRatio() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>devicePixelRatio</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float devicePixelRatio() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ratio between physical pixels and device-independent pixels to be used for rendering.</db:para>
</db:section>
<db:section xml:id="deviceRect">
<db:title>QRect RenderState::deviceRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>deviceRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect deviceRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device rect of the surface being rendered to</db:para>
</db:section>
<db:section xml:id="dirtyStates">
<db:title>RenderState::DirtyStates RenderState::dirtyStates() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>RenderState::DirtyStates</db:type>
<db:methodname>dirtyStates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">RenderState::DirtyStates dirtyStates() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns which rendering states that have changed and needs to be updated for geometry rendered with this material to conform to the current rendering state.</db:para>
</db:section>
<db:section xml:id="isCachedMaterialDataDirty">
<db:title>bool RenderState::isCachedMaterialDataDirty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCachedMaterialDataDirty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCachedMaterialDataDirty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qsgmaterialshader-renderstate.xml#dirtyStates">dirtyStates</db:link>() contains the dirty cached material state, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isMatrixDirty">
<db:title>bool RenderState::isMatrixDirty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isMatrixDirty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isMatrixDirty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qsgmaterialshader-renderstate.xml#dirtyStates">dirtyStates</db:link>() contain the dirty matrix state, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isOpacityDirty">
<db:title>bool RenderState::isOpacityDirty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isOpacityDirty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isOpacityDirty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qsgmaterialshader-renderstate.xml#dirtyStates">dirtyStates</db:link>() contains the dirty opacity state, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="modelViewMatrix">
<db:title>QMatrix4x4 RenderState::modelViewMatrix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMatrix4x4</db:type>
<db:methodname>modelViewMatrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 modelViewMatrix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the model view matrix.</db:para>
<db:para>If the material has the RequiresFullMatrix flag set, this is guaranteed to be the complete transform matrix calculated from the scenegraph.</db:para>
<db:para>However, if this flag is not set, the renderer may choose to alter this matrix. For example, it may pre-transform vertices on the CPU and set this matrix to identity.</db:para>
<db:para>In a situation such as the above, it is still possible to retrieve the actual matrix determinant by setting the RequiresDeterminant flag in the material and calling the <db:link xlink:href="qsgmaterialshader-renderstate.xml#determinant">determinant</db:link>() accessor.</db:para>
</db:section>
<db:section xml:id="opacity">
<db:title>float RenderState::opacity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>opacity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float opacity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the accumulated opacity to be used for rendering.</db:para>
</db:section>
<db:section xml:id="projectionMatrix">
<db:title>QMatrix4x4 RenderState::projectionMatrix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMatrix4x4</db:type>
<db:methodname>projectionMatrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 projectionMatrix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the projection matrix.</db:para>
</db:section>
<db:section xml:id="viewportRect">
<db:title>QRect RenderState::viewportRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>viewportRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect viewportRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the viewport rect of the surface being rendered to.</db:para>
</db:section>
</db:section>
</db:article>
