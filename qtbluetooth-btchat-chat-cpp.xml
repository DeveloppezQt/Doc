<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Bluetooth Chat Example</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example showing communication through Bluetooth.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtBluetooth module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;chat.h&quot;
#include &quot;remoteselector.h&quot;
#include &quot;chatserver.h&quot;
#include &quot;chatclient.h&quot;

#include &lt;qbluetoothuuid.h&gt;
#include &lt;qbluetoothserver.h&gt;
#include &lt;qbluetoothservicediscoveryagent.h&gt;
#include &lt;qbluetoothdeviceinfo.h&gt;
#include &lt;qbluetoothlocaldevice.h&gt;

#include &lt;QTimer&gt;

#include &lt;QDebug&gt;

static const QLatin1String serviceUuid(&quot;e8e10f95-1a70-4b27-9ccf-02010264e9c8&quot;);

Chat::Chat(QWidget *parent)
    : QDialog(parent),  currentAdapterIndex(0), ui(new Ui_Chat)
{
    ui-&gt;setupUi(this);

    connect(ui-&gt;quitButton, SIGNAL(clicked()), this, SLOT(accept()));
    connect(ui-&gt;connectButton, SIGNAL(clicked()), this, SLOT(connectClicked()));
    connect(ui-&gt;sendButton, SIGNAL(clicked()), this, SLOT(sendClicked()));

    localAdapters = QBluetoothLocalDevice::allDevices();
    if (localAdapters.count() &lt; 2) {
        ui-&gt;localAdapterBox-&gt;setVisible(false);
    } else {
        //we ignore more than two adapters
        ui-&gt;localAdapterBox-&gt;setVisible(true);
        ui-&gt;firstAdapter-&gt;setText(tr(&quot;Default (%1)&quot;, &quot;%1 = Bluetooth address&quot;).
                                  arg(localAdapters.at(0).address().toString()));
        ui-&gt;secondAdapter-&gt;setText(localAdapters.at(1).address().toString());
        ui-&gt;firstAdapter-&gt;setChecked(true);
        connect(ui-&gt;firstAdapter, SIGNAL(clicked()), this, SLOT(newAdapterSelected()));
        connect(ui-&gt;secondAdapter, SIGNAL(clicked()), this, SLOT(newAdapterSelected()));
        QBluetoothLocalDevice adapter(localAdapters.at(0).address());
        adapter.setHostMode(QBluetoothLocalDevice::HostDiscoverable);
    }

    server = new ChatServer(this);
    connect(server, SIGNAL(clientConnected(QString)), this, SLOT(clientConnected(QString)));
    connect(server, SIGNAL(clientDisconnected(QString)), this, SLOT(clientDisconnected(QString)));
    connect(server, SIGNAL(messageReceived(QString,QString)),
            this, SLOT(showMessage(QString,QString)));
    connect(this, SIGNAL(sendMessage(QString)), server, SLOT(sendMessage(QString)));
    server-&gt;startServer();

    localName = QBluetoothLocalDevice().name();
}

Chat::~Chat()
{
    qDeleteAll(clients);
    delete server;
}

void Chat::clientConnected(const QString &amp;name)
{
    ui-&gt;chat-&gt;insertPlainText(QString::fromLatin1(&quot;%1 has joined chat.\n&quot;).arg(name));
}

void Chat::clientDisconnected(const QString &amp;name)
{
    ui-&gt;chat-&gt;insertPlainText(QString::fromLatin1(&quot;%1 has left.\n&quot;).arg(name));
}

void Chat::connected(const QString &amp;name)
{
    ui-&gt;chat-&gt;insertPlainText(QString::fromLatin1(&quot;Joined chat with %1.\n&quot;).arg(name));
}

void Chat::newAdapterSelected()
{
    const int newAdapterIndex = adapterFromUserSelection();
    if (currentAdapterIndex != newAdapterIndex) {
        server-&gt;stopServer();
        currentAdapterIndex = newAdapterIndex;
        const QBluetoothHostInfo info = localAdapters.at(currentAdapterIndex);
        QBluetoothLocalDevice adapter(info.address());
        adapter.setHostMode(QBluetoothLocalDevice::HostDiscoverable);
        server-&gt;startServer(info.address());
        localName = info.name();
    }
}

int Chat::adapterFromUserSelection() const
{
    int result = 0;
    QBluetoothAddress newAdapter = localAdapters.at(0).address();

    if (ui-&gt;secondAdapter-&gt;isChecked()) {
        newAdapter = localAdapters.at(1).address();
        result = 1;
    }
    return result;
}

void Chat::clientDisconnected()
{
    ChatClient *client = qobject_cast&lt;ChatClient *&gt;(sender());
    if (client) {
        clients.removeOne(client);
        client-&gt;deleteLater();
    }
}

void Chat::connectClicked()
{
    ui-&gt;connectButton-&gt;setEnabled(false);

    // scan for services
    const QBluetoothAddress adapter = localAdapters.isEmpty() ?
                                           QBluetoothAddress() :
                                           localAdapters.at(currentAdapterIndex).address();

    RemoteSelector remoteSelector(adapter);
    remoteSelector.startDiscovery(QBluetoothUuid(serviceUuid));
    if (remoteSelector.exec() == QDialog::Accepted) {
        QBluetoothServiceInfo service = remoteSelector.service();

        qDebug() &lt;&lt; &quot;Connecting to service 2&quot; &lt;&lt; service.serviceName()
                 &lt;&lt; &quot;on&quot; &lt;&lt; service.device().name();

        // Create client
        qDebug() &lt;&lt; &quot;Going to create client&quot;;
        ChatClient *client = new ChatClient(this);
qDebug() &lt;&lt; &quot;Connecting...&quot;;

        connect(client, SIGNAL(messageReceived(QString,QString)),
                this, SLOT(showMessage(QString,QString)));
        connect(client, SIGNAL(disconnected()), this, SLOT(clientDisconnected()));
        connect(client, SIGNAL(connected(QString)), this, SLOT(connected(QString)));
        connect(this, SIGNAL(sendMessage(QString)), client, SLOT(sendMessage(QString)));
qDebug() &lt;&lt; &quot;Start client&quot;;
        client-&gt;startClient(service);

        clients.append(client);
    }

    ui-&gt;connectButton-&gt;setEnabled(true);
}

void Chat::sendClicked()
{
    ui-&gt;sendButton-&gt;setEnabled(false);
    ui-&gt;sendText-&gt;setEnabled(false);

    showMessage(localName, ui-&gt;sendText-&gt;text());
    emit sendMessage(ui-&gt;sendText-&gt;text());

    ui-&gt;sendText-&gt;clear();

    ui-&gt;sendText-&gt;setEnabled(true);
    ui-&gt;sendButton-&gt;setEnabled(true);
}

void Chat::showMessage(const QString &amp;sender, const QString &amp;message)
{
    ui-&gt;chat-&gt;insertPlainText(QString::fromLatin1(&quot;%1: %2\n&quot;).arg(sender, message));
    ui-&gt;chat-&gt;ensureCursorVisible();
}

</db:programlisting>
</db:article>
