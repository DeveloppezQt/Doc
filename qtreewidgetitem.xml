<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTreeWidgetItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> class provides an item for use with the <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> convenience class.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTreeWidgetItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTreeWidgetItem is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Tree widget items are used to hold rows of information for tree widgets. Rows usually contain several columns of data, each of which can contain a text label and an icon.</db:para>
<db:para>The <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> class is a convenience class that replaces the QListViewItem class in Qt 3. It provides an item for use with the <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> class.</db:para>
<db:para>Items are usually constructed with a parent that is either a <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> (for top-level items) or a <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> (for items on lower levels of the tree). For example, the following code constructs a top-level item to represent cities of the world, and adds a entry for Oslo as a child item:</db:para>
<db:programlisting language="cpp">    QTreeWidgetItem *cities = new QTreeWidgetItem(treeWidget);
    cities-&amp;gt;setText(0, tr(&quot;Cities&quot;));
    QTreeWidgetItem *osloItem = new QTreeWidgetItem(cities);
    osloItem-&amp;gt;setText(0, tr(&quot;Oslo&quot;));
    osloItem-&amp;gt;setText(1, tr(&quot;Yes&quot;));
</db:programlisting>
<db:para>Items can be added in a particular order by specifying the item they follow when they are constructed:</db:para>
<db:programlisting language="cpp">    QTreeWidgetItem *planets = new QTreeWidgetItem(treeWidget, cities);
    planets-&amp;gt;setText(0, tr(&quot;Planets&quot;));
</db:programlisting>
<db:para>Each column in an item can have its own background brush which is set with the <db:link xlink:href="qtreewidgetitem.xml#setBackground">setBackground</db:link>() function. The current background brush can be found with <db:link xlink:href="qtreewidgetitem.xml#background">background</db:link>(). The text label for each column can be rendered with its own font and brush. These are specified with the <db:link xlink:href="qtreewidgetitem.xml#setFont">setFont</db:link>() and <db:link xlink:href="qtreewidgetitem.xml#setForeground">setForeground</db:link>() functions, and read with <db:link xlink:href="qtreewidgetitem.xml#font">font</db:link>() and <db:link xlink:href="qtreewidgetitem.xml#foreground">foreground</db:link>().</db:para>
<db:para>The main difference between top-level items and those in lower levels of the tree is that a top-level item has no <db:link xlink:href="qtreewidgetitem.xml#parent">parent</db:link>(). This information can be used to tell the difference between items, and is useful to know when inserting and removing items from the tree. Children of an item can be removed with <db:link xlink:href="qtreewidgetitem.xml#takeChild">takeChild</db:link>() and inserted at a given index in the list of children with the <db:link xlink:href="qtreewidgetitem.xml#insertChild">insertChild</db:link>() function.</db:para>
<db:para>By default, items are enabled, selectable, checkable, and can be the source of a drag and drop operation. Each item's flags can be changed by calling <db:link xlink:href="qtreewidgetitem.xml#setFlags">setFlags</db:link>() with the appropriate value (see <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlags</db:link>). Checkable items can be checked and unchecked with the <db:link xlink:href="qtreewidgetitem.xml#setCheckState">setCheckState</db:link>() function. The corresponding <db:link xlink:href="qtreewidgetitem.xml#checkState">checkState</db:link>() function indicates whether the item is currently checked.</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>When subclassing <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> to provide custom items, it is possible to define new types for them so that they can be distinguished from standard items. The constructors for subclasses that require this feature need to call the base class constructor with a new type value equal to or greater than <db:link xlink:href="qtreewidgetitem.xml#ItemType-enum">UserType</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link></db:member>
<db:member><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link></db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ChildIndicatorPolicy-enum">
<db:title>enum QTreeWidgetItem::ChildIndicatorPolicy</db:title>
<db:enumsynopsis>
<db:enumname>ChildIndicatorPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>ShowIndicator</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontShowIndicator</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontShowIndicatorWhenChildless</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link></db:emphasis>::ShowIndicator</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The controls for expanding and collapsing will be shown for this item even if there are no children.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link></db:emphasis>::DontShowIndicator</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The controls for expanding and collapsing will never be shown even if there are children. If the node is forced open the user will not be able to expand or collapse the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link></db:emphasis>::DontShowIndicatorWhenChildless</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The controls for expanding and collapsing will be shown if the item contains children.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ItemType-enum">
<db:title>enum QTreeWidgetItem::ItemType</db:title>
<db:enumsynopsis>
<db:enumname>ItemType</db:enumname>
<db:enumitem>
<db:enumidentifier>Type</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserType</db:enumidentifier>
<db:enumvalue>1000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the types that are used to describe tree widget items.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default type for tree widget items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link></db:emphasis>::UserType</db:code></db:para>
</db:td>
<db:td><db:code>1000</db:code></db:td>
<db:td>
<db:para>The minimum value for custom types. Values below UserType are reserved by Qt.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can define new user types in <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> subclasses to ensure that custom items are treated specially; for example, when items are sorted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTreeWidgetItem">
<db:title>[explicit] QTreeWidgetItem::QTreeWidgetItem(int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Type</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem(int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a tree widget item of the specified <db:code role="parameter">type</db:code>. The item must be inserted into a tree widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItem-1">
<db:title>[explicit] QTreeWidgetItem::QTreeWidgetItem(const QStringList &amp;<db:emphasis>strings</db:emphasis>, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItem</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>strings</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Type</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem(const QStringList &amp;strings, int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a tree widget item of the specified <db:code role="parameter">type</db:code>. The item must be inserted into a tree widget. The given list of <db:code role="parameter">strings</db:code> will be set as the item text for each column in the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItem-2">
<db:title>[explicit] QTreeWidgetItem::QTreeWidgetItem(QTreeWidget *<db:emphasis>parent</db:emphasis>, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItem</db:methodname>
<db:methodparam>
<db:type>QTreeWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Type</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem(QTreeWidget *parent, int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a tree widget item of the specified <db:code role="parameter">type</db:code> and appends it to the items in the given <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItem-3">
<db:title>QTreeWidgetItem::QTreeWidgetItem(QTreeWidget *<db:emphasis>parent</db:emphasis>, const QStringList &amp;<db:emphasis>strings</db:emphasis>, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItem</db:methodname>
<db:methodparam>
<db:type>QTreeWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>strings</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Type</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem(QTreeWidget *parent, const QStringList &amp;strings, int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a tree widget item of the specified <db:code role="parameter">type</db:code> and appends it to the items in the given <db:code role="parameter">parent</db:code>. The given list of <db:code role="parameter">strings</db:code> will be set as the item text for each column in the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItem-4">
<db:title>QTreeWidgetItem::QTreeWidgetItem(QTreeWidget *<db:emphasis>parent</db:emphasis>, QTreeWidgetItem *<db:emphasis>preceding</db:emphasis>, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItem</db:methodname>
<db:methodparam>
<db:type>QTreeWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>preceding</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Type</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem(QTreeWidget *parent, QTreeWidgetItem *preceding, int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a tree widget item of the specified <db:code role="parameter">type</db:code> and inserts it into the given <db:code role="parameter">parent</db:code> after the <db:code role="parameter">preceding</db:code> item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItem-5">
<db:title>[explicit] QTreeWidgetItem::QTreeWidgetItem(QTreeWidgetItem *<db:emphasis>parent</db:emphasis>, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItem</db:methodname>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Type</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem(QTreeWidgetItem *parent, int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a tree widget item and append it to the given <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItem-6">
<db:title>QTreeWidgetItem::QTreeWidgetItem(QTreeWidgetItem *<db:emphasis>parent</db:emphasis>, const QStringList &amp;<db:emphasis>strings</db:emphasis>, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItem</db:methodname>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>strings</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Type</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem(QTreeWidgetItem *parent, const QStringList &amp;strings, int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a tree widget item and append it to the given <db:code role="parameter">parent</db:code>. The given list of <db:code role="parameter">strings</db:code> will be set as the item text for each column in the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItem-7">
<db:title>QTreeWidgetItem::QTreeWidgetItem(QTreeWidgetItem *<db:emphasis>parent</db:emphasis>, QTreeWidgetItem *<db:emphasis>preceding</db:emphasis>, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItem</db:methodname>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>preceding</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Type</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem(QTreeWidgetItem *parent, QTreeWidgetItem *preceding, int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a tree widget item of the specified <db:code role="parameter">type</db:code> that is inserted into the <db:code role="parameter">parent</db:code> after the <db:code role="parameter">preceding</db:code> child item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItem-8">
<db:title>QTreeWidgetItem::QTreeWidgetItem(const QTreeWidgetItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItem</db:methodname>
<db:methodparam>
<db:type>const QTreeWidgetItem &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem(const QTreeWidgetItem &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>. Note that <db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>() and <db:link xlink:href="qtreewidgetitem.xml#treeWidget">treeWidget</db:link>() are not copied.</db:para>
<db:para>This function is useful when reimplementing <db:link xlink:href="qtreewidgetitem.xml#clone">clone</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QTreeWidgetItem">
<db:title>[virtual] QTreeWidgetItem::~QTreeWidgetItem()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QTreeWidgetItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTreeWidgetItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this tree widget item.</db:para>
<db:para>The item will be removed from <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link>s to which it has been added. This makes it safe to delete an item at any time.</db:para>
</db:section>
<db:section xml:id="addChild">
<db:title>void QTreeWidgetItem::addChild(QTreeWidgetItem *<db:emphasis>child</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addChild</db:methodname>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addChild(QTreeWidgetItem *child)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends the <db:code role="parameter">child</db:code> item to the list of children.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#insertChild">insertChild</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#takeChild">takeChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addChildren">
<db:title>void QTreeWidgetItem::addChildren(const QList&lt;QTreeWidgetItem *&gt; &amp;<db:emphasis>children</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addChildren</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QTreeWidgetItem *&gt; &amp;</db:type>
<db:parameter>children</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addChildren(const QList&lt;QTreeWidgetItem *&gt; &amp;children)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends the given list of <db:code role="parameter">children</db:code> to the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#insertChildren">insertChildren</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#takeChildren">takeChildren</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="background">
<db:title>QBrush QTreeWidgetItem::background(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>background</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush background(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to render the background of the specified <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setBackground">setBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#foreground">foreground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkState">
<db:title>Qt::CheckState QTreeWidgetItem::checkState(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::CheckState</db:type>
<db:methodname>checkState</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::CheckState checkState(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the check state of the label in the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setCheckState">setCheckState</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#CheckState-enum">Qt::CheckState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="child">
<db:title>QTreeWidgetItem *QTreeWidgetItem::child(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTreeWidgetItem *</db:type>
<db:methodname>child</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem * child(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item at the given <db:code role="parameter">index</db:code> in the list of the item's children.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childCount">
<db:title>int QTreeWidgetItem::childCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>childCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int childCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of child items.</db:para>
</db:section>
<db:section xml:id="childIndicatorPolicy">
<db:title>QTreeWidgetItem::ChildIndicatorPolicy QTreeWidgetItem::childIndicatorPolicy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTreeWidgetItem::ChildIndicatorPolicy</db:type>
<db:methodname>childIndicatorPolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem::ChildIndicatorPolicy childIndicatorPolicy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item indicator policy. This policy decides when the tree branch expand/collapse indicator is shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setChildIndicatorPolicy">setChildIndicatorPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clone">
<db:title>[virtual] QTreeWidgetItem *QTreeWidgetItem::clone() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QTreeWidgetItem *</db:type>
<db:methodname>clone</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem * clone() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a deep copy of the item and of its children.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>int QTreeWidgetItem::columnCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of columns in the item.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[virtual] QVariant QTreeWidgetItem::data(int <db:emphasis>column</db:emphasis>, int <db:emphasis>role</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data(int column, int role) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value for the item's <db:code role="parameter">column</db:code> and <db:code role="parameter">role</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="emitDataChanged">
<db:title>[protected] void QTreeWidgetItem::emitDataChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>emitDataChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void emitDataChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Causes the model associated with this item to emit a <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() signal for this item.</db:para>
<db:para>You normally only need to call this function if you have subclassed <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> and reimplemented <db:link xlink:href="qtreewidgetitem.xml#data">data</db:link>() and/or <db:link xlink:href="qtreewidgetitem.xml#setData">setData</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>Qt::ItemFlags QTreeWidgetItem::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::ItemFlags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::ItemFlags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the flags used to describe the item. These determine whether the item can be checked, edited, and selected.</db:para>
<db:para>The default value for flags is <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsSelectable</db:link> | <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsUserCheckable</db:link> | <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEnabled</db:link> | <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsDragEnabled</db:link> | <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsDropEnabled</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>QFont QTreeWidgetItem::font(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont</db:type>
<db:methodname>font</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont font(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font used to render the text in the specified <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="foreground">
<db:title>QBrush QTreeWidgetItem::foreground(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>foreground</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush foreground(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to render the foreground (e.g. text) of the specified <db:code role="parameter">column</db:code>. Setting a default-constructed brush will let the view use the default color from the style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#background">background</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon">
<db:title>QIcon QTreeWidgetItem::icon(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIcon</db:type>
<db:methodname>icon</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIcon icon(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the icon that is displayed in the specified <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setIcon">setIcon</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#iconSize-prop">iconSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfChild">
<db:title>int QTreeWidgetItem::indexOfChild(QTreeWidgetItem *<db:emphasis>child</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOfChild</db:methodname>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOfChild(QTreeWidgetItem *child) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the given <db:code role="parameter">child</db:code> in the item's list of children.</db:para>
</db:section>
<db:section xml:id="insertChild">
<db:title>void QTreeWidgetItem::insertChild(int <db:emphasis>index</db:emphasis>, QTreeWidgetItem *<db:emphasis>child</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertChild</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertChild(int index, QTreeWidgetItem *child)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the <db:code role="parameter">child</db:code> item at <db:code role="parameter">index</db:code> in the list of children.</db:para>
<db:para>If the child has already been inserted somewhere else it won't be inserted again.</db:para>
</db:section>
<db:section xml:id="insertChildren">
<db:title>void QTreeWidgetItem::insertChildren(int <db:emphasis>index</db:emphasis>, const QList&lt;QTreeWidgetItem *&gt; &amp;<db:emphasis>children</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertChildren</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QTreeWidgetItem *&gt; &amp;</db:type>
<db:parameter>children</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertChildren(int index, const QList&lt;QTreeWidgetItem *&gt; &amp;children)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the given list of <db:code role="parameter">children</db:code> into the list of the item children at <db:code role="parameter">index</db:code> .</db:para>
<db:para>Children that have already been inserted somewhere else won't be inserted.</db:para>
</db:section>
<db:section xml:id="isDisabled">
<db:title>bool QTreeWidgetItem::isDisabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDisabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDisabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the item is disabled; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isExpanded">
<db:title>bool QTreeWidgetItem::isExpanded() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isExpanded</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isExpanded() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the item is expanded, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setExpanded">setExpanded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFirstColumnSpanned">
<db:title>bool QTreeWidgetItem::isFirstColumnSpanned() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFirstColumnSpanned</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFirstColumnSpanned() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the item is spanning all the columns in a row; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setFirstColumnSpanned">setFirstColumnSpanned</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isHidden">
<db:title>bool QTreeWidgetItem::isHidden() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isHidden</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isHidden() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the item is hidden, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setHidden">setHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSelected">
<db:title>bool QTreeWidgetItem::isSelected() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSelected</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSelected() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the item is selected, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setSelected">setSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parent">
<db:title>QTreeWidgetItem *QTreeWidgetItem::parent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTreeWidgetItem *</db:type>
<db:methodname>parent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem * parent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#child">child</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>[virtual] void QTreeWidgetItem::read(QDataStream &amp;<db:emphasis>in</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>read</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void read(QDataStream &amp;in)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the item from stream <db:code role="parameter">in</db:code>. This only reads data into a single item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeChild">
<db:title>void QTreeWidgetItem::removeChild(QTreeWidgetItem *<db:emphasis>child</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeChild</db:methodname>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeChild(QTreeWidgetItem *child)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given item indicated by <db:code role="parameter">child</db:code>. The removed item will not be deleted.</db:para>
</db:section>
<db:section xml:id="setBackground">
<db:title>void QTreeWidgetItem::setBackground(int <db:emphasis>column</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBackground</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBackground(int column, const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the background brush of the label in the given <db:code role="parameter">column</db:code> to the specified <db:code role="parameter">brush</db:code>. Setting a default-constructed brush will let the view use the default color from the style.</db:para>
<db:note>
<db:para>If <db:link xlink:href="stylesheet.xml">Qt Style Sheets</db:link> are used on the same widget as setBackground(), style sheets will take precedence if the settings conflict.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#background">background</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCheckState">
<db:title>void QTreeWidgetItem::setCheckState(int <db:emphasis>column</db:emphasis>, Qt::CheckState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCheckState</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CheckState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCheckState(int column, Qt::CheckState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item in the given <db:code role="parameter">column</db:code> check state to be <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#checkState">checkState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setChildIndicatorPolicy">
<db:title>void QTreeWidgetItem::setChildIndicatorPolicy(QTreeWidgetItem::ChildIndicatorPolicy <db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setChildIndicatorPolicy</db:methodname>
<db:methodparam>
<db:type>QTreeWidgetItem::ChildIndicatorPolicy</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setChildIndicatorPolicy(QTreeWidgetItem::ChildIndicatorPolicy policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item indicator <db:code role="parameter">policy</db:code>. This policy decides when the tree branch expand/collapse indicator is shown. The default value is <db:link xlink:href="qtreewidgetitem.xml#ChildIndicatorPolicy-enum">DontShowIndicatorWhenChildless</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#childIndicatorPolicy">childIndicatorPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>[virtual] void QTreeWidgetItem::setData(int <db:emphasis>column</db:emphasis>, int <db:emphasis>role</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int column, int role, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value for the item's <db:code role="parameter">column</db:code> and <db:code role="parameter">role</db:code> to the given <db:code role="parameter">value</db:code>.</db:para>
<db:para>The <db:code role="parameter">role</db:code> describes the type of data specified by <db:code role="parameter">value</db:code>, and is defined by the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link> enum.</db:para>
<db:note>
<db:para>The default implementation treats <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link> and <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> as referring to the same data.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDisabled">
<db:title>void QTreeWidgetItem::setDisabled(bool <db:emphasis>disabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDisabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>disabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDisabled(bool disabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables the item if <db:code role="parameter">disabled</db:code> is true; otherwise enables the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#isDisabled">isDisabled</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExpanded">
<db:title>void QTreeWidgetItem::setExpanded(bool <db:emphasis>expand</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExpanded</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>expand</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExpanded(bool expand)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Expands the item if <db:code role="parameter">expand</db:code> is true, otherwise collapses the item.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> must be added to the <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> before calling this function.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#isExpanded">isExpanded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFirstColumnSpanned">
<db:title>void QTreeWidgetItem::setFirstColumnSpanned(bool <db:emphasis>span</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFirstColumnSpanned</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>span</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFirstColumnSpanned(bool span)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the first section to span all columns if <db:code role="parameter">span</db:code> is true; otherwise all item sections are shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#isFirstColumnSpanned">isFirstColumnSpanned</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlags">
<db:title>void QTreeWidgetItem::setFlags(Qt::ItemFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlags</db:methodname>
<db:methodparam>
<db:type>Qt::ItemFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlags(Qt::ItemFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the flags for the item to the given <db:code role="parameter">flags</db:code>. These determine whether the item can be selected or modified. This is often used to disable an item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFont">
<db:title>void QTreeWidgetItem::setFont(int <db:emphasis>column</db:emphasis>, const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFont</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFont(int column, const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the font used to display the text in the given <db:code role="parameter">column</db:code> to the given <db:code role="parameter">font</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setForeground">
<db:title>void QTreeWidgetItem::setForeground(int <db:emphasis>column</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setForeground</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setForeground(int column, const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the foreground brush of the label in the given <db:code role="parameter">column</db:code> to the specified <db:code role="parameter">brush</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#foreground">foreground</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setBackground">setBackground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHidden">
<db:title>void QTreeWidgetItem::setHidden(bool <db:emphasis>hide</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHidden</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>hide</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHidden(bool hide)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Hides the item if <db:code role="parameter">hide</db:code> is true, otherwise shows the item.</db:para>
<db:note>
<db:para>A call to this function has no effect if the item is not currently in a view. In particular, calling setHidden(true) on an item and only then adding it to a view will result in a visible item.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#isHidden">isHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIcon">
<db:title>void QTreeWidgetItem::setIcon(int <db:emphasis>column</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIcon</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIcon(int column, const QIcon &amp;icon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the icon to be displayed in the given <db:code role="parameter">column</db:code> to <db:code role="parameter">icon</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#icon">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#iconSize-prop">iconSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelected">
<db:title>void QTreeWidgetItem::setSelected(bool <db:emphasis>select</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSelected</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>select</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSelected(bool select)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the selected state of the item to <db:code role="parameter">select</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#isSelected">isSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSizeHint">
<db:title>void QTreeWidgetItem::setSizeHint(int <db:emphasis>column</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSizeHint</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSizeHint(int column, const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size hint for the tree item in the given <db:code role="parameter">column</db:code> to be <db:code role="parameter">size</db:code>. If no size hint is set or <db:code role="parameter">size</db:code> is invalid, the item delegate will compute the size hint based on the item data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatusTip">
<db:title>void QTreeWidgetItem::setStatusTip(int <db:emphasis>column</db:emphasis>, const QString &amp;<db:emphasis>statusTip</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStatusTip</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>statusTip</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStatusTip(int column, const QString &amp;statusTip)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the status tip for the given <db:code role="parameter">column</db:code> to the given <db:code role="parameter">statusTip</db:code>. <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> mouse tracking needs to be enabled for this feature to work.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#statusTip">statusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setToolTip">setToolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QTreeWidgetItem::setText(int <db:emphasis>column</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setText</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setText(int column, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text to be displayed in the given <db:code role="parameter">column</db:code> to the given <db:code role="parameter">text</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#text">text</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextAlignment">
<db:title>void QTreeWidgetItem::setTextAlignment(int <db:emphasis>column</db:emphasis>, int <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextAlignment</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextAlignment(int column, int alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text alignment for the label in the given <db:code role="parameter">column</db:code> to the <db:code role="parameter">alignment</db:code> specified (see <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#textAlignment">textAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToolTip">
<db:title>void QTreeWidgetItem::setToolTip(int <db:emphasis>column</db:emphasis>, const QString &amp;<db:emphasis>toolTip</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setToolTip</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>toolTip</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setToolTip(int column, const QString &amp;toolTip)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the tooltip for the given <db:code role="parameter">column</db:code> to <db:code role="parameter">toolTip</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#toolTip">toolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWhatsThis">
<db:title>void QTreeWidgetItem::setWhatsThis(int <db:emphasis>column</db:emphasis>, const QString &amp;<db:emphasis>whatsThis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWhatsThis</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>whatsThis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWhatsThis(int column, const QString &amp;whatsThis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the &quot;What's This?&quot; help for the given <db:code role="parameter">column</db:code> to <db:code role="parameter">whatsThis</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#whatsThis">whatsThis</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#setToolTip">setToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>QSize QTreeWidgetItem::sizeHint(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size hint set for the tree item in the given <db:code role="parameter">column</db:code> (see <db:link xlink:href="qsize.xml">QSize</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setSizeHint">setSizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortChildren">
<db:title>void QTreeWidgetItem::sortChildren(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sortChildren</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SortOrder</db:type>
<db:parameter>order</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sortChildren(int column, Qt::SortOrder order)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sorts the children of the item using the given <db:code role="parameter">order</db:code>, by the values in the given <db:code role="parameter">column</db:code>.</db:para>
<db:note>
<db:para>This function does nothing if the item is not associated with a <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="statusTip">
<db:title>QString QTreeWidgetItem::statusTip(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>statusTip</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString statusTip(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the status tip for the contents of the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeChild">
<db:title>QTreeWidgetItem *QTreeWidgetItem::takeChild(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTreeWidgetItem *</db:type>
<db:methodname>takeChild</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem * takeChild(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the item at <db:code role="parameter">index</db:code> and returns it, otherwise return 0.</db:para>
</db:section>
<db:section xml:id="takeChildren">
<db:title>QList&lt;QTreeWidgetItem *&gt; QTreeWidgetItem::takeChildren()</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QTreeWidgetItem *&gt;</db:type>
<db:methodname>takeChildren</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QTreeWidgetItem *&gt; takeChildren()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the list of children and returns it, otherwise returns an empty list.</db:para>
</db:section>
<db:section xml:id="text">
<db:title>QString QTreeWidgetItem::text(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>text</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString text(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text in the specified <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textAlignment">
<db:title>int QTreeWidgetItem::textAlignment(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>textAlignment</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int textAlignment(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text alignment for the label in the given <db:code role="parameter">column</db:code> (see <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setTextAlignment">setTextAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolTip">
<db:title>QString QTreeWidgetItem::toolTip(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toolTip</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toolTip(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the tool tip for the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setToolTip">setToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="treeWidget">
<db:title>QTreeWidget *QTreeWidgetItem::treeWidget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTreeWidget *</db:type>
<db:methodname>treeWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidget * treeWidget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the tree widget that contains the item.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>int QTreeWidgetItem::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type passed to the <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="whatsThis">
<db:title>QString QTreeWidgetItem::whatsThis(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>whatsThis</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString whatsThis(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the &quot;What's This?&quot; help for the contents of the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>[virtual] void QTreeWidgetItem::write(QDataStream &amp;<db:emphasis>out</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(QDataStream &amp;out) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the item to stream <db:code role="parameter">out</db:code>. This only writes data from one single item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#read">read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[virtual] bool QTreeWidgetItem::operator&lt;(const QTreeWidgetItem &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QTreeWidgetItem &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QTreeWidgetItem &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the text in the item is less than the text in the <db:code role="parameter">other</db:code> item, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QTreeWidgetItem &amp;QTreeWidgetItem::operator=(const QTreeWidgetItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTreeWidgetItem &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QTreeWidgetItem &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem &amp; operator=(const QTreeWidgetItem &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code>'s data and flags to this item. Note that <db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>() and <db:link xlink:href="qtreewidgetitem.xml#treeWidget">treeWidget</db:link>() are not copied.</db:para>
<db:para>This function is useful when reimplementing <db:link xlink:href="qtreewidgetitem.xml#clone">clone</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QTreeWidgetItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTreeWidgetItem &amp;</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QTreeWidgetItem &amp;item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the tree widget item <db:code role="parameter">item</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:para>This operator uses <db:link xlink:href="qtreewidgetitem.xml#write">QTreeWidgetItem::write</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QTreeWidgetItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTreeWidgetItem &amp;</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QTreeWidgetItem &amp;item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a tree widget item from stream <db:code role="parameter">in</db:code> into <db:code role="parameter">item</db:code>.</db:para>
<db:para>This operator uses <db:link xlink:href="qtreewidgetitem.xml#read">QTreeWidgetItem::read</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
