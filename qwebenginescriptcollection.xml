<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineScriptCollection Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebenginescriptcollection.xml">QWebEngineScriptCollection</db:link> class represents a collection of user scripts.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineScriptCollection</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginewidgets</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qwebenginescriptcollection.xml">QWebEngineScriptCollection</db:link> manages a set of user scripts.</db:para>
<db:para>Use <db:link xlink:href="qwebenginepage.xml#scripts">QWebEnginePage::scripts</db:link>() and <db:link xlink:href="qwebengineprofile.xml#scripts">QWebEngineProfile::scripts</db:link>() to access the collection of scripts associated with a single page or a number of pages sharing the same profile.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QWebEngineScriptCollection">
<db:title>[noexcept] QWebEngineScriptCollection::~QWebEngineScriptCollection()</db:title>
<db:para>Destroys the collection.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QWebEngineScriptCollection::clear()</db:title>
<db:para>Removes all scripts from this collection.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>bool QWebEngineScriptCollection::contains(const QWebEngineScript &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the collection contains an occurrence of <db:code role="parameter">value</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QWebEngineScriptCollection::count() const</db:title>
<db:para>Returns the number of elements in the collection.</db:para>
</db:section>
<db:section xml:id="findScript">
<db:title>QWebEngineScript QWebEngineScriptCollection::findScript(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the first script found in the collection with the name <db:code role="parameter">name</db:code>, or a null <db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link> if none was found.</db:para>
<db:note>
<db:para>The order in which the script collection is traversed is undefined, which means this should be used when the unicity is guaranteed at the application level.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescriptcollection.xml#findScripts">findScripts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findScripts">
<db:title>QList&lt;QWebEngineScript&gt; QWebEngineScriptCollection::findScripts(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the list of scripts in the collection with the name <db:code role="parameter">name</db:code>, or an empty list if none was found.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>void QWebEngineScriptCollection::insert(const QList&lt;QWebEngineScript&gt; &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:para>Inserts scripts from the list <db:code role="parameter">list</db:code> into the collection.</db:para>
</db:section>
<db:section xml:id="insert-1">
<db:title>void QWebEngineScriptCollection::insert(const QWebEngineScript &amp;<db:emphasis>s</db:emphasis>)</db:title>
<db:para>Inserts the script <db:code role="parameter">s</db:code> into the collection.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>bool QWebEngineScriptCollection::remove(const QWebEngineScript &amp;<db:emphasis>script</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">script</db:code> from the collection.</db:para>
<db:para>Returns <db:code>true</db:code> if the script was found and successfully removed from the collection; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="toList">
<db:title>QList&lt;QWebEngineScript&gt; QWebEngineScriptCollection::toList() const</db:title>
<db:para>Returns a list with the values of the scripts used in this collection.</db:para>
</db:section>
</db:section>
</db:article>
