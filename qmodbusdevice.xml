<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModbusDevice Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link> class is the base class for Modbus classes, <db:link xlink:href="qmodbusserver.xml">QModbusServer</db:link> and <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModbusDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmodbusclient.xml" xlink:role="class">QModbusClient</db:link> and <db:link xlink:href="qmodbusserver.xml" xlink:role="class">QModbusServer</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ConnectionParameter-enum">
<db:title>enum QModbusDevice::ConnectionParameter</db:title>
<db:enumsynopsis>
<db:enumname>ConnectionParameter</db:enumname>
<db:enumitem>
<db:enumidentifier>SerialPortNameParameter</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SerialParityParameter</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SerialBaudRateParameter</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SerialDataBitsParameter</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SerialStopBitsParameter</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NetworkPortParameter</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NetworkAddressParameter</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the possible values that can be set for a Modbus device connection.</db:para>
<db:para>The general purpose value (and the associated types) are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::SerialPortNameParameter</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This parameter holds the serial port used for device communication, e.g. COM1. <db:code>QString</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::SerialParityParameter</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This parameter holds the parity checking mode. <db:code>QSerialPort::Parity</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::SerialBaudRateParameter</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This parameter holds the data baud rate for the communication. <db:code>QSerialPort::BaudRate</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::SerialDataBitsParameter</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This parameter holds the data bits in a frame. <db:code>QSerialPort::DataBits</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::SerialStopBitsParameter</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>This parameter holds the number of stop bits in a frame. <db:code>QSerialPort::StopBits</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::NetworkPortParameter</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>This parameter holds the network port. <db:code>int</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::NetworkAddressParameter</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>This parameter holds the host address for network communication. <db:code>QString</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QModbusDevice::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectionError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConfigurationError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TimeoutError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProtocolError</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReplyAbortedError</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidResponseError</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes all the possible error conditions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No errors have occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ReadError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An error occurred during a read operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::WriteError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An error occurred during a write operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ConnectionError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error occurred when attempting to open the backend.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ConfigurationError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An error occurred when attempting to set a configuration parameter.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::TimeoutError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>A timeout occurred during I/O. An I/O operation did not finish within a given time frame.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ProtocolError</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>A Modbus specific protocol error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ReplyAbortedError</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The reply was aborted due to a disconnection of the device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>An unknown error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::InvalidResponseError (since Qt 6.4)</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>An error occurred while parsing the response, or the <db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">FunctionCode</db:link> is not supported by the current implementation. In the latter case custom Modbus client implementation can override the <db:link xlink:href="qmodbusclient.xml#processResponse">processResponse</db:link>() and <db:link xlink:href="qmodbusclient.xml#processPrivateResponse">processPrivateResponse</db:link>() methods to provide support for needed functions.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="IntermediateError-enum">
<db:title>[since 6.0] enum QModbusDevice::IntermediateError</db:title>
<db:enumsynopsis>
<db:enumname>IntermediateError</db:enumname>
<db:enumitem>
<db:enumidentifier>ResponseCrcError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResponseRequestMismatch</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes possible errors that can happen during a full send and receive cycle for a Modbus reply.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ResponseCrcError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A Modbus response with a wrong CRC was received.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ResponseRequestMismatch</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A Modbus response was received but did not match the open request, probably due to the PDU's function code not matching.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If any of the above intermediate errors occurred, the frame is likely resent until the maximum number of retries has been reached.</db:para>
<db:para>The list of intermediate errors can be inspected from the <db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link> intermediate errors function.</db:para>
<db:para>This enum was introduced or modified in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusclient.xml#numberOfRetries">QModbusClient::numberOfRetries</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusreply.xml#intermediateErrors">QModbusReply::intermediateErrors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QModbusDevice::State</db:title>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>UnconnectedState</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectingState</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectedState</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClosingState</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes all possible device states.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::UnconnectedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The device is disconnected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ConnectingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The device is being connected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ConnectedState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The device is connected to the Modbus network.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link></db:emphasis>::ClosingState</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The device is being closed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModbusDevice">
<db:title>[explicit] QModbusDevice::QModbusDevice(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QModbusDevice</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusDevice(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a Modbus device with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QModbusDevice">
<db:title>[virtual] QModbusDevice::~QModbusDevice()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QModbusDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QModbusDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qmodbusdevice.xml">QModbusDevice</db:link> instance</db:para>
</db:section>
<db:section xml:id="close">
<db:title>[pure virtual protected] void QModbusDevice::close()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is responsible for closing the Modbus connection. The implementation must ensure that the instance's <db:link xlink:href="qmodbusdevice.xml#state">state</db:link>() is set to <db:link xlink:href="qmodbusdevice.xml#State-enum">QModbusDevice::UnconnectedState</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#disconnectDevice">disconnectDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectDevice">
<db:title>bool QModbusDevice::connectDevice()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>connectDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool connectDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Connects the device to the Modbus network. Returns <db:code>true</db:code> if the connection process was successfully initiated; otherwise <db:code>false</db:code>. Final connection success confirmation requires the <db:link xlink:href="qmodbusdevice.xml#state">state</db:link>() changing to <db:link xlink:href="qmodbusdevice.xml#State-enum">QModbusDevice::ConnectedState</db:link>.</db:para>
<db:para>This function calls <db:link xlink:href="qmodbusdevice.xml#open">open</db:link>() as part of its implementation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#open">open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectionParameter">
<db:title>QVariant QModbusDevice::connectionParameter(QModbusDevice::ConnectionParameter <db:emphasis>parameter</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>connectionParameter</db:methodname>
<db:methodparam>
<db:type>QModbusDevice::ConnectionParameter</db:type>
<db:parameter>parameter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant connectionParameter(QModbusDevice::ConnectionParameter parameter) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value associated with the given connection <db:code role="parameter">parameter</db:code>. The returned value can be empty.</db:para>
<db:para>By default the <db:code>QModbusDevice</db:code> is initialized with some common values. The serial port settings are even parity, a baud rate of 19200 bits per second, eight data bits and one stop bit. The network settings for the host address is set to local host and port to 502.</db:para>
<db:note>
<db:para>For a serial connection to succeed, the <db:link xlink:href="qmodbusdevice.xml#ConnectionParameter-enum">SerialPortNameParameter</db:link> needs to be set to a valid communication port. The information about valid serial ports can be obtained from <db:link xlink:href="qserialportinfo.xml">QSerialPortInfo</db:link>.</db:para>
</db:note>
<db:note>
<db:para>If the device is already connected, the settings are taken into account after reconnecting the device.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#setConnectionParameter">setConnectionParameter</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusdevice.xml#ConnectionParameter-enum">ConnectionParameter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QModbusDevice::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the underlying <db:link xlink:href="qiodevice.xml">QIODevice</db:link> used for ModBus communication or <db:code>nullptr</db:code> if the device was not yet fully initialized.</db:para>
<db:note>
<db:para>Do not store a pointer to the underlying device, because it can be invalidated at any point in time.</db:para>
</db:note>
</db:section>
<db:section xml:id="disconnectDevice">
<db:title>void QModbusDevice::disconnectDevice()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disconnectDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnectDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disconnects the device.</db:para>
<db:para>This function calls <db:link xlink:href="qmodbusdevice.xml#close">close</db:link>() as part of its implementation.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QModbusDevice::Error QModbusDevice::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModbusDevice::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusDevice::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error state of the device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#setError">setError</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusdevice.xml#Error-enum">QModbusDevice::Error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QModbusDevice::errorOccurred(QModbusDevice::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QModbusDevice::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QModbusDevice::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error of the type, <db:code role="parameter">error</db:code>, occurs.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QModbusDevice::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns descriptive error text for the device error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#Error-enum">QModbusDevice::Error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[pure virtual protected] bool QModbusDevice::open()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called by <db:link xlink:href="qmodbusdevice.xml#connectDevice">connectDevice</db:link>(). Subclasses must provide an implementation that returns <db:code>true</db:code> on successful Modbus connection or connection initiation; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The implementation must ensure that the instance's <db:link xlink:href="qmodbusdevice.xml#state">state</db:link>() is set to <db:link xlink:href="qmodbusdevice.xml#State-enum">QModbusDevice::ConnectingState</db:link> or <db:link xlink:href="qmodbusdevice.xml#State-enum">QModbusDevice::ConnectedState</db:link> upon success; otherwise <db:link xlink:href="qmodbusdevice.xml#State-enum">QModbusDevice::UnconnectedState</db:link>. Typically, <db:link xlink:href="qmodbusdevice.xml#State-enum">QModbusDevice::ConnectingState</db:link> is used when the connection process reports back asynchronously and <db:link xlink:href="qmodbusdevice.xml#State-enum">QModbusDevice::ConnectedState</db:link> in case of synchronous connect behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#connectDevice">connectDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setConnectionParameter">
<db:title>void QModbusDevice::setConnectionParameter(QModbusDevice::ConnectionParameter <db:emphasis>parameter</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setConnectionParameter</db:methodname>
<db:methodparam>
<db:type>QModbusDevice::ConnectionParameter</db:type>
<db:parameter>parameter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setConnectionParameter(QModbusDevice::ConnectionParameter parameter, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of <db:code role="parameter">parameter</db:code> to <db:code role="parameter">value</db:code>. If the <db:code role="parameter">parameter</db:code> already exists, the previous value is overwritten. A active or running connection is not affected by such parameter changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#ConnectionParameter-enum">ConnectionParameter</db:link></db:member>
<db:member><db:link xlink:href="qmodbusdevice.xml#connectionParameter">connectionParameter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setError">
<db:title>[protected] void QModbusDevice::setError(const QString &amp;<db:emphasis>errorText</db:emphasis>, QModbusDevice::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setError</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorText</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QModbusDevice::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setError(const QString &amp;errorText, QModbusDevice::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the error state of the device. ModBus device implementations must use this function in case of an error to set the <db:code role="parameter">error</db:code> type and a descriptive <db:code role="parameter">errorText</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusdevice.xml#Error-enum">QModbusDevice::Error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setState">
<db:title>[protected] void QModbusDevice::setState(QModbusDevice::State <db:emphasis>newState</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setState</db:methodname>
<db:methodparam>
<db:type>QModbusDevice::State</db:type>
<db:parameter>newState</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setState(QModbusDevice::State newState)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the state of the device to <db:code role="parameter">newState</db:code>. Modbus device implementations must use this function to update the device state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QModbusDevice::State QModbusDevice::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModbusDevice::State</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusDevice::State state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current state of the device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#setState">setState</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusdevice.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QModbusDevice::stateChanged(QModbusDevice::State <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QModbusDevice::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QModbusDevice::State state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted every time the state of the device changes. The new state is represented by <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdevice.xml#setState">setState</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusdevice.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
