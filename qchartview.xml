<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QChartView Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qchartview.xml">QChartView</db:link> is a standalone widget that can display charts.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QChartView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsview.xml" xlink:role="class">QGraphicsView</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A chart view does not require a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> object to work. To display a chart in an existing <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>, the <db:link xlink:href="qchart.xml">QChart</db:link> or <db:link xlink:href="qpolarchart.xml">QPolarChart</db:link> class should be used instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml">QChart</db:link></db:member>
<db:member><db:link xlink:href="qpolarchart.xml">QPolarChart</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RubberBand-enum">
<db:title>[since 6.2] enum QChartView::RubberBand</db:title>
<db:bridgehead renderas="sect2">flags QChartView::RubberBands</db:bridgehead>
<db:enumsynopsis>
<db:enumname>RubberBand</db:enumname>
<db:enumitem>
<db:enumidentifier>NoRubberBand</db:enumidentifier>
<db:enumvalue>0x0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VerticalRubberBand</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HorizontalRubberBand</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RectangleRubberBand</db:enumidentifier>
<db:enumvalue>0x3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClickThroughRubberBand</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QChartView::RubberBands</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the different types of rubber band effects that can be applied to the rectangular zooming area.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchartview.xml">QChartView</db:link></db:emphasis>::NoRubberBand</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>No zooming area is specified, and therefore zooming is not enabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchartview.xml">QChartView</db:link></db:emphasis>::VerticalRubberBand</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>The rubber band is locked to the size of the chart horizontally and can be pulled vertically to specify the zooming area.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchartview.xml">QChartView</db:link></db:emphasis>::HorizontalRubberBand</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>The rubber band is locked to the size of the chart vertically and can be pulled horizontally to specify the zooming area.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchartview.xml">QChartView</db:link></db:emphasis>::RectangleRubberBand</db:code></db:para>
</db:td>
<db:td><db:code>0x3</db:code></db:td>
<db:td>
<db:para>The rubber band is fixed to the point that was clicked and can be pulled both vertically and horizontally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchartview.xml">QChartView</db:link></db:emphasis>::ClickThroughRubberBand</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>An option on the above rubber band choices that allows left clicks to be passed on to chart items if those chart items accept clicks. To select this, OR it with one of the rubber band selection modes.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 6.2.</db:para>
<db:para>The <db:code>RubberBands</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;RubberBand&gt;. </db:code>It stores an OR combination of <db:code>RubberBand</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QChartView">
<db:title>[explicit] QChartView::QChartView(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QChartView</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QChartView(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a chart view object with the parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QChartView-1">
<db:title>[explicit] QChartView::QChartView(QChart *<db:emphasis>chart</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QChartView</db:methodname>
<db:methodparam>
<db:type>QChart *</db:type>
<db:parameter>chart</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QChartView(QChart *chart, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a chart view object with the parent <db:code role="parameter">parent</db:code> to display the chart <db:code role="parameter">chart</db:code>. The ownership of the chart is passed to the chart view.</db:para>
</db:section>
<db:section xml:id="dtor.QChartView">
<db:title>[virtual] QChartView::~QChartView()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QChartView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QChartView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the chart view object and the associated chart.</db:para>
</db:section>
<db:section xml:id="chart">
<db:title>QChart *QChartView::chart() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChart *</db:type>
<db:methodname>chart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChart * chart() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pointer to the associated chart.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchartview.xml#setChart">setChart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QChartView::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsview.xml#mouseMoveEvent" role="function">QGraphicsView::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
<db:para>If the rubber band rectangle is displayed in the press event specified by <db:code role="parameter">event</db:code>, the event data is used to update the rubber band geometry. Otherwise, the default <db:link xlink:href="qgraphicsview.xml#mouseMoveEvent">QGraphicsView::mouseMoveEvent</db:link>() implementation is called.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QChartView::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsview.xml#mousePressEvent" role="function">QGraphicsView::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
<db:para>If the left mouse button is pressed and the rubber band is enabled, the event <db:code role="parameter">event</db:code> is accepted and the rubber band is displayed on the screen. This enables the user to select the zoom area.</db:para>
<db:para>If some other mouse button is pressed or the rubber band is disabled, the event is passed to <db:link xlink:href="qgraphicsview.xml#mousePressEvent">QGraphicsView::mousePressEvent</db:link>().</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QChartView::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsview.xml#mouseReleaseEvent" role="function">QGraphicsView::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
<db:para>If the left mouse button is released and the rubber band is enabled, the event <db:code role="parameter">event</db:code> is accepted and the view is zoomed into the rectangle specified by the rubber band. If releasing the right mouse button triggered the event, the view is zoomed out.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QChartView::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsview.xml#resizeEvent" role="function">QGraphicsView::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
<db:para>Resizes and updates the chart area using the data specified by <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="rubberBand">
<db:title>QChartView::RubberBands QChartView::rubberBand() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChartView::RubberBands</db:type>
<db:methodname>rubberBand</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChartView::RubberBands rubberBand() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the rubber band flags that are currently being used by the chart view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchartview.xml#setRubberBand">setRubberBand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setChart">
<db:title>void QChartView::setChart(QChart *<db:emphasis>chart</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setChart</db:methodname>
<db:methodparam>
<db:type>QChart *</db:type>
<db:parameter>chart</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setChart(QChart *chart)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current chart to <db:code role="parameter">chart</db:code>. The ownership of the new chart is passed to the chart view and the ownership of the previous chart is released.</db:para>
<db:para>To avoid memory leaks, the previous chart must be deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchartview.xml#chart">chart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRubberBand">
<db:title>void QChartView::setRubberBand(const QChartView::RubberBands &amp;<db:emphasis>rubberBand</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRubberBand</db:methodname>
<db:methodparam>
<db:type>const QChartView::RubberBands &amp;</db:type>
<db:parameter>rubberBand</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRubberBand(const QChartView::RubberBands &amp;rubberBand)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the rubber band flags to <db:code role="parameter">rubberBand</db:code>. The selected flags determine the way zooming is performed.</db:para>
<db:note>
<db:para>Rubber band zooming is not supported for polar charts.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchartview.xml#rubberBand">rubberBand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
