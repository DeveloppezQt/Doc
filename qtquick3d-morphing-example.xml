<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Morphing Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to control morphing animations in Qt Quick 3D.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/morphing.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows how to control morphing animation on a model that has been imported from an external tool.</db:para>
<db:section xml:id="creating-a-mesh">
<db:title>Creating a mesh</db:title>
<db:para>The mesh for the model was created using the Blender 3D modeling tool. In addition to the base shape, the mesh contains three morph targets (called <db:emphasis>shape keys</db:emphasis> in Blender).</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/blender.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>It was exported from Blender as a glTF file, and imported using <db:link xlink:href="qtquick3d-tool-balsam.xml">balsam</db:link>.</db:para>
</db:section>
<db:section xml:id="controlling-the-morph-targets">
<db:title>Controlling the morph targets</db:title>
<db:para>Normally, morphing is controlled by a <db:link xlink:href="qtquicktimeline-overview.xml">timeline animation</db:link> or a property animation. In this example, we use sliders instead, to make it possible to experiment freely with combining different weights:</db:para>
<db:programlisting language="qml">            Label { text: &quot;Mouth:&quot; }
            RealSlider {
                id: mouthSlider
                from: 0.0
                to: 1.0
            }
            Label { text: &quot;Ears and eyebrows:&quot; }
            RealSlider {
                id: earSlider
                from: 0.0
                to: 1.0
            }
            Label { text: &quot;Cubify:&quot; }
            RealSlider {
                id: cubeSlider
                from: 0.0
                to: 1.0
            }
</db:programlisting>
<db:para>(<db:code>RealSlider</db:code> is a simple slider that provides a floating point value. It is borrowed from the effects example.)</db:para>
<db:para>We define a <db:link xlink:href="qml-qtquick3d-morphtarget.xml">MorphTarget</db:link> for each of the the targets in the mesh. Morph targets are the objects we bind to to control the morphing. Typically, they will be animated, but in this example we bind to the slider values:</db:para>
<db:programlisting language="qml">        MorphTarget {
            id: morphtarget0
            weight: mouthSlider.value
            attributes: MorphTarget.Position | MorphTarget.Normal
        }
        MorphTarget {
            id: morphtarget1
            weight: earSlider.value
            attributes: MorphTarget.Position | MorphTarget.Normal
        }
        MorphTarget {
            id: morphtarget2
            weight: cubeSlider.value
            attributes: MorphTarget.Position | MorphTarget.Normal
        }
</db:programlisting>
<db:para>Finally we create a model and bind the morph targets to the targets in the mesh:</db:para>
<db:programlisting language="qml">        Model {
            source: &quot;suzanne.mesh&quot;
            morphTargets: [
                morphtarget0,
                morphtarget1,
                morphtarget2
            ]
            materials: PrincipledMaterial {
                baseColor: &quot;#41cd52&quot;
                roughness: 0.1
            }
            SequentialAnimation on eulerRotation.y {
                NumberAnimation { from: -45; to: 45; duration: 10000 }
                NumberAnimation { from: 45; to: -45; duration: 10000 }
                loops: Animation.Infinite
            }
        }
</db:programlisting>
<db:para>Note that the targets are matched by their position in the list: the names are not significant.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="morphing/CMakeLists.txt">morphing/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="morphing/RealSlider.qml">morphing/RealSlider.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="morphing/main.cpp">morphing/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="morphing/main.qml">morphing/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="morphing/morphing.pro">morphing/morphing.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="morphing/qml.qrc">morphing/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
