<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Particles Examples - System</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of examples using Affectors in the QML particle system.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-system-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This is a collection of small QML examples relating to using Affectors in the particle system. Each example is a small QML file emphasizing a particular type or feature.</db:para>
<db:para>Dynamic comparison compares using the particle system to getting a similar effect with the following code that dynamically instantiates Image types.</db:para>
<db:programlisting language="qml">Item {
    id: fakeEmitter
    function burst(number) {
        while (number &amp;gt; 0) {
            var item = fakeParticle.createObject(root);
            item.lifeSpan = Math.random() * 5000 + 5000;
            item.x = Math.random() * (root.width/2) + (root.width/2);
            item.y = 0;
            number--;
        }
    }

    Component {
        id: fakeParticle
        Image {
            id: container
            property int lifeSpan: 10000
            width: 32
            height: 32
            source: &quot;qrc:///particleresources/glowdot.png&quot;
            y: 0
            PropertyAnimation on y {from: -16; to: root.height-16; duration: container.lifeSpan; running: true}
            SequentialAnimation on opacity {
                running: true
                NumberAnimation { from:0; to: 1; duration: 500}
                PauseAnimation { duration: container.lifeSpan - 1000}
                NumberAnimation { from:1; to: 0; duration: 500}
                ScriptAction { script: container.destroy(); }
            }
        }
    }
}
</db:programlisting>
<db:para>Note how the Image objects are not able to be randomly colorized.</db:para>
<db:para>Start and Stop simply sets the running and paused states of a <db:link xlink:href="qml-qtquick-particles-particlesystem.xml">ParticleSystem</db:link>. While the system does not perform any simulation when stopped or paused, a restart restarts the simulation from the beginning, while unpausing resumes the simulation from where it was.</db:para>
<db:para>Timed group changes is an example that highlights the <db:link xlink:href="qml-qtquick-particles-particlegroup.xml">ParticleGroup</db:link> type. While normally referring to groups with a string name is sufficient, additional effects can be done by setting properties on groups. The first group has a variable duration on it, but always transitions to the second group.</db:para>
<db:programlisting language="qml">ParticleGroup {
    name: &quot;fire&quot;
    duration: 2000
    durationVariation: 2000
    to: {&quot;splode&quot;:1}
}
</db:programlisting>
<db:para>The second group has a <db:link xlink:href="qml-qtquick-particles-trailemitter.xml">TrailEmitter</db:link> on it, and a fixed duration for emitting into the third group. By placing the <db:link xlink:href="qml-qtquick-particles-trailemitter.xml">TrailEmitter</db:link> as a direct child of the <db:link xlink:href="qml-qtquick-particles-particlegroup.xml">ParticleGroup</db:link>, it automatically selects that group to follow.</db:para>
<db:programlisting language="qml">ParticleGroup {
    name: &quot;splode&quot;
    duration: 400
    to: {&quot;dead&quot;:1}
    TrailEmitter {
        group: &quot;works&quot;
        emitRatePerParticle: 100
        lifeSpan: 1000
        maximumEmitted: 1200
        size: 8
        velocity: AngleDirection {angle: 270; angleVariation: 45; magnitude: 20; magnitudeVariation: 20;}
        acceleration: PointDirection {y:100; yVariation: 20}
    }
}
</db:programlisting>
<db:para>The third group has an Affector as a direct child, which makes the affector automatically target this group. The affector means that as soon as particles enter this group, a burst function can be called on another emitter, using the x,y positions of this particle.</db:para>
<db:programlisting language="qml">ParticleGroup {
    name: &quot;dead&quot;
    duration: 1000
    Affector {
        once: true
        onAffected: (x, y)=&amp;gt; worksEmitter.burst(400,x,y)
    }
}
</db:programlisting>
<db:para>If <db:link xlink:href="qml-qtquick-particles-trailemitter.xml">TrailEmitter</db:link> does not suit your needs for multiple emitters, you can also dynamically create Emitters while still using the same <db:link xlink:href="qml-qtquick-particles-particlesystem.xml">ParticleSystem</db:link> and image particle</db:para>
<db:programlisting language="qml">for (var i=0; i&amp;lt;8; i++) {
    var obj = emitterComp.createObject(root);
    obj.x = x
    obj.y = y
    obj.targetX = Math.random() * 240 - 120 + obj.x
    obj.targetY = Math.random() * 240 - 120 + obj.y
    obj.life = Math.round(Math.random() * 2400) + 200
    obj.emitRate = Math.round(Math.random() * 32) + 32
    obj.go();
}
</db:programlisting>
<db:para>Note that this effect, a flurry of flying rainbow spears, would be better served with <db:link xlink:href="qml-qtquick-particles-trailemitter.xml">TrailEmitter</db:link>. It is only done with dynamic emitters in this example to show the concept more simply.</db:para>
<db:para>Multiple Painters shows how to control paint ordering of individual particles. While the paint ordering of particles within one ImagePainter is not strictly defined, <db:link xlink:href="qml-qtquick-particles-imageparticle.xml">ImageParticle</db:link> objects follow the normal Z-ordering rules for <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> items. This example allow you to paint the inside of the particles above the black borders using a pair of ImageParticles each painting different parts of the same logical particle.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/particles/system?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
