<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Tutorial 2 - QML Components</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qml-tutorial1.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="QML Tutorial 1 - Basic Types"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qml-tutorial3.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="QML Tutorial 3 - States and Transitions"/></db:extendedlink>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This chapter adds a color picker to change the color of the text.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-tutorial2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Our color picker is made of six cells with different colors. To avoid writing the same code multiple times for each cell, we create a new <db:code>Cell</db:code> component. A component provides a way of defining a new type that we can re-use in other QML files. A QML component is like a black-box and interacts with the outside world through properties, signals and functions and is generally defined in its own QML file. (For more details, see the <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> documentation). The component's filename must always start with a capital letter.</db:para>
<db:para>Here is the QML code for <db:code>Cell.qml</db:code>:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    id: container
    property alias cellColor: rectangle.color
    signal clicked(cellColor: color)

    width: 40; height: 25

    Rectangle {
        id: rectangle
        border.color: &quot;white&quot;
        anchors.fill: parent
    }

    MouseArea {
        anchors.fill: parent
        onClicked: container.clicked(container.cellColor)
    }
}
</db:programlisting>
<db:section xml:id="walkthrough">
<db:title>Walkthrough</db:title>
<db:section xml:id="the-cell-component">
<db:title>The Cell Component</db:title>
<db:programlisting language="qml">Item {
    id: container
    property alias cellColor: rectangle.color
    signal clicked(cellColor: color)

    width: 40; height: 25
</db:programlisting>
<db:para>The root type of our component is an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> with the <db:code>id</db:code> <db:emphasis>container</db:emphasis>. An <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> is the most basic visual type in QML and is often used as a container for other types.</db:para>
<db:programlisting language="qml">    property alias cellColor: rectangle.color
</db:programlisting>
<db:para>We declare a <db:code>cellColor</db:code> property. This property is accessible from <db:emphasis>outside</db:emphasis> our component, this allows us to instantiate the cells with different colors. This property is just an alias to an existing property - the color of the rectangle that compose the cell (see <db:link xlink:href="qtqml-syntax-propertybinding.xml">Property Binding</db:link>).</db:para>
<db:programlisting language="qml">    signal clicked(cellColor: color)
</db:programlisting>
<db:para>We want our component to also have a signal that we call <db:emphasis>clicked</db:emphasis> with a <db:emphasis>cellColor</db:emphasis> parameter of type <db:emphasis>color</db:emphasis>. We will use this signal to change the color of the text in the main QML file later.</db:para>
<db:programlisting language="qml">    Rectangle {
        id: rectangle
        border.color: &quot;white&quot;
        anchors.fill: parent
    }
</db:programlisting>
<db:para>Our cell component is basically a colored rectangle with the <db:code>id</db:code> <db:emphasis>rectangle</db:emphasis>.</db:para>
<db:para>The <db:code>anchors.fill</db:code> property is a convenient way to set the size of a visual type. In this case the rectangle will have the same size as its parent (see <db:link xlink:href="qtquick-positioning-anchors.xml">Anchor-Based Layout</db:link>).</db:para>
<db:programlisting language="qml">    MouseArea {
        anchors.fill: parent
        onClicked: container.clicked(container.cellColor)
    }
</db:programlisting>
<db:para>In order to change the color of the text when clicking on a cell, we create a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type with the same size as its parent.</db:para>
<db:para>A <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> defines a signal called <db:emphasis>clicked</db:emphasis>. When this signal is triggered we want to emit our own <db:emphasis>clicked</db:emphasis> signal with the color as parameter.</db:para>
</db:section>
<db:section xml:id="the-main-qml-file">
<db:title>The Main QML File</db:title>
<db:para>In our main QML file, we use our <db:code>Cell</db:code> component to create the color picker:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: page
    width: 320; height: 480
    color: &quot;lightgray&quot;

    Text {
        id: helloText
        text: &quot;Hello world!&quot;
        y: 30
        anchors.horizontalCenter: page.horizontalCenter
        font.pointSize: 24; font.bold: true
    }

    Grid {
        id: colorPicker
        x: 4; anchors.bottom: page.bottom; anchors.bottomMargin: 4
        rows: 2; columns: 3; spacing: 3

        Cell { cellColor: &quot;red&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;green&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;blue&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;yellow&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;steelblue&quot;; onClicked: helloText.color = cellColor }
        Cell { cellColor: &quot;black&quot;; onClicked: helloText.color = cellColor }
    }
}
</db:programlisting>
<db:para>We create the color picker by putting 6 cells with different colors in a grid.</db:para>
<db:programlisting language="qml">        Cell { cellColor: &quot;red&quot;; onClicked: helloText.color = cellColor }
</db:programlisting>
<db:para>When the <db:emphasis>clicked</db:emphasis> signal of our cell is triggered, we want to set the color of the text to the <db:emphasis>cellColor</db:emphasis> passed as a parameter. We can react to any signal of our component through a property of the name <db:emphasis>'onSignalName'</db:emphasis> (see <db:link xlink:href="qtqml-syntax-objectattributes.xml#signal-attributes">Signal Attributes</db:link>).</db:para>
</db:section>
</db:section>
</db:article>
