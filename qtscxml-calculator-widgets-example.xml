<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Calculator Example</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A widget-based application that implements the Calculator example presented in the SCXML Specification.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/calculator.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Calculator</db:emphasis> uses Qt SCXML to implement the <db:link xlink:href="http://www.w3.org/TR/scxml/#N11630">Calculator Example</db:link> presented in the SCXML Specification.</db:para>
<db:para>The state machine is specified in the <db:emphasis>statemachine.scxml</db:emphasis> file and compiled into the <db:code>CalculatorStateMachine</db:code> class. The user interface is created using Qt Widgets.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="compiling-the-state-machine">
<db:title>Compiling the State Machine</db:title>
<db:para>We link against the Qt SCXML module by adding the following line to the <db:emphasis>.pro</db:emphasis> file:</db:para>
<db:programlisting language="cpp">QT += widgets scxml
</db:programlisting>
<db:para>We then specify the state machine to compile:</db:para>
<db:programlisting language="cpp">STATECHARTS = ../calculator-common/statemachine.scxml
</db:programlisting>
<db:para>The Qt SCXML Compiler, <db:code>qscxmlc</db:code>, is run automatically to generate <db:emphasis>statemachine.h</db:emphasis> and <db:emphasis>statemachine.cpp</db:emphasis>, and to add them to the <db:code>HEADERS</db:code> and <db:code>SOURCES</db:code> variables for compilation.</db:para>
</db:section>
<db:section xml:id="instantiating-the-state-machine">
<db:title>Instantiating the State Machine</db:title>
<db:para>We instantiate the generated <db:code>CalculatorStateMachine</db:code> class in the <db:emphasis>calculator-widgets.cpp</db:emphasis> file, as follows:</db:para>
<db:programlisting language="cpp">#include &quot;statemachine.h&quot;
#include &quot;mainwindow.h&quot;

#include &amp;lt;QApplication&amp;gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    CalculatorStateMachine machine;
    MainWindow mainWindow(&amp;amp;machine);

    machine.start();
    mainWindow.show();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="connecting-to-active-properties">
<db:title>Connecting to Active Properties</db:title>
<db:para>After instantiating the state machine, we can connect to the active properties of the states, as follows:</db:para>
<db:programlisting language="cpp">    connect(ui-&amp;gt;digit0, &amp;amp;QAbstractButton::clicked, [this] {
        m_machine-&amp;gt;submitEvent(&quot;DIGIT.0&quot;);
    });
    connect(ui-&amp;gt;digit1, &amp;amp;QAbstractButton::clicked, [this] {
        m_machine-&amp;gt;submitEvent(&quot;DIGIT.1&quot;);
    });
    connect(ui-&amp;gt;digit2, &amp;amp;QAbstractButton::clicked, [this] {
        m_machine-&amp;gt;submitEvent(&quot;DIGIT.2&quot;);
    });
</db:programlisting>
<db:para>The state machine can notify other code when events occur:</db:para>
<db:programlisting language="cpp">        &amp;lt;transition event=&quot;DISPLAY.UPDATE&quot;&amp;gt;
            &amp;lt;log label=&quot;'result'&quot; expr=&quot;short_expr==''?res:short_expr&quot; /&amp;gt;
            &amp;lt;send event=&quot;updateDisplay&quot;&amp;gt;
                &amp;lt;param name=&quot;display&quot; expr=&quot;short_expr==''?res:short_expr&quot;/&amp;gt;
            &amp;lt;/send&amp;gt;
        &amp;lt;/transition&amp;gt;
</db:programlisting>
<db:para>We connect to the <db:code>updateDisplay</db:code> event to display the data passed by the events:</db:para>
<db:programlisting language="cpp">    m_machine-&amp;gt;connectToEvent(QLatin1String(&quot;updateDisplay&quot;), this,
                              [this](const QScxmlEvent &amp;amp;event) {
        const QString display = event.data().toMap()
                .value(&quot;display&quot;).toString();
        ui-&amp;gt;display-&amp;gt;setText(display);
    });
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="calculator-widgets/calculator-widgets.cpp">calculator-widgets/calculator-widgets.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calculator-widgets/calculator-widgets.pro">calculator-widgets/calculator-widgets.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calculator-widgets/mainwindow.cpp">calculator-widgets/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calculator-widgets/mainwindow.h">calculator-widgets/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calculator-widgets/mainwindow.ui">calculator-widgets/mainwindow.ui</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
