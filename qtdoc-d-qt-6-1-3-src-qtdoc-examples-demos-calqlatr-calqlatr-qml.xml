<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Demo - Calqlatr</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML app designed for portrait devices that uses custom components, animated with <db:link xlink:href="qml-qt3d-animation-animationcontroller.xml">AnimationController</db:link>, and JavaScript for the application logic.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick
import &quot;content&quot;
import &quot;content/calculator.js&quot; as CalcEngine

Rectangle {
    id: window
    width: 320
    height: 480
    focus: true
    color: &quot;#272822&quot;

    onWidthChanged: controller.reload()
    onHeightChanged: controller.reload()

    function operatorPressed(operator) {
        CalcEngine.operatorPressed(operator)
        numPad.buttonPressed()
    }
    function digitPressed(digit) {
        CalcEngine.digitPressed(digit)
        numPad.buttonPressed()
    }
    function isButtonDisabled(op) {
        return CalcEngine.disabled(op)
    }

    Item {
        id: pad
        width: 180
        NumberPad { id: numPad; y: 10; anchors.horizontalCenter: parent.horizontalCenter }
    }

    AnimationController {
        id: controller
        animation: ParallelAnimation {
            id: anim
            NumberAnimation { target: display; property: &quot;x&quot;; duration: 400; from: -16; to: window.width - display.width; easing.type: Easing.InOutQuad }
            NumberAnimation { target: pad; property: &quot;x&quot;; duration: 400; from: window.width - pad.width; to: 0; easing.type: Easing.InOutQuad }
            SequentialAnimation {
                NumberAnimation { target: pad; property: &quot;scale&quot;; duration: 200; from: 1; to: 0.97; easing.type: Easing.InOutQuad }
                NumberAnimation { target: pad; property: &quot;scale&quot;; duration: 200; from: 0.97; to: 1; easing.type: Easing.InOutQuad }
            }
        }
    }

    Keys.onPressed: {
        if (event.key == Qt.Key_0)
            digitPressed(&quot;0&quot;)
        else if (event.key == Qt.Key_1)
            digitPressed(&quot;1&quot;)
        else if (event.key == Qt.Key_2)
            digitPressed(&quot;2&quot;)
        else if (event.key == Qt.Key_3)
            digitPressed(&quot;3&quot;)
        else if (event.key == Qt.Key_4)
            digitPressed(&quot;4&quot;)
        else if (event.key == Qt.Key_5)
            digitPressed(&quot;5&quot;)
        else if (event.key == Qt.Key_6)
            digitPressed(&quot;6&quot;)
        else if (event.key == Qt.Key_7)
            digitPressed(&quot;7&quot;)
        else if (event.key == Qt.Key_8)
            digitPressed(&quot;8&quot;)
        else if (event.key == Qt.Key_9)
            digitPressed(&quot;9&quot;)
        else if (event.key == Qt.Key_Plus)
            operatorPressed(&quot;+&quot;)
        else if (event.key == Qt.Key_Minus)
            operatorPressed(&quot;−&quot;)
        else if (event.key == Qt.Key_Asterisk)
            operatorPressed(&quot;×&quot;)
        else if (event.key == Qt.Key_Slash)
            operatorPressed(&quot;÷&quot;)
        else if (event.key == Qt.Key_Enter || event.key == Qt.Key_Return)
            operatorPressed(&quot;=&quot;)
        else if (event.key == Qt.Key_Comma || event.key == Qt.Key_Period)
            digitPressed(&quot;.&quot;)
        else if (event.key == Qt.Key_Backspace)
            operatorPressed(&quot;backspace&quot;)
    }

    Display {
        id: display
        x: -16
        width: window.width - pad.width
        height: parent.height

        MouseArea {
            id: mouseInput
            property real startX: 0
            property real oldP: 0
            property bool rewind: false

            anchors {
                bottom: parent.bottom
                left: parent.left
                right: parent.right
            }
            height: 50
            onPositionChanged: {
                var reverse = startX &amp;gt; window.width / 2
                var mx = mapToItem(window, mouseInput.mouseX, mouseInput.mouseY).x
                var p = Math.abs((mx - startX) / (window.width - display.width))
                if (p &amp;lt; oldP)
                    rewind = reverse ? false : true
                else
                    rewind = reverse ? true : false
                controller.progress = reverse ? 1 - p : p
                oldP = p
            }
            onPressed: startX = mapToItem(window, mouseInput.mouseX, mouseInput.mouseY).x
            onReleased: {
                if (rewind)
                    controller.completeToBeginning()
                else
                    controller.completeToEnd()
            }
        }
    }

}

</db:programlisting>
</db:article>
