<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngineProfile QML Type</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Contains settings, scripts, and visited links common to multiple web engine views.</db:para>
<db:para>This type was introduced in QtWebEngine 1.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWebEngine 1.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtWebEngine 1.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In C++:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtwebengine-webengineprofile.xml">WebEngineProfile</db:link> contains settings, scripts, and the list of visited links shared by all views that belong to the profile. As such, profiles can be used to isolate views from each other. A typical use case is a dedicated profile for a 'private browsing' mode.</db:para>
<db:para>Each web engine view has an associated profile. Views that do not have a specific profile set share a common default one.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cachePath-prop">
<db:title>cachePath : string</db:title>
<db:para>The path to the location where the profile's caches are stored, in particular the HTTP cache.</db:para>
<db:para>By default, the caches are stored below <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::CacheLocation</db:link>) in a directory named using <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
</db:section>
<db:section xml:id="httpAcceptLanguage-prop">
<db:title>[since QtWebEngine 1.2] httpAcceptLanguage : string</db:title>
<db:para>The value of the Accept-Language HTTP request-header field.</db:para>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="httpCacheMaximumSize-prop">
<db:title>httpCacheMaximumSize : int</db:title>
<db:para>The maximum size of the HTTP cache. If <db:code>0</db:code>, the size will be controlled automatically by <db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link>. The default value is <db:code>0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#httpCacheType-prop">httpCacheType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="httpCacheType-prop">
<db:title>httpCacheType : enumeration</db:title>
<db:para>This enumeration describes the type of the HTTP cache:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineProfile.MemoryHttpCache</db:para>
</db:td>
<db:td>
<db:para>Uses an in-memory cache. This is the only setting possible if <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#offTheRecord-prop">offTheRecord</db:link> is set or no <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#persistentStoragePath-prop">persistentStoragePath</db:link> is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineProfile.DiskHttpCache</db:para>
</db:td>
<db:td>
<db:para>Uses a disk cache. This is the default value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="httpUserAgent-prop">
<db:title>httpUserAgent : string</db:title>
<db:para>The user-agent string sent with HTTP to identify the browser.</db:para>
</db:section>
<db:section xml:id="offTheRecord-prop">
<db:title>offTheRecord : bool</db:title>
<db:para>Whether the web engine profile is <db:emphasis>off-the-record</db:emphasis>. An off-the-record profile forces cookies, the HTTP cache, and other normally persistent data to be stored only in memory.</db:para>
</db:section>
<db:section xml:id="persistentCookiesPolicy-prop">
<db:title>persistentCookiesPolicy : enumeration</db:title>
<db:para>This enumeration describes the policy of cookie persistency:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineProfile.NoPersistentCookies</db:para>
</db:td>
<db:td>
<db:para>Both session and persistent cookies are stored in memory. This is the only setting possible if <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#offTheRecord-prop">offTheRecord</db:link> is set or no <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#persistentStoragePath-prop">persistentStoragePath</db:link> is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineProfile.AllowPersistentCookies</db:para>
</db:td>
<db:td>
<db:para>Cookies marked persistent are saved to and restored from disk, whereas session cookies are only stored to disk for crash recovery. This is the default setting.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineProfile.ForcePersistentCookies</db:para>
</db:td>
<db:td>
<db:para>Both session and persistent cookies are saved to and restored from disk.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="persistentStoragePath-prop">
<db:title>persistentStoragePath : string</db:title>
<db:para>The path to the location where the persistent data for the browser and web content are stored. Persistent data includes persistent cookies, HTML5 local storage, and visited links.</db:para>
<db:para>By default, the storage is located below <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::DataLocation</db:link>) in a directory named using <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
</db:section>
<db:section xml:id="storageName-prop">
<db:title>storageName : string</db:title>
<db:para>The storage name that is used to create separate subdirectories for each profile that uses the disk for storing persistent data and cache.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#persistentStoragePath-prop">WebEngineProfile::persistentStoragePath</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#cachePath-prop">WebEngineProfile::cachePath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="downloadFinished-signal">
<db:title>downloadFinished(WebEngineDownloadItem <db:emphasis>download</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever downloading stops, because it finished successfully, was cancelled, or was interrupted (for example, because connectivity was lost). The <db:code role="parameter">download</db:code> argument holds the state of the finished download instance.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDownloadFinished</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="downloadRequested-signal">
<db:title>downloadRequested(WebEngineDownloadItem <db:emphasis>download</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a download has been triggered. The <db:code role="parameter">download</db:code> argument holds the state of the download. The download has to be explicitly accepted with <db:link xlink:href="qml-qtwebengine-webenginedownloaditem.xml#accept-method">WebEngineDownloadItem::accept</db:link>() or the download will be cancelled by default.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDownloadRequested</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
