<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngineProfile QML Type</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Contains settings, scripts, and visited links common to multiple web engine views.</db:para>
<db:para>This type was introduced in QtWebEngine 1.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWebEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtWebEngine 1.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtwebengine-webengineprofile.xml">WebEngineProfile</db:link> contains settings, scripts, and the list of visited links shared by all views that belong to the profile.</db:para>
<db:para>Information about visited links is stored together with persistent cookies and other persistent data in a storage determined by the <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link> property. Persistent data is stored in a subdirectory determined by the <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#persistentStoragePath-prop">persistentStoragePath</db:link> property and the cache in a subdirectory determined by the <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#cachePath-prop">cachePath</db:link> property. The <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#httpCacheType-prop">httpCacheType</db:link> property describes the type of the cache: <db:emphasis>in-memory</db:emphasis> or <db:emphasis>on-disk</db:emphasis>. If only the <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link> property is set, the other values are generated automatically based on it. If you specify any of the values manually, you should do it before creating any pages that belong to the profile.</db:para>
<db:para>Profiles can be used to isolate pages from each other. A typical use case is a dedicated <db:emphasis>off-the-record profile</db:emphasis> for a <db:emphasis>private browsing</db:emphasis> mode. An off-the-record profile forces cookies, the HTTP cache, and other normally persistent data to be stored only in memory. The <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#offTheRecord-prop">offTheRecord</db:link> property holds whether a profile is off-the-record.</db:para>
<db:para>Each web engine view has an associated profile. Views that do not have a specific profile set share a common default one.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cachePath-prop">
<db:title>cachePath : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>cachePath</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The path to the location where the profile's caches are stored, in particular the HTTP cache.</db:para>
<db:para>By default, the caches are stored below <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::CacheLocation</db:link>) in a directory named using <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
</db:section>
<db:section xml:id="downloadPath-prop">
<db:title>[since QtWebEngine 1.9] downloadPath : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>downloadPath</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The path to the location where the downloaded files are stored.</db:para>
<db:para>Overrides the default path used for download location.</db:para>
<db:para>If set to an empty string, the default path is restored.</db:para>
<db:note>
<db:para>By default, the download path is <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::DownloadLocation</db:link>.</db:para>
</db:note>
<db:para>This property was introduced in QtWebEngine 1.9.</db:para>
</db:section>
<db:section xml:id="httpAcceptLanguage-prop">
<db:title>[since QtWebEngine 1.2] httpAcceptLanguage : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>httpAcceptLanguage</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The value of the Accept-Language HTTP request-header field.</db:para>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="httpCacheMaximumSize-prop">
<db:title>httpCacheMaximumSize : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>httpCacheMaximumSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The maximum size of the HTTP cache. If <db:code>0</db:code>, the size will be controlled automatically by <db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link>. The default value is <db:code>0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#httpCacheType-prop">httpCacheType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="httpCacheType-prop">
<db:title>httpCacheType : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>httpCacheType</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This enumeration describes the type of the HTTP cache:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineProfile.MemoryHttpCache</db:para>
</db:td>
<db:td>
<db:para>Uses an in-memory cache. This is the only setting possible if <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#offTheRecord-prop">offTheRecord</db:link> is set or no <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link> is available, which is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineProfile.DiskHttpCache</db:para>
</db:td>
<db:td>
<db:para>Uses a disk cache. This is the default value for non off-the-record profile with <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineProfile.NoCache</db:para>
</db:td>
<db:td>
<db:para>Disables caching. (Added in 5.7)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="httpUserAgent-prop">
<db:title>httpUserAgent : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>httpUserAgent</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The user-agent string sent with HTTP to identify the browser.</db:para>
<db:note>
<db:para>On Windows 8.1 and newer, the default user agent will always report &quot;Windows NT 6.2&quot; (Windows 8), unless the application does contain a manifest that declares newer Windows versions as supported.</db:para>
</db:note>
</db:section>
<db:section xml:id="isPushServiceEnabled-prop">
<db:title>[since QtWebEngine 6.5] isPushServiceEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>isPushServiceEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the push messaging service is enabled.</db:para>
<db:note>
<db:para>By default the push messaging service is disabled.</db:para>
</db:note>
<db:note>
<db:para>Qt WebEngine uses the <db:link xlink:href="https://firebase.google.com">Firebase Cloud Messaging (FCM)</db:link> as a browser push service. Therefore, all push messages will go through the Google push service and its respective servers.</db:para>
</db:note>
<db:para>This property was introduced in QtWebEngine 6.5.</db:para>
</db:section>
<db:section xml:id="offTheRecord-prop">
<db:title>offTheRecord : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>offTheRecord</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the web engine profile is <db:emphasis>off-the-record</db:emphasis>. An off-the-record profile forces cookies, the HTTP cache, and other normally persistent data to be stored only in memory. Profile is off-the-record by default.</db:para>
</db:section>
<db:section xml:id="persistentCookiesPolicy-prop">
<db:title>persistentCookiesPolicy : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>persistentCookiesPolicy</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This enumeration describes the policy of cookie persistency:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineProfile.NoPersistentCookies</db:para>
</db:td>
<db:td>
<db:para>Both session and persistent cookies are stored in memory. This is the only setting possible if <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#offTheRecord-prop">offTheRecord</db:link> is set or no <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link> is available, which is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineProfile.AllowPersistentCookies</db:para>
</db:td>
<db:td>
<db:para>Cookies marked persistent are saved to and restored from disk, whereas session cookies are only stored to disk for crash recovery. This is the default value for non off-the-record profile with <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineProfile.ForcePersistentCookies</db:para>
</db:td>
<db:td>
<db:para>Both session and persistent cookies are saved to and restored from disk.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="persistentStoragePath-prop">
<db:title>persistentStoragePath : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>persistentStoragePath</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The path to the location where the persistent data for the browser and web content are stored. Persistent data includes persistent cookies, HTML5 local storage, and visited links.</db:para>
<db:para>By default, the storage is located below <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::AppDataLocation</db:link>) in a directory named using <db:link xlink:href="qml-qtwebengine-webengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
</db:section>
<db:section xml:id="spellCheckEnabled-prop">
<db:title>[since QtWebEngine 1.4] spellCheckEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>spellCheckEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the web engine spell checker is enabled.</db:para>
<db:para>This property was introduced in QtWebEngine 1.4.</db:para>
</db:section>
<db:section xml:id="spellCheckLanguages-prop">
<db:title>[since QtWebEngine 1.4] spellCheckLanguages : list&lt;string&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;string&gt;</db:type>
<db:varname>spellCheckLanguages</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of languages used by the spell checker. Each language should match the name of the <db:code>.bdic</db:code> dictionary. For example, the language <db:code>en-US</db:code> will load the <db:code>en-US.bdic</db:code> dictionary file.</db:para>
<db:para>See the <db:link xlink:href="qtwebengine-features.xml#spellchecker">Spellchecker feature documentation</db:link> for how dictionary files are searched.</db:para>
<db:para>For more information about how to compile <db:code>.bdic</db:code> dictionaries, see the <db:link xlink:href="qtwebengine-webenginewidgets-spellchecker-example.xml">Spellchecker Example</db:link>.</db:para>
<db:para>This property was introduced in QtWebEngine 1.4.</db:para>
</db:section>
<db:section xml:id="storageName-prop">
<db:title>storageName : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>storageName</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The storage name that is used to create separate subdirectories for each profile that uses the disk for storing persistent data and cache.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#persistentStoragePath-prop">WebEngineProfile::persistentStoragePath</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#cachePath-prop">WebEngineProfile::cachePath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userScripts-prop">
<db:title>[read-only] userScripts : WebEngineScriptCollection</db:title>
<db:fieldsynopsis>
<db:type>WebEngineScriptCollection</db:type>
<db:varname>userScripts</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the collection of <db:link xlink:href="qml-qtwebengine-webenginescript.xml">WebEngineScript</db:link> objects that are injected into all pages that share this profile.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="downloadFinished-signal">
<db:title>downloadFinished(WebEngineDownloadRequest <db:emphasis>download</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever downloading stops, because it finished successfully, was cancelled, or was interrupted (for example, because connectivity was lost). The <db:code role="parameter">download</db:code> argument holds the state of the finished download instance.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDownloadFinished</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="downloadRequested-signal">
<db:title>downloadRequested(WebEngineDownloadRequest <db:emphasis>download</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a download has been triggered. The <db:code role="parameter">download</db:code> argument holds the state of the download. The download has to be explicitly accepted with <db:link xlink:href="qml-qtwebengine-webenginedownloadrequest.xml#accept-method">WebEngineDownloadRequest::accept</db:link>() or the download will be cancelled by default.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDownloadRequested</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="presentNotification-signal">
<db:title>[since QtWebEngine 1.9] presentNotification(WebEngineNotification <db:emphasis>notification</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever there is a newly created user notification. The <db:code role="parameter">notification</db:code> argument holds the <db:link xlink:href="qml-qtwebengine-webenginenotification.xml">WebEngineNotification</db:link> instance to query data and interact with.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPresentNotification</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.9.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="clearHttpCache-method">
<db:title>[since QtWebEngine 1.3] void clearHttpCache()</db:title>
<db:para>Removes the profile's cache entries.</db:para>
<db:para>This method was introduced in QtWebEngine 1.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#cachePath-prop">WebEngineProfile::cachePath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
