<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtConcurrent Namespace</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link> namespace provides high-level APIs that make it possible to write multi-threaded programs without using low-level threading primitives.</db:para>
<db:para>This namespace was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtConcurrent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += concurrent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QtConcurrent is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>See the <db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> module documentation for an overview of available functions, or see below for detailed information on each function.</db:para>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="ReduceOption-enum">
<db:title>enum QtConcurrent::ReduceOption</db:title>
<db:enumsynopsis>
<db:enumname>ReduceOption</db:enumname>
<db:enumitem>
<db:enumidentifier>UnorderedReduce</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OrderedReduce</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SequentialReduce</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the order of which results from the map or filter function are passed to the reduce function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtconcurrent.xml">QtConcurrent</db:link></db:emphasis>::UnorderedReduce</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Reduction is done in an arbitrary order.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtconcurrent.xml">QtConcurrent</db:link></db:emphasis>::OrderedReduce</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Reduction is done in the order of the original sequence.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtconcurrent.xml">QtConcurrent</db:link></db:emphasis>::SequentialReduce</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Reduction is done sequentially: only one thread will enter the reduce function at a time. (Parallel reduction might be supported in a future version of Qt Concurrent.)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="run">
<db:title>int QtConcurrent::run(<db:emphasis>Function</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>run</db:methodname>
<db:methodparam>
<db:type>Function</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int run(Function, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">QtConcurrent::run(QThreadPool::globalInstance(), function, ...);
</db:programlisting>
<db:para>Runs <db:code role="parameter">function</db:code> in a separate thread. The thread is taken from the global QThreadPool. Note that <db:code role="parameter">function</db:code> may not run immediately; <db:code role="parameter">function</db:code> will only be run once a thread becomes available.</db:para>
<db:para>T is the same type as the return value of <db:code role="parameter">function</db:code>. Non-void return values can be accessed via the <db:link xlink:href="qfuture.xml#result">QFuture::result</db:link>() function.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qfuture.xml">QFuture</db:link> returned can only be used to query for the running/finished status and the return value of the function. In particular, canceling or pausing can be issued only if the computations behind the future has not been started.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtconcurrentrun.xml">Concurrent Run</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="run-1">
<db:title>[since 5.4] int QtConcurrent::run(<db:emphasis>int *</db:emphasis>, <db:emphasis>Function</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>run</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Function</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int run(int *, Function, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Runs <db:code role="parameter">function</db:code> in a separate thread. The thread is taken from the QThreadPool <db:code role="parameter">pool</db:code>. Note that <db:code role="parameter">function</db:code> may not run immediately; <db:code role="parameter">function</db:code> will only be run once a thread becomes available.</db:para>
<db:para>T is the same type as the return value of <db:code role="parameter">function</db:code>. Non-void return values can be accessed via the <db:link xlink:href="qfuture.xml#result">QFuture::result</db:link>() function.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qfuture.xml">QFuture</db:link> returned can only be used to query for the running/finished status and the return value of the function. In particular, canceling or pausing can be issued only if the computations behind the future has not been started.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtconcurrentrun.xml">Concurrent Run</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
