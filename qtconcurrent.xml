<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtConcurrent Namespace</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link> namespace provides high-level APIs that make it possible to write multi-threaded programs without using low-level threading primitives.</db:para>
<db:para>This namespace was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtConcurrent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += concurrent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QtConcurrent is part of <db:simplelist><db:member>thread</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>See the <db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> module documentation for an overview of available functions, or see below for detailed information on each function.</db:para>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="ReduceOption-enum">
<db:title>enum QtConcurrent::ReduceOption</db:title>
<db:para>This enum specifies the order of which results from the map or filter function are passed to the reduce function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtconcurrent.xml">QtConcurrent</db:link></db:emphasis>::UnorderedReduce</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Reduction is done in an arbitrary order.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtconcurrent.xml">QtConcurrent</db:link></db:emphasis>::OrderedReduce</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Reduction is done in the order of the original sequence.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtconcurrent.xml">QtConcurrent</db:link></db:emphasis>::SequentialReduce</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Reduction is done sequentially: only one thread will enter the reduce function at a time. (Parallel reduction might be supported in a future version of Qt Concurrent.)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="blockingFilter">
<db:title>void QtConcurrent::blockingFilter(int &amp;<db:emphasis>sequence</db:emphasis>, int <db:emphasis>filterFunction</db:emphasis>)</db:title>
<db:para>Calls <db:code role="parameter">filterFunction</db:code> once for each item in <db:code role="parameter">sequence</db:code>. If <db:code role="parameter">filterFunction</db:code> returns <db:code>true</db:code>, the item is kept in <db:code role="parameter">sequence</db:code>; otherwise, the item is removed from <db:code role="parameter">sequence</db:code>.</db:para>
<db:note>
<db:para>This function will block until all items in the sequence have been processed.</db:para>
</db:note>
</db:section>
<db:section xml:id="blockingMap">
<db:title>void QtConcurrent::blockingMap(int &amp;<db:emphasis>sequence</db:emphasis>, int <db:emphasis>function</db:emphasis>)</db:title>
<db:para>Calls <db:code role="parameter">function</db:code> once for each item in <db:code role="parameter">sequence</db:code>. The <db:code role="parameter">function</db:code> is passed a reference to the item, so that any modifications done to the item will appear in <db:code role="parameter">sequence</db:code>.</db:para>
<db:note>
<db:para>This function will block until all items in the sequence have been processed.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtconcurrent.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockingMap-1">
<db:title>void QtConcurrent::blockingMap(int <db:emphasis>begin</db:emphasis>, int <db:emphasis>end</db:emphasis>, int <db:emphasis>function</db:emphasis>)</db:title>
<db:para>Calls <db:code role="parameter">function</db:code> once for each item from <db:code role="parameter">begin</db:code> to <db:code role="parameter">end</db:code>. The <db:code role="parameter">function</db:code> is passed a reference to the item, so that any modifications done to the item will appear in the sequence which the iterators belong to.</db:para>
<db:note>
<db:para>This function will block until the iterator reaches the end of the sequence being processed.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtconcurrent.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter">
<db:title>int QtConcurrent::filter(int &amp;<db:emphasis>sequence</db:emphasis>, int <db:emphasis>filterFunction</db:emphasis>)</db:title>
<db:para>Calls <db:code role="parameter">filterFunction</db:code> once for each item in <db:code role="parameter">sequence</db:code>. If <db:code role="parameter">filterFunction</db:code> returns <db:code>true</db:code>, the item is kept in <db:code role="parameter">sequence</db:code>; otherwise, the item is removed from <db:code role="parameter">sequence</db:code>.</db:para>
</db:section>
<db:section xml:id="map">
<db:title>int QtConcurrent::map(int &amp;<db:emphasis>sequence</db:emphasis>, int <db:emphasis>function</db:emphasis>)</db:title>
<db:para>Calls <db:code role="parameter">function</db:code> once for each item in <db:code role="parameter">sequence</db:code>. The <db:code role="parameter">function</db:code> is passed a reference to the item, so that any modifications done to the item will appear in <db:code role="parameter">sequence</db:code>.</db:para>
</db:section>
<db:section xml:id="map-1">
<db:title>int QtConcurrent::map(int <db:emphasis>begin</db:emphasis>, int <db:emphasis>end</db:emphasis>, int <db:emphasis>function</db:emphasis>)</db:title>
<db:para>Calls <db:code role="parameter">function</db:code> once for each item from <db:code role="parameter">begin</db:code> to <db:code role="parameter">end</db:code>. The <db:code role="parameter">function</db:code> is passed a reference to the item, so that any modifications done to the item will appear in the sequence which the iterators belong to.</db:para>
</db:section>
</db:section>
</db:article>
