<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>JavaScript Expressions in QML Documents</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of where JavaScript expressions are valid in QML documents.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:link xlink:href="qtqml-javascript-hostenvironment.xml">JavaScript Host Environment</db:link> provided by QML can run valid standard JavaScript constructs such as conditional operators, arrays, variable setting, and loops. In addition to the standard JavaScript properties, the <db:link xlink:href="qtqml-javascript-qmlglobalobject.xml">QML Global Object</db:link> includes a number of helper methods that simplify building UIs and interacting with the QML environment.</db:para>
<db:para>The JavaScript environment provided by QML is stricter than that in a web browser. For example, in QML you cannot add to, or modify, members of the JavaScript global object. In regular JavaScript, it is possible to do this accidentally by using a variable without declaring it. In QML this will throw an exception, so all local variables must be explicitly declared. See <db:link xlink:href="qtqml-javascript-hostenvironment.xml#javascript-environment-restrictions">JavaScript Environment Restrictions</db:link> for a complete description of the restrictions on JavaScript code executed from QML.</db:para>
<db:para>Various parts of <db:link xlink:href="qtqml-documents-topic.xml">QML documents</db:link> can contain JavaScript code:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The body of <db:link xlink:href="qtqml-syntax-propertybinding.xml">property bindings</db:link>. These JavaScript expressions describe relationships between QML object <db:link xlink:href="qtqml-syntax-objectattributes.xml#property-attributes">properties</db:link>. When <db:emphasis>dependencies</db:emphasis> of a property change, the property is automatically updated too, according to the specified relationship.</db:para>
</db:listitem>
<db:listitem>
<db:para>The body of <db:link xlink:href="qtqml-syntax-objectattributes.xml#signal-attributes">Signal handlers</db:link>. These JavaScript statements are automatically evaluated whenever a QML object emits the associated signal.</db:para>
</db:listitem>
<db:listitem>
<db:para>The definition of <db:link xlink:href="qtqml-syntax-objectattributes.xml#method-attributes">custom methods</db:link>. JavaScript functions that are defined within the body of a QML object become methods of that object.</db:para>
</db:listitem>
<db:listitem>
<db:para>Standalone <db:link xlink:href="qtqml-javascript-imports.xml">JavaScript resource (.js) files</db:link>. These files are actually separate from QML documents, but they can be imported into QML documents. Functions and variables that are defined within the imported files can be used in property bindings, signal handlers, and custom methods.</db:para>
</db:listitem>
</db:orderedlist>
<db:section xml:id="javascript-in-property-bindings">
<db:title>JavaScript in property bindings</db:title>
<db:para>In the following example, the color property of Rectangle depends on the pressed property of TapHandler. This relationship is described using a conditional expression:</db:para>
<db:programlisting language="qml">import QtQuick 2.12

Rectangle {
    id: colorbutton
    width: 200; height: 80;

    color: inputHandler.pressed ? &quot;steelblue&quot; : &quot;lightsteelblue&quot;

    TapHandler {
        id: inputHandler
    }
}
</db:programlisting>
<db:para>In fact, any JavaScript expression (no matter how complex) may be used in a property binding definition, as long as the result of the expression is a value whose type can be assigned to the property. This includes side effects. However, complex bindings and side effects are discouraged because they can reduce the performance, readability, and maintainability of the code.</db:para>
<db:para>There are two ways to define a property binding: the most common one is shown in the example earlier, in a <db:link xlink:href="qtqml-syntax-objectattributes.xml#value-assignment-on-initialization">property initialization</db:link>. The second (and much rarer) way is to assign the property a function returned from the <db:link xlink:href="qml-qtqml-qt.xml#binding-method">Qt.binding</db:link>() function, from within imperative JavaScript code, as shown below:</db:para>
<db:programlisting language="qml">import QtQuick 2.12

Rectangle {
    id: colorbutton
    width: 200; height: 80;

    color: &quot;red&quot;

    TapHandler {
        id: inputHandler
    }

    Component.onCompleted: {
        color = Qt.binding(function() { return inputHandler.pressed ? &quot;steelblue&quot; : &quot;lightsteelblue&quot; });
    }
}
</db:programlisting>
<db:para>See the <db:link xlink:href="qtqml-syntax-propertybinding.xml">property bindings</db:link> documentation for more information about how to define property bindings, and see the documentation about <db:link xlink:href="qtqml-syntax-propertybinding.xml#creating-property-bindings-from-javascript">Property Assignment versus Property Binding</db:link> for information about how bindings differ from value assignments.</db:para>
</db:section>
<db:section xml:id="javascript-in-signal-handlers">
<db:title>JavaScript in signal handlers</db:title>
<db:para>QML object types can emit signals in reaction to certain events occurring. Those signals can be handled by signal handler functions, which can be defined by clients to implement custom program logic.</db:para>
<db:para>Suppose that a button represented by a Rectangle type has a TapHandler and a Text label. The TapHandler emits its tapped signal when the user presses the button. The clients can react to the signal in the onTapped handler using JavaScript expressions. The QML engine executes these JavaScript expressions defined in the handler as required. Typically, a signal handler is bound to JavaScript expressions to initiate other events or to assign property values.</db:para>
<db:programlisting language="qml">import QtQuick 2.12

Rectangle {
    id: button
    width: 200; height: 80; color: &quot;lightsteelblue&quot;

    TapHandler {
        id: inputHandler
        onTapped: {
            // arbitrary JavaScript expression
            console.log(&quot;Tapped!&quot;)
        }
    }

    Text {
        id: label
        anchors.centerIn: parent
        text: inputHandler.pressed ? &quot;Pressed!&quot; : &quot;Press here!&quot;
    }
}
</db:programlisting>
<db:para>For more details about signals and signal handlers, refer to the following topics:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-syntax-signals.xml">Signal and Handler Event System</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-syntax-objectattributes.xml">QML Object Attributes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="javascript-in-standalone-functions">
<db:title>JavaScript in standalone functions</db:title>
<db:para>Program logic can also be defined in JavaScript functions. These functions can be defined inline in QML documents (as custom methods) or externally in imported JavaScript files.</db:para>
<db:section xml:id="javascript-in-custom-methods">
<db:title>JavaScript in custom methods</db:title>
<db:para>Custom methods can be defined in QML documents and may be called from signal handlers, property bindings, or functions in other QML objects. Such methods are often referred to as <db:emphasis>inline JavaScript functions</db:emphasis> because their implementation is included in the QML object type definition (QML document), instead of in an external JavaScript file.</db:para>
<db:para>An example of an inline custom method is as follows:</db:para>
<db:programlisting language="qml">import QtQuick 2.12

Item {
    function fibonacci(n){
        var arr = [0, 1];
        for (var i = 2; i &lt; n + 1; i++)
            arr.push(arr[i - 2] + arr[i -1]);

        return arr;
    }
    TapHandler {
        onTapped: console.log(fibonacci(10))
    }
}
</db:programlisting>
<db:para>The fibonacci function is run whenever the TapHandler emits a tapped signal.</db:para>
<db:note>
<db:para>The custom methods defined inline in a QML document are exposed to other objects, and therefore inline functions on the root object in a QML component can be invoked by callers outside the component. If this is not desired, the method can be added to a non-root object or, preferably, written in an external JavaScript file.</db:para>
</db:note>
<db:para>See the <db:link xlink:href="qtqml-syntax-objectattributes.xml">QML Object Attributes</db:link> documentation for more information on defining custom methods in QML using JavaScript.</db:para>
</db:section>
<db:section xml:id="functions-defined-in-a-javascript-file">
<db:title>Functions defined in a JavaScript file</db:title>
<db:para>Non-trivial program logic is best separated into a separate JavaScript file. This file can be imported into QML using an import statement, like the QML <db:link xlink:href="qtqml-modules-topic.xml">modules</db:link>.</db:para>
<db:para>For example, the fibonacci() method in the earlier example could be moved into an external file named fib.js, and accessed like this:</db:para>
<db:programlisting language="qml">import QtQuick 2.12
import &quot;fib.js&quot; as MathFunctions

Item {
    TapHandler {
        onTapped: console.log(MathFunctions.fibonacci(10))
    }
}
</db:programlisting>
<db:para>For more information about loading external JavaScript files into QML, read the section about <db:link xlink:href="qtqml-javascript-imports.xml">Importing JavaScript Resources in QML</db:link>.</db:para>
</db:section>
<db:section xml:id="connecting-signals-to-javascript-functions">
<db:title>Connecting signals to JavaScript functions</db:title>
<db:para>QML object types that emit signals also provide default signal handlers for their signals, as described in the <db:link xlink:href="qtqml-javascript-expressions.xml#javascript-in-signal-handlers">previous</db:link> section. Sometimes, however, a client wants to trigger a function defined in a QML object when another QML object emits a signal. Such scenarios can be handled by a signal connection.</db:para>
<db:para>A signal emitted by a QML object may be connected to a JavaScript function by calling the signal's connect() method and passing the JavaScript function as an argument. For example, the following code connects the TapHandler's tapped signal to the jsFunction() in script.js:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">import QtQuick
import &quot;script.js&quot; as MyScript

Item {
    id: item
    width: 200; height: 200

    TapHandler {
        id: inputHandler
    }

    Component.onCompleted: {
        inputHandler.tapped.connect(MyScript.jsFunction)
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:programlisting language="cpp">// script.js

function jsFunction() {
    console.log(&quot;Called JavaScript function!&quot;)
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The jsFunction() is called whenever the TapHandler's tapped signal is emitted.</db:para>
<db:para>See <db:link xlink:href="qtqml-syntax-signals.xml">Connecting Signals to Methods and Signals</db:link> for more information.</db:para>
</db:section>
</db:section>
<db:section xml:id="javascript-in-application-startup-code">
<db:title>JavaScript in application startup code</db:title>
<db:para>It is occasionally necessary to run some imperative code at application (or component instance) startup. While it is tempting to just include the startup script as <db:emphasis>global code</db:emphasis> in an external script file, this can have severe limitations as the QML environment may not have been fully established. For example, some objects might not have been created or some <db:link xlink:href="qtqml-syntax-propertybinding.xml">property bindings</db:link> may not have been established. See <db:link xlink:href="qtqml-javascript-hostenvironment.xml#javascript-environment-restrictions">JavaScript Environment Restrictions</db:link> for the exact limitations of global script code.</db:para>
<db:para>A QML object emits the Component.completed <db:link xlink:href="qtqml-syntax-signals.xml#attached-signal-handlers">attached signal</db:link> when its instantiation is complete. The JavaScript code in the corresponding Component.onCompleted handler runs after the object is instantiated. Thus, the best place to write application startup code is in the Component.onCompleted handler of the top-level object, because this object emits Component.completed when the QML environment is fully established.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    function startupFunction() {
        // ... startup code
    }

    Component.onCompleted: startupFunction();
}
</db:programlisting>
<db:para>Any object in a QML file - including nested objects and nested QML component instances - can use this attached property. If there is more than one onCompleted() handler to execute at startup, they are run sequentially in an undefined order.</db:para>
<db:para>Likewise, every Component emits a <db:link xlink:href="qml-qtqml-component.xml#destruction-signal">destruction</db:link>() signal just before being destroyed.</db:para>
</db:section>
</db:article>
