<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Hello Qt Quick 3D Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates simple instanced drawing.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2020 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;imageinstancetable.h&quot;
#include &amp;lt;math.h&amp;gt;
#include &amp;lt;QMatrix4x4&amp;gt;
#include &amp;lt;QColor&amp;gt;
#include &amp;lt;QImage&amp;gt;
#include &amp;lt;QQmlFile&amp;gt;

ImageInstanceTable::ImageInstanceTable(QQuick3DObject *parent) : QQuick3DInstancing(parent)
{
}

ImageInstanceTable::~ImageInstanceTable()
{
}

int ImageInstanceTable::gridSize() const
{
    return m_gridSize;
}

float ImageInstanceTable::gridSpacing() const
{
    return m_gridSpacing;
}

QString ImageInstanceTable::image() const
{
    return m_imageSource;
}

void ImageInstanceTable::setGridSize(int gridSize)
{
    if (m_gridSize == gridSize)
        return;

    m_gridSize = gridSize;
    emit gridSizeChanged(m_gridSize);
    markDirty();
    m_dirty = true;
}

void ImageInstanceTable::setGridSpacing(float gridSpacing)
{
    if (qFuzzyCompare(m_gridSpacing, gridSpacing))
        return;

    m_gridSpacing = gridSpacing;
    emit gridSpacingChanged(m_gridSpacing);
    markDirty();
    m_dirty = true;
}

void ImageInstanceTable::setImage(QString image)
{
    if (m_imageSource == image)
        return;

    m_imageSource = image;
    emit imageChanged(m_imageSource);
    markDirty();
    m_dirty = true;
}

QByteArray ImageInstanceTable::getInstanceBuffer(int *instanceCount)
{
    if (m_dirty) {
        QImage image(m_imageSource);
        if (image.isNull())
            qWarning() &amp;lt;&amp;lt; &quot;Could not load image&quot; &amp;lt;&amp;lt; m_imageSource;
        m_instanceData.resize(0);
        image = image.scaledToWidth(m_gridSize, Qt::SmoothTransformation);
        int instanceNumber = 0;
        for (int blockX = 0; blockX &amp;lt; image.width(); ++blockX) {
            float xPos = m_gridSpacing * (blockX - m_gridSize/2);
            for (int blockY = 0; blockY &amp;lt; image.width(); ++blockY) {
                QColor color = image.pixel(blockX, blockY);
                float yPos = -m_gridSpacing * (blockY - m_gridSize/2);

                float zPos = 10 * m_gridSpacing * (color.lightnessF() - 1.0);

                auto entry = calculateTableEntry({xPos,yPos,zPos}, {1.0, 1.0, 1.0}, {0,0,0}, color, {});
                m_instanceData.append(reinterpret_cast&amp;lt;const char *&amp;gt;(&amp;amp;entry), sizeof(entry));
                instanceNumber++;
            }
        }
        m_instanceCount = instanceNumber;
        m_dirty = false;
    }
    if (instanceCount)
        *instanceCount = m_instanceCount;

    return m_instanceData;
}

</db:programlisting>
</db:article>
