<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Settings Editor Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Settings Editor example shows how Qt's standard settings support is used in an application by providing an editor that enables the user to view the settings for installed applications, and modify those that can be edited.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;locationdialog.h&quot;
#include &quot;mainwindow.h&quot;
#include &quot;settingstree.h&quot;

MainWindow::MainWindow()
{
    settingsTree = new SettingsTree;
    setCentralWidget(settingsTree);

    locationDialog = 0;

    createActions();
    createMenus();

    autoRefreshAct-&gt;setChecked(true);
    fallbacksAct-&gt;setChecked(true);

    setWindowTitle(tr(&quot;Settings Editor&quot;));
    resize(500, 600);
}

void MainWindow::openSettings()
{
    if (!locationDialog)
        locationDialog = new LocationDialog(this);

    if (locationDialog-&gt;exec()) {
        QSettings *settings = new QSettings(locationDialog-&gt;format(),
                                            locationDialog-&gt;scope(),
                                            locationDialog-&gt;organization(),
                                            locationDialog-&gt;application());
        setSettingsObject(settings);
        fallbacksAct-&gt;setEnabled(true);
    }
}

void MainWindow::openIniFile()
{
    QString fileName = QFileDialog::getOpenFileName(this, tr(&quot;Open INI File&quot;),
                               &quot;&quot;, tr(&quot;INI Files (*.ini *.conf)&quot;));
    if (!fileName.isEmpty()) {
        QSettings *settings = new QSettings(fileName, QSettings::IniFormat);
        setSettingsObject(settings);
        fallbacksAct-&gt;setEnabled(false);
    }
}

void MainWindow::openPropertyList()
{
    QString fileName = QFileDialog::getOpenFileName(this,
                               tr(&quot;Open Property List&quot;),
                               &quot;&quot;, tr(&quot;Property List Files (*.plist)&quot;));
    if (!fileName.isEmpty()) {
        QSettings *settings = new QSettings(fileName, QSettings::NativeFormat);
        setSettingsObject(settings);
        fallbacksAct-&gt;setEnabled(false);
    }
}

void MainWindow::openRegistryPath()
{
    QString path = QInputDialog::getText(this, tr(&quot;Open Registry Path&quot;),
                           tr(&quot;Enter the path in the Windows registry:&quot;),
                           QLineEdit::Normal, &quot;HKEY_CURRENT_USER\\&quot;);
    if (!path.isEmpty()) {
        QSettings *settings = new QSettings(path, QSettings::NativeFormat);
        setSettingsObject(settings);
        fallbacksAct-&gt;setEnabled(false);
    }
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Settings Editor&quot;),
            tr(&quot;The &lt;b&gt;Settings Editor&lt;/b&gt; example shows how to access &quot;
               &quot;application settings using Qt.&quot;));
}

void MainWindow::createActions()
{
    openSettingsAct = new QAction(tr(&quot;&amp;Open Application Settings...&quot;), this);
    openSettingsAct-&gt;setShortcuts(QKeySequence::Open);
    connect(openSettingsAct, SIGNAL(triggered()), this, SLOT(openSettings()));

    openIniFileAct = new QAction(tr(&quot;Open I&amp;NI File...&quot;), this);
    openIniFileAct-&gt;setShortcut(tr(&quot;Ctrl+N&quot;));
    connect(openIniFileAct, SIGNAL(triggered()), this, SLOT(openIniFile()));

    openPropertyListAct = new QAction(tr(&quot;Open Mac &amp;Property List...&quot;), this);
    openPropertyListAct-&gt;setShortcut(tr(&quot;Ctrl+P&quot;));
    connect(openPropertyListAct, SIGNAL(triggered()),
            this, SLOT(openPropertyList()));

    openRegistryPathAct = new QAction(tr(&quot;Open Windows &amp;Registry Path...&quot;),
                                      this);
    openRegistryPathAct-&gt;setShortcut(tr(&quot;Ctrl+G&quot;));
    connect(openRegistryPathAct, SIGNAL(triggered()),
            this, SLOT(openRegistryPath()));

    refreshAct = new QAction(tr(&quot;&amp;Refresh&quot;), this);
    refreshAct-&gt;setShortcut(tr(&quot;Ctrl+R&quot;));
    refreshAct-&gt;setEnabled(false);
    connect(refreshAct, SIGNAL(triggered()), settingsTree, SLOT(refresh()));

    exitAct = new QAction(tr(&quot;E&amp;xit&quot;), this);
    exitAct-&gt;setShortcuts(QKeySequence::Quit);
    connect(exitAct, SIGNAL(triggered()), this, SLOT(close()));

    autoRefreshAct = new QAction(tr(&quot;&amp;Auto-Refresh&quot;), this);
    autoRefreshAct-&gt;setShortcut(tr(&quot;Ctrl+A&quot;));
    autoRefreshAct-&gt;setCheckable(true);
    autoRefreshAct-&gt;setEnabled(false);
    connect(autoRefreshAct, SIGNAL(triggered(bool)),
            settingsTree, SLOT(setAutoRefresh(bool)));
    connect(autoRefreshAct, SIGNAL(triggered(bool)),
            refreshAct, SLOT(setDisabled(bool)));

    fallbacksAct = new QAction(tr(&quot;&amp;Fallbacks&quot;), this);
    fallbacksAct-&gt;setShortcut(tr(&quot;Ctrl+F&quot;));
    fallbacksAct-&gt;setCheckable(true);
    fallbacksAct-&gt;setEnabled(false);
    connect(fallbacksAct, SIGNAL(triggered(bool)),
            settingsTree, SLOT(setFallbacksEnabled(bool)));

    aboutAct = new QAction(tr(&quot;&amp;About&quot;), this);
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));

    aboutQtAct = new QAction(tr(&quot;About &amp;Qt&quot;), this);
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));

#ifndef Q_OS_MAC
    openPropertyListAct-&gt;setEnabled(false);
#endif
#ifndef Q_OS_WIN
    openRegistryPathAct-&gt;setEnabled(false);
#endif
}

void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(openSettingsAct);
    fileMenu-&gt;addAction(openIniFileAct);
    fileMenu-&gt;addAction(openPropertyListAct);
    fileMenu-&gt;addAction(openRegistryPathAct);
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(refreshAct);
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(exitAct);

    optionsMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Options&quot;));
    optionsMenu-&gt;addAction(autoRefreshAct);
    optionsMenu-&gt;addAction(fallbacksAct);

    menuBar()-&gt;addSeparator();

    helpMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Help&quot;));
    helpMenu-&gt;addAction(aboutAct);
    helpMenu-&gt;addAction(aboutQtAct);
}

void MainWindow::setSettingsObject(QSettings *settings)
{
    settings-&gt;setFallbacksEnabled(fallbacksAct-&gt;isChecked());
    settingsTree-&gt;setSettingsObject(settings);

    refreshAct-&gt;setEnabled(true);
    autoRefreshAct-&gt;setEnabled(true);

    QString niceName = settings-&gt;fileName();
    niceName.replace(&quot;\\&quot;, &quot;/&quot;);
    int pos = niceName.lastIndexOf(&quot;/&quot;);
    if (pos != -1)
        niceName.remove(0, pos + 1);

    if (!settings-&gt;isWritable())
        niceName = tr(&quot;%1 (read only)&quot;).arg(niceName);

    setWindowTitle(tr(&quot;%1 - %2&quot;).arg(niceName).arg(tr(&quot;Settings Editor&quot;)));
}

</db:programlisting>
</db:article>
