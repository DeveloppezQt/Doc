<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics - Simple Example</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates setting up a simple physics scene.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/simple-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example gives an introductory overview of the basic Quick 3D Physics features by going through the code of a simple example. Note that this introduction assumes a familiarity with the Qt Quick 3D module.</db:para>
<db:section xml:id="setup">
<db:title>Setup</db:title>
<db:para>The whole example is contained and set up in the <db:emphasis>main.qml</db:emphasis> file. Let's first look at the object that creates the physical world. This node is called <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml">PhysicsWorld</db:link>:</db:para>
<db:programlisting language="qml">PhysicsWorld {
    scene: viewport.scene
}
</db:programlisting>
<db:para>We set the <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml#scene-prop">scene</db:link> property to the scene of our <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>. The <db:code>scene</db:code> property defines where the simulation will look for physics nodes to simulate. Any physics nodes placed outside of the scene node will not be part of the simulation.</db:para>
</db:section>
<db:section xml:id="scene">
<db:title>Scene</db:title>
<db:para>Let's have a look at the scene.</db:para>
<db:programlisting language="qml">View3D {
    id: viewport
    anchors.fill: parent

    environment: SceneEnvironment {
        clearColor: &quot;#d6dbdf&quot;
        backgroundMode: SceneEnvironment.Color
    }

    PerspectiveCamera {
        position: Qt.vector3d(-200, 100, 500)
        eulerRotation: Qt.vector3d(-20, -20, 0)
        clipFar: 5000
        clipNear: 1
    }

    DirectionalLight {
        eulerRotation.x: -45
        eulerRotation.y: 45
        castsShadow: true
        brightness: 1
        shadowFactor: 100
    }

    StaticRigidBody {
        position: Qt.vector3d(0, -100, 0)
        eulerRotation: Qt.vector3d(-90, 0, 0)
        collisionShapes: PlaneShape {}
        Model {
            source: &quot;#Rectangle&quot;
            scale: Qt.vector3d(10, 10, 1)
            materials: DefaultMaterial {
                diffuseColor: &quot;green&quot;
            }
            castsShadows: false
            receivesShadows: true
        }
    }

    DynamicRigidBody {
        position: Qt.vector3d(-100, 100, 0)
        collisionShapes: BoxShape {
            id: boxShape
        }
        Model {
            source: &quot;#Cube&quot;
            materials: PrincipledMaterial {
                baseColor: &quot;yellow&quot;
            }
        }
    }

    DynamicRigidBody {
        position: Qt.vector3d(0, 100, 0)
        collisionShapes: SphereShape {
            id: sphereShape
        }
        Model {
            source: &quot;#Sphere&quot;
            materials: PrincipledMaterial {
                baseColor: &quot;blue&quot;
            }
        }
    }

    DynamicRigidBody {
        position: Qt.vector3d(75, 200, 0)
        collisionShapes: CapsuleShape {
            id: capsuleShape
        }

        Model {
            geometry: CapsuleGeometry {}
            materials: PrincipledMaterial {
                baseColor: &quot;red&quot;
            }
        }
    }
}
</db:programlisting>
<db:para>Our scene is just a <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> since we want to draw our physical objects. It contains a <db:link xlink:href="qml-qtquick3d-perspectivecamera.xml">PerspectiveCamera</db:link> and a <db:link xlink:href="qml-qtquick3d-directionallight.xml">DirectionalLight</db:link> for rendering, but more importantly it contains a <db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link> and three <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> nodes. In physics, a rigid body is a non-deformable, solid body with uniform density. We have two types of rigid bodies available; <db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link> and <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link>. A <db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link> is a QML node which contains a static (immovable) rigid body. It is technically possible to move the body but it will incur a performance penalty. A <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> on the other hand is used for objects that can move. A <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> has a <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> property, when it is set to true the rigid body will not be influenced by external forces and can be controlled from scripts and animations. For instance a football would not be kinematic but an elevator or a moving platform typically would. This also means that if you update the <db:code>position</db:code> property of the football it would not move to that position whereas the elevator would.</db:para>
<db:para>To be able to interact with other physical objects the <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#collisionShapes-prop">collisionShapes</db:link> property needs to be set. The <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#collisionShapes-prop">collisionShapes</db:link> property is a list that can contain one or more shapes and will act as one rigid unit combined. You can position and rotate these shapes in relation to each other. Note that plane, triangle mesh and heightmap shapes only work with dynamic bodies if the body is kinematic.</db:para>
</db:section>
<db:section xml:id="shapes">
<db:title>Shapes</db:title>
<db:para>Our scene contains four physical objects (plane, box, ball, capsule). We will go through them one at a time.</db:para>
<db:section xml:id="plane">
<db:title>Plane</db:title>
<db:programlisting language="qml">StaticRigidBody {
    position: Qt.vector3d(0, -100, 0)
    eulerRotation: Qt.vector3d(-90, 0, 0)
    collisionShapes: PlaneShape {}
    Model {
        source: &quot;#Rectangle&quot;
        scale: Qt.vector3d(10, 10, 1)
        materials: DefaultMaterial {
            diffuseColor: &quot;green&quot;
        }
        castsShadows: false
        receivesShadows: true
    }
}
</db:programlisting>
<db:para>We create a plane by making a <db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link> node. In this node we set the <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#collisionShapes-prop">collisionShapes</db:link> property to contain a <db:link xlink:href="qml-qtquick3d-physics-planeshape.xml">PlaneShape</db:link>. Planes divide space into &quot;above&quot; and &quot;below&quot; them. Everything &quot;below&quot; the plane will collide with it and be pushed above it. The Plane lies on the YZ plane with &quot;above&quot; pointing towards positive X. We put a Model inside our <db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link> node to render the plane. This is a common pattern which makes sure that the model also moves and rotates in the same way when the physical object interacts in the scene. Since we want the plane to lie on the XY plane we rotate it using the <db:code>eulerRotation</db:code> property. We rotate the model in a similar way.</db:para>
</db:section>
<db:section xml:id="box">
<db:title>Box</db:title>
<db:programlisting language="qml">DynamicRigidBody {
    position: Qt.vector3d(-100, 100, 0)
    collisionShapes: BoxShape {
        id: boxShape
    }
    Model {
        source: &quot;#Cube&quot;
        materials: PrincipledMaterial {
            baseColor: &quot;yellow&quot;
        }
    }
}
</db:programlisting>
<db:para>We create a sphere by making a <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> node and a single <db:link xlink:href="qml-qtquick3d-physics-boxshape.xml">BoxShape</db:link> in <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#collisionShapes-prop">collisionShapes</db:link>. Since this is a dynamic node the box will interact with the scene by colliding and moving like a free object. Since the cube model is a hundred times bigger than a unit cube we need to scale it accordingly. Since this is a dynamic body and thus have a physical weight we set the <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#density-prop">density</db:link> property.</db:para>
</db:section>
<db:section xml:id="sphere">
<db:title>Sphere</db:title>
<db:programlisting language="qml">DynamicRigidBody {
    position: Qt.vector3d(0, 100, 0)
    collisionShapes: SphereShape {
        id: sphereShape
    }
    Model {
        source: &quot;#Sphere&quot;
        materials: PrincipledMaterial {
            baseColor: &quot;blue&quot;
        }
    }
}
</db:programlisting>
<db:para>We create a sphere by making a <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> node and a single <db:link xlink:href="qml-qtquick3d-physics-sphereshape.xml">SphereShape</db:link> in <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#collisionShapes-prop">collisionShapes</db:link>.</db:para>
</db:section>
<db:section xml:id="capsule">
<db:title>Capsule</db:title>
<db:programlisting language="qml">DynamicRigidBody {
    position: Qt.vector3d(75, 200, 0)
    collisionShapes: CapsuleShape {
        id: capsuleShape
    }

    Model {
        geometry: CapsuleGeometry {}
        materials: PrincipledMaterial {
            baseColor: &quot;red&quot;
        }
    }
}
</db:programlisting>
<db:para>We create a capsule by making a <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> node and a single <db:link xlink:href="qml-qtquick3d-physics-capsuleshape.xml">CapsuleShape</db:link> in <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#collisionShapes-prop">collisionShapes</db:link>. We build a capsule model by using the built-in CapsuleGeometry provided by Qt Quick 3D Physics.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="simple/CMakeLists.txt">simple/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simple/main.cpp">simple/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simple/main.qml">simple/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simple/qml.qrc">simple/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simple/simple.pro">simple/simple.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
