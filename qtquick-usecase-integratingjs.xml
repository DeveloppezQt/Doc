<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Use Case - Integrating JavaScript in QML</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to integrate JavaScript code in QML applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>JavaScript code can be easily integrated into QML to provide UI logic, imperative control, or other benefits.</db:para>
<db:section xml:id="using-javascript-expressions-for-property-values">
<db:title>Using JavaScript Expressions for Property Values</db:title>
<db:para>JavaScript expressions can be used in QML as bindings. For example:</db:para>
<db:programlisting language="cpp">Item {
    width: Math.random()
    height: width &amp;lt; 100 ? 100 : (width + 50) /  2
}
</db:programlisting>
<db:para>Note that function calls, like Math.random(), will not be revaluated unless their arguments change. So binding to Math.random() will be one random number and not revaluated, but if the width is changed in some other manner, the height binding will be reevaluated to take that into account.</db:para>
</db:section>
<db:section xml:id="adding-javascript-functions-in-qml">
<db:title>Adding JavaScript Functions in QML</db:title>
<db:para>JavaScript functions can be declared on QML items, like in the below example. This allows you to call the method using the item id.</db:para>
<db:programlisting language="qml">import QtQuick 2.3

Item {
    id: container
    width: 320
    height: 480

    function randomNumber() {
        return Math.random() * 360;
    }

    function getNumber() {
        return container.randomNumber();
    }

    MouseArea {
        anchors.fill: parent
        // This line uses the JS function from the item
        onClicked: rectangle.rotation = container.getNumber();
    }

    Rectangle {
        color: &quot;#272822&quot;
        width: 320
        height: 480
    }

    Rectangle {
        id: rectangle
        anchors.centerIn: parent
        width: 160
        height: 160
        color: &quot;green&quot;
        Behavior on rotation { RotationAnimation { direction: RotationAnimation.Clockwise } }
    }

}
</db:programlisting>
</db:section>
<db:section xml:id="using-javascript-files">
<db:title>Using JavaScript Files</db:title>
<db:para>JavaScript files can be used for abstracting out logic from QML files. To do this, first place your functions inside a .js file like in the example shown.</db:para>
<db:programlisting language="cpp">// myscript.js
function getRandom(previousValue) {
    return Math.floor(previousValue + Math.random() * 90) % 360;
}
</db:programlisting>
<db:para>Then import the file into any .qml file that needs to use the functions, like the example QML file below.</db:para>
<db:programlisting language="qml">import QtQuick 2.3
import &quot;myscript.js&quot; as Logic

Item {
    width: 320
    height: 480

    Rectangle {
        color: &quot;#272822&quot;
        width: 320
        height: 480
    }

    MouseArea {
        anchors.fill: parent
        // This line uses the JS function from the separate JS file
        onClicked: rectangle.rotation = Logic.getRandom(rectangle.rotation);
    }

    Rectangle {
        id: rectangle
        anchors.centerIn: parent
        width: 160
        height: 160
        color: &quot;green&quot;
        Behavior on rotation { RotationAnimation { direction: RotationAnimation.Clockwise } }
    }

}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-uses-integratingjs.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>For further details on the JavaScript engine used by QML, as well as the difference from browser JS, see the full documentation on <db:link xlink:href="qtqml-javascript-expressions.xml">JavaScript Expressions in QML Documents</db:link>.</db:para>
</db:section>
</db:article>
