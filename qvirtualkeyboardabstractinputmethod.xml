<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVirtualKeyboardAbstractInputMethod Class</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>The base class for input methods.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVirtualKeyboardAbstractInputMethod</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS VirtualKeyboard)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::VirtualKeyboard)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += virtualkeyboard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVirtualKeyboardAbstractInputMethod is part of <db:simplelist><db:member>qtvirtualkeyboard-cpp-for-devs</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use this class if you want to implement a custom input method using C/C++ language.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVirtualKeyboardAbstractInputMethod-1">
<db:title>[explicit] QVirtualKeyboardAbstractInputMethod::QVirtualKeyboardAbstractInputMethod(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QVirtualKeyboardAbstractInputMethod</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVirtualKeyboardAbstractInputMethod(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an input method with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QVirtualKeyboardAbstractInputMethod">
<db:title>[virtual] QVirtualKeyboardAbstractInputMethod::~QVirtualKeyboardAbstractInputMethod()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QVirtualKeyboardAbstractInputMethod</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QVirtualKeyboardAbstractInputMethod()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the input method and frees all allocated resources.</db:para>
</db:section>
<db:section xml:id="clearInputMode">
<db:title>[virtual, since QtQuick.VirtualKeyboard 6.1] void QVirtualKeyboardAbstractInputMethod::clearInputMode()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>clearInputMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearInputMode()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears input mode.</db:para>
<db:para>This method is called by the virtual keyboard when this input method is being replaced by another input method. It should clear the operations performed by <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#setInputMode">setInputMode</db:link>() method, for example, to disconnect signal handlers from the virtual keyboard or free up resources.</db:para>
<db:para>The input mode may be reactivated by calling <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#setInputMode">setInputMode</db:link>(). However, note that the calls to setInputMethod() and clearInputMethod() are not in balance. Thus, for example, setInputMethod() may be called multiple times without matching calls to clearInputMethod().</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 6.1.</db:para>
</db:section>
<db:section xml:id="clickPreeditText">
<db:title>[virtual, since QtQuick.VirtualKeyboard 2.4] bool QVirtualKeyboardAbstractInputMethod::clickPreeditText(int <db:emphasis>cursorPosition</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>clickPreeditText</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>cursorPosition</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool clickPreeditText(int cursorPosition)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Called when the user clicks on pre-edit text at <db:code role="parameter">cursorPosition</db:code>.</db:para>
<db:para>The function should return <db:code>true</db:code> if it handles the event. Otherwise the input falls back to <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#reselect">reselect</db:link>() for further processing.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 2.4.</db:para>
</db:section>
<db:section xml:id="inputContext">
<db:title>QVirtualKeyboardInputContext *QVirtualKeyboardAbstractInputMethod::inputContext() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVirtualKeyboardInputContext *</db:type>
<db:methodname>inputContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVirtualKeyboardInputContext * inputContext() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the input context associated with the input method. This method returns <db:code>NULL</db:code> if the input method is not active.</db:para>
</db:section>
<db:section xml:id="inputEngine">
<db:title>QVirtualKeyboardInputEngine *QVirtualKeyboardAbstractInputMethod::inputEngine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVirtualKeyboardInputEngine *</db:type>
<db:methodname>inputEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVirtualKeyboardInputEngine * inputEngine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the input engine associated with the input method. This method returns <db:code>NULL</db:code> if the input method is not active.</db:para>
</db:section>
<db:section xml:id="inputModes">
<db:title>[pure virtual] QList&lt;QVirtualKeyboardInputEngine::InputMode&gt; QVirtualKeyboardAbstractInputMethod::inputModes(const QString &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QList&lt;QVirtualKeyboardInputEngine::InputMode&gt;</db:type>
<db:methodname>inputModes</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QVirtualKeyboardInputEngine::InputMode&gt; inputModes(const QString &amp;locale) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of input modes for <db:code role="parameter">locale</db:code>.</db:para>
</db:section>
<db:section xml:id="keyEvent">
<db:title>[pure virtual] bool QVirtualKeyboardAbstractInputMethod::keyEvent(Qt::Key <db:emphasis>key</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>keyEvent</db:methodname>
<db:methodparam>
<db:type>Qt::Key</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::KeyboardModifiers</db:type>
<db:parameter>modifiers</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool keyEvent(Qt::Key key, const QString &amp;text, Qt::KeyboardModifiers modifiers) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The purpose of this method is to handle the key events generated by the the input engine.</db:para>
<db:para>The <db:code role="parameter">key</db:code> parameter specifies the code of the key to handle. The key code does not distinguish between capital and non-capital letters. The <db:code role="parameter">text</db:code> parameter contains the Unicode text for the key. The <db:code role="parameter">modifiers</db:code> parameter contains the key modifiers that apply to key.</db:para>
<db:para>This method returns <db:code>true</db:code> if the key event was successfully handled. If the return value is <db:code>false</db:code>, the key event is redirected to the default input method for further processing.</db:para>
</db:section>
<db:section xml:id="patternRecognitionModes">
<db:title>[virtual, since QtQuick.VirtualKeyboard 2.0] QList&lt;QVirtualKeyboardInputEngine::PatternRecognitionMode&gt; QVirtualKeyboardAbstractInputMethod::patternRecognitionModes() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QVirtualKeyboardInputEngine::PatternRecognitionMode&gt;</db:type>
<db:methodname>patternRecognitionModes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QVirtualKeyboardInputEngine::PatternRecognitionMode&gt; patternRecognitionModes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns list of supported pattern recognition modes.</db:para>
<db:para>This method is called by the input engine to query the list of supported pattern recognition modes.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="reselect">
<db:title>[virtual, since QtQuick.VirtualKeyboard 2.0] bool QVirtualKeyboardAbstractInputMethod::reselect(int <db:emphasis>cursorPosition</db:emphasis>, const QVirtualKeyboardInputEngine::ReselectFlags &amp;<db:emphasis>reselectFlags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>reselect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>cursorPosition</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVirtualKeyboardInputEngine::ReselectFlags &amp;</db:type>
<db:parameter>reselectFlags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool reselect(int cursorPosition, const QVirtualKeyboardInputEngine::ReselectFlags &amp;reselectFlags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function attempts to reselect a word located at the <db:code role="parameter">cursorPosition</db:code>. The <db:code role="parameter">reselectFlags</db:code> define the rules for how the word should be selected in relation to the cursor position.</db:para>
<db:para>The function returns <db:code>true</db:code> if the word was successfully reselected.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>[virtual] void QVirtualKeyboardAbstractInputMethod::reset()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is called by the input engine when the input method needs to be reset. The input method must reset its internal state only. The main difference to the <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#update">update</db:link>() method is that reset() modifies only the input method state, i.e. it must not modify the input context.</db:para>
</db:section>
<db:section xml:id="selectionListActiveItemChanged">
<db:title>void QVirtualKeyboardAbstractInputMethod::selectionListActiveItemChanged(QVirtualKeyboardSelectionListModel::Type <db:emphasis>type</db:emphasis>, int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectionListActiveItemChanged</db:methodname>
<db:methodparam>
<db:type>QVirtualKeyboardSelectionListModel::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionListActiveItemChanged(QVirtualKeyboardSelectionListModel::Type type, int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The input method emits this signal when the current <db:code role="parameter">index</db:code> has changed in the selection list identified by <db:code role="parameter">type</db:code>.</db:para>
</db:section>
<db:section xml:id="selectionListChanged">
<db:title>void QVirtualKeyboardAbstractInputMethod::selectionListChanged(QVirtualKeyboardSelectionListModel::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectionListChanged</db:methodname>
<db:methodparam>
<db:type>QVirtualKeyboardSelectionListModel::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionListChanged(QVirtualKeyboardSelectionListModel::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The input method emits this signal when the contents of the selection list has changed. The <db:code role="parameter">type</db:code> parameter specifies which selection list has changed.</db:para>
</db:section>
<db:section xml:id="selectionListData">
<db:title>[virtual] QVariant QVirtualKeyboardAbstractInputMethod::selectionListData(QVirtualKeyboardSelectionListModel::Type <db:emphasis>type</db:emphasis>, int <db:emphasis>index</db:emphasis>, QVirtualKeyboardSelectionListModel::Role <db:emphasis>role</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>selectionListData</db:methodname>
<db:methodparam>
<db:type>QVirtualKeyboardSelectionListModel::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVirtualKeyboardSelectionListModel::Role</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant selectionListData(QVirtualKeyboardSelectionListModel::Type type, int index, QVirtualKeyboardSelectionListModel::Role role)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns item data for the selection list identified by <db:code role="parameter">type</db:code>. The <db:code role="parameter">role</db:code> parameter specifies which data is requested. The <db:code role="parameter">index</db:code> parameter is a zero based index into the list.</db:para>
</db:section>
<db:section xml:id="selectionListItemCount">
<db:title>[virtual] int QVirtualKeyboardAbstractInputMethod::selectionListItemCount(QVirtualKeyboardSelectionListModel::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>int</db:type>
<db:methodname>selectionListItemCount</db:methodname>
<db:methodparam>
<db:type>QVirtualKeyboardSelectionListModel::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int selectionListItemCount(QVirtualKeyboardSelectionListModel::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of items in the selection list identified by <db:code role="parameter">type</db:code>.</db:para>
</db:section>
<db:section xml:id="selectionListItemSelected">
<db:title>[virtual] void QVirtualKeyboardAbstractInputMethod::selectionListItemSelected(QVirtualKeyboardSelectionListModel::Type <db:emphasis>type</db:emphasis>, int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>selectionListItemSelected</db:methodname>
<db:methodparam>
<db:type>QVirtualKeyboardSelectionListModel::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionListItemSelected(QVirtualKeyboardSelectionListModel::Type type, int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is called when an item at <db:code role="parameter">index</db:code> has been selected by the user. The selection list is identified by the <db:code role="parameter">type</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="selectionListRemoveItem">
<db:title>[virtual] bool QVirtualKeyboardAbstractInputMethod::selectionListRemoveItem(QVirtualKeyboardSelectionListModel::Type <db:emphasis>type</db:emphasis>, int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>selectionListRemoveItem</db:methodname>
<db:methodparam>
<db:type>QVirtualKeyboardSelectionListModel::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool selectionListRemoveItem(QVirtualKeyboardSelectionListModel::Type type, int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is called when an item at <db:code role="parameter">index</db:code> must be removed from dictionary. The selection list is identified by the <db:code role="parameter">type</db:code> parameter. The function returns <db:code>true</db:code> if the word was successfully removed.</db:para>
</db:section>
<db:section xml:id="selectionLists">
<db:title>[virtual] QList&lt;QVirtualKeyboardSelectionListModel::Type&gt; QVirtualKeyboardAbstractInputMethod::selectionLists()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QList&lt;QVirtualKeyboardSelectionListModel::Type&gt;</db:type>
<db:methodname>selectionLists</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QVirtualKeyboardSelectionListModel::Type&gt; selectionLists()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of selection lists used by this input method.</db:para>
<db:para>This method is called by input engine when the input method is being activated and every time the input method hints are updated. The input method can reserve selection lists by returning the desired selection list types.</db:para>
<db:para>The input method may request the input engine to update the selection lists at any time by emitting <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#selectionListsChanged">selectionListsChanged</db:link>() signal. This signal will trigger a call to this method, allowing the input method to update the selection list types.</db:para>
</db:section>
<db:section xml:id="selectionListsChanged">
<db:title>[since QtQuick.VirtualKeyboard 2.2] void QVirtualKeyboardAbstractInputMethod::selectionListsChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectionListsChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionListsChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The input method emits this signal when the selection list types have changed. This signal will trigger a call to <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#selectionLists">selectionLists</db:link>() method, allowing the input method to update the selection list types.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 2.2.</db:para>
</db:section>
<db:section xml:id="setInputMode">
<db:title>[pure virtual] bool QVirtualKeyboardAbstractInputMethod::setInputMode(const QString &amp;<db:emphasis>locale</db:emphasis>, QVirtualKeyboardInputEngine::InputMode <db:emphasis>inputMode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setInputMode</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVirtualKeyboardInputEngine::InputMode</db:type>
<db:parameter>inputMode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setInputMode(const QString &amp;locale, QVirtualKeyboardInputEngine::InputMode inputMode) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">inputMode</db:code> and <db:code role="parameter">locale</db:code> for this input method. Returns <db:code>true</db:code> if successful.</db:para>
</db:section>
<db:section xml:id="setTextCase">
<db:title>[pure virtual] bool QVirtualKeyboardAbstractInputMethod::setTextCase(QVirtualKeyboardInputEngine::TextCase <db:emphasis>textCase</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setTextCase</db:methodname>
<db:methodparam>
<db:type>QVirtualKeyboardInputEngine::TextCase</db:type>
<db:parameter>textCase</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setTextCase(QVirtualKeyboardInputEngine::TextCase textCase) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the <db:code role="parameter">textCase</db:code> for this input method. The method returns <db:code>true</db:code> if successful.</db:para>
</db:section>
<db:section xml:id="traceBegin">
<db:title>[virtual, since QtQuick.VirtualKeyboard 2.0] QVirtualKeyboardTrace *QVirtualKeyboardAbstractInputMethod::traceBegin(int <db:emphasis>traceId</db:emphasis>, QVirtualKeyboardInputEngine::PatternRecognitionMode <db:emphasis>patternRecognitionMode</db:emphasis>, const QVariantMap &amp;<db:emphasis>traceCaptureDeviceInfo</db:emphasis>, const QVariantMap &amp;<db:emphasis>traceScreenInfo</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QVirtualKeyboardTrace *</db:type>
<db:methodname>traceBegin</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>traceId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVirtualKeyboardInputEngine::PatternRecognitionMode</db:type>
<db:parameter>patternRecognitionMode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>traceCaptureDeviceInfo</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>traceScreenInfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVirtualKeyboardTrace * traceBegin(int traceId, QVirtualKeyboardInputEngine::PatternRecognitionMode patternRecognitionMode, const QVariantMap &amp;traceCaptureDeviceInfo, const QVariantMap &amp;traceScreenInfo)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is called when a trace interaction starts with the specified <db:code role="parameter">patternRecognitionMode</db:code>. The trace is uniquely identified by the <db:code role="parameter">traceId</db:code>. The <db:code role="parameter">traceCaptureDeviceInfo</db:code> provides information about the source device and the <db:code role="parameter">traceScreenInfo</db:code> provides information about the screen context.</db:para>
<db:para>If the input method accepts the event and wants to capture the trace input, it must return a new <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link> object. This object must remain valid until the <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#traceEnd">traceEnd</db:link>() method is called. If the <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link> is rendered on screen, it remains there until the <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link> object is destroyed.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="traceEnd">
<db:title>[virtual, since QtQuick.VirtualKeyboard 2.0] bool QVirtualKeyboardAbstractInputMethod::traceEnd(QVirtualKeyboardTrace *<db:emphasis>trace</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>traceEnd</db:methodname>
<db:methodparam>
<db:type>QVirtualKeyboardTrace *</db:type>
<db:parameter>trace</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool traceEnd(QVirtualKeyboardTrace *trace)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is called when the trace interaction ends. The input method should destroy the <db:code role="parameter">trace</db:code> object at some point after this function is called. See the <db:link xlink:href="qtvirtualkeyboard-overview.xml#trace-api-for-input-methods">Trace API for Input Methods</db:link> how to access the gathered data.</db:para>
<db:para>The method returns <db:code>true</db:code> if the trace interaction is accepted.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="update">
<db:title>[virtual] void QVirtualKeyboardAbstractInputMethod::update()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>update</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is called by the input engine when the input method needs to be updated. The input method must close the current pre-edit text and restore its internal state to the default.</db:para>
</db:section>
</db:section>
</db:article>
