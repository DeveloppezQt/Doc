<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Bearer Monitor Example</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Network Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;sessionwidget.h&quot;
#include &quot;qnetworkconfigmanager.h&quot;

SessionWidget::SessionWidget(const QNetworkConfiguration &amp;config, QWidget *parent)
:   QWidget(parent), statsTimer(-1)
{
    setupUi(this);

#ifdef QT_NO_NETWORKINTERFACE
    interfaceName-&gt;setVisible(false);
    interfaceNameLabel-&gt;setVisible(false);
    interfaceGuid-&gt;setVisible(false);
    interfaceGuidLabel-&gt;setVisible(false);
#endif

    session = new QNetworkSession(config, this);

    connect(session, SIGNAL(stateChanged(QNetworkSession::State)),
            this, SLOT(updateSession()));
    connect(session, SIGNAL(error(QNetworkSession::SessionError)),
            this, SLOT(updateSessionError(QNetworkSession::SessionError)));

    updateSession();

    sessionId-&gt;setText(QString(&quot;0x%1&quot;).arg(qulonglong(session), 8, 16, QChar('0')));

    configuration-&gt;setText(session-&gt;configuration().name());

    connect(openSessionButton, SIGNAL(clicked()),
            this, SLOT(openSession()));
    connect(openSyncSessionButton, SIGNAL(clicked()),
            this, SLOT(openSyncSession()));
    connect(closeSessionButton, SIGNAL(clicked()),
            this, SLOT(closeSession()));
    connect(stopSessionButton, SIGNAL(clicked()),
            this, SLOT(stopSession()));
}

SessionWidget::~SessionWidget()
{
    delete session;
}

void SessionWidget::timerEvent(QTimerEvent *e)
{
    if (e-&gt;timerId() == statsTimer) {
        rxData-&gt;setText(QString::number(session-&gt;bytesReceived()));
        txData-&gt;setText(QString::number(session-&gt;bytesWritten()));
        activeTime-&gt;setText(QString::number(session-&gt;activeTime()));
    }
}

void SessionWidget::updateSession()
{
    updateSessionState(session-&gt;state());

    if (session-&gt;state() == QNetworkSession::Connected)
        statsTimer = startTimer(1000);
    else if (statsTimer != -1)
        killTimer(statsTimer);

    if (session-&gt;configuration().type() == QNetworkConfiguration::InternetAccessPoint)
        bearer-&gt;setText(session-&gt;configuration().bearerTypeName());
    else {
        QNetworkConfigurationManager mgr;
        QNetworkConfiguration c = mgr.configurationFromIdentifier(session-&gt;sessionProperty(&quot;ActiveConfiguration&quot;).toString());
        bearer-&gt;setText(c.bearerTypeName());
    }

#ifndef QT_NO_NETWORKINTERFACE
    interfaceName-&gt;setText(session-&gt;interface().humanReadableName());
    interfaceGuid-&gt;setText(session-&gt;interface().name());
#endif
}

void SessionWidget::openSession()
{
    clearError();
    session-&gt;open();
    updateSession();
}

void SessionWidget::openSyncSession()
{
    clearError();
    session-&gt;open();
    session-&gt;waitForOpened();
    updateSession();
}

void SessionWidget::closeSession()
{
    clearError();
    session-&gt;close();
    updateSession();
}

void SessionWidget::stopSession()
{
    clearError();
    session-&gt;stop();
    updateSession();
}

void SessionWidget::updateSessionState(QNetworkSession::State state)
{
    QString s = tr(&quot;%1 (%2)&quot;);

    switch (state) {
    case QNetworkSession::Invalid:
        s = s.arg(tr(&quot;Invalid&quot;));
        break;
    case QNetworkSession::NotAvailable:
        s = s.arg(tr(&quot;Not Available&quot;));
        break;
    case QNetworkSession::Connecting:
        s = s.arg(tr(&quot;Connecting&quot;));
        break;
    case QNetworkSession::Connected:
        s = s.arg(tr(&quot;Connected&quot;));
        break;
    case QNetworkSession::Closing:
        s = s.arg(tr(&quot;Closing&quot;));
        break;
    case QNetworkSession::Disconnected:
        s = s.arg(tr(&quot;Disconnected&quot;));
        break;
    case QNetworkSession::Roaming:
        s = s.arg(tr(&quot;Roaming&quot;));
        break;
    default:
        s = s.arg(tr(&quot;Unknown&quot;));
    }

    if (session-&gt;isOpen())
        s = s.arg(tr(&quot;Open&quot;));
    else
        s = s.arg(tr(&quot;Closed&quot;));

    sessionState-&gt;setText(s);
}

void SessionWidget::updateSessionError(QNetworkSession::SessionError error)
{
    lastError-&gt;setText(QString::number(error));
    errorString-&gt;setText(session-&gt;errorString());
}

void SessionWidget::clearError()
{
    lastError-&gt;clear();
    errorString-&gt;clear();
}

</db:programlisting>
</db:article>
