<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Differences between Qt Quick Controls</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Controls 2 Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Quick Controls were originally developed to support desktop platforms, with mobile and embedded support coming shortly afterwards. They have a very broad scope, in that they provide a styling system flexible enough to allow the development of applications that have either a platform-dependent or platform-independent style.</db:para>
<db:para>On embedded systems, where the hardware has limited resources, this approach can be inefficient. Qt Quick Controls 2 were designed to solve this problem, using <db:link xlink:href="https://blog.qt.io/blog/2015/03/31/qt-quick-controls-for-embedded/">benchmarks</db:link> to guide the development.</db:para>
<db:section xml:id="c-and-qml">
<db:title>C++ and QML</db:title>
<db:para>In many cases, the internal state of a control can be more efficiently processed in C++. For example, handling input events in C++ makes a difference for controls that would otherwise need to create internal MouseAreas and attached Keys objects.</db:para>
</db:section>
<db:section xml:id="styles">
<db:title>Styles</db:title>
<db:para>Not only does handling events and logic in C++ increase performance, but it allows the visual QML layer to be a simple, declarative layer on top. This is reflected in the structure of the controls project: all visual implementations sit in the <db:emphasis>imports</db:emphasis> folder, so that users who want to create their own complete style can copy the folder and start tweaking. Read more about implementing a style plugin <db:link xlink:href="qtquickcontrols2-customize.xml#creating-a-custom-style">here</db:link>.</db:para>
<db:para>In Qt Quick Controls 2, styles no longer provide components that are dynamically instantiated by controls, but controls themselves consist of item delegates that can be replaced. In effect, this means that delegates are Qt Quick items that are instantiated on the spot, as properties of the control, and are simply parented to the control.</db:para>
</db:section>
<db:section xml:id="modularity-and-simplicity">
<db:title>Modularity and Simplicity</db:title>
<db:para>When it comes to more complex controls, it is sometimes better to split them up into separate building blocks. As an example, the complex <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link> control:</db:para>
<db:programlisting language="qml">ScrollView {
    horizontalScrollBarPolicy: Qt.ScrollBarAlwaysOff
    Flickable {
        // ...
    }
}
</db:programlisting>
<db:para>Is replaced with simple <db:link xlink:href="qml-qtquick-controls2-scrollbar.xml">ScrollBar</db:link>/<db:link xlink:href="qml-qtquick-controls2-scrollindicator.xml">ScrollIndicator</db:link> controls that can be attached to any Flickable:</db:para>
<db:programlisting language="qml">Flickable {
    // ...
    ScrollBar.vertical: ScrollBar { }
}
</db:programlisting>
<db:para>The API of Qt Quick Controls 2 aims to be clean and simple. Common operations are easy, and more advanced ones are liberally documented with snippets that can be copied into your code.</db:para>
</db:section>
<db:section xml:id="feature-comparison-table">
<db:title>Feature Comparison Table</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>Qt Quick Controls</db:para>
</db:th>
<db:th>
<db:para>Qt Quick Controls 2</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Stylable delegates</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Pre-built native styles</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
<db:td>
<db:para>No</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Runtime style/theme changes</db:para>
</db:td>
<db:td>
<db:para>Yes <db:superscript>1</db:superscript></db:para>
</db:td>
<db:td>
<db:para>Yes <db:superscript>2</db:superscript></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Can be used on Desktop</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Can be used on Mobile</db:para>
</db:td>
<db:td>
<db:para>Yes <db:superscript>3</db:superscript></db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Can be used on Embedded</db:para>
</db:td>
<db:td>
<db:para>Yes <db:superscript>3</db:superscript></db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Internal event handling</db:para>
</db:td>
<db:td>
<db:para>QML</db:para>
</db:td>
<db:td>
<db:para>C++</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Not officially supported, but technically possible via private APIs</db:para>
</db:listitem>
<db:listitem>
<db:para>Only themes for specific styles can be changed at runtime, styles are fixed</db:para>
</db:listitem>
<db:listitem>
<db:para>Performance may not be optimal</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="porting-qt-quick-controls-code">
<db:title>Porting Qt Quick Controls Code</db:title>
<db:para>The API of Qt Quick Controls 2 is very similar to Qt Quick Controls, but it does come with some changes necessary to facilitate the improvements. The majority of changes are to do with styling; all of a control's delegates are now accessible in the control itself, instead of in a separate style object.</db:para>
<db:para>For example, to style a button in Qt Quick Controls:</db:para>
<db:programlisting language="cpp" role="bad">Button {
    style: ButtonStyle {
        label: Label {
            // ...
        }
    }
}
</db:programlisting>
<db:para>To style a button in Qt Quick Controls 2:</db:para>
<db:programlisting language="qml">Button {
    contentItem: Label {
        // ...
    }
}
</db:programlisting>
<db:section xml:id="preparing-for-migration">
<db:title>Preparing for Migration</db:title>
<db:para>With this in mind, a good way to prepare for a migration to Qt Quick Controls 2 is to place each control that you have a custom style for in its own QML file. For example, the Qt Quick Controls button above could be moved to a file named <db:code>Button.qml</db:code> in a directory named <db:code>controls</db:code>, and used in the following manner:</db:para>
<db:programlisting language="cpp" role="bad">import &quot;controls&quot; as Controls

Controls.Button {
    ...
}
</db:programlisting>
<db:para>This works with both modules, and will reduce the amount of work needed when the migration begins.</db:para>
</db:section>
</db:section>
<db:section xml:id="type-comparison-table">
<db:title>Type Comparison Table</db:title>
<db:para>The first column lists all types available in <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls 1</db:link>, <db:link xlink:href="qtquickdialogs-index.xml">Qt Quick Dialogs</db:link>, and <db:link xlink:href="qtquickextras-index.xml">Qt Quick Extras</db:link>. The second column documents the respective type in Qt Quick Controls 2. When a direct alternative is not available, the third column contains an alternative that provides related functionality. The last column contains some remarks about the differences between the types in the different modules.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt Quick Controls 1</db:para>
</db:th>
<db:th>
<db:para>Qt Quick Controls 2</db:para>
</db:th>
<db:th>
<db:para>Alternatives</db:para>
</db:th>
<db:th>
<db:para>Remarks</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-action.xml">Action</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-shortcut.xml">Shortcut</db:link> <db:superscript>(Qt Quick)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 1</db:emphasis>: <db:code>Action</db:code> is an abstract user interface action that is bound to buttons and menu items, and can provide shortcuts.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick</db:emphasis>: <db:code>Shortcut</db:code> provides the shortcut functionality that was previously only provided by <db:code>Action</db:code>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-applicationwindow.xml">ApplicationWindow</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-busyindicator.xml">BusyIndicator</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-busyindicator.xml">BusyIndicator</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-button.xml">Button</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-calendar.xml">Calendar</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt-labs-calendar-monthgrid.xml">MonthGrid</db:link>, <db:link xlink:href="qml-qt-labs-calendar-dayofweekrow.xml">DayOfWeekRow</db:link>, <db:link xlink:href="qml-qt-labs-calendar-weeknumbercolumn.xml">WeekNumberColumn</db:link> <db:superscript>(Qt Labs Calendar)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Labs Calendar</db:emphasis>: <db:code>MonthGrid</db:code>, <db:code>DayOfWeek</db:code>, and <db:code>WeekNumberColumn</db:code> are <db:emphasis>experimental</db:emphasis> unstyled building blocks for calendar views.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-checkbox.xml">CheckBox</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-checkbox.xml">CheckBox</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-combobox.xml">ComboBox</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>ComboBox</db:code> is not editable.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-exclusivegroup.xml">ExclusiveGroup</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-buttongroup.xml">ButtonGroup</db:link> <db:superscript>(Qt Quick Controls 2)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>ButtonGroup</db:code> offers similar functionality.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-groupbox.xml">GroupBox</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-groupbox.xml">GroupBox</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-label.xml">Label</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-label.xml">Label</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-menu.xml">Menu</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-menu.xml">Menu</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-menu.xml">Menu</db:link> <db:superscript>(Qt Labs Platform)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 1</db:emphasis>: <db:code>Menu</db:code> is native on platforms where an implementation is available in the Qt Platform Abstraction Layer. Other platforms use a QML-based top-level menu popup window. <db:code>Menu</db:code> supports traditional desktop style cascading submenus, but does not work on Embedded Linux because <db:link xlink:href="embedded-linux.xml#eglfs">EGLFS</db:link> does not support multiple top-level windows.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>Menu</db:code> is a non-native <db:code>Item-based</db:code> popup that is stacked above the application content. Due to this, menu popups are restricted within window boundaries. <db:code>Menu</db:code> is fully customizable using QML and Qt Quick, and allows adding any <db:code>Items</db:code>. Traditional desktop oriented features, such as cascading submenus and visualizing keyboard shortcuts are missing.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Labs Platform</db:emphasis>: <db:code>Menu</db:code> is an <db:emphasis>experimental</db:emphasis> native menu that uses Qt Widgets as a fallback on platforms where a native implementation is not available in the Qt Platform Abstraction Layer.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link> <db:superscript>(Qt Labs Platform)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 1</db:emphasis>: <db:code>MenuBar</db:code> is native on platforms where an implementation is available in the Qt Platform Abstraction Layer. Other platforms use a QML-based menubar item stacked at the top of the window.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Labs Platform</db:emphasis>: <db:code>MenuBar</db:code> is an <db:emphasis>experimental</db:emphasis> native menubar. It is only available on platforms where a native implementation is available in the Qt Platform Abstraction Layer.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItem</db:link>, <db:link xlink:href="qml-qtquick-controls-menuseparator.xml">MenuSeparator</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-menuitem.xml">MenuItem</db:link>, <db:link xlink:href="qml-qtquick-controls2-menuseparator.xml">MenuSeparator</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-menuitem.xml">MenuItem</db:link>, <db:link xlink:href="qml-qtquick-controls2-menuseparator.xml">MenuSeparator</db:link> <db:superscript>(Qt Labs Platform)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 1</db:emphasis>: <db:code>MenuItem</db:code> and <db:code>MenuSeparator</db:code> are native on platforms where an implementation is available in the Qt Platform Abstraction Layer. Other platforms use QML-based menu items and separators.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>MenuItem</db:code> and <db:code>MenuSeparator</db:code> are a non-native QML-based menu items and separators that can be fully customized using QML and Qt Quick.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Labs Platform</db:emphasis>: <db:code>MenuItem</db:code> and <db:code>MenuSeparator</db:code> are <db:emphasis>experimental</db:emphasis> native menu items and separators.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-progressbar.xml">ProgressBar</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-progressbar.xml">ProgressBar</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-radiobutton.xml">RadioButton</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-radiobutton.xml">RadioButton</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-scrollbar.xml">ScrollBar</db:link>, <db:link xlink:href="qml-qtquick-controls2-scrollindicator.xml">ScrollIndicator</db:link> <db:superscript>(Qt Quick Controls 2)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>ScrollBar</db:code> and <db:code>ScrollIndicator</db:code> offer similar functionality. They can be attached to any <db:code>Flickable</db:code> to build scrollable views.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-slider.xml">Slider</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-slider.xml">Slider</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-spinbox.xml">SpinBox</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-spinbox.xml">SpinBox</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-splitview.xml">SplitView</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link>, <db:link xlink:href="qml-qtquick-controls-stackviewdelegate.xml">StackViewDelegate</db:link>, <db:link xlink:href="qml-qtquick-controls-stack.xml">Stack</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>StackView</db:code> provides customizable transitions and attached properties via a single <db:code>StackView</db:code> type.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-statusbar.xml">StatusBar</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-toolbar.xml">ToolBar</db:link> <db:superscript>(Qt Quick Controls 2)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>ApplicationWindow</db:code> allows assigning any item or control, such as <db:code>ToolBar</db:code>, as a header or footer.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-switch.xml">Switch</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-switch.xml">Switch</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link>, <db:link xlink:href="qml-qtquick-controls-tab.xml">Tab</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-tabbar.xml">TabBar</db:link>, <db:link xlink:href="qml-qtquick-controls2-tabbutton.xml">TabButton</db:link> <db:superscript>(Qt Quick Controls 2)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>TabBar</db:code> and <db:code>TabButton</db:code> offer similar functionality, and can be used to build tabbed views.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-tableview.xml">TableView</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-textarea.xml">TextArea</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 1</db:emphasis>: <db:code>TextArea</db:code> inherits <db:code>ScrollView</db:code> and is therefore always a scrollable editor.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>TextArea</db:code> is a simpler multi-line editor that can be optionally attached to a <db:code>Flickable</db:code> to provide scrolling functionality. This allows using <db:code>TextArea</db:code> in a scrollable page without having two nested scrollable areas, which can be problematic and cause usability issues.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-textfield.xml">TextField</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-toolbar.xml">ToolBar</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-toolbar.xml">ToolBar</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-toolbutton.xml">ToolButton</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-toolbutton.xml">ToolButton</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-treeview.xml">TreeView</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt Quick Dialogs</db:para>
</db:th>
<db:th>
<db:para>Qt Quick Controls 2</db:para>
</db:th>
<db:th>
<db:para>Alternatives</db:para>
</db:th>
<db:th>
<db:para>Remarks</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-dialogs-dialog.xml">Dialog</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-dialog.xml">Dialog</db:link></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Dialogs</db:emphasis>: <db:code>Dialog</db:code> is either a top-level window or an <db:code>Item-based</db:code> popup depending on whether the underlying platform supports multiple top-level windows.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>Dialog</db:code> is not a top-level window, but an <db:code>Item-based</db:code> popup that is stacked above the application content. Due to this, dialogs are restricted within window boundaries.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-dialogs-colordialog.xml">ColorDialog</db:link>, <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link>, <db:link xlink:href="qml-qtquick-dialogs-fontdialog.xml">FontDialog</db:link>, <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml">MessageDialog</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-dialogs-colordialog.xml">ColorDialog</db:link>, <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link>, <db:link xlink:href="qml-qt-labs-platform-folderdialog.xml">FolderDialog</db:link>, <db:link xlink:href="qml-qtquick-dialogs-fontdialog.xml">FontDialog</db:link>, <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml">MessageDialog</db:link> <db:superscript>(Qt Labs Platform)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Dialogs</db:emphasis>: Dialogs are native on platforms where an implementation is available in the Qt Platform Abstraction Layer. Other platforms use either Qt Widgets or QML-based dialogs depending on whether the underlying platform supports multiple top-level windows.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Labs Platform</db:emphasis>: <db:emphasis>Experimental</db:emphasis> native dialogs that use Qt Widgets as a fallback on platforms where a native implementation is not available in the Qt Platform Abstraction Layer.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt Quick Extras</db:para>
</db:th>
<db:th>
<db:para>Qt Quick Controls 2</db:para>
</db:th>
<db:th>
<db:para>Alternatives</db:para>
</db:th>
<db:th>
<db:para>Remarks</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-extras-circulargauge.xml">CircularGauge</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-extras-delaybutton.xml">DelayButton</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-extras-dial.xml">Dial</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-dial.xml">Dial</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-extras-gauge.xml">Gauge</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-extras-picture.xml">Picture</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-extras-statusindicator.xml">StatusIndicator</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-extras-togglebutton.xml">ToggleButton</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-extras-tumbler.xml">Tumbler</db:link>, <db:link xlink:href="qml-qtquick-extras-tumblercolumn.xml">TumblerColumn</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-tumbler.xml">Tumbler</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Extras</db:emphasis>: <db:code>Tumbler</db:code> can consist of multiple columns.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>Tumbler</db:code> presents a single spinnable wheel. Multiple columns can be created by placing multiple <db:code>Tumblers</db:code> next to each other.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th>
<db:para>No Predecessor</db:para>
</db:th>
<db:th>
<db:para>Qt Quick Controls 2</db:para>
</db:th>
<db:th>
<db:para>Alternatives</db:para>
</db:th>
<db:th>
<db:para>Remarks</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml">AbstractButton</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-buttongroup.xml">ButtonGroup</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-exclusivegroup.xml">ExclusiveGroup</db:link> <db:superscript>(Qt Quick Controls 1)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 1</db:emphasis>: <db:code>ExclusiveGroup</db:code> offers similar functionality.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-checkdelegate.xml">CheckDelegate</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-container.xml">Container</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-control.xml">Control</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-drawer.xml">Drawer</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-frame.xml">Frame</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-itemdelegate.xml">ItemDelegate</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-page.xml">Page</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-pageindicator.xml">PageIndicator</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-pane.xml">Pane</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-popup.xml">Popup</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-radiodelegate.xml">RadioDelegate</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-rangeslider.xml">RangeSlider</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-roundbutton.xml">RoundButton</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-scrollbar.xml">ScrollBar</db:link>, <db:link xlink:href="qml-qtquick-controls2-scrollindicator.xml">ScrollIndicator</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link> <db:superscript>(Qt Quick Controls 1)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 1</db:emphasis>: <db:code>ScrollView</db:code> offers similar functionality. It combines horizontal and vertical scrollbars, and the background and frame around the scrollable view.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt-labs-platform-standardpaths.xml">StandardPaths</db:link> <db:superscript>(Qt Labs Platform)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Dialogs</db:emphasis>: <db:code>FileDialog</db:code> offers a shortcut property that can be used to access the most common standard paths.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Labs Platform</db:emphasis>: <db:code>StandardPaths</db:code> offers a separate type to give full access to the standard paths.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-swipeview.xml">SwipeView</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-switchdelegate.xml">SwitchDelegate</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qt-labs-platform-systemtrayicon.xml">SystemTrayIcon</db:link> <db:superscript>(Qt Labs Platform)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Labs Platform</db:emphasis>: <db:code>SystemTrayIcon</db:code> is an <db:emphasis>experimental</db:emphasis> native system tray icon that uses Qt Widgets as a fallback on platforms where a native implementation is not available in the Qt Platform Abstraction Layer.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-tabbar.xml">TabBar</db:link>, <db:link xlink:href="qml-qtquick-controls2-tabbutton.xml">TabButton</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link> <db:superscript>(Qt Quick Controls 1)</db:superscript></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 1</db:emphasis>: <db:code>TabView</db:code> offers similar functionality. It combines the tab bar, background and frame around the tabs.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-toolseparator.xml">ToolSeparator</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls2-tooltip.xml">ToolTip</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 1</db:emphasis>: <db:code>Button</db:code> and <db:code>Action</db:code> have built-in Qt Widgets-based tooltips.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Qt Quick Controls 2</db:emphasis>: <db:code>ToolTip</db:code> can be attached to any <db:code>Item</db:code>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-index.xml">Qt Quick</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-controls-qmlmodule2.xml">Qt Quick Controls 2 QML Types</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-controls-qmlmodule.xml">Qt Quick Controls QML Types</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-extras-qmlmodule.xml">Qt Quick Extras QML Types</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt-labs-calendar-qmlmodule.xml">Qt Labs Calendar QML Types</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt-labs-platform-qmlmodule.xml">Qt Labs Platform QML Types</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
