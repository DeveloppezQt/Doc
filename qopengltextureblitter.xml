<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLTextureBlitter Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopengltextureblitter.xml">QOpenGLTextureBlitter</db:link> class provides a convenient way to draw textured quads via OpenGL.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLTextureBlitter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLTextureBlitter is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Drawing textured quads, in order to get the contents of a texture onto the screen, is a common operation when developing 2D user interfaces. <db:link xlink:href="qopengltextureblitter.xml">QOpenGLTextureBlitter</db:link> provides a convenience class to avoid repeating vertex data, shader sources, buffer and program management and matrix calculations.</db:para>
<db:para>For example, a <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> subclass can do the following to draw the contents rendered into a framebuffer at the pixel position <db:code>(x, y)</db:code>:</db:para>
<db:programlisting language="cpp">void OpenGLWidget::initializeGL()
{
    m_blitter.create();
    m_fbo = new QOpenGLFramebufferObject(size);
}

void OpenGLWidget::paintGL()
{
    m_fbo-&amp;gt;bind();
    // update offscreen content
    m_fbo-&amp;gt;release();

    m_blitter.bind();
    const QRect targetRect(QPoint(x, y), m_fbo-&amp;gt;size());
    const QMatrix4x4 target = QOpenGLTextureBlitter::targetTransform(targetRect, QRect(QPoint(0, 0), m_fbo-&amp;gt;size()));
    m_blitter.blit(m_fbo-&amp;gt;texture(), target, QOpenGLTextureBlitter::OriginBottomLeft);
    m_blitter.release();
}
</db:programlisting>
<db:para>The blitter implements GLSL shaders both for GLSL 1.00 (suitable for OpenGL (ES) 2.x and compatibility profiles of newer OpenGL versions) and version 150 (suitable for core profile contexts with OpenGL 3.2 and newer).</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Origin-enum">
<db:title>enum QOpenGLTextureBlitter::Origin</db:title>
<db:enumsynopsis>
<db:enumname>Origin</db:enumname>
<db:enumitem>
<db:enumidentifier>OriginBottomLeft</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OriginTopLeft</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltextureblitter.xml">QOpenGLTextureBlitter</db:link></db:emphasis>::OriginBottomLeft</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Indicates that the data in the texture follows the OpenGL convention of coordinate systems, meaning Y is running from bottom to top.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltextureblitter.xml">QOpenGLTextureBlitter</db:link></db:emphasis>::OriginTopLeft</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Indicates that the data in the texture has Y running from top to bottom, which is typical with regular, unflipped image data.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLTextureBlitter">
<db:title>QOpenGLTextureBlitter::QOpenGLTextureBlitter()</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLTextureBlitter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTextureBlitter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qopengltextureblitter.xml">QOpenGLTextureBlitter</db:link> instance.</db:para>
<db:note>
<db:para>no graphics resources are initialized in the constructor. This makes it safe to place plain <db:link xlink:href="qopengltextureblitter.xml">QOpenGLTextureBlitter</db:link> members into classes because the actual initialization that depends on the OpenGL context happens only in <db:link xlink:href="qopengltextureblitter.xml#create">create</db:link>().</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QOpenGLTextureBlitter">
<db:title>QOpenGLTextureBlitter::~QOpenGLTextureBlitter()</db:title>
<db:destructorsynopsis>
<db:methodname>~QOpenGLTextureBlitter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOpenGLTextureBlitter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the instance.</db:para>
<db:note>
<db:para>When the OpenGL context - or a context sharing resources with it - that was current when calling <db:link xlink:href="qopengltextureblitter.xml#create">create</db:link>() is not current, graphics resources will not be released. Therefore, it is recommended to call <db:link xlink:href="qopengltextureblitter.xml#destroy">destroy</db:link>() manually instead of relying on the destructor to perform OpenGL resource cleanup.</db:para>
</db:note>
</db:section>
<db:section xml:id="bind">
<db:title>void QOpenGLTextureBlitter::bind(GLenum <db:emphasis>target</db:emphasis> = GL_TEXTURE_2D)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bind</db:methodname>
<db:methodparam>
<db:type>GLenum</db:type>
<db:parameter>target</db:parameter>
<db:initializer>GL_TEXTURE_2D</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void bind(GLenum target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds the graphics resources used by the blitter. This must be called before calling <db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>(). Code modifying the OpenGL state should be avoided between the call to bind() and <db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>() because otherwise conflicts may arise.</db:para>
<db:para><db:code role="parameter">target</db:code> is the texture target for the source texture and must be either <db:code>GL_TEXTURE_2D</db:code> or <db:code>GL_OES_EGL_image_external</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#release">release</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blit">
<db:title>void QOpenGLTextureBlitter::blit(GLuint <db:emphasis>texture</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>targetTransform</db:emphasis>, QOpenGLTextureBlitter::Origin <db:emphasis>sourceOrigin</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>blit</db:methodname>
<db:methodparam>
<db:type>GLuint</db:type>
<db:parameter>texture</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>targetTransform</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTextureBlitter::Origin</db:type>
<db:parameter>sourceOrigin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void blit(GLuint texture, const QMatrix4x4 &amp;targetTransform, QOpenGLTextureBlitter::Origin sourceOrigin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the blit with the source texture <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">targetTransform</db:code> specifies the transformation applied. This is usually generated by the <db:link xlink:href="qopengltextureblitter.xml#targetTransform">targetTransform</db:link>() helper function.</db:para>
<db:para><db:code role="parameter">sourceOrigin</db:code> specifies if the image data needs flipping. When <db:code role="parameter">texture</db:code> corresponds to a texture attached to an FBO pass <db:link xlink:href="qopengltextureblitter.xml#Origin-enum">OriginBottomLeft</db:link>. On the other hand, when <db:code role="parameter">texture</db:code> is based on unflipped image data, pass <db:link xlink:href="qopengltextureblitter.xml#Origin-enum">OriginTopLeft</db:link>. This is more efficient than using <db:link xlink:href="qimage.xml#mirrored">QImage::mirrored</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#targetTransform">targetTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#Origin-enum">Origin</db:link></db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blit-1">
<db:title>void QOpenGLTextureBlitter::blit(GLuint <db:emphasis>texture</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>targetTransform</db:emphasis>, const QMatrix3x3 &amp;<db:emphasis>sourceTransform</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>blit</db:methodname>
<db:methodparam>
<db:type>GLuint</db:type>
<db:parameter>texture</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>targetTransform</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x3 &amp;</db:type>
<db:parameter>sourceTransform</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void blit(GLuint texture, const QMatrix4x4 &amp;targetTransform, const QMatrix3x3 &amp;sourceTransform)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the blit with the source texture <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">targetTransform</db:code> specifies the transformation applied. This is usually generated by the <db:link xlink:href="qopengltextureblitter.xml#targetTransform">targetTransform</db:link>() helper function.</db:para>
<db:para><db:code role="parameter">sourceTransform</db:code> specifies the transformation applied to the source. This allows using only a sub-rect of the source texture. This is usually generated by the <db:link xlink:href="qopengltextureblitter.xml#sourceTransform">sourceTransform</db:link>() helper function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#sourceTransform">sourceTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#targetTransform">targetTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#Origin-enum">Origin</db:link></db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>bool QOpenGLTextureBlitter::create()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>create</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool create()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the graphics resources used by the blitter.</db:para>
<db:para>Returns <db:code>true</db:code> if successful, <db:code>false</db:code> if there was a failure. Failures can occur when there is no OpenGL context current on the current thread, or when shader compilation fails for some reason.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#isCreated">isCreated</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroy">
<db:title>void QOpenGLTextureBlitter::destroy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Frees all graphics resources held by the blitter. Assumes that the OpenGL context, or another context sharing resources with it, that was current on the thread when invoking <db:link xlink:href="qopengltextureblitter.xml#create">create</db:link>() is current.</db:para>
<db:para>The function has no effect when the blitter is not in created state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCreated">
<db:title>bool QOpenGLTextureBlitter::isCreated() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCreated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCreated() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:link xlink:href="qopengltextureblitter.xml#create">create</db:link>() was called and succeeded. <db:code>false</db:code> otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release">
<db:title>void QOpenGLTextureBlitter::release()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>release</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void release()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unbinds the graphics resources used by the blitter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOpacity">
<db:title>void QOpenGLTextureBlitter::setOpacity(float <db:emphasis>opacity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOpacity</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>opacity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOpacity(float opacity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the opacity to <db:code role="parameter">opacity</db:code>. The default opacity is 1.0.</db:para>
<db:note>
<db:para>the blitter does not alter the blend state. It is up to the caller of <db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>() to ensure the correct blend settings are active.</db:para>
</db:note>
</db:section>
<db:section xml:id="setRedBlueSwizzle">
<db:title>void QOpenGLTextureBlitter::setRedBlueSwizzle(bool <db:emphasis>swizzle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRedBlueSwizzle</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>swizzle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRedBlueSwizzle(bool swizzle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether swizzling is enabled for the red and blue color channels to <db:code role="parameter">swizzle</db:code>. An BGRA to RGBA conversion (occurring in the shader on the GPU, instead of a slow CPU-side transformation) can be useful when the source texture contains data from a <db:link xlink:href="qimage.xml">QImage</db:link> with a format like <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32</db:link> which maps to BGRA on little endian systems.</db:para>
<db:para>By default the red-blue swizzle is disabled since this is what a texture attached to an framebuffer object or a texture based on a byte ordered <db:link xlink:href="qimage.xml">QImage</db:link> format (like <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_RGBA8888</db:link>) needs.</db:para>
</db:section>
<db:section xml:id="sourceTransform">
<db:title>[static] QMatrix3x3 QOpenGLTextureBlitter::sourceTransform(const QRectF &amp;<db:emphasis>subTexture</db:emphasis>, const QSize &amp;<db:emphasis>textureSize</db:emphasis>, QOpenGLTextureBlitter::Origin <db:emphasis>origin</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMatrix3x3</db:type>
<db:methodname>sourceTransform</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>subTexture</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>textureSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTextureBlitter::Origin</db:type>
<db:parameter>origin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix3x3 sourceTransform(const QRectF &amp;subTexture, const QSize &amp;textureSize, QOpenGLTextureBlitter::Origin origin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calculates a 3x3 matrix suitable as the input to <db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>(). This is used when only a part of the texture is to be used in the blit.</db:para>
<db:para><db:code role="parameter">subTexture</db:code> is the desired source rectangle in pixels, <db:code role="parameter">textureSize</db:code> is the full width and height of the texture data. <db:code role="parameter">origin</db:code> specifies the orientation of the image data when it comes to the Y axis.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#Origin-enum">Origin</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsExternalOESTarget">
<db:title>bool QOpenGLTextureBlitter::supportsExternalOESTarget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>supportsExternalOESTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool supportsExternalOESTarget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> when <db:link xlink:href="qopengltextureblitter.xml#bind">bind</db:link>() accepts <db:code>GL_TEXTURE_EXTERNAL_OES</db:code> as its target argument.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#bind">bind</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="targetTransform">
<db:title>[static] QMatrix4x4 QOpenGLTextureBlitter::targetTransform(const QRectF &amp;<db:emphasis>target</db:emphasis>, const QRect &amp;<db:emphasis>viewport</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMatrix4x4</db:type>
<db:methodname>targetTransform</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>viewport</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 targetTransform(const QRectF &amp;target, const QRect &amp;viewport)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calculates a target transform suitable for <db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>().</db:para>
<db:para><db:code role="parameter">target</db:code> is the target rectangle in pixels. <db:code role="parameter">viewport</db:code> describes the source dimensions and will in most cases be set to (0, 0, image width, image height).</db:para>
<db:para>For unscaled output the size of <db:code role="parameter">target</db:code> and <db:code role="parameter">viewport</db:code> should match.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltextureblitter.xml#blit">blit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
