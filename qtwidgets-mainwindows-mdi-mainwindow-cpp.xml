<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MDI Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The MDI example shows how to implement a Multiple Document Interface using Qt's <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;mainwindow.h&quot;
#include &quot;mdichild.h&quot;

MainWindow::MainWindow()
    : mdiArea(new QMdiArea)
{
    mdiArea-&gt;setHorizontalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    mdiArea-&gt;setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    setCentralWidget(mdiArea);
    connect(mdiArea, &amp;QMdiArea::subWindowActivated,
            this, &amp;MainWindow::updateMenus);

    createActions();
    createStatusBar();
    updateMenus();

    readSettings();

    setWindowTitle(tr(&quot;MDI&quot;));
    setUnifiedTitleAndToolBarOnMac(true);
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    mdiArea-&gt;closeAllSubWindows();
    if (mdiArea-&gt;currentSubWindow()) {
        event-&gt;ignore();
    } else {
        writeSettings();
        event-&gt;accept();
    }
}

void MainWindow::newFile()
{
    MdiChild *child = createMdiChild();
    child-&gt;newFile();
    child-&gt;show();
}

void MainWindow::open()
{
    const QString fileName = QFileDialog::getOpenFileName(this);
    if (!fileName.isEmpty())
        openFile(fileName);
}

bool MainWindow::openFile(const QString &amp;fileName)
{
    if (QMdiSubWindow *existing = findMdiChild(fileName)) {
        mdiArea-&gt;setActiveSubWindow(existing);
        return true;
    }
    const bool succeeded = loadFile(fileName);
    if (succeeded)
        statusBar()-&gt;showMessage(tr(&quot;File loaded&quot;), 2000);
    return succeeded;
}

bool MainWindow::loadFile(const QString &amp;fileName)
{
    MdiChild *child = createMdiChild();
    const bool succeeded = child-&gt;loadFile(fileName);
    if (succeeded)
        child-&gt;show();
    else
        child-&gt;close();
    MainWindow::prependToRecentFiles(fileName);
    return succeeded;
}

static inline QString recentFilesKey() { return QStringLiteral(&quot;recentFileList&quot;); }
static inline QString fileKey() { return QStringLiteral(&quot;file&quot;); }

static QStringList readRecentFiles(QSettings &amp;settings)
{
    QStringList result;
    const int count = settings.beginReadArray(recentFilesKey());
    for (int i = 0; i &lt; count; ++i) {
        settings.setArrayIndex(i);
        result.append(settings.value(fileKey()).toString());
    }
    settings.endArray();
    return result;
}

static void writeRecentFiles(const QStringList &amp;files, QSettings &amp;settings)
{
    const int count = files.size();
    settings.beginWriteArray(recentFilesKey());
    for (int i = 0; i &lt; count; ++i) {
        settings.setArrayIndex(i);
        settings.setValue(fileKey(), files.at(i));
    }
    settings.endArray();
}

bool MainWindow::hasRecentFiles()
{
    QSettings settings(QCoreApplication::organizationName(), QCoreApplication::applicationName());
    const int count = settings.beginReadArray(recentFilesKey());
    settings.endArray();
    return count &gt; 0;
}

void MainWindow::prependToRecentFiles(const QString &amp;fileName)
{
    QSettings settings(QCoreApplication::organizationName(), QCoreApplication::applicationName());

    const QStringList oldRecentFiles = readRecentFiles(settings);
    QStringList recentFiles = oldRecentFiles;
    recentFiles.removeAll(fileName);
    recentFiles.prepend(fileName);
    if (oldRecentFiles != recentFiles)
        writeRecentFiles(recentFiles, settings);

    setRecentFilesVisible(!recentFiles.isEmpty());
}

void MainWindow::setRecentFilesVisible(bool visible)
{
    recentFileSubMenuAct-&gt;setVisible(visible);
    recentFileSeparator-&gt;setVisible(visible);
}

void MainWindow::updateRecentFileActions()
{
    QSettings settings(QCoreApplication::organizationName(), QCoreApplication::applicationName());

    const QStringList recentFiles = readRecentFiles(settings);
    const int count = qMin(int(MaxRecentFiles), recentFiles.size());
    int i = 0;
    for ( ; i &lt; count; ++i) {
        const QString fileName = QFileInfo(recentFiles.at(i)).fileName();
        recentFileActs[i]-&gt;setText(tr(&quot;&amp;%1 %2&quot;).arg(i + 1).arg(fileName));
        recentFileActs[i]-&gt;setData(recentFiles.at(i));
        recentFileActs[i]-&gt;setVisible(true);
    }
    for ( ; i &lt; MaxRecentFiles; ++i)
        recentFileActs[i]-&gt;setVisible(false);
}

void MainWindow::openRecentFile()
{
    if (const QAction *action = qobject_cast&lt;const QAction *&gt;(sender()))
        openFile(action-&gt;data().toString());
}

void MainWindow::save()
{
    if (activeMdiChild() &amp;&amp; activeMdiChild()-&gt;save())
        statusBar()-&gt;showMessage(tr(&quot;File saved&quot;), 2000);
}

void MainWindow::saveAs()
{
    MdiChild *child = activeMdiChild();
    if (child &amp;&amp; child-&gt;saveAs()) {
        statusBar()-&gt;showMessage(tr(&quot;File saved&quot;), 2000);
        MainWindow::prependToRecentFiles(child-&gt;currentFile());
    }
}

#ifndef QT_NO_CLIPBOARD
void MainWindow::cut()
{
    if (activeMdiChild())
        activeMdiChild()-&gt;cut();
}

void MainWindow::copy()
{
    if (activeMdiChild())
        activeMdiChild()-&gt;copy();
}

void MainWindow::paste()
{
    if (activeMdiChild())
        activeMdiChild()-&gt;paste();
}
#endif

void MainWindow::about()
{
   QMessageBox::about(this, tr(&quot;About MDI&quot;),
            tr(&quot;The &lt;b&gt;MDI&lt;/b&gt; example demonstrates how to write multiple &quot;
               &quot;document interface applications using Qt.&quot;));
}

void MainWindow::updateMenus()
{
    bool hasMdiChild = (activeMdiChild() != 0);
    saveAct-&gt;setEnabled(hasMdiChild);
    saveAsAct-&gt;setEnabled(hasMdiChild);
#ifndef QT_NO_CLIPBOARD
    pasteAct-&gt;setEnabled(hasMdiChild);
#endif
    closeAct-&gt;setEnabled(hasMdiChild);
    closeAllAct-&gt;setEnabled(hasMdiChild);
    tileAct-&gt;setEnabled(hasMdiChild);
    cascadeAct-&gt;setEnabled(hasMdiChild);
    nextAct-&gt;setEnabled(hasMdiChild);
    previousAct-&gt;setEnabled(hasMdiChild);
    windowMenuSeparatorAct-&gt;setVisible(hasMdiChild);

#ifndef QT_NO_CLIPBOARD
    bool hasSelection = (activeMdiChild() &amp;&amp;
                         activeMdiChild()-&gt;textCursor().hasSelection());
    cutAct-&gt;setEnabled(hasSelection);
    copyAct-&gt;setEnabled(hasSelection);
#endif
}

class ActiveMdiSubWindowFunctor {
public:
    explicit ActiveMdiSubWindowFunctor(QMdiArea *mdiArea, QMdiSubWindow *activeWindow) : m_mdiArea(mdiArea), m_activeWindow(activeWindow) {}
    void operator()() const { m_mdiArea-&gt;setActiveSubWindow(m_activeWindow); }

private:
    QMdiArea *m_mdiArea;
    QMdiSubWindow *m_activeWindow;
};

void MainWindow::updateWindowMenu()
{
    windowMenu-&gt;clear();
    windowMenu-&gt;addAction(closeAct);
    windowMenu-&gt;addAction(closeAllAct);
    windowMenu-&gt;addSeparator();
    windowMenu-&gt;addAction(tileAct);
    windowMenu-&gt;addAction(cascadeAct);
    windowMenu-&gt;addSeparator();
    windowMenu-&gt;addAction(nextAct);
    windowMenu-&gt;addAction(previousAct);
    windowMenu-&gt;addAction(windowMenuSeparatorAct);

    QList&lt;QMdiSubWindow *&gt; windows = mdiArea-&gt;subWindowList();
    windowMenuSeparatorAct-&gt;setVisible(!windows.isEmpty());

    for (int i = 0; i &lt; windows.size(); ++i) {
        QMdiSubWindow *mdiSubWindow = windows.at(i);
        MdiChild *child = qobject_cast&lt;MdiChild *&gt;(mdiSubWindow-&gt;widget());

        QString text;
        if (i &lt; 9) {
            text = tr(&quot;&amp;%1 %2&quot;).arg(i + 1)
                               .arg(child-&gt;userFriendlyCurrentFile());
        } else {
            text = tr(&quot;%1 %2&quot;).arg(i + 1)
                              .arg(child-&gt;userFriendlyCurrentFile());
        }
        QAction *action = windowMenu-&gt;addAction(text, mdiSubWindow, ActiveMdiSubWindowFunctor(mdiArea, mdiSubWindow));
        action-&gt;setCheckable(true);
        action -&gt;setChecked(child == activeMdiChild());
    }
}

MdiChild *MainWindow::createMdiChild()
{
    MdiChild *child = new MdiChild;
    mdiArea-&gt;addSubWindow(child);

#ifndef QT_NO_CLIPBOARD
    connect(child, &amp;QTextEdit::copyAvailable, cutAct, &amp;QAction::setEnabled);
    connect(child, &amp;QTextEdit::copyAvailable, copyAct, &amp;QAction::setEnabled);
#endif

    return child;
}

void MainWindow::createActions()
{
    QMenu *fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    QToolBar *fileToolBar = addToolBar(tr(&quot;File&quot;));

    const QIcon newIcon = QIcon::fromTheme(&quot;document-new&quot;, QIcon(&quot;:/images/new.png&quot;));
    newAct = new QAction(newIcon, tr(&quot;&amp;New&quot;), this);
    newAct-&gt;setShortcuts(QKeySequence::New);
    newAct-&gt;setStatusTip(tr(&quot;Create a new file&quot;));
    connect(newAct, &amp;QAction::triggered, this, &amp;MainWindow::newFile);
    fileMenu-&gt;addAction(newAct);
    fileToolBar-&gt;addAction(newAct);

    const QIcon openIcon = QIcon::fromTheme(&quot;document-open&quot;, QIcon(&quot;:/images/open.png&quot;));
    QAction *openAct = new QAction(openIcon, tr(&quot;&amp;Open...&quot;), this);
    openAct-&gt;setShortcuts(QKeySequence::Open);
    openAct-&gt;setStatusTip(tr(&quot;Open an existing file&quot;));
    connect(openAct, &amp;QAction::triggered, this, &amp;MainWindow::open);
    fileMenu-&gt;addAction(openAct);
    fileToolBar-&gt;addAction(openAct);

    const QIcon saveIcon = QIcon::fromTheme(&quot;document-save&quot;, QIcon(&quot;:/images/save.png&quot;));
    saveAct = new QAction(saveIcon, tr(&quot;&amp;Save&quot;), this);
    saveAct-&gt;setShortcuts(QKeySequence::Save);
    saveAct-&gt;setStatusTip(tr(&quot;Save the document to disk&quot;));
    connect(saveAct, &amp;QAction::triggered, this, &amp;MainWindow::save);
    fileToolBar-&gt;addAction(saveAct);

    const QIcon saveAsIcon = QIcon::fromTheme(&quot;document-save-as&quot;);
    saveAsAct = new QAction(saveAsIcon, tr(&quot;Save &amp;As...&quot;), this);
    saveAsAct-&gt;setShortcuts(QKeySequence::SaveAs);
    saveAsAct-&gt;setStatusTip(tr(&quot;Save the document under a new name&quot;));
    connect(saveAsAct, &amp;QAction::triggered, this, &amp;MainWindow::saveAs);
    fileMenu-&gt;addAction(saveAsAct);

    fileMenu-&gt;addSeparator();

    QMenu *recentMenu = fileMenu-&gt;addMenu(tr(&quot;Recent...&quot;));
    connect(recentMenu, &amp;QMenu::aboutToShow, this, &amp;MainWindow::updateRecentFileActions);
    recentFileSubMenuAct = recentMenu-&gt;menuAction();

    for (int i = 0; i &lt; MaxRecentFiles; ++i) {
        recentFileActs[i] = recentMenu-&gt;addAction(QString(), this, &amp;MainWindow::openRecentFile);
        recentFileActs[i]-&gt;setVisible(false);
    }

    recentFileSeparator = fileMenu-&gt;addSeparator();

    setRecentFilesVisible(MainWindow::hasRecentFiles());

    fileMenu-&gt;addAction(tr(&quot;Switch layout direction&quot;), this, &amp;MainWindow::switchLayoutDirection);

    fileMenu-&gt;addSeparator();

    const QIcon exitIcon = QIcon::fromTheme(&quot;application-exit&quot;);
    QAction *exitAct = fileMenu-&gt;addAction(exitIcon, tr(&quot;E&amp;xit&quot;), qApp, &amp;QApplication::closeAllWindows);
    exitAct-&gt;setShortcuts(QKeySequence::Quit);
    exitAct-&gt;setStatusTip(tr(&quot;Exit the application&quot;));
    fileMenu-&gt;addAction(exitAct);

#ifndef QT_NO_CLIPBOARD
    QMenu *editMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Edit&quot;));
    QToolBar *editToolBar = addToolBar(tr(&quot;Edit&quot;));

    const QIcon cutIcon = QIcon::fromTheme(&quot;edit-cut&quot;, QIcon(&quot;:/images/cut.png&quot;));
    cutAct = new QAction(cutIcon, tr(&quot;Cu&amp;t&quot;), this);
    cutAct-&gt;setShortcuts(QKeySequence::Cut);
    cutAct-&gt;setStatusTip(tr(&quot;Cut the current selection's contents to the &quot;
                            &quot;clipboard&quot;));
    connect(cutAct, &amp;QAction::triggered, this, &amp;MainWindow::cut);
    editMenu-&gt;addAction(cutAct);
    editToolBar-&gt;addAction(cutAct);

    const QIcon copyIcon = QIcon::fromTheme(&quot;edit-copy&quot;, QIcon(&quot;:/images/copy.png&quot;));
    copyAct = new QAction(copyIcon, tr(&quot;&amp;Copy&quot;), this);
    copyAct-&gt;setShortcuts(QKeySequence::Copy);
    copyAct-&gt;setStatusTip(tr(&quot;Copy the current selection's contents to the &quot;
                             &quot;clipboard&quot;));
    connect(copyAct, &amp;QAction::triggered, this, &amp;MainWindow::copy);
    editMenu-&gt;addAction(copyAct);
    editToolBar-&gt;addAction(copyAct);

    const QIcon pasteIcon = QIcon::fromTheme(&quot;edit-paste&quot;, QIcon(&quot;:/images/paste.png&quot;));
    pasteAct = new QAction(pasteIcon, tr(&quot;&amp;Paste&quot;), this);
    pasteAct-&gt;setShortcuts(QKeySequence::Paste);
    pasteAct-&gt;setStatusTip(tr(&quot;Paste the clipboard's contents into the current &quot;
                              &quot;selection&quot;));
    connect(pasteAct, &amp;QAction::triggered, this, &amp;MainWindow::paste);
    editMenu-&gt;addAction(pasteAct);
    editToolBar-&gt;addAction(pasteAct);
#endif

    windowMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Window&quot;));
    connect(windowMenu, &amp;QMenu::aboutToShow, this, &amp;MainWindow::updateWindowMenu);

    closeAct = new QAction(tr(&quot;Cl&amp;ose&quot;), this);
    closeAct-&gt;setStatusTip(tr(&quot;Close the active window&quot;));
    connect(closeAct, &amp;QAction::triggered,
            mdiArea, &amp;QMdiArea::closeActiveSubWindow);

    closeAllAct = new QAction(tr(&quot;Close &amp;All&quot;), this);
    closeAllAct-&gt;setStatusTip(tr(&quot;Close all the windows&quot;));
    connect(closeAllAct, &amp;QAction::triggered, mdiArea, &amp;QMdiArea::closeAllSubWindows);

    tileAct = new QAction(tr(&quot;&amp;Tile&quot;), this);
    tileAct-&gt;setStatusTip(tr(&quot;Tile the windows&quot;));
    connect(tileAct, &amp;QAction::triggered, mdiArea, &amp;QMdiArea::tileSubWindows);

    cascadeAct = new QAction(tr(&quot;&amp;Cascade&quot;), this);
    cascadeAct-&gt;setStatusTip(tr(&quot;Cascade the windows&quot;));
    connect(cascadeAct, &amp;QAction::triggered, mdiArea, &amp;QMdiArea::cascadeSubWindows);

    nextAct = new QAction(tr(&quot;Ne&amp;xt&quot;), this);
    nextAct-&gt;setShortcuts(QKeySequence::NextChild);
    nextAct-&gt;setStatusTip(tr(&quot;Move the focus to the next window&quot;));
    connect(nextAct, &amp;QAction::triggered, mdiArea, &amp;QMdiArea::activateNextSubWindow);

    previousAct = new QAction(tr(&quot;Pre&amp;vious&quot;), this);
    previousAct-&gt;setShortcuts(QKeySequence::PreviousChild);
    previousAct-&gt;setStatusTip(tr(&quot;Move the focus to the previous &quot;
                                 &quot;window&quot;));
    connect(previousAct, &amp;QAction::triggered, mdiArea, &amp;QMdiArea::activatePreviousSubWindow);

    windowMenuSeparatorAct = new QAction(this);
    windowMenuSeparatorAct-&gt;setSeparator(true);

    updateWindowMenu();

    menuBar()-&gt;addSeparator();

    QMenu *helpMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Help&quot;));

    QAction *aboutAct = helpMenu-&gt;addAction(tr(&quot;&amp;About&quot;), this, &amp;MainWindow::about);
    aboutAct-&gt;setStatusTip(tr(&quot;Show the application's About box&quot;));

    QAction *aboutQtAct = helpMenu-&gt;addAction(tr(&quot;About &amp;Qt&quot;), qApp, &amp;QApplication::aboutQt);
    aboutQtAct-&gt;setStatusTip(tr(&quot;Show the Qt library's About box&quot;));
}

void MainWindow::createStatusBar()
{
    statusBar()-&gt;showMessage(tr(&quot;Ready&quot;));
}

void MainWindow::readSettings()
{
    QSettings settings(QCoreApplication::organizationName(), QCoreApplication::applicationName());
    const QByteArray geometry = settings.value(&quot;geometry&quot;, QByteArray()).toByteArray();
    if (geometry.isEmpty()) {
        const QRect availableGeometry = QApplication::desktop()-&gt;availableGeometry(this);
        resize(availableGeometry.width() / 3, availableGeometry.height() / 2);
        move((availableGeometry.width() - width()) / 2,
             (availableGeometry.height() - height()) / 2);
    } else {
        restoreGeometry(geometry);
    }
}

void MainWindow::writeSettings()
{
    QSettings settings(QCoreApplication::organizationName(), QCoreApplication::applicationName());
    settings.setValue(&quot;geometry&quot;, saveGeometry());
}

MdiChild *MainWindow::activeMdiChild() const
{
    if (QMdiSubWindow *activeSubWindow = mdiArea-&gt;activeSubWindow())
        return qobject_cast&lt;MdiChild *&gt;(activeSubWindow-&gt;widget());
    return 0;
}

QMdiSubWindow *MainWindow::findMdiChild(const QString &amp;fileName) const
{
    QString canonicalFilePath = QFileInfo(fileName).canonicalFilePath();

    foreach (QMdiSubWindow *window, mdiArea-&gt;subWindowList()) {
        MdiChild *mdiChild = qobject_cast&lt;MdiChild *&gt;(window-&gt;widget());
        if (mdiChild-&gt;currentFile() == canonicalFilePath)
            return window;
    }
    return 0;
}

void MainWindow::switchLayoutDirection()
{
    if (layoutDirection() == Qt::LeftToRight)
        QGuiApplication::setLayoutDirection(Qt::RightToLeft);
    else
        QGuiApplication::setLayoutDirection(Qt::LeftToRight);
}

</db:programlisting>
</db:article>
