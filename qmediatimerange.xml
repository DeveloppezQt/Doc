<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaTimeRange Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediatimerange.xml">QMediaTimeRange</db:link> class represents a set of zero or more disjoint time intervals.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaTimeRange</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaTimeRange is part of <db:simplelist><db:member>multimedia</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qmediatimerange.xml#earliestTime">earliestTime</db:link>(), <db:link xlink:href="qmediatimerange.xml#latestTime">latestTime</db:link>(), <db:link xlink:href="qmediatimerange.xml#intervals">intervals</db:link>() and <db:link xlink:href="qmediatimerange.xml#isEmpty">isEmpty</db:link>() methods are used to get information about the current time range.</db:para>
<db:para>The <db:link xlink:href="qmediatimerange.xml#addInterval">addInterval</db:link>(), <db:link xlink:href="qmediatimerange.xml#removeInterval">removeInterval</db:link>() and <db:link xlink:href="qmediatimerange.xml#clear">clear</db:link>() methods are used to modify the current time range.</db:para>
<db:para>When adding or removing intervals from the time range, existing intervals within the range may be expanded, trimmed, deleted, merged or split to ensure that all intervals within the time range remain distinct and disjoint. As a consequence, all intervals added or removed from a time range must be <db:link xlink:href="qmediatimeinterval.xml#isNormal">normal</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimeinterval.xml">QMediaTimeInterval</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaTimeRange">
<db:title>QMediaTimeRange::QMediaTimeRange()</db:title>
<db:para>Constructs an empty time range.</db:para>
</db:section>
<db:section xml:id="QMediaTimeRange-1">
<db:title>QMediaTimeRange::QMediaTimeRange(const QMediaTimeInterval &amp;<db:emphasis>interval</db:emphasis>)</db:title>
<db:para>Constructs a time range that contains an initial interval, <db:code role="parameter">interval</db:code>.</db:para>
<db:para>If <db:code role="parameter">interval</db:code> is not <db:link xlink:href="qmediatimeinterval.xml#isNormal">normal</db:link>, the resulting time range will be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#addInterval">addInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMediaTimeRange-3">
<db:title>QMediaTimeRange::QMediaTimeRange(qint64 <db:emphasis>start</db:emphasis>, qint64 <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Constructs a time range that contains an initial interval from <db:code role="parameter">start</db:code> to <db:code role="parameter">end</db:code> inclusive.</db:para>
<db:para>If the interval is not <db:link xlink:href="qmediatimeinterval.xml#isNormal">normal</db:link>, the resulting time range will be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#addInterval">addInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMediaTimeRange-2">
<db:title>QMediaTimeRange::QMediaTimeRange(const QMediaTimeRange &amp;<db:emphasis>range</db:emphasis>)</db:title>
<db:para>Constructs a time range by copying another time <db:code role="parameter">range</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaTimeRange">
<db:title>[noexcept] QMediaTimeRange::~QMediaTimeRange()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="addInterval">
<db:title>void QMediaTimeRange::addInterval(const QMediaTimeInterval &amp;<db:emphasis>interval</db:emphasis>)</db:title>
<db:para>Adds the specified <db:code role="parameter">interval</db:code> to the time range.</db:para>
<db:para>Adding intervals which are not <db:link xlink:href="qmediatimeinterval.xml#isNormal">normal</db:link> is invalid, and will be ignored.</db:para>
<db:para>If the specified interval is adjacent to, or overlaps existing intervals within the time range, these intervals will be merged.</db:para>
<db:para>This operation takes linear time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#removeInterval">removeInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addInterval-1">
<db:title>void QMediaTimeRange::addInterval(qint64 <db:emphasis>start</db:emphasis>, qint64 <db:emphasis>end</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the interval specified by <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> to the time range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#addInterval">addInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addTimeRange">
<db:title>void QMediaTimeRange::addTimeRange(const QMediaTimeRange &amp;<db:emphasis>range</db:emphasis>)</db:title>
<db:para>Adds each of the intervals in <db:code role="parameter">range</db:code> to this time range.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qmediatimerange.xml#addInterval">addInterval</db:link>() for each interval in <db:code role="parameter">range</db:code>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QMediaTimeRange::clear()</db:title>
<db:para>Removes all intervals from the time range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#removeInterval">removeInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QMediaTimeRange::contains(qint64 <db:emphasis>time</db:emphasis>) const</db:title>
<db:para>Returns true if the specified <db:code role="parameter">time</db:code> lies within the time range.</db:para>
</db:section>
<db:section xml:id="earliestTime">
<db:title>qint64 QMediaTimeRange::earliestTime() const</db:title>
<db:para>Returns the earliest time within the time range.</db:para>
<db:para>For empty time ranges, this value is equal to zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#latestTime">latestTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intervals">
<db:title>QList&lt;QMediaTimeInterval&gt; QMediaTimeRange::intervals() const</db:title>
<db:para>Returns the list of intervals covered by this time range.</db:para>
</db:section>
<db:section xml:id="isContinuous">
<db:title>bool QMediaTimeRange::isContinuous() const</db:title>
<db:para>Returns true if the time range consists of a continuous interval. That is, there is one or fewer disjoint intervals within the time range.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QMediaTimeRange::isEmpty() const</db:title>
<db:para>Returns true if there are no intervals within the time range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#intervals">intervals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="latestTime">
<db:title>qint64 QMediaTimeRange::latestTime() const</db:title>
<db:para>Returns the latest time within the time range.</db:para>
<db:para>For empty time ranges, this value is equal to zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#earliestTime">earliestTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeInterval">
<db:title>void QMediaTimeRange::removeInterval(const QMediaTimeInterval &amp;<db:emphasis>interval</db:emphasis>)</db:title>
<db:para>Removes the specified <db:code role="parameter">interval</db:code> from the time range.</db:para>
<db:para>Removing intervals which are not <db:link xlink:href="qmediatimeinterval.xml#isNormal">normal</db:link> is invalid, and will be ignored.</db:para>
<db:para>Intervals within the time range will be trimmed, split or deleted such that no intervals within the time range include any part of the target interval.</db:para>
<db:para>This operation takes linear time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#addInterval">addInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeInterval-1">
<db:title>void QMediaTimeRange::removeInterval(qint64 <db:emphasis>start</db:emphasis>, qint64 <db:emphasis>end</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Removes the interval specified by <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> from the time range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml#removeInterval">removeInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeTimeRange">
<db:title>void QMediaTimeRange::removeTimeRange(const QMediaTimeRange &amp;<db:emphasis>range</db:emphasis>)</db:title>
<db:para>Removes each of the intervals in <db:code role="parameter">range</db:code> from this time range.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qmediatimerange.xml#removeInterval">removeInterval</db:link>() for each interval in <db:code role="parameter">range</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QMediaTimeRange &amp;QMediaTimeRange::operator+=(const QMediaTimeInterval &amp;<db:emphasis>interval</db:emphasis>)</db:title>
<db:para>Adds the specified <db:code role="parameter">interval</db:code> to the time range and returns the result.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq-1">
<db:title>QMediaTimeRange &amp;QMediaTimeRange::operator+=(const QMediaTimeRange &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Adds each interval in <db:code role="parameter">other</db:code> to the time range and returns the result.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QMediaTimeRange &amp;QMediaTimeRange::operator-=(const QMediaTimeInterval &amp;<db:emphasis>interval</db:emphasis>)</db:title>
<db:para>Removes the specified <db:code role="parameter">interval</db:code> from the time range and returns the result.</db:para>
</db:section>
<db:section xml:id="operator--eq-1">
<db:title>QMediaTimeRange &amp;QMediaTimeRange::operator-=(const QMediaTimeRange &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Removes each interval in <db:code role="parameter">other</db:code> from the time range and returns the result.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QMediaTimeRange &amp;QMediaTimeRange::operator=(const QMediaTimeInterval &amp;<db:emphasis>interval</db:emphasis>)</db:title>
<db:para>Sets the time range to a single continuous interval, <db:code role="parameter">interval</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QMediaTimeRange &amp;QMediaTimeRange::operator=(const QMediaTimeRange &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Takes a copy of the <db:code role="parameter">other</db:code> time range and returns itself.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QMediaTimeInterval &amp;<db:emphasis>a</db:emphasis>, const QMediaTimeInterval &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">a</db:code> is not exactly equal to <db:code role="parameter">b</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(const QMediaTimeRange &amp;<db:emphasis>a</db:emphasis>, const QMediaTimeRange &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns true if one or more intervals in <db:code role="parameter">a</db:code> are not present in <db:code role="parameter">b</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QMediaTimeRange operator+(const QMediaTimeRange &amp;<db:emphasis>r1</db:emphasis>, const QMediaTimeRange &amp;<db:emphasis>r2</db:emphasis>)</db:title>
<db:para>Returns a time range containing the union between <db:code role="parameter">r1</db:code> and <db:code role="parameter">r2</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-">
<db:title>QMediaTimeRange operator-(const QMediaTimeRange &amp;<db:emphasis>r1</db:emphasis>, const QMediaTimeRange &amp;<db:emphasis>r2</db:emphasis>)</db:title>
<db:para>Returns a time range containing <db:code role="parameter">r2</db:code> subtracted from <db:code role="parameter">r1</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QMediaTimeInterval &amp;<db:emphasis>a</db:emphasis>, const QMediaTimeInterval &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">a</db:code> is exactly equal to <db:code role="parameter">b</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QMediaTimeRange &amp;<db:emphasis>a</db:emphasis>, const QMediaTimeRange &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns true if all intervals in <db:code role="parameter">a</db:code> are present in <db:code role="parameter">b</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
