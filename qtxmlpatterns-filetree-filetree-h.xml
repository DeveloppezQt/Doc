<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>File System Example</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using Qt XML Patterns for querying non-XML data that is modeled to look like XML.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtCore/QFileInfo&gt;
#include &lt;QtCore/QDir&gt;
#include &lt;QtCore/QVector&gt;
#include &lt;QtXmlPatterns/QSimpleXmlNodeModel&gt;

class FileTree : public QSimpleXmlNodeModel
{
public:
    FileTree(const QXmlNamePool &amp;namePool);

    QXmlNodeModelIndex nodeFor(const QString &amp;fileName) const;

    virtual QXmlNodeModelIndex::DocumentOrder compareOrder(const QXmlNodeModelIndex&amp;, const QXmlNodeModelIndex&amp;) const;
    virtual QXmlName name(const QXmlNodeModelIndex &amp;node) const;
    virtual QUrl documentUri(const QXmlNodeModelIndex &amp;node) const;
    virtual QXmlNodeModelIndex::NodeKind kind(const QXmlNodeModelIndex &amp;node) const;
    virtual QXmlNodeModelIndex root(const QXmlNodeModelIndex &amp;node) const;
    virtual QVariant typedValue(const QXmlNodeModelIndex &amp;node) const;
protected:
    virtual QVector&lt;QXmlNodeModelIndex&gt; attributes(const QXmlNodeModelIndex &amp;element) const;
    virtual QXmlNodeModelIndex nextFromSimpleAxis(SimpleAxis, const QXmlNodeModelIndex&amp;) const;

private:
    enum Type {
        File,
        Directory,
        AttributeFileName,
        AttributeFilePath,
        AttributeSize,
        AttributeMIMEType,
        AttributeSuffix
    };

    inline QXmlNodeModelIndex nextSibling(const QXmlNodeModelIndex &amp;nodeIndex,
                                          const QFileInfo &amp;from,
                                          qint8 offset) const;
    inline const QFileInfo &amp;toFileInfo(const QXmlNodeModelIndex &amp;index) const;
    inline QXmlNodeModelIndex toNodeIndex(const QFileInfo &amp;index,
                                          Type attributeName) const;
    inline QXmlNodeModelIndex toNodeIndex(const QFileInfo &amp;index) const;

    /*
     One possible improvement is to use a hash, and use the &amp;*&amp;value()
     trick to get a pointer, which would be stored in data() instead
     of the index.
    */
    mutable QVector&lt;QFileInfo&gt;  m_fileInfos;
    const QDir::Filters         m_filterAllowAll;
    const QDir::SortFlags       m_sortFlags;
    QVector&lt;QXmlName&gt;           m_names;
};


</db:programlisting>
</db:article>
