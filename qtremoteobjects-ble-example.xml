<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtRemoteObjects Bluetooth LE Example</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="qtbluetooth-module.xml">QtBluetooth</db:link> Low Energy (BT LE or BLE for short) as a transport medium with Qt Remote Objects.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This is achieved by wrapping the bluetooth low energy transport logic in a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>.</db:para>
<db:para>The example consists of a client and server application which communicate over the bluetooth low energy radio.</db:para>
<db:para>The server-side is a simple heater object which is either turned ON (heats) or OFF (cools). The temperature changes periodically and this temperature is shown by the client-side GUI. This changing temperature value flows from the server to client as remote object property. The client-side can control the ON/OFF status of the server-side heater object. This data flows similarly as a remote object property.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>Bluetooth Low Energy is inherently a client/server architecture, where server advertises its services and client discovers them, after which the data can be transferred.</db:para>
<db:para>The following Figure illustrates the main steps when running the example:</db:para>
<db:mediaobject>
<db:alt>&quot;Main phases when starting the example&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/ble_example_flow.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="data-flow">
<db:title>Data flow</db:title>
<db:para>The data flows over the Bluetooth Low Energy medium. This is implemented with two GATT characteristics, one for each direction. This is illustrated by the following Figure:</db:para>
<db:mediaobject>
<db:alt>&quot;BT LE IO Device&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/ble_example_iodevice.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="known-limitations">
<db:title>Known limitations</db:title>
<db:para>The example relies on <db:link xlink:href="qlowenergycontroller.xml#connected">QLowEnergyController::connected</db:link>() and <db:link xlink:href="qlowenergycontroller.xml#disconnected">QLowEnergyController::disconnected</db:link>() signals to detect client connection and disconnection. These signals are not always reliable on the server (peripheral) side on all platforms. This is typically not a problem when connecting for the first time, but may be an issue on subsequent reconnections if the server is not restarted.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtremoteobjects.git/tree/examples/remoteobjects/ble?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
