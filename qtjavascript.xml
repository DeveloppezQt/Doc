<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Making Applications Scriptable</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>incorporating JavaScript in Qt applications.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides support for application scripting with JavaScript. The following guides and references cover aspects of programming with JavaScript and Qt.</db:para>
<db:section xml:id="scripting-classes">
<db:title>Scripting Classes</db:title>
<db:para>The following classes add scripting capabilities to Qt applications.</db:para>
</db:section>
<db:section xml:id="basic-usage">
<db:title>Basic Usage</db:title>
<db:para>To evaluate script code, you create a QJSEngine and call its evaluate() function, passing the script code (text) to evaluate as argument.</db:para>
<db:programlisting language="cpp">QJSEngine engine;
qDebug() &lt;&lt; &quot;the magic number is:&quot; &lt;&lt; engine.evaluate(&quot;1 + 2&quot;).toNumber();
</db:programlisting>
<db:para>The return value will be the result of the evaluation (represented as a QJSValue object); this can be converted to standard C++ and Qt types.</db:para>
<db:para>Custom properties can be made available to scripts by registering them with the script engine. This is most easily done by setting properties of the script engine's <db:emphasis>Global Object</db:emphasis>:</db:para>
<db:programlisting language="cpp">engine.globalObject().setProperty(&quot;foo&quot;, 123);
qDebug() &lt;&lt; &quot;foo times two is:&quot; &lt;&lt; engine.evaluate(&quot;foo * 2&quot;).toNumber();
</db:programlisting>
<db:para>This places the properties in the script environment, thus making them available to script code.</db:para>
</db:section>
<db:section xml:id="making-a-qobject-available-to-the-script-engine">
<db:title>Making a QObject Available to the Script Engine</db:title>
<db:para>Any <db:link xlink:href="qobject.xml">QObject</db:link>-based instance can be made available for use with scripts.</db:para>
<db:para>When a <db:link xlink:href="qobject.xml">QObject</db:link> is passed to the QJSEngine::newQObject() function, a Qt Script wrapper object is created that can be used to make the <db:link xlink:href="qobject.xml">QObject</db:link>'s signals, slots, properties, and child objects available to scripts.</db:para>
<db:para>Here's an example of making an instance of a <db:link xlink:href="qobject.xml">QObject</db:link> subclass available to script code under the name &quot;myObject&quot;:</db:para>
<db:programlisting language="cpp">QJSEngine engine;
QObject *someObject = new MyObject;
QJSValue objectValue = engine.newQObject(someObject);
engine.globalObject().setProperty(&quot;myObject&quot;, objectValue);
</db:programlisting>
<db:para>This will create a global variable called myObject in the script environment. The variable serves as a proxy to the underlying C++ object. Note that the name of the script variable can be anything; i.e., it is not dependent upon QObject::objectName().</db:para>
</db:section>
</db:article>
