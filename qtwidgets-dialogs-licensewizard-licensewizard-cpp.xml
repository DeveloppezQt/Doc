<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>License Wizard Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The License Wizard example shows how to implement complex wizards in Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;
#include &lt;QPrinter&gt;
#include &lt;QPrintDialog&gt;

#include &quot;licensewizard.h&quot;

LicenseWizard::LicenseWizard(QWidget *parent)
    : QWizard(parent)
{
    setPage(Page_Intro, new IntroPage);
    setPage(Page_Evaluate, new EvaluatePage);
    setPage(Page_Register, new RegisterPage);
    setPage(Page_Details, new DetailsPage);
    setPage(Page_Conclusion, new ConclusionPage);

    setStartId(Page_Intro);

#ifndef Q_OS_MAC
    setWizardStyle(ModernStyle);
#endif
    setOption(HaveHelpButton, true);
    setPixmap(QWizard::LogoPixmap, QPixmap(&quot;:/images/logo.png&quot;));

    connect(this, SIGNAL(helpRequested()), this, SLOT(showHelp()));

    setWindowTitle(tr(&quot;License Wizard&quot;));
}

void LicenseWizard::showHelp()
{
    static QString lastHelpMessage;

    QString message;

    switch (currentId()) {
    case Page_Intro:
        message = tr(&quot;The decision you make here will affect which page you &quot;
                     &quot;get to see next.&quot;);
        break;
    case Page_Evaluate:
        message = tr(&quot;Make sure to provide a valid email address, such as &quot;
                     &quot;toni.buddenbrook@example.de.&quot;);
        break;
    case Page_Register:
        message = tr(&quot;If you don't provide an upgrade key, you will be &quot;
                     &quot;asked to fill in your details.&quot;);
        break;
    case Page_Details:
        message = tr(&quot;Make sure to provide a valid email address, such as &quot;
                     &quot;thomas.gradgrind@example.co.uk.&quot;);
        break;
    case Page_Conclusion:
        message = tr(&quot;You must accept the terms and conditions of the &quot;
                     &quot;license to proceed.&quot;);
        break;
    default:
        message = tr(&quot;This help is likely not to be of any help.&quot;);
    }

    if (lastHelpMessage == message)
        message = tr(&quot;Sorry, I already gave what help I could. &quot;
                     &quot;Maybe you should try asking a human?&quot;);

    QMessageBox::information(this, tr(&quot;License Wizard Help&quot;), message);

    lastHelpMessage = message;
}

IntroPage::IntroPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Introduction&quot;));
    setPixmap(QWizard::WatermarkPixmap, QPixmap(&quot;:/images/watermark.png&quot;));

    topLabel = new QLabel(tr(&quot;This wizard will help you register your copy of &quot;
                             &quot;&lt;i&gt;Super Product One&lt;/i&gt;&amp;trade; or start &quot;
                             &quot;evaluating the product.&quot;));
    topLabel-&gt;setWordWrap(true);

    registerRadioButton = new QRadioButton(tr(&quot;&amp;Register your copy&quot;));
    evaluateRadioButton = new QRadioButton(tr(&quot;&amp;Evaluate the product for 30 &quot;
                                              &quot;days&quot;));
    registerRadioButton-&gt;setChecked(true);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(topLabel);
    layout-&gt;addWidget(registerRadioButton);
    layout-&gt;addWidget(evaluateRadioButton);
    setLayout(layout);
}

int IntroPage::nextId() const
{
    if (evaluateRadioButton-&gt;isChecked()) {
        return LicenseWizard::Page_Evaluate;
    } else {
        return LicenseWizard::Page_Register;
    }
}

EvaluatePage::EvaluatePage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Evaluate &lt;i&gt;Super Product One&lt;/i&gt;&amp;trade;&quot;));
    setSubTitle(tr(&quot;Please fill both fields. Make sure to provide a valid &quot;
                   &quot;email address (e.g., john.smith@example.com).&quot;));

    nameLabel = new QLabel(tr(&quot;N&amp;ame:&quot;));
    nameLineEdit = new QLineEdit;
    nameLabel-&gt;setBuddy(nameLineEdit);

    emailLabel = new QLabel(tr(&quot;&amp;Email address:&quot;));
    emailLineEdit = new QLineEdit;
    emailLineEdit-&gt;setValidator(new QRegExpValidator(QRegExp(&quot;.*@.*&quot;), this));
    emailLabel-&gt;setBuddy(emailLineEdit);

    registerField(&quot;evaluate.name*&quot;, nameLineEdit);
    registerField(&quot;evaluate.email*&quot;, emailLineEdit);

    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(nameLabel, 0, 0);
    layout-&gt;addWidget(nameLineEdit, 0, 1);
    layout-&gt;addWidget(emailLabel, 1, 0);
    layout-&gt;addWidget(emailLineEdit, 1, 1);
    setLayout(layout);
}

int EvaluatePage::nextId() const
{
    return LicenseWizard::Page_Conclusion;
}

RegisterPage::RegisterPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Register Your Copy of &lt;i&gt;Super Product One&lt;/i&gt;&amp;trade;&quot;));
    setSubTitle(tr(&quot;If you have an upgrade key, please fill in &quot;
                   &quot;the appropriate field.&quot;));

    nameLabel = new QLabel(tr(&quot;N&amp;ame:&quot;));
    nameLineEdit = new QLineEdit;
    nameLabel-&gt;setBuddy(nameLineEdit);

    upgradeKeyLabel = new QLabel(tr(&quot;&amp;Upgrade key:&quot;));
    upgradeKeyLineEdit = new QLineEdit;
    upgradeKeyLabel-&gt;setBuddy(upgradeKeyLineEdit);

    registerField(&quot;register.name*&quot;, nameLineEdit);
    registerField(&quot;register.upgradeKey&quot;, upgradeKeyLineEdit);

    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(nameLabel, 0, 0);
    layout-&gt;addWidget(nameLineEdit, 0, 1);
    layout-&gt;addWidget(upgradeKeyLabel, 1, 0);
    layout-&gt;addWidget(upgradeKeyLineEdit, 1, 1);
    setLayout(layout);
}

int RegisterPage::nextId() const
{
    if (upgradeKeyLineEdit-&gt;text().isEmpty()) {
        return LicenseWizard::Page_Details;
    } else {
        return LicenseWizard::Page_Conclusion;
    }
}

DetailsPage::DetailsPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Fill In Your Details&quot;));
    setSubTitle(tr(&quot;Please fill all three fields. Make sure to provide a valid &quot;
                   &quot;email address (e.g., tanaka.aya@example.co.jp).&quot;));

    companyLabel = new QLabel(tr(&quot;&amp;Company name:&quot;));
    companyLineEdit = new QLineEdit;
    companyLabel-&gt;setBuddy(companyLineEdit);

    emailLabel = new QLabel(tr(&quot;&amp;Email address:&quot;));
    emailLineEdit = new QLineEdit;
    emailLineEdit-&gt;setValidator(new QRegExpValidator(QRegExp(&quot;.*@.*&quot;), this));
    emailLabel-&gt;setBuddy(emailLineEdit);

    postalLabel = new QLabel(tr(&quot;&amp;Postal address:&quot;));
    postalLineEdit = new QLineEdit;
    postalLabel-&gt;setBuddy(postalLineEdit);

    registerField(&quot;details.company*&quot;, companyLineEdit);
    registerField(&quot;details.email*&quot;, emailLineEdit);
    registerField(&quot;details.postal*&quot;, postalLineEdit);

    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(companyLabel, 0, 0);
    layout-&gt;addWidget(companyLineEdit, 0, 1);
    layout-&gt;addWidget(emailLabel, 1, 0);
    layout-&gt;addWidget(emailLineEdit, 1, 1);
    layout-&gt;addWidget(postalLabel, 2, 0);
    layout-&gt;addWidget(postalLineEdit, 2, 1);
    setLayout(layout);
}

int DetailsPage::nextId() const
{
    return LicenseWizard::Page_Conclusion;
}

ConclusionPage::ConclusionPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Complete Your Registration&quot;));
    setPixmap(QWizard::WatermarkPixmap, QPixmap(&quot;:/images/watermark.png&quot;));

    bottomLabel = new QLabel;
    bottomLabel-&gt;setWordWrap(true);

    agreeCheckBox = new QCheckBox(tr(&quot;I agree to the terms of the license&quot;));

    registerField(&quot;conclusion.agree*&quot;, agreeCheckBox);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(bottomLabel);
    layout-&gt;addWidget(agreeCheckBox);
    setLayout(layout);
}

int ConclusionPage::nextId() const
{
    return -1;
}

void ConclusionPage::initializePage()
{
    QString licenseText;

    if (wizard()-&gt;hasVisitedPage(LicenseWizard::Page_Evaluate)) {
        licenseText = tr(&quot;&lt;u&gt;Evaluation License Agreement:&lt;/u&gt; &quot;
                         &quot;You can use this software for 30 days and make one &quot;
                         &quot;backup, but you are not allowed to distribute it.&quot;);
    } else if (wizard()-&gt;hasVisitedPage(LicenseWizard::Page_Details)) {
        licenseText = tr(&quot;&lt;u&gt;First-Time License Agreement:&lt;/u&gt; &quot;
                         &quot;You can use this software subject to the license &quot;
                         &quot;you will receive by email.&quot;);
    } else {
        licenseText = tr(&quot;&lt;u&gt;Upgrade License Agreement:&lt;/u&gt; &quot;
                         &quot;This software is licensed under the terms of your &quot;
                         &quot;current license.&quot;);
    }
    bottomLabel-&gt;setText(licenseText);
}

void ConclusionPage::setVisible(bool visible)
{
    QWizardPage::setVisible(visible);

    if (visible) {
        wizard()-&gt;setButtonText(QWizard::CustomButton1, tr(&quot;&amp;Print&quot;));
        wizard()-&gt;setOption(QWizard::HaveCustomButton1, true);
        connect(wizard(), SIGNAL(customButtonClicked(int)),
                this, SLOT(printButtonClicked()));
    } else {
        wizard()-&gt;setOption(QWizard::HaveCustomButton1, false);
        disconnect(wizard(), SIGNAL(customButtonClicked(int)),
                   this, SLOT(printButtonClicked()));
    }
}

void ConclusionPage::printButtonClicked()
{
#if !defined(QT_NO_PRINTER) &amp;&amp; !defined(QT_NO_PRINTDIALOG)
    QPrinter printer;
    QPrintDialog dialog(&amp;printer, this);
    if (dialog.exec())
        QMessageBox::warning(this, tr(&quot;Print License&quot;),
                             tr(&quot;As an environmentally friendly measure, the &quot;
                                &quot;license text will not actually be printed.&quot;));
#endif
}

</db:programlisting>
</db:article>
