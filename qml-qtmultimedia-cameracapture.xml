<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CameraCapture QML Type</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>An interface for capturing camera images.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtMultimedia 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>CameraCapture is part of <db:simplelist><db:member>multimedia_qml</db:member><db:member>camera_qml</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This type allows you to capture still images and be notified when they are available or saved to disk. You can adjust the resolution of the captured image and where the saved image should go.</db:para>
<db:para><db:link xlink:href="qml-qtmultimedia-cameracapture.xml">CameraCapture</db:link> is a child of a <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> (as the <db:code>imageCapture</db:code> property) and cannot be created directly.</db:para>
<db:programlisting language="qml">Item {
    width: 640
    height: 360

    Camera {
        id: camera

        imageCapture {
            onImageCaptured: {
                // Show the preview in an Image
                photoPreview.source = preview
            }
        }
    }

    VideoOutput {
        source: camera
        focus : visible // to receive focus and capture key events when visible
        anchors.fill: parent

        MouseArea {
            anchors.fill: parent;
            onClicked: camera.imageCapture.capture();
        }
    }

    Image {
        id: photoPreview
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="capturedImagePath-prop">
<db:title>[read-only] capturedImagePath : string</db:title>
<db:para>This property holds the location of the last captured image.</db:para>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : string</db:title>
<db:para>This property holds the error message related to the last capture.</db:para>
</db:section>
<db:section xml:id="ready-prop">
<db:title>[read-only] ready : bool</db:title>
<db:para>This property holds a bool value indicating whether the camera is ready to capture photos or not.</db:para>
<db:para>Calling <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#capture-method">capture</db:link>() while <db:emphasis>ready</db:emphasis> is <db:code>false</db:code> is not permitted and results in an error.</db:para>
</db:section>
<db:section xml:id="resolution-prop">
<db:title>resolution : size</db:title>
<db:para>This property holds the resolution/size of the image to be captured. If empty, the system chooses the appropriate resolution.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="captureFailed-signal">
<db:title>captureFailed(<db:emphasis>requestId</db:emphasis>, <db:emphasis>message</db:emphasis>)</db:title>
<db:para>This signal is emitted when an error occurs during capture with <db:code role="parameter">requestId</db:code>. A descriptive message is available in <db:code role="parameter">message</db:code>.</db:para>
<db:para>The corresponding handler is <db:code>onCaptureFailed</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCaptureFailed</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="imageCaptured-signal">
<db:title>imageCaptured(<db:emphasis>requestId</db:emphasis>, <db:emphasis>preview</db:emphasis>)</db:title>
<db:para>This signal is emitted when an image with <db:code role="parameter">requestId</db:code> has been captured but not yet saved to the filesystem. The <db:code role="parameter">preview</db:code> parameter can be used as the URL supplied to an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>.</db:para>
<db:para>The corresponding handler is <db:code>onImageCaptured</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onImageCaptured</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageSaved-signal">imageSaved</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="imageMetadataAvailable-signal">
<db:title>imageMetadataAvailable(<db:emphasis>requestId</db:emphasis>, <db:emphasis>key</db:emphasis>, <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted when the image with <db:code role="parameter">requestId</db:code> has new metadata available with the key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code>.</db:para>
<db:para>The corresponding handler is <db:code>onImageMetadataAvailable</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onImageMetadataAvailable</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageCaptured-signal">imageCaptured</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="imageSaved-signal">
<db:title>imageSaved(<db:emphasis>requestId</db:emphasis>, <db:emphasis>path</db:emphasis>)</db:title>
<db:para>This signal is emitted after the image with <db:code role="parameter">requestId</db:code> has been written to the filesystem. The <db:code role="parameter">path</db:code> is a local file path, not a URL.</db:para>
<db:para>The corresponding handler is <db:code>onImageSaved</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onImageSaved</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageCaptured-signal">imageCaptured</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="cancelCapture-method">
<db:title>cancelCapture()</db:title>
<db:para>Cancel pending image capture requests.</db:para>
</db:section>
<db:section xml:id="capture-method">
<db:title>capture()</db:title>
<db:para>Start image capture. The <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageCaptured-signal">imageCaptured</db:link> and <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageSaved-signal">imageSaved</db:link> signals will be emitted when the capture is complete.</db:para>
<db:para>The image will be captured to the default system location, typically <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::PicturesLocation</db:link>) for still imaged or <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::MoviesLocation</db:link>) for video.</db:para>
<db:para>Camera saves all the capture parameters like exposure settings or image processing parameters, so changes to camera parameters after capture() is called do not affect previous capture requests.</db:para>
<db:para>capture() returns the capture requestId parameter, used with imageExposed(), <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageCaptured-signal">imageCaptured</db:link>(), <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageMetadataAvailable-signal">imageMetadataAvailable</db:link>() and <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageSaved-signal">imageSaved</db:link>() signals.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-cameracapture.xml#ready-prop">ready</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="captureToLocation-method">
<db:title>captureToLocation(<db:emphasis>location</db:emphasis>)</db:title>
<db:para>Start image capture to specified <db:code role="parameter">location</db:code>. The <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageCaptured-signal">imageCaptured</db:link> and <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageSaved-signal">imageSaved</db:link> signals will be emitted when the capture is complete.</db:para>
<db:para>CameraCapture::captureToLocation returns the capture requestId parameter, used with imageExposed(), <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageCaptured-signal">imageCaptured</db:link>(), <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageMetadataAvailable-signal">imageMetadataAvailable</db:link>() and <db:link xlink:href="qml-qtmultimedia-cameracapture.xml#imageSaved-signal">imageSaved</db:link>() signals.</db:para>
<db:para>If the application is unable to write to the location specified by <db:code>location</db:code> the <db:link xlink:href="qml-qtmultimedia-cameracapture.xml">CameraCapture</db:link> will emit an error. The most likely reasons for the application to be unable to write to a location is that the path is wrong and the location does not exists, or the application does not have write permission for that location.</db:para>
</db:section>
<db:section xml:id="setMetadata-method">
<db:title>setMetadata(<db:emphasis>key</db:emphasis>, <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets a particular metadata <db:code role="parameter">key</db:code> to <db:code role="parameter">value</db:code> for the subsequent image captures.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
