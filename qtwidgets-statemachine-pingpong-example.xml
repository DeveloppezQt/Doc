<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Ping Pong States Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Ping Pong States example shows how to use parallel states together with custom events and transitions in <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example implements a statechart where two states communicate by posting events to the state machine. The state chart looks as follows:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pingpong-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code>pinger</db:code> and <db:code>ponger</db:code> states are parallel states, i.e. they are entered simultaneously and will take transitions independently of eachother.</db:para>
<db:para>The <db:code>pinger</db:code> state will post the first <db:code>ping</db:code> event upon entry; the <db:code>ponger</db:code> state will respond by posting a <db:code>pong</db:code> event; this will cause the <db:code>pinger</db:code> state to post a new <db:code>ping</db:code> event; and so on.</db:para>
<db:programlisting language="cpp">class PingEvent : public QEvent
{
public:
    PingEvent() : QEvent(QEvent::Type(QEvent::User+2))
        {}
};

class PongEvent : public QEvent
{
public:
    PongEvent() : QEvent(QEvent::Type(QEvent::User+3))
        {}
};
</db:programlisting>
<db:para>Two custom events are defined, <db:code>PingEvent</db:code> and <db:code>PongEvent</db:code>.</db:para>
<db:programlisting language="cpp">class Pinger : public QState
{
public:
    Pinger(QState *parent)
        : QState(parent) {}

protected:
    virtual void onEntry(QEvent *)
    {
        machine()-&gt;postEvent(new PingEvent());
        fprintf(stdout, &quot;ping?\n&quot;);
    }
};
</db:programlisting>
<db:para>The <db:code>Pinger</db:code> class defines a state that posts a <db:code>PingEvent</db:code> to the state machine when the state is entered.</db:para>
<db:programlisting language="cpp">class PingTransition : public QAbstractTransition
{
public:
    PingTransition() {}

protected:
    virtual bool eventTest(QEvent *e) {
        return (e-&gt;type() == QEvent::User+2);
    }
    virtual void onTransition(QEvent *)
    {
        machine()-&gt;postDelayedEvent(new PongEvent(), 500);
        fprintf(stdout, &quot;pong!\n&quot;);
    }
};
</db:programlisting>
<db:para>The <db:code>PingTransition</db:code> class defines a transition that is triggered by events of type <db:code>PingEvent</db:code>, and that posts a <db:code>PongEvent</db:code> (with a delay of 500 milliseconds) to the state machine when the transition is triggered.</db:para>
<db:programlisting language="cpp">class PongTransition : public QAbstractTransition
{
public:
    PongTransition() {}

protected:
    virtual bool eventTest(QEvent *e) {
        return (e-&gt;type() == QEvent::User+3);
    }
    virtual void onTransition(QEvent *)
    {
        machine()-&gt;postDelayedEvent(new PingEvent(), 500);
        fprintf(stdout, &quot;ping?\n&quot;);
    }
};
</db:programlisting>
<db:para>The <db:code>PongTransition</db:code> class defines a transition that is triggered by events of type <db:code>PongEvent</db:code>, and that posts a <db:code>PingEvent</db:code> (with a delay of 500 milliseconds) to the state machine when the transition is triggered.</db:para>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QCoreApplication app(argc, argv);

    QStateMachine machine;
    QState *group = new QState(QState::ParallelStates);
    group-&gt;setObjectName(&quot;group&quot;);
</db:programlisting>
<db:para>The main() function begins by creating a state machine and a parallel state group.</db:para>
<db:programlisting language="cpp">    Pinger *pinger = new Pinger(group);
    pinger-&gt;setObjectName(&quot;pinger&quot;);
    pinger-&gt;addTransition(new PongTransition());

    QState *ponger = new QState(group);
    ponger-&gt;setObjectName(&quot;ponger&quot;);
    ponger-&gt;addTransition(new PingTransition());
</db:programlisting>
<db:para>Next, the <db:code>pinger</db:code> and <db:code>ponger</db:code> states are created, with the parallel state group as their parent state. Note that the transitions are <db:emphasis>targetless</db:emphasis>. When such a transition is triggered, the source state won't be exited and re-entered; only the transition's onTransition() function will be called, and the state machine's configuration will remain the same, which is precisely what we want in this case.</db:para>
<db:programlisting language="cpp">    machine.addState(group);
    machine.setInitialState(group);
    machine.start();

    return app.exec();
}
</db:programlisting>
<db:para>Finally, the group is added to the state machine, the machine is started, and the application event loop is entered.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="statemachine/pingpong/main.cpp">statemachine/pingpong/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="statemachine/pingpong/pingpong.pro">statemachine/pingpong/pingpong.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
