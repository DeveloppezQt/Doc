<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebSockets MQTT Subscription Example</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Combining an MQTT client with a web socket connection.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;clientsubscription.h&quot;

#include &amp;lt;QtCore/QCoreApplication&amp;gt;
#include &amp;lt;QtCore/QCommandLineParser&amp;gt;
#include &amp;lt;QtCore/QLoggingCategory&amp;gt;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    QCoreApplication::setApplicationVersion(&quot;1.0&quot;);

    QCommandLineParser parser;
    parser.setApplicationDescription(QLatin1String(&quot;Websocket MQTT subscription tool&quot;));
    auto help = parser.addHelpOption();

    // Use http://www.hivemq.com/demos/websocket-client/ in browser to publish
    QCommandLineOption urlOption(QStringList() &amp;lt;&amp;lt; &quot;host&quot; &amp;lt;&amp;lt; &quot;url&quot; &amp;lt;&amp;lt; &quot;broker&quot;,
                                 QStringLiteral(&quot;Host to connect to, eg ws://broker.hivemq.com:8000/mqtt&quot;),
                                 &quot;host&quot;);
    parser.addOption(urlOption);

    QCommandLineOption subscriptionOption(QStringList() &amp;lt;&amp;lt; &quot;t&quot; &amp;lt;&amp;lt; &quot;topic&quot;,
                                          QStringLiteral(&quot;Topic to subscribe to&quot;), &quot;topic&quot;);
    parser.addOption(subscriptionOption);

    QCommandLineOption debugOption(QStringList() &amp;lt;&amp;lt; &quot;d&quot; &amp;lt;&amp;lt; &quot;debug&quot;,
                                   QStringLiteral(&quot;Enable Debug mode&quot;));
    parser.addOption(debugOption);

    QCommandLineOption versionOption(QStringList() &amp;lt;&amp;lt; &quot;v&quot; &amp;lt;&amp;lt; &quot;version&quot;,
                                     QStringLiteral(&quot;MQTT protocol version.\n3: MQTT 3.1\n4: MQTT 3.1.1&quot;),
                                     &quot;version&quot;, &quot;3&quot;);
    parser.addOption(versionOption);

    parser.process(a.arguments());

    const QString debugLog = QString::fromLatin1(&quot;qtdemo.websocket.mqtt*=%1&quot;).arg(
                                parser.isSet(debugOption) ? &quot;true&quot; : &quot;false&quot;);
    QLoggingCategory::setFilterRules(debugLog);

    ClientSubscription clientsub;
    clientsub.setUrl(QUrl(parser.value(urlOption)));
    clientsub.setTopic(parser.value(subscriptionOption));

    const QString versionString = parser.value(versionOption);

    if (versionString == &quot;4&quot;) {
        clientsub.setVersion(4);
    } else if (versionString == &quot;3&quot;) {
        clientsub.setVersion(3);
    } else {
        qInfo() &amp;lt;&amp;lt; &quot;Unknown MQTT version&quot;;
        return -2;
    }

    clientsub.connectAndSubscribe();
    return a.exec();
}

</db:programlisting>
</db:article>
