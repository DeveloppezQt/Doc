<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Styles Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Styles example illustrates how to create custom widget drawing styles using Qt, and demonstrates Qt's predefined styles.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;norwegianwoodstyle.h&quot;
#include &quot;widgetgallery.h&quot;

WidgetGallery::WidgetGallery(QWidget *parent)
    : QDialog(parent)
{
    originalPalette = QApplication::palette();

    styleComboBox = new QComboBox;
    styleComboBox-&amp;gt;addItem(&quot;NorwegianWood&quot;);
    styleComboBox-&amp;gt;addItems(QStyleFactory::keys());

    styleLabel = new QLabel(tr(&quot;&amp;amp;Style:&quot;));
    styleLabel-&amp;gt;setBuddy(styleComboBox);

    useStylePaletteCheckBox = new QCheckBox(tr(&quot;&amp;amp;Use style's standard palette&quot;));
    useStylePaletteCheckBox-&amp;gt;setChecked(true);

    disableWidgetsCheckBox = new QCheckBox(tr(&quot;&amp;amp;Disable widgets&quot;));

    createTopLeftGroupBox();
    createTopRightGroupBox();
    createBottomLeftTabWidget();
    createBottomRightGroupBox();
    createProgressBar();

    connect(styleComboBox, SIGNAL(activated(QString)),
            this, SLOT(changeStyle(QString)));
    connect(useStylePaletteCheckBox, SIGNAL(toggled(bool)),
            this, SLOT(changePalette()));
    connect(disableWidgetsCheckBox, SIGNAL(toggled(bool)),
            topLeftGroupBox, SLOT(setDisabled(bool)));
    connect(disableWidgetsCheckBox, SIGNAL(toggled(bool)),
            topRightGroupBox, SLOT(setDisabled(bool)));
    connect(disableWidgetsCheckBox, SIGNAL(toggled(bool)),
            bottomLeftTabWidget, SLOT(setDisabled(bool)));
    connect(disableWidgetsCheckBox, SIGNAL(toggled(bool)),
            bottomRightGroupBox, SLOT(setDisabled(bool)));

    QHBoxLayout *topLayout = new QHBoxLayout;
    topLayout-&amp;gt;addWidget(styleLabel);
    topLayout-&amp;gt;addWidget(styleComboBox);
    topLayout-&amp;gt;addStretch(1);
    topLayout-&amp;gt;addWidget(useStylePaletteCheckBox);
    topLayout-&amp;gt;addWidget(disableWidgetsCheckBox);

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&amp;gt;addLayout(topLayout, 0, 0, 1, 2);
    mainLayout-&amp;gt;addWidget(topLeftGroupBox, 1, 0);
    mainLayout-&amp;gt;addWidget(topRightGroupBox, 1, 1);
    mainLayout-&amp;gt;addWidget(bottomLeftTabWidget, 2, 0);
    mainLayout-&amp;gt;addWidget(bottomRightGroupBox, 2, 1);
    mainLayout-&amp;gt;addWidget(progressBar, 3, 0, 1, 2);
    mainLayout-&amp;gt;setRowStretch(1, 1);
    mainLayout-&amp;gt;setRowStretch(2, 1);
    mainLayout-&amp;gt;setColumnStretch(0, 1);
    mainLayout-&amp;gt;setColumnStretch(1, 1);
    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Styles&quot;));
    changeStyle(&quot;NorwegianWood&quot;);
}

void WidgetGallery::changeStyle(const QString &amp;amp;styleName)
{
    if (styleName == &quot;NorwegianWood&quot;) {
        QApplication::setStyle(new NorwegianWoodStyle);
    } else {
        QApplication::setStyle(QStyleFactory::create(styleName));
    }
    changePalette();
}

void WidgetGallery::changePalette()
{
    if (useStylePaletteCheckBox-&amp;gt;isChecked())
        QApplication::setPalette(QApplication::style()-&amp;gt;standardPalette());
    else
        QApplication::setPalette(originalPalette);
}

void WidgetGallery::advanceProgressBar()
{
    int curVal = progressBar-&amp;gt;value();
    int maxVal = progressBar-&amp;gt;maximum();
    progressBar-&amp;gt;setValue(curVal + (maxVal - curVal) / 100);
}

void WidgetGallery::createTopLeftGroupBox()
{
    topLeftGroupBox = new QGroupBox(tr(&quot;Group 1&quot;));

    radioButton1 = new QRadioButton(tr(&quot;Radio button 1&quot;));
    radioButton2 = new QRadioButton(tr(&quot;Radio button 2&quot;));
    radioButton3 = new QRadioButton(tr(&quot;Radio button 3&quot;));
    radioButton1-&amp;gt;setChecked(true);

    checkBox = new QCheckBox(tr(&quot;Tri-state check box&quot;));
    checkBox-&amp;gt;setTristate(true);
    checkBox-&amp;gt;setCheckState(Qt::PartiallyChecked);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(radioButton1);
    layout-&amp;gt;addWidget(radioButton2);
    layout-&amp;gt;addWidget(radioButton3);
    layout-&amp;gt;addWidget(checkBox);
    layout-&amp;gt;addStretch(1);
    topLeftGroupBox-&amp;gt;setLayout(layout);
}

void WidgetGallery::createTopRightGroupBox()
{
    topRightGroupBox = new QGroupBox(tr(&quot;Group 2&quot;));

    defaultPushButton = new QPushButton(tr(&quot;Default Push Button&quot;));
    defaultPushButton-&amp;gt;setDefault(true);

    togglePushButton = new QPushButton(tr(&quot;Toggle Push Button&quot;));
    togglePushButton-&amp;gt;setCheckable(true);
    togglePushButton-&amp;gt;setChecked(true);

    flatPushButton = new QPushButton(tr(&quot;Flat Push Button&quot;));
    flatPushButton-&amp;gt;setFlat(true);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(defaultPushButton);
    layout-&amp;gt;addWidget(togglePushButton);
    layout-&amp;gt;addWidget(flatPushButton);
    layout-&amp;gt;addStretch(1);
    topRightGroupBox-&amp;gt;setLayout(layout);
}

void WidgetGallery::createBottomLeftTabWidget()
{
    bottomLeftTabWidget = new QTabWidget;
    bottomLeftTabWidget-&amp;gt;setSizePolicy(QSizePolicy::Preferred,
                                       QSizePolicy::Ignored);

    QWidget *tab1 = new QWidget;
    tableWidget = new QTableWidget(10, 10);

    QHBoxLayout *tab1hbox = new QHBoxLayout;
    tab1hbox-&amp;gt;setMargin(5);
    tab1hbox-&amp;gt;addWidget(tableWidget);
    tab1-&amp;gt;setLayout(tab1hbox);

    QWidget *tab2 = new QWidget;
    textEdit = new QTextEdit;

    textEdit-&amp;gt;setPlainText(tr(&quot;Twinkle, twinkle, little star,\n&quot;
                              &quot;How I wonder what you are.\n&quot;
                              &quot;Up above the world so high,\n&quot;
                              &quot;Like a diamond in the sky.\n&quot;
                              &quot;Twinkle, twinkle, little star,\n&quot;
                              &quot;How I wonder what you are!\n&quot;));

    QHBoxLayout *tab2hbox = new QHBoxLayout;
    tab2hbox-&amp;gt;setMargin(5);
    tab2hbox-&amp;gt;addWidget(textEdit);
    tab2-&amp;gt;setLayout(tab2hbox);

    bottomLeftTabWidget-&amp;gt;addTab(tab1, tr(&quot;&amp;amp;Table&quot;));
    bottomLeftTabWidget-&amp;gt;addTab(tab2, tr(&quot;Text &amp;amp;Edit&quot;));
}

void WidgetGallery::createBottomRightGroupBox()
{
    bottomRightGroupBox = new QGroupBox(tr(&quot;Group 3&quot;));
    bottomRightGroupBox-&amp;gt;setCheckable(true);
    bottomRightGroupBox-&amp;gt;setChecked(true);

    lineEdit = new QLineEdit(&quot;s3cRe7&quot;);
    lineEdit-&amp;gt;setEchoMode(QLineEdit::Password);

    spinBox = new QSpinBox(bottomRightGroupBox);
    spinBox-&amp;gt;setValue(50);

    dateTimeEdit = new QDateTimeEdit(bottomRightGroupBox);
    dateTimeEdit-&amp;gt;setDateTime(QDateTime::currentDateTime());

    slider = new QSlider(Qt::Horizontal, bottomRightGroupBox);
    slider-&amp;gt;setValue(40);

    scrollBar = new QScrollBar(Qt::Horizontal, bottomRightGroupBox);
    scrollBar-&amp;gt;setValue(60);

    dial = new QDial(bottomRightGroupBox);
    dial-&amp;gt;setValue(30);
    dial-&amp;gt;setNotchesVisible(true);

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(lineEdit, 0, 0, 1, 2);
    layout-&amp;gt;addWidget(spinBox, 1, 0, 1, 2);
    layout-&amp;gt;addWidget(dateTimeEdit, 2, 0, 1, 2);
    layout-&amp;gt;addWidget(slider, 3, 0);
    layout-&amp;gt;addWidget(scrollBar, 4, 0);
    layout-&amp;gt;addWidget(dial, 3, 1, 2, 1);
    layout-&amp;gt;setRowStretch(5, 1);
    bottomRightGroupBox-&amp;gt;setLayout(layout);
}

void WidgetGallery::createProgressBar()
{
    progressBar = new QProgressBar;
    progressBar-&amp;gt;setRange(0, 10000);
    progressBar-&amp;gt;setValue(0);

    QTimer *timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this, SLOT(advanceProgressBar()));
    timer-&amp;gt;start(1000);
}

</db:programlisting>
</db:article>
