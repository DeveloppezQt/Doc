<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Lights Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of different light types.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import QtQuick.Controls
import QtQuick3D.Helpers

Window {
    width: 1280
    height: 720
    visible: true
    title: qsTr(&quot;Lights Example&quot;)

    View3D {
        id: v3d
        anchors.fill: parent

        environment: SceneEnvironment {
            clearColor: &quot;#808080&quot;
            backgroundMode: SceneEnvironment.Color
            antialiasingMode: SceneEnvironment.MSAA
            antialiasingQuality: SceneEnvironment.High
        }

        PerspectiveCamera {
            position: Qt.vector3d(0, 400, 600)
            eulerRotation.x: -30
            clipFar: 2000
        }

        DirectionalLight {
            id: light1
            color: Qt.rgba(1.0, 0.1, 0.1, 1.0)
            ambientColor: Qt.rgba(0.1, 0.1, 0.1, 1.0)
            position: Qt.vector3d(0, 200, 0)
            rotation: Quaternion.fromEulerAngles(-135, -90, 0)
            shadowMapQuality: Light.ShadowMapQualityHigh
            visible: checkBox1.checked
            castsShadow: checkBoxShadows.checked
            brightness: slider1.sliderValue
            SequentialAnimation on rotation {
                loops: Animation.Infinite
                QuaternionAnimation {
                    to: Quaternion.fromEulerAngles(-45, -90, 0)
                    duration: 2000
                    easing.type: Easing.InOutQuad
                }
                QuaternionAnimation {
                    to: Quaternion.fromEulerAngles(-135, -90, 0)
                    duration: 2000
                    easing.type: Easing.InOutQuad
                }
            }
        }

        PointLight {
            id: light2
            color: Qt.rgba(0.1, 1.0, 0.1, 1.0)
            ambientColor: Qt.rgba(0.1, 0.1, 0.1, 1.0)
            position: Qt.vector3d(0, 300, 0)
            shadowMapFar: 2000
            shadowMapQuality: Light.ShadowMapQualityHigh
            visible: checkBox2.checked
            castsShadow: checkBoxShadows.checked
            brightness: slider2.sliderValue
            SequentialAnimation on x {
                loops: Animation.Infinite
                NumberAnimation {
                    to: 400
                    duration: 2000
                    easing.type: Easing.InOutQuad
                }
                NumberAnimation {
                    to: 0
                    duration: 2000
                    easing.type: Easing.InOutQuad
                }
            }
        }

        SpotLight {
            id: light4
            color: Qt.rgba(1.0, 0.9, 0.7, 1.0)
            ambientColor: Qt.rgba(0.0, 0.0, 0.0, 0.0)
            position: Qt.vector3d(0, 250, 0)
            eulerRotation.x: -45
            shadowMapFar: 2000
            shadowMapQuality: Light.ShadowMapQualityHigh
            visible: checkBox4.checked
            castsShadow: checkBoxShadows.checked
            brightness: slider4.sliderValue
            coneAngle: 50
            innerConeAngle: 30
            PropertyAnimation on eulerRotation.y {
                loops: Animation.Infinite
                from: 0
                to: -360
                duration: 10000
            }
        }

        Model {
            source: &quot;#Rectangle&quot;
            y: -200
            scale: Qt.vector3d(15, 15, 15)
            eulerRotation.x: -90
            materials: [
                DefaultMaterial {
                    diffuseColor: Qt.rgba(0.8, 0.6, 0.4, 1.0)
                }
            ]
        }
        Model {
            source: &quot;#Rectangle&quot;
            z: -400
            scale: Qt.vector3d(15, 15, 15)
            materials: [
                DefaultMaterial {
                    diffuseColor: Qt.rgba(0.8, 0.8, 0.9, 1.0)
                }
            ]
        }

        RotatingTeaPot {
            visible: !checkBoxCustomMaterial.checked
            material: DefaultMaterial {
                diffuseColor: Qt.rgba(0.9, 0.9, 0.9, 1.0)
            }
            animate: checkBoxAnimate.checked
        }

        RotatingTeaPot {
            visible: checkBoxCustomMaterial.checked
            material: CustomMaterial {
                vertexShader: &quot;custom.vert&quot;
                property real uAmplitude: 0.5
                property real uTime: 0.0
                SequentialAnimation on uTime {
                    loops: -1
                    NumberAnimation { from: 0.0; to: 10.0; duration: 10000 }
                    NumberAnimation { from: 10.0; to: 0.0; duration: 10000 }
                }
            }
            animate: checkBoxAnimate.checked
        }

        Model {
            source: &quot;#Cube&quot;
            position: light1.position
            rotation: light1.rotation
            property real size: slider1.highlight ? 0.2 : 0.1
            scale: Qt.vector3d(size, size, size)
            materials: [
                DefaultMaterial {
                    diffuseColor: light1.color
                    opacity: 0.4
                }
            ]
        }
        Model {
            source: &quot;#Cube&quot;
            position: light2.position
            rotation: light2.rotation
            property real size: slider2.highlight ? 0.2 : 0.1
            scale: Qt.vector3d(size, size, size)
            materials: [
                DefaultMaterial {
                    diffuseColor: light2.color
                    opacity: 0.4
                }
            ]
        }
        Model {
            source: &quot;#Cube&quot;
            position: light4.position
            rotation: light4.rotation
            property real size: slider4.highlight ? 0.2 : 0.1
            scale: Qt.vector3d(size, size, size)
            materials: [
                DefaultMaterial {
                    diffuseColor: light4.color
                    opacity: 0.4
                }
            ]
        }
    }

    Button {
        x: settingsDrawer.visible ? (settingsDrawer.x + settingsDrawer.width) : 0
        anchors.top: parent.top
        width: 50
        height: width
        icon.width: width * 0.5
        icon.height: height * 0.5
        icon.source: &quot;icon_settings.png&quot;
        icon.color: &quot;transparent&quot;
        background: Rectangle {
            color: &quot;transparent&quot;
        }
        onClicked: {
            inTransition.duration = 400
            settingsDrawer.visible = !settingsDrawer.visible;
        }
    }

    Drawer {
        id: settingsDrawer
        edge: Qt.LeftEdge
        interactive: false
        modal: false
        background: Rectangle {
            color: &quot;#e0e0e0&quot;
            opacity: 0.8
        }
        visible: (Qt.platform.os === (&quot;android&quot; || &quot;ios&quot;) ? false : true)

        enter: Transition {
            NumberAnimation {
                id: inTransition
                property: &quot;position&quot;
                to: 1.0
                duration: 0
                easing.type: Easing.InOutQuad
            }
        }

        exit: Transition {
            NumberAnimation {
                property: &quot;position&quot;
                to: 0.0
                duration: 400
                easing.type: Easing.InOutQuad
            }
        }

        ScrollView {
            anchors.fill: parent
            padding: 10

            Flickable{
                clip: true
                contentWidth: settingsArea.width
                contentHeight: settingsArea.height

                Column {
                    id: settingsArea
                    CustomCheckBox {
                        id: checkBoxShadows
                        text: qsTr(&quot;Enable Shadows&quot;)
                        checked: true
                    }
                    Item { width: 1; height: 20 }
                    CustomCheckBox {
                        id: checkBoxAnimate
                        text: qsTr(&quot;Rotate Teapot&quot;)
                        checked: true
                    }
                    Item { width: 1; height: 20 }
                    CustomCheckBox {
                        id: checkBoxCustomMaterial
                        text: qsTr(&quot;Custom Material&quot;)
                        checked: false
                    }
                    Item { width: 1; height: 40 }
                    CustomCheckBox {
                        id: checkBox1
                        text: qsTr(&quot;Directional Light&quot;)
                        checked: true
                    }
                    CustomSlider {
                        id: slider1
                        sliderValue: 0.5
                        fromValue: 0
                        toValue: 1
                    }
                    Item { width: 1; height: 40 }
                    CustomCheckBox {
                        id: checkBox2
                        text: qsTr(&quot;Point Light&quot;)
                        checked: false
                    }
                    CustomSlider {
                        id: slider2
                        sliderValue: 6
                        fromValue: 0
                        toValue: 10
                    }
                    Item { width: 1; height: 40 }
                    CustomCheckBox {
                        id: checkBox4
                        text: qsTr(&quot;Spot Light&quot;)
                        checked: false
                    }
                    CustomSlider {
                        id: slider4
                        sliderValue: 10
                        fromValue: 0
                        toValue: 30
                    }
                }
            }
        }
    }

    Item {
        width: debugViewToggleText.implicitWidth
        height: debugViewToggleText.implicitHeight
        anchors.right: parent.right
        Label {
            id: debugViewToggleText
            text: &quot;Click here &quot; + (dbg.visible ? &quot;to hide DebugView&quot; : &quot;for DebugView&quot;)
            color: &quot;white&quot;
            anchors.right: parent.right
            anchors.top: parent.top
        }
        MouseArea {
            anchors.fill: parent
            onClicked: dbg.visible = !dbg.visible
            DebugView {
                y: debugViewToggleText.height * 2
                anchors.right: parent.right
                source: v3d
                id: dbg
                visible: false
            }
        }
    }
}

</db:programlisting>
</db:article>
