<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WorkerScript QML Type</db:title>
<db:productname>QtQmlWorkerScript</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml WorkerScript Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Enables the use of threads in a Qt Quick application.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml.WorkerScript</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>WorkerScript is part of <db:simplelist><db:member>qtquick-threading</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> to run operations in a new thread. This is useful for running operations in the background so that the main GUI thread is not blocked.</db:para>
<db:para>Messages can be passed between the new thread and the parent thread using <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml#sendMessage-method">sendMessage</db:link>() and the <db:code>onMessage()</db:code> handler.</db:para>
<db:para>An example:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    width: 300; height: 300

    Text {
        id: myText
        text: 'Click anywhere'
    }

    WorkerScript {
        id: myWorker
        source: &quot;script.mjs&quot;

        onMessage: (messageObject)=&amp;gt; myText.text = messageObject.reply
    }

    MouseArea {
        anchors.fill: parent
        onClicked: (mouse)=&amp;gt; myWorker.sendMessage({ 'x': mouse.x, 'y': mouse.y })
    }
}
</db:programlisting>
<db:para>The above worker script specifies a JavaScript file, &quot;script.mjs&quot;, that handles the operations to be performed in the new thread. Here is <db:code>script.mjs</db:code>:</db:para>
<db:programlisting language="cpp">WorkerScript.onMessage = function(message) {
    // ... long-running operations and calculations are done here
    WorkerScript.sendMessage({ 'reply': 'Mouse is at ' + message.x + ',' + message.y })
}
</db:programlisting>
<db:para>When the user clicks anywhere within the rectangle, <db:code>sendMessage()</db:code> is called, triggering the <db:code>WorkerScript.onMessage()</db:code> handler in <db:code>script.mjs</db:code>. This in turn sends a reply message that is then received by the <db:code>onMessage()</db:code> handler of <db:code>myWorker</db:code>.</db:para>
<db:para>The example uses a script that is an ECMAScript module, because it has the &quot;.mjs&quot; extension. It can use import statements to access functionality from other modules and it is run in JavaScript strict mode.</db:para>
<db:para>If a worker script has the extension &quot;.js&quot; instead, then it is considered to contain plain JavaScript statements and it is run in non-strict mode.</db:para>
<db:note>
<db:para>Each <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> element will instantiate a separate JavaScript engine to ensure perfect isolation and thread-safety. If the impact of that results in a memory consumption that is too high for your environment, then consider sharing a <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> element.</db:para>
</db:note>
<db:section xml:id="restrictions">
<db:title>Restrictions</db:title>
<db:para>Since the WorkerScript.onMessage() function is run in a separate thread, the JavaScript file is evaluated in a context separate from the main QML engine. This means that unlike an ordinary JavaScript file that is imported into QML, the script.mjs in the above example cannot access the properties, methods or other attributes of the QML item, nor can it access any context properties set on the QML object through <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>.</db:para>
<db:para>Additionally, there are restrictions on the types of values that can be passed to and from the worker script. See the <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml#sendMessage-method">sendMessage</db:link>() documentation for details.</db:para>
<db:para>Worker scripts that are plain JavaScript sources can not use <db:link xlink:href="qtqml-javascript-imports.xml">.import</db:link> syntax. Scripts that are ECMAScript modules can freely use import and export statements.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-threading-example.xml">Qt Quick Examples - Threading</db:link></db:member>
<db:member><db:link xlink:href="qtquick-threading-threadedlistmodel-example.xml">Threaded ListModel Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="ready-prop">
<db:title>[read-only] ready : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>ready</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds whether the <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> has been initialized and is ready for receiving messages via <db:code>WorkerScript.sendMessage()</db:code>.</db:para>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds the url of the JavaScript file that implements the <db:code>WorkerScript.onMessage()</db:code> handler for threaded operations.</db:para>
<db:para>If the file name component of the url ends with &quot;.mjs&quot;, then the script is parsed as an ECMAScript module and run in strict mode. Otherwise it is considered to be plain script.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="message-signal">
<db:title>message(jsobject <db:emphasis>msg</db:emphasis>)</db:title>
<db:para>This signal is emitted when a message <db:code role="parameter">msg</db:code> is received from a worker script in another thread through a call to <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml#sendMessage-method">sendMessage</db:link>().</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onMessage</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="sendMessage-method">
<db:title>sendMessage(jsobject <db:emphasis>message</db:emphasis>)</db:title>
<db:para>Sends the given <db:code role="parameter">message</db:code> to a worker script handler in another thread. The other worker script handler can receive this message through the onMessage() handler.</db:para>
<db:para>The message object may only contain values of the following types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>boolean, number, string</db:para>
</db:listitem>
<db:listitem>
<db:para>JavaScript objects and arrays</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> objects (any other type of <db:link xlink:href="qobject.xml">QObject</db:link>* is not allowed)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All objects and arrays are copied to the message. With the exception of <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> objects, any modifications by the other thread to an object passed in message will not be reflected in the original object.</db:para>
</db:section>
</db:section>
</db:article>
