<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Dock Widgets Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Dock Widgets example shows how to add dock windows to an application. It also shows how to use Qt's rich text engine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;
#if defined(QT_PRINTSUPPORT_LIB)
#include &amp;lt;QtPrintSupport/qtprintsupportglobal.h&amp;gt;
#if QT_CONFIG(printdialog)
#include &amp;lt;QtPrintSupport&amp;gt;
#endif
#endif

#include &quot;mainwindow.h&quot;

MainWindow::MainWindow()
    : textEdit(new QTextEdit)
{
    setCentralWidget(textEdit);

    createActions();
    createStatusBar();
    createDockWindows();

    setWindowTitle(tr(&quot;Dock Widgets&quot;));

    newLetter();
    setUnifiedTitleAndToolBarOnMac(true);
}

void MainWindow::newLetter()
{
    textEdit-&amp;gt;clear();

    QTextCursor cursor(textEdit-&amp;gt;textCursor());
    cursor.movePosition(QTextCursor::Start);
    QTextFrame *topFrame = cursor.currentFrame();
    QTextFrameFormat topFrameFormat = topFrame-&amp;gt;frameFormat();
    topFrameFormat.setPadding(16);
    topFrame-&amp;gt;setFrameFormat(topFrameFormat);

    QTextCharFormat textFormat;
    QTextCharFormat boldFormat;
    boldFormat.setFontWeight(QFont::Bold);
    QTextCharFormat italicFormat;
    italicFormat.setFontItalic(true);

    QTextTableFormat tableFormat;
    tableFormat.setBorder(1);
    tableFormat.setCellPadding(16);
    tableFormat.setAlignment(Qt::AlignRight);
    cursor.insertTable(1, 1, tableFormat);
    cursor.insertText(&quot;The Firm&quot;, boldFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;321 City Street&quot;, textFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;Industry Park&quot;);
    cursor.insertBlock();
    cursor.insertText(&quot;Some Country&quot;);
    cursor.setPosition(topFrame-&amp;gt;lastPosition());
    cursor.insertText(QDate::currentDate().toString(&quot;d MMMM yyyy&quot;), textFormat);
    cursor.insertBlock();
    cursor.insertBlock();
    cursor.insertText(&quot;Dear &quot;, textFormat);
    cursor.insertText(&quot;NAME&quot;, italicFormat);
    cursor.insertText(&quot;,&quot;, textFormat);
    for (int i = 0; i &amp;lt; 3; ++i)
        cursor.insertBlock();
    cursor.insertText(tr(&quot;Yours sincerely,&quot;), textFormat);
    for (int i = 0; i &amp;lt; 3; ++i)
        cursor.insertBlock();
    cursor.insertText(&quot;The Boss&quot;, textFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;ADDRESS&quot;, italicFormat);
}

void MainWindow::print()
{
#if QT_CONFIG(printdialog)
    QTextDocument *document = textEdit-&amp;gt;document();
    QPrinter printer;

    QPrintDialog dlg(&amp;amp;printer, this);
    if (dlg.exec() != QDialog::Accepted) {
        return;
    }

    document-&amp;gt;print(&amp;amp;printer);
    statusBar()-&amp;gt;showMessage(tr(&quot;Ready&quot;), 2000);
#endif
}

void MainWindow::save()
{
    QMimeDatabase mimeDatabase;
    QString fileName = QFileDialog::getSaveFileName(this,
                        tr(&quot;Choose a file name&quot;), &quot;.&quot;,
                        mimeDatabase.mimeTypeForName(&quot;text/html&quot;).filterString());
    if (fileName.isEmpty())
        return;
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, tr(&quot;Dock Widgets&quot;),
                             tr(&quot;Cannot write file %1:\n%2.&quot;)
                             .arg(QDir::toNativeSeparators(fileName), file.errorString()));
        return;
    }

    QTextStream out(&amp;amp;file);
    QApplication::setOverrideCursor(Qt::WaitCursor);
    out &amp;lt;&amp;lt; textEdit-&amp;gt;toHtml();
    QApplication::restoreOverrideCursor();

    statusBar()-&amp;gt;showMessage(tr(&quot;Saved '%1'&quot;).arg(fileName), 2000);
}

void MainWindow::undo()
{
    QTextDocument *document = textEdit-&amp;gt;document();
    document-&amp;gt;undo();
}

void MainWindow::insertCustomer(const QString &amp;amp;customer)
{
    if (customer.isEmpty())
        return;
    QStringList customerList = customer.split(&quot;, &quot;);
    QTextDocument *document = textEdit-&amp;gt;document();
    QTextCursor cursor = document-&amp;gt;find(&quot;NAME&quot;);
    if (!cursor.isNull()) {
        cursor.beginEditBlock();
        cursor.insertText(customerList.at(0));
        QTextCursor oldcursor = cursor;
        cursor = document-&amp;gt;find(&quot;ADDRESS&quot;);
        if (!cursor.isNull()) {
            for (int i = 1; i &amp;lt; customerList.size(); ++i) {
                cursor.insertBlock();
                cursor.insertText(customerList.at(i));
            }
            cursor.endEditBlock();
        }
        else
            oldcursor.endEditBlock();
    }
}

void MainWindow::addParagraph(const QString &amp;amp;paragraph)
{
    if (paragraph.isEmpty())
        return;
    QTextDocument *document = textEdit-&amp;gt;document();
    QTextCursor cursor = document-&amp;gt;find(tr(&quot;Yours sincerely,&quot;));
    if (cursor.isNull())
        return;
    cursor.beginEditBlock();
    cursor.movePosition(QTextCursor::PreviousBlock, QTextCursor::MoveAnchor, 2);
    cursor.insertBlock();
    cursor.insertText(paragraph);
    cursor.insertBlock();
    cursor.endEditBlock();

}

void MainWindow::about()
{
   QMessageBox::about(this, tr(&quot;About Dock Widgets&quot;),
            tr(&quot;The &amp;lt;b&amp;gt;Dock Widgets&amp;lt;/b&amp;gt; example demonstrates how to &quot;
               &quot;use Qt's dock widgets. You can enter your own text, &quot;
               &quot;click a customer to add a customer name and &quot;
               &quot;address, and click standard paragraphs to add them.&quot;));
}

void MainWindow::createActions()
{
    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));
    QToolBar *fileToolBar = addToolBar(tr(&quot;File&quot;));

    const QIcon newIcon = QIcon::fromTheme(&quot;document-new&quot;, QIcon(&quot;:/images/new.png&quot;));
    QAction *newLetterAct = new QAction(newIcon, tr(&quot;&amp;amp;New Letter&quot;), this);
    newLetterAct-&amp;gt;setShortcuts(QKeySequence::New);
    newLetterAct-&amp;gt;setStatusTip(tr(&quot;Create a new form letter&quot;));
    connect(newLetterAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::newLetter);
    fileMenu-&amp;gt;addAction(newLetterAct);
    fileToolBar-&amp;gt;addAction(newLetterAct);

    const QIcon saveIcon = QIcon::fromTheme(&quot;document-save&quot;, QIcon(&quot;:/images/save.png&quot;));
    QAction *saveAct = new QAction(saveIcon, tr(&quot;&amp;amp;Save...&quot;), this);
    saveAct-&amp;gt;setShortcuts(QKeySequence::Save);
    saveAct-&amp;gt;setStatusTip(tr(&quot;Save the current form letter&quot;));
    connect(saveAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::save);
    fileMenu-&amp;gt;addAction(saveAct);
    fileToolBar-&amp;gt;addAction(saveAct);

    const QIcon printIcon = QIcon::fromTheme(&quot;document-print&quot;, QIcon(&quot;:/images/print.png&quot;));
    QAction *printAct = new QAction(printIcon, tr(&quot;&amp;amp;Print...&quot;), this);
    printAct-&amp;gt;setShortcuts(QKeySequence::Print);
    printAct-&amp;gt;setStatusTip(tr(&quot;Print the current form letter&quot;));
    connect(printAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::print);
    fileMenu-&amp;gt;addAction(printAct);
    fileToolBar-&amp;gt;addAction(printAct);

    fileMenu-&amp;gt;addSeparator();

    QAction *quitAct = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Quit&quot;), this, &amp;amp;QWidget::close);
    quitAct-&amp;gt;setShortcuts(QKeySequence::Quit);
    quitAct-&amp;gt;setStatusTip(tr(&quot;Quit the application&quot;));

    QMenu *editMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Edit&quot;));
    QToolBar *editToolBar = addToolBar(tr(&quot;Edit&quot;));
    const QIcon undoIcon = QIcon::fromTheme(&quot;edit-undo&quot;, QIcon(&quot;:/images/undo.png&quot;));
    QAction *undoAct = new QAction(undoIcon, tr(&quot;&amp;amp;Undo&quot;), this);
    undoAct-&amp;gt;setShortcuts(QKeySequence::Undo);
    undoAct-&amp;gt;setStatusTip(tr(&quot;Undo the last editing action&quot;));
    connect(undoAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::undo);
    editMenu-&amp;gt;addAction(undoAct);
    editToolBar-&amp;gt;addAction(undoAct);

    viewMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;View&quot;));

    menuBar()-&amp;gt;addSeparator();

    QMenu *helpMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Help&quot;));

    QAction *aboutAct = helpMenu-&amp;gt;addAction(tr(&quot;&amp;amp;About&quot;), this, &amp;amp;MainWindow::about);
    aboutAct-&amp;gt;setStatusTip(tr(&quot;Show the application's About box&quot;));

    QAction *aboutQtAct = helpMenu-&amp;gt;addAction(tr(&quot;About &amp;amp;Qt&quot;), qApp, &amp;amp;QApplication::aboutQt);
    aboutQtAct-&amp;gt;setStatusTip(tr(&quot;Show the Qt library's About box&quot;));
}

void MainWindow::createStatusBar()
{
    statusBar()-&amp;gt;showMessage(tr(&quot;Ready&quot;));
}

void MainWindow::createDockWindows()
{
    QDockWidget *dock = new QDockWidget(tr(&quot;Customers&quot;), this);
    dock-&amp;gt;setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
    customerList = new QListWidget(dock);
    customerList-&amp;gt;addItems(QStringList()
            &amp;lt;&amp;lt; &quot;John Doe, Harmony Enterprises, 12 Lakeside, Ambleton&quot;
            &amp;lt;&amp;lt; &quot;Jane Doe, Memorabilia, 23 Watersedge, Beaton&quot;
            &amp;lt;&amp;lt; &quot;Tammy Shea, Tiblanka, 38 Sea Views, Carlton&quot;
            &amp;lt;&amp;lt; &quot;Tim Sheen, Caraba Gifts, 48 Ocean Way, Deal&quot;
            &amp;lt;&amp;lt; &quot;Sol Harvey, Chicos Coffee, 53 New Springs, Eccleston&quot;
            &amp;lt;&amp;lt; &quot;Sally Hobart, Tiroli Tea, 67 Long River, Fedula&quot;);
    dock-&amp;gt;setWidget(customerList);
    addDockWidget(Qt::RightDockWidgetArea, dock);
    viewMenu-&amp;gt;addAction(dock-&amp;gt;toggleViewAction());

    dock = new QDockWidget(tr(&quot;Paragraphs&quot;), this);
    paragraphsList = new QListWidget(dock);
    paragraphsList-&amp;gt;addItems(QStringList()
            &amp;lt;&amp;lt; &quot;Thank you for your payment which we have received today.&quot;
            &amp;lt;&amp;lt; &quot;Your order has been dispatched and should be with you &quot;
               &quot;within 28 days.&quot;
            &amp;lt;&amp;lt; &quot;We have dispatched those items that were in stock. The &quot;
               &quot;rest of your order will be dispatched once all the &quot;
               &quot;remaining items have arrived at our warehouse. No &quot;
               &quot;additional shipping charges will be made.&quot;
            &amp;lt;&amp;lt; &quot;You made a small overpayment (less than $5) which we &quot;
               &quot;will keep on account for you, or return at your request.&quot;
            &amp;lt;&amp;lt; &quot;You made a small underpayment (less than $1), but we have &quot;
               &quot;sent your order anyway. We'll add this underpayment to &quot;
               &quot;your next bill.&quot;
            &amp;lt;&amp;lt; &quot;Unfortunately you did not send enough money. Please remit &quot;
               &quot;an additional $. Your order will be dispatched as soon as &quot;
               &quot;the complete amount has been received.&quot;
            &amp;lt;&amp;lt; &quot;You made an overpayment (more than $5). Do you wish to &quot;
               &quot;buy more items, or should we return the excess to you?&quot;);
    dock-&amp;gt;setWidget(paragraphsList);
    addDockWidget(Qt::RightDockWidgetArea, dock);
    viewMenu-&amp;gt;addAction(dock-&amp;gt;toggleViewAction());

    connect(customerList, &amp;amp;QListWidget::currentTextChanged,
            this, &amp;amp;MainWindow::insertCustomer);
    connect(paragraphsList, &amp;amp;QListWidget::currentTextChanged,
            this, &amp;amp;MainWindow::addParagraph);
}

</db:programlisting>
</db:article>
