<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Remote Objects Nodes</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes how Qt Remote Objects pass data between nodes.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In a QtRO network, information is passed between processes via QRemoteObjectNodes (&quot;nodes&quot;). This peer-to-peer functionality uses a small number of distinct packets passing the necessary data between nodes.</db:para>
<db:para>Each process that participates in the network instantiates a Node-based type, such as <db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link>, <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link>, or <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link>. The host types of Nodes provide additional functionality. Both <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> and <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link> support the <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>() and the corresponding <db:link xlink:href="qremoteobjecthostbase.xml#disableRemoting">disableRemoting</db:link>() methods, which are the key methods to expose source objects to the network. To use the <db:link xlink:href="qtremoteobjects-registry.xml#registry">Registry</db:link> functionality, you need to have a <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link> on the network. Then, all other nodes can pass the RegistryHost's URL to the Node's <db:code>registryAddress</db:code> constructor parameter, or pass the URL to the <db:link xlink:href="qremoteobjectnode.xml#registryUrl-prop">setRegistryUrl</db:link>() method.</db:para>
<db:para>Since QtRO is a peer-to-peer network, to <db:link xlink:href="qremoteobjectnode.xml#acquire">acquire</db:link>() a valid <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>, the replica's node needs to be connected to the node that hosts its <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link>. A host node is a node that allows other nodes to connect to it, which is accomplished by giving hosts unique addresses. This address is provided to the <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> constructor or set by the setHostUrl method. The node from which a replica is requested must establish the connection to the host node, to initialize the replica and keep it up to date.</db:para>
<db:section xml:id="connecting-nodes-using-qtro-urls">
<db:title>Connecting Nodes using QtRO URLs</db:title>
<db:para>Host Nodes use custom URLs to simplify connections. Currently, QtRO supports two types of connections:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>A TCP connection using the standard TCP/IP protocol - supports connections between devices as well as between processes on the same device.</db:para>
</db:listitem>
<db:listitem>
<db:para>A local connection - supports connections between processes on the same device. This type of connection can have less overhead, depending on the underlying Operating System features.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>For local connections, you must use a unique name. For TCP connections, you must provide a unique address and port number combination.</db:para>
<db:para>Currently, QtRO does not include a <db:link xlink:href="http://www.zeroconf.org/">zeroconf</db:link> facility. Therefore, all processes or devices must know beforehand, how to connect to each other. A <db:link xlink:href="qremoteobjectregistry.xml">QRemoteObjectRegistry</db:link> can be used to simplify the connection process for a network with multiple Host Nodes.</db:para>
<db:para>The table below summarizes the connection types available:</db:para>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>URL</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>(&quot;local:service&quot;)</db:para>
</db:td>
<db:td>
<db:para>Uses (internally) {<db:link xlink:href="qlocalserver.xml">QLocalServer</db:link>}/{<db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link>} classes to communicate between nodes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>(&quot;tcp://192.168.1.1:9999&quot;)</db:para>
</db:td>
<db:td>
<db:para>Uses (internally) {<db:link xlink:href="qtcpserver.xml">QTcpServer</db:link>}/{<db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>} classes to communicate between nodes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>(&quot;qnx:service&quot;)</db:para>
</db:td>
<db:td>
<db:para>QNX OS only. Uses a custom (named) channel for native communication between nodes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>(&quot;localabstract:service&quot;)</db:para>
</db:td>
<db:td>
<db:para>Since 6.2. Linux/Android OSes only. Uses an abstract namespace for Unix domain sockets. This allows <db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link> behavior to work on non-writable devices.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Nodes have a few <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>() methods that are used to share objects on the network. However, if the node is not a host node, an error is returned.</db:para>
<db:para>Other processes or devices that want to interact with a shared object can use one of the <db:link xlink:href="qremoteobjectnode.xml#acquire">node's acquire()</db:link> methods, to instantiate a replica.</db:para>
</db:section>
</db:article>
