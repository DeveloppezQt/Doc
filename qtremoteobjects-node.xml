<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Remote Objects Nodes</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes how Qt Remote Objects Nodes pass data between nodes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="nodes">
<db:title>Nodes</db:title>
<db:para>QRemoteObjectNodes (Nodes) are what enable the passing of information between processes. All QtRO functionality is enabled by a small number of distinct packets passing the necessary data between nodes.</db:para>
<db:para>Each process that participates in QtRO's IPC will instantiate a Node-based type (<db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link>, <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link>, or <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link>). The host types of Nodes provide additional functionality. Both <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> and <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link> support the <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>() (and the corresponding <db:link xlink:href="qremoteobjecthostbase.xml#disableRemoting">disableRemoting</db:link>()) methods, which are the key methods to expose <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects to the network. In order to use the <db:link xlink:href="qtremoteobjects-registry.xml#registry">Registry</db:link> functionality, there should be a <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link> on the network. All other nodes can then pass the RegistryHost's URL to the Node's <db:emphasis>registryAddress</db:emphasis> constructor parameter, or pass the URL to the <db:link xlink:href="qremoteobjectnode.xml#registryUrl-prop">setRegistryUrl</db:link>() method.</db:para>
<db:para>QtRO works as a peer-to-peer network. That is, in order to <db:link xlink:href="qremoteobjectnode.xml#acquire">acquire</db:link>() a valid <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>, the <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>'s node needs a connection to the node that hosts its <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link>. A host node is a node that allows other nodes to connect to it, which is accomplished by giving hosts unique addresses (the address is provided to the <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> constructor or set by the setHostUrl method). The node that a <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> is requested from must establish the connection to the host node in order to initialize the <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> and keep it up to date.</db:para>
</db:section>
<db:section xml:id="connecting-nodes-using-qtro-urls">
<db:title>Connecting Nodes using QtRO URLs</db:title>
<db:para>Host Nodes use custom URLs to simplify connections. While the list will likely be extended, QtRO currently supports two types of connections. A &quot;tcp&quot; connection (using the standard tcp/ip protocol) supports connections between devices as well as between processes on the same device. A &quot;local&quot; connection (which can have less overhead, depending on the underlying OS features) only supports connections between processes on the same device.</db:para>
<db:para>When using a local connection, a unique name must be used. For tcp connections, a unique address and port number combination much be used.</db:para>
<db:para>There is currently no <db:link xlink:href="http://www.zeroconf.org/">zeroconf</db:link> facility included in QtRO. All processes or devices must therefore know beforehand how to connect to each other. A <db:link xlink:href="qremoteobjectregistry.xml">QRemoteObjectRegistry</db:link> (see below) can be used to simplify the connection process for a network with multiple Host Nodes.</db:para>
<db:para>Connection types are summarized in the following table.</db:para>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>URL</db:para>
</db:th>
<db:th>
<db:para>Host Node</db:para>
</db:th>
<db:th>
<db:para>Connecting Node</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link>(&quot;local:service&quot;)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlocalserver.xml">QLocalServer</db:link>(&quot;service&quot;)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link>(&quot;service&quot;)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link>(&quot;tcp://192.168.1.1:9999&quot;)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtcpserver.xml">QTcpServer</db:link>(&quot;192.168.1.1&quot;,9999)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>(&quot;192.168.1.1&quot;,9999)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Nodes have a couple of <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>() methods that are used to share objects on the network (this will produce an error if the Node is not a Host Node however). Other processes/devices that want to interact with a shared object use one of the <db:link xlink:href="qremoteobjectnode.xml#acquire">node's acquire()</db:link> methods to instantiate a replica.</db:para>
</db:section>
</db:article>
