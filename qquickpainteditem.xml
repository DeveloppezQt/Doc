<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickPaintedItem Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> class provides a way to use the <db:link xlink:href="qpainter.xml">QPainter</db:link> API in the QML Scene Graph.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickPaintedItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickitem.xml" xlink:role="class">QQuickItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> makes it possible to use the <db:link xlink:href="qpainter.xml">QPainter</db:link> API with the QML Scene Graph. It sets up a textured rectangle in the Scene Graph and uses a <db:link xlink:href="qpainter.xml">QPainter</db:link> to paint onto the texture. The render target in Qt 6 is always a <db:link xlink:href="qimage.xml">QImage</db:link>. When the render target is a <db:link xlink:href="qimage.xml">QImage</db:link>, <db:link xlink:href="qpainter.xml">QPainter</db:link> first renders into the image then the content is uploaded to the texture. Call <db:link xlink:href="qquickpainteditem.xml#update">update</db:link>() to trigger a repaint.</db:para>
<db:para>To enable <db:link xlink:href="qpainter.xml">QPainter</db:link> to do anti-aliased rendering, use <db:link xlink:href="qquickpainteditem.xml#setAntialiasing">setAntialiasing</db:link>().</db:para>
<db:para>To write your own painted item, you first create a subclass of <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>, and then start by implementing its only pure virtual public function: <db:link xlink:href="qquickpainteditem.xml#paint">paint</db:link>(), which implements the actual painting. The painting will be inside the rectangle spanning from 0,0 to <db:link xlink:href="qquickitem.xml#width-prop">width</db:link>(),<db:link xlink:href="qquickitem.xml#height-prop">height</db:link>().</db:para>
<db:note>
<db:para>It important to understand the performance implications such items can incur. See <db:link xlink:href="qquickpainteditem.xml#RenderTarget-enum">QQuickPaintedItem::RenderTarget</db:link> and <db:link xlink:href="qquickpainteditem.xml#renderTarget-prop">QQuickPaintedItem::renderTarget</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-customitems-painteditem-example.xml">Scene Graph - Painted Item</db:link></db:member>
<db:member><db:link xlink:href="qtqml-tutorials-extending-qml-example.xml">Writing QML Extensions with C++</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PerformanceHint-enum">
<db:title>enum QQuickPaintedItem::PerformanceHint</db:title>
<db:bridgehead renderas="sect2">flags QQuickPaintedItem::PerformanceHints</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PerformanceHint</db:enumname>
<db:enumitem>
<db:enumidentifier>FastFBOResizing</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QQuickPaintedItem::PerformanceHints</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes flags that you can enable to improve rendering performance in <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>. By default, none of these flags are set.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:emphasis>::FastFBOResizing</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>As of Qt 6.0, this value is ignored.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PerformanceHints</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PerformanceHint&gt;. </db:code>It stores an OR combination of <db:code>PerformanceHint</db:code> values.</db:para>
</db:section>
<db:section xml:id="RenderTarget-enum">
<db:title>enum QQuickPaintedItem::RenderTarget</db:title>
<db:enumsynopsis>
<db:enumname>RenderTarget</db:enumname>
<db:enumitem>
<db:enumidentifier>Image</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FramebufferObject</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvertedYFramebufferObject</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>'s render targets. The render target is the surface <db:link xlink:href="qpainter.xml">QPainter</db:link> paints onto before the item is rendered on screen.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:emphasis>::Image</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default; <db:link xlink:href="qpainter.xml">QPainter</db:link> paints into a <db:link xlink:href="qimage.xml">QImage</db:link> using the raster paint engine. The image's content needs to be uploaded to graphics memory afterward, this operation can potentially be slow if the item is large. This render target allows high quality anti-aliasing and fast item resizing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:emphasis>::FramebufferObject</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>As of Qt 6.0, this value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:emphasis>::InvertedYFramebufferObject</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>As of Qt 6.0, this value is ignored.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#renderTarget-prop">setRenderTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="fillColor-prop">
<db:title>fillColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>fillColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">fillColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setFillColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">fillColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item's background fill color.</db:para>
<db:para>By default, the fill color is set to <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::transparent</db:link>.</db:para>
<db:para>Set the fill color to an invalid color (e.g. QColor()) to disable background filling. This may improve performance, and is safe to do if the <db:link xlink:href="qquickpainteditem.xml#paint">paint</db:link>() function draws to all pixels on each frame.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">fillColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFillColor</db:emphasis>(<db:emphasis>const QColor &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">fillColorChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="renderTarget-prop">
<db:title>renderTarget : RenderTarget</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>RenderTarget</db:type>
<db:varname>renderTarget</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">renderTarget</db:synopsisinfo>
<db:synopsisinfo role="setter">setRenderTarget</db:synopsisinfo>
<db:synopsisinfo role="notifier">renderTargetChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item's render target.</db:para>
<db:para>This property defines which render target the <db:link xlink:href="qpainter.xml">QPainter</db:link> renders into, it can be either <db:link xlink:href="qquickpainteditem.xml#RenderTarget-enum">QQuickPaintedItem::Image</db:link>, <db:link xlink:href="qquickpainteditem.xml#RenderTarget-enum">QQuickPaintedItem::FramebufferObject</db:link> or <db:link xlink:href="qquickpainteditem.xml#RenderTarget-enum">QQuickPaintedItem::InvertedYFramebufferObject</db:link>.</db:para>
<db:para>Each has certain benefits, typically performance versus quality. Using a framebuffer object avoids a costly upload of the image contents to the texture in graphics memory, while using an image enables high quality anti-aliasing.</db:para>
<db:warning>
<db:para>Resizing a framebuffer object is a costly operation, avoid using the <db:link xlink:href="qquickpainteditem.xml#RenderTarget-enum">QQuickPaintedItem::FramebufferObject</db:link> render target if the item gets resized often.</db:para>
</db:warning>
<db:para>By default, the render target is <db:link xlink:href="qquickpainteditem.xml#RenderTarget-enum">QQuickPaintedItem::Image</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickpainteditem.xml#RenderTarget-enum">QQuickPaintedItem::RenderTarget</db:link></db:type> <db:emphasis role="bold">renderTarget</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRenderTarget</db:emphasis>(<db:type><db:link xlink:href="qquickpainteditem.xml#RenderTarget-enum">QQuickPaintedItem::RenderTarget</db:link></db:type> <db:emphasis>target</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">renderTargetChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="textureSize-prop">
<db:title>textureSize : QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>textureSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textureSize</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextureSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">textureSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the size of the texture.</db:para>
<db:para>Changing the texture's size does not affect the coordinate system used in <db:link xlink:href="qquickpainteditem.xml#paint">paint</db:link>(). A scale factor is instead applied so painting should still happen inside 0,0 to <db:link xlink:href="qquickitem.xml#width-prop">width</db:link>(),<db:link xlink:href="qquickitem.xml#height-prop">height</db:link>().</db:para>
<db:para>By default, the texture size will have the same size as this item.</db:para>
<db:note>
<db:para>If the item is on a window with a device pixel ratio different from 1, this scale factor will be implicitly applied to the texture size.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">textureSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextureSize</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">textureSizeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickPaintedItem">
<db:title>[explicit] QQuickPaintedItem::QQuickPaintedItem(QQuickItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickPaintedItem</db:methodname>
<db:methodparam>
<db:type>QQuickItem *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickPaintedItem(QQuickItem *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> with the given <db:code role="parameter">parent</db:code> item.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickPaintedItem">
<db:title>[override virtual] QQuickPaintedItem::~QQuickPaintedItem()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQuickPaintedItem</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickPaintedItem() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>.</db:para>
</db:section>
<db:section xml:id="antialiasing">
<db:title>bool QQuickPaintedItem::antialiasing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>antialiasing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool antialiasing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if antialiased painting is enabled; otherwise, false is returned.</db:para>
<db:para>By default, antialiasing is not enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setAntialiasing">setAntialiasing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTextureProvider">
<db:title>[override virtual] bool QQuickPaintedItem::isTextureProvider() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isTextureProvider</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isTextureProvider() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickitem.xml#isTextureProvider" role="function">QQuickItem::isTextureProvider() const</db:link>.</db:para>
</db:section>
<db:section xml:id="itemChange">
<db:title>[override virtual protected] void QQuickPaintedItem::itemChange(QQuickItem::ItemChange <db:emphasis>change</db:emphasis>, const QQuickItem::ItemChangeData &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>itemChange</db:methodname>
<db:methodparam>
<db:type>QQuickItem::ItemChange</db:type>
<db:parameter>change</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QQuickItem::ItemChangeData &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void itemChange(QQuickItem::ItemChange change, const QQuickItem::ItemChangeData &amp;value) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickitem.xml#itemChange" role="function">QQuickItem::itemChange(QQuickItem::ItemChange change, const QQuickItem::ItemChangeData &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="mipmap">
<db:title>bool QQuickPaintedItem::mipmap() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>mipmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool mipmap() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if mipmaps are enabled; otherwise, false is returned.</db:para>
<db:para>By default, mipmapping is not enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setMipmap">setMipmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opaquePainting">
<db:title>bool QQuickPaintedItem::opaquePainting() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>opaquePainting</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool opaquePainting() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this item is opaque; otherwise, false is returned.</db:para>
<db:para>By default, painted items are not opaque.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setOpaquePainting">setOpaquePainting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint">
<db:title>[pure virtual] void QQuickPaintedItem::paint(QPainter *<db:emphasis>painter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paint</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paint(QPainter *painter) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function, which is usually called by the QML Scene Graph, paints the contents of an item in local coordinates.</db:para>
<db:para>The underlying texture will have a size defined by <db:link xlink:href="qquickpainteditem.xml#textureSize-prop">textureSize</db:link> when set, or the item's size, multiplied by the window's device pixel ratio.</db:para>
<db:para>The function is called after the item has been filled with the <db:link xlink:href="qquickpainteditem.xml#fillColor-prop">fillColor</db:link>.</db:para>
<db:para>Reimplement this function in a <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> subclass to provide the item's painting implementation, using <db:code role="parameter">painter</db:code>.</db:para>
<db:note>
<db:para>The QML Scene Graph uses two separate threads, the main thread does things such as processing events or updating animations while a second thread does the actual issuing of graphics resource updates and the recording of draw calls. As a consequence, paint() is not called from the main GUI thread but from the GL enabled renderer thread. At the moment paint() is called, the GUI thread is blocked and this is therefore thread-safe.</db:para>
</db:note>
<db:warning>
<db:para>Extreme caution must be used when creating QObjects, emitting signals, starting timers and similar inside this function as these will have affinity to the rendering thread.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#width-prop">width</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#height-prop">height</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#textureSize-prop">textureSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="performanceHints">
<db:title>QQuickPaintedItem::PerformanceHints QQuickPaintedItem::performanceHints() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQuickPaintedItem::PerformanceHints</db:type>
<db:methodname>performanceHints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickPaintedItem::PerformanceHints performanceHints() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the performance hints.</db:para>
<db:para>By default, no performance hint is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setPerformanceHint">setPerformanceHint</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#setPerformanceHints">setPerformanceHints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseResources">
<db:title>[override virtual protected] void QQuickPaintedItem::releaseResources()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>releaseResources</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void releaseResources() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickitem.xml#releaseResources" role="function">QQuickItem::releaseResources()</db:link>.</db:para>
</db:section>
<db:section xml:id="setAntialiasing">
<db:title>void QQuickPaintedItem::setAntialiasing(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAntialiasing</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAntialiasing(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true, antialiased painting is enabled.</db:para>
<db:para>By default, antialiasing is not enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#antialiasing">antialiasing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipmap">
<db:title>void QQuickPaintedItem::setMipmap(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMipmap</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMipmap(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true, mipmapping is enabled on the associated texture.</db:para>
<db:para>Mipmapping increases rendering speed and reduces aliasing artifacts when the item is scaled down.</db:para>
<db:para>By default, mipmapping is not enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#mipmap">mipmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOpaquePainting">
<db:title>void QQuickPaintedItem::setOpaquePainting(bool <db:emphasis>opaque</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOpaquePainting</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>opaque</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOpaquePainting(bool opaque)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">opaque</db:code> is true, the item is opaque; otherwise, it is considered as translucent.</db:para>
<db:para>Opaque items are not blended with the rest of the scene, you should set this to true if the content of the item is opaque to speed up rendering.</db:para>
<db:para>By default, painted items are not opaque.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#opaquePainting">opaquePainting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPerformanceHint">
<db:title>void QQuickPaintedItem::setPerformanceHint(QQuickPaintedItem::PerformanceHint <db:emphasis>hint</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPerformanceHint</db:methodname>
<db:methodparam>
<db:type>QQuickPaintedItem::PerformanceHint</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPerformanceHint(QQuickPaintedItem::PerformanceHint hint, bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given performance <db:code role="parameter">hint</db:code> on the item if <db:code role="parameter">enabled</db:code> is true; otherwise clears the performance hint.</db:para>
<db:para>By default, no performance hint is enabled/</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setPerformanceHints">setPerformanceHints</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#performanceHints">performanceHints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPerformanceHints">
<db:title>void QQuickPaintedItem::setPerformanceHints(QQuickPaintedItem::PerformanceHints <db:emphasis>hints</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPerformanceHints</db:methodname>
<db:methodparam>
<db:type>QQuickPaintedItem::PerformanceHints</db:type>
<db:parameter>hints</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPerformanceHints(QQuickPaintedItem::PerformanceHints hints)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the performance hints to <db:code role="parameter">hints</db:code></db:para>
<db:para>By default, no performance hint is enabled/</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setPerformanceHint">setPerformanceHint</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#performanceHints">performanceHints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureProvider">
<db:title>[override virtual] QSGTextureProvider *QQuickPaintedItem::textureProvider() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSGTextureProvider *</db:type>
<db:methodname>textureProvider</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGTextureProvider * textureProvider() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickitem.xml#textureProvider" role="function">QQuickItem::textureProvider() const</db:link>.</db:para>
</db:section>
<db:section xml:id="update">
<db:title>void QQuickPaintedItem::update(const QRect &amp;<db:emphasis>rect</db:emphasis> = QRect())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
<db:initializer>QRect()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update(const QRect &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Schedules a redraw of the area covered by <db:code role="parameter">rect</db:code> in this item. You can call this function whenever your item needs to be redrawn, such as if it changes appearance or size.</db:para>
<db:para>This function does not cause an immediate paint; instead it schedules a paint request that is processed by the QML Scene Graph when the next frame is rendered. The item will only be redrawn if it is visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#paint">paint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updatePaintNode">
<db:title>[override virtual protected] QSGNode *QQuickPaintedItem::updatePaintNode(QSGNode *<db:emphasis>oldNode</db:emphasis>, QQuickItem::UpdatePaintNodeData *<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QSGNode *</db:type>
<db:methodname>updatePaintNode</db:methodname>
<db:methodparam>
<db:type>QSGNode *</db:type>
<db:parameter>oldNode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQuickItem::UpdatePaintNodeData *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGNode * updatePaintNode(QSGNode *oldNode, QQuickItem::UpdatePaintNodeData *data) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickitem.xml#updatePaintNode" role="function">QQuickItem::updatePaintNode(QSGNode *oldNode, QQuickItem::UpdatePaintNodeData *updatePaintNodeData)</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QQuickPaintedItem</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="contentsScale-prop">
<db:title>contentsScale : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>contentsScale</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">contentsScale</db:synopsisinfo>
<db:synopsisinfo role="setter">setContentsScale</db:synopsisinfo>
<db:synopsisinfo role="notifier">contentsScaleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Obsolete method for scaling the contents.</db:para>
<db:para>This function is provided for compatibility, use <db:link xlink:href="qquickitem.xml#size">size</db:link>() in combination with <db:link xlink:href="qquickpainteditem.xml#textureSize-prop">textureSize</db:link>() to decide the size of what you are drawing.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">contentsScale</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setContentsScale</db:emphasis>(<db:emphasis>qreal</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">contentsScaleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#width-prop">width</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#height-prop">height</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#textureSize-prop">textureSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentsSize-prop">
<db:title>contentsSize : QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>contentsSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">contentsSize</db:synopsisinfo>
<db:synopsisinfo role="setter">setContentsSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">contentsSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Obsolete method for setting the contents size.</db:para>
<db:para>This function is provided for compatibility, use size in combination with <db:link xlink:href="qquickpainteditem.xml#textureSize-prop">textureSize</db:link> to decide the size of what you are drawing.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">contentsSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setContentsSize</db:emphasis>(<db:emphasis>const QSize &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">contentsSizeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#width-prop">width</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#height-prop">height</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#textureSize-prop">textureSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="contentsBoundingRect">
<db:title>QRectF QQuickPaintedItem::contentsBoundingRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>contentsBoundingRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF contentsBoundingRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This function is provided for compatibility, use size in combination with <db:link xlink:href="qquickpainteditem.xml#textureSize-prop">textureSize</db:link> to decide the size of what you are drawing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#width-prop">width</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#height-prop">height</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#textureSize-prop">textureSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetContentsSize">
<db:title>void QQuickPaintedItem::resetContentsSize()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetContentsSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetContentsSize()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qquickpainteditem.xml#contentsSize-prop" role="deprecated">setContentsSize</db:link>(QSize()).</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
