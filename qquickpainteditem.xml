<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QQuickPaintedItem Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> class provides a way to use the <db:link xlink:href="qpainter.xml">QPainter</db:link> API in the QML Scene Graph.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickPaintedItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickitem.xml" xlink:role="class">QQuickItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> makes it possible to use the <db:link xlink:href="qpainter.xml">QPainter</db:link> API with the QML Scene Graph. It sets up a textured rectangle in the Scene Graph and uses a <db:link xlink:href="qpainter.xml">QPainter</db:link> to paint onto the texture. The render target can be either a <db:link xlink:href="qimage.xml">QImage</db:link> or a <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link>. When the render target is a <db:link xlink:href="qimage.xml">QImage</db:link>, <db:link xlink:href="qpainter.xml">QPainter</db:link> first renders into the image then the content is uploaded to the texture. When a <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> is used, <db:link xlink:href="qpainter.xml">QPainter</db:link> paints directly onto the texture. Call <db:link xlink:href="qquickpainteditem.xml#update">update</db:link>() to trigger a repaint.</db:para>
<db:para>To enable <db:link xlink:href="qpainter.xml">QPainter</db:link> to do anti-aliased rendering, use <db:link xlink:href="qquickpainteditem.xml#setAntialiasing">setAntialiasing</db:link>().</db:para>
<db:para>To write your own painted item, you first create a subclass of <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>, and then start by implementing its only pure virtual public function: <db:link xlink:href="qquickpainteditem.xml#paint">paint</db:link>(), which implements the actual painting. To get the size of the area painted by the item, use <db:link xlink:href="qquickpainteditem.xml#contentsBoundingRect">contentsBoundingRect</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PerformanceHint-enum">
<db:title>enum QQuickPaintedItem::PerformanceHint</db:title>
<db:bridgehead renderas="sect2">flags QQuickPaintedItem::PerformanceHints</db:bridgehead>
<db:para>This enum describes flags that you can enable to improve rendering performance in <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>. By default, none of these flags are set.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:emphasis>::FastFBOResizing</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>If your item gets resized often and you are using the <db:link xlink:href="qquickpainteditem.xml#RenderTarget-enum">QQuickPaintedItem::FramebufferObject</db:link> render target, set this flag to true to reduce the item resizing time at the cost of using more graphics memory. Resizing a Framebuffer object is a costly operation, by enabling this property the Framebuffer Object will use a texture larger than the actual size of the item to avoid as much as possible resizing it.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PerformanceHints</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PerformanceHint&gt;. </db:code>It stores an OR combination of <db:code>PerformanceHint</db:code> values.</db:para>
</db:section>
<db:section xml:id="RenderTarget-enum">
<db:title>enum QQuickPaintedItem::RenderTarget</db:title>
<db:para>This enum describes <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>'s render targets. The render target is the surface <db:link xlink:href="qpainter.xml">QPainter</db:link> paints onto before the item is rendered on screen.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:emphasis>::Image</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default; <db:link xlink:href="qpainter.xml">QPainter</db:link> paints into a <db:link xlink:href="qimage.xml">QImage</db:link> using the raster paint engine. The image's content needs to be uploaded to graphics memory afterward, this operation can potentially be slow if the item is large. This render target allows high quality anti-aliasing and fast item resizing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:emphasis>::FramebufferObject</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> paints into a <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> using the GL paint engine. Painting can be faster as no texture upload is required, but anti-aliasing quality is not as good as if using an image. This render target allows faster rendering in some cases, but you should avoid using it if the item is resized often.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:emphasis>::InvertedYFramebufferObject</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Exactly as for FramebufferObject above, except once the painting is done, prior to rendering the painted image is flipped about the x-axis so that the top-most pixels are now at the bottom. Since this is done with the OpenGL texture coordinates it is a much faster way to achieve this effect than using a painter transform.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setRenderTarget()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickPaintedItem">
<db:title>QQuickPaintedItem::QQuickPaintedItem(QQuickItem *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> with the given <db:code role="parameter">parent</db:code> item.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickPaintedItem">
<db:title>[virtual noexcept] QQuickPaintedItem::~QQuickPaintedItem()</db:title>
<db:para>Destroys the <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>.</db:para>
</db:section>
<db:section xml:id="antialiasing">
<db:title>bool QQuickPaintedItem::antialiasing() const</db:title>
<db:para>Returns true if antialiased painting is enabled; otherwise, false is returned.</db:para>
<db:para>By default, antialiasing is not enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setAntialiasing">setAntialiasing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentsBoundingRect">
<db:title>QRectF QQuickPaintedItem::contentsBoundingRect() const</db:title>
<db:para>This function returns the outer bounds of the item as a rectangle; all painting must be restricted to inside an item's bounding rect.</db:para>
<db:para>If the contents size has not been set it reflects the size of the item; otherwise it reflects the contents size scaled by the contents scale.</db:para>
<db:para>Use this function to know the area painted by the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QQuickItem::width()</db:link></db:member>
<db:member><db:link xlink:href="">QQuickItem::height()</db:link></db:member>
<db:member><db:link xlink:href="">contentsSize()</db:link></db:member>
<db:member><db:link xlink:href="">contentsScale()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mipmap">
<db:title>bool QQuickPaintedItem::mipmap() const</db:title>
<db:para>Returns true if mipmaps are enabled; otherwise, false is returned.</db:para>
<db:para>By default, mipmapping is not enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setMipmap">setMipmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opaquePainting">
<db:title>bool QQuickPaintedItem::opaquePainting() const</db:title>
<db:para>Returns true if this item is opaque; otherwise, false is returned.</db:para>
<db:para>By default, painted items are not opaque.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setOpaquePainting">setOpaquePainting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint">
<db:title>[pure virtual] void QQuickPaintedItem::paint(QPainter *<db:emphasis>painter</db:emphasis>)</db:title>
<db:para>This function, which is usually called by the QML Scene Graph, paints the contents of an item in local coordinates.</db:para>
<db:para>The function is called after the item has been filled with the fillColor.</db:para>
<db:para>Reimplement this function in a <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> subclass to provide the item's painting implementation, using <db:code role="parameter">painter</db:code>.</db:para>
<db:note>
<db:para>The QML Scene Graph uses two separate threads, the main thread does things such as processing events or updating animations while a second thread does the actual OpenGL rendering. As a consequence, paint() is not called from the main GUI thread but from the GL enabled renderer thread. At the moment paint() is called, the GUI thread is blocked and this is therefore thread-safe.</db:para>
</db:note>
<db:warning>
<db:para>Extreme caution must be used when creating QObjects, emitting signals, starting timers and similar inside this function as these will have affinity to the rendering thread.</db:para>
</db:warning>
</db:section>
<db:section xml:id="performanceHints">
<db:title>QQuickPaintedItem::PerformanceHints QQuickPaintedItem::performanceHints() const</db:title>
<db:para>Returns the performance hints.</db:para>
<db:para>By default, no performance hint is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setPerformanceHint">setPerformanceHint</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#setPerformanceHints">setPerformanceHints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetContentsSize">
<db:title>void QQuickPaintedItem::resetContentsSize()</db:title>
<db:para>This convenience function is equivalent to calling setContentsSize(QSize()).</db:para>
</db:section>
<db:section xml:id="setAntialiasing">
<db:title>void QQuickPaintedItem::setAntialiasing(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, antialiased painting is enabled.</db:para>
<db:para>By default, antialiasing is not enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#antialiasing">antialiasing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipmap">
<db:title>void QQuickPaintedItem::setMipmap(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, mipmapping is enabled on the associated texture.</db:para>
<db:para>Mipmapping increases rendering speed and reduces aliasing artifacts when the item is scaled down.</db:para>
<db:para>By default, mipmapping is not enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#mipmap">mipmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOpaquePainting">
<db:title>void QQuickPaintedItem::setOpaquePainting(bool <db:emphasis>opaque</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">opaque</db:code> is true, the item is opaque; otherwise, it is considered as translucent.</db:para>
<db:para>Opaque items are not blended with the rest of the scene, you should set this to true if the content of the item is opaque to speed up rendering.</db:para>
<db:para>By default, painted items are not opaque.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#opaquePainting">opaquePainting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPerformanceHint">
<db:title>void QQuickPaintedItem::setPerformanceHint(QQuickPaintedItem::PerformanceHint <db:emphasis>hint</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:para>Sets the given performance <db:code role="parameter">hint</db:code> on the item if <db:code role="parameter">enabled</db:code> is true; otherwise clears the performance hint.</db:para>
<db:para>By default, no performance hint is enabled/</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setPerformanceHints">setPerformanceHints</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#performanceHints">performanceHints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPerformanceHints">
<db:title>void QQuickPaintedItem::setPerformanceHints(QQuickPaintedItem::PerformanceHints <db:emphasis>hints</db:emphasis>)</db:title>
<db:para>Sets the performance hints to <db:code role="parameter">hints</db:code></db:para>
<db:para>By default, no performance hint is enabled/</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#setPerformanceHint">setPerformanceHint</db:link>()</db:member>
<db:member><db:link xlink:href="qquickpainteditem.xml#performanceHints">performanceHints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update">
<db:title>void QQuickPaintedItem::update(const QRect &amp;<db:emphasis>rect</db:emphasis> = QRect())</db:title>
<db:para>Schedules a redraw of the area covered by <db:code role="parameter">rect</db:code> in this item. You can call this function whenever your item needs to be redrawn, such as if it changes appearance or size.</db:para>
<db:para>This function does not cause an immediate paint; instead it schedules a paint request that is processed by the QML Scene Graph when the next frame is rendered. The item will only be redrawn if it is visible.</db:para>
<db:para>Note that calling this function will trigger a repaint of the whole scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickpainteditem.xml#paint">paint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updatePaintNode">
<db:title>[override virtual protected] QSGNode *QQuickPaintedItem::updatePaintNode(QSGNode *<db:emphasis>oldNode</db:emphasis>, QQuickItem::UpdatePaintNodeData *<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qquickitem.xml#updatePaintNode" role="function">QQuickItem::updatePaintNode(QSGNode *oldNode, QQuickItem::UpdatePaintNodeData *updatePaintNodeData)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
