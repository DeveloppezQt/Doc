<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QEventLoop Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qeventloop.xml">QEventLoop</db:link> class provides a means of entering and leaving an event loop.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QEventLoop</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>At any time, you can create a <db:link xlink:href="qeventloop.xml">QEventLoop</db:link> object and call <db:link xlink:href="qeventloop.xml#exec">exec</db:link>() on it to start a local event loop. From within the event loop, calling <db:link xlink:href="qeventloop.xml#exit">exit</db:link>() will force <db:link xlink:href="qeventloop.xml#exec">exec</db:link>() to return.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ProcessEventsFlag-enum">
<db:title>enum QEventLoop::ProcessEventsFlag</db:title>
<db:bridgehead renderas="sect2">flags QEventLoop::ProcessEventsFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>ProcessEventsFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>AllEvents</db:enumidentifier>
<db:enumvalue>0x00</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExcludeUserInputEvents</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExcludeSocketNotifiers</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WaitForMoreEvents</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>X11ExcludeTimers</db:enumidentifier>
<db:enumvalue>0x08</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EventLoopExec</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DialogExec</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QEventLoop::ProcessEventsFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum controls the types of events processed by the <db:link xlink:href="qeventloop.xml#processEvents">processEvents</db:link>() functions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:emphasis>::AllEvents</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>All events. Note that <db:link xlink:href="qevent.xml#Type-enum">DeferredDelete</db:link> events are processed specially. See <db:link xlink:href="qobject.xml#deleteLater">QObject::deleteLater</db:link>() for more details.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:emphasis>::ExcludeUserInputEvents</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Do not process user input events, such as ButtonPress and KeyPress. Note that the events are not discarded; they will be delivered the next time <db:link xlink:href="qeventloop.xml#processEvents">processEvents</db:link>() is called without the ExcludeUserInputEvents flag.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:emphasis>::ExcludeSocketNotifiers</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Do not process socket notifier events. Note that the events are not discarded; they will be delivered the next time <db:link xlink:href="qeventloop.xml#processEvents">processEvents</db:link>() is called without the ExcludeSocketNotifiers flag.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:emphasis>::WaitForMoreEvents</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Wait for events if no pending events are available.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ProcessEventsFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ProcessEventsFlag&gt;. </db:code>It stores an OR combination of <db:code>ProcessEventsFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventloop.xml#processEvents">processEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QEventLoop">
<db:title>[explicit] QEventLoop::QEventLoop(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QEventLoop</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventLoop(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an event loop object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QEventLoop">
<db:title>[virtual] QEventLoop::~QEventLoop()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QEventLoop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QEventLoop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the event loop object.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual] bool QEventLoop::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="exec">
<db:title>int QEventLoop::exec(QEventLoop::ProcessEventsFlags <db:emphasis>flags</db:emphasis> = AllEvents)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>exec</db:methodname>
<db:methodparam>
<db:type>QEventLoop::ProcessEventsFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>AllEvents</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int exec(QEventLoop::ProcessEventsFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enters the main event loop and waits until <db:link xlink:href="qeventloop.xml#exit">exit</db:link>() is called. Returns the value that was passed to <db:link xlink:href="qeventloop.xml#exit">exit</db:link>().</db:para>
<db:para>If <db:code role="parameter">flags</db:code> are specified, only events of the types allowed by the <db:code role="parameter">flags</db:code> will be processed.</db:para>
<db:para>It is necessary to call this function to start event handling. The main event loop receives events from the window system and dispatches these to the application widgets.</db:para>
<db:para>Generally speaking, no user interaction can take place before calling exec(). As a special case, modal widgets like <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> can be used before calling exec(), because modal widgets use their own local event loop.</db:para>
<db:para>To make your application perform idle processing (i.e. executing a special function whenever there are no pending events), use a <db:link xlink:href="qtimer.xml">QTimer</db:link> with 0 timeout. More sophisticated idle processing schemes can be achieved using <db:link xlink:href="qeventloop.xml#processEvents">processEvents</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>()</db:member>
<db:member><db:link xlink:href="qeventloop.xml#exit">exit</db:link>()</db:member>
<db:member><db:link xlink:href="qeventloop.xml#processEvents">processEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exit">
<db:title>void QEventLoop::exit(int <db:emphasis>returnCode</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>exit</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>returnCode</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void exit(int returnCode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Tells the event loop to exit with a return code.</db:para>
<db:para>After this function has been called, the event loop returns from the call to <db:link xlink:href="qeventloop.xml#exec">exec</db:link>(). The <db:link xlink:href="qeventloop.xml#exec">exec</db:link>() function returns <db:code role="parameter">returnCode</db:code>.</db:para>
<db:para>By convention, a <db:code role="parameter">returnCode</db:code> of 0 means success, and any non-zero value indicates an error.</db:para>
<db:para>Note that unlike the C library function of the same name, this function <db:emphasis>does</db:emphasis> return to the caller – it is event processing that stops.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>()</db:member>
<db:member><db:link xlink:href="qeventloop.xml#quit">quit</db:link>()</db:member>
<db:member><db:link xlink:href="qeventloop.xml#exec">exec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRunning">
<db:title>bool QEventLoop::isRunning() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isRunning</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isRunning() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the event loop is running; otherwise returns false. The event loop is considered running from the time when <db:link xlink:href="qeventloop.xml#exec">exec</db:link>() is called until <db:link xlink:href="qeventloop.xml#exit">exit</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventloop.xml#exec">exec</db:link>()</db:member>
<db:member><db:link xlink:href="qeventloop.xml#exit">exit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processEvents">
<db:title>bool QEventLoop::processEvents(QEventLoop::ProcessEventsFlags <db:emphasis>flags</db:emphasis> = AllEvents)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>processEvents</db:methodname>
<db:methodparam>
<db:type>QEventLoop::ProcessEventsFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>AllEvents</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool processEvents(QEventLoop::ProcessEventsFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Processes some pending events that match <db:code role="parameter">flags</db:code>. Returns true if pending events were handled; otherwise returns false.</db:para>
<db:para>This function is especially useful if you have a long running operation and want to show its progress without allowing user input; i.e. by using the <db:link xlink:href="qeventloop.xml#ProcessEventsFlag-enum">ExcludeUserInputEvents</db:link> flag.</db:para>
<db:para>This function is simply a wrapper for <db:link xlink:href="qabstracteventdispatcher.xml#processEvents">QAbstractEventDispatcher::processEvents</db:link>(). See the documentation for that function for details.</db:para>
</db:section>
<db:section xml:id="processEvents-1">
<db:title>void QEventLoop::processEvents(QEventLoop::ProcessEventsFlags <db:emphasis>flags</db:emphasis>, int <db:emphasis>maxTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>processEvents</db:methodname>
<db:methodparam>
<db:type>QEventLoop::ProcessEventsFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maxTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void processEvents(QEventLoop::ProcessEventsFlags flags, int maxTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Process pending events that match <db:code role="parameter">flags</db:code> for a maximum of <db:code role="parameter">maxTime</db:code> milliseconds, or until there are no more events to process, whichever is shorter. This function is especially useful if you have a long running operation and want to show its progress without allowing user input, i.e. by using the <db:link xlink:href="qeventloop.xml#ProcessEventsFlag-enum">ExcludeUserInputEvents</db:link> flag.</db:para>
<db:para><db:emphasis role="bold">Notes:</db:emphasis></db:para>
<db:itemizedlist>
<db:listitem>
<db:para>This function does not process events continuously; it returns after all available events are processed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Specifying the <db:link xlink:href="qeventloop.xml#ProcessEventsFlag-enum">WaitForMoreEvents</db:link> flag makes no sense and will be ignored.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="quit">
<db:title>void QEventLoop::quit()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>quit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void quit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Tells the event loop to exit normally.</db:para>
<db:para>Same as exit(0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>()</db:member>
<db:member><db:link xlink:href="qeventloop.xml#exit">exit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wakeUp">
<db:title>void QEventLoop::wakeUp()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>wakeUp</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wakeUp()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Wakes up the event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#wakeUp">QAbstractEventDispatcher::wakeUp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
