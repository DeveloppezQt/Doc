<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickRenderControl Example</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to render a Qt Quick scene into a texture that is then used by a non-Quick based OpenGL renderer.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;cuberenderer.h&quot;
#include &lt;QOpenGLContext&gt;
#include &lt;QOpenGLFunctions&gt;
#include &lt;QOpenGLShaderProgram&gt;
#include &lt;QOpenGLVertexArrayObject&gt;
#include &lt;QOpenGLBuffer&gt;
#include &lt;QOpenGLVertexArrayObject&gt;
#include &lt;QOffscreenSurface&gt;
#include &lt;QWindow&gt;

CubeRenderer::CubeRenderer(QOffscreenSurface *offscreenSurface)
    : m_offscreenSurface(offscreenSurface),
      m_context(0),
      m_program(0),
      m_vbo(0),
      m_vao(0),
      m_matrixLoc(0)
{
}

CubeRenderer::~CubeRenderer()
{
    // Use a temporary offscreen surface to do the cleanup.
    // There may not be a native window surface available anymore at this stage.
    m_context-&gt;makeCurrent(m_offscreenSurface);

    delete m_program;
    delete m_vbo;
    delete m_vao;

    m_context-&gt;doneCurrent();
    delete m_context;
}

void CubeRenderer::init(QWindow *w, QOpenGLContext *share)
{
    m_context = new QOpenGLContext;
    m_context-&gt;setShareContext(share);
    m_context-&gt;setFormat(w-&gt;requestedFormat());
    m_context-&gt;create();
    if (!m_context-&gt;makeCurrent(w))
        return;

    QOpenGLFunctions *f = m_context-&gt;functions();
    f-&gt;glClearColor(0.0f, 0.1f, 0.25f, 1.0f);
    f-&gt;glViewport(0, 0, w-&gt;width() * w-&gt;devicePixelRatio(), w-&gt;height() * w-&gt;devicePixelRatio());

    static const char *vertexShaderSource =
        &quot;attribute highp vec4 vertex;\n&quot;
        &quot;attribute lowp vec2 coord;\n&quot;
        &quot;varying lowp vec2 v_coord;\n&quot;
        &quot;uniform highp mat4 matrix;\n&quot;
        &quot;void main() {\n&quot;
        &quot;   v_coord = coord;\n&quot;
        &quot;   gl_Position = matrix * vertex;\n&quot;
        &quot;}\n&quot;;
    static const char *fragmentShaderSource =
        &quot;varying lowp vec2 v_coord;\n&quot;
        &quot;uniform sampler2D sampler;\n&quot;
        &quot;void main() {\n&quot;
        &quot;   gl_FragColor = vec4(texture2D(sampler, v_coord).rgb, 1.0);\n&quot;
        &quot;}\n&quot;;
    m_program = new QOpenGLShaderProgram;
    m_program-&gt;addShaderFromSourceCode(QOpenGLShader::Vertex, vertexShaderSource);
    m_program-&gt;addShaderFromSourceCode(QOpenGLShader::Fragment, fragmentShaderSource);
    m_program-&gt;bindAttributeLocation(&quot;vertex&quot;, 0);
    m_program-&gt;bindAttributeLocation(&quot;coord&quot;, 1);
    m_program-&gt;link();
    m_matrixLoc = m_program-&gt;uniformLocation(&quot;matrix&quot;);

    m_vao = new QOpenGLVertexArrayObject;
    m_vao-&gt;create();
    QOpenGLVertexArrayObject::Binder vaoBinder(m_vao);

    m_vbo = new QOpenGLBuffer;
    m_vbo-&gt;create();
    m_vbo-&gt;bind();

    GLfloat v[] = {
        -0.5, 0.5, 0.5, 0.5,-0.5,0.5,-0.5,-0.5,0.5,
        0.5, -0.5, 0.5, -0.5,0.5,0.5,0.5,0.5,0.5,
        -0.5, -0.5, -0.5, 0.5,-0.5,-0.5,-0.5,0.5,-0.5,
        0.5, 0.5, -0.5, -0.5,0.5,-0.5,0.5,-0.5,-0.5,

        0.5, -0.5, -0.5, 0.5,-0.5,0.5,0.5,0.5,-0.5,
        0.5, 0.5, 0.5, 0.5,0.5,-0.5,0.5,-0.5,0.5,
        -0.5, 0.5, -0.5, -0.5,-0.5,0.5,-0.5,-0.5,-0.5,
        -0.5, -0.5, 0.5, -0.5,0.5,-0.5,-0.5,0.5,0.5,

        0.5, 0.5,  -0.5, -0.5, 0.5,  0.5,  -0.5,  0.5,  -0.5,
        -0.5,  0.5,  0.5,  0.5,  0.5,  -0.5, 0.5, 0.5,  0.5,
        -0.5,  -0.5, -0.5, -0.5, -0.5, 0.5,  0.5, -0.5, -0.5,
        0.5, -0.5, 0.5,  0.5,  -0.5, -0.5, -0.5,  -0.5, 0.5
    };
    GLfloat texCoords[] = {
        0.0f,0.0f, 1.0f,1.0f, 1.0f,0.0f,
        1.0f,1.0f, 0.0f,0.0f, 0.0f,1.0f,
        1.0f,1.0f, 1.0f,0.0f, 0.0f,1.0f,
        0.0f,0.0f, 0.0f,1.0f, 1.0f,0.0f,

        1.0f,1.0f, 1.0f,0.0f, 0.0f,1.0f,
        0.0f,0.0f, 0.0f,1.0f, 1.0f,0.0f,
        0.0f,0.0f, 1.0f,1.0f, 1.0f,0.0f,
        1.0f,1.0f, 0.0f,0.0f, 0.0f,1.0f,

        0.0f,1.0f, 1.0f,0.0f, 1.0f,1.0f,
        1.0f,0.0f, 0.0f,1.0f, 0.0f,0.0f,
        1.0f,0.0f, 1.0f,1.0f, 0.0f,0.0f,
        0.0f,1.0f, 0.0f,0.0f, 1.0f,1.0f
    };

    const int vertexCount = 36;
    m_vbo-&gt;allocate(sizeof(GLfloat) * vertexCount * 5);
    m_vbo-&gt;write(0, v, sizeof(GLfloat) * vertexCount * 3);
    m_vbo-&gt;write(sizeof(GLfloat) * vertexCount * 3, texCoords, sizeof(GLfloat) * vertexCount * 2);
    m_vbo-&gt;release();

    if (m_vao-&gt;isCreated())
        setupVertexAttribs();
}

void CubeRenderer::resize(int w, int h)
{
    m_proj.setToIdentity();
    m_proj.perspective(45, w / float(h), 0.01f, 100.0f);
}

void CubeRenderer::setupVertexAttribs()
{
    m_vbo-&gt;bind();
    m_program-&gt;enableAttributeArray(0);
    m_program-&gt;enableAttributeArray(1);
    m_context-&gt;functions()-&gt;glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
    m_context-&gt;functions()-&gt;glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0,
                                                  (const void *)(36 * 3 * sizeof(GLfloat)));
    m_vbo-&gt;release();
}

void CubeRenderer::render(QWindow *w, QOpenGLContext *share, uint texture)
{
    if (!m_context)
        init(w, share);

    if (!m_context-&gt;makeCurrent(w))
        return;

    QOpenGLFunctions *f = m_context-&gt;functions();
    f-&gt;glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    if (texture) {
        f-&gt;glBindTexture(GL_TEXTURE_2D, texture);
        f-&gt;glFrontFace(GL_CW); // because our cube's vertex data is such
        f-&gt;glEnable(GL_CULL_FACE);
        f-&gt;glEnable(GL_DEPTH_TEST);

        m_program-&gt;bind();
        QOpenGLVertexArrayObject::Binder vaoBinder(m_vao);
        // If VAOs are not supported, set the vertex attributes every time.
        if (!m_vao-&gt;isCreated())
            setupVertexAttribs();

        static GLfloat angle = 0;
        QMatrix4x4 m;
        m.translate(0, 0, -2);
        m.rotate(90, 0, 0, 1);
        m.rotate(angle, 0.5, 1, 0);
        angle += 0.5f;

        m_program-&gt;setUniformValue(m_matrixLoc, m_proj * m);

        // Draw the cube.
        f-&gt;glDrawArrays(GL_TRIANGLES, 0, 36);
    }

    m_context-&gt;swapBuffers(w);
}

</db:programlisting>
</db:article>
