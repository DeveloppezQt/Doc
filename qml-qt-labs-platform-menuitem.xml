<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MenuItem QML Type</db:title>
<db:productname>QtLabsPlatform</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Labs Platform Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A native menu item.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt.labs.platform</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-platform-menuseparator.xml" xlink:role="">MenuSeparator</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>QtObject</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qt-labs-platform-menuitem.xml">MenuItem</db:link> type provides a QML API for native platform menu items.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtlabsplatform-menu.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A menu item consists of an <db:link xlink:href="qml-qt-labs-platform-menuitem.xml#icon-prop">icon</db:link>, <db:link xlink:href="qml-qt-labs-platform-menuitem.xml#text-prop">text</db:link>, and <db:link xlink:href="qml-qt-labs-platform-menuitem.xml#shortcut-prop">shortcut</db:link>.</db:para>
<db:programlisting language="cpp">Menu {
    id: zoomMenu

    MenuItem {
        text: qsTr(&quot;Zoom In&quot;)
        shortcut: StandardKey.ZoomIn
        onTriggered: zoomIn()
    }

    MenuItem {
        text: qsTr(&quot;Zoom Out&quot;)
        shortcut: StandardKey.ZoomOut
        onTriggered: zoomOut()
    }
}
</db:programlisting>
<db:note>
<db:para><db:emphasis>Types in Qt.labs modules are not guaranteed to remain compatible in future versions.</db:emphasis></db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-platform-menu.xml">Menu</db:link></db:member>
<db:member><db:link xlink:href="qml-qt-labs-platform-menuitemgroup.xml">MenuItemGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="checkable-prop">
<db:title>checkable : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>checkable</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item is checkable.</db:para>
<db:para>A checkable menu item has an on/off state. For example, in a word processor, a &quot;Bold&quot; menu item may be either on or off. A menu item that is not checkable is a command item that is simply executed, e.g. file save.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-platform-menuitem.xml#checked-prop">checked</db:link></db:member>
<db:member><db:link xlink:href="qml-qt-labs-platform-menuitemgroup.xml">MenuItemGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checked-prop">
<db:title>checked : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>checked</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item is checked (on) or unchecked (off). The default value is <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-platform-menuitem.xml#checkable-prop">checkable</db:link></db:member>
<db:member><db:link xlink:href="qml-qt-labs-platform-menuitemgroup.xml">MenuItemGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item is enabled. The default value is <db:code>true</db:code>.</db:para>
<db:para>Disabled items cannot be triggered by the user. They do not disappear from menus, but they are displayed in a way which indicates that they are unavailable. For example, they might be displayed using only shades of gray.</db:para>
<db:para>When an item is disabled, it is not possible to trigger it through its <db:link xlink:href="qml-qt-labs-platform-menuitem.xml#shortcut-prop">shortcut</db:link>.</db:para>
</db:section>
<db:section xml:id="font-prop">
<db:title>font : font</db:title>
<db:fieldsynopsis>
<db:type>font</db:type>
<db:varname>font</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the menu item's font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-platform-menuitem.xml#text-prop">text</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="group-prop">
<db:title>group : MenuItemGroup</db:title>
<db:fieldsynopsis>
<db:type>MenuItemGroup</db:type>
<db:varname>group</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the group that the item belongs to, or <db:code>null</db:code> if the item is not in a group.</db:para>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon group</db:title>
<db:bridgehead renderas="sect2" xml:id="icon.mask-prop">[since Qt.labs.platform 1.1 (Qt 5.12)] icon.mask : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>icon.mask</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="icon.name-prop">[since Qt.labs.platform 1.1 (Qt 5.12)] icon.name : string</db:bridgehead>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>icon.name</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="icon.source-prop">[since Qt.labs.platform 1.1 (Qt 5.12)] icon.source : url</db:bridgehead>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>icon.source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the menu item's icon.</db:para>
<db:programlisting language="cpp">MenuItem {
    icon.mask: true
    icon.name: &quot;edit-undo&quot;
    icon.source: &quot;qrc:/images/undo.png&quot;
}
</db:programlisting>
<db:para>This QML property was introduced in Qt.labs.platform 1.1 (Qt 5.12).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#fromTheme">QIcon::fromTheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="menu-prop">
<db:title>[read-only] menu : Menu</db:title>
<db:fieldsynopsis>
<db:type>Menu</db:type>
<db:varname>menu</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the menu that the item belongs to, or <db:code>null</db:code> if the item is not in a menu.</db:para>
</db:section>
<db:section xml:id="role-prop">
<db:title>role : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>role</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the role of the item. The role determines whether the item should be placed into the application menu on macOS.</db:para>
<db:para>Available values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>MenuItem.NoRole</db:para>
</db:td>
<db:td>
<db:para>The item should not be put into the application menu</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MenuItem.TextHeuristicRole</db:para>
</db:td>
<db:td>
<db:para>The item should be put in the application menu based on the action's text (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MenuItem.ApplicationSpecificRole</db:para>
</db:td>
<db:td>
<db:para>The item should be put in the application menu with an application-specific role</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MenuItem.AboutQtRole</db:para>
</db:td>
<db:td>
<db:para>The item handles the &quot;About Qt&quot; menu item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MenuItem.AboutRole</db:para>
</db:td>
<db:td>
<db:para>The item should be placed where the &quot;About&quot; menu item is in the application menu. The text of the menu item will be set to &quot;About &lt;application name&gt;&quot;. The application name is fetched from the <db:code>Info.plist</db:code> file in the application's bundle (See <db:link xlink:href="macos-deployment.xml">Qt for macOS - Deployment</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MenuItem.PreferencesRole</db:para>
</db:td>
<db:td>
<db:para>The item should be placed where the &quot;Preferences...&quot; menu item is in the application menu.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MenuItem.QuitRole</db:para>
</db:td>
<db:td>
<db:para>The item should be placed where the Quit menu item is in the application menu.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Specifying the role only has effect on items that are in the immediate menus of a menubar, not in the submenus of those menus. For example, if you have a &quot;File&quot; menu in your menubar and the &quot;File&quot; menu has a submenu, specifying a role for the items in that submenu has no effect. They will never be moved to the application menu.</db:para>
</db:section>
<db:section xml:id="separator-prop">
<db:title>separator : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>separator</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item is a separator line. The default value is <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-platform-menuseparator.xml">MenuSeparator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shortcut-prop">
<db:title>shortcut : keysequence</db:title>
<db:fieldsynopsis>
<db:type>keysequence</db:type>
<db:varname>shortcut</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the menu item's shortcut.</db:para>
<db:para>The shortcut key sequence can be set to one of the <db:link xlink:href="qkeysequence.xml#StandardKey-enum">standard keyboard shortcuts</db:link>, or it can be specified by a string containing a sequence of up to four key presses that are needed to <db:link xlink:href="qml-qt-labs-platform-menuitem.xml#triggered-signal">trigger</db:link> the shortcut.</db:para>
<db:para>The default value is an empty key sequence.</db:para>
<db:programlisting language="cpp">MenuItem {
    shortcut: &quot;Ctrl+E,Ctrl+W&quot;
    onTriggered: edit.wrapMode = TextEdit.Wrap
}
</db:programlisting>
</db:section>
<db:section xml:id="subMenu-prop">
<db:title>[read-only] subMenu : Menu</db:title>
<db:fieldsynopsis>
<db:type>Menu</db:type>
<db:varname>subMenu</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the sub-menu that the item contains, or <db:code>null</db:code> if the item is not a sub-menu item.</db:para>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>text</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the menu item's text.</db:para>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>visible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item is visible. The default value is <db:code>true</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="hovered-signal">
<db:title>hovered()</db:title>
<db:para>This signal is emitted when the menu item is hovered by the user.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onHovered</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="triggered-signal">
<db:title>triggered()</db:title>
<db:para>This signal is emitted when the menu item is triggered by the user.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onTriggered</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="toggle-method">
<db:title>void toggle()</db:title>
<db:para>Toggles the <db:link xlink:href="qml-qt-labs-platform-menuitem.xml#checked-prop">checked</db:link> state to its opposite state.</db:para>
</db:section>
</db:section>
</db:article>
