<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QByteArrayMatcher Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbytearraymatcher.xml">QByteArrayMatcher</db:link> class holds a sequence of bytes that can be quickly matched in a byte array.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QByteArrayMatcher</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QByteArrayMatcher is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is useful when you have a sequence of bytes that you want to repeatedly match against some byte arrays (perhaps in a loop), or when you want to search for the same sequence of bytes multiple times in the same byte array. Using a matcher object and <db:link xlink:href="qbytearraymatcher.xml#indexIn-1">indexIn</db:link>() is faster than matching a plain <db:link xlink:href="qbytearray.xml">QByteArray</db:link> with <db:link xlink:href="qbytearray.xml#indexOf">QByteArray::indexOf</db:link>() if repeated matching takes place. This class offers no benefit if you are doing one-off byte array matches.</db:para>
<db:para>Create the <db:link xlink:href="qbytearraymatcher.xml">QByteArrayMatcher</db:link> with the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> you want to search for. Then call <db:link xlink:href="qbytearraymatcher.xml#indexIn-1">indexIn</db:link>() on the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> that you want to search.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:member>
<db:member><db:link xlink:href="qstringmatcher.xml">QStringMatcher</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QByteArrayMatcher">
<db:title>QByteArrayMatcher::QByteArrayMatcher()</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayMatcher</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayMatcher()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty byte array matcher that won't match anything. Call <db:link xlink:href="qbytearraymatcher.xml#setPattern">setPattern</db:link>() to give it a pattern to match.</db:para>
</db:section>
<db:section xml:id="QByteArrayMatcher-1">
<db:title>[explicit] QByteArrayMatcher::QByteArrayMatcher(const QByteArray &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayMatcher</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayMatcher(const QByteArray &amp;pattern)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a byte array matcher that will search for <db:code role="parameter">pattern</db:code>. Call <db:link xlink:href="qbytearraymatcher.xml#indexIn-1">indexIn</db:link>() to perform a search.</db:para>
</db:section>
<db:section xml:id="QByteArrayMatcher-2">
<db:title>[explicit, since 6.3] QByteArrayMatcher::QByteArrayMatcher(QByteArrayView <db:emphasis>pattern</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayMatcher</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayMatcher(QByteArrayView pattern)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs a byte array matcher that will search for <db:code role="parameter">pattern</db:code>. Call <db:link xlink:href="qbytearraymatcher.xml#indexIn-1">indexIn</db:link>() to perform a search.</db:para>
<db:note>
<db:para>the data that <db:code role="parameter">pattern</db:code> is referencing must remain valid while this object is used.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="QByteArrayMatcher-3">
<db:title>[explicit] QByteArrayMatcher::QByteArrayMatcher(const char *<db:emphasis>pattern</db:emphasis>, qsizetype <db:emphasis>length</db:emphasis> = -1)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayMatcher</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayMatcher(const char *pattern, qsizetype length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a byte array matcher from <db:code role="parameter">pattern</db:code>. <db:code role="parameter">pattern</db:code> has the given <db:code role="parameter">length</db:code>. Call <db:link xlink:href="qbytearraymatcher.xml#indexIn-1">indexIn</db:link>() to perform a search.</db:para>
<db:note>
<db:para>the data that <db:code role="parameter">pattern</db:code> is referencing must remain valid while this object is used.</db:para>
</db:note>
</db:section>
<db:section xml:id="QByteArrayMatcher-4">
<db:title>QByteArrayMatcher::QByteArrayMatcher(const QByteArrayMatcher &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayMatcher</db:methodname>
<db:methodparam>
<db:type>const QByteArrayMatcher &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayMatcher(const QByteArrayMatcher &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Copies the <db:code role="parameter">other</db:code> byte array matcher to this byte array matcher.</db:para>
</db:section>
<db:section xml:id="dtor.QByteArrayMatcher">
<db:title>QByteArrayMatcher::~QByteArrayMatcher()</db:title>
<db:destructorsynopsis>
<db:methodname>~QByteArrayMatcher</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QByteArrayMatcher()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the byte array matcher.</db:para>
</db:section>
<db:section xml:id="indexIn-1">
<db:title>qsizetype QByteArrayMatcher::indexIn(const char *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>indexIn</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype indexIn(const char *str, qsizetype len, qsizetype from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches the char string <db:code role="parameter">str</db:code>, which has length <db:code role="parameter">len</db:code>, from byte position <db:code role="parameter">from</db:code> (default 0, i.e. from the first byte), for the byte array <db:link xlink:href="qbytearraymatcher.xml#pattern">pattern</db:link>() that was set in the constructor or in the most recent call to <db:link xlink:href="qbytearraymatcher.xml#setPattern">setPattern</db:link>(). Returns the position where the <db:link xlink:href="qbytearraymatcher.xml#pattern">pattern</db:link>() matched in <db:code role="parameter">str</db:code>, or -1 if no match was found.</db:para>
</db:section>
<db:section xml:id="indexIn-2">
<db:title>[since 6.3] qsizetype QByteArrayMatcher::indexIn(QByteArrayView <db:emphasis>data</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>indexIn</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype indexIn(QByteArrayView data, qsizetype from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Searches the byte array <db:code role="parameter">data</db:code>, from byte position <db:code role="parameter">from</db:code> (default 0, i.e. from the first byte), for the byte array <db:link xlink:href="qbytearraymatcher.xml#pattern">pattern</db:link>() that was set in the constructor or in the most recent call to <db:link xlink:href="qbytearraymatcher.xml#setPattern">setPattern</db:link>(). Returns the position where the <db:link xlink:href="qbytearraymatcher.xml#pattern">pattern</db:link>() matched in <db:code role="parameter">data</db:code>, or -1 if no match was found.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="pattern">
<db:title>QByteArray QByteArrayMatcher::pattern() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>pattern</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray pattern() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the byte array pattern that this byte array matcher will search for.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearraymatcher.xml#setPattern">setPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPattern">
<db:title>void QByteArrayMatcher::setPattern(const QByteArray &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPattern</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPattern(const QByteArray &amp;pattern)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the byte array that this byte array matcher will search for to <db:code role="parameter">pattern</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearraymatcher.xml#pattern">pattern</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearraymatcher.xml#indexIn-1">indexIn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QByteArrayMatcher &amp;QByteArrayMatcher::operator=(const QByteArrayMatcher &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QByteArrayMatcher &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QByteArrayMatcher &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayMatcher &amp; operator=(const QByteArrayMatcher &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the <db:code role="parameter">other</db:code> byte array matcher to this byte array matcher.</db:para>
</db:section>
</db:section>
</db:article>
