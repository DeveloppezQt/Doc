<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using Layouts in Qt Designer</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="designer-widget-mode.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt Designer's Widget Editing Mode"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="designer-connection-mode.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Designer's Signals and Slots Editing Mode"/></db:extendedlink>
<db:abstract>
<db:para>Qt Designer Manual.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Before a form can be used, the objects on the form need to be placed into layouts. This ensures that the objects will be displayed properly when the form is previewed or used in an application. Placing objects in a layout also ensures that they will be resized correctly when the form is resized.</db:para>
<db:para>Once widgets have been inserted into a layout, it is not possible to move and resize them individually because the layout itself controls the geometry of each widget within it, taking account of the hints provided by spacers. Spacers can be added to the layout to influence the geometries of the widgets.</db:para>
<db:para>Layouts can be nested to form a hierarchy. For example, to achieve a typical dialog layout with a horizontal row of buttons, the dialog elements can be laid out using a vertical box layout with a horizontal box layout containing the buttons at the bottom. For an introduction to the Qt layout system, refer to <db:link xlink:href="layout.xml">Layout Management</db:link>.</db:para>
<db:para>To break a layout, press <db:emphasis role="bold">Ctrl+0</db:emphasis> or choose <db:emphasis role="bold">Break Layout</db:emphasis> from the form's context menu, the <db:emphasis role="bold">Form</db:emphasis> menu or the main toolbar.</db:para>
<db:section xml:id="setting-a-top-level-layout">
<db:title>Setting A Top Level Layout</db:title>
<db:para>The form's top level layout can be set by clearing the selection (click the left mouse button on the form itself) and applying a layout. A top level layout is necessary to ensure that your widgets will resize correctly when its window is resized. To check if you have set a top level layout, preview your widget and attempt to resize the window by dragging the size grip.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-set-layout.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Applying a Layout</db:emphasis></db:para>
<db:para>To apply a layout, you can select your choice of layout from the toolbar shown on the left, or from the context menu shown below.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Similary, top level layouts are set on container widgets (<db:link xlink:href="qgroupbox.xml">QGroupBox</db:link>) or on pages of page-based container widgets (<db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>, <db:link xlink:href="qtoolbox.xml">QToolBox</db:link> and <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>), respectively. The container widget needs to be selected for this to succeed.</db:para>
<db:para>Top level layouts are not visible as separate objects in the Object Inspector. Their properties appear below the widget properties of the main form, container widget, or page of a container widget in the Property Editor.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-set-layout2.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="layout-objects">
<db:title>Layout Objects</db:title>
<db:para>Layout objects are created by applying a layout to a group of existing objects. This is achieved by selecting the objects that you need to manage and applying one of the standard layouts using the main toolbar, the <db:emphasis role="bold">Form</db:emphasis> menu, or the form's context menu.</db:para>
<db:para>The layout object is indicated by a red frame on the form and appears as an object in the Object Inspector. Its properties (margins and constraints) are shown in the Property Editor.</db:para>
<db:para>The layout object can be selected and placed within another layout along with other widgets and layout objects to build a layout hierarchy.</db:para>
<db:para>When a child layout object is selected, its parent layout object can be selected by pressing down the <db:emphasis role="bold">Shift</db:emphasis> key while clicking on it. This makes it possible to select a specific layout in a hierarchy, which is otherwise difficult due to the small frame.</db:para>
</db:section>
<db:section xml:id="inserting-objects-into-a-layout">
<db:title>Inserting Objects Into a Layout</db:title>
<db:anchor xml:id="insertingobjectsintoalayout"/>
<db:para>Objects can be inserted into an existing layout by dragging them from their current positions and dropping them at the required location. A blue cursor is displayed in the layout as an object is dragged over it to indicate where the object will be added.</db:para>
<db:figure>
<db:title>Inserting Objects into a Layout</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-layout-inserting.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:section>
<db:section xml:id="layout-types">
<db:title>Layout Types</db:title>
<db:section xml:id="horizontal-and-vertical-box-layouts">
<db:title>Horizontal and Vertical (Box) Layouts</db:title>
<db:para>The simplest way to arrange objects on a form is to place them in a horizontal or vertical layout. Horizontal layouts ensure that the widgets within are aligned horizontally; vertical layouts ensure that they are aligned vertically.</db:para>
<db:para>Horizontal and vertical layouts can be combined and nested to any depth. However, if you need more control over the placement of objects, consider using the grid layout.</db:para>
</db:section>
<db:section xml:id="the-grid-layout">
<db:title>The Grid Layout</db:title>
<db:para>Complex form layouts can be created by placing objects in a grid layout. This kind of layout gives the form designer much more freedom to arrange widgets on the form, but can result in a much less flexible layout. However, for some kinds of form layout, a grid arrangement is much more suitable than a nested arrangement of horizontal and vertical layouts.</db:para>
</db:section>
<db:section xml:id="the-form-layout">
<db:title>The Form Layout</db:title>
<db:para>The <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> class manages widgets in a two-column form; the left column holds labels and the right column holds field widgets such as line edits, spin boxes, etc. The <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> class adheres to various platform look and feel guidelines and supports wrapping for long rows.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-form-layout.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The UI file above results in the previews shown below.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Windows XP</db:para>
</db:th>
<db:th>
<db:para>macOS</db:para>
</db:th>
<db:th>
<db:para>Cleanlooks</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-form-layout-windowsXP.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-form-layout-macintosh.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-form-layout-cleanlooks.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="splitter-layouts">
<db:title>Splitter Layouts</db:title>
<db:para>Another common way to manage the layout of objects on a form is to place them in a splitter. These splitters arrange the objects horizontally or vertically in the same way as normal layouts, but also allow the user to adjust the amount of space allocated to each object.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-splitter-layout.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Although <db:link xlink:href="qsplitter.xml">QSplitter</db:link> is a container widget, <db:emphasis>Qt Designer</db:emphasis> treats splitter objects as layouts that are applied to existing widgets. To place a group of widgets into a splitter, select them <db:link xlink:href="designer-widget-mode.xml#selectingobjects">as described here</db:link> then apply the splitter layout by using the appropriate toolbar button, keyboard shortcut, or <db:emphasis role="bold">Lay out</db:emphasis> context menu entry.</db:para>
</db:section>
</db:section>
<db:section xml:id="shortcut-keys">
<db:title>Shortcut Keys</db:title>
<db:para>In addition to the standard toolbar and context menu entries, there is also a set of keyboard shortcuts to apply layouts on widgets.</db:para>
<db:anchor xml:id="layoutshortcuts"/>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Layout</db:para>
</db:th>
<db:th>
<db:para>Shortcut</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Horizontal</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Ctrl+1</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Places the selected objects in a horizontal layout.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Vertical</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Ctrl+2</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Places the selected objects in a vertical layout.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Grid</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Ctrl+5</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Places the selected objects in a grid layout.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Form</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Ctrl+6</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Places the selected objects in a form layout.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Horizontal splitter</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Ctrl+3</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Creates a horizontal splitter and places the selected objects inside it.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Vertical splitter</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Ctrl+4</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Creates a vertical splitter and places the selected objects inside it.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Adjust size</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Ctrl+J</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Adjusts the size of the layout to ensure that each child object has sufficient space to display its contents. See <db:link xlink:href="qwidget.xml#adjustSize">QWidget::adjustSize</db:link>() for more information.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para><db:emphasis role="bold">Ctrl+0</db:emphasis> is used to break a layout.</db:para>
</db:note>
</db:section>
</db:article>
