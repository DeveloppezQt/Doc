<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlListProperty Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QQmlListProperty</db:subtitle>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> class allows applications to expose list-like properties of <db:link xlink:href="qobject.xml">QObject</db:link>-derived classes to QML.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlListProperty</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>QML has many list properties, where more than one object value can be assigned. The use of a list property from QML looks like this:</db:para>
<db:programlisting language="cpp">FruitBasket {
    fruit: [
        Apple {},
        Orange{},
        Banana{}
    ]
}
</db:programlisting>
<db:para>The <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> encapsulates a group of function pointers that represent the set of actions QML can perform on the list - adding items, retrieving items and clearing the list. In the future, additional operations may be supported. All list properties must implement the append operation, but the rest are optional.</db:para>
<db:para>To provide a list property, a C++ class must implement the operation callbacks, and then return an appropriate <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> value from the property getter. List properties should have no setter. In the example above, the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>() declarative will look like this:</db:para>
<db:programlisting language="cpp">Q_PROPERTY(QQmlListProperty&amp;lt;Fruit&amp;gt; fruit READ fruit)
</db:programlisting>
<db:para>QML list properties are type-safe - in this case <db:code>Fruit</db:code> is a <db:link xlink:href="qobject.xml">QObject</db:link> type that <db:code>Apple</db:code>, <db:code>Orange</db:code> and <db:code>Banana</db:code> all derive from.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-tutorials-extending-qml-example.xml#chapter-5-using-list-property-types">Chapter 5: Using List Property Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AppendFunction-typedef">
<db:title>[alias] QQmlListProperty::AppendFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>AppendFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>void (*)(QQmlListProperty&lt;T&gt; *property, T *value)</db:code>.</db:para>
<db:para>Append the <db:code role="parameter">value</db:code> to the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="AtFunction-typedef">
<db:title>[alias] QQmlListProperty::AtFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>AtFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>T *(*)(QQmlListProperty&lt;T&gt; *property, qsizetype index)</db:code>.</db:para>
<db:para>Return the element at position <db:code role="parameter">index</db:code> in the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="ClearFunction-typedef">
<db:title>[alias] QQmlListProperty::ClearFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>ClearFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>void (*)(QQmlListProperty&lt;T&gt; *property)</db:code>.</db:para>
<db:para>Clear the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="CountFunction-typedef">
<db:title>[alias] QQmlListProperty::CountFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>CountFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>qsizetype (*)(QQmlListProperty&lt;T&gt; *property)</db:code>.</db:para>
<db:para>Return the number of elements in the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="RemoveLastFunction-typedef">
<db:title>[alias] QQmlListProperty::RemoveLastFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>RemoveLastFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>void (*)(QQmlListProperty&lt;T&gt; *property)</db:code>.</db:para>
<db:para>Remove the last element from the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="ReplaceFunction-typedef">
<db:title>[alias] QQmlListProperty::ReplaceFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>ReplaceFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>void (*)(QQmlListProperty&lt;T&gt; *property, qsizetype index, T *value)</db:code>.</db:para>
<db:para>Replace the element at position <db:code role="parameter">index</db:code> in the list <db:code role="parameter">property</db:code> with <db:code role="parameter">value</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlListProperty-1">
<db:title>QQmlListProperty::QQmlListProperty(QObject *<db:emphasis>object</db:emphasis>, QList&lt;T *&gt; *<db:emphasis>list</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QList&lt;T *&gt; *</db:type>
<db:parameter>list</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListProperty(QObject *object, QList&lt;T *&gt; *list)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Convenience constructor for making a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> value from an existing <db:link xlink:href="qlist.xml">QList</db:link> <db:code role="parameter">list</db:code>. The <db:code role="parameter">list</db:code> reference must remain valid for as long as <db:code role="parameter">object</db:code> exists. <db:code role="parameter">object</db:code> must be provided.</db:para>
</db:section>
<db:section xml:id="QQmlListProperty-2">
<db:title>QQmlListProperty::QQmlListProperty(QObject *<db:emphasis>object</db:emphasis>, void *<db:emphasis>data</db:emphasis>, QQmlListProperty::AppendFunction <db:emphasis>append</db:emphasis>, QQmlListProperty::CountFunction <db:emphasis>count</db:emphasis>, QQmlListProperty::AtFunction <db:emphasis>at</db:emphasis>, QQmlListProperty::ClearFunction <db:emphasis>clear</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::AppendFunction</db:type>
<db:parameter>append</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::CountFunction</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::AtFunction</db:type>
<db:parameter>at</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::ClearFunction</db:type>
<db:parameter>clear</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListProperty(QObject *object, void *data, QQmlListProperty::AppendFunction append, QQmlListProperty::CountFunction count, QQmlListProperty::AtFunction at, QQmlListProperty::ClearFunction clear)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> from a set of operation functions <db:code role="parameter">append</db:code>, <db:code role="parameter">count</db:code>, <db:code role="parameter">at</db:code>, and <db:code role="parameter">clear</db:code>. An opaque <db:code role="parameter">data</db:code> handle may be passed which can be accessed from within the operation functions. The list property remains valid while <db:code role="parameter">object</db:code> exists.</db:para>
<db:para>Null pointers can be passed for any function. If any null pointers are passed in, the list will be neither designable nor alterable by the debugger. It is recommended to provide valid pointers for all functions.</db:para>
<db:note>
<db:para>The resulting <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> will synthesize the removeLast() and replace() methods using <db:code role="parameter">count</db:code>, <db:code role="parameter">at</db:code>, <db:code role="parameter">clear</db:code>, and <db:code role="parameter">append</db:code> if all of those are given. This is slow. If you intend to manipulate the list beyond clearing it, you should explicitly provide these methods.</db:para>
</db:note>
</db:section>
<db:section xml:id="QQmlListProperty-3">
<db:title>QQmlListProperty::QQmlListProperty(QObject *<db:emphasis>object</db:emphasis>, void *<db:emphasis>data</db:emphasis>, QQmlListProperty::AppendFunction <db:emphasis>append</db:emphasis>, QQmlListProperty::CountFunction <db:emphasis>count</db:emphasis>, QQmlListProperty::AtFunction <db:emphasis>at</db:emphasis>, QQmlListProperty::ClearFunction <db:emphasis>clear</db:emphasis>, QQmlListProperty::ReplaceFunction <db:emphasis>replace</db:emphasis>, QQmlListProperty::RemoveLastFunction <db:emphasis>removeLast</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::AppendFunction</db:type>
<db:parameter>append</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::CountFunction</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::AtFunction</db:type>
<db:parameter>at</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::ClearFunction</db:type>
<db:parameter>clear</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::ReplaceFunction</db:type>
<db:parameter>replace</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::RemoveLastFunction</db:type>
<db:parameter>removeLast</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListProperty(QObject *object, void *data, QQmlListProperty::AppendFunction append, QQmlListProperty::CountFunction count, QQmlListProperty::AtFunction at, QQmlListProperty::ClearFunction clear, QQmlListProperty::ReplaceFunction replace, QQmlListProperty::RemoveLastFunction removeLast)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> from a set of operation functions <db:code role="parameter">append</db:code>, <db:code role="parameter">count</db:code>, <db:code role="parameter">at</db:code>, <db:code role="parameter">clear</db:code>, <db:code role="parameter">replace</db:code>, and removeLast. An opaque <db:code role="parameter">data</db:code> handle may be passed which can be accessed from within the operation functions. The list property remains valid while <db:code role="parameter">object</db:code> exists.</db:para>
<db:para>Null pointers can be passed for any function, causing the respective function to be synthesized using the others, if possible. <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> can synthesize</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code role="parameter">clear</db:code> using <db:code role="parameter">count</db:code> and <db:code role="parameter">removeLast</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">replace</db:code> using <db:code role="parameter">count</db:code>, <db:code role="parameter">at</db:code>, <db:code role="parameter">clear</db:code>, and <db:code role="parameter">append</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">replace</db:code> using <db:code role="parameter">count</db:code>, <db:code role="parameter">at</db:code>, <db:code role="parameter">removeLast</db:code>, and <db:code role="parameter">append</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">removeLast</db:code> using <db:code role="parameter">count</db:code>, <db:code role="parameter">at</db:code>, <db:code role="parameter">clear</db:code>, and <db:code role="parameter">append</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>if those are given. This is slow, but if your list does not natively provide faster options for these primitives, you may want to use the synthesized ones.</db:para>
<db:para>Furthermore, if either of <db:code role="parameter">count</db:code>, <db:code role="parameter">at</db:code>, <db:code role="parameter">append</db:code>, and <db:code role="parameter">clear</db:code> are neither given explicitly nor synthesized, the list will be neither designable nor alterable by the debugger. It is recommended to provide enough valid pointers to avoid this situation.</db:para>
</db:section>
<db:section xml:id="QQmlListProperty-4">
<db:title>QQmlListProperty::QQmlListProperty(QObject *<db:emphasis>object</db:emphasis>, void *<db:emphasis>data</db:emphasis>, QQmlListProperty::CountFunction <db:emphasis>count</db:emphasis>, QQmlListProperty::AtFunction <db:emphasis>at</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::CountFunction</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::AtFunction</db:type>
<db:parameter>at</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListProperty(QObject *object, void *data, QQmlListProperty::CountFunction count, QQmlListProperty::AtFunction at)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a readonly <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> from a set of operation functions <db:code role="parameter">count</db:code> and <db:code role="parameter">at</db:code>. An opaque <db:code role="parameter">data</db:code> handle may be passed which can be accessed from within the operation functions. The list property remains valid while <db:code role="parameter">object</db:code> exists.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QQmlListProperty::operator==(const QQmlListProperty&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QQmlListProperty&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QQmlListProperty&lt;T&gt; &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> is equal to <db:code role="parameter">other</db:code>, otherwise false.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND">
<db:title>QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND</db:title>
<db:methodsynopsis>
<db:methodname>QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro defines the behavior of the list properties of this class to Append. When assigning the property in a derived type, the values are appended to those of the base class. This is the default behavior.</db:para>
<db:programlisting language="cpp">class FruitBasket : QObject {
    Q_OBJECT
    QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND
    Q_PROPERTY(QQmlListProperty&amp;lt;Fruit&amp;gt; fruit READ fruit)

    public:
    // ...
    QQmlListProperty&amp;lt;Fruit&amp;gt; fruit();
    // ...
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistproperty.xml#QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT</db:link></db:member>
<db:member><db:link xlink:href="qqmllistproperty.xml#QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE</db:link></db:member>
<db:member><db:link xlink:href="qtqml-documents-definetypes.xml">Defining Object Types through QML Documents</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE">
<db:title>QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE</db:title>
<db:methodsynopsis>
<db:methodname>QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro defines the behavior of the list properties of this class to Replace. When assigning the property in a derived type, the values replace those of the base class.</db:para>
<db:programlisting language="cpp">class FruitBasket : QObject {
    Q_OBJECT
    QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE
    Q_PROPERTY(QQmlListProperty&amp;lt;Fruit&amp;gt; fruit READ fruit)

    public:
    // ...
    QQmlListProperty&amp;lt;Fruit&amp;gt; fruit();
    // ...
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistproperty.xml#QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND</db:link></db:member>
<db:member><db:link xlink:href="qqmllistproperty.xml#QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT</db:link></db:member>
<db:member><db:link xlink:href="qtqml-documents-definetypes.xml">Defining Object Types through QML Documents</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT">
<db:title>QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT</db:title>
<db:methodsynopsis>
<db:methodname>QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro defines the behavior of the list properties of this class to ReplaceIfNotDefault. When assigning the property in a derived type, the values replace those of the base class unless it's the default property. In the case of the default property, values are appended to those of the base class.</db:para>
<db:programlisting language="cpp">class FruitBasket : QObject {
    Q_OBJECT
    QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT
    Q_PROPERTY(QQmlListProperty&amp;lt;Fruit&amp;gt; fruit READ fruit)

    public:
    // ...
    QQmlListProperty&amp;lt;Fruit&amp;gt; fruit();
    // ...
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistproperty.xml#QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND</db:link></db:member>
<db:member><db:link xlink:href="qqmllistproperty.xml#QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE</db:link></db:member>
<db:member><db:link xlink:href="qtqml-documents-definetypes.xml">Defining Object Types through QML Documents</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QQmlListProperty</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QQmlListProperty-5">
<db:title>[default] QQmlListProperty::QQmlListProperty(QObject *<db:emphasis>object</db:emphasis>, QList&lt;T *&gt; &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QList&lt;T *&gt; &amp;</db:type>
<db:parameter>list</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListProperty(QObject *object, QList&lt;T *&gt; &amp;list) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Convenience constructor for making a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> value from an existing <db:link xlink:href="qlist.xml">QList</db:link> <db:code role="parameter">list</db:code>. The <db:code role="parameter">list</db:code> reference must remain valid for as long as <db:code role="parameter">object</db:code> exists. <db:code role="parameter">object</db:code> must be provided.</db:para>
<db:para>This constructor synthesizes the removeLast() and replace() methods introduced in Qt 5.15, using count(), at(), clear(), and append(). This is slow. If you intend to manipulate the list beyond clearing it, you should explicitly provide these methods.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
