<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QQmlListProperty Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QQmlListProperty</db:subtitle>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> class allows applications to expose list-like properties to QML.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlListProperty</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>QML has many list properties, where more than one object value can be assigned. The use of a list property from QML looks like this:</db:para>
<db:programlisting language="cpp">FruitBasket {
    fruit: [
        Apple {},
        Orange{},
        Banana{}
    ]
}
</db:programlisting>
<db:para>The <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> encapsulates a group of function pointers that represet the set of actions QML can perform on the list - adding items, retrieving items and clearing the list. In the future, additional operations may be supported. All list properties must implement the append operation, but the rest are optional.</db:para>
<db:para>To provide a list property, a C++ class must implement the operation callbacks, and then return an appropriate <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> value from the property getter. List properties should have no setter. In the example above, the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>() declarative will look like this:</db:para>
<db:programlisting language="cpp">Q_PROPERTY(QQmlListProperty&lt;Fruit&gt; fruit READ fruit);
</db:programlisting>
<db:para>QML list properties are typesafe - in this case <db:code>Fruit</db:code> is a <db:link xlink:href="qobject.xml">QObject</db:link> type that <db:code>Apple</db:code>, <db:code>Orange</db:code> and <db:code>Banana</db:code> all derive from.</db:para>
<db:para>The <db:link xlink:href="">Qt Quick 1</db:link> version of this class is named QDeclarativeListProperty.</db:para>
<db:note>
<db:para><db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> can only be used for lists of <db:link xlink:href="qobject.xml">QObject</db:link>-derived object pointers.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AppendFunction-typedef">
<db:title>QQmlListProperty::AppendFunction</db:title>
<db:para>Synonym for <db:code>void (*)(QQmlListProperty&lt;T&gt; *property, T *value)</db:code>.</db:para>
<db:para>Append the <db:code role="parameter">value</db:code> to the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="AtFunction-typedef">
<db:title>QQmlListProperty::AtFunction</db:title>
<db:para>Synonym for <db:code>T *(*)(QQmlListProperty&lt;T&gt; *property, int index)</db:code>.</db:para>
<db:para>Return the element at position <db:code role="parameter">index</db:code> in the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="ClearFunction-typedef">
<db:title>QQmlListProperty::ClearFunction</db:title>
<db:para>Synonym for <db:code>void (*)(QQmlListProperty&lt;T&gt; *property)</db:code>.</db:para>
<db:para>Clear the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="CountFunction-typedef">
<db:title>QQmlListProperty::CountFunction</db:title>
<db:para>Synonym for <db:code>int (*)(QQmlListProperty&lt;T&gt; *property)</db:code>.</db:para>
<db:para>Return the number of elements in the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
