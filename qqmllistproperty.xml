<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlListProperty Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QQmlListProperty</db:subtitle>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> class allows applications to expose list-like properties of QObject-derived classes to QML.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlListProperty</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>QML has many list properties, where more than one object value can be assigned. The use of a list property from QML looks like this:</db:para>
<db:programlisting language="cpp">FruitBasket {
    fruit: [
        Apple {},
        Orange{},
        Banana{}
    ]
}
</db:programlisting>
<db:para>The <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> encapsulates a group of function pointers that represent the set of actions QML can perform on the list - adding items, retrieving items and clearing the list. In the future, additional operations may be supported. All list properties must implement the append operation, but the rest are optional.</db:para>
<db:para>To provide a list property, a C++ class must implement the operation callbacks, and then return an appropriate <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> value from the property getter. List properties should have no setter. In the example above, the <db:link xlink:href="qobject-proxy.xml#Q_PROPERTY">Q_PROPERTY</db:link>() declarative will look like this:</db:para>
<db:programlisting language="cpp">Q_PROPERTY(QQmlListProperty&amp;lt;Fruit&amp;gt; fruit READ fruit)
</db:programlisting>
<db:para>QML list properties are type-safe - in this case <db:code>Fruit</db:code> is a QObject type that <db:code>Apple</db:code>, <db:code>Orange</db:code> and <db:code>Banana</db:code> all derive from.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-referenceexamples-properties-example.xml">Extending QML - Object and List Property Types Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AppendFunction-typedef">
<db:title>QQmlListProperty::AppendFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>AppendFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>void (*)(QQmlListProperty&lt;T&gt; *property, T *value)</db:code>.</db:para>
<db:para>Append the <db:code role="parameter">value</db:code> to the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="AtFunction-typedef">
<db:title>QQmlListProperty::AtFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>AtFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>T *(*)(QQmlListProperty&lt;T&gt; *property, int index)</db:code>.</db:para>
<db:para>Return the element at position <db:code role="parameter">index</db:code> in the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="ClearFunction-typedef">
<db:title>QQmlListProperty::ClearFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>ClearFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>void (*)(QQmlListProperty&lt;T&gt; *property)</db:code>.</db:para>
<db:para>Clear the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
<db:section xml:id="CountFunction-typedef">
<db:title>QQmlListProperty::CountFunction</db:title>
<db:typedefsynopsis>
<db:typedefname>CountFunction</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:code>int (*)(QQmlListProperty&lt;T&gt; *property)</db:code>.</db:para>
<db:para>Return the number of elements in the list <db:code role="parameter">property</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlListProperty-1">
<db:title>QQmlListProperty::QQmlListProperty(QObject *<db:emphasis>object</db:emphasis>, int &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>list</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListProperty(QObject *object, int &amp;list)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Convenience constructor for making a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> value from an existing <db:link xlink:href="qlist.xml">QList</db:link> <db:code role="parameter">list</db:code>. The <db:code role="parameter">list</db:code> reference must remain valid for as long as <db:code role="parameter">object</db:code> exists. <db:code role="parameter">object</db:code> must be provided.</db:para>
<db:para>Generally this constructor should not be used in production code, as a writable <db:link xlink:href="qlist.xml">QList</db:link> violates QML's memory management rules. However, this constructor can be very useful while prototyping.</db:para>
</db:section>
<db:section xml:id="QQmlListProperty-2">
<db:title>QQmlListProperty::QQmlListProperty(QObject *<db:emphasis>object</db:emphasis>, void *<db:emphasis>data</db:emphasis>, QQmlListProperty::AppendFunction <db:emphasis>append</db:emphasis>, QQmlListProperty::CountFunction <db:emphasis>count</db:emphasis>, QQmlListProperty::AtFunction <db:emphasis>at</db:emphasis>, QQmlListProperty::ClearFunction <db:emphasis>clear</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::AppendFunction</db:type>
<db:parameter>append</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::CountFunction</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::AtFunction</db:type>
<db:parameter>at</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::ClearFunction</db:type>
<db:parameter>clear</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListProperty(QObject *object, void *data, QQmlListProperty::AppendFunction append, QQmlListProperty::CountFunction count, QQmlListProperty::AtFunction at, QQmlListProperty::ClearFunction clear)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> from a set of operation functions <db:code role="parameter">append</db:code>, <db:code role="parameter">count</db:code>, <db:code role="parameter">at</db:code>, and <db:code role="parameter">clear</db:code>. An opaque <db:code role="parameter">data</db:code> handle may be passed which can be accessed from within the operation functions. The list property remains valid while <db:code role="parameter">object</db:code> exists.</db:para>
<db:para>Null pointers can be passed for any function. If any null pointers are passed in, the list will be neither designable nor alterable by the debugger. It is recommended to provide valid pointers for all functions.</db:para>
</db:section>
<db:section xml:id="QQmlListProperty-3">
<db:title>QQmlListProperty::QQmlListProperty(QObject *<db:emphasis>object</db:emphasis>, void *<db:emphasis>data</db:emphasis>, QQmlListProperty::CountFunction <db:emphasis>count</db:emphasis>, QQmlListProperty::AtFunction <db:emphasis>at</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListProperty</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::CountFunction</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlListProperty::AtFunction</db:type>
<db:parameter>at</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListProperty(QObject *object, void *data, QQmlListProperty::CountFunction count, QQmlListProperty::AtFunction at)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a readonly <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> from a set of operation functions <db:code role="parameter">count</db:code> and <db:code role="parameter">at</db:code>. An opaque <db:code role="parameter">data</db:code> handle may be passed which can be accessed from within the operation functions. The list property remains valid while <db:code role="parameter">object</db:code> exists.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QQmlListProperty::operator==(const QQmlListProperty&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QQmlListProperty&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QQmlListProperty&lt;T&gt; &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> is equal to <db:code role="parameter">other</db:code>, otherwise false.</db:para>
</db:section>
</db:section>
</db:article>
