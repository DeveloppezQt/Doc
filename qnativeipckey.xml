<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNativeIpcKey Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link> class holds a native key used by <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> and <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link>.</db:para>
<db:para>This class was introduced in Qt 6.6.</db:para>
<db:para>This class is <db:emphasis>equality-comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNativeIpcKey</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> and <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> classes identify their resource using a system-wide identifier known as a &quot;key&quot;. The low-level key value as well as the key type are encapsulated in Qt using the <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link> class.</db:para>
<db:para>Those two classes also provide the means to create native keys from a cross-platform identifier, using QSharedMemory::platformSafeKey() and QSystemSemaphore::platformSafeKey(). Applications should never share the input to those functions, as different versions of Qt may perform different transformations, resulting in different native keys. Instead, the application that created the IPC object should communicate the resulting native key using the methods described below.</db:para>
<db:para>For details on the key types, platform-specific limitations, and interoperability with older or non-Qt applications, see the <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> documentation. That includes important information for sandboxed applications on Apple platforms, including all apps obtained via the Apple App Store.</db:para>
<db:section xml:id="communicating-keys-to-other-processes">
<db:title>Communicating keys to other processes</db:title>
<db:section xml:id="communicating-keys-to-other-qt-processes">
<db:title>Communicating keys to other Qt processes</db:title>
<db:para>If the other process supports <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link>, the best way of communicating is via the string representation obtained from <db:link xlink:href="qnativeipckey.xml#toString">toString</db:link>() and parsing it using <db:link xlink:href="qnativeipckey.xml#fromString">fromString</db:link>(). This representation can be stored on a file whose name is well-known or passed on the command-line to a child process using <db:link xlink:href="qprocess.xml#setArguments">QProcess::setArguments</db:link>().</db:para>
<db:para>If the other process does not support <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link>, then the two processes can exchange the <db:link xlink:href="qnativeipckey.xml#nativeKey">nativeKey</db:link>() but the older code is likely unable to adjust its key type. The <db:link xlink:href="qnativeipckey.xml#legacyDefaultTypeForOs">legacyDefaultTypeForOs</db:link>() function returns the type that legacy code used, which may not match the <db:link xlink:href="qnativeipckey.xml#DefaultTypeForOs-var">DefaultTypeForOs</db:link> constant. This is still true even if the old application is not using the same build as the new one (for example, it is a Qt 5 application), provided the options passed to the Qt configure script are the same.</db:para>
</db:section>
<db:section xml:id="communicating-keys-to-non-qt-processes">
<db:title>Communicating keys to non-Qt processes</db:title>
<db:para>When communicating with non-Qt processes, the application must arrange to obtain the key type the other process is using. This is important particularly on Unix systems, where both <db:link xlink:href="qnativeipckey.xml#Type-enum">PosixRealtime</db:link> and <db:link xlink:href="qnativeipckey.xml#Type-enum">SystemV</db:link> are common.</db:para>
</db:section>
</db:section>
<db:section xml:id="string-representation-of-native-keys">
<db:title>String representation of native keys</db:title>
<db:para>The format of the string representation of a <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link> is meant to be stable and therefore backwards and forwards compatible, provided the key type is supported by the Qt version in question. That is to say, an older Qt will fail to parse the string representation of a key type introduced after it was released. However, successfully parsing a string representation does not imply the Qt classes can successfully create an object of that type; applications should verify support using QSharedMemory::isKeyTypeSupported() and QSystemSemaphore::isKeyTypeSupported().</db:para>
<db:para>The format of the string representation is formed by two components, separated by a colon (':'). The first component is the key type, described in the table below. The second component is a type-specific payload, using <db:link xlink:href="qbytearray.xml#fromPercentEncoding">percent-encoding</db:link>. For all currently supported key types, the decoded form is identical to the contents of the <db:link xlink:href="qnativeipckey.xml#nativeKey">nativeKey</db:link>() field.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Key type</db:para>
</db:td>
<db:td>
<db:para>String representation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnativeipckey.xml#Type-enum">PosixRealtime</db:link></db:para>
</db:td>
<db:td>
<db:para>&quot;posix&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnativeipckey.xml#Type-enum">SystemV</db:link></db:para>
</db:td>
<db:td>
<db:para>&quot;systemv&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnativeipckey.xml#Type-enum">Windows</db:link></db:para>
</db:td>
<db:td>
<db:para>&quot;windows&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Non-standard <db:link xlink:href="qnativeipckey.xml#Type-enum">SystemV</db:link></db:para>
</db:td>
<db:td>
<db:para>&quot;systemv-&quot; followed by a decimal number</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This format resembles a URI and allows parsing using URI/URL-parsing functions, such as <db:link xlink:href="qurl.xml">QUrl</db:link>. When parsed by such API, the key type will show up as the <db:link xlink:href="qurl.xml#scheme">scheme</db:link>, and the payload will be the <db:link xlink:href="qurl.xml#path">path</db:link>. Use of query or fragments is reserved.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:member>
<db:member><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Type-enum">
<db:title>enum QNativeIpcKey::Type</db:title>
<db:para>This enum describes the backend type for the IPC object. For details on the key types, see the <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> documentation.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link></db:emphasis>::<db:emphasis role="bold">Type</db:emphasis>::SystemV</db:code></db:para>
</db:td>
<db:td><db:code>0x51</db:code></db:td>
<db:td>
<db:para>X/Open System Initiative (XSI) or System V (SVr4) API</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link></db:emphasis>::<db:emphasis role="bold">Type</db:emphasis>::PosixRealtime</db:code></db:para>
</db:td>
<db:td><db:code>0x100</db:code></db:td>
<db:td>
<db:para>IEEE 1003.1b (POSIX.1b) API</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link></db:emphasis>::<db:emphasis role="bold">Type</db:emphasis>::Windows</db:code></db:para>
</db:td>
<db:td><db:code>0x101</db:code></db:td>
<db:td>
<db:para>Win32 API</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeipckey.xml#setType">setType</db:link>()</db:member>
<db:member><db:link xlink:href="qnativeipckey.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNativeIpcKey-2">
<db:title>[explicit constexpr noexcept] QNativeIpcKey::QNativeIpcKey(QNativeIpcKey::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="QNativeIpcKey-4">QNativeIpcKey::QNativeIpcKey(const QString &amp;<db:emphasis>key</db:emphasis>, QNativeIpcKey::Type <db:emphasis>type</db:emphasis> = DefaultTypeForOs)</db:bridgehead>
<db:para>Constructs a <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link> object holding native key <db:code role="parameter">key</db:code> (or empty on the overload without the parameter) for type <db:code role="parameter">type</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QNativeIpcKey &amp;QNativeIpcKey::operator=(QNativeIpcKey &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-eq-1">QNativeIpcKey &amp;QNativeIpcKey::operator=(const QNativeIpcKey &amp;<db:emphasis>other</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="QNativeIpcKey-1">[noexcept] QNativeIpcKey::QNativeIpcKey(QNativeIpcKey &amp;&amp;<db:emphasis>other</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="QNativeIpcKey-3">QNativeIpcKey::QNativeIpcKey(const QNativeIpcKey &amp;<db:emphasis>other</db:emphasis>)</db:bridgehead>
<db:para>Copies or moves the content of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QNativeIpcKey">
<db:title>[constexpr noexcept] QNativeIpcKey::QNativeIpcKey()</db:title>
<db:para>Constructs a <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link> object of type <db:link xlink:href="qnativeipckey.xml#DefaultTypeForOs-var">DefaultTypeForOs</db:link> with an empty key.</db:para>
</db:section>
<db:section xml:id="dtor.QNativeIpcKey">
<db:title>[noexcept] QNativeIpcKey::~QNativeIpcKey()</db:title>
<db:para>Disposes of this <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link> object.</db:para>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QNativeIpcKey QNativeIpcKey::fromString(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Parses the string form <db:code role="parameter">text</db:code> and returns the corresponding <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link>. String representations are useful to inform other processes of the key this process created and they should attach to.</db:para>
<db:para>If the string could not be parsed, this function returns an <db:link xlink:href="qnativeipckey.xml#isValid">invalid</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeipckey.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qnativeipckey.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[noexcept] bool QNativeIpcKey::isEmpty() const</db:title>
<db:para>Returns true if the <db:link xlink:href="qnativeipckey.xml#nativeKey">nativeKey</db:link>() is empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeipckey.xml#nativeKey">nativeKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[noexcept] bool QNativeIpcKey::isValid() const</db:title>
<db:para>Returns true if this object contains a valid native IPC key type. Invalid types are usually the result of a failure to parse a string representation using <db:link xlink:href="qnativeipckey.xml#fromString">fromString</db:link>().</db:para>
<db:para>This function performs no check on the whether the key string is actually supported or valid for the current operating system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeipckey.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qnativeipckey.xml#fromString">fromString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="legacyDefaultTypeForOs">
<db:title>[static noexcept] QNativeIpcKey::Type QNativeIpcKey::legacyDefaultTypeForOs()</db:title>
<db:para>Returns the <db:link xlink:href="qnativeipckey.xml#Type-enum">Type</db:link> that corresponds to the native IPC key that <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> and <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> used to use prior to Qt 6.6. Applications and libraries that must retain compatibility with code using either class that was compiled with Qt prior to version 6.6 can use this function to determine what IPC type the other applications may be using.</db:para>
<db:para>Note that this function relies on Qt having been built with identical configure-time options.</db:para>
</db:section>
<db:section xml:id="nativeKey">
<db:title>[noexcept] QString QNativeIpcKey::nativeKey() const</db:title>
<db:para>Returns the native key string associated with this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeipckey.xml#setNativeKey">setNativeKey</db:link>()</db:member>
<db:member><db:link xlink:href="qnativeipckey.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNativeKey">
<db:title>void QNativeIpcKey::setNativeKey(const QString &amp;<db:emphasis>newKey</db:emphasis>)</db:title>
<db:para>Sets the native key for this object to <db:code role="parameter">newKey</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeipckey.xml#nativeKey">nativeKey</db:link>()</db:member>
<db:member><db:link xlink:href="qnativeipckey.xml#setType">setType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setType">
<db:title>[constexpr] void QNativeIpcKey::setType(QNativeIpcKey::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets the IPC type of this object to <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeipckey.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qnativeipckey.xml#setNativeKey">setNativeKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QNativeIpcKey::swap(QNativeIpcKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this native IPC key and type with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QNativeIpcKey::toString() const</db:title>
<db:para>Returns the string representation of this object. String representations are useful to inform other processes of the key this process created and that they should attach to.</db:para>
<db:para>This function returns a null string if the current object is <db:link xlink:href="qnativeipckey.xml#isValid">invalid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeipckey.xml#fromString">fromString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[constexpr noexcept] QNativeIpcKey::Type QNativeIpcKey::type() const</db:title>
<db:para>Returns the key type associated with this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeipckey.xml#nativeKey">nativeKey</db:link>()</db:member>
<db:member><db:link xlink:href="qnativeipckey.xml#setType">setType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="DefaultTypeForOs-var">
<db:title>const QNativeIpcKey::Type QNativeIpcKey::DefaultTypeForOs</db:title>
<db:para>This constant expression variable holds the default native IPC type for the current OS. It will be <db:link xlink:href="qnativeipckey.xml#Type-enum">Type::Windows</db:link> for Windows systems and <db:link xlink:href="qnativeipckey.xml#Type-enum">Type::PosixRealtime</db:link> elsewhere. Note that this constant is different from what <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> and <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> defaulted to on the majority of Unix systems prior to Qt 6.6; see <db:link xlink:href="qnativeipckey.xml#legacyDefaultTypeForOs">legacyDefaultTypeForOs</db:link>() for more information.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QNativeIpcKey &amp;<db:emphasis>lhs</db:emphasis>, const QNativeIpcKey &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq">[noexcept] bool operator==(const QNativeIpcKey &amp;<db:emphasis>lhs</db:emphasis>, const QNativeIpcKey &amp;<db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:para>Returns true if the <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> objects hold the same (or different) contents.</db:para>
</db:section>
<db:section xml:id="qHash">
<db:title>[noexcept] size_t qHash(const QNativeIpcKey &amp;<db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
</db:section>
<db:section xml:id="swap-1">
<db:title>[noexcept] void swap(QNativeIpcKey &amp;<db:emphasis>value1</db:emphasis>, QNativeIpcKey &amp;<db:emphasis>value2</db:emphasis>)</db:title>
<db:para>Swaps the native IPC key and type <db:code role="parameter">value1</db:code> with <db:code role="parameter">value2</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
</db:section>
</db:article>
