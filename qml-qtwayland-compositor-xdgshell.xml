<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>XdgShell QML Type</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides an extension for desktop-style user interfaces.</db:para>
<db:para><db:emphasis role="bold">This type is under development and is subject to change.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWayland.Compositor 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Preliminary</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This type is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtwayland-compositor-xdgshell.xml">XdgShell</db:link> extension provides desktop functionality such as minimize, maximize, and resize using the <db:code>xdg-shell</db:code> protocol. It creates an <db:link xlink:href="qml-qtwayland-compositor-xdgsurface.xml">XdgSurface</db:link> for each Wayland surface.</db:para>
<db:para>The following snippet demonstrates how to use the extension:</db:para>
<db:programlisting language="cpp">import QtQuick 2.6
import QtQuick.Window 2.2
import QtWayland.Compositor 1.0

WaylandCompositor {
    id: wlcompositor
    // The output defines the screen.
    WaylandOutput {
        compositor: wlcompositor
        window: Window {
            width: 1024
            height: 768
            visible: true
            Rectangle {
                id: surfaceArea
                color: &quot;#1337af&quot;
                anchors.fill: parent
            }
        }
    }
    // The chrome defines the window look and behavior.
    // Here we use the built-in ShellSurfaceItem.
    Component {
        id: chromeComponent
        ShellSurfaceItem {
            onSurfaceDestroyed: destroy()
        }
    }
    // Extensions are additions to the core Wayland
    // protocol. We choose to support two different
    // shells (window management protocols). When the
    // client creates a new window, we instantiate a
    // chromeComponent on the output.
    extensions: [
        WlShell {
            onShellSurfaceCreated:
                chromeComponent.createObject(surfaceArea, { &quot;shellSurface&quot;: shellSurface } );
        },
        XdgShell {
            onXdgSurfaceCreated:
                chromeComponent.createObject(surfaceArea, { &quot;shellSurface&quot;: xdgSurface } );
        }
    ]
}

</db:programlisting>
</db:section>
</db:article>
