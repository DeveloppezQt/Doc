<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QState Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstate.xml">QState</db:link> class provides a general-purpose state for <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractstate.xml" xlink:role="class">QAbstractState</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstatemachine.xml" xlink:role="class">QStateMachine</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QState is part of <db:simplelist><db:member><db:link xlink:href="statemachine.xml">State Machine Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstate.xml">QState</db:link> objects can have child states, and can have transitions to other states. <db:link xlink:href="qstate.xml">QState</db:link> is part of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
<db:para>The <db:link xlink:href="qstate.xml#addTransition">addTransition</db:link>() function adds a transition. The <db:link xlink:href="qstate.xml#removeTransition">removeTransition</db:link>() function removes a transition. The <db:link xlink:href="qstate.xml#transitions">transitions</db:link>() function returns the state's outgoing transitions.</db:para>
<db:para>The <db:link xlink:href="qstate.xml#assignProperty">assignProperty</db:link>() function is used for defining property assignments that should be performed when a state is entered.</db:para>
<db:para>Top-level states must be passed a <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> object as their parent state, or added to a state machine using <db:link xlink:href="qstatemachine.xml#addState">QStateMachine::addState</db:link>().</db:para>
<db:section xml:id="states-with-child-states">
<db:title>States with Child States</db:title>
<db:para>The <db:link xlink:href="qstate.xml#childMode">childMode</db:link> property determines how child states are treated. For non-parallel state groups, the <db:link xlink:href="qstate.xml#setInitialState">setInitialState</db:link>() function must be called to set the initial state. The child states are mutually exclusive states, and the state machine needs to know which child state to enter when the parent state is the target of a transition.</db:para>
<db:para>The state emits the <db:link xlink:href="qstate.xml#finished">QState::finished</db:link>() signal when a final child state (<db:link xlink:href="qfinalstate.xml">QFinalState</db:link>) is entered.</db:para>
<db:para>The <db:link xlink:href="qstate.xml#setErrorState">setErrorState</db:link>() sets the state's error state. The error state is the state that the state machine will transition to if an error is detected when attempting to enter the state (e.g. because no initial state has been set).</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ChildMode-enum">
<db:title>enum QState::ChildMode</db:title>
<db:para>This enum specifies how a state's child states are treated.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstate.xml">QState</db:link></db:emphasis>::ExclusiveStates</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The child states are mutually exclusive and an initial state must be set by calling <db:link xlink:href="qstate.xml#setInitialState">QState::setInitialState</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstate.xml">QState</db:link></db:emphasis>::ParallelStates</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The child states are parallel. When the parent state is entered, all its child states are entered in parallel.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="RestorePolicy-enum">
<db:title>enum QState::RestorePolicy</db:title>
<db:para>This enum specifies the restore policy type. The restore policy takes effect when the machine enters a state which sets one or more properties. If the restore policy is set to RestoreProperties, the state machine will save the original value of the property before the new value is set.</db:para>
<db:para>Later, when the machine either enters a state which does not set a value for the given property, the property will automatically be restored to its initial value.</db:para>
<db:para>Only one initial value will be saved for any given property. If a value for a property has already been saved by the state machine, it will not be overwritten until the property has been successfully restored.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstate.xml">QState</db:link></db:emphasis>::DontRestoreProperties</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The state machine should not save the initial values of properties and restore them later.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstate.xml">QState</db:link></db:emphasis>::RestoreProperties</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The state machine should save the initial values of properties and restore them later.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#globalRestorePolicy">QStateMachine::globalRestorePolicy</db:link></db:member>
<db:member><db:link xlink:href="qstate.xml#assignProperty">QState::assignProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="childMode-prop">
<db:title>childMode : ChildMode</db:title>
<db:para>This property holds the child mode of this state</db:para>
<db:para>The default value of this property is <db:link xlink:href="qstate.xml#ChildMode-enum">QState::ExclusiveStates</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstate.xml#ChildMode-enum">QState::ChildMode</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qstate.xml#childMode">childMode</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstate.xml#setChildMode">setChildMode</db:link></db:emphasis>(<db:type><db:link xlink:href="qstate.xml#ChildMode-enum">QState::ChildMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstate.xml#childModeChanged">childModeChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="errorState-prop">
<db:title>errorState : QAbstractState*</db:title>
<db:para>This property holds the error state of this state</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractstate.xml#QAbstractState">QAbstractState</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qstate.xml#errorState">errorState</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstate.xml#setErrorState">setErrorState</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractstate.xml#QAbstractState">QAbstractState</db:link></db:type> *<db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstate.xml#errorStateChanged">errorStateChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="initialState-prop">
<db:title>initialState : QAbstractState*</db:title>
<db:para>This property holds the initial state of this state (one of its child states)</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractstate.xml#QAbstractState">QAbstractState</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qstate.xml#initialState">initialState</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstate.xml#setInitialState">setInitialState</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractstate.xml#QAbstractState">QAbstractState</db:link></db:type> *<db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstate.xml#initialStateChanged">initialStateChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QState">
<db:title>QState::QState(QState *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new state with the given <db:code role="parameter">parent</db:code> state.</db:para>
</db:section>
<db:section xml:id="QState-1">
<db:title>QState::QState(QState::ChildMode <db:emphasis>childMode</db:emphasis>, QState *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new state with the given <db:code role="parameter">childMode</db:code> and the given <db:code role="parameter">parent</db:code> state.</db:para>
</db:section>
<db:section xml:id="dtor.QState">
<db:title>[virtual noexcept] QState::~QState()</db:title>
<db:para>Destroys this state.</db:para>
</db:section>
<db:section xml:id="addTransition">
<db:title>QAbstractTransition *QState::addTransition(QAbstractState *<db:emphasis>target</db:emphasis>)</db:title>
<db:para>Adds an unconditional transition from this state to the given <db:code role="parameter">target</db:code> state, and returns then new transition object.</db:para>
</db:section>
<db:section xml:id="addTransition-1">
<db:title>void QState::addTransition(QAbstractTransition *<db:emphasis>transition</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">transition</db:code>. The transition has this state as the source. This state takes ownership of the transition.</db:para>
</db:section>
<db:section xml:id="addTransition-2">
<db:title>QSignalTransition *QState::addTransition(const QObject *<db:emphasis>sender</db:emphasis>, const char *<db:emphasis>signal</db:emphasis>, QAbstractState *<db:emphasis>target</db:emphasis>)</db:title>
<db:para>Adds a transition associated with the given <db:code role="parameter">signal</db:code> of the given <db:code role="parameter">sender</db:code> object, and returns the new <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> object. The transition has this state as the source, and the given <db:code role="parameter">target</db:code> as the target state.</db:para>
</db:section>
<db:section xml:id="addTransition-3">
<db:title>[since 5.5] QSignalTransition *QState::addTransition(const QObject *<db:emphasis>sender</db:emphasis>, int <db:emphasis>signal</db:emphasis>, QAbstractState *<db:emphasis>target</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a transition associated with the given <db:code role="parameter">signal</db:code> of the given <db:code role="parameter">sender</db:code> object, and returns the new <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> object. The transition has this state as the source, and the given <db:code role="parameter">target</db:code> as the target state.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="assignProperty">
<db:title>void QState::assignProperty(QObject *<db:emphasis>object</db:emphasis>, const char *<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Instructs this state to set the property with the given <db:code role="parameter">name</db:code> of the given <db:code role="parameter">object</db:code> to the given <db:code role="parameter">value</db:code> when the state is entered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#propertiesAssigned">propertiesAssigned</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childMode">
<db:title>QState::ChildMode QState::childMode() const</db:title>
<db:para>Returns the child mode of this state.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qstate.xml#childMode-prop">childMode</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#setChildMode">setChildMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childModeChanged">
<db:title>[since 5.4] void QState::childModeChanged()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qstate.xml#childMode">childMode</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qstate.xml#childMode-prop">childMode</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#childMode">QState::childMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorState">
<db:title>QAbstractState *QState::errorState() const</db:title>
<db:para>Returns this state's error state.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qstate.xml#errorState-prop">errorState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#setErrorState">setErrorState</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#error">QStateMachine::error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorStateChanged">
<db:title>[since 5.4] void QState::errorStateChanged()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qstate.xml#errorState">errorState</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qstate.xml#errorState-prop">errorState</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#errorState">QState::errorState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QState::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractstate.xml#event" role="function">QAbstractState::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QState::finished()</db:title>
<db:para>This signal is emitted when a final child state of this state is entered.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfinalstate.xml">QFinalState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initialState">
<db:title>QAbstractState *QState::initialState() const</db:title>
<db:para>Returns this state's initial state, or 0 if the state has no initial state.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qstate.xml#initialState-prop">initialState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#setInitialState">setInitialState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initialStateChanged">
<db:title>[since 5.4] void QState::initialStateChanged()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qstate.xml#initialState">initialState</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qstate.xml#initialState-prop">initialState</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#initialState">QState::initialState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onEntry">
<db:title>[override virtual protected] void QState::onEntry(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractstate.xml#onEntry" role="function">QAbstractState::onEntry(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="onExit">
<db:title>[override virtual protected] void QState::onExit(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractstate.xml#onExit" role="function">QAbstractState::onExit(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="propertiesAssigned">
<db:title>void QState::propertiesAssigned()</db:title>
<db:para>This signal is emitted when all properties have been assigned their final value. If the state assigns a value to one or more properties for which an animation exists (either set on the transition or as a default animation on the state machine), then the signal will not be emitted until all such animations have finished playing.</db:para>
<db:para>If there are no relevant animations, or no property assignments defined for the state, then the signal will be emitted immediately before the state is entered.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#assignProperty">QState::assignProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracttransition.xml#addAnimation">QAbstractTransition::addAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeTransition">
<db:title>void QState::removeTransition(QAbstractTransition *<db:emphasis>transition</db:emphasis>)</db:title>
<db:para>Removes the given <db:code role="parameter">transition</db:code> from this state. The state releases ownership of the transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#addTransition">addTransition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setChildMode">
<db:title>void QState::setChildMode(QState::ChildMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the child <db:code role="parameter">mode</db:code> of this state.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qstate.xml#childMode-prop">childMode</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#childMode">childMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setErrorState">
<db:title>void QState::setErrorState(QAbstractState *<db:emphasis>state</db:emphasis>)</db:title>
<db:para>Sets this state's error state to be the given <db:code role="parameter">state</db:code>. If the error state is not set, or if it is set to 0, the state will inherit its parent's error state recursively. If no error state is set for the state itself or any of its ancestors, an error will cause the machine to stop executing and an error will be printed to the console.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qstate.xml#errorState-prop">errorState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#errorState">errorState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInitialState">
<db:title>void QState::setInitialState(QAbstractState *<db:emphasis>state</db:emphasis>)</db:title>
<db:para>Sets this state's initial state to be the given <db:code role="parameter">state</db:code>. <db:code role="parameter">state</db:code> has to be a child of this state.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qstate.xml#initialState-prop">initialState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#initialState">initialState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transitions">
<db:title>[since 4.7] QList&lt;QAbstractTransition *&gt; QState::transitions() const</db:title>
<db:para>Returns this state's outgoing transitions (i.e. transitions where this state is the <db:link xlink:href="qabstracttransition.xml#sourceState">source state</db:link>), or an empty list if this state has no outgoing transitions.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#addTransition">addTransition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
