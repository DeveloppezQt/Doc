<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ParentAnimation QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Animates changes in parent values.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Animation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ParentAnimation is part of <db:simplelist><db:member>qtquick-animation-properties</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link> is used to animate a parent change for an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>.</db:para>
<db:para>For example, the following <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link> changes <db:code>blueRect</db:code> to become a child of <db:code>redRect</db:code> when it is clicked. The inclusion of the <db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link>, which defines a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> to be applied during the transition, ensures the item animates smoothly as it moves to its new parent:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 200; height: 100

    Rectangle {
        id: redRect
        width: 100; height: 100
        color: &quot;red&quot;
    }

    Rectangle {
        id: blueRect
        x: redRect.width
        width: 50; height: 50
        color: &quot;blue&quot;

        states: State {
            name: &quot;reparented&quot;
            ParentChange { target: blueRect; parent: redRect; x: 10; y: 10 }
        }

        transitions: Transition {
            ParentAnimation {
                NumberAnimation { properties: &quot;x,y&quot;; duration: 1000 }
            }
        }

        MouseArea { anchors.fill: parent; onClicked: blueRect.state = &quot;reparented&quot; }
    }
}
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link> can contain any number of animations. These animations will be run in parallel; to run them sequentially, define them within a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link>.</db:para>
<db:para>In some cases, such as when reparenting between items with clipping enabled, it is useful to animate the parent change via another item that does not have clipping enabled. Such an item can be set using the <db:link xlink:href="qml-qtquick-parentanimation.xml#via-prop">via</db:link> property.</db:para>
<db:para><db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link> is typically used within a <db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link> in conjunction with a <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link>. When used in this manner, it animates any <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link> that has occurred during the state change. This can be overridden by setting a specific target item using the <db:link xlink:href="qml-qtquick-parentanimation.xml#target-prop">target</db:link> property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-statesanimations-animations.xml">Animation and Transitions in Qt Quick</db:link></db:member>
<db:member><db:link xlink:href="qtquick-animation-example.xml">Qt Quick Examples - Animation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="newParent-prop">
<db:title>newParent : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>newParent</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The new parent to animate to.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link> is defined within a <db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link>, this value defaults to the value defined in the end state of the <db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link>.</db:para>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>target</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The item to reparent.</db:para>
<db:para>When used in a transition, if no target is specified, all <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link> occurrences are animated by the <db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link>.</db:para>
</db:section>
<db:section xml:id="via-prop">
<db:title>via : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>via</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The item to reparent via. This provides a way to do an unclipped animation when both the old parent and new parent are clipped.</db:para>
<db:programlisting language="qml">ParentAnimation {
    target: myItem
    via: topLevelItem
    // ...
}
</db:programlisting>
<db:note>
<db:para>This only works when the <db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link> is used in a <db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link> in conjunction with a <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
