<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Video Shader Effects Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Applying shader effects on video and camera viewfinder content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para><db:emphasis>QML Video Shader Effects</db:emphasis> demonstrates how a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> can be used to apply postprocessing effects, expressed in GLSL, to QML <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> type.</db:para>
<db:para>It also shows how native code can be combined with QML to implement more advanced functionality - in this case, C++ code is used to calculate the QML frame rate. This value is rendered in QML in a semi-transparent item overlaid on the video content.</db:para>
<db:para>The following screenshots show shader effects being applied. In each case, the effect is implemented using a fragment shader.</db:para>
<db:para>Here we see an edge detection algorithm being applied to a video clip (<db:link xlink:href="http://durian.blender.org/">Sintel from blender.org</db:link>).</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlvideofx-video-edgedetection.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This image shows a page curl effect, applied to the same video clip.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlvideofx-video-pagecurl.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here we see a 'glow' effect (edge detection plus colour quantization) being applied to the camera viewfinder.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlvideofx-camera-glow.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This image shows a 'wobble' effect applied to the viewfinder.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlvideofx-camera-wobble.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The application includes many more effects than the ones shown here - look for Effect*.qml files in the list of files below to see the full range.</db:para>
</db:section>
<db:section xml:id="application-structure">
<db:title>Application structure</db:title>
<db:para>Shader effects can be applied to video or viewfinder content using <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, as shown in the following example, which applies a wiggly effect to the content:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
import QtMultimedia 5.0

Rectangle {
    width: 300
    height: 300
    color: &quot;black&quot;

    MediaPlayer {
        id: mediaPlayer
        source: &quot;test.mp4&quot;
        playing: true
    }

    VideoOutput {
        id: video
        anchors.fill: parent
        source: mediaPlayer
    }

    ShaderEffect {
        property variant source: ShaderEffectSource { sourceItem: video; hideSource: true }
        property real wiggleAmount: 0.005
        anchors.fill: video

        fragmentShader: &quot;
            varying highp vec2 qt_TexCoord0;
            uniform sampler2D source;
            uniform highp float wiggleAmount;
            void main(void)
            {
                highp vec2 wiggledTexCoord = qt_TexCoord0;
                wiggledTexCoord.s += sin(4.0 * 3.141592653589 * wiggledTexCoord.t) * wiggleAmount;
                gl_FragColor = texture2D(source, wiggledTexCoord.st);
            }
        &quot;
    }
}
</db:programlisting>
<db:para>In this application, the usage of the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> and <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> types is a bit more complicated, for the following reasons:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Each effect can be applied to either a <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> or an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> item, so the type of the source item must be abstracted away from the effect implementation</db:para>
</db:listitem>
<db:listitem>
<db:para>For some effects (such as the edge detection and glow examples shown in the screenshots above), the transformation is applied only to pixels to the left of a dividing line - this allows the effect to be easily compared with the untransformed image on the right</db:para>
</db:listitem>
<db:listitem>
<db:para>Most effects have one or more parameters which can be modified by the user - these are controlled by sliders in the UI which are connected to uniform values passed into the GLSL code</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The abstraction of source item type is achieved by the Content, which uses a <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> to create either a <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link>, <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> or <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>:</db:para>
<db:programlisting language="cpp">import QtQuick 2.1

Rectangle {
    ...
    Loader {
        id: contentLoader
    }
    ...
    function openImage(path) {
        stop()
        contentLoader.source = &quot;ContentImage.qml&quot;
        contentLoader.item.source = path
    }

    function openVideo(path) {
        stop()
        contentLoader.source = &quot;ContentVideo.qml&quot;
        contentLoader.item.mediaSource = path
    }

    function openCamera() {
        stop()
        contentLoader.source = &quot;ContentCamera.qml&quot;
    }

}

</db:programlisting>
<db:para>Each effect is implemented as a QML item which is based on the Effect, which in turn is based on the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0

ShaderEffect {
    property variant source
    property ListModel parameters: ListModel { }
    property bool divider: true
    property real dividerValue: 0.5
    property real targetWidth: 0
    property real targetHeight: 0
    property string fragmentShaderFilename
    property string vertexShaderFilename

    QtObject {
        id: d
        property string fragmentShaderCommon: &quot;
            #ifdef GL_ES
                precision mediump float;
            #else
            #   define lowp
            #   define mediump
            #   define highp
            #endif // GL_ES
        &quot;
    }

    // The following is a workaround for the fact that ShaderEffect
    // doesn't provide a way for shader programs to be read from a file,
    // rather than being inline in the QML file

    onFragmentShaderFilenameChanged:
        fragmentShader = d.fragmentShaderCommon + fileReader.readFile(&quot;:shaders/&quot; + fragmentShaderFilename)
    onVertexShaderFilenameChanged:
        vertexShader = fileReader.readFile(vertexShaderFilename)
}

</db:programlisting>
<db:para>The interface of Effect allows for derived effects to specify the number of parameters which they support (and therefore the number of sliders which should be displayed), and whether a vertical dividing line should be drawn between transformed and untransformed image regions. As an example, here is the implementation of the pixelation effect. As you can see, the pixelation effect supports one parameter (which controls the pixelation granularity), and states that the divider should be displayed.</db:para>
<db:programlisting language="cpp">import QtQuick 2.0

Effect {
    parameters: ListModel {
        ListElement {
            name: &quot;Granularity&quot;
            value: 0.5
        }
        onDataChanged: updateParameters()
    }

    function updateParameters()
    {
            granularity = parameters.get(0).value * 20.0;
    }

    // Transform slider values, and bind result to shader uniforms
    property real granularity: 0.5 * 20

    fragmentShaderFilename: &quot;pixelate.fsh&quot;
}

</db:programlisting>
<db:para>The main.qml file shows a FileOpen, which allows the user to select the input source and an EffectSelectionPanel item, which lists each of the available shader effects. As described above, a Content item is used to load the appropriate input and effect type. A Divider item draws the vertical dividing line, which can be dragged left / right by the user. Finally, a ParameterPanel item renders the sliders corresponding to each effect parameter.</db:para>
<db:para>Here is the effect selection menu:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlvideofx-effects-menu.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="calculating-and-displaying-qml-painting-rate">
<db:title>Calculating and displaying QML painting rate</db:title>
<db:para>The QML painting rate is calculated by the FrequencyMonitor class, which turns a stream of events (received via the notify() slot), into an instantaneous and an averaged frequency:</db:para>
<db:programlisting language="cpp">class FrequencyMonitor : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qreal instantaneousFrequency READ instantaneousFrequency NOTIFY instantaneousFrequencyChanged)
    Q_PROPERTY(qreal averageFrequency READ averageFrequency NOTIFY averageFrequencyChanged)

public:
    ...
    static void qmlRegisterType();

public slots:
    Q_INVOKABLE void notify();
};

</db:programlisting>
<db:para>The FrequencyMonitor class is exposed to QML like this</db:para>
<db:programlisting language="cpp">void FrequencyMonitor::qmlRegisterType()
{
    ::qmlRegisterType&lt;FrequencyMonitor&gt;(&quot;FrequencyMonitor&quot;, 1, 0, &quot;FrequencyMonitor&quot;);
}

</db:programlisting>
<db:para>and its data is displayed by defining a QML item called FrequencyItem, like this:</db:para>
<db:programlisting language="cpp">import FrequencyMonitor 1.0

Rectangle {
    id: root
    ...
    function notify() {
        monitor.notify()
    }

    FrequencyMonitor {
        id: monitor
        onAverageFrequencyChanged: {
            averageFrequencyText.text = monitor.averageFrequency.toFixed(2)
        }
    }

    Text {
        id: labelText
        anchors {
            left: parent.left
            top: parent.top
            margins: 10
        }
        color: root.textColor
        font.pixelSize: 0.6 * root.textSize
        text: root.label
        width: root.width - 2*anchors.margins
        elide: Text.ElideRight
    }

    Text {
        id: averageFrequencyText
        anchors {
            right: parent.right
            bottom: parent.bottom
            margins: 10
        }
        color: root.textColor
        font.pixelSize: root.textSize
    }
}

</db:programlisting>
<db:para>The result looks like this:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/video-qml-paint-rate.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>All that remains is to connect the afterRendering() signal of the <db:link xlink:href="qquickview.xml">QQuickView</db:link> object to a JavaScript function, which will eventually call frequencyItem.notify():</db:para>
<db:programlisting language="cpp">#include &lt;QtGui/QGuiApplication&gt;
#include &lt;QtQuick/QQuickItem&gt;
#include &lt;QtQuick/QQuickView&gt;
#include &quot;filereader.h&quot;
#include &quot;trace.h&quot;

#ifdef PERFORMANCEMONITOR_SUPPORT
#include &quot;performancemonitordeclarative.h&quot;
#endif

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);
    ...
    QQuickItem *rootObject = viewer.rootObject();
    ...
    QObject::connect(&amp;viewer, SIGNAL(afterRendering()),
                     rootObject, SLOT(qmlFramePainted()));
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/filereader.cpp">multimedia/video/qmlvideofx/filereader.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/filereader.h">multimedia/video/qmlvideofx/filereader.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/main.cpp">multimedia/video/qmlvideofx/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/Button.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/Button.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/Content.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/Content.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/ContentCamera.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/ContentCamera.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/ContentImage.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/ContentImage.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/ContentVideo.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/ContentVideo.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/Curtain.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/Curtain.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/Divider.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/Divider.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/Effect.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/Effect.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectBillboard.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectBillboard.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectBlackAndWhite.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectBlackAndWhite.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectEmboss.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectEmboss.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectGaussianBlur.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectGaussianBlur.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectGlow.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectGlow.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectIsolate.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectIsolate.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectMagnify.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectMagnify.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectPageCurl.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectPageCurl.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectPassThrough.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectPassThrough.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectPixelate.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectPixelate.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectPosterize.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectPosterize.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectRipple.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectRipple.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectSelectionList.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectSelectionList.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectSepia.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectSepia.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectSharpen.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectSharpen.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectShockwave.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectShockwave.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectSobelEdgeDetection1.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectSobelEdgeDetection1.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectTiltShift.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectTiltShift.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectToon.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectToon.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectVignette.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectVignette.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectWarhol.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectWarhol.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/EffectWobble.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/EffectWobble.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/FileBrowser.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/FileBrowser.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/FileOpen.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/FileOpen.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/HintedMouseArea.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/HintedMouseArea.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/Main.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/Main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/ParameterPanel.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/ParameterPanel.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qml/qmlvideofx/Slider.qml">multimedia/video/qmlvideofx/qml/qmlvideofx/Slider.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qmlapplicationviewer/qmlapplicationviewer.cpp">multimedia/video/qmlvideofx/qmlapplicationviewer/qmlapplicationviewer.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qmlapplicationviewer/qmlapplicationviewer.h">multimedia/video/qmlvideofx/qmlapplicationviewer/qmlapplicationviewer.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qmlvideofx.pro">multimedia/video/qmlvideofx/qmlvideofx.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qmlvideofx.qrc">multimedia/video/qmlvideofx/qmlvideofx.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qmlvideofx.svg">multimedia/video/qmlvideofx/qmlvideofx.svg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/trace.h">multimedia/video/qmlvideofx/trace.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/images/Dropdown_arrows.png">multimedia/video/qmlvideofx/images/Dropdown_arrows.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/images/Slider_bar.png">multimedia/video/qmlvideofx/images/Slider_bar.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/images/Slider_handle.png">multimedia/video/qmlvideofx/images/Slider_handle.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/images/Triangle_Top.png">multimedia/video/qmlvideofx/images/Triangle_Top.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/images/Triangle_bottom.png">multimedia/video/qmlvideofx/images/Triangle_bottom.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/images/icon_BackArrow.png">multimedia/video/qmlvideofx/images/icon_BackArrow.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/images/icon_Folder.png">multimedia/video/qmlvideofx/images/icon_Folder.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/images/icon_Menu.png">multimedia/video/qmlvideofx/images/icon_Menu.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/images/qt-logo.png">multimedia/video/qmlvideofx/images/qt-logo.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multimedia/video/qmlvideofx/qmlvideofx.png">multimedia/video/qmlvideofx/qmlvideofx.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
