<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls - Wearable Demo</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates an application launcher designed for wearable devices.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-wearable.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:emphasis>Wearable Demo</db:emphasis> consists of an application launcher and a collection of small and simple example applications aimed at wearable devices.</db:para>
<db:section xml:id="structure">
<db:title>Structure</db:title>
<db:para>The main .qml file, <db:code>wearable.qml</db:code>, consists of an <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link>, a <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> for a stack-based navigation model, and buttons for interactive navigation.</db:para>
<db:programlisting language="qml">QQC2.ApplicationWindow {
    id: window
    ...
    QQC2.StackView {
        id: stackView
        ...
        initialItem: LauncherPage {
            onLaunched: (title, page, fallback) =&gt; {
                            var createdPage = Qt.createComponent(page)
                            if (createdPage.status !== Component.Ready)
                                createdPage = Qt.createComponent(fallback)
                            stackView.push(createdPage)
                            header.title = title
                        }
        }
        ...
    }

    DemoMode {
        stackView: stackView
    }

    DemoModeIndicator {
        id: demoModeIndicator
        y: WearableSettings.demoMode ? header.height + 3 : -height - 5
        anchors.horizontalCenter: parent.horizontalCenter
        z: header.z + 1
    }

    MouseArea {
        enabled: WearableSettings.demoMode
        anchors.fill: parent
        onClicked: {
            // Stop demo mode and return to the launcher page.
            WearableSettings.demoMode = false
            stackView.pop(null)
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="styling">
<db:title>Styling</db:title>
<db:para>The demo uses a custom <db:link xlink:href="qtquickcontrols-styles.xml">Qt Quick Controls 2 style</db:link> embedded into the demo's resources. The custom style is implemented for a few controls only, as it is specific to this particular demo. It uses a singleton type for various styling attributes, such as fonts and colors.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>WearableStyle/PageIndicator.qml</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>WearableStyle/Slider.qml</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>WearableStyle/Switch.qml</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>WearableStyle/UIStyle.qml</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The style is applied in <db:code>main()</db:code> in <db:code>wearable.cpp</db:code>:</db:para>
<db:programlisting language="cpp">QQuickStyle::setStyle(QStringLiteral(&quot;WearableStyle&quot;));
</db:programlisting>
<db:para>The main benefit of using the built-in styling system is that the style selection is fully transparent to the application code. There is no need to import a specific folder that contains the styled controls. This way, the application can be run with other styles too.</db:para>
</db:section>
<db:section xml:id="launcher-page">
<db:title>Launcher Page</db:title>
<db:para>The application launcher is implemented using a circular <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> in <db:code>LauncherPage.qml</db:code>. Each application is in a separate .qml file, which are added to the <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> on the launcher page. For some applications a fallback option is provided to handle optional dependencies like QtLocation.</db:para>
<db:programlisting language="qml">PathView {
    id: circularView

    signal launched(string title, string page, string fallbackpage)
    ...
    model: ListModel {
        ListElement {
            title: qsTr(&quot;Navigation&quot;)
            pageIcon: &quot;maps&quot;
            page: &quot;NavigationPage.qml&quot;
            fallback: &quot;NavigationFallbackPage.qml&quot;
        }
        ...
        ListElement {
            title: qsTr(&quot;Settings&quot;)
            pageIcon: &quot;settings&quot;
            page: &quot;SettingsPage.qml&quot;
            fallback: &quot;&quot;
        }
    }
    delegate: QQC2.RoundButton {
        ...
        icon.width: 36
        icon.height: 36
        icon.source: UIStyle.iconPath(pageIcon)
        icon.color: UIStyle.textColor
        ...
        onClicked: {
            if (PathView.isCurrentItem)
                circularView.launched(title, Qt.resolvedUrl(page), Qt.resolvedUrl(fallback))
            else
                circularView.currentIndex = index
        }
    }
    ...
}
</db:programlisting>
</db:section>
<db:section xml:id="applications">
<db:title>Applications</db:title>
<db:para>The applications are designed for touch input based on what input methods or communication means are typically offered by wearable devices.</db:para>
<db:para>Most applications have their own JavaScript files that act as dummy application backends. They demonstrate how to fetch and manipulate or convert external data. For example, the <db:code>Weather</db:code> application reads data from local files using <db:link xlink:href="qml-qtqml-xmlhttprequest.xml">XMLHttpRequest</db:link>. These files were generated by storing responses from remote servers in JSON format. This code can be easily modified to acquire data from remote servers.</db:para>
<db:section xml:id="navigation">
<db:title>Navigation</db:title>
<db:para>This application uses the QtLocation module to display a route within Oslo. If QtLocation is not installed, it shows a static image as the map and route information based on a JSON file. Currently, it is not possible to specify the source and destination from within the application, but it can be added based on the device's capabilities. For example, you can collect necessary info. using one of the following methods:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Implement additional screens to collect input from user</db:para>
</db:listitem>
<db:listitem>
<db:para>Communicate with another device (smart phone or PC) over Bluetooth or WiFi channels.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="weather">
<db:title>Weather</db:title>
<db:para>This application displays weather information such as temperature, sunrise and sunset times, air pressure, and so on. This information is obtained from <db:link xlink:href="https://openweathermap.org/">https://openweathermap.org/</db:link> using its REST API. The API response is in JSON format, which is parsed using JavaScript by the application. This application can also be modified by adding screens to obtain weather data for a given location.</db:para>
</db:section>
<db:section xml:id="world-clock">
<db:title>World Clock</db:title>
<db:para>This application displays a world clock for different cities. As of now, the list of cities is hard-coded in the application, but that can be changed based on the input capabilities of the device.</db:para>
</db:section>
<db:section xml:id="others">
<db:title>Others</db:title>
<db:para>The remaining applications return static data for now, but they can be modified to process response data obtained from respective services.</db:para>
</db:section>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quickcontrols/wearable?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
