<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls - Wearable Demo</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates an application launcher designed for wearable devices.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-wearable.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:emphasis>Wearable Demo</db:emphasis> consists of an application launcher and a collection of small and simple example applications aimed at wearable devices.</db:para>
<db:section xml:id="structure">
<db:title>Structure</db:title>
<db:para>The main .qml file, <db:code>wearable.qml</db:code>, consists of an <db:link xlink:href="qml-qtquick-controls2-applicationwindow.xml">ApplicationWindow</db:link>, a <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> for a stack-based navigation model, and buttons for interactive navigation.</db:para>
<db:programlisting language="cpp">QQC2.ApplicationWindow {
    id: window
    ...
    header: NaviButton {
        id: homeButton
        ...
        onClicked: stackView.pop(null)
    }

    footer: NaviButton {
        id: backButton
        ...
        onClicked: stackView.pop()
    }

    QQC2.StackView {
        id: stackView
        ...
            onLaunched: stackView.push(page)
        }
    }

    DemoMode {
        stackView: stackView
    }

    DemoModeIndicator {
        id: demoModeIndicator
        y: settings.demoMode ? -height : -height * 2
        anchors.horizontalCenter: parent.horizontalCenter
        height: header.height
        z: window.header.z + 1
    }

    MouseArea {
        enabled: settings.demoMode
        anchors.fill: parent
        onClicked: {
            // Stop demo mode and return to the launcher page.
            settings.demoMode = false
            stackView.pop(null)
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="styling">
<db:title>Styling</db:title>
<db:para>The demo uses a custom <db:link xlink:href="qtquickcontrols2-styles.xml">Qt Quick Controls 2 style</db:link> embedded into the demo's resources. The custom style is implemented for a few controls only, as it is specific to this particular demo. It uses a singleton type for various styling attributes, such as fonts and colors.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>qml/Style/PageIndicator.qml</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qml/Style/Slider.qml</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qml/Style/Switch.qml</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qml/Style/UIStyle.qml</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The style is applied in <db:code>main()</db:code> in <db:code>wearable.cpp</db:code>:</db:para>
<db:programlisting language="cpp">QQuickStyle::setStyle(QStringLiteral(&quot;qrc:/qml/Style&quot;));
</db:programlisting>
<db:para>The main benefit of using the built-in styling system is that the style selection is fully transparent to the application code. There is no need to import a specific folder that contains the styled controls. This way, the application can be run with other styles too.</db:para>
</db:section>
<db:section xml:id="custom-type">
<db:title>Custom Type</db:title>
<db:para>The demo application contains a custom button type implemented in <db:code>qml/NaviButton.qml</db:code>. The navigation button is used as a home and back button in <db:code>wearable.qml</db:code>. <db:code>NaviButton</db:code> extends the <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml">AbstractButton</db:link> type with properties that control the slide in and slide out transitions and the button image.</db:para>
<db:programlisting language="cpp">QQC2.AbstractButton {
    id: button

    property int edge: Qt.TopEdge
    property alias imageSource: image.source

    contentItem: Image {
        id: image
        ...
    }

    background: Rectangle {
        ...
    }

    transform: Translate {
        Behavior on y { NumberAnimation { } }
        y: enabled ? 0 : edge === Qt.TopEdge ? -button.height : button.height
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="icons">
<db:title>Icons</db:title>
<db:para>The demo ships a custom icon theme. The icons are bundled into the <db:code>:/icons</db:code> folder in the application's resources. The <db:code>index.theme</db:code> file lists the contents of the icon theme:</db:para>
<db:programlisting language="cpp">[Icon Theme]
Name=Wearable
Comment=Qt Quick Controls 2 Wearable Demo Icon Theme

Directories=36x36,36x36@2

[36x36]
Size=36
Type=Fixed

[36x36@2]
Size=36
Scale=2
Type=Fixed
</db:programlisting>
<db:para>Finally, the icon theme is selected in <db:code>main()</db:code>:</db:para>
<db:programlisting language="cpp">QIcon::setThemeName(QStringLiteral(&quot;wearable&quot;));
</db:programlisting>
<db:para>The icons are used on the Launcher Page, which is presented below. See <db:link xlink:href="qtquickcontrols2-icons.xml">Icons in Qt Quick Controls</db:link> for more details about icons and themes.</db:para>
</db:section>
<db:section xml:id="launcher-page">
<db:title>Launcher Page</db:title>
<db:para>The application launcher is implemented using a circular <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> in <db:code>LauncherPage.qml</db:code>. Each application is in a separate .qml file, which is added to the <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> on the launcher page.</db:para>
<db:programlisting language="cpp">PathView {
    id: circularView

    signal launched(string page)
    ...
    model: ListModel {
        ListElement {
            title: qsTr(&quot;World Clock&quot;)
            icon: &quot;worldclock&quot;
            page: &quot;WorldClock/WorldClockPage.qml&quot;
        }
        ...
        ListElement {
            title: qsTr(&quot;Settings&quot;)
            icon: &quot;settings&quot;
            page: &quot;Settings/SettingsPage.qml&quot;
        }
    }

    delegate: QQC2.RoundButton {
        ...
        icon.width: 36
        icon.height: 36
        icon.name: model.icon
        ...
        onClicked: {
            if (PathView.isCurrentItem)
                circularView.launched(Qt.resolvedUrl(page))
            else
                circularView.currentIndex = index
        }
    }
    ...
}
</db:programlisting>
</db:section>
<db:section xml:id="applications">
<db:title>Applications</db:title>
<db:para>The applications are designed for touch input based on what input methods or communication means are typically offered by wearable devices.</db:para>
<db:para>Most applications have their own JavaScript files that act as dummy application backends. They illustrate fetching external data and help manipulating or converting the data. In the <db:code>Navigation</db:code> and <db:code>Weather</db:code> applications, data acquisition is implemented using <db:link xlink:href="qtqml-javascript-qmlglobalobject.xml#xmlhttprequest">XMLHttpRequest</db:link> to read from local files. These files were generated by storing responses from remote servers in JSON format. This code can be easily modified to acquire data from remote servers.</db:para>
<db:section xml:id="navigation">
<db:title>Navigation</db:title>
<db:para>This application displays a walking route from source to destination. This route information is obtained using the REST API provided by <db:link xlink:href="https://www.openstreetmap.org/">https://www.openstreetmap.org/</db:link>. The API response is in JSON format, which is parsed using JavaScript by the application. Currently, it is not possible to specify the source and destination from within the application, but it can be added based on the device's capabilities. For example, user input could be implemented as screens with input fields, or can be communicated over Bluetooth/Wifi from a paired application running on another device such as a smart phone or PC.</db:para>
</db:section>
<db:section xml:id="weather">
<db:title>Weather</db:title>
<db:para>This application displays weather information such as temperature, sunrise and sunset times, air pressure, and so on. This information is obtained from <db:link xlink:href="https://openweathermap.org/">https://openweathermap.org/</db:link> using its REST API. The API response is in JSON format, which is parsed using JavaScript by the application. This application can also be modified by adding screens to obtain weather data for a given location.</db:para>
</db:section>
<db:section xml:id="world-clock">
<db:title>World Clock</db:title>
<db:para>This application displays a world clock for different cities. As of now, the list of cities is hard-coded in the application, but that can be changed based on the input capabilities of the device.</db:para>
</db:section>
<db:section xml:id="others">
<db:title>Others</db:title>
<db:para>The remaining applications return static data for now, but they can be modified to process response data obtained from respective services.</db:para>
</db:section>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtquickcontrols2.git/tree/examples/quickcontrols2/wearable?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
