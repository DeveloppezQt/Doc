<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Principled Material Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of Principled Material.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;imagehelper.h&quot;

#include &amp;lt;QtGui/QImageReader&amp;gt;

ImageHelper::ImageHelper(QObject *parent)
    : QObject{parent}
{

}

QString ImageHelper::getSupportedImageFormatsFilter() const
{
    auto formats = QImageReader::supportedImageFormats();
    QString imageFilter = QStringLiteral(&quot;Image files (&quot;);
    for (const auto &amp;amp;format : std::as_const(formats))
        imageFilter += QStringLiteral(&quot;*.&quot;) + format + QStringLiteral(&quot; &quot;);
    imageFilter += QStringLiteral(&quot;)&quot;);
    return imageFilter;
}

</db:programlisting>
</db:article>
