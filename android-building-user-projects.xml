<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Android - Building User Projects</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-building.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt for Android - Building from Source"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="porting-to-android.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Porting to Android"/></db:extendedlink>
<db:abstract>
<db:para>How to build user projects using Qt for Android.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>To build CMake projects with an installed or <db:link xlink:href="android-building.xml">a self-built</db:link> Qt, use <db:link xlink:href="cmake-build-on-cmdline.xml">qt-cmake</db:link> wrapper. For Android the following has to be provided:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;qt_for_android_install_path&amp;gt;/bin/qt-cmake \
    -DANDROID_SDK_ROOT=&amp;lt;android_sdk_path&amp;gt; \
    -DANDROID_NDK_ROOT=&amp;lt;android_ndk_path&amp;gt; \
    -S &amp;lt;source_dir&amp;gt; -B &amp;lt;build_dir&amp;gt; \
    [-G&quot;&amp;lt;Ninja|Unix Makefiles&amp;gt;&quot;]
</db:programlisting>
<db:para>Qt for Android automatically collects Android package dependencies from a project build tree and uses known library paths. It's also possible to specify various dependencies that need to be deployed within a target package using the following target properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="cmake-target-property-qt-android-deployment-dependencies.xml#cmake-target-property-qt-android-deployment-dependencies">QT_ANDROID_DEPLOYMENT_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cmake-target-property-qt-android-extra-libs.xml#cmake-target-property-qt-android-extra-libs">QT_ANDROID_EXTRA_LIBS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cmake-target-property-qt-android-extra-plugins.xml#cmake-target-property-qt-android-extra-plugins">QT_ANDROID_EXTRA_PLUGINS</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="building-multi-abi-packages-using-cmake">
<db:title>Building multi-ABI packages using CMake</db:title>
<db:para>Introduced in Qt 6.3.</db:para>
<db:para>There are several ways to enable building a multi-ABI package. By default only the single ABI belonging to the <db:link xlink:href="cmake-build-on-cmdline.xml">qt-cmake</db:link> script is selected. Setting the <db:link xlink:href="cmake-variable-qt-android-build-all-abis.xml#cmake-variable-qt-android-build-all-abis">QT_ANDROID_BUILD_ALL_ABIS</db:link> variable to TRUE enables the automatic detection of available Qt for Android SDKs. The detection mechanism assumes the use of the default directory structure supplied by Qt Online Installer:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;path/to/Qt&amp;gt;/\1
    android_armv7
    android_arm64_v8a
    android_x86
    android_x86_64
</db:programlisting>
<db:para>The command below shows the easiest way to build an Android multi-ABI package using the Qt for Android SDKs supplied by Qt Online Installer:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;qt_for_android_install_path&amp;gt;/bin/qt-cmake \
    -DQT_ANDROID_BUILD_ALL_ABIS=TRUE \
    -DANDROID_SDK_ROOT=&amp;lt;android_sdk_path&amp;gt; \
    -DANDROID_NDK_ROOT=&amp;lt;android_ndk_path&amp;gt; \
    -S &amp;lt;source_directory&amp;gt; -B &amp;lt;build_directory&amp;gt;
</db:programlisting>
<db:para>Using the <db:link xlink:href="cmake-variable-qt-android-abis.xml#cmake-variable-qt-android-abis">QT_ANDROID_ABIS</db:link> variable, it's possible to customize the list of ABIs the project is built for. The corresponding Qt for Android development kits needs to follow the directory structure described previously. The following command line configures a project for arm64-v8a and x86 ABIs only:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;qt_for_android_install_path&amp;gt;/bin/qt-cmake \
    -DQT_ANDROID_ABIS=&quot;arm64-v8a;x86&quot; \
    -DANDROID_SDK_ROOT=&amp;lt;android_sdk_path&amp;gt; \
    -DANDROID_NDK_ROOT=&amp;lt;android_ndk_path&amp;gt; \
    -S &amp;lt;source_directory&amp;gt; -B &amp;lt;build_directory&amp;gt;
</db:programlisting>
<db:note>
<db:para>The ABI of the primary SDK that <db:link xlink:href="cmake-build-on-cmdline.xml">qt-cmake</db:link> script belongs to is added to the list of used ABIs unconditionally. It's not possible to exclude it from the build.</db:para>
</db:note>
<db:note>
<db:para><db:link xlink:href="cmake-variable-qt-android-build-all-abis.xml#cmake-variable-qt-android-build-all-abis">QT_ANDROID_BUILD_ALL_ABIS</db:link> has higher priority than <db:link xlink:href="cmake-variable-qt-android-abis.xml#cmake-variable-qt-android-abis">QT_ANDROID_ABIS</db:link>.</db:para>
</db:note>
<db:para>Paths to the Qt for Android SDKs that do not match the default directory structure can be changed using the corresponding <db:link xlink:href="cmake-variable-qt-path-android-abi.xml#cmake-variable-qt-path-android-abi-abi">QT_PATH_ANDROID_ABI_&lt;ABI&gt;</db:link> variables.</db:para>
<db:para>The following example enables the automatic detection of available Qt for Android SDKs and specifies custom paths to armeabi-v7a and arm64-v8a SDKs:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;qt_for_android_install_path&amp;gt;/bin/qt-cmake \
    -DQT_ANDROID_BUILD_ALL_ABIS=TRUE
    -DQT_PATH_ANDROID_ABI_armeabi-v7a=&quot;&amp;lt;Qt/for/armeabi-v7a&amp;gt;&quot; \
    -DQT_PATH_ANDROID_ABI_arm64-v8a=&quot;&amp;lt;Qt/for/arm64-v8a&amp;gt;&quot; \
    -DANDROID_SDK_ROOT=&amp;lt;android_sdk_path&amp;gt; \
    -DANDROID_NDK_ROOT=&amp;lt;android_ndk_path&amp;gt; \
    -S &amp;lt;source_directory&amp;gt; -B &amp;lt;build_directory&amp;gt;
</db:programlisting>
<db:para>It's also possible to set the <db:link xlink:href="cmake-target-property-qt-android-abis.xml#cmake-target-property-qt-android-abis">QT_ANDROID_ABIS</db:link> target property that specifies a list of ABIs that the single executable target is built for. For example:</db:para>
<db:programlisting language="cpp">...
</db:programlisting>
<db:programlisting language="cpp" role="bad">qt_add_executable(MyApp main.cpp)

set_target_properties(MyApp PROPERTIES QT_ANDROID_ABIS &quot;arm64-v8a;x86&quot;)
</db:programlisting>
<db:para>The MyApp target will be built for armeabi-v7a and arm64-v8a only, even if the QT_ANDROID_BUILD_ALL_ABIS or QT_ANDROID_ABIS variable is set.</db:para>
</db:section>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>You can continue to use qmake to build user projects.</db:para>
<db:note>
<db:para>Building multi-ABI packages with qmake is not supported in Qt 6.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="cmake-variable-qt-android-abis.xml#cmake-variable-qt-android-abis">QT_ANDROID_ABIS</db:link></db:member>
<db:member><db:link xlink:href="cmake-variable-qt-android-build-all-abis.xml#cmake-variable-qt-android-build-all-abis">QT_ANDROID_BUILD_ALL_ABIS</db:link></db:member>
<db:member><db:link xlink:href="cmake-variable-qt-path-android-abi.xml#cmake-variable-qt-path-android-abi-abi">QT_PATH_ANDROID_ABI_&lt;ABI&gt;</db:link></db:member>
<db:member><db:link xlink:href="cmake-target-property-qt-android-abis.xml#cmake-target-property-qt-android-abis">QT_ANDROID_ABIS</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
