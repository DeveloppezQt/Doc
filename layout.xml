<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Layout Management</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtwidgets-index.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt Widgets"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="style-reference.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Styles"/></db:extendedlink>
<db:abstract>
<db:para>A tour of the standard layout managers and an introduction to custom layouts.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>Qt Widgets</db:para>
<db:para>The Qt layout system provides a simple and powerful way of automatically arranging child widgets within a widget to ensure that they make good use of the available space.</db:para>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>Qt includes a set of layout management classes that are used to describe how widgets are laid out in an application's user interface. These layouts automatically position and resize widgets when the amount of space available for them changes, ensuring that they are consistently arranged and that the user interface as a whole remains usable.</db:para>
<db:para>All <db:link xlink:href="qwidget.xml">QWidget</db:link> subclasses can use layouts to manage their children. The <db:link xlink:href="qwidget.xml#setLayout">QWidget::setLayout</db:link>() function applies a layout to a widget. When a layout is set on a widget in this way, it takes charge of the following tasks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Positioning of child widgets</db:para>
</db:listitem>
<db:listitem>
<db:para>Sensible default sizes for windows</db:para>
</db:listitem>
<db:listitem>
<db:para>Sensible minimum sizes for windows</db:para>
</db:listitem>
<db:listitem>
<db:para>Resize handling</db:para>
</db:listitem>
<db:listitem>
<db:para>Automatic updates when contents change:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Font size, text or other contents of child widgets</db:para>
</db:listitem>
<db:listitem>
<db:para>Hiding or showing a child widget</db:para>
</db:listitem>
<db:listitem>
<db:para>Removal of child widgets</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-s-layout-classes">
<db:title>Qt's Layout Classes</db:title>
<db:para>Qt's layout classes were designed for hand-written C++ code, allowing measurements to be specified in pixels for simplicity, so they are easy to understand and use. The code generated for forms created using Qt Designer also uses the layout classes. Qt Designer is useful to use when experimenting with the design of a form since it avoids the compile, link and run cycle usually involved in user interface development.</db:para>
<db:variablelist role="geomanagement">
<db:varlistentry>
<db:term><db:link xlink:href="qboxlayout.xml" xlink:role="class">QBoxLayout</db:link></db:term>
<db:listitem>
<db:para>The QBoxLayout class lines up child widgets horizontally or vertically.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qbuttongroup.xml" xlink:role="class">QButtonGroup</db:link></db:term>
<db:listitem>
<db:para>The QButtonGroup class provides a container to organize groups of button widgets.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qformlayout.xml" xlink:role="class">QFormLayout</db:link></db:term>
<db:listitem>
<db:para>The QFormLayout class manages forms of input widgets and their associated labels.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgraphicsanchor.xml" xlink:role="class">QGraphicsAnchor</db:link></db:term>
<db:listitem>
<db:para>The QGraphicsAnchor class represents an anchor between two items in a QGraphicsAnchorLayout.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgraphicsanchorlayout.xml" xlink:role="class">QGraphicsAnchorLayout</db:link></db:term>
<db:listitem>
<db:para>The QGraphicsAnchorLayout class provides a layout where one can anchor widgets together in Graphics View.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgridlayout.xml" xlink:role="class">QGridLayout</db:link></db:term>
<db:listitem>
<db:para>The QGridLayout class lays out widgets in a grid.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgroupbox.xml" xlink:role="class">QGroupBox</db:link></db:term>
<db:listitem>
<db:para>The QGroupBox widget provides a group box frame with a title.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qhboxlayout.xml" xlink:role="class">QHBoxLayout</db:link></db:term>
<db:listitem>
<db:para>The QHBoxLayout class lines up widgets horizontally.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlayout.xml" xlink:role="class">QLayout</db:link></db:term>
<db:listitem>
<db:para>The QLayout class is the base class of geometry managers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlayoutitem.xml" xlink:role="class">QLayoutItem</db:link></db:term>
<db:listitem>
<db:para>The QLayoutItem class provides an abstract item that a QLayout manipulates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsizepolicy.xml" xlink:role="class">QSizePolicy</db:link></db:term>
<db:listitem>
<db:para>The QSizePolicy class is a layout attribute describing horizontal and vertical resizing policy.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qspaceritem.xml" xlink:role="class">QSpacerItem</db:link></db:term>
<db:listitem>
<db:para>The QSpacerItem class provides blank space in a layout.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstackedlayout.xml" xlink:role="class">QStackedLayout</db:link></db:term>
<db:listitem>
<db:para>The QStackedLayout class provides a stack of widgets where only one widget is visible at a time.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstackedwidget.xml" xlink:role="class">QStackedWidget</db:link></db:term>
<db:listitem>
<db:para>The QStackedWidget class provides a stack of widgets where only one widget is visible at a time.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qvboxlayout.xml" xlink:role="class">QVBoxLayout</db:link></db:term>
<db:listitem>
<db:para>The QVBoxLayout class lines up widgets vertically.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qwidgetitem.xml" xlink:role="class">QWidgetItem</db:link></db:term>
<db:listitem>
<db:para>The QWidgetItem class is a layout item that represents a widget.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="horizontal-vertical-grid-and-form-layouts">
<db:title>Horizontal, Vertical, Grid, and Form Layouts</db:title>
<db:para>The easiest way to give your widgets a good layout is to use the built-in layout managers: <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link>, <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link>, <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>, and <db:link xlink:href="qformlayout.xml">QFormLayout</db:link>. These classes inherit from <db:link xlink:href="qlayout.xml">QLayout</db:link>, which in turn derives from <db:link xlink:href="qobject.xml">QObject</db:link> (not <db:link xlink:href="qwidget.xml">QWidget</db:link>). They take care of geometry management for a set of widgets. To create more complex layouts, you can nest layout managers inside each other.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> lays out widgets in a horizontal row, from left to right (or right to left for right-to-left languages).</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qhboxlayout-with-5-children.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> lays out widgets in a vertical column, from top to bottom.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qvboxlayout-with-5-children.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> lays out widgets in a two-dimensional grid. Widgets can occupy multiple cells.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qgridlayout-with-5-children.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> lays out widgets in a 2-column descriptive label- field style.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qformlayout-with-6-children.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="laying-out-widgets-in-code">
<db:title>Laying Out Widgets in Code</db:title>
<db:para>The following code creates a <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> that manages the geometry of five <db:link xlink:href="qpushbutton.xml">QPushButtons</db:link>, as shown on the first screenshot above:</db:para>
<db:programlisting language="cpp">    QWidget *window = new QWidget;
    QPushButton *button1 = new QPushButton(&quot;One&quot;);
    QPushButton *button2 = new QPushButton(&quot;Two&quot;);
    QPushButton *button3 = new QPushButton(&quot;Three&quot;);
    QPushButton *button4 = new QPushButton(&quot;Four&quot;);
    QPushButton *button5 = new QPushButton(&quot;Five&quot;);

    QHBoxLayout *layout = new QHBoxLayout(window);
    layout-&amp;gt;addWidget(button1);
    layout-&amp;gt;addWidget(button2);
    layout-&amp;gt;addWidget(button3);
    layout-&amp;gt;addWidget(button4);
    layout-&amp;gt;addWidget(button5);

    window-&amp;gt;show();
</db:programlisting>
<db:para>The code for <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> is identical, except the line where the layout is created. The code for <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> is a bit different, because we need to specify the row and column position of the child widget:</db:para>
<db:programlisting language="cpp">    QWidget *window = new QWidget;
    QPushButton *button1 = new QPushButton(&quot;One&quot;);
    QPushButton *button2 = new QPushButton(&quot;Two&quot;);
    QPushButton *button3 = new QPushButton(&quot;Three&quot;);
    QPushButton *button4 = new QPushButton(&quot;Four&quot;);
    QPushButton *button5 = new QPushButton(&quot;Five&quot;);

    QGridLayout *layout = new QGridLayout(window);
    layout-&amp;gt;addWidget(button1, 0, 0);
    layout-&amp;gt;addWidget(button2, 0, 1);
    layout-&amp;gt;addWidget(button3, 1, 0, 1, 2);
    layout-&amp;gt;addWidget(button4, 2, 0);
    layout-&amp;gt;addWidget(button5, 2, 1);

    window-&amp;gt;show();
</db:programlisting>
<db:para>The third <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> spans 2 columns. This is possible by specifying 2 as the fifth argument to <db:link xlink:href="qgridlayout.xml#addWidget-1">QGridLayout::addWidget</db:link>().</db:para>
<db:para><db:link xlink:href="qformlayout.xml">QFormLayout</db:link> will add two widgets on a row, commonly a <db:link xlink:href="qlabel.xml">QLabel</db:link> and a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> to create forms. Adding a <db:link xlink:href="qlabel.xml">QLabel</db:link> and a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> on the same row will set the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> as the <db:link xlink:href="qlabel.xml">QLabel</db:link>'s buddy. The following code will use the <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> to place three <db:link xlink:href="qpushbutton.xml">QPushButtons</db:link> and a corresponding <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> on a row.</db:para>
<db:programlisting language="cpp">    QWidget *window = new QWidget;
    QPushButton *button1 = new QPushButton(&quot;One&quot;);
    QLineEdit *lineEdit1 = new QLineEdit();
    QPushButton *button2 = new QPushButton(&quot;Two&quot;);
    QLineEdit *lineEdit2 = new QLineEdit();
    QPushButton *button3 = new QPushButton(&quot;Three&quot;);
    QLineEdit *lineEdit3 = new QLineEdit();

    QFormLayout *layout = new QFormLayout(window);
    layout-&amp;gt;addRow(button1, lineEdit1);
    layout-&amp;gt;addRow(button2, lineEdit2);
    layout-&amp;gt;addRow(button3, lineEdit3);

    window-&amp;gt;show();
</db:programlisting>
</db:section>
<db:section xml:id="tips-for-using-layouts">
<db:title>Tips for Using Layouts</db:title>
<db:para>When you use a layout, you do not need to pass a parent when constructing the child widgets. The layout will automatically reparent the widgets (using <db:link xlink:href="qwidget.xml#setParent">QWidget::setParent</db:link>()) so that they are children of the widget on which the layout is installed.</db:para>
<db:note>
<db:para>Widgets in a layout are children of the widget on which the layout is installed, <db:emphasis>not</db:emphasis> of the layout itself. Widgets can only have other widgets as parent, not layouts.</db:para>
</db:note>
<db:para>You can nest layouts using addLayout() on a layout; the inner layout then becomes a child of the layout it is inserted into.</db:para>
</db:section>
</db:section>
<db:section xml:id="adding-widgets-to-a-layout">
<db:title>Adding Widgets to a Layout</db:title>
<db:para>When you add widgets to a layout, the layout process works as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>All the widgets will initially be allocated an amount of space in accordance with their <db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::sizePolicy</db:link>() and <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>If any of the widgets have stretch factors set, with a value greater than zero, then they are allocated space in proportion to their stretch factor (explained below).</db:para>
</db:listitem>
<db:listitem>
<db:para>If any of the widgets have stretch factors set to zero they will only get more space if no other widgets want the space. Of these, space is allocated to widgets with an <db:link xlink:href="qsizepolicy.xml#Policy-enum">Expanding</db:link> size policy first.</db:para>
</db:listitem>
<db:listitem>
<db:para>Any widgets that are allocated less space than their minimum size (or minimum size hint if no minimum size is specified) are allocated this minimum size they require. (Widgets don't have to have a minimum size or minimum size hint in which case the stretch factor is their determining factor.)</db:para>
</db:listitem>
<db:listitem>
<db:para>Any widgets that are allocated more space than their maximum size are allocated the maximum size space they require. (Widgets do not have to have a maximum size in which case the stretch factor is their determining factor.)</db:para>
</db:listitem>
</db:orderedlist>
<db:section xml:id="stretch-factors">
<db:title>Stretch Factors</db:title>
<db:anchor xml:id="stretch-factor"/>
<db:para>Widgets are normally created without any stretch factor set. When they are laid out in a layout the widgets are given a share of space in accordance with their <db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::sizePolicy</db:link>() or their minimum size hint whichever is the greater. Stretch factors are used to change how much space widgets are given in proportion to one another.</db:para>
<db:para>If we have three widgets laid out using a <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> with no stretch factors set we will get a layout like this:</db:para>
<db:mediaobject>
<db:alt>Three widgets in a row</db:alt>
<db:imageobject>
<db:imagedata fileref="images/layout1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If we apply stretch factors to each widget, they will be laid out in proportion (but never less than their minimum size hint), e.g.</db:para>
<db:mediaobject>
<db:alt>Three widgets with different stretch factors in a row</db:alt>
<db:imageobject>
<db:imagedata fileref="images/layout2.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
<db:section xml:id="custom-widgets-in-layouts">
<db:title>Custom Widgets in Layouts</db:title>
<db:para>When you make your own widget class, you should also communicate its layout properties. If the widget uses one of Qt's layouts, this is already taken care of. If the widget does not have any child widgets, or uses manual layout, you can change the behavior of the widget using any or all of the following mechanisms:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Reimplement <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>() to return the preferred size of the widget.</db:para>
</db:listitem>
<db:listitem>
<db:para>Reimplement <db:link xlink:href="qwidget.xml#minimumSizeHint-prop">QWidget::minimumSizeHint</db:link>() to return the smallest size the widget can have.</db:para>
</db:listitem>
<db:listitem>
<db:para>Call <db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::setSizePolicy</db:link>() to specify the space requirements of the widget.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Call <db:link xlink:href="qwidget.xml#updateGeometry">QWidget::updateGeometry</db:link>() whenever the size hint, minimum size hint or size policy changes. This will cause a layout recalculation. Multiple consecutive calls to <db:link xlink:href="qwidget.xml#updateGeometry">QWidget::updateGeometry</db:link>() will only cause one layout recalculation.</db:para>
<db:para>If the preferred height of your widget depends on its actual width (e.g., a label with automatic word-breaking), set the <db:link xlink:href="qsizepolicy.xml#hasHeightForWidth">height-for-width</db:link> flag in the widget's <db:link xlink:href="qwidget.xml#sizePolicy-prop">size policy</db:link> and reimplement <db:link xlink:href="qwidget.xml#heightForWidth">QWidget::heightForWidth</db:link>().</db:para>
<db:para>Even if you implement <db:link xlink:href="qwidget.xml#heightForWidth">QWidget::heightForWidth</db:link>(), it is still a good idea to provide a reasonable sizeHint().</db:para>
<db:para>For further guidance when implementing these functions, see the <db:emphasis>Qt Quarterly</db:emphasis> article <db:link xlink:href="http://doc.qt.io/archives/qq/qq04-height-for-width.html">Trading Height for Width</db:link>.</db:para>
</db:section>
<db:section xml:id="layout-issues">
<db:title>Layout Issues</db:title>
<db:para>The use of rich text in a label widget can introduce some problems to the layout of its parent widget. Problems occur due to the way rich text is handled by Qt's layout managers when the label is word wrapped.</db:para>
<db:para>In certain cases the parent layout is put into QLayout::FreeResize mode, meaning that it will not adapt the layout of its contents to fit inside small sized windows, or even prevent the user from making the window too small to be usable. This can be overcome by subclassing the problematic widgets, and implementing suitable <db:link xlink:href="qwidget.xml#sizeHint-prop">sizeHint</db:link>() and <db:link xlink:href="qwidget.xml#minimumSizeHint-prop">minimumSizeHint</db:link>() functions.</db:para>
<db:para>In some cases, it is relevant when a layout is added to a widget. When you set the widget of a <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> or a <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> (with <db:link xlink:href="qdockwidget.xml#setWidget">QDockWidget::setWidget</db:link>() and <db:link xlink:href="qscrollarea.xml#setWidget">QScrollArea::setWidget</db:link>()), the layout must already have been set on the widget. If not, the widget will not be visible.</db:para>
</db:section>
<db:section xml:id="manual-layout">
<db:title>Manual Layout</db:title>
<db:para>If you are making a one-of-a-kind special layout, you can also make a custom widget as described above. Reimplement <db:link xlink:href="qwidget.xml#resizeEvent">QWidget::resizeEvent</db:link>() to calculate the required distribution of sizes and call <db:link xlink:href="qwidget.xml#geometry-prop">setGeometry</db:link>() on each child.</db:para>
<db:para>The widget will get an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::LayoutRequest</db:link> when the layout needs to be recalculated. Reimplement <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>() to handle <db:link xlink:href="qevent.xml#Type-enum">QEvent::LayoutRequest</db:link> events.</db:para>
</db:section>
<db:section xml:id="how-to-write-a-custom-layout-manager">
<db:title>How to Write A Custom Layout Manager</db:title>
<db:para>An alternative to manual layout is to write your own layout manager by subclassing <db:link xlink:href="qlayout.xml">QLayout</db:link>. The <db:link xlink:href="qtwidgets-layouts-borderlayout-example.xml">Border Layout</db:link> and <db:link xlink:href="qtwidgets-layouts-flowlayout-example.xml">Flow Layout</db:link> examples show how to do this.</db:para>
<db:para>Here we present an example in detail. The CardLayout class is inspired by the Java layout manager of the same name. It lays out the items (widgets or nested layouts) on top of each other, each item offset by <db:link xlink:href="qlayout.xml#spacing-prop">QLayout::spacing</db:link>().</db:para>
<db:para>To write your own layout class, you must define the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A data structure to store the items handled by the layout. Each item is a <db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link>. We will use a <db:link xlink:href="qlist.xml">QList</db:link> in this example.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml#addItem">addItem</db:link>(), how to add items to the layout.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml#setGeometry">setGeometry</db:link>(), how to perform the layout.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlayoutitem.xml#sizeHint">sizeHint</db:link>(), the preferred size of the layout.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml#itemAt">itemAt</db:link>(), how to iterate over the layout.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml#takeAt">takeAt</db:link>(), how to remove items from the layout.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In most cases, you will also implement <db:link xlink:href="qlayout.xml#minimumSize">minimumSize</db:link>().</db:para>
<db:section xml:id="the-header-file-card-op-op-h">
<db:title>The Header File (card.h)</db:title>
<db:programlisting language="cpp">#ifndef CARD_H
#define CARD_H

#include &amp;lt;QtWidgets&amp;gt;
#include &amp;lt;QList&amp;gt;

class CardLayout : public QLayout
{
public:
    CardLayout(QWidget *parent, int dist): QLayout(parent, 0, dist) {}
    CardLayout(QLayout *parent, int dist): QLayout(parent, dist) {}
    CardLayout(int dist): QLayout(dist) {}
    ~CardLayout();

    void addItem(QLayoutItem *item) override;
    QSize sizeHint() const override;
    QSize minimumSize() const override;
    int count() const override;
    QLayoutItem *itemAt(int) const override;
    QLayoutItem *takeAt(int) override;
    void setGeometry(const QRect &amp;amp;rect) override;

private:
    QList&amp;lt;QLayoutItem*&amp;gt; list;
};
#endif
</db:programlisting>
</db:section>
<db:section xml:id="the-implementation-file-card-op-op-cpp">
<db:title>The Implementation File (card.cpp)</db:title>
<db:programlisting language="cpp">//#include &quot;card.h&quot;
</db:programlisting>
<db:para>First we define count() to fetch the number of items in the list.</db:para>
<db:programlisting language="cpp">int CardLayout::count() const
{
    // QList::size() returns the number of QLayoutItems in the list
    return list.size();
}
</db:programlisting>
<db:para>Then we define two functions that iterate over the layout: itemAt() and takeAt(). These functions are used internally by the layout system to handle deletion of widgets. They are also available for application programmers.</db:para>
<db:para>itemAt() returns the item at the given index. takeAt() removes the item at the given index, and returns it. In this case we use the list index as the layout index. In other cases where we have a more complex data structure, we may have to spend more effort defining a linear order for the items.</db:para>
<db:programlisting language="cpp">QLayoutItem *CardLayout::itemAt(int idx) const
{
    // QList::value() performs index checking, and returns 0 if we are
    // outside the valid range
    return list.value(idx);
}

QLayoutItem *CardLayout::takeAt(int idx)
{
    // QList::take does not do index checking
    return idx &amp;gt;= 0 &amp;amp;&amp;amp; idx &amp;lt; list.size() ? list.takeAt(idx) : 0;
}
</db:programlisting>
<db:para>addItem() implements the default placement strategy for layout items. This function must be implemented. It is used by QLayout::add(), by the <db:link xlink:href="qlayout.xml">QLayout</db:link> constructor that takes a layout as parent. If your layout has advanced placement options that require parameters, you must provide extra access functions such as the row and column spanning overloads of <db:link xlink:href="qgridlayout.xml#addItem">QGridLayout::addItem</db:link>(), <db:link xlink:href="qgridlayout.xml#addWidget-1">QGridLayout::addWidget</db:link>(), and <db:link xlink:href="qgridlayout.xml#addLayout">QGridLayout::addLayout</db:link>().</db:para>
<db:programlisting language="cpp">void CardLayout::addItem(QLayoutItem *item)
{
    list.append(item);
}
</db:programlisting>
<db:para>The layout takes over responsibility of the items added. Since <db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link> does not inherit <db:link xlink:href="qobject.xml">QObject</db:link>, we must delete the items manually. In the destructor, we remove each item from the list using takeAt(), and then delete it.</db:para>
<db:programlisting language="cpp">CardLayout::~CardLayout()
{
     QLayoutItem *item;
     while ((item = takeAt(0)))
         delete item;
}
</db:programlisting>
<db:para>The setGeometry() function actually performs the layout. The rectangle supplied as an argument does not include margin(). If relevant, use spacing() as the distance between items.</db:para>
<db:programlisting language="cpp">void CardLayout::setGeometry(const QRect &amp;amp;r)
{
    QLayout::setGeometry(r);

    if (list.size() == 0)
        return;

    int w = r.width() - (list.count() - 1) * spacing();
    int h = r.height() - (list.count() - 1) * spacing();
    int i = 0;
    while (i &amp;lt; list.size()) {
        QLayoutItem *o = list.at(i);
        QRect geom(r.x() + i * spacing(), r.y() + i * spacing(), w, h);
        o-&amp;gt;setGeometry(geom);
        ++i;
    }
}
</db:programlisting>
<db:para>sizeHint() and minimumSize() are normally very similar in implementation. The sizes returned by both functions should include spacing(), but not margin().</db:para>
<db:programlisting language="cpp">QSize CardLayout::sizeHint() const
{
    QSize s(0,0);
    int n = list.count();
    if (n &amp;gt; 0)
        s = QSize(100,70); //start with a nice default size
    int i = 0;
    while (i &amp;lt; n) {
        QLayoutItem *o = list.at(i);
        s = s.expandedTo(o-&amp;gt;sizeHint());
        ++i;
    }
    return s + n*QSize(spacing(), spacing());
}

QSize CardLayout::minimumSize() const
{
    QSize s(0,0);
    int n = list.count();
    int i = 0;
    while (i &amp;lt; n) {
        QLayoutItem *o = list.at(i);
        s = s.expandedTo(o-&amp;gt;minimumSize());
        ++i;
    }
    return s + n*QSize(spacing(), spacing());
}
</db:programlisting>
</db:section>
<db:section xml:id="further-notes">
<db:title>Further Notes</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>This custom layout does not handle height for width.</db:para>
</db:listitem>
<db:listitem>
<db:para>We ignore <db:link xlink:href="qlayoutitem.xml#isEmpty">QLayoutItem::isEmpty</db:link>(); this means that the layout will treat hidden widgets as visible.</db:para>
</db:listitem>
<db:listitem>
<db:para>For complex layouts, speed can be greatly increased by caching calculated values. In that case, implement <db:link xlink:href="qlayoutitem.xml#invalidate">QLayoutItem::invalidate</db:link>() to mark the cached data is dirty.</db:para>
</db:listitem>
<db:listitem>
<db:para>Calling <db:link xlink:href="qlayoutitem.xml#sizeHint">QLayoutItem::sizeHint</db:link>(), etc. may be expensive. So, you should store the value in a local variable if you need it again later within in the same function.</db:para>
</db:listitem>
<db:listitem>
<db:para>You should not call <db:link xlink:href="qlayoutitem.xml#setGeometry">QLayoutItem::setGeometry</db:link>() twice on the same item in the same function. This call can be very expensive if the item has several child widgets, because the layout manager must do a complete layout every time. Instead, calculate the geometry and then set it. (This does not only apply to layouts, you should do the same if you implement your own resizeEvent(), for example.)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="layout-examples">
<db:title>Layout Examples</db:title>
<db:para>Many Qt Widgets <db:link xlink:href="examples-widgets.xml">examples</db:link> already use layouts, however, several examples exist to showcase various layouts.</db:para>
<db:variablelist role="examples-layout">
<db:varlistentry>
<db:term><db:link xlink:href="tutorials-addressbook.xml" xlink:role="page">Address Book Tutorial</db:link></db:term>
<db:listitem>
<db:para>An introduction to GUI programming, showing how to put together a simple yet fully-functioning application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-layouts-borderlayout-example.xml" xlink:role="page">Border Layout Example</db:link></db:term>
<db:listitem>
<db:para>Shows how to arrange child widgets along a border.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-widgets-calculator-example.xml" xlink:role="page">Calculator Example</db:link></db:term>
<db:listitem>
<db:para>The example shows how to use signals and slots to implement the functionality of a calculator widget, and how to use QGridLayout to place child widgets in a grid.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-widgets-calendarwidget-example.xml" xlink:role="page">Calendar Widget Example</db:link></db:term>
<db:listitem>
<db:para>The Calendar Widget example shows use of QCalendarWidget.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-echoplugin-example.xml" xlink:role="page">Echo Plugin Example</db:link></db:term>
<db:listitem>
<db:para>This example shows how to create a Qt plugin.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-layouts-flowlayout-example.xml" xlink:role="page">Flow Layout Example</db:link></db:term>
<db:listitem>
<db:para>Shows how to arrange widgets for different window sizes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-painting-imagecomposition-example.xml" xlink:role="page">Image Composition Example</db:link></db:term>
<db:listitem>
<db:para>Shows how composition modes work in QPainter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-mainwindows-menus-example.xml" xlink:role="page">Menus Example</db:link></db:term>
<db:listitem>
<db:para>The Menus example demonstrates how menus can be used in a main window application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-itemviews-simpletreemodel-example.xml" xlink:role="page">Simple Tree Model Example</db:link></db:term>
<db:listitem>
<db:para>The Simple Tree Model example shows how to use a hierarchical model with Qt's standard view classes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-animation-sub-attaq-example.xml" xlink:role="page">Sub-Attaq</db:link></db:term>
<db:listitem>
<db:para>This example shows Qt's ability to combine the animation framework and the state machine framework to create a game.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
