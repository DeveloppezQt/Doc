<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlStreamReader Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> class provides a fast parser for reading well-formed XML via a simple streaming API.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlStreamReader</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlStreamReader is part of <db:simplelist><db:member>xml-tools</db:member><db:member>qtserialization</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> provides a simple streaming API to parse well-formed XML. It is an alternative to first loading the complete XML into a DOM tree (see <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link>). <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> reads data either from a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> (see <db:link xlink:href="qxmlstreamreader.xml#setDevice">setDevice</db:link>()), or from a raw <db:link xlink:href="qbytearray.xml">QByteArray</db:link> (see <db:link xlink:href="qxmlstreamreader.xml#addData">addData</db:link>()).</db:para>
<db:para>Qt provides <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> for writing XML.</db:para>
<db:para>The basic concept of a stream reader is to report an XML document as a stream of tokens, similar to SAX. The main difference between <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> and SAX is <db:emphasis>how</db:emphasis> these XML tokens are reported. With SAX, the application must provide handlers (callback functions) that receive so-called XML <db:emphasis>events</db:emphasis> from the parser at the parser's convenience. With <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link>, the application code itself drives the loop and pulls <db:emphasis>tokens</db:emphasis> from the reader, one after another, as it needs them. This is done by calling <db:link xlink:href="qxmlstreamreader.xml#readNext">readNext</db:link>(), where the reader reads from the input stream until it completes the next token, at which point it returns the <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>(). A set of convenient functions including <db:link xlink:href="qxmlstreamreader.xml#isStartElement">isStartElement</db:link>() and <db:link xlink:href="qxmlstreamreader.xml#text">text</db:link>() can then be used to examine the token to obtain information about what has been read. The big advantage of this <db:emphasis>pulling</db:emphasis> approach is the possibility to build recursive descent parsers with it, meaning you can split your XML parsing code easily into different methods or classes. This makes it easy to keep track of the application's own state when parsing XML.</db:para>
<db:para>A typical loop with <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> looks like this:</db:para>
<db:programlisting language="cpp">  QXmlStreamReader xml;
  ...
  while (!xml.atEnd()) {
        xml.readNext();
        ... // do processing
  }
  if (xml.hasError()) {
        ... // do error handling
  }
</db:programlisting>
<db:para><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> is a well-formed XML 1.0 parser that does <db:emphasis>not</db:emphasis> include external parsed entities. As long as no error occurs, the application code can thus be assured that the data provided by the stream reader satisfies the W3C's criteria for well-formed XML. For example, you can be certain that all tags are indeed nested and closed properly, that references to internal entities have been replaced with the correct replacement text, and that attributes have been normalized or added according to the internal subset of the DTD.</db:para>
<db:para>If an error occurs while parsing, <db:link xlink:href="qxmlstreamreader.xml#atEnd">atEnd</db:link>() and <db:link xlink:href="qxmlstreamreader.xml#hasError">hasError</db:link>() return true, and <db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>() returns the error that occurred. The functions <db:link xlink:href="qxmlstreamreader.xml#errorString">errorString</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#lineNumber">lineNumber</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#columnNumber">columnNumber</db:link>(), and <db:link xlink:href="qxmlstreamreader.xml#characterOffset">characterOffset</db:link>() are for constructing an appropriate error or warning message. To simplify application code, <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> contains a <db:link xlink:href="qxmlstreamreader.xml#raiseError">raiseError</db:link>() mechanism that lets you raise custom errors that trigger the same error handling described.</db:para>
<db:para>The <db:link xlink:href="qtxml-streambookmarks-example.xml">QXmlStream Bookmarks Example</db:link> illustrates how to use the recursive descent technique to read an XML bookmark file (XBEL) with a stream reader.</db:para>
<db:section xml:id="namespaces">
<db:title>Namespaces</db:title>
<db:para>QXmlStream understands and resolves XML namespaces. E.g. in case of a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link>, <db:link xlink:href="qxmlstreamreader.xml#namespaceUri">namespaceUri</db:link>() returns the namespace the element is in, and <db:link xlink:href="qxmlstreamreader.xml#name">name</db:link>() returns the element's <db:emphasis>local</db:emphasis> name. The combination of <db:link xlink:href="qxmlstreamreader.xml#namespaceUri">namespaceUri</db:link> and name uniquely identifies an element. If a namespace prefix was not declared in the XML entities parsed by the reader, the <db:link xlink:href="qxmlstreamreader.xml#namespaceUri">namespaceUri</db:link> is empty.</db:para>
<db:para>If you parse XML data that does not utilize namespaces according to the XML specification or doesn't use namespaces at all, you can use the element's <db:link xlink:href="qxmlstreamreader.xml#qualifiedName">qualifiedName</db:link>() instead. A qualified name is the element's <db:link xlink:href="qxmlstreamreader.xml#prefix">prefix</db:link>() followed by colon followed by the element's local <db:link xlink:href="qxmlstreamreader.xml#name">name</db:link>() - exactly like the element appears in the raw XML data. Since the mapping <db:link xlink:href="qxmlstreamreader.xml#namespaceUri">namespaceUri</db:link> to prefix is neither unique nor universal, <db:link xlink:href="qxmlstreamreader.xml#qualifiedName">qualifiedName</db:link>() should be avoided for namespace-compliant XML data.</db:para>
<db:para>In order to parse standalone documents that do use undeclared namespace prefixes, you can turn off namespace processing completely with the <db:link xlink:href="qxmlstreamreader.xml#namespaceProcessing-prop">namespaceProcessing</db:link> property.</db:para>
</db:section>
<db:section xml:id="incremental-parsing">
<db:title>Incremental Parsing</db:title>
<db:para><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> is an incremental parser. It can handle the case where the document can't be parsed all at once because it arrives in chunks (e.g. from multiple files, or over a network connection). When the reader runs out of data before the complete document has been parsed, it reports a <db:link xlink:href="qxmlstreamreader.xml#Error-enum">PrematureEndOfDocumentError</db:link>. When more data arrives, either because of a call to <db:link xlink:href="qxmlstreamreader.xml#addData">addData</db:link>() or because more data is available through the network <db:link xlink:href="qxmlstreamreader.xml#device">device</db:link>(), the reader recovers from the <db:link xlink:href="qxmlstreamreader.xml#Error-enum">PrematureEndOfDocumentError</db:link> error and continues parsing the new data with the next call to <db:link xlink:href="qxmlstreamreader.xml#readNext">readNext</db:link>().</db:para>
<db:para>For example, if your application reads data from the network using a <db:link xlink:href="qnetworkaccessmanager.xml">network access manager</db:link>, you would issue a <db:link xlink:href="qnetworkrequest.xml">network request</db:link> to the manager and receive a <db:link xlink:href="qnetworkreply.xml">network reply</db:link> in return. Since a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> is a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>, you connect its <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() signal to a custom slot, e.g. slotReadyRead() in the code snippet shown in the discussion for <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>. In this slot, you read all available data with <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>() and pass it to the XML stream reader using <db:link xlink:href="qxmlstreamreader.xml#addData">addData</db:link>(). Then you call your custom parsing function that reads the XML events from the reader.</db:para>
</db:section>
<db:section xml:id="performance-and-memory-consumption">
<db:title>Performance and Memory Consumption</db:title>
<db:para><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> is memory-conservative by design, since it doesn't store the entire XML document tree in memory, but only the current token at the time it is reported. In addition, <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> avoids the many small string allocations that it normally takes to map an XML document to a convenient and Qt-ish API. It does this by reporting all string data as <db:link xlink:href="qstringview.xml">QStringView</db:link> rather than real <db:link xlink:href="qstring.xml">QString</db:link> objects. Calling <db:link xlink:href="qstringview.xml#toString">toString</db:link>() on any of those objects returns an equivalent real <db:link xlink:href="qstring.xml">QString</db:link> object.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QXmlStreamReader::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnexpectedElementError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CustomError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotWellFormedError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PrematureEndOfDocumentError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies different error cases</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::CustomError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A custom error has been raised with <db:link xlink:href="qxmlstreamreader.xml#raiseError">raiseError</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::NotWellFormedError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The parser internally raised an error due to the read XML not being well-formed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::PrematureEndOfDocumentError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The input stream ended before a well-formed XML document was parsed. Recovery from this error is possible if more XML arrives in the stream, either by calling <db:link xlink:href="qxmlstreamreader.xml#addData">addData</db:link>() or by waiting for it to arrive on the <db:link xlink:href="qxmlstreamreader.xml#device">device</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::UnexpectedElementError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The parser encountered an element that was different to those it expected.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ReadElementTextBehaviour-enum">
<db:title>enum QXmlStreamReader::ReadElementTextBehaviour</db:title>
<db:enumsynopsis>
<db:enumname>ReadElementTextBehaviour</db:enumname>
<db:enumitem>
<db:enumidentifier>ErrorOnUnexpectedElement</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IncludeChildElements</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SkipChildElements</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the different behaviours of <db:link xlink:href="qxmlstreamreader.xml#readElementText">readElementText</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::ErrorOnUnexpectedElement</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Raise an <db:link xlink:href="qxmlstreamreader.xml#Error-enum">UnexpectedElementError</db:link> and return what was read so far when a child element is encountered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::IncludeChildElements</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Recursively include the text from child elements.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::SkipChildElements</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Skip child elements.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TokenType-enum">
<db:title>enum QXmlStreamReader::TokenType</db:title>
<db:enumsynopsis>
<db:enumname>TokenType</db:enumname>
<db:enumitem>
<db:enumidentifier>NoToken</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Invalid</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StartDocument</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EndDocument</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StartElement</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EndElement</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Characters</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Comment</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DTD</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EntityReference</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProcessingInstruction</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the type of token the reader just read.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::NoToken</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The reader has not yet read anything.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::Invalid</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An error has occurred, reported in <db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>() and <db:link xlink:href="qxmlstreamreader.xml#errorString">errorString</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::StartDocument</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The reader reports the XML version number in <db:link xlink:href="qxmlstreamreader.xml#documentVersion">documentVersion</db:link>(), and the encoding as specified in the XML document in <db:link xlink:href="qxmlstreamreader.xml#documentEncoding">documentEncoding</db:link>(). If the document is declared standalone, <db:link xlink:href="qxmlstreamreader.xml#isStandaloneDocument">isStandaloneDocument</db:link>() returns true; otherwise it returns false.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::EndDocument</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The reader reports the end of the document.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::StartElement</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The reader reports the start of an element with <db:link xlink:href="qxmlstreamreader.xml#namespaceUri">namespaceUri</db:link>() and <db:link xlink:href="qxmlstreamreader.xml#name">name</db:link>(). Empty elements are also reported as StartElement, followed directly by EndElement. The convenience function <db:link xlink:href="qxmlstreamreader.xml#readElementText">readElementText</db:link>() can be called to concatenate all content until the corresponding EndElement. Attributes are reported in <db:link xlink:href="qxmlstreamreader.xml#attributes">attributes</db:link>(), namespace declarations in <db:link xlink:href="qxmlstreamreader.xml#namespaceDeclarations">namespaceDeclarations</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::EndElement</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The reader reports the end of an element with <db:link xlink:href="qxmlstreamreader.xml#namespaceUri">namespaceUri</db:link>() and <db:link xlink:href="qxmlstreamreader.xml#name">name</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::Characters</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The reader reports characters in <db:link xlink:href="qxmlstreamreader.xml#text">text</db:link>(). If the characters are all white-space, <db:link xlink:href="qxmlstreamreader.xml#isWhitespace">isWhitespace</db:link>() returns true. If the characters stem from a CDATA section, <db:link xlink:href="qxmlstreamreader.xml#isCDATA">isCDATA</db:link>() returns true.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::Comment</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The reader reports a comment in <db:link xlink:href="qxmlstreamreader.xml#text">text</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::DTD</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The reader reports a DTD in <db:link xlink:href="qxmlstreamreader.xml#text">text</db:link>(), notation declarations in <db:link xlink:href="qxmlstreamreader.xml#notationDeclarations">notationDeclarations</db:link>(), and entity declarations in <db:link xlink:href="qxmlstreamreader.xml#entityDeclarations">entityDeclarations</db:link>(). Details of the DTD declaration are reported in in <db:link xlink:href="qxmlstreamreader.xml#dtdName">dtdName</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#dtdPublicId">dtdPublicId</db:link>(), and <db:link xlink:href="qxmlstreamreader.xml#dtdSystemId">dtdSystemId</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::EntityReference</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>The reader reports an entity reference that could not be resolved. The name of the reference is reported in <db:link xlink:href="qxmlstreamreader.xml#name">name</db:link>(), the replacement text in <db:link xlink:href="qxmlstreamreader.xml#text">text</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link></db:emphasis>::ProcessingInstruction</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The reader reports a processing instruction in <db:link xlink:href="qxmlstreamreader.xml#processingInstructionTarget">processingInstructionTarget</db:link>() and <db:link xlink:href="qxmlstreamreader.xml#processingInstructionData">processingInstructionData</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="namespaceProcessing-prop">
<db:title>namespaceProcessing : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>namespaceProcessing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">namespaceProcessing</db:synopsisinfo>
<db:synopsisinfo role="setter">setNamespaceProcessing</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the namespace-processing flag of the stream reader.</db:para>
<db:para>This property controls whether or not the stream reader processes namespaces. If enabled, the reader processes namespaces, otherwise it does not.</db:para>
<db:para>By default, namespace-processing is enabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">namespaceProcessing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setNamespaceProcessing</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlStreamReader">
<db:title>QXmlStreamReader::QXmlStreamReader()</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamReader</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamReader()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a stream reader.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#addData">addData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QXmlStreamReader-1">
<db:title>[explicit] QXmlStreamReader::QXmlStreamReader(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamReader</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamReader(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new stream reader that reads from <db:code role="parameter">device</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QXmlStreamReader-2">
<db:title>[explicit] QXmlStreamReader::QXmlStreamReader(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamReader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamReader(const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new stream reader that reads from <db:code role="parameter">data</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#addData">addData</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QXmlStreamReader">
<db:title>QXmlStreamReader::~QXmlStreamReader()</db:title>
<db:destructorsynopsis>
<db:methodname>~QXmlStreamReader</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QXmlStreamReader()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the reader.</db:para>
</db:section>
<db:section xml:id="addData">
<db:title>void QXmlStreamReader::addData(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addData(const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds more <db:code role="parameter">data</db:code> for the reader to read. This function does nothing if the reader has a <db:link xlink:href="qxmlstreamreader.xml#device">device</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#readNext">readNext</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addExtraNamespaceDeclaration">
<db:title>void QXmlStreamReader::addExtraNamespaceDeclaration(const QXmlStreamNamespaceDeclaration &amp;<db:emphasis>extraNamespaceDeclaration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addExtraNamespaceDeclaration</db:methodname>
<db:methodparam>
<db:type>const QXmlStreamNamespaceDeclaration &amp;</db:type>
<db:parameter>extraNamespaceDeclaration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addExtraNamespaceDeclaration(const QXmlStreamNamespaceDeclaration &amp;extraNamespaceDeclaration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds an <db:code role="parameter">extraNamespaceDeclaration</db:code>. The declaration will be valid for children of the current element, or - should the function be called before any elements are read - for the entire XML document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#namespaceDeclarations">namespaceDeclarations</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#addExtraNamespaceDeclarations">addExtraNamespaceDeclarations</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#namespaceProcessing-prop">setNamespaceProcessing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addExtraNamespaceDeclarations">
<db:title>void QXmlStreamReader::addExtraNamespaceDeclarations(const QXmlStreamNamespaceDeclarations &amp;<db:emphasis>extraNamespaceDeclarations</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addExtraNamespaceDeclarations</db:methodname>
<db:methodparam>
<db:type>const QXmlStreamNamespaceDeclarations &amp;</db:type>
<db:parameter>extraNamespaceDeclarations</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addExtraNamespaceDeclarations(const QXmlStreamNamespaceDeclarations &amp;extraNamespaceDeclarations)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a vector of declarations specified by <db:code role="parameter">extraNamespaceDeclarations</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#namespaceDeclarations">namespaceDeclarations</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#addExtraNamespaceDeclaration">addExtraNamespaceDeclaration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atEnd">
<db:title>bool QXmlStreamReader::atEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the reader has read until the end of the XML document, or if an <db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>() has occurred and reading has been aborted. Otherwise, it returns false.</db:para>
<db:para>When atEnd() and <db:link xlink:href="qxmlstreamreader.xml#hasError">hasError</db:link>() return true and <db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>() returns <db:link xlink:href="qxmlstreamreader.xml#Error-enum">PrematureEndOfDocumentError</db:link>, it means the XML has been well-formed so far, but a complete XML document has not been parsed. The next chunk of XML can be added with <db:link xlink:href="qxmlstreamreader.xml#addData">addData</db:link>(), if the XML is being read from a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, or by waiting for more data to arrive if the XML is being read from a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>. Either way, atEnd() will return false once more data is available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#hasError">hasError</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#atEnd">QIODevice::atEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributes">
<db:title>QXmlStreamAttributes QXmlStreamReader::attributes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlStreamAttributes</db:type>
<db:methodname>attributes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamAttributes attributes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attributes of a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link>.</db:para>
</db:section>
<db:section xml:id="characterOffset">
<db:title>qint64 QXmlStreamReader::characterOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>characterOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 characterOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current character offset, starting with 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#lineNumber">lineNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#columnNumber">columnNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QXmlStreamReader::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes any <db:link xlink:href="qxmlstreamreader.xml#device">device</db:link>() or data from the reader and resets its internal state to the initial state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#addData">addData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnNumber">
<db:title>qint64 QXmlStreamReader::columnNumber() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>columnNumber</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 columnNumber() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current column number, starting with 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#lineNumber">lineNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#characterOffset">characterOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QXmlStreamReader::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current device associated with the <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link>, or nullptr if no device has been assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentEncoding">
<db:title>QStringView QXmlStreamReader::documentEncoding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>documentEncoding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView documentEncoding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() is <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartDocument</db:link>, this function returns the encoding string as specified in the XML declaration. Otherwise an empty string is returned.</db:para>
</db:section>
<db:section xml:id="documentVersion">
<db:title>QStringView QXmlStreamReader::documentVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>documentVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView documentVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() is <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartDocument</db:link>, this function returns the version string as specified in the XML declaration. Otherwise an empty string is returned.</db:para>
</db:section>
<db:section xml:id="dtdName">
<db:title>QStringView QXmlStreamReader::dtdName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>dtdName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView dtdName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() is <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">DTD</db:link>, this function returns the DTD's name. Otherwise an empty string is returned.</db:para>
</db:section>
<db:section xml:id="dtdPublicId">
<db:title>QStringView QXmlStreamReader::dtdPublicId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>dtdPublicId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView dtdPublicId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() is <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">DTD</db:link>, this function returns the DTD's public identifier. Otherwise an empty string is returned.</db:para>
</db:section>
<db:section xml:id="dtdSystemId">
<db:title>QStringView QXmlStreamReader::dtdSystemId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>dtdSystemId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView dtdSystemId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() is <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">DTD</db:link>, this function returns the DTD's system identifier. Otherwise an empty string is returned.</db:para>
</db:section>
<db:section xml:id="entityDeclarations">
<db:title>QXmlStreamEntityDeclarations QXmlStreamReader::entityDeclarations() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlStreamEntityDeclarations</db:type>
<db:methodname>entityDeclarations</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamEntityDeclarations entityDeclarations() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() is <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">DTD</db:link>, this function returns the DTD's unparsed (external) entity declarations. Otherwise an empty vector is returned.</db:para>
<db:para>The <db:link xlink:href="qxmlstreamentitydeclaration.xml#QXmlStreamEntityDeclarations-typedef">QXmlStreamEntityDeclarations</db:link> class is defined to be a <db:link xlink:href="qlist.xml">QList</db:link> of <db:link xlink:href="qxmlstreamentitydeclaration.xml">QXmlStreamEntityDeclaration</db:link>.</db:para>
</db:section>
<db:section xml:id="entityExpansionLimit">
<db:title>[since 5.15] int QXmlStreamReader::entityExpansionLimit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>entityExpansionLimit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int entityExpansionLimit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum amount of characters a single entity is allowed to expand into. If a single entity expands past the given limit, the document is not considered well formed.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#setEntityExpansionLimit">setEntityExpansionLimit</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="entityResolver">
<db:title>QXmlStreamEntityResolver *QXmlStreamReader::entityResolver() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlStreamEntityResolver *</db:type>
<db:methodname>entityResolver</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamEntityResolver * entityResolver() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the entity resolver, or nullptr if there is no entity resolver.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#setEntityResolver">setEntityResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QXmlStreamReader::Error QXmlStreamReader::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlStreamReader::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamReader::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the current error, or <db:link xlink:href="qxmlstreamreader.xml#Error-enum">NoError</db:link> if no error occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#raiseError">raiseError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QXmlStreamReader::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error message that was set with <db:link xlink:href="qxmlstreamreader.xml#raiseError">raiseError</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#lineNumber">lineNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#columnNumber">columnNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#characterOffset">characterOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasError">
<db:title>bool QXmlStreamReader::hasError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if an error has occurred, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCDATA">
<db:title>bool QXmlStreamReader::isCDATA() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCDATA</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCDATA() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the reader reports characters that stem from a CDATA section; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#isCharacters">isCharacters</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCharacters">
<db:title>bool QXmlStreamReader::isCharacters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCharacters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCharacters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() equals <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">Characters</db:link>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#isWhitespace">isWhitespace</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#isCDATA">isCDATA</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isComment">
<db:title>bool QXmlStreamReader::isComment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isComment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isComment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() equals <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">Comment</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isDTD">
<db:title>bool QXmlStreamReader::isDTD() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDTD</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDTD() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() equals <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">DTD</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isEndDocument">
<db:title>bool QXmlStreamReader::isEndDocument() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEndDocument</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEndDocument() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() equals <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EndDocument</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isEndElement">
<db:title>bool QXmlStreamReader::isEndElement() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEndElement</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEndElement() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() equals <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EndElement</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isEntityReference">
<db:title>bool QXmlStreamReader::isEntityReference() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEntityReference</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEntityReference() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() equals <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EntityReference</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isProcessingInstruction">
<db:title>bool QXmlStreamReader::isProcessingInstruction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isProcessingInstruction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isProcessingInstruction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() equals <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">ProcessingInstruction</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isStandaloneDocument">
<db:title>bool QXmlStreamReader::isStandaloneDocument() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isStandaloneDocument</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isStandaloneDocument() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this document has been declared standalone in the XML declaration; otherwise returns false.</db:para>
<db:para>If no XML declaration has been parsed, this function returns false.</db:para>
</db:section>
<db:section xml:id="isStartDocument">
<db:title>bool QXmlStreamReader::isStartDocument() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isStartDocument</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isStartDocument() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() equals <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartDocument</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isStartElement">
<db:title>bool QXmlStreamReader::isStartElement() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isStartElement</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isStartElement() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() equals <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isWhitespace">
<db:title>bool QXmlStreamReader::isWhitespace() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWhitespace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWhitespace() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the reader reports characters that only consist of white-space; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#isCharacters">isCharacters</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineNumber">
<db:title>qint64 QXmlStreamReader::lineNumber() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>lineNumber</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 lineNumber() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current line number, starting with 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#columnNumber">columnNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#characterOffset">characterOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QStringView QXmlStreamReader::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the local name of a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link>, <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EndElement</db:link>, or an <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EntityReference</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#namespaceUri">namespaceUri</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#qualifiedName">qualifiedName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namespaceDeclarations">
<db:title>QXmlStreamNamespaceDeclarations QXmlStreamReader::namespaceDeclarations() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlStreamNamespaceDeclarations</db:type>
<db:methodname>namespaceDeclarations</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamNamespaceDeclarations namespaceDeclarations() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() is <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link>, this function returns the element's namespace declarations. Otherwise an empty vector is returned.</db:para>
<db:para>The <db:link xlink:href="qxmlstreamnamespacedeclaration.xml#QXmlStreamNamespaceDeclarations-typedef">QXmlStreamNamespaceDeclarations</db:link> class is defined to be a <db:link xlink:href="qlist.xml">QList</db:link> of <db:link xlink:href="qxmlstreamnamespacedeclaration.xml">QXmlStreamNamespaceDeclaration</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#addExtraNamespaceDeclaration">addExtraNamespaceDeclaration</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#addExtraNamespaceDeclarations">addExtraNamespaceDeclarations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namespaceUri">
<db:title>QStringView QXmlStreamReader::namespaceUri() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>namespaceUri</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView namespaceUri() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the namespaceUri of a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link> or <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EndElement</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#qualifiedName">qualifiedName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="notationDeclarations">
<db:title>QXmlStreamNotationDeclarations QXmlStreamReader::notationDeclarations() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlStreamNotationDeclarations</db:type>
<db:methodname>notationDeclarations</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamNotationDeclarations notationDeclarations() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>() is <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">DTD</db:link>, this function returns the DTD's notation declarations. Otherwise an empty vector is returned.</db:para>
<db:para>The <db:link xlink:href="qxmlstreamnotationdeclaration.xml#QXmlStreamNotationDeclarations-typedef">QXmlStreamNotationDeclarations</db:link> class is defined to be a <db:link xlink:href="qlist.xml">QList</db:link> of <db:link xlink:href="qxmlstreamnotationdeclaration.xml">QXmlStreamNotationDeclaration</db:link>.</db:para>
</db:section>
<db:section xml:id="prefix">
<db:title>QStringView QXmlStreamReader::prefix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>prefix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView prefix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the prefix of a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link> or <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EndElement</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#qualifiedName">qualifiedName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processingInstructionData">
<db:title>QStringView QXmlStreamReader::processingInstructionData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>processingInstructionData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView processingInstructionData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data of a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">ProcessingInstruction</db:link>.</db:para>
</db:section>
<db:section xml:id="processingInstructionTarget">
<db:title>QStringView QXmlStreamReader::processingInstructionTarget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>processingInstructionTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView processingInstructionTarget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the target of a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">ProcessingInstruction</db:link>.</db:para>
</db:section>
<db:section xml:id="qualifiedName">
<db:title>QStringView QXmlStreamReader::qualifiedName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>qualifiedName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView qualifiedName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the qualified name of a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link> or <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EndElement</db:link>;</db:para>
<db:para>A qualified name is the raw name of an element in the XML data. It consists of the namespace prefix, followed by colon, followed by the element's local name. Since the namespace prefix is not unique (the same prefix can point to different namespaces and different prefixes can point to the same namespace), you shouldn't use qualifiedName(), but the resolved <db:link xlink:href="qxmlstreamreader.xml#namespaceUri">namespaceUri</db:link>() and the attribute's local <db:link xlink:href="qxmlstreamreader.xml#name">name</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#prefix">prefix</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#namespaceUri">namespaceUri</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="raiseError">
<db:title>void QXmlStreamReader::raiseError(const QString &amp;<db:emphasis>message</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>raiseError</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>message</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void raiseError(const QString &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Raises a custom error with an optional error <db:code role="parameter">message</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readElementText">
<db:title>QString QXmlStreamReader::readElementText(QXmlStreamReader::ReadElementTextBehaviour <db:emphasis>behaviour</db:emphasis> = ErrorOnUnexpectedElement)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>readElementText</db:methodname>
<db:methodparam>
<db:type>QXmlStreamReader::ReadElementTextBehaviour</db:type>
<db:parameter>behaviour</db:parameter>
<db:initializer>ErrorOnUnexpectedElement</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString readElementText(QXmlStreamReader::ReadElementTextBehaviour behaviour)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to be called in case a <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link> was read. Reads until the corresponding <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EndElement</db:link> and returns all text in-between. In case of no error, the current token (see <db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>()) after having called this function is <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EndElement</db:link>.</db:para>
<db:para>The function concatenates <db:link xlink:href="qxmlstreamreader.xml#text">text</db:link>() when it reads either <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">Characters</db:link> or <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EntityReference</db:link> tokens, but skips <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">ProcessingInstruction</db:link> and <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">Comment</db:link>. If the current token is not <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">StartElement</db:link>, an empty string is returned.</db:para>
<db:para>The <db:code role="parameter">behaviour</db:code> defines what happens in case anything else is read before reaching <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EndElement</db:link>. The function can include the text from child elements (useful for example for HTML), ignore child elements, or raise an <db:link xlink:href="qxmlstreamreader.xml#Error-enum">UnexpectedElementError</db:link> and return what was read so far (default).</db:para>
</db:section>
<db:section xml:id="readNext">
<db:title>QXmlStreamReader::TokenType QXmlStreamReader::readNext()</db:title>
<db:methodsynopsis>
<db:type>QXmlStreamReader::TokenType</db:type>
<db:methodname>readNext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamReader::TokenType readNext()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the next token and returns its type.</db:para>
<db:para>With one exception, once an <db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>() is reported by readNext(), further reading of the XML stream is not possible. Then <db:link xlink:href="qxmlstreamreader.xml#atEnd">atEnd</db:link>() returns true, <db:link xlink:href="qxmlstreamreader.xml#hasError">hasError</db:link>() returns true, and this function returns <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">QXmlStreamReader::Invalid</db:link>.</db:para>
<db:para>The exception is when <db:link xlink:href="qxmlstreamreader.xml#error">error</db:link>() returns <db:link xlink:href="qxmlstreamreader.xml#Error-enum">PrematureEndOfDocumentError</db:link>. This error is reported when the end of an otherwise well-formed chunk of XML is reached, but the chunk doesn't represent a complete XML document. In that case, parsing <db:emphasis>can</db:emphasis> be resumed by calling <db:link xlink:href="qxmlstreamreader.xml#addData">addData</db:link>() to add the next chunk of XML, when the stream is being read from a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, or by waiting for more data to arrive when the stream is being read from a <db:link xlink:href="qxmlstreamreader.xml#device">device</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#tokenString">tokenString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readNextStartElement">
<db:title>bool QXmlStreamReader::readNextStartElement()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>readNextStartElement</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool readNextStartElement()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads until the next start element within the current element. Returns true when a start element was reached. When the end element was reached, or when an error occurred, false is returned.</db:para>
<db:para>The current element is the element matching the most recently parsed start element of which a matching end element has not yet been reached. When the parser has reached the end element, the current element becomes the parent element.</db:para>
<db:para>This is a convenience function for when you're only concerned with parsing XML elements. The <db:link xlink:href="qtxml-streambookmarks-example.xml">QXmlStream Bookmarks Example</db:link> makes extensive use of this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#readNext">readNext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QXmlStreamReader::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevice(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current device to <db:code role="parameter">device</db:code>. Setting the device resets the stream to its initial state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamreader.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEntityExpansionLimit">
<db:title>[since 5.15] void QXmlStreamReader::setEntityExpansionLimit(int <db:emphasis>limit</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEntityExpansionLimit</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>limit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEntityExpansionLimit(int limit)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum amount of characters a single entity is allowed to expand into to <db:code role="parameter">limit</db:code>. If a single entity expands past the given limit, the document is not considered well formed.</db:para>
<db:para>The limit is there to prevent DoS attacks when loading unknown XML documents where recursive entity expansion could otherwise exhaust all available memory.</db:para>
<db:para>The default value for this property is 4096 characters.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#entityExpansionLimit">entityExpansionLimit</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEntityResolver">
<db:title>void QXmlStreamReader::setEntityResolver(QXmlStreamEntityResolver *<db:emphasis>resolver</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEntityResolver</db:methodname>
<db:methodparam>
<db:type>QXmlStreamEntityResolver *</db:type>
<db:parameter>resolver</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEntityResolver(QXmlStreamEntityResolver *resolver)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes <db:code role="parameter">resolver</db:code> the new <db:link xlink:href="qxmlstreamreader.xml#entityResolver">entityResolver</db:link>().</db:para>
<db:para>The stream reader does <db:emphasis>not</db:emphasis> take ownership of the resolver. It's the callers responsibility to ensure that the resolver is valid during the entire life-time of the stream reader object, or until another resolver or nullptr is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#entityResolver">entityResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skipCurrentElement">
<db:title>void QXmlStreamReader::skipCurrentElement()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>skipCurrentElement</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void skipCurrentElement()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads until the end of the current element, skipping any child nodes. This function is useful for skipping unknown elements.</db:para>
<db:para>The current element is the element matching the most recently parsed start element of which a matching end element has not yet been reached. When the parser has reached the end element, the current element becomes the parent element.</db:para>
</db:section>
<db:section xml:id="text">
<db:title>QStringView QXmlStreamReader::text() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>text</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView text() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text of <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">Characters</db:link>, <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">Comment</db:link>, <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">DTD</db:link>, or <db:link xlink:href="qxmlstreamreader.xml#TokenType-enum">EntityReference</db:link>.</db:para>
</db:section>
<db:section xml:id="tokenString">
<db:title>QString QXmlStreamReader::tokenString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>tokenString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString tokenString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the reader's current token as string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#tokenType">tokenType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tokenType">
<db:title>QXmlStreamReader::TokenType QXmlStreamReader::tokenType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlStreamReader::TokenType</db:type>
<db:methodname>tokenType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamReader::TokenType tokenType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the current token.</db:para>
<db:para>The current token can also be queried with the convenience functions <db:link xlink:href="qxmlstreamreader.xml#isStartDocument">isStartDocument</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#isEndDocument">isEndDocument</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#isStartElement">isStartElement</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#isEndElement">isEndElement</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#isCharacters">isCharacters</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#isComment">isComment</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#isDTD">isDTD</db:link>(), <db:link xlink:href="qxmlstreamreader.xml#isEntityReference">isEntityReference</db:link>(), and <db:link xlink:href="qxmlstreamreader.xml#isProcessingInstruction">isProcessingInstruction</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamreader.xml#tokenString">tokenString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
