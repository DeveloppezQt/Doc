<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Simple Widget Mapper Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Simple Widget Mapper example shows how to use a widget mapper to display data from a model in a collection of widgets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/simplewidgetmapper-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> class allows information obtained from a <db:link xlink:href="model-view-programming.xml#model-classes">model</db:link> to be viewed and edited in a collection of widgets instead of in an <db:link xlink:href="model-view-programming.xml#view-classes">item view</db:link>. Any model derived from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> can be used as the source of data and almost any input widget can be used to display it.</db:para>
<db:para>The example itself is very simple: we create Window, a <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass that we use to hold the widgets used to present the data, and show it. The Window class will provide buttons that the user can click to show different records from the model.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The class provides a constructor, a slot to keep the buttons up to date, and a private function to set up the model:</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window(QWidget *parent = 0);

private slots:
    void updateButtons(int row);

private:
    void setupModel();

    QLabel *nameLabel;
    QLabel *addressLabel;
    QLabel *ageLabel;
    QLineEdit *nameEdit;
    QTextEdit *addressEdit;
    QSpinBox *ageSpinBox;
    QPushButton *nextButton;
    QPushButton *previousButton;

    QStandardItemModel *model;
    QDataWidgetMapper *mapper;
};
</db:programlisting>
<db:para>In addition to the <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> object and the controls used to make up the user interface, we use a <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> to hold our data. We could use a custom model, but this standard implementation is sufficient for our purposes.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>The constructor of the Window class can be explained in three parts. In the first part, we set up the widgets used for the user interface:</db:para>
<db:programlisting language="cpp">Window::Window(QWidget *parent)
    : QWidget(parent)
{
    setupModel();

    nameLabel = new QLabel(tr(&quot;Na&amp;amp;me:&quot;));
    nameEdit = new QLineEdit();
    addressLabel = new QLabel(tr(&quot;&amp;amp;Address:&quot;));
    addressEdit = new QTextEdit();
    ageLabel = new QLabel(tr(&quot;A&amp;amp;ge (in years):&quot;));
    ageSpinBox = new QSpinBox();
    nextButton = new QPushButton(tr(&quot;&amp;amp;Next&quot;));
    previousButton = new QPushButton(tr(&quot;&amp;amp;Previous&quot;));

    nameLabel-&amp;gt;setBuddy(nameEdit);
    addressLabel-&amp;gt;setBuddy(addressEdit);
    ageLabel-&amp;gt;setBuddy(ageSpinBox);
</db:programlisting>
<db:para>We also set up the buddy relationships between various labels and the corresponding input widgets.</db:para>
<db:para>Next, we set up the widget mapper, relating each input widget to a column in the model specified by the call to <db:link xlink:href="qdatawidgetmapper.xml#setModel">setModel</db:link>():</db:para>
<db:programlisting language="cpp">    mapper = new QDataWidgetMapper(this);
    mapper-&amp;gt;setModel(model);
    mapper-&amp;gt;addMapping(nameEdit, 0);
    mapper-&amp;gt;addMapping(addressEdit, 1);
    mapper-&amp;gt;addMapping(ageSpinBox, 2);

    connect(previousButton, &amp;amp;QAbstractButton::clicked, mapper, &amp;amp;QDataWidgetMapper::toPrevious);
    connect(nextButton, &amp;amp;QAbstractButton::clicked, mapper, &amp;amp;QDataWidgetMapper::toNext);
    connect(mapper, &amp;amp;QDataWidgetMapper::currentIndexChanged, this, &amp;amp;Window::updateButtons);
</db:programlisting>
<db:para>We also connect the mapper to the <db:guilabel>Next</db:guilabel> and <db:guilabel>Previous</db:guilabel> buttons via its <db:link xlink:href="qdatawidgetmapper.xml#toNext">toNext</db:link>() and <db:link xlink:href="qdatawidgetmapper.xml#toPrevious">toPrevious</db:link>() slots. The mapper's <db:link xlink:href="qdatawidgetmapper.xml#currentIndexChanged">currentIndexChanged</db:link>() signal is connected to the updateButtons() slot in the window which we'll show later.</db:para>
<db:para>In the final part of the constructor, we set up the layout, placing each of the widgets in a grid (we could also use a <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> for this):</db:para>
<db:programlisting language="cpp">    QGridLayout *layout = new QGridLayout();
    layout-&amp;gt;addWidget(nameLabel, 0, 0, 1, 1);
    layout-&amp;gt;addWidget(nameEdit, 0, 1, 1, 1);
    layout-&amp;gt;addWidget(previousButton, 0, 2, 1, 1);
    layout-&amp;gt;addWidget(addressLabel, 1, 0, 1, 1);
    layout-&amp;gt;addWidget(addressEdit, 1, 1, 2, 1);
    layout-&amp;gt;addWidget(nextButton, 1, 2, 1, 1);
    layout-&amp;gt;addWidget(ageLabel, 3, 0, 1, 1);
    layout-&amp;gt;addWidget(ageSpinBox, 3, 1, 1, 1);
    setLayout(layout);

    setWindowTitle(tr(&quot;Simple Widget Mapper&quot;));
    mapper-&amp;gt;toFirst();
}
</db:programlisting>
<db:para>Lastly, we set the window title and initialize the mapper by setting it to refer to the first row in the model.</db:para>
<db:para>The model is initialized in the window's setupModel() function. Here, we create a standard model with 5 rows and 3 columns, and we insert some sample names, addresses and ages into each row:</db:para>
<db:programlisting language="cpp">void Window::setupModel()
{
    model = new QStandardItemModel(5, 3, this);

    QStringList names;
    names &amp;lt;&amp;lt; &quot;Alice&quot; &amp;lt;&amp;lt; &quot;Bob&quot; &amp;lt;&amp;lt; &quot;Carol&quot; &amp;lt;&amp;lt; &quot;Donald&quot; &amp;lt;&amp;lt; &quot;Emma&quot;;

    QStringList addresses;
    addresses &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;123 Main Street&amp;lt;br/&amp;gt;Market Town&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;PO Box 32&amp;lt;br/&amp;gt;Mail Handling Service&quot;
                 &quot;&amp;lt;br/&amp;gt;Service City&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;The Lighthouse&amp;lt;br/&amp;gt;Remote Island&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;47338 Park Avenue&amp;lt;br/&amp;gt;Big City&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;Research Station&amp;lt;br/&amp;gt;Base Camp&amp;lt;br/&amp;gt;Big Mountain&amp;lt;/qt&amp;gt;&quot;;

    QStringList ages;
    ages &amp;lt;&amp;lt; &quot;20&quot; &amp;lt;&amp;lt; &quot;31&quot; &amp;lt;&amp;lt; &quot;32&quot; &amp;lt;&amp;lt; &quot;19&quot; &amp;lt;&amp;lt; &quot;26&quot;;

    for (int row = 0; row &amp;lt; 5; ++row) {
      QStandardItem *item = new QStandardItem(names[row]);
      model-&amp;gt;setItem(row, 0, item);
      item = new QStandardItem(addresses[row]);
      model-&amp;gt;setItem(row, 1, item);
      item = new QStandardItem(ages[row]);
      model-&amp;gt;setItem(row, 2, item);
    }
}
</db:programlisting>
<db:para>As a result, each row can be treated like a record in a database, and the widget mapper will read the data from each row, using the column numbers specified earlier to access the correct data for each widget. This is shown in the following diagram:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/widgetmapper-simple-mapping.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Since the user can navigate using the buttons in the user interface, the example is fully-functional at this point, but to make it a bit more user-friendly, we implement the updateButtons() slot to show when the user is viewing the first or last records:</db:para>
<db:programlisting language="cpp">void Window::updateButtons(int row)
{
    previousButton-&amp;gt;setEnabled(row &amp;gt; 0);
    nextButton-&amp;gt;setEnabled(row &amp;lt; model-&amp;gt;rowCount() - 1);
}
</db:programlisting>
<db:para>If the mapper is referring to the first row in the model, the <db:guilabel>Previous</db:guilabel> button is disabled. Similarly, the <db:guilabel>Next</db:guilabel> button is disabled if the mapper reaches the last row in the model.</db:para>
</db:section>
<db:section xml:id="more-complex-mappings">
<db:title>More Complex Mappings</db:title>
<db:para>The <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> class makes it easy to relate information from a model to widgets in a user interface. However, it is sometimes necessary to use input widgets which offer choices to the user, such as <db:link xlink:href="qcombobox.xml">QComboBox</db:link>, in conjunction with a widget mapper.</db:para>
<db:para>In these situations, although the mapping to input widgets remains simple, more work needs to be done to expose additional data to the widget mapper. This is covered by the <db:link xlink:href="qtwidgets-itemviews-combowidgetmapper-example.xml">Combo Widget Mapper</db:link> and <db:link xlink:href="qtsql-sqlwidgetmapper-example.xml">SQL Widget Mapper</db:link> examples.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="itemviews/simplewidgetmapper/main.cpp">itemviews/simplewidgetmapper/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/simplewidgetmapper/simplewidgetmapper.pro">itemviews/simplewidgetmapper/simplewidgetmapper.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/simplewidgetmapper/window.cpp">itemviews/simplewidgetmapper/window.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/simplewidgetmapper/window.h">itemviews/simplewidgetmapper/window.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
