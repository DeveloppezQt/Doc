<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>What's New in Qt 5.0</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists the new features in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="qt-core-changes">
<db:title>Qt Core Changes</db:title>
<db:section xml:id="qstandardpaths">
<db:title>QStandardPaths</db:title>
<db:para><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link> is a more powerful version of <db:link xlink:href="qdesktopservices.xml">QDesktopServices</db:link> that was present in Qt 4. Modeled after <db:link xlink:href="http://api.kde.org/4.x-api/kdelibs- apidocs/kdecore/html/classKStandardDirs.html">KStandardDirs</db:link> from KDE 4, it contains additional features such as searching for all occurrences of a given file in the storage locations.</db:para>
</db:section>
<db:section xml:id="compile-time-checks-for-signal-slot-connections">
<db:title>Compile-time Checks for Signal-slot Connections</db:title>
<db:para><db:link xlink:href="qobject.xml">QObject</db:link> now supports an additional syntax for connecting signals to slots, which forces the compiler to check whether the signal and the receiver exist and their arguments are compatible.</db:para>
<db:para>This syntax allows connecting a signal to any kind of C++ receiver, including C++11 lambdas, member functions, or static functions. The receivers no longer need to be declared as slots, but such declarations are still recommended for readability.</db:para>
<db:para>See <db:link xlink:href="signalsandslots-syntaxes.xml">Differences between String-Based and Functor-Based Connections</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="perl-compatible-regular-expressions">
<db:title>Perl-Compatible Regular Expressions</db:title>
<db:para><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> is introduced to provide better support for regular expressions compatible with Perl. This class is more powerful and faster than <db:link xlink:href="qregexp.xml">QRegExp</db:link>, and supports more features such as lazy and possessive quantifiers, lookbehinds, named capturing groups, and iteration of matches.</db:para>
</db:section>
</db:section>
<db:section xml:id="qt-gui-changes">
<db:title>Qt GUI Changes</db:title>
<db:section xml:id="new-classes-for-windowing-and-rendering">
<db:title>New Classes for Windowing and Rendering</db:title>
<db:para>A new set of enabler classes have been added, most importantly <db:link xlink:href="qwindow.xml">QWindow</db:link>, <db:link xlink:href="qscreen.xml">QScreen</db:link>, <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link>, and <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. These are now used as backends for the <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> module and by <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2.</db:para>
</db:section>
<db:section xml:id="opengl-classes">
<db:title>OpenGL Classes</db:title>
<db:para>Most of the useful <db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> classes have been polished and moved into <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link>. A few important ones are, <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link>, <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link>, <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link>, and so on. For the complete list, refer to <db:link xlink:href="qtgui-module.xml">Qt GUI C++ Classes</db:link>.</db:para>
<db:para>This change introduces <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> as a replacement for QGLContext. This replacement class is more generic and decoupled from <db:link xlink:href="qwindow.xml">QWindow</db:link>, making it to support more use cases such as using the same context for multiple surfaces.</db:para>
</db:section>
<db:section xml:id="qopenglpaintdevice">
<db:title>QOpenGLPaintDevice</db:title>
<db:para>Instead of having <db:link xlink:href="qwindow.xml">QWindow</db:link> and <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> be subclasses of <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link>, you can now use <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link>. This new alternative can be created on the stack, makes it easier and flexible to render into the currently bound context using <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="qt-network-changes">
<db:title>Qt Network Changes</db:title>
<db:section xml:id="qdnslookup">
<db:title>QDnsLookup</db:title>
<db:para>It is now possible to lookup DNS records using the new <db:link xlink:href="qdnslookup.xml">QDnsLookup</db:link> API. This does not replace <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link>, which is still the API to be used for resolving a host name to an IP address. <db:link xlink:href="qdnslookup.xml">QDnsLookup</db:link> is mainly used for other types of DNS record, such as SRV, TXT and MX.</db:para>
<db:note>
<db:para>This new class replaces the Q3Dns API, which is removed in Qt 5.</db:para>
</db:note>
</db:section>
<db:section xml:id="better-support-for-ipv6-and-dual-mode-networks">
<db:title>Better Support for IPv6 and Dual-mode Networks</db:title>
<db:para>Most applications using host names and network layer transparent protocols, will now gain IPv6 support transparently. This means, <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link> and <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> bound to <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">QHostAddress::Any</db:link> can now receive both IPv4 and IPv6 connections, although, <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">QHostAddress::AnyIPv4</db:link> and <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">QHostAddress::AnyIPv6</db:link> can be used to bind to only one protocol.</db:para>
<db:para>Outgoing http connections using <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will now attempt both IPv4 and IPv6 connections in parallel, and use the one that succeeds first.</db:para>
</db:section>
<db:section xml:id="binding-tcp-sockets">
<db:title>Binding TCP Sockets</db:title>
<db:para><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> can be bound to an IP address before connecting, which is useful for limiting connection to a specific interface in a multi-homed environment.</db:para>
</db:section>
<db:section xml:id="ssl-certificates">
<db:title>SSL Certificates</db:title>
<db:para>SSL certificate extensions can now be accessed to enable further development of SSL support in Qt.</db:para>
<db:para>Developers can also verify an SSL certificate chain programatically now.</db:para>
</db:section>
<db:section xml:id="workarounds-for-buggy-ssl-servers">
<db:title>Workarounds for Buggy SSL Servers</db:title>
<db:para>The <db:link xlink:href="qssl.xml#SslOption-enum">QSsl::SslOption</db:link> enum now allows a <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>-based code to access legacy systems by enabling bug workarounds.</db:para>
<db:note>
<db:para>This change is also back-ported to Qt 4.8.</db:para>
</db:note>
</db:section>
<db:section xml:id="support-for-opaque-private-keys">
<db:title>Support for Opaque Private Keys</db:title>
<db:para>This allows applications to read private keys from devices such as PKCS#11 dongles, as illustrated by the <db:link xlink:href="http://git.iksaif.net/?p=qsslkey-p11.git">qsslkey example</db:link></db:para>
</db:section>
</db:section>
<db:section xml:id="qt-qml-changes">
<db:title>Qt QML Changes</db:title>
<db:para>This is a new module in Qt 5 that provides the QML engine and the backend infrastructure.</db:para>
<db:section xml:id="qml-engine">
<db:title>QML Engine</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>V8 JavaScript engine</db:para>
</db:listitem>
<db:listitem>
<db:para>Various parser and compiler optimizations have been implemented along with the new bindings optimizer.</db:para>
</db:listitem>
<db:listitem>
<db:para>Loading/compilation can now be performed in a separate thread. This can be enabled by loading a loader object asynchronously through its source property, or by passing the Component.Asynchronous parameter to <db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">Qt.createComponent</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>New <db:link xlink:href="qqmlengine.xml#trimComponentCache">QQmlEngine::trimComponentCache</db:link>() function safely discards unused data in the engine’s component cache to free memory.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="type-system">
<db:title>Type System</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>New <db:link xlink:href="qml-var.xml">var</db:link> property type can hold JavaScript references.</db:para>
</db:listitem>
<db:listitem>
<db:para>QML properties of type <db:link xlink:href="qml-var.xml">var</db:link> and <db:link xlink:href="qml-variant.xml" role="deprecated">variant</db:link> can now hold pixmaps.</db:para>
</db:listitem>
<db:listitem>
<db:para>Value type improvements:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link> is now a value type. The red, green, blue and alpha channels of a “color” property can now be accessed using “r”, “g”, “b” and “a” properties.</db:para>
</db:listitem>
<db:listitem>
<db:para>Improved support for <db:link xlink:href="qvector4d.xml">QVector4D</db:link>, now constructible in QML using <db:link xlink:href="qml-qtqml-qt.xml#vector4d-method">Qt.vector4d</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Support for certain sequence types (<db:link xlink:href="qlist.xml">QList</db:link>&lt;int&gt;, <db:link xlink:href="qlist.xml">QList</db:link>&lt;qreal&gt;, <db:link xlink:href="qlist.xml">QList</db:link>&lt;bool&gt;, <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qurl.xml">QUrl</db:link>&gt;, <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt; and <db:link xlink:href="qstringlist.xml">QStringList</db:link>) has been improved. QObjects can define Q_PROPERTYs of these types which can be accessed from JavaScript.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="other">
<db:title>Other</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>JavaScript (.js) files can now import QML modules and other JavaScript files using the “import” statement.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link> can now be constructed directly (and more efficiently) from a <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The component returned by <db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">Qt.createComponent</db:link>() is no longer the owned by the engine. Be sure to hold a reference,or provide a parent.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="qt-quick-changes">
<db:title>Qt Quick Changes</db:title>
<db:para>This is a new module in Qt 5 which provides the visual canvas and scenegraph backend as well as the QtQuick QML module for QML-based application development.</db:para>
<db:para>The module replaces the QDeclarative* equivalents in <db:emphasis><db:link xlink:href="qtquick-module.xml">QtQuick</db:link> 1</db:emphasis> with the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qquickview.xml">QQuickView</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QQuickCanvas</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See <db:link xlink:href="qtquick-module.xml">Qt Quick C++ Classes</db:link> for the complete list.</db:para>
<db:para>The <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> 2.0 QML module is a major update, and the following sections outline the features that come with it:</db:para>
<db:section xml:id="new-graphics-architecture">
<db:title>New Graphics Architecture</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Quick 2.0 uses a dedicated OpenGL (ES) 2.0 based <db:link xlink:href="topics-graphics.xml#qt-quick-scene-graph">Qt Quick Scene Graph</db:link> scene graph for all its rendering.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="visual-and-graphic-types">
<db:title>Visual and Graphic Types</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>New Canvas type for drawing, provides a HTML5 canvas-like API along with the following additional features:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Two render targets: <db:link xlink:href="qml-qtquick-canvas.xml#renderTarget-prop">Canvas.Image</db:link> and <db:link xlink:href="qml-qtquick-canvas.xml#renderTarget-prop">Canvas.FramebufferObject</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Background thread rendering.</db:para>
</db:listitem>
<db:listitem>
<db:para>Tiled canvas rendering.</db:para>
</db:listitem>
<db:listitem>
<db:para>Support for most of the HTML5 context2d APIs.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Image type now has:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>New horizontal and vertical alignment properties, <db:link xlink:href="qml-qtquick-image.xml#horizontalAlignment-prop">horizontalAlignment</db:link> and <db:link xlink:href="qml-qtquick-image.xml#verticalAlignment-prop">verticalAlignment</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-image.xml#fillMode-prop">Image.Pad</db:link> enum value for fillMode property does not transform the image unlike the other fillMode enum values.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">sourceSize.width</db:link> and <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">sourceSize.height</db:link> now fits the image to size maintaining the aspect ratio.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="animations">
<db:title>Animations</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>New <db:link xlink:href="qml-qtquick-spritesequence.xml">SpriteSequence</db:link> type renders animated sprites and can transition between animations.</db:para>
</db:listitem>
<db:listitem>
<db:para>New <db:link xlink:href="qml-qtquick-sprite.xml">Sprite</db:link> type that represents each animation in a <db:link xlink:href="qml-qtquick-spritesequence.xml">SpriteSequence</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>New <db:link xlink:href="qml-qtquick-animatedsprite.xml">AnimatedSprite</db:link> type for drawing single sprite animations.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="text">
<db:title>Text</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="whatsnew50.xml#text">Text</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-text.xml#textFormat-prop">AutoText</db:link> format now switches to StyledText instead of RichText.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-text.xml#lineLaidOut-signal">lineLaidOut</db:link> signal is emitted for every line during the layout process to give the option of positioning and/or resizing text as they are laid out.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-text.xml#doLayout-method">doLayout</db:link>() method can now trigger the text layout from JavaScript.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-text.xml#elide-prop">ElideRight</db:link> to support text that spans multiple lines.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link> property now supports wrapping the text to the item size.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-text.xml#minimumPixelSize-prop">minimumPixelSize</db:link> and <db:link xlink:href="qml-qtquick-text.xml#minimumPointSize-prop">minimumPointSize</db:link> properties can be used to specify a lower bound when auto-fitting.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml#textFormat-prop">TextEdit.textFormat</db:link> property now defaults to PlainText instead of AutoText.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> now has wrapMode and verticalAlignment properties.</db:para>
</db:listitem>
<db:listitem>
<db:para>TextInput.positionAt() now takes y value.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="user-input">
<db:title>User Input</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>New <db:link xlink:href="qml-qtquick-multipointtoucharea.xml">MultiPointTouchArea</db:link> type can process multi-point touches and provide information about the touch points including position, pressure and velocity.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type now:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Propagates wheel events.</db:para>
</db:listitem>
<db:listitem>
<db:para>Propagates clicked, doubleClicked and pressAndHold events differently to pressed. These events are propagated to the handler of the topmost <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> in the stack-order.</db:para>
</db:listitem>
<db:listitem>
<db:para>Can ignore the propagated events using the propagateComposedEvents. Such ignored events are propagated to the next <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> handler in the stack-order.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="specialized-containers">
<db:title>Specialized Containers</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> type now has:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>a new rebound property that enables you to specify the transition type for the bounce back animation.</db:para>
</db:listitem>
<db:listitem>
<db:para>New topMargin, bottomMargin, leftMargin, and rightMargin properties allow extra margin space to be specified. This is useful to implement the pull-to-refresh functionality for a list.</db:para>
</db:listitem>
<db:listitem>
<db:para>New xOrigin and yOrigin properties provide the top left position of the content item.</db:para>
</db:listitem>
<db:listitem>
<db:para>New dragging, draggingHorizontally, and draggingVertically properties that provide information when the flickable area is dragged.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="positioners">
<db:title>Positioners</db:title>
<db:para>The following features are related to Row, Column, Grid, and Flow types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The “add” and “move” transitions can now access the <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link> attached property, and also animate arbitrary item properties (instead of being restricted to animating an item’s position).</db:para>
</db:listitem>
<db:listitem>
<db:para>New Positioner.index, Positioner.isFirstItem and Positioner.isLastItem attached properties for items within a positioner.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link> type has new rowSpacing and columnSpacing properties.</db:para>
</db:listitem>
<db:listitem>
<db:para>All spacing properties on positioners now use real numbers instead of integers.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="models-and-views">
<db:title>Models and Views</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Transitions can be specified to animate the adding, removing and moving of items in a view. For details, see <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link>, <db:link xlink:href="qml-qtquick-listview.xml#add-signal">ListView.add</db:link>, <db:link xlink:href="qml-qtquick-listview.xml#addDisplaced-prop">ListView.addDisplaced</db:link>, <db:link xlink:href="qml-qtquick-gridview.xml#add-signal">GridView.add</db:link>, and <db:link xlink:href="qml-qtquick-gridview.xml#addDisplaced-prop">GridView.addDisplaced</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>New verticalLayoutDirection property enables items to be laid out from bottom-to-top using the BottomToTop enum value.</db:para>
</db:listitem>
<db:listitem>
<db:para>The cacheBuffer property now has a non-zero default and delegates in the cacheBuffer are created asynchronously.</db:para>
</db:listitem>
<db:listitem>
<db:para>New headerItem and footerItem properties provide access to the instantiated header and footer items.</db:para>
</db:listitem>
<db:listitem>
<db:para>RightToLeft layout now also reverses the preferredHighlightBegin and preferredHighlightEnd.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>'s new section.labelPositioning property can fix the current section label to the start of the view, and the next section label to the end of the view, so that labels do not scroll while section items are still in view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> has two new properties, curretnItem and maximumFlickVelocity.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="particles-system-support">
<db:title>Particles System Support</db:title>
<db:para>The new <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Particles 2.0 module provides support for the composition of a variety of 2D particle systems. See Using the Qt Quick Particle System for more details.</db:para>
</db:section>
<db:section xml:id="utility-types">
<db:title>Utility Types</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>New <db:link xlink:href="qml-qtquick-patharc.xml">PathArc</db:link>, <db:link xlink:href="qml-qtquick-pathcurve.xml">PathCurve</db:link> and <db:link xlink:href="qml-qtquick-pathsvg.xml">PathSvg</db:link> types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>PathArc and PathCurve support the construction of arcs and catmull-rom curves, respectively. <db:link xlink:href="qml-qtquick-pathsvg.xml">PathSvg</db:link> supports the construction of a path from an SVG string.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Loader:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>New asynchronous property allows components to be instantiated with a lower chance of blocking. With the asynchronous property set to true, the component is compiled in a background thread.</db:para>
</db:listitem>
<db:listitem>
<db:para>New active property delays instantiation of a Loader object’s item.</db:para>
</db:listitem>
<db:listitem>
<db:para>New setSource(JSObject) method to specify initial property values for the loaded item, similar to <db:link xlink:href="qml-qtqml-component.xml#createObject-method">Component.createObject</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>sourceChanged signal is now only emitted when the source changes and the sourceComponentChanged signal is now emitted when the sourceComponent is changed. Ealier, these signals were emitted by the Loader only when one of the two properties had changed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Loader type can now be used as a value source, and it can restore any previously set binding if its &quot;when&quot; clause becomes false.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="qt-multimedia-changes">
<db:title>Qt Multimedia Changes</db:title>
<db:para>Qt Multimedia is an essential module replacing the <db:link xlink:href="qtmultimedia-module.xml">QtMultimedia</db:link> library and Qt MultimediaKit mobility API in Qt 4.8. It features full support for Audio and Video playback, and recording. Support for web cameras is integrated.</db:para>
<db:para>Qt Multimedia uses the system’s native multimedia engine as a backend, and does not come with its own audio or video codecs. Thus the supported list of codecs is equivalent to the ones supported by the underlying OS.</db:para>
<db:para>It uses DirectShow and WMF on Windows, AVFoundation on Mac and gstreamer on Linux.</db:para>
</db:section>
<db:section xml:id="new-classes-and-functions">
<db:title>New Classes and Functions</db:title>
<db:para>The section provides a comprehensive list of all new classes and functions introduced in Qt 5.</db:para>
</db:section>
<db:section xml:id="additions-to-other-qt-5-releases">
<db:title>Additions to Other Qt 5 Releases</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="whatsnew56.xml">What's New in Qt 5.6</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="whatsnew55.xml">What's New in Qt 5.5</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="whatsnew54.xml">What's New in Qt 5.4</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="whatsnew53.xml">What's New in Qt 5.3</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="whatsnew52.xml">What's New in Qt 5.2</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="whatsnew51.xml">What's New in Qt 5.1</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
