<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Customizing Legends</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows you how to create your own custom legend.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-qmlchartsgallery-example.xml">Charts with QML Gallery</db:link> example.</db:para>
</db:note>
<db:para>Here we show you how to create your own custom legend instead of using the built-in legend of <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> API.</db:para>
<db:para>The main view of the application shows a stacked area chart. This is how one of the stacked areas is created. See ChartViewStacked.qml and AnimatedAreaSeries.qml.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlcustomlegend1.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">AnimatedAreaSeries {
    id: municipalSeries
    name: &quot;municipal&quot;
    axisX: axisX
    axisY: axisY
    borderWidth: 0
    upperSeries: LineSeries {
        id: municipalUpper
        XYPoint { x: 2006; y: 33119 + 13443 }
        XYPoint { x: 2007; y: 37941 + 15311 }
        XYPoint { x: 2008; y: 40122 + 16552 }
        XYPoint { x: 2009; y: 38991 + 17904 }
        XYPoint { x: 2010; y: 34055 + 17599 }
        XYPoint { x: 2011; y: 34555 + 19002 }
        XYPoint { x: 2012; y: 38991 + 19177 }
    }
    lowerSeries: stateUpper
}
</db:programlisting>
<db:para>Hovering with mouse on top of the legend will highlight the hovered series. (see CustomLegend.qml).</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlcustomlegend2.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">Row {
    id: legendRow
    anchors.centerIn: parent
    spacing: 10

    Repeater {
        id: legendRepeater
        model: legend.seriesCount
        delegate: legendDelegate
    }
}
Component {
    id: legendDelegate
    Rectangle {
        id: rect
    ...
        MouseArea {
            id: mouseArea
            anchors.fill: parent
            hoverEnabled: true
            onEntered: {
                rect.gradient = buttonGradientHovered;
                legend.entered(label.text);
            }
            onExited: {
                rect.gradient = buttonGradient;
                legend.exited(label.text);
                marker.opacity = 0.3;
                marker.height = 10;
            }
            onClicked: {
                legend.selected(label.text);
                marker.opacity = 1.0;
                marker.height = 12;
            }
        }
</db:programlisting>
<db:para>You can also select one of the stacked areas for a closer look as a line series by a mouse click (see ChartViewHighlighted.qml).</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlcustomlegend3.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    id: chartViewHighlighted

    property variant selectedSeries

    signal clicked

    legend.visible: false
    margins.top: 10
    margins.bottom: 0
    antialiasing: true

    LineSeries {
        id: lineSeries

        axisX: ValueAxis {
            min: 2006
            max: 2012
            labelFormat: &quot;%.0f&quot;
            tickCount: 7
        }
        axisY: ValueAxis {
            id: axisY
            titleText: &quot;EUR&quot;
            min: 0
            max: 40000
            labelFormat: &quot;%.0f&quot;
            tickCount: 5
        }
    }
</db:programlisting>
</db:article>
