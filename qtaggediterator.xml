<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTaggedIterator Class</db:title>
<db:subtitle>template &lt;typename Iterator, typename IteratorCategory&gt; class QTaggedIterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qtaggediterator.xml">QTaggedIterator</db:link> is a template class that wraps an iterator and exposes standard iterator traits.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTaggedIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In order to use an iterator any of the standard algorithms, its iterator traits need to be known. As <db:link xlink:href="qsequentialiterable.xml">QSequentialIterable</db:link> can work with many different kinds of containers, we cannot declare the traits in the iterator classes themselves. A <db:link xlink:href="qtaggediterator.xml">QTaggedIterator</db:link> gives you a way to explicitly declare a trait for a concrete instance of an iterator or <db:link xlink:href="qconstiterator.xml">QConstIterator</db:link>.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTaggedIterator">
<db:title>QTaggedIterator::QTaggedIterator(Iterator &amp;&amp;<db:emphasis>it</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtaggediterator.xml">QTaggedIterator</db:link> from an iterator or <db:link xlink:href="qconstiterator.xml">QConstIterator</db:link> <db:code role="parameter">it</db:code>. Checks whether the IteratorCategory passed as template argument matches the run time capabilities of <db:code role="parameter">it</db:code>; if there's no match, <db:code role="parameter">it</db:code> is refused.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QTaggedIterator::operator!=(const QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtaggediterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QTaggedIterator&lt;Iterator, IteratorCategory&gt; QTaggedIterator::operator+(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions forward from this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtaggediterator.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qtaggediterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;QTaggedIterator::operator++()</db:title>
<db:para>The prefix ++ operator (++it) advances the iterator to the next item in the container and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qiterable.xml#constEnd">QSequentialIterable::constEnd</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtaggediterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>QTaggedIterator&lt;Iterator, IteratorCategory&gt; QTaggedIterator::operator++(int <db:emphasis>x</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (it++) advances the iterator to the next item in the container and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;QTaggedIterator::operator+=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtaggediterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qtaggediterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>qsizetype QTaggedIterator::operator-(const QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;<db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns the distance between this iterator and <db:code role="parameter">j</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtaggediterator.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qtaggediterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--1">
<db:title>QTaggedIterator&lt;Iterator, IteratorCategory&gt; QTaggedIterator::operator-(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions backward from this iterator.</db:para>
<db:para>If the container in the <db:link xlink:href="qvariant.xml">QVariant</db:link> does not support bi-directional iteration, calling this function leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtaggediterator.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qtaggediterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--">
<db:title>QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;QTaggedIterator::operator--()</db:title>
<db:para>The prefix -- operator (--it) makes the preceding item current and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qiterable.xml#constBegin">QSequentialIterable::constBegin</db:link>() leads to undefined results.</db:para>
<db:para>If the container in the <db:link xlink:href="qvariant.xml">QVariant</db:link> does not support bi-directional iteration, calling this function leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtaggediterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>QTaggedIterator&lt;Iterator, IteratorCategory&gt; QTaggedIterator::operator--(int <db:emphasis>x</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix -- operator (it--) makes the preceding item current and returns an iterator to the previously current item.</db:para>
<db:para>If the container in the <db:link xlink:href="qvariant.xml">QVariant</db:link> does not support bi-directional iteration, calling this function leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;QTaggedIterator::operator-=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> items.</db:para>
<db:para>If the container in the <db:link xlink:href="qvariant.xml">QVariant</db:link> does not support bi-directional iteration, calling this function leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtaggediterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qtaggediterator.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QTaggedIterator::operator==(const QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtaggediterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-2b-1">
<db:title>QTaggedIterator&lt;Iterator, IteratorCategory&gt; operator+(qsizetype <db:emphasis>j</db:emphasis>, const QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;<db:emphasis>k</db:emphasis>)</db:title>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions forward from iterator <db:code role="parameter">k</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
