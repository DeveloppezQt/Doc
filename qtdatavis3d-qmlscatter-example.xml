<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Simple Scatter Graph</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="qml-qtdatavisualization-scatter3d.xml">Scatter3D</db:link> in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Simple Scatter Graph</db:emphasis> shows how to make a simple scatter graph visualization using <db:link xlink:href="qml-qtdatavisualization-scatter3d.xml">Scatter3D</db:link> and QML.</db:para>
<db:para>For instructions about how to interact with the graph, see <db:link xlink:href="qtdatavisualization-interacting-with-data.xml">this page</db:link>.</db:para>
<db:para>For instructions on how to create a new Qt Quick application of your own, see Qt Creator help.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlscatter-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="application-basics">
<db:title>Application Basics</db:title>
<db:para>Before diving into the QML code, take a look at the application <db:code>main.cpp</db:code>.</db:para>
<db:para>This application implements a 'Quit' button in the UI, so you want to connect the <db:link xlink:href="qqmlengine.xml#quit">QQmlEngine::quit</db:link>() signal to the application's <db:link xlink:href="qwindow.xml#close">QWindow::close</db:link>() slot:</db:para>
<db:programlisting language="cpp">QObject::connect(viewer.engine(), &amp;amp;QQmlEngine::quit, &amp;amp;viewer, &amp;amp;QWindow::close);
</db:programlisting>
<db:para>To make deployment a little simpler, gather all of the application's <db:code>.qml</db:code> files to a resource file (<db:code>qmlscatter.qrc</db:code>):</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;RCC&amp;gt;
    &amp;lt;qresource prefix=&quot;/&quot;&amp;gt;
        &amp;lt;file&amp;gt;qml/qmlscatter/Data.qml&amp;lt;/file&amp;gt;
        &amp;lt;file&amp;gt;qml/qmlscatter/main.qml&amp;lt;/file&amp;gt;
    &amp;lt;/qresource&amp;gt;
&amp;lt;/RCC&amp;gt;
</db:programlisting>
<db:para>This also requires setting the <db:code>main.qml</db:code> to be read from the resource (<db:code>qrc:</db:code>):</db:para>
<db:programlisting language="cpp">viewer.setSource(QUrl(&quot;qrc:/qml/qmlscatter/main.qml&quot;));
</db:programlisting>
<db:para>When using cmake instead of qmake, the <db:code>.qml</db:code> files are added into a QML module in the <db:code>CMakeLists.txt</db:code> instead:</db:para>
<db:programlisting language="cpp" role="bad">qt6_add_qml_module(qmlscatter
    URI Scatter
    VERSION 1.0
    NO_RESOURCE_TARGET_PATH
    QML_FILES
        qml/qmlscatter/Data.qml
        qml/qmlscatter/main.qml
)
</db:programlisting>
<db:para>Finally, make the application run in a maximized window:</db:para>
<db:programlisting language="cpp">viewer.showMaximized();
</db:programlisting>
</db:section>
<db:section xml:id="setting-up-the-graph">
<db:title>Setting up the Graph</db:title>
<db:para>First, import all the needed QML modules:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls
import QtDataVisualization
</db:programlisting>
<db:para>Then, create the main <db:code>Item</db:code> and call it <db:code>mainView</db:code>:</db:para>
<db:programlisting language="qml">Item {
    id: mainView
</db:programlisting>
<db:para>Then, add another <db:code>Item</db:code> inside the main <db:code>Item</db:code>, and call it <db:code>dataView</db:code>. This will be the item to hold the <db:link xlink:href="qml-qtdatavisualization-scatter3d.xml">Scatter3D</db:link> graph. Anchor it to the parent bottom:</db:para>
<db:programlisting language="qml">Item {
    id: dataView
    anchors.bottom: parent.bottom
</db:programlisting>
<db:para>Next, add the <db:link xlink:href="qml-qtdatavisualization-scatter3d.xml">Scatter3D</db:link> graph itself. Add it inside the <db:code>dataView</db:code> and name it <db:code>scatterGraph</db:code>. Make it fill the <db:code>dataView</db:code>:</db:para>
<db:programlisting language="qml">Scatter3D {
    id: scatterGraph
    anchors.fill: parent
</db:programlisting>
<db:para>Now the graph is ready for use, but has no data. It also has the default axes and visual properties.</db:para>
<db:para>Next, modify some visual properties first by adding the following inside <db:code>scatterGraph</db:code>:</db:para>
<db:programlisting language="qml">theme: themeQt
shadowQuality: AbstractGraph3D.ShadowQualityHigh
scene.activeCamera.cameraPreset: Camera3D.CameraPresetFront
</db:programlisting>
<db:para>A customized theme was added, the shadow quality changed, and the camera position adjusted. The other visual properties are fine, so there is no need to change them.</db:para>
<db:para>The custom theme is based on a predefined theme, <db:code>Theme3D.ThemeQt</db:code>, but the font in it is changed:</db:para>
<db:programlisting language="qml">Theme3D {
    id: themeQt
    type: Theme3D.ThemeQt
    font.pointSize: 40
}
</db:programlisting>
<db:para>Then, start feeding the graph some data.</db:para>
</db:section>
<db:section xml:id="adding-data-to-the-graph">
<db:title>Adding Data to the Graph</db:title>
<db:para>Create a <db:code>Data</db:code> item inside the <db:code>mainView</db:code> and name it <db:code>seriesData</db:code>:</db:para>
<db:programlisting language="qml">Data {
    id: seriesData
}
</db:programlisting>
<db:para>The <db:code>seriesData</db:code> item contains the data models for all three series used in this example.</db:para>
<db:para>This is the component that holds the data in <db:code>Data.qml</db:code>. It has an <db:code>Item</db:code> as the main component.</db:para>
<db:para>In the main component, add the data itself to a <db:code>ListModel</db:code> and name it <db:code>dataModel</db:code>:</db:para>
<db:programlisting language="qml">ListModel {
    id: dataModel
    ListElement{ xPos: -10.0; yPos: 5.0; zPos: -5.0 }
    ...
</db:programlisting>
<db:para>Add two more of these to the other two series, and name them <db:code>dataModelTwo</db:code> and <db:code>dataModelThree</db:code>.</db:para>
<db:para>Then, expose the data models to be usable from <db:code>main.qml</db:code>. Do this by defining them as aliases in the main data component:</db:para>
<db:programlisting language="qml">property alias model: dataModel
property alias modelTwo: dataModelTwo
property alias modelThree: dataModelThree
</db:programlisting>
<db:para>Now you can use the data from <db:code>Data.qml</db:code> with <db:code>scatterGraph</db:code> in <db:code>main.qml</db:code>. First, add a <db:link xlink:href="qml-qtdatavisualization-scatter3dseries.xml">Scatter3DSeries</db:link> and call it <db:code>scatterSeries</db:code>:</db:para>
<db:programlisting language="qml">Scatter3DSeries {
    id: scatterSeries
</db:programlisting>
<db:para>Then, set up selection label format for the series:</db:para>
<db:programlisting language="qml">itemLabelFormat: &quot;Series 1: X:@xLabel Y:@yLabel Z:@zLabel&quot;
</db:programlisting>
<db:para>And finally, add the data for series one in a <db:link xlink:href="qml-qtdatavisualization-itemmodelscatterdataproxy.xml">ItemModelScatterDataProxy</db:link>. Set the data itself as the <db:code>itemModel</db:code> for the proxy:</db:para>
<db:programlisting language="qml">ItemModelScatterDataProxy {
    itemModel: seriesData.model
    xPosRole: &quot;xPos&quot;
    yPosRole: &quot;yPos&quot;
    zPosRole: &quot;zPos&quot;
}
</db:programlisting>
<db:para>Add the other two series in the same way, but modify some series-specific details a bit:</db:para>
<db:programlisting language="qml">Scatter3DSeries {
    id: scatterSeriesTwo
    itemLabelFormat: &quot;Series 2: X:@xLabel Y:@yLabel Z:@zLabel&quot;
    itemSize: 0.05
    mesh: Abstract3DSeries.MeshCube
    ...
</db:programlisting>
<db:para>Then, modify the properties of the default axes in <db:code>scatterGraph</db:code> a bit:</db:para>
<db:programlisting language="qml">axisX.segmentCount: 3
axisX.subSegmentCount: 2
axisX.labelFormat: &quot;%.2f&quot;
axisZ.segmentCount: 2
axisZ.subSegmentCount: 2
axisZ.labelFormat: &quot;%.2f&quot;
axisY.segmentCount: 2
axisY.subSegmentCount: 2
axisY.labelFormat: &quot;%.2f&quot;
</db:programlisting>
<db:para>After that, add a few buttons to the <db:code>mainView</db:code> to control the graph, one of which is shown as an example:</db:para>
<db:programlisting language="qml">Button {
    id: shadowToggle
    width: mainView.buttonWidth // Calculated elsewhere based on screen orientation
    anchors.left: parent.left
    anchors.top: parent.top
    anchors.margins: 5
    text: scatterGraph.shadowsSupported ? &quot;Hide Shadows&quot; : &quot;Shadows not supported&quot;
    enabled: scatterGraph.shadowsSupported
    onClicked: {
        if (scatterGraph.shadowQuality === AbstractGraph3D.ShadowQualityNone) {
            scatterGraph.shadowQuality = AbstractGraph3D.ShadowQualityHigh;
            text = &quot;Hide Shadows&quot;;
        } else {
            scatterGraph.shadowQuality = AbstractGraph3D.ShadowQualityNone;
            text = &quot;Show Shadows&quot;;
        }
    }
}
</db:programlisting>
<db:para>Then, modify <db:code>dataView</db:code> to make some room for the buttons at the top:</db:para>
<db:programlisting language="qml">Item {
    id: dataView
    anchors.bottom: parent.bottom
    width: parent.width
    // Adjust the space based on screen orientation:
    // If we're in portrait mode, we have 3 rows of buttons, otherwise they are all in one row.
    height: parent.height - (mainView.portraitMode ? shadowToggle.implicitHeight * 3 + 25
                                                   : shadowToggle.implicitHeight + 10)
    ...
</db:programlisting>
<db:para>And you're done!</db:para>
</db:section>
<db:section xml:id="example-contents">
<db:title>Example Contents</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdatavis3d.git/tree/examples/datavisualization/qmlscatter?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:section>
</db:article>
