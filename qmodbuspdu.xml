<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModbusPdu Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link> is a abstract container class containing the function code and payload that is stored inside a Modbus ADU.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModbusPdu</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmodbusrequest.xml" xlink:role="class">QModbusRequest</db:link> and <db:link xlink:href="qmodbusresponse.xml" xlink:role="class">QModbusResponse</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class provides access to the raw Modbus protocol packets as defined by the Modbus Application Protocol Specification 1.1b.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ExceptionCode-enum">
<db:title>enum QModbusPdu::ExceptionCode</db:title>
<db:para>This enum describes all the possible error conditions as defined by Modbus Exception Codes. They are set by the server after checking the appropriate error conditions in the reply to a request and must be decoded by the client to operate on the exception code.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::IllegalFunction</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Function code is not supported by device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::IllegalDataAddress</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The received data address in the query is not an allowable address for the Modbus server.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::IllegalDataValue</db:code></db:para>
</db:td>
<db:td><db:code>0x03</db:code></db:td>
<db:td>
<db:para>The contained value in the request data field is not an allowable value for the Modbus server.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ServerDeviceFailure</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>An irrecoverable error occurred while the server was attempting to perform the requested action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::Acknowledge</db:code></db:para>
</db:td>
<db:td><db:code>0x05</db:code></db:td>
<db:td>
<db:para>Specialized use in conjunction with programming commands.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ServerDeviceBusy</db:code></db:para>
</db:td>
<db:td><db:code>0x06</db:code></db:td>
<db:td>
<db:para>The server is engaged in processing a long duration program command.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::NegativeAcknowledge</db:code></db:para>
</db:td>
<db:td><db:code>0x07</db:code></db:td>
<db:td>
<db:para>The server cannot perform the program function received in the query. This code is returned for an unsuccessful programming request. The client should request diagnostic or error information from the server.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::MemoryParityError</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Indicates that the extended file area failed to pass a consistency check. Used in conjunction with function codes 20 and 21. The exception code does not refer to any parity settings of the transmission line but only to the servers' internal memory of file records.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::GatewayPathUnavailable</db:code></db:para>
</db:td>
<db:td><db:code>0x0A</db:code></db:td>
<db:td>
<db:para>Indicates that the gateway was unable to allocate an internal communication path from the input port to the output port for processing the request.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::GatewayTargetDeviceFailedToRespond</db:code></db:para>
</db:td>
<db:td><db:code>0x0B</db:code></db:td>
<db:td>
<db:para>Indicates that no response was obtained from the target device behind a gateway. Usually this means the target device is not online on the network.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ExtendedException</db:code></db:para>
</db:td>
<db:td><db:code>0xFF</db:code></db:td>
<db:td>
<db:para>This is an extended exception as per Modbus specification. Generally this code is used to describe an exception that is otherwise further described.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="FunctionCode-enum">
<db:title>enum QModbusPdu::FunctionCode</db:title>
<db:para>Defines the function code and the implicit type of action required by the server. Not all Modbus devices can handle the same set of function codes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::Invalid</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>Set by the default constructor, do not use.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ReadCoils</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Requests the status of one or more coils from a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ReadDiscreteInputs</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Requests the status of one or more input registers from a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ReadHoldingRegisters</db:code></db:para>
</db:td>
<db:td><db:code>0x03</db:code></db:td>
<db:td>
<db:para>Requests the status of one or more holding register values from a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ReadInputRegisters</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Requests the status of one or more input register values from a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::WriteSingleCoil</db:code></db:para>
</db:td>
<db:td><db:code>0x05</db:code></db:td>
<db:td>
<db:para>Requests to write a single coil on a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::WriteSingleRegister</db:code></db:para>
</db:td>
<db:td><db:code>0x06</db:code></db:td>
<db:td>
<db:para>Requests to write a single holding register on a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ReadExceptionStatus</db:code></db:para>
</db:td>
<db:td><db:code>0x07</db:code></db:td>
<db:td>
<db:para>Requests the status of the eight Exception Status outputs on a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::Diagnostics</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Used to provide a series of tests for checking the client server communication system, or checking internal</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::GetCommEventCounter</db:code></db:para>
</db:td>
<db:td><db:code>0x0B</db:code></db:td>
<db:td>
<db:para>Requests a status word and an event count from the device's communication event counter.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::GetCommEventLog</db:code></db:para>
</db:td>
<db:td><db:code>0x0C</db:code></db:td>
<db:td>
<db:para>Requests a status word, event count, message count, and a field of event bytes from a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::WriteMultipleCoils</db:code></db:para>
</db:td>
<db:td><db:code>0x0F</db:code></db:td>
<db:td>
<db:para>Requests to write one or more coils on a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::WriteMultipleRegisters</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Requests to write one or more holding registers on a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ReportServerId</db:code></db:para>
</db:td>
<db:td><db:code>0x11</db:code></db:td>
<db:td>
<db:para>Requests the description of the type, the current status, and other information specific to a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ReadFileRecord</db:code></db:para>
</db:td>
<db:td><db:code>0x14</db:code></db:td>
<db:td>
<db:para>Requests a file record read.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::WriteFileRecord</db:code></db:para>
</db:td>
<db:td><db:code>0x15</db:code></db:td>
<db:td>
<db:para>Requests a file record write.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::MaskWriteRegister</db:code></db:para>
</db:td>
<db:td><db:code>0x16</db:code></db:td>
<db:td>
<db:para>Requests to modify the contents of a specified holding register using a combination of an AND or OR mask, and the register's current contents.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ReadWriteMultipleRegisters</db:code></db:para>
</db:td>
<db:td><db:code>0x17</db:code></db:td>
<db:td>
<db:para>Requests the status of one or more holding register and at the same time to write one or more holding registers on a device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::ReadFifoQueue</db:code></db:para>
</db:td>
<db:td><db:code>0x18</db:code></db:td>
<db:td>
<db:para>Requests to read the contents of a First-In-First-Out (FIFO) queue of register in a remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::EncapsulatedInterfaceTransport</db:code></db:para>
</db:td>
<db:td><db:code>0x2B</db:code></db:td>
<db:td>
<db:para>Please refer to Annex A of the Modbus specification.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link></db:emphasis>::UndefinedFunctionCode</db:code></db:para>
</db:td>
<db:td><db:code>0x100</db:code></db:td>
<db:td>
<db:para>Do not use.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModbusPdu">
<db:title>[noexcept] QModbusPdu::QModbusPdu()</db:title>
<db:para>Constructs an invalid <db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link>.</db:para>
</db:section>
<db:section xml:id="QModbusPdu-2">
<db:title>[protected] QModbusPdu::QModbusPdu(QModbusPdu::FunctionCode <db:emphasis>code</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link> with function code set to <db:code role="parameter">code</db:code> and payload set to <db:code role="parameter">data</db:code>. The data is expected to be stored in big-endian byte order already.</db:para>
</db:section>
<db:section xml:id="QModbusPdu-1">
<db:title>[noexcept protected] QModbusPdu::QModbusPdu(const QModbusPdu &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link> that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QModbusPdu">
<db:title>[virtual noexcept] QModbusPdu::~QModbusPdu()</db:title>
<db:para>Destroys a <db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>QByteArray QModbusPdu::data() const</db:title>
<db:para>Returns the PDU's payload, excluding the function code. The payload is stored in big-endian byte order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbuspdu.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dataSize">
<db:title>qint16 QModbusPdu::dataSize() const</db:title>
<db:para>Returns the PDU's data size, excluding the function code.</db:para>
</db:section>
<db:section xml:id="exceptionCode">
<db:title>QModbusPdu::ExceptionCode QModbusPdu::exceptionCode() const</db:title>
<db:para>Returns the response's exception code.</db:para>
</db:section>
<db:section xml:id="functionCode">
<db:title>QModbusPdu::FunctionCode QModbusPdu::functionCode() const</db:title>
<db:para>Returns the PDU's function code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbuspdu.xml#setFunctionCode">setFunctionCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isException">
<db:title>bool QModbusPdu::isException() const</db:title>
<db:para>Returns true if the PDU contains an exception code; otherwise false.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QModbusPdu::isValid() const</db:title>
<db:para>Returns true if the PDU is valid; otherwise false.</db:para>
<db:para>A PDU is considered valid if the message code is in the range of 1 to 255 decimal and the PDU's compound size (function code + data) does not exceed 253 bytes. A default constructed PDU is invalid.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>void QModbusPdu::setData(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Sets the PDU's function payload to <db:code role="parameter">data</db:code>. The data is expected to be stored in big-endian byte order already.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbuspdu.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFunctionCode">
<db:title>[virtual] void QModbusPdu::setFunctionCode(QModbusPdu::FunctionCode <db:emphasis>code</db:emphasis>)</db:title>
<db:para>Sets the PDU's function code to <db:code role="parameter">code</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbuspdu.xml#functionCode">functionCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qint16 QModbusPdu::size() const</db:title>
<db:para>Returns the PDU's full size, including function code and data size.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept protected] QModbusPdu &amp;QModbusPdu::operator=(const QModbusPdu &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Makes a copy of the <db:code role="parameter">other</db:code> and assigns it to this <db:link xlink:href="qmodbuspdu.xml">QModbusPdu</db:link> object.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="ExceptionByte-var">
<db:title>const quint8 QModbusPdu::ExceptionByte</db:title>
<db:para>The variable is initialized to 0x80.</db:para>
<db:para>Exceptions are reported in a defined packet format. A function code is returned to the requesting client equal to the original function code, except with its most significant bit set. This is equivalent to adding 0x80 to the value of the original function code.</db:para>
<db:para>This field may be used to mask the exception bit in the function field of a raw Modbus packet.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QModbusPdu &amp;<db:emphasis>pdu</db:emphasis>)</db:title>
<db:para>Writes a <db:code role="parameter">pdu</db:code> to the <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QModbusPdu &amp;<db:emphasis>pdu</db:emphasis>)</db:title>
<db:para>Writes the Modbus <db:code role="parameter">pdu</db:code> to the <db:code role="parameter">debug</db:code> stream.</db:para>
</db:section>
</db:section>
</db:article>
