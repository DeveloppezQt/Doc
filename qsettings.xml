<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSettings Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsettings.xml">QSettings</db:link> class provides persistent platform-independent application settings.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSettings</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSettings is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Users normally expect an application to remember its settings (window sizes and positions, options, etc.) across sessions. This information is often stored in the system registry on Windows, and in property list files on macOS and iOS. On Unix systems, in the absence of a standard, many applications (including the KDE applications) use INI text files.</db:para>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link> is an abstraction around these technologies, enabling you to save and restore application settings in a portable manner. It also supports <db:link xlink:href="qsettings.xml#registerFormat">custom storage formats</db:link>.</db:para>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link>'s API is based on <db:link xlink:href="qvariant.xml">QVariant</db:link>, allowing you to save most value-based types, such as <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qrect.xml">QRect</db:link>, and <db:link xlink:href="qimage.xml">QImage</db:link>, with the minimum of effort.</db:para>
<db:para>If all you need is a non-persistent memory-based structure, consider using <db:link xlink:href="qmap.xml">QMap</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qvariant.xml">QVariant</db:link>&gt; instead.</db:para>
<db:section xml:id="basic-usage">
<db:title>Basic Usage</db:title>
<db:para>When creating a <db:link xlink:href="qsettings.xml">QSettings</db:link> object, you must pass the name of your company or organization as well as the name of your application. For example, if your product is called Star Runner and your company is called MySoft, you would construct the <db:link xlink:href="qsettings.xml">QSettings</db:link> object as follows:</db:para>
<db:programlisting language="cpp">    QSettings settings(&quot;MySoft&quot;, &quot;Star Runner&quot;);
</db:programlisting>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link> objects can be created either on the stack or on the heap (i.e. using new). Constructing and destroying a <db:link xlink:href="qsettings.xml">QSettings</db:link> object is very fast.</db:para>
<db:para>If you use <db:link xlink:href="qsettings.xml">QSettings</db:link> from many places in your application, you might want to specify the organization name and the application name using <db:link xlink:href="qcoreapplication.xml#organizationName-prop">QCoreApplication::setOrganizationName</db:link>() and <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::setApplicationName</db:link>(), and then use the default <db:link xlink:href="qsettings.xml">QSettings</db:link> constructor:</db:para>
<db:programlisting language="cpp">    QCoreApplication::setOrganizationName(&quot;MySoft&quot;);
    QCoreApplication::setOrganizationDomain(&quot;mysoft.com&quot;);
    QCoreApplication::setApplicationName(&quot;Star Runner&quot;);
    ...
    QSettings settings;
</db:programlisting>
<db:para>(Here, we also specify the organization's Internet domain. When the Internet domain is set, it is used on macOS and iOS instead of the organization name, since macOS and iOS applications conventionally use Internet domains to identify themselves. If no domain is set, a fake domain is derived from the organization name. See the <db:link xlink:href="qsettings.xml#platform-specific-notes">Platform-Specific Notes</db:link> below for details.)</db:para>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link> stores settings. Each setting consists of a <db:link xlink:href="qstring.xml">QString</db:link> that specifies the setting's name (the <db:emphasis>key</db:emphasis>) and a <db:link xlink:href="qvariant.xml">QVariant</db:link> that stores the data associated with the key. To write a setting, use <db:link xlink:href="qsettings.xml#setValue">setValue</db:link>(). For example:</db:para>
<db:programlisting language="cpp">    settings.setValue(&quot;editor/wrapMargin&quot;, 68);
</db:programlisting>
<db:para>If there already exists a setting with the same key, the existing value is overwritten by the new value. For efficiency, the changes may not be saved to permanent storage immediately. (You can always call <db:link xlink:href="qsettings.xml#sync">sync</db:link>() to commit your changes.)</db:para>
<db:para>You can get a setting's value back using <db:link xlink:href="qsettings.xml#value">value</db:link>():</db:para>
<db:programlisting language="cpp">    int margin = settings.value(&quot;editor/wrapMargin&quot;).toInt();
</db:programlisting>
<db:para>If there is no setting with the specified name, <db:link xlink:href="qsettings.xml">QSettings</db:link> returns a null <db:link xlink:href="qvariant.xml">QVariant</db:link> (which can be converted to the integer 0). You can specify another default value by passing a second argument to <db:link xlink:href="qsettings.xml#value">value</db:link>():</db:para>
<db:programlisting language="cpp">    int margin = settings.value(&quot;editor/wrapMargin&quot;, 80).toInt();
</db:programlisting>
<db:para>To test whether a given key exists, call <db:link xlink:href="qsettings.xml#contains">contains</db:link>(). To remove the setting associated with a key, call <db:link xlink:href="qsettings.xml#remove">remove</db:link>(). To obtain the list of all keys, call <db:link xlink:href="qsettings.xml#allKeys">allKeys</db:link>(). To remove all keys, call <db:link xlink:href="qsettings.xml#clear">clear</db:link>().</db:para>
</db:section>
<db:section xml:id="qvariant-and-gui-types">
<db:title>QVariant and GUI Types</db:title>
<db:para>Because <db:link xlink:href="qvariant.xml">QVariant</db:link> is part of the Qt Core module, it cannot provide conversion functions to data types such as <db:link xlink:href="qcolor.xml">QColor</db:link>, <db:link xlink:href="qimage.xml">QImage</db:link>, and <db:link xlink:href="qpixmap.xml">QPixmap</db:link>, which are part of Qt GUI. In other words, there is no toColor(), toImage(), or toPixmap() functions in <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>Instead, you can use the QVariant::value() or the qVariantValue() template function. For example:</db:para>
<db:programlisting language="cpp">QSettings settings(&quot;MySoft&quot;, &quot;Star Runner&quot;);
QColor color = settings.value(&quot;DataPump/bgcolor&quot;).value&lt;QColor&gt;();
</db:programlisting>
<db:para>The inverse conversion (e.g., from <db:link xlink:href="qcolor.xml">QColor</db:link> to <db:link xlink:href="qvariant.xml">QVariant</db:link>) is automatic for all data types supported by <db:link xlink:href="qvariant.xml">QVariant</db:link>, including GUI-related types:</db:para>
<db:programlisting language="cpp">QSettings settings(&quot;MySoft&quot;, &quot;Star Runner&quot;);
QColor color = palette().background().color();
settings.setValue(&quot;DataPump/bgcolor&quot;, color);
</db:programlisting>
<db:para>Custom types registered using qRegisterMetaType() and qRegisterMetaTypeStreamOperators() can be stored using <db:link xlink:href="qsettings.xml">QSettings</db:link>.</db:para>
</db:section>
<db:section xml:id="section-and-key-syntax">
<db:title>Section and Key Syntax</db:title>
<db:para>Setting keys can contain any Unicode characters. The Windows registry and INI files use case-insensitive keys, whereas the CFPreferences API on macOS and iOS uses case-sensitive keys. To avoid portability problems, follow these simple rules:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Always refer to the same key using the same case. For example, if you refer to a key as &quot;text fonts&quot; in one place in your code, don't refer to it as &quot;Text Fonts&quot; somewhere else.</db:para>
</db:listitem>
<db:listitem>
<db:para>Avoid key names that are identical except for the case. For example, if you have a key called &quot;MainWindow&quot;, don't try to save another key as &quot;mainwindow&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para>Do not use slashes ('/' and '\') in section or key names; the backslash character is used to separate sub keys (see below). On windows '\' are converted by <db:link xlink:href="qsettings.xml">QSettings</db:link> to '/', which makes them identical.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>You can form hierarchical keys using the '/' character as a separator, similar to Unix file paths. For example:</db:para>
<db:programlisting language="cpp">    settings.setValue(&quot;mainwindow/size&quot;, win-&gt;size());
    settings.setValue(&quot;mainwindow/fullScreen&quot;, win-&gt;isFullScreen());
    settings.setValue(&quot;outputpanel/visible&quot;, panel-&gt;isVisible());
</db:programlisting>
<db:para>If you want to save or restore many settings with the same prefix, you can specify the prefix using <db:link xlink:href="qsettings.xml#beginGroup">beginGroup</db:link>() and call <db:link xlink:href="qsettings.xml#endGroup">endGroup</db:link>() at the end. Here's the same example again, but this time using the group mechanism:</db:para>
<db:programlisting language="cpp">    settings.beginGroup(&quot;mainwindow&quot;);
    settings.setValue(&quot;size&quot;, win-&gt;size());
    settings.setValue(&quot;fullScreen&quot;, win-&gt;isFullScreen());
    settings.endGroup();

    settings.beginGroup(&quot;outputpanel&quot;);
    settings.setValue(&quot;visible&quot;, panel-&gt;isVisible());
    settings.endGroup();
</db:programlisting>
<db:para>If a group is set using <db:link xlink:href="qsettings.xml#beginGroup">beginGroup</db:link>(), the behavior of most functions changes consequently. Groups can be set recursively.</db:para>
<db:para>In addition to groups, <db:link xlink:href="qsettings.xml">QSettings</db:link> also supports an &quot;array&quot; concept. See <db:link xlink:href="qsettings.xml#beginReadArray">beginReadArray</db:link>() and <db:link xlink:href="qsettings.xml#beginWriteArray">beginWriteArray</db:link>() for details.</db:para>
</db:section>
<db:section xml:id="fallback-mechanism">
<db:title>Fallback Mechanism</db:title>
<db:para>Let's assume that you have created a <db:link xlink:href="qsettings.xml">QSettings</db:link> object with the organization name MySoft and the application name Star Runner. When you look up a value, up to four locations are searched in that order:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>a user-specific location for the Star Runner application</db:para>
</db:listitem>
<db:listitem>
<db:para>a user-specific location for all applications by MySoft</db:para>
</db:listitem>
<db:listitem>
<db:para>a system-wide location for the Star Runner application</db:para>
</db:listitem>
<db:listitem>
<db:para>a system-wide location for all applications by MySoft</db:para>
</db:listitem>
</db:orderedlist>
<db:para>(See <db:link xlink:href="qsettings.xml#platform-specific-notes">Platform-Specific Notes</db:link> below for information on what these locations are on the different platforms supported by Qt.)</db:para>
<db:para>If a key cannot be found in the first location, the search goes on in the second location, and so on. This enables you to store system-wide or organization-wide settings and to override them on a per-user or per-application basis. To turn off this mechanism, call <db:link xlink:href="qsettings.xml#setFallbacksEnabled">setFallbacksEnabled</db:link>(false).</db:para>
<db:para>Although keys from all four locations are available for reading, only the first file (the user-specific location for the application at hand) is accessible for writing. To write to any of the other files, omit the application name and/or specify <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::SystemScope</db:link> (as opposed to <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::UserScope</db:link>, the default).</db:para>
<db:para>Let's see with an example:</db:para>
<db:programlisting language="cpp">    QSettings obj1(&quot;MySoft&quot;, &quot;Star Runner&quot;);
    QSettings obj2(&quot;MySoft&quot;);
    QSettings obj3(QSettings::SystemScope, &quot;MySoft&quot;, &quot;Star Runner&quot;);
    QSettings obj4(QSettings::SystemScope, &quot;MySoft&quot;);
</db:programlisting>
<db:para>The table below summarizes which <db:link xlink:href="qsettings.xml">QSettings</db:link> objects access which location. &quot;<db:emphasis role="bold">X</db:emphasis>&quot; means that the location is the main location associated to the <db:link xlink:href="qsettings.xml">QSettings</db:link> object and is used both for reading and for writing; &quot;o&quot; means that the location is used as a fallback when reading.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Locations</db:para>
</db:th>
<db:th>
<db:para>obj1</db:para>
</db:th>
<db:th>
<db:para>obj2</db:para>
</db:th>
<db:th>
<db:para>obj3</db:para>
</db:th>
<db:th>
<db:para>obj4</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1. User, Application</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">X</db:emphasis></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2. User, Organization</db:para>
</db:td>
<db:td>
<db:para>o</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">X</db:emphasis></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3. System, Application</db:para>
</db:td>
<db:td>
<db:para>o</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">X</db:emphasis></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4. System, Organization</db:para>
</db:td>
<db:td>
<db:para>o</db:para>
</db:td>
<db:td>
<db:para>o</db:para>
</db:td>
<db:td>
<db:para>o</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">X</db:emphasis></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The beauty of this mechanism is that it works on all platforms supported by Qt and that it still gives you a lot of flexibility, without requiring you to specify any file names or registry paths.</db:para>
<db:para>If you want to use INI files on all platforms instead of the native API, you can pass <db:link xlink:href="qsettings.xml#Format-enum">QSettings::IniFormat</db:link> as the first argument to the <db:link xlink:href="qsettings.xml">QSettings</db:link> constructor, followed by the scope, the organization name, and the application name:</db:para>
<db:programlisting language="cpp">    QSettings settings(QSettings::IniFormat, QSettings::UserScope,
                       &quot;MySoft&quot;, &quot;Star Runner&quot;);
</db:programlisting>
<db:para>The <db:link xlink:href="qtwidgets-tools-settingseditor-example.xml">Settings Editor</db:link> example lets you experiment with different settings location and with fallbacks turned on or off.</db:para>
</db:section>
<db:section xml:id="restoring-the-state-of-a-gui-application">
<db:title>Restoring the State of a GUI Application</db:title>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link> is often used to store the state of a GUI application. The following example illustrates how to use <db:link xlink:href="qsettings.xml">QSettings</db:link> to save and restore the geometry of an application's main window.</db:para>
<db:programlisting language="cpp">void MainWindow::writeSettings()
{
    QSettings settings(&quot;Moose Soft&quot;, &quot;Clipper&quot;);

    settings.beginGroup(&quot;MainWindow&quot;);
    settings.setValue(&quot;size&quot;, size());
    settings.setValue(&quot;pos&quot;, pos());
    settings.endGroup();
}

void MainWindow::readSettings()
{
    QSettings settings(&quot;Moose Soft&quot;, &quot;Clipper&quot;);

    settings.beginGroup(&quot;MainWindow&quot;);
    resize(settings.value(&quot;size&quot;, QSize(400, 400)).toSize());
    move(settings.value(&quot;pos&quot;, QPoint(200, 200)).toPoint());
    settings.endGroup();
}
</db:programlisting>
<db:para>See <db:link xlink:href="application-windows.xml#window-geometry">Window Geometry</db:link> for a discussion on why it is better to call <db:link xlink:href="qwidget.xml#size-prop">QWidget::resize</db:link>() and <db:link xlink:href="qwidget.xml#pos-prop">QWidget::move</db:link>() rather than <db:link xlink:href="qwidget.xml#geometry-prop">QWidget::setGeometry</db:link>() to restore a window's geometry.</db:para>
<db:para>The readSettings() and writeSettings() functions must be called from the main window's constructor and close event handler as follows:</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
{
    ...
    readSettings();
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    if (userReallyWantsToQuit()) {
        writeSettings();
        event-&gt;accept();
    } else {
        event-&gt;ignore();
    }
}
</db:programlisting>
<db:para>See the <db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application</db:link> example for a self-contained example that uses <db:link xlink:href="qsettings.xml">QSettings</db:link>.</db:para>
</db:section>
<db:section xml:id="accessing-settings-from-multiple-threads-or-processes-simultaneously">
<db:title>Accessing Settings from Multiple Threads or Processes Simultaneously</db:title>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link> is <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>. This means that you can use distinct <db:link xlink:href="qsettings.xml">QSettings</db:link> object in different threads simultaneously. This guarantee stands even when the <db:link xlink:href="qsettings.xml">QSettings</db:link> objects refer to the same files on disk (or to the same entries in the system registry). If a setting is modified through one <db:link xlink:href="qsettings.xml">QSettings</db:link> object, the change will immediately be visible in any other <db:link xlink:href="qsettings.xml">QSettings</db:link> objects that operate on the same location and that live in the same process.</db:para>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link> can safely be used from different processes (which can be different instances of your application running at the same time or different applications altogether) to read and write to the same system locations. It uses advisory file locking and a smart merging algorithm to ensure data integrity. Note that <db:link xlink:href="qsettings.xml#sync">sync</db:link>() imports changes made by other processes (in addition to writing the changes from this <db:link xlink:href="qsettings.xml">QSettings</db:link>).</db:para>
</db:section>
<db:section xml:id="platform-specific-notes">
<db:title>Platform-Specific Notes</db:title>
<db:section xml:id="locations-where-application-settings-are-stored">
<db:title>Locations Where Application Settings Are Stored</db:title>
<db:para>As mentioned in the <db:link xlink:href="qsettings.xml#fallback-mechanism">Fallback Mechanism</db:link> section, <db:link xlink:href="qsettings.xml">QSettings</db:link> stores settings for an application in up to four locations, depending on whether the settings are user-specific or system-wide and whether the settings are application-specific or organization-wide. For simplicity, we're assuming the organization is called MySoft and the application is called Star Runner.</db:para>
<db:para>On Unix systems, if the file format is <db:link xlink:href="qsettings.xml#Format-enum">NativeFormat</db:link>, the following files are used by default:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>$HOME/.config/MySoft/Star Runner.conf (Qt for Embedded Linux: $HOME/Settings/MySoft/Star Runner.conf)</db:para>
</db:listitem>
<db:listitem>
<db:para>$HOME/.config/MySoft.conf (Qt for Embedded Linux: $HOME/Settings/MySoft.conf)</db:para>
</db:listitem>
<db:listitem>
<db:para>/etc/xdg/MySoft/Star Runner.conf</db:para>
</db:listitem>
<db:listitem>
<db:para>/etc/xdg/MySoft.conf</db:para>
</db:listitem>
</db:orderedlist>
<db:para>On macOS versions 10.2 and 10.3, these files are used by default:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>$HOME/Library/Preferences/com.MySoft.Star Runner.plist</db:para>
</db:listitem>
<db:listitem>
<db:para>$HOME/Library/Preferences/com.MySoft.plist</db:para>
</db:listitem>
<db:listitem>
<db:para>/Library/Preferences/com.MySoft.Star Runner.plist</db:para>
</db:listitem>
<db:listitem>
<db:para>/Library/Preferences/com.MySoft.plist</db:para>
</db:listitem>
</db:orderedlist>
<db:para>On Windows, <db:link xlink:href="qsettings.xml#Format-enum">NativeFormat</db:link> settings are stored in the following registry paths:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>HKEY_CURRENT_USER\Software\MySoft\Star Runner</db:para>
</db:listitem>
<db:listitem>
<db:para>HKEY_CURRENT_USER\Software\MySoft\OrganizationDefaults</db:para>
</db:listitem>
<db:listitem>
<db:para>HKEY_LOCAL_MACHINE\Software\MySoft\Star Runner</db:para>
</db:listitem>
<db:listitem>
<db:para>HKEY_LOCAL_MACHINE\Software\MySoft\OrganizationDefaults</db:para>
</db:listitem>
</db:orderedlist>
<db:note>
<db:para>On Windows, for 32-bit programs running in WOW64 mode, settings are stored in the following registry path: HKEY_LOCAL_MACHINE\Software\WOW6432node.</db:para>
</db:note>
<db:para>If the file format is <db:link xlink:href="qsettings.xml#Format-enum">NativeFormat</db:link>, this is &quot;Settings/MySoft/Star Runner.conf&quot; in the application's home directory.</db:para>
<db:para>If the file format is <db:link xlink:href="qsettings.xml#Format-enum">IniFormat</db:link>, the following files are used on Unix, macOS, and iOS:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>$HOME/.config/MySoft/Star Runner.ini (Qt for Embedded Linux: $HOME/Settings/MySoft/Star Runner.ini)</db:para>
</db:listitem>
<db:listitem>
<db:para>$HOME/.config/MySoft.ini (Qt for Embedded Linux: $HOME/Settings/MySoft.ini)</db:para>
</db:listitem>
<db:listitem>
<db:para>/etc/xdg/MySoft/Star Runner.ini</db:para>
</db:listitem>
<db:listitem>
<db:para>/etc/xdg/MySoft.ini</db:para>
</db:listitem>
</db:orderedlist>
<db:para>On Windows, the following files are used:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>FOLDERID_RoamingAppData\MySoft\Star Runner.ini</db:para>
</db:listitem>
<db:listitem>
<db:para>FOLDERID_RoamingAppData\MySoft.ini</db:para>
</db:listitem>
<db:listitem>
<db:para>FOLDERID_ProgramData\MySoft\Star Runner.ini</db:para>
</db:listitem>
<db:listitem>
<db:para>FOLDERID_ProgramData\MySoft.ini</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The identifiers prefixed by FOLDERID_ are special item ID lists to be passed to the Win32 API function SHGetKnownFolderPath() to obtain the corresponding path.</db:para>
<db:para>FOLDERID_RoamingAppData usually points to <db:code>C:\Users\<db:emphasis>User Name</db:emphasis>\AppData\Roaming</db:code>, also shown by the environment variable %APPDATA%.</db:para>
<db:para>FOLDERID_ProgramData usually points to <db:code>C:\ProgramData</db:code>.</db:para>
<db:para>If the file format is <db:link xlink:href="qsettings.xml#Format-enum">IniFormat</db:link>, this is &quot;Settings/MySoft/Star Runner.ini&quot; in the application's home directory.</db:para>
<db:para>The paths for the .ini and .conf files can be changed using <db:link xlink:href="qsettings.xml#setPath">setPath</db:link>(). On Unix, macOS, and iOS the user can override them by setting the XDG_CONFIG_HOME environment variable; see <db:link xlink:href="qsettings.xml#setPath">setPath</db:link>() for details.</db:para>
</db:section>
<db:section xml:id="accessing-ini-and-plist-files-directly">
<db:title>Accessing INI and .plist Files Directly</db:title>
<db:para>Sometimes you do want to access settings stored in a specific file or registry path. On all platforms, if you want to read an INI file directly, you can use the <db:link xlink:href="qsettings.xml">QSettings</db:link> constructor that takes a file name as first argument and pass <db:link xlink:href="qsettings.xml#Format-enum">QSettings::IniFormat</db:link> as second argument. For example:</db:para>
<db:programlisting language="cpp">QSettings settings(&quot;/home/petra/misc/myapp.ini&quot;,
                   QSettings::IniFormat);
</db:programlisting>
<db:para>You can then use the <db:link xlink:href="qsettings.xml">QSettings</db:link> object to read and write settings in the file.</db:para>
<db:para>On macOS and iOS, you can access property list .plist files by passing <db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link> as second argument. For example:</db:para>
<db:programlisting language="cpp">QSettings settings(&quot;/Users/petra/misc/myapp.plist&quot;,
                   QSettings::NativeFormat);
</db:programlisting>
</db:section>
<db:section xml:id="accessing-the-windows-registry-directly">
<db:title>Accessing the Windows Registry Directly</db:title>
<db:para>On Windows, <db:link xlink:href="qsettings.xml">QSettings</db:link> lets you access settings that have been written with <db:link xlink:href="qsettings.xml">QSettings</db:link> (or settings in a supported format, e.g., string data) in the system registry. This is done by constructing a <db:link xlink:href="qsettings.xml">QSettings</db:link> object with a path in the registry and <db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QSettings settings(&quot;HKEY_CURRENT_USER\\Software\\Microsoft\\Office&quot;,
                   QSettings::NativeFormat);
</db:programlisting>
<db:para>All the registry entries that appear under the specified path can be read or written through the <db:link xlink:href="qsettings.xml">QSettings</db:link> object as usual (using forward slashes instead of backslashes). For example:</db:para>
<db:programlisting language="cpp">settings.setValue(&quot;11.0/Outlook/Security/DontTrustInstalledFiles&quot;, 0);
</db:programlisting>
<db:para>Note that the backslash character is, as mentioned, used by <db:link xlink:href="qsettings.xml">QSettings</db:link> to separate subkeys. As a result, you cannot read or write windows registry entries that contain slashes or backslashes; you should use a native windows API if you need to do so.</db:para>
</db:section>
<db:section xml:id="accessing-common-registry-settings-on-windows">
<db:title>Accessing Common Registry Settings on Windows</db:title>
<db:para>On Windows, it is possible for a key to have both a value and subkeys. Its default value is accessed by using &quot;Default&quot; or &quot;.&quot; in place of a subkey:</db:para>
<db:programlisting language="cpp">settings.setValue(&quot;HKEY_CURRENT_USER\\MySoft\\Star Runner\\Galaxy&quot;, &quot;Milkyway&quot;);
settings.setValue(&quot;HKEY_CURRENT_USER\\MySoft\\Star Runner\\Galaxy\\Sun&quot;, &quot;OurStar&quot;);
settings.value(&quot;HKEY_CURRENT_USER\\MySoft\\Star Runner\\Galaxy\\Default&quot;); // returns &quot;Milkyway&quot;
</db:programlisting>
<db:para>On other platforms than Windows, &quot;Default&quot; and &quot;.&quot; would be treated as regular subkeys.</db:para>
</db:section>
<db:section xml:id="platform-limitations">
<db:title>Platform Limitations</db:title>
<db:para>While <db:link xlink:href="qsettings.xml">QSettings</db:link> attempts to smooth over the differences between the different supported platforms, there are still a few differences that you should be aware of when porting your application:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The Windows system registry has the following limitations: A subkey may not exceed 255 characters, an entry's value may not exceed 16,383 characters, and all the values of a key may not exceed 65,535 characters. One way to work around these limitations is to store the settings using the <db:link xlink:href="qsettings.xml#Format-enum">IniFormat</db:link> instead of the <db:link xlink:href="qsettings.xml#Format-enum">NativeFormat</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>On macOS and iOS, <db:link xlink:href="qsettings.xml#allKeys">allKeys</db:link>() will return some extra keys for global settings that apply to all applications. These keys can be read using <db:link xlink:href="qsettings.xml#value">value</db:link>() but cannot be changed, only shadowed. Calling <db:link xlink:href="qsettings.xml#setFallbacksEnabled">setFallbacksEnabled</db:link>(false) will hide these global settings.</db:para>
</db:listitem>
<db:listitem>
<db:para>On macOS and iOS, the CFPreferences API used by <db:link xlink:href="qsettings.xml">QSettings</db:link> expects Internet domain names rather than organization names. To provide a uniform API, <db:link xlink:href="qsettings.xml">QSettings</db:link> derives a fake domain name from the organization name (unless the organization name already is a domain name, e.g. OpenOffice.org). The algorithm appends &quot;.com&quot; to the company name and replaces spaces and other illegal characters with hyphens. If you want to specify a different domain name, call <db:link xlink:href="qcoreapplication.xml#organizationDomain-prop">QCoreApplication::setOrganizationDomain</db:link>(), <db:link xlink:href="qcoreapplication.xml#organizationName-prop">QCoreApplication::setOrganizationName</db:link>(), and <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::setApplicationName</db:link>() in your main() function and then use the default <db:link xlink:href="qsettings.xml">QSettings</db:link> constructor. Another solution is to use preprocessor directives, for example:</db:para>
<db:programlisting language="cpp">#ifdef Q_OS_MAC
    QSettings settings(&quot;grenoullelogique.fr&quot;, &quot;Squash&quot;);
#else
    QSettings settings(&quot;Grenoulle Logique&quot;, &quot;Squash&quot;);
#endif
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>On macOS, permissions to access settings not belonging to the current user (i.e. <db:link xlink:href="qsettings.xml#Scope-enum">SystemScope</db:link>) have changed with 10.7 (Lion). Prior to that version, users having admin rights could access these. For 10.7 and 10.8 (Mountain Lion), only root can. However, 10.9 (Mavericks) changes that rule again but only for the native format (plist files).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariant.xml">QVariant</db:link></db:member>
<db:member><db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-tools-settingseditor-example.xml">Settings Editor Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Format-enum">
<db:title>enum QSettings::Format</db:title>
<db:para>This enum type specifies the storage format used by <db:link xlink:href="qsettings.xml">QSettings</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::NativeFormat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Store the settings using the most appropriate storage format for the platform. On Windows, this means the system registry; on macOS and iOS, this means the CFPreferences API; on Unix, this means textual configuration files in INI format.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::Registry32Format</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Windows only: Explicitly access the 32-bit system registry from a 64-bit application running on 64-bit Windows. On 32-bit Windows or from a 32-bit application on 64-bit Windows, this works the same as specifying NativeFormat. This enum value was added in Qt 5.7.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::Registry64Format</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Windows only: Explicitly access the 64-bit system registry from a 32-bit application running on 64-bit Windows. On 32-bit Windows or from a 64-bit application on 64-bit Windows, this works the same as specifying NativeFormat. This enum value was added in Qt 5.7.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::IniFormat</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Store the settings in INI files.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::InvalidFormat</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Special value returned by <db:link xlink:href="qsettings.xml#registerFormat">registerFormat</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>On Unix, NativeFormat and IniFormat mean the same thing, except that the file extension is different (.conf for NativeFormat, .ini for IniFormat).</db:para>
<db:para>The INI file format is a Windows file format that Qt supports on all platforms. In the absence of an INI standard, we try to follow what Microsoft does, with the following exceptions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If you store types that <db:link xlink:href="qvariant.xml">QVariant</db:link> can't convert to <db:link xlink:href="qstring.xml">QString</db:link> (e.g., <db:link xlink:href="qpoint.xml">QPoint</db:link>, <db:link xlink:href="qrect.xml">QRect</db:link>, and <db:link xlink:href="qsize.xml">QSize</db:link>), Qt uses an @-based syntax to encode the type. For example:</db:para>
<db:programlisting language="cpp">pos = @Point(100 100)
</db:programlisting>
<db:para>To minimize compatibility issues, any @ that doesn't appear at the first position in the value or that isn't followed by a Qt type (Point, Rect, Size, etc.) is treated as a normal character.</db:para>
</db:listitem>
<db:listitem>
<db:para>Although backslash is a special character in INI files, most Windows applications don't escape backslashes (\) in file paths:</db:para>
<db:programlisting language="cpp">windir = C:\Windows
</db:programlisting>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link> always treats backslash as a special character and provides no API for reading or writing such entries.</db:para>
</db:listitem>
<db:listitem>
<db:para>The INI file format has severe restrictions on the syntax of a key. Qt works around this by using % as an escape character in keys. In addition, if you save a top-level setting (a key with no slashes in it, e.g., &quot;someKey&quot;), it will appear in the INI file's &quot;General&quot; section. To avoid overwriting other keys, if you save something using a key such as &quot;General/someKey&quot;, the key will be located in the &quot;%General&quot; section, <db:emphasis>not</db:emphasis> in the &quot;General&quot; section.</db:para>
</db:listitem>
<db:listitem>
<db:para>Following the philosophy that we should be liberal in what we accept and conservative in what we generate, <db:link xlink:href="qsettings.xml">QSettings</db:link> will accept Latin-1 encoded INI files, but generate pure ASCII files, where non-ASCII values are encoded using standard INI escape sequences. To make the INI files more readable (but potentially less compatible), call <db:link xlink:href="qsettings.xml#setIniCodec">setIniCodec</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#registerFormat">registerFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#setPath">setPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ReadFunc-typedef">
<db:title>QSettings::ReadFunc</db:title>
<db:para>Typedef for a pointer to a function with the following signature:</db:para>
<db:programlisting language="cpp">bool myReadFunc(QIODevice &amp;device, QSettings::SettingsMap &amp;map);
</db:programlisting>
<db:para>ReadFunc is used in registerFormat() as a pointer to a function that reads a set of key/value pairs. ReadFunc should read all the options in one pass, and return all the settings in the SettingsMap container, which is initially empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#WriteFunc-typedef">WriteFunc</db:link></db:member>
<db:member><db:link xlink:href="qsettings.xml#registerFormat">registerFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Scope-enum">
<db:title>enum QSettings::Scope</db:title>
<db:para>This enum specifies whether settings are user-specific or shared by all users of the same system.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::UserScope</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Store settings in a location specific to the current user (e.g., in the user's home directory).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::SystemScope</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Store settings in a global location, so that all users on the same machine access the same set of settings.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#setPath">setPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SettingsMap-typedef">
<db:title>QSettings::SettingsMap</db:title>
<db:para>Typedef for <db:link xlink:href="qmap.xml">QMap</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#registerFormat">registerFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QSettings::Status</db:title>
<db:para>The following status values are possible:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::AccessError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An access error occurred (e.g. trying to write to a read-only file).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsettings.xml">QSettings</db:link></db:emphasis>::FormatError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A format error occurred (e.g. loading a malformed INI file).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#status">status</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="WriteFunc-typedef">
<db:title>QSettings::WriteFunc</db:title>
<db:para>Typedef for a pointer to a function with the following signature:</db:para>
<db:programlisting language="cpp">bool myWriteFunc(QIODevice &amp;device, const QSettings::SettingsMap &amp;map);
</db:programlisting>
<db:para>WriteFunc is used in registerFormat() as a pointer to a function that writes a set of key/value pairs. WriteFunc is only called once, so you need to output the settings in one go.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#ReadFunc-typedef">ReadFunc</db:link></db:member>
<db:member><db:link xlink:href="qsettings.xml#registerFormat">registerFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSettings">
<db:title>[explicit] QSettings::QSettings(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qsettings.xml">QSettings</db:link> object for accessing settings of the application and organization set previously with a call to <db:link xlink:href="qcoreapplication.xml#organizationName-prop">QCoreApplication::setOrganizationName</db:link>(), <db:link xlink:href="qcoreapplication.xml#organizationDomain-prop">QCoreApplication::setOrganizationDomain</db:link>(), and <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::setApplicationName</db:link>().</db:para>
<db:para>The scope is <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::UserScope</db:link> and the format is <db:link xlink:href="qsettings.xml#defaultFormat">defaultFormat</db:link>() (<db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link> by default). Use <db:link xlink:href="qsettings.xml#setDefaultFormat">setDefaultFormat</db:link>() before calling this constructor to change the default format used by this constructor.</db:para>
<db:para>The code</db:para>
<db:programlisting language="cpp">QSettings settings(&quot;Moose Soft&quot;, &quot;Facturo-Pro&quot;);
</db:programlisting>
<db:para>is equivalent to</db:para>
<db:programlisting language="cpp">QCoreApplication::setOrganizationName(&quot;Moose Soft&quot;);
QCoreApplication::setApplicationName(&quot;Facturo-Pro&quot;);
QSettings settings;
</db:programlisting>
<db:para>If <db:link xlink:href="qcoreapplication.xml#organizationName-prop">QCoreApplication::setOrganizationName</db:link>() and <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::setApplicationName</db:link>() has not been previously called, the <db:link xlink:href="qsettings.xml">QSettings</db:link> object will not be able to read or write any settings, and <db:link xlink:href="qsettings.xml#status">status</db:link>() will return <db:link xlink:href="qsettings.xml#Status-enum">AccessError</db:link>.</db:para>
<db:para>On macOS and iOS, if both a name and an Internet domain are specified for the organization, the domain is preferred over the name. On other platforms, the name is preferred over the domain.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#organizationName-prop">QCoreApplication::setOrganizationName</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#organizationDomain-prop">QCoreApplication::setOrganizationDomain</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::setApplicationName</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#setDefaultFormat">setDefaultFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSettings-1">
<db:title>QSettings::QSettings(const QString &amp;<db:emphasis>fileName</db:emphasis>, QSettings::Format <db:emphasis>format</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qsettings.xml">QSettings</db:link> object for accessing the settings stored in the file called <db:code role="parameter">fileName</db:code>, with parent <db:code role="parameter">parent</db:code>. If the file doesn't already exist, it is created.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is <db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link>, the meaning of <db:code role="parameter">fileName</db:code> depends on the platform. On Unix, <db:code role="parameter">fileName</db:code> is the name of an INI file. On macOS and iOS, <db:code role="parameter">fileName</db:code> is the name of a .plist file. On Windows, <db:code role="parameter">fileName</db:code> is a path in the system registry.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is <db:link xlink:href="qsettings.xml#Format-enum">QSettings::IniFormat</db:link>, <db:code role="parameter">fileName</db:code> is the name of an INI file.</db:para>
<db:warning>
<db:para>This function is provided for convenience. It works well for accessing INI or .plist files generated by Qt, but might fail on some syntaxes found in such files originated by other programs. In particular, be aware of the following limitations:</db:para>
</db:warning>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link> provides no way of reading INI &quot;path&quot; entries, i.e., entries with unescaped slash characters. (This is because these entries are ambiguous and cannot be resolved automatically.)</db:para>
</db:listitem>
<db:listitem>
<db:para>In INI files, <db:link xlink:href="qsettings.xml">QSettings</db:link> uses the @ character as a metacharacter in some contexts, to encode Qt-specific data types (e.g., @Rect), and might therefore misinterpret it when it occurs in pure INI files.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSettings-2">
<db:title>[explicit] QSettings::QSettings(const QString &amp;<db:emphasis>organization</db:emphasis>, const QString &amp;<db:emphasis>application</db:emphasis> = QString(), QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qsettings.xml">QSettings</db:link> object for accessing settings of the application called <db:code role="parameter">application</db:code> from the organization called <db:code role="parameter">organization</db:code>, and with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSettings settings(&quot;Moose Tech&quot;, &quot;Facturo-Pro&quot;);
</db:programlisting>
<db:para>The scope is set to <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::UserScope</db:link>, and the format is set to <db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link> (i.e. calling <db:link xlink:href="qsettings.xml#setDefaultFormat">setDefaultFormat</db:link>() before calling this constructor has no effect).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#setDefaultFormat">setDefaultFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#fallback-mechanism">Fallback Mechanism</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSettings-3">
<db:title>QSettings::QSettings(QSettings::Scope <db:emphasis>scope</db:emphasis>, const QString &amp;<db:emphasis>organization</db:emphasis>, const QString &amp;<db:emphasis>application</db:emphasis> = QString(), QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qsettings.xml">QSettings</db:link> object for accessing settings of the application called <db:code role="parameter">application</db:code> from the organization called <db:code role="parameter">organization</db:code>, and with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>If <db:code role="parameter">scope</db:code> is <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::UserScope</db:link>, the <db:link xlink:href="qsettings.xml">QSettings</db:link> object searches user-specific settings first, before it searches system-wide settings as a fallback. If <db:code role="parameter">scope</db:code> is <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::SystemScope</db:link>, the <db:link xlink:href="qsettings.xml">QSettings</db:link> object ignores user-specific settings and provides access to system-wide settings.</db:para>
<db:para>The storage format is set to <db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link> (i.e. calling <db:link xlink:href="qsettings.xml#setDefaultFormat">setDefaultFormat</db:link>() before calling this constructor has no effect).</db:para>
<db:para>If no application name is given, the <db:link xlink:href="qsettings.xml">QSettings</db:link> object will only access the organization-wide <db:link xlink:href="qsettings.xml#fallback-mechanism">locations</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#setDefaultFormat">setDefaultFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSettings-4">
<db:title>QSettings::QSettings(QSettings::Format <db:emphasis>format</db:emphasis>, QSettings::Scope <db:emphasis>scope</db:emphasis>, const QString &amp;<db:emphasis>organization</db:emphasis>, const QString &amp;<db:emphasis>application</db:emphasis> = QString(), QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qsettings.xml">QSettings</db:link> object for accessing settings of the application called <db:code role="parameter">application</db:code> from the organization called <db:code role="parameter">organization</db:code>, and with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>If <db:code role="parameter">scope</db:code> is <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::UserScope</db:link>, the <db:link xlink:href="qsettings.xml">QSettings</db:link> object searches user-specific settings first, before it searches system-wide settings as a fallback. If <db:code role="parameter">scope</db:code> is <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::SystemScope</db:link>, the <db:link xlink:href="qsettings.xml">QSettings</db:link> object ignores user-specific settings and provides access to system-wide settings.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is <db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link>, the native API is used for storing settings. If <db:code role="parameter">format</db:code> is <db:link xlink:href="qsettings.xml#Format-enum">QSettings::IniFormat</db:link>, the INI format is used.</db:para>
<db:para>If no application name is given, the <db:link xlink:href="qsettings.xml">QSettings</db:link> object will only access the organization-wide <db:link xlink:href="qsettings.xml#fallback-mechanism">locations</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QSettings">
<db:title>[virtual noexcept] QSettings::~QSettings()</db:title>
<db:para>Destroys the <db:link xlink:href="qsettings.xml">QSettings</db:link> object.</db:para>
<db:para>Any unsaved changes will eventually be written to permanent storage.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#sync">sync</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="allKeys">
<db:title>QStringList QSettings::allKeys() const</db:title>
<db:para>Returns a list of all keys, including subkeys, that can be read using the <db:link xlink:href="qsettings.xml">QSettings</db:link> object.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSettings settings;
settings.setValue(&quot;fridge/color&quot;, QColor(Qt::white));
settings.setValue(&quot;fridge/size&quot;, QSize(32, 96));
settings.setValue(&quot;sofa&quot;, true);
settings.setValue(&quot;tv&quot;, false);

QStringList keys = settings.allKeys();
// keys: [&quot;fridge/color&quot;, &quot;fridge/size&quot;, &quot;sofa&quot;, &quot;tv&quot;]
</db:programlisting>
<db:para>If a group is set using <db:link xlink:href="qsettings.xml#beginGroup">beginGroup</db:link>(), only the keys in the group are returned, without the group prefix:</db:para>
<db:programlisting language="cpp">settings.beginGroup(&quot;fridge&quot;);
keys = settings.allKeys();
// keys: [&quot;color&quot;, &quot;size&quot;]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#childGroups">childGroups</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#childKeys">childKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="applicationName">
<db:title>[since 4.4] QString QSettings::applicationName() const</db:title>
<db:para>Returns the application name used for storing the settings.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::applicationName</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#scope">scope</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#organizationName">organizationName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginGroup">
<db:title>void QSettings::beginGroup(const QString &amp;<db:emphasis>prefix</db:emphasis>)</db:title>
<db:para>Appends <db:code role="parameter">prefix</db:code> to the current group.</db:para>
<db:para>The current group is automatically prepended to all keys specified to <db:link xlink:href="qsettings.xml">QSettings</db:link>. In addition, query functions such as <db:link xlink:href="qsettings.xml#childGroups">childGroups</db:link>(), <db:link xlink:href="qsettings.xml#childKeys">childKeys</db:link>(), and <db:link xlink:href="qsettings.xml#allKeys">allKeys</db:link>() are based on the group. By default, no group is set.</db:para>
<db:para>Groups are useful to avoid typing in the same setting paths over and over. For example:</db:para>
<db:programlisting language="cpp">settings.beginGroup(&quot;mainwindow&quot;);
settings.setValue(&quot;size&quot;, win-&gt;size());
settings.setValue(&quot;fullScreen&quot;, win-&gt;isFullScreen());
settings.endGroup();

settings.beginGroup(&quot;outputpanel&quot;);
settings.setValue(&quot;visible&quot;, panel-&gt;isVisible());
settings.endGroup();
</db:programlisting>
<db:para>This will set the value of three settings:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>mainwindow/size</db:para>
</db:listitem>
<db:listitem>
<db:para>mainwindow/fullScreen</db:para>
</db:listitem>
<db:listitem>
<db:para>outputpanel/visible</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Call <db:link xlink:href="qsettings.xml#endGroup">endGroup</db:link>() to reset the current group to what it was before the corresponding beginGroup() call. Groups can be nested.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#endGroup">endGroup</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#group">group</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginReadArray">
<db:title>int QSettings::beginReadArray(const QString &amp;<db:emphasis>prefix</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">prefix</db:code> to the current group and starts reading from an array. Returns the size of the array.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">struct Login {
    QString userName;
    QString password;
};
QList&lt;Login&gt; logins;
...

QSettings settings;
int size = settings.beginReadArray(&quot;logins&quot;);
for (int i = 0; i &lt; size; ++i) {
    settings.setArrayIndex(i);
    Login login;
    login.userName = settings.value(&quot;userName&quot;).toString();
    login.password = settings.value(&quot;password&quot;).toString();
    logins.append(login);
}
settings.endArray();
</db:programlisting>
<db:para>Use <db:link xlink:href="qsettings.xml#beginWriteArray">beginWriteArray</db:link>() to write the array in the first place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#beginWriteArray">beginWriteArray</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#endArray">endArray</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#setArrayIndex">setArrayIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginWriteArray">
<db:title>void QSettings::beginWriteArray(const QString &amp;<db:emphasis>prefix</db:emphasis>, int <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:para>Adds <db:code role="parameter">prefix</db:code> to the current group and starts writing an array of size <db:code role="parameter">size</db:code>. If <db:code role="parameter">size</db:code> is -1 (the default), it is automatically determined based on the indexes of the entries written.</db:para>
<db:para>If you have many occurrences of a certain set of keys, you can use arrays to make your life easier. For example, let's suppose that you want to save a variable-length list of user names and passwords. You could then write:</db:para>
<db:programlisting language="cpp">struct Login {
    QString userName;
    QString password;
};
QList&lt;Login&gt; logins;
...

QSettings settings;
settings.beginWriteArray(&quot;logins&quot;);
for (int i = 0; i &lt; logins.size(); ++i) {
    settings.setArrayIndex(i);
    settings.setValue(&quot;userName&quot;, list.at(i).userName);
    settings.setValue(&quot;password&quot;, list.at(i).password);
}
settings.endArray();
</db:programlisting>
<db:para>The generated keys will have the form</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>logins/size</db:para>
</db:listitem>
<db:listitem>
<db:para>logins/1/userName</db:para>
</db:listitem>
<db:listitem>
<db:para>logins/1/password</db:para>
</db:listitem>
<db:listitem>
<db:para>logins/2/userName</db:para>
</db:listitem>
<db:listitem>
<db:para>logins/2/password</db:para>
</db:listitem>
<db:listitem>
<db:para>logins/3/userName</db:para>
</db:listitem>
<db:listitem>
<db:para>logins/3/password</db:para>
</db:listitem>
<db:listitem>
<db:para>...</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To read back an array, use <db:link xlink:href="qsettings.xml#beginReadArray">beginReadArray</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#beginReadArray">beginReadArray</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#endArray">endArray</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#setArrayIndex">setArrayIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childGroups">
<db:title>QStringList QSettings::childGroups() const</db:title>
<db:para>Returns a list of all key top-level groups that contain keys that can be read using the <db:link xlink:href="qsettings.xml">QSettings</db:link> object.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSettings settings;
settings.setValue(&quot;fridge/color&quot;, QColor(Qt::white));
settings.setValue(&quot;fridge/size&quot;, QSize(32, 96));
settings.setValue(&quot;sofa&quot;, true);
settings.setValue(&quot;tv&quot;, false);

QStringList groups = settings.childGroups();
// groups: [&quot;fridge&quot;]
</db:programlisting>
<db:para>If a group is set using <db:link xlink:href="qsettings.xml#beginGroup">beginGroup</db:link>(), the first-level keys in that group are returned, without the group prefix.</db:para>
<db:programlisting language="cpp">settings.beginGroup(&quot;fridge&quot;);
groups = settings.childGroups();
// groups: []
</db:programlisting>
<db:para>You can navigate through the entire setting hierarchy using <db:link xlink:href="qsettings.xml#childKeys">childKeys</db:link>() and childGroups() recursively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#childKeys">childKeys</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#allKeys">allKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childKeys">
<db:title>QStringList QSettings::childKeys() const</db:title>
<db:para>Returns a list of all top-level keys that can be read using the <db:link xlink:href="qsettings.xml">QSettings</db:link> object.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSettings settings;
settings.setValue(&quot;fridge/color&quot;, QColor(Qt::white));
settings.setValue(&quot;fridge/size&quot;, QSize(32, 96));
settings.setValue(&quot;sofa&quot;, true);
settings.setValue(&quot;tv&quot;, false);

QStringList keys = settings.childKeys();
// keys: [&quot;sofa&quot;, &quot;tv&quot;]
</db:programlisting>
<db:para>If a group is set using <db:link xlink:href="qsettings.xml#beginGroup">beginGroup</db:link>(), the top-level keys in that group are returned, without the group prefix:</db:para>
<db:programlisting language="cpp">settings.beginGroup(&quot;fridge&quot;);
keys = settings.childKeys();
// keys: [&quot;color&quot;, &quot;size&quot;]
</db:programlisting>
<db:para>You can navigate through the entire setting hierarchy using childKeys() and <db:link xlink:href="qsettings.xml#childGroups">childGroups</db:link>() recursively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#childGroups">childGroups</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#allKeys">allKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QSettings::clear()</db:title>
<db:para>Removes all entries in the primary location associated to this <db:link xlink:href="qsettings.xml">QSettings</db:link> object.</db:para>
<db:para>Entries in fallback locations are not removed.</db:para>
<db:para>If you only want to remove the entries in the current <db:link xlink:href="qsettings.xml#group">group</db:link>(), use remove(&quot;&quot;) instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#setFallbacksEnabled">setFallbacksEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QSettings::contains(const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:para>Returns true if there exists a setting called <db:code role="parameter">key</db:code>; returns false otherwise.</db:para>
<db:para>If a group is set using <db:link xlink:href="qsettings.xml#beginGroup">beginGroup</db:link>(), <db:code role="parameter">key</db:code> is taken to be relative to that group.</db:para>
<db:para>Note that the Windows registry and INI files use case-insensitive keys, whereas the CFPreferences API on macOS and iOS uses case-sensitive keys. To avoid portability problems, see the <db:link xlink:href="qsettings.xml#section-and-key-syntax">Section and Key Syntax</db:link> rules.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultFormat">
<db:title>[static, since 4.4] QSettings::Format QSettings::defaultFormat()</db:title>
<db:para>Returns default file format used for storing settings for the <db:link xlink:href="qsettings.xml">QSettings</db:link>(<db:link xlink:href="qobject.xml">QObject</db:link> *) constructor. If no default format is set, <db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link> is used.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#setDefaultFormat">setDefaultFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endArray">
<db:title>void QSettings::endArray()</db:title>
<db:para>Closes the array that was started using <db:link xlink:href="qsettings.xml#beginReadArray">beginReadArray</db:link>() or <db:link xlink:href="qsettings.xml#beginWriteArray">beginWriteArray</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#beginReadArray">beginReadArray</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#beginWriteArray">beginWriteArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endGroup">
<db:title>void QSettings::endGroup()</db:title>
<db:para>Resets the group to what it was before the corresponding <db:link xlink:href="qsettings.xml#beginGroup">beginGroup</db:link>() call.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">settings.beginGroup(&quot;alpha&quot;);
// settings.group() == &quot;alpha&quot;

settings.beginGroup(&quot;beta&quot;);
// settings.group() == &quot;alpha/beta&quot;

settings.endGroup();
// settings.group() == &quot;alpha&quot;

settings.endGroup();
// settings.group() == &quot;&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#beginGroup">beginGroup</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#group">group</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSettings::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="fallbacksEnabled">
<db:title>bool QSettings::fallbacksEnabled() const</db:title>
<db:para>Returns true if fallbacks are enabled; returns false otherwise.</db:para>
<db:para>By default, fallbacks are enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#setFallbacksEnabled">setFallbacksEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QSettings::fileName() const</db:title>
<db:para>Returns the path where settings written using this <db:link xlink:href="qsettings.xml">QSettings</db:link> object are stored.</db:para>
<db:para>On Windows, if the format is <db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link>, the return value is a system registry path, not a file path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#isWritable">isWritable</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>[since 4.4] QSettings::Format QSettings::format() const</db:title>
<db:para>Returns the format used for storing the settings.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#defaultFormat">defaultFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#scope">scope</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#organizationName">organizationName</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#applicationName">applicationName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="group">
<db:title>QString QSettings::group() const</db:title>
<db:para>Returns the current group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#beginGroup">beginGroup</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#endGroup">endGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iniCodec">
<db:title>[since 4.5] QTextCodec *QSettings::iniCodec() const</db:title>
<db:para>Returns the codec that is used for accessing INI files. By default, no codec is used, so a null pointer is returned.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#setIniCodec">setIniCodec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isWritable">
<db:title>bool QSettings::isWritable() const</db:title>
<db:para>Returns true if settings can be written using this <db:link xlink:href="qsettings.xml">QSettings</db:link> object; returns false otherwise.</db:para>
<db:para>One reason why isWritable() might return false is if <db:link xlink:href="qsettings.xml">QSettings</db:link> operates on a read-only file.</db:para>
<db:warning>
<db:para>This function is not perfectly reliable, because the file permissions can change at any time.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#status">status</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#sync">sync</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="organizationName">
<db:title>[since 4.4] QString QSettings::organizationName() const</db:title>
<db:para>Returns the organization name used for storing the settings.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#organizationName-prop">QCoreApplication::organizationName</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#scope">scope</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#applicationName">applicationName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerFormat">
<db:title>[static, since 4.1] QSettings::Format QSettings::registerFormat(const QString &amp;<db:emphasis>extension</db:emphasis>, QSettings::ReadFunc <db:emphasis>readFunc</db:emphasis>, QSettings::WriteFunc <db:emphasis>writeFunc</db:emphasis>, Qt::CaseSensitivity <db:emphasis>caseSensitivity</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>Registers a custom storage format. On success, returns a special Format value that can then be passed to the <db:link xlink:href="qsettings.xml">QSettings</db:link> constructor. On failure, returns <db:link xlink:href="qsettings.xml#Format-enum">InvalidFormat</db:link>.</db:para>
<db:para>The <db:code role="parameter">extension</db:code> is the file extension associated to the format (without the '.').</db:para>
<db:para>The <db:code role="parameter">readFunc</db:code> and <db:code role="parameter">writeFunc</db:code> parameters are pointers to functions that read and write a set of key/value pairs. The <db:link xlink:href="qiodevice.xml">QIODevice</db:link> parameter to the read and write functions is always opened in binary mode (i.e., without the <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::Text</db:link> flag).</db:para>
<db:para>The <db:code role="parameter">caseSensitivity</db:code> parameter specifies whether keys are case sensitive or not. This makes a difference when looking up values using <db:link xlink:href="qsettings.xml">QSettings</db:link>. The default is case sensitive.</db:para>
<db:para>By default, if you use one of the constructors that work in terms of an organization name and an application name, the file system locations used are the same as for <db:link xlink:href="qsettings.xml#Format-enum">IniFormat</db:link>. Use <db:link xlink:href="qsettings.xml#setPath">setPath</db:link>() to specify other locations.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">bool readXmlFile(QIODevice &amp;device, QSettings::SettingsMap &amp;map);
bool writeXmlFile(QIODevice &amp;device, const QSettings::SettingsMap &amp;map);

int main(int argc, char *argv[])
{
    const QSettings::Format XmlFormat =
            QSettings::registerFormat(&quot;xml&quot;, readXmlFile, writeXmlFile);

    QSettings settings(XmlFormat, QSettings::UserScope, &quot;MySoft&quot;,
                       &quot;Star Runner&quot;);

    ...
}
</db:programlisting>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#setPath">setPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>void QSettings::remove(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:para>Removes the setting <db:code role="parameter">key</db:code> and any sub-settings of <db:code role="parameter">key</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSettings settings;
settings.setValue(&quot;ape&quot;);
settings.setValue(&quot;monkey&quot;, 1);
settings.setValue(&quot;monkey/sea&quot;, 2);
settings.setValue(&quot;monkey/doe&quot;, 4);

settings.remove(&quot;monkey&quot;);
QStringList keys = settings.allKeys();
// keys: [&quot;ape&quot;]
</db:programlisting>
<db:para>Be aware that if one of the fallback locations contains a setting with the same key, that setting will be visible after calling remove().</db:para>
<db:para>If <db:code role="parameter">key</db:code> is an empty string, all keys in the current <db:link xlink:href="qsettings.xml#group">group</db:link>() are removed. For example:</db:para>
<db:programlisting language="cpp">QSettings settings;
settings.setValue(&quot;ape&quot;);
settings.setValue(&quot;monkey&quot;, 1);
settings.setValue(&quot;monkey/sea&quot;, 2);
settings.setValue(&quot;monkey/doe&quot;, 4);

settings.beginGroup(&quot;monkey&quot;);
settings.remove(&quot;&quot;);
settings.endGroup();

QStringList keys = settings.allKeys();
// keys: [&quot;ape&quot;]
</db:programlisting>
<db:para>Note that the Windows registry and INI files use case-insensitive keys, whereas the CFPreferences API on macOS and iOS uses case-sensitive keys. To avoid portability problems, see the <db:link xlink:href="qsettings.xml#section-and-key-syntax">Section and Key Syntax</db:link> rules.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#setValue">setValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scope">
<db:title>[since 4.4] QSettings::Scope QSettings::scope() const</db:title>
<db:para>Returns the scope used for storing the settings.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#organizationName">organizationName</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#applicationName">applicationName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setArrayIndex">
<db:title>void QSettings::setArrayIndex(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Sets the current array index to <db:code role="parameter">i</db:code>. Calls to functions such as <db:link xlink:href="qsettings.xml#setValue">setValue</db:link>(), <db:link xlink:href="qsettings.xml#value">value</db:link>(), <db:link xlink:href="qsettings.xml#remove">remove</db:link>(), and <db:link xlink:href="qsettings.xml#contains">contains</db:link>() will operate on the array entry at that index.</db:para>
<db:para>You must call <db:link xlink:href="qsettings.xml#beginReadArray">beginReadArray</db:link>() or <db:link xlink:href="qsettings.xml#beginWriteArray">beginWriteArray</db:link>() before you can call this function.</db:para>
</db:section>
<db:section xml:id="setDefaultFormat">
<db:title>[static, since 4.4] void QSettings::setDefaultFormat(QSettings::Format <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the default file format to the given <db:code role="parameter">format</db:code>, which is used for storing settings for the <db:link xlink:href="qsettings.xml">QSettings</db:link>(<db:link xlink:href="qobject.xml">QObject</db:link> *) constructor.</db:para>
<db:para>If no default format is set, <db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link> is used. See the documentation for the <db:link xlink:href="qsettings.xml">QSettings</db:link> constructor you are using to see if that constructor will ignore this function.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#defaultFormat">defaultFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFallbacksEnabled">
<db:title>void QSettings::setFallbacksEnabled(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Sets whether fallbacks are enabled to <db:code role="parameter">b</db:code>.</db:para>
<db:para>By default, fallbacks are enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#fallbacksEnabled">fallbacksEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIniCodec">
<db:title>[since 4.5] void QSettings::setIniCodec(QTextCodec *<db:emphasis>codec</db:emphasis>)</db:title>
<db:para>Sets the codec for accessing INI files (including .conf files on Unix) to <db:code role="parameter">codec</db:code>. The codec is used for decoding any data that is read from the INI file, and for encoding any data that is written to the file. By default, no codec is used, and non-ASCII characters are encoded using standard INI escape sequences.</db:para>
<db:warning>
<db:para>The codec must be set immediately after creating the <db:link xlink:href="qsettings.xml">QSettings</db:link> object, before accessing any data.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#iniCodec">iniCodec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIniCodec-1">
<db:title>[since 4.5] void QSettings::setIniCodec(const char *<db:emphasis>codecName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the codec for accessing INI files (including .conf files on Unix) to the <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> for the encoding specified by <db:code role="parameter">codecName</db:code>. Common values for codecName include &quot;ISO 8859-1&quot;, &quot;UTF-8&quot;, and &quot;UTF-16&quot;. If the encoding isn't recognized, nothing happens.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcodec.xml#codecForName">QTextCodec::codecForName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPath">
<db:title>[static, since 4.1] void QSettings::setPath(QSettings::Format <db:emphasis>format</db:emphasis>, QSettings::Scope <db:emphasis>scope</db:emphasis>, const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Sets the path used for storing settings for the given <db:code role="parameter">format</db:code> and <db:code role="parameter">scope</db:code>, to <db:code role="parameter">path</db:code>. The <db:code role="parameter">format</db:code> can be a custom format.</db:para>
<db:para>The table below summarizes the default values:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Platform</db:para>
</db:th>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Scope</db:para>
</db:th>
<db:th>
<db:para>Path</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>Windows</db:para>
</db:td>
<db:td rowspan="2">
<db:para><db:link xlink:href="qsettings.xml#Format-enum">IniFormat</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsettings.xml#Scope-enum">UserScope</db:link></db:para>
</db:td>
<db:td>
<db:para>FOLDERID_RoamingAppData</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsettings.xml#Scope-enum">SystemScope</db:link></db:para>
</db:td>
<db:td>
<db:para>FOLDERID_ProgramData</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>Unix</db:para>
</db:td>
<db:td rowspan="2">
<db:para><db:link xlink:href="qsettings.xml#Format-enum">NativeFormat</db:link>, <db:link xlink:href="qsettings.xml#Format-enum">IniFormat</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsettings.xml#Scope-enum">UserScope</db:link></db:para>
</db:td>
<db:td>
<db:para>$HOME/.config</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsettings.xml#Scope-enum">SystemScope</db:link></db:para>
</db:td>
<db:td>
<db:para>/etc/xdg</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>Qt for Embedded Linux</db:para>
</db:td>
<db:td rowspan="2">
<db:para><db:link xlink:href="qsettings.xml#Format-enum">NativeFormat</db:link>, <db:link xlink:href="qsettings.xml#Format-enum">IniFormat</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsettings.xml#Scope-enum">UserScope</db:link></db:para>
</db:td>
<db:td>
<db:para>$HOME/Settings</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsettings.xml#Scope-enum">SystemScope</db:link></db:para>
</db:td>
<db:td>
<db:para>/etc/xdg</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>macOS and iOS</db:para>
</db:td>
<db:td rowspan="2">
<db:para><db:link xlink:href="qsettings.xml#Format-enum">IniFormat</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsettings.xml#Scope-enum">UserScope</db:link></db:para>
</db:td>
<db:td>
<db:para>$HOME/.config</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsettings.xml#Scope-enum">SystemScope</db:link></db:para>
</db:td>
<db:td>
<db:para>/etc/xdg</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default <db:link xlink:href="qsettings.xml#Scope-enum">UserScope</db:link> paths on Unix, macOS, and iOS ($HOME/.config or $HOME/Settings) can be overridden by the user by setting the XDG_CONFIG_HOME environment variable. The default <db:link xlink:href="qsettings.xml#Scope-enum">SystemScope</db:link> paths on Unix, macOS, and iOS (/etc/xdg) can be overridden when building the Qt library using the configure script's -sysconfdir flag (see <db:link xlink:href="qlibraryinfo.xml">QLibraryInfo</db:link> for details).</db:para>
<db:para>Setting the <db:link xlink:href="qsettings.xml#Format-enum">NativeFormat</db:link> paths on Windows, macOS, and iOS has no effect.</db:para>
<db:warning>
<db:para>This function doesn't affect existing <db:link xlink:href="qsettings.xml">QSettings</db:link> objects.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#registerFormat">registerFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValue">
<db:title>void QSettings::setValue(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the value of setting <db:code role="parameter">key</db:code> to <db:code role="parameter">value</db:code>. If the <db:code role="parameter">key</db:code> already exists, the previous value is overwritten.</db:para>
<db:para>Note that the Windows registry and INI files use case-insensitive keys, whereas the CFPreferences API on macOS and iOS uses case-sensitive keys. To avoid portability problems, see the <db:link xlink:href="qsettings.xml#section-and-key-syntax">Section and Key Syntax</db:link> rules.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSettings settings;
settings.setValue(&quot;interval&quot;, 30);
settings.value(&quot;interval&quot;).toInt();     // returns 30

settings.setValue(&quot;interval&quot;, 6.55);
settings.value(&quot;interval&quot;).toDouble();  // returns 6.55
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status">
<db:title>QSettings::Status QSettings::status() const</db:title>
<db:para>Returns a status code indicating the first error that was met by <db:link xlink:href="qsettings.xml">QSettings</db:link>, or <db:link xlink:href="qsettings.xml#Status-enum">QSettings::NoError</db:link> if no error occurred.</db:para>
<db:para>Be aware that <db:link xlink:href="qsettings.xml">QSettings</db:link> delays performing some operations. For this reason, you might want to call <db:link xlink:href="qsettings.xml#sync">sync</db:link>() to ensure that the data stored in <db:link xlink:href="qsettings.xml">QSettings</db:link> is written to disk before calling status().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#sync">sync</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sync">
<db:title>void QSettings::sync()</db:title>
<db:para>Writes any unsaved changes to permanent storage, and reloads any settings that have been changed in the meantime by another application.</db:para>
<db:para>This function is called automatically from <db:link xlink:href="qsettings.xml">QSettings</db:link>'s destructor and by the event loop at regular intervals, so you normally don't need to call it yourself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#status">status</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QSettings::value(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>defaultValue</db:emphasis> = QVariant()) const</db:title>
<db:para>Returns the value for setting <db:code role="parameter">key</db:code>. If the setting doesn't exist, returns <db:code role="parameter">defaultValue</db:code>.</db:para>
<db:para>If no default value is specified, a default <db:link xlink:href="qvariant.xml">QVariant</db:link> is returned.</db:para>
<db:para>Note that the Windows registry and INI files use case-insensitive keys, whereas the CFPreferences API on macOS and iOS uses case-sensitive keys. To avoid portability problems, see the <db:link xlink:href="qsettings.xml#section-and-key-syntax">Section and Key Syntax</db:link> rules.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSettings settings;
settings.setValue(&quot;animal/snake&quot;, 58);
settings.value(&quot;animal/snake&quot;, 1024).toInt();   // returns 58
settings.value(&quot;animal/zebra&quot;, 1024).toInt();   // returns 1024
settings.value(&quot;animal/zebra&quot;).toInt();         // returns 0
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsettings.xml#setValue">setValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qsettings.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QSettings</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qsettings.xml">QSettings</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="setSystemIniPath">
<db:title>[static, deprecated] void QSettings::setSystemIniPath(const QString &amp;<db:emphasis>dir</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsettings.xml#setPath">setPath</db:link>() instead.</db:para>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>oldcode</db:code></db:emphasis>setSystemIniPath(path); <db:emphasis role="bold">&lt;Unknown command&gt;<db:code>newcode</db:code></db:emphasis> <db:link xlink:href="qsettings.xml#setPath">setPath</db:link>(<db:link xlink:href="qsettings.xml#Format-enum">QSettings::NativeFormat</db:link>, <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::SystemScope</db:link>, path); <db:link xlink:href="qsettings.xml#setPath">setPath</db:link>(<db:link xlink:href="qsettings.xml#Format-enum">QSettings::IniFormat</db:link>, <db:link xlink:href="qsettings.xml#Scope-enum">QSettings::SystemScope</db:link>, path);</db:para>
</db:section>
<db:section xml:id="setUserIniPath">
<db:title>[static, deprecated] void QSettings::setUserIniPath(const QString &amp;<db:emphasis>dir</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsettings.xml#setPath">setPath</db:link>() instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
