<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QIdentityProxyModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qidentityproxymodel.xml">QIdentityProxyModel</db:link> class proxies its source model unmodified.</db:para>
<db:para>This class was introduced in Qt 4.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QIdentityProxyModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractproxymodel.xml" xlink:role="class">QAbstractProxyModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QIdentityProxyModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qidentityproxymodel.xml">QIdentityProxyModel</db:link> can be used to forward the structure of a source model exactly, with no sorting, filtering or other transformation. This is similar in concept to an identity matrix where A.I = A.</db:para>
<db:para>Because it does no sorting or filtering, this class is most suitable to proxy models which transform the <db:link xlink:href="qabstractproxymodel.xml#data">data</db:link>() of the source model. For example, a proxy model could be created to define the font used, or the background colour, or the tooltip etc. This removes the need to implement all data handling in the same class that creates the structure of the model, and can also be used to create re-usable components.</db:para>
<db:para>This also provides a way to change the data in the case where a source model is supplied by a third party which can not be modified.</db:para>
<db:programlisting language="cpp">class DateFormatProxyModel : public QIdentityProxyModel
{
  // ...

  void setDateFormatString(const QString &amp;formatString)
  {
    m_formatString = formatString;
  }

  QVariant data(const QModelIndex &amp;index, int role) const
  {
    if (role != Qt::DisplayRole)
      return QIdentityProxyModel::data(index, role);

    const QDateTime dateTime = sourceModel()-&gt;data(SourceClass::DateRole).toDateTime();

    return dateTime.toString(m_formatString);
  }

private:
  QString m_formatString;
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QIdentityProxyModel">
<db:title>[explicit] QIdentityProxyModel::QIdentityProxyModel(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs an identity model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QIdentityProxyModel">
<db:title>[virtual noexcept] QIdentityProxyModel::~QIdentityProxyModel()</db:title>
<db:para>Destroys this identity model.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>[override virtual] int QIdentityProxyModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#columnCount" role="function">QAbstractItemModel::columnCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual] bool QIdentityProxyModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#dropMimeData" role="function">QAbstractProxyModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QIdentityProxyModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#headerData" role="function">QAbstractProxyModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QIdentityProxyModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertColumns">
<db:title>[override virtual] bool QIdentityProxyModel::insertColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertColumns" role="function">QAbstractItemModel::insertColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="insertRows">
<db:title>[override virtual] bool QIdentityProxyModel::insertRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertRows" role="function">QAbstractItemModel::insertRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="mapFromSource">
<db:title>[override virtual] QModelIndex QIdentityProxyModel::mapFromSource(const QModelIndex &amp;<db:emphasis>sourceIndex</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapFromSource" role="function">QAbstractProxyModel::mapFromSource(const QModelIndex &amp;sourceIndex) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mapSelectionFromSource">
<db:title>[override virtual] QItemSelection QIdentityProxyModel::mapSelectionFromSource(const QItemSelection &amp;<db:emphasis>selection</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapSelectionFromSource" role="function">QAbstractProxyModel::mapSelectionFromSource(const QItemSelection &amp;sourceSelection) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mapSelectionToSource">
<db:title>[override virtual] QItemSelection QIdentityProxyModel::mapSelectionToSource(const QItemSelection &amp;<db:emphasis>selection</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapSelectionToSource" role="function">QAbstractProxyModel::mapSelectionToSource(const QItemSelection &amp;proxySelection) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mapToSource">
<db:title>[override virtual] QModelIndex QIdentityProxyModel::mapToSource(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapToSource" role="function">QAbstractProxyModel::mapToSource(const QModelIndex &amp;proxyIndex) const</db:link>.</db:para>
</db:section>
<db:section xml:id="match">
<db:title>[override virtual] QModelIndexList QIdentityProxyModel::match(const QModelIndex &amp;<db:emphasis>start</db:emphasis>, int <db:emphasis>role</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>hits</db:emphasis> = 1, Qt::MatchFlags <db:emphasis>flags</db:emphasis> = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#match" role="function">QAbstractItemModel::match(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const</db:link>.</db:para>
</db:section>
<db:section xml:id="parent">
<db:title>[override virtual] QModelIndex QIdentityProxyModel::parent(const QModelIndex &amp;<db:emphasis>child</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#parent" role="function">QAbstractItemModel::parent(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="removeColumns">
<db:title>[override virtual] bool QIdentityProxyModel::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeColumns" role="function">QAbstractItemModel::removeColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="removeRows">
<db:title>[override virtual] bool QIdentityProxyModel::removeRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeRows" role="function">QAbstractItemModel::removeRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QIdentityProxyModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setSourceModel">
<db:title>[override virtual] void QIdentityProxyModel::setSourceModel(QAbstractItemModel *<db:emphasis>newSourceModel</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setSourceModel" role="function">QAbstractProxyModel::setSourceModel(QAbstractItemModel *sourceModel)</db:link>.</db:para>
</db:section>
<db:section xml:id="sibling">
<db:title>[override virtual] QModelIndex QIdentityProxyModel::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>idx</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#sibling" role="function">QAbstractProxyModel::sibling(int row, int column, const QModelIndex &amp;idx) const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
