<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDataStream Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdatastream.xml">QDataStream</db:link> class provides serialization of binary data to a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDataStream</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiodevicebase.xml" xlink:role="class">QIODeviceBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDataStream is part of <db:simplelist><db:member>qtserialization</db:member><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A data stream is a binary stream of encoded information which is 100% independent of the host computer's operating system, CPU or byte order. For example, a data stream that is written by a PC under Windows can be read by a Sun SPARC running Solaris.</db:para>
<db:para>You can also use a data stream to read/write <db:link xlink:href="qdatastream.xml#reading-and-writing-raw-binary-data">raw unencoded binary data</db:link>. If you want a &quot;parsing&quot; input stream, see <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
<db:para>The <db:link xlink:href="qdatastream.xml">QDataStream</db:link> class implements the serialization of C++'s basic data types, like char, short, int, char *, etc. Serialization of more complex data is accomplished by breaking up the data into primitive units.</db:para>
<db:para>A data stream cooperates closely with a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>. A <db:link xlink:href="qiodevice.xml">QIODevice</db:link> represents an input/output medium one can read data from and write data to. The <db:link xlink:href="qfile.xml">QFile</db:link> class is an example of an I/O device.</db:para>
<db:para>Example (write binary data to a stream):</db:para>
<db:programlisting language="cpp">QFile file(&quot;file.dat&quot;);
file.open(QIODevice::WriteOnly);
QDataStream out(&amp;file);   // we will serialize the data into the file
out &lt;&lt; QString(&quot;the answer is&quot;);   // serialize a string
out &lt;&lt; (qint32)42;        // serialize an integer
</db:programlisting>
<db:para>Example (read binary data from a stream):</db:para>
<db:programlisting language="cpp">QFile file(&quot;file.dat&quot;);
file.open(QIODevice::ReadOnly);
QDataStream in(&amp;file);    // read the data serialized from the file
QString str;
qint32 a;
in &gt;&gt; str &gt;&gt; a;           // extract &quot;the answer is&quot; and 42
</db:programlisting>
<db:para>Each item written to the stream is written in a predefined binary format that varies depending on the item's type. Supported Qt types include QBrush, QColor, <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, QFont, QPixmap, <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qvariant.xml">QVariant</db:link> and many others. For the complete list of all Qt types supporting data streaming see <db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link>.</db:para>
<db:para>For integers it is best to always cast to a Qt integer type for writing, and to read back into the same Qt integer type. This ensures that you get integers of the size you want and insulates you from compiler and platform differences.</db:para>
<db:para>Enumerations can be serialized through <db:link xlink:href="qdatastream.xml">QDataStream</db:link> without the need of manually defining streaming operators. Enum classes are serialized using the declared size.</db:para>
<db:para>The initial I/O device is usually set in the constructor, but can be changed with <db:link xlink:href="qdatastream.xml#setDevice">setDevice</db:link>(). If you've reached the end of the data (or if there is no I/O device set) <db:link xlink:href="qdatastream.xml#atEnd">atEnd</db:link>() will return true.</db:para>
<db:section xml:id="serializing-containers-and-strings">
<db:title>Serializing containers and strings</db:title>
<db:para>The serialization format is a length specifier first, then <db:code role="parameter">l</db:code> bytes of data. The length specifier is one quint32 if the version is less than 6.7 or if the number of elements is less than 0xfffffffe (2^32 -2). Otherwise there is an extend value 0xfffffffe followed by one quint64 with the actual value. In addition for containers that support isNull(), it is encoded as a single quint32 with all bits set and no data.</db:para>
<db:para>To take one example, if the string size fits into 32 bits, a char * string is written as a 32-bit integer equal to the length of the string, including the '\0' byte, followed by all the characters of the string, including the '\0' byte. If the string size is greater, the value 0xffffffffe is written as a marker of an extended size, followed by 64 bits of the actual size. When reading a char * string, 4 bytes are read first. If the value is not equal to 0xffffffffe (the marker of extended size), then these 4 bytes are treated as the 32 bit size of the string. Otherwise, the next 8 bytes are read and treated as a 64 bit size of the string. Then, all the characters for the char * string, including the '\0' terminator, are read.</db:para>
</db:section>
<db:section xml:id="versioning">
<db:title>Versioning</db:title>
<db:para><db:link xlink:href="qdatastream.xml">QDataStream</db:link>'s binary format has evolved since Qt 1.0, and is likely to continue evolving to reflect changes done in Qt. When inputting or outputting complex types, it's very important to make sure that the same version of the stream (<db:link xlink:href="qdatastream.xml#version">version</db:link>()) is used for reading and writing. If you need both forward and backward compatibility, you can hardcode the version number in the application:</db:para>
<db:programlisting language="cpp">stream.setVersion(QDataStream::Qt_4_0);
</db:programlisting>
<db:para>If you are producing a new binary data format, such as a file format for documents created by your application, you could use a <db:link xlink:href="qdatastream.xml">QDataStream</db:link> to write the data in a portable format. Typically, you would write a brief header containing a magic string and a version number to give yourself room for future expansion. For example:</db:para>
<db:programlisting language="cpp">QFile file(&quot;file.xxx&quot;);
file.open(QIODevice::WriteOnly);
QDataStream out(&amp;file);

// Write a header with a &quot;magic number&quot; and a version
out &lt;&lt; (quint32)0xA0B0C0D0;
out &lt;&lt; (qint32)123;

out.setVersion(QDataStream::Qt_4_0);

// Write the data
out &lt;&lt; lots_of_interesting_data;
</db:programlisting>
<db:para>Then read it in with:</db:para>
<db:programlisting language="cpp">QFile file(&quot;file.xxx&quot;);
file.open(QIODevice::ReadOnly);
QDataStream in(&amp;file);

// Read and check the header
quint32 magic;
in &gt;&gt; magic;
if (magic != 0xA0B0C0D0)
    return XXX_BAD_FILE_FORMAT;

// Read the version
qint32 version;
in &gt;&gt; version;
if (version &lt; 100)
    return XXX_BAD_FILE_TOO_OLD;
if (version &gt; 123)
    return XXX_BAD_FILE_TOO_NEW;

if (version &lt;= 110)
    in.setVersion(QDataStream::Qt_3_2);
else
    in.setVersion(QDataStream::Qt_4_0);

// Read the data
in &gt;&gt; lots_of_interesting_data;
if (version &gt;= 120)
    in &gt;&gt; data_new_in_XXX_version_1_2;
in &gt;&gt; other_interesting_data;
</db:programlisting>
<db:para>You can select which byte order to use when serializing data. The default setting is big-endian (MSB first). Changing it to little-endian breaks the portability (unless the reader also changes to little-endian). We recommend keeping this setting unless you have special requirements.</db:para>
<db:anchor xml:id="raw"/>
</db:section>
<db:section xml:id="reading-and-writing-raw-binary-data">
<db:title>Reading and Writing Raw Binary Data</db:title>
<db:para>You may wish to read/write your own raw binary data to/from the data stream directly. Data may be read from the stream into a preallocated char * using <db:link xlink:href="qdatastream.xml#readRawData">readRawData</db:link>(). Similarly data can be written to the stream using <db:link xlink:href="qdatastream.xml#writeRawData">writeRawData</db:link>(). Note that any encoding/decoding of the data must be done by you.</db:para>
<db:para>A similar pair of functions is <db:link xlink:href="qdatastream.xml#readBytes">readBytes</db:link>() and <db:link xlink:href="qdatastream.xml#writeBytes">writeBytes</db:link>(). These differ from their <db:emphasis>raw</db:emphasis> counterparts as follows: <db:link xlink:href="qdatastream.xml#readBytes">readBytes</db:link>() reads a quint32 which is taken to be the length of the data to be read, then that number of bytes is read into the preallocated char *; <db:link xlink:href="qdatastream.xml#writeBytes">writeBytes</db:link>() writes a quint32 containing the length of the data, followed by the data. Note that any encoding/decoding of the data (apart from the length quint32) must be done by you.</db:para>
</db:section>
<db:section xml:id="reading-and-writing-qt-collection-classes">
<db:title>Reading and Writing Qt Collection Classes</db:title>
<db:para>The Qt container classes can also be serialized to a <db:link xlink:href="qdatastream.xml">QDataStream</db:link>. These include <db:link xlink:href="qlist.xml">QList</db:link>, <db:link xlink:href="qset.xml">QSet</db:link>, <db:link xlink:href="qhash.xml#the-hashing-function">QHash</db:link>, and <db:link xlink:href="qmap.xml">QMap</db:link>. The stream operators are declared as non-members of the classes.</db:para>
<db:anchor xml:id="serializing-qt-classes"/>
</db:section>
<db:section xml:id="reading-and-writing-other-qt-classes">
<db:title>Reading and Writing Other Qt Classes</db:title>
<db:para>In addition to the overloaded stream operators documented here, any Qt classes that you might want to serialize to a <db:link xlink:href="qdatastream.xml">QDataStream</db:link> will have appropriate stream operators declared as non-member of the class:</db:para>
<db:programlisting language="cpp">QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QXxx &amp;);
QDataStream &amp;operator&gt;&gt;(QDataStream &amp;, QXxx &amp;);
</db:programlisting>
<db:para>For example, here are the stream operators declared as non-members of the QImage class:</db:para>
<db:programlisting language="cpp">QDataStream &amp;operator&lt;&lt;(QDataStream &amp;stream, const QImage &amp;image);
QDataStream &amp;operator&gt;&gt;(QDataStream &amp;stream, QImage &amp;image);
</db:programlisting>
<db:para>To see if your favorite Qt class has similar stream operators defined, check the <db:emphasis role="bold">Related Non-Members</db:emphasis> section of the class's documentation page.</db:para>
</db:section>
<db:section xml:id="using-read-transactions">
<db:title>Using Read Transactions</db:title>
<db:para>When a data stream operates on an asynchronous device, the chunks of data can arrive at arbitrary points in time. The <db:link xlink:href="qdatastream.xml">QDataStream</db:link> class implements a transaction mechanism that provides the ability to read the data atomically with a series of stream operators. As an example, you can handle incomplete reads from a socket by using a transaction in a slot connected to the readyRead() signal:</db:para>
<db:programlisting language="cpp">in.startTransaction();
QString str;
qint32 a;
in &gt;&gt; str &gt;&gt; a; // try to read packet atomically

if (!in.commitTransaction())
    return;     // wait for more data
</db:programlisting>
<db:para>If no full packet is received, this code restores the stream to the initial position, after which you need to wait for more data to arrive.</db:para>
</db:section>
<db:section xml:id="corruption-and-security">
<db:title>Corruption and Security</db:title>
<db:para><db:link xlink:href="qdatastream.xml">QDataStream</db:link> is not resilient against corrupted data inputs and should therefore not be used for security-sensitive situations, even when using transactions. Transactions will help determine if a valid input can currently be decoded with the data currently available on an asynchronous device, but will assume that the data that is available is correctly formed.</db:para>
<db:para>Additionally, many <db:link xlink:href="qdatastream.xml">QDataStream</db:link> demarshalling operators will allocate memory based on information found in the stream. Those operators perform no verification on whether the requested amount of memory is reasonable or if it is compatible with the amount of data available in the stream (example: demarshalling a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> or <db:link xlink:href="qstring.xml">QString</db:link> may see the request for allocation of several gigabytes of data).</db:para>
<db:para><db:link xlink:href="qdatastream.xml">QDataStream</db:link> should not be used on content whose provenance cannot be trusted. Applications should be designed to attempt to decode only streams whose provenance is at least as trustworthy as that of the application itself or its plugins.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:member>
<db:member><db:link xlink:href="qvariant.xml">QVariant</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ByteOrder-enum">
<db:title>enum QDataStream::ByteOrder</db:title>
<db:para>The byte order used for reading/writing the data.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::BigEndian</db:code></db:para>
</db:td>
<db:td><db:code>QSysInfo::BigEndian</db:code></db:td>
<db:td>
<db:para>Most significant byte first (the default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::LittleEndian</db:code></db:para>
</db:td>
<db:td><db:code>QSysInfo::LittleEndian</db:code></db:td>
<db:td>
<db:para>Least significant byte first</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="FloatingPointPrecision-enum">
<db:title>enum QDataStream::FloatingPointPrecision</db:title>
<db:para>The precision of floating point numbers used for reading/writing the data. This will only have an effect if the version of the data stream is <db:link xlink:href="qdatastream.xml#Version-enum">Qt_4_6</db:link> or higher.</db:para>
<db:warning>
<db:para>The floating point precision must be set to the same value on the object that writes and the object that reads the data stream.</db:para>
</db:warning>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::SinglePrecision</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>All floating point numbers in the data stream have 32-bit precision.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::DoublePrecision</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>All floating point numbers in the data stream have 64-bit precision.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setFloatingPointPrecision">setFloatingPointPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#floatingPointPrecision">floatingPointPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QDataStream::Status</db:title>
<db:para>This enum describes the current status of the data stream.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Ok</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The data stream is operating normally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::ReadPastEnd</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The data stream has read past the end of the data in the underlying device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::ReadCorruptData</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The data stream has read corrupt data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::WriteFailed</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The data stream cannot write to the underlying device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::SizeLimitExceeded (since Qt 6.7)</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The data stream cannot read or write the data because its size is larger than supported by the current platform. This can happen, for example, when trying to read more that 2 GiB of data on a 32-bit platform.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Version-enum">
<db:title>enum QDataStream::Version</db:title>
<db:para>This enum provides symbolic synonyms for the data serialization format version numbers.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_1_0</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Version 1 (Qt 1.x)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_2_0</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Version 2 (Qt 2.0)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_2_1</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Version 3 (Qt 2.1, 2.2, 2.3)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_3_0</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Version 4 (Qt 3.0)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_3_1</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Version 5 (Qt 3.1, 3.2)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_3_3</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Version 6 (Qt 3.3)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_0</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Version 7 (Qt 4.0, Qt 4.1)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_1</db:code></db:para>
</db:td>
<db:td><db:code>Qt_4_0</db:code></db:td>
<db:td>
<db:para>Version 7 (Qt 4.0, Qt 4.1)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_2</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Version 8 (Qt 4.2)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_3</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Version 9 (Qt 4.3)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_4</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Version 10 (Qt 4.4)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_5</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Version 11 (Qt 4.5)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_6</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Version 12 (Qt 4.6, Qt 4.7, Qt 4.8)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_7</db:code></db:para>
</db:td>
<db:td><db:code>Qt_4_6</db:code></db:td>
<db:td>
<db:para>Same as Qt_4_6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_8</db:code></db:para>
</db:td>
<db:td><db:code>Qt_4_7</db:code></db:td>
<db:td>
<db:para>Same as Qt_4_6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_4_9</db:code></db:para>
</db:td>
<db:td><db:code>Qt_4_8</db:code></db:td>
<db:td>
<db:para>Same as Qt_4_6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_0</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Version 13 (Qt 5.0)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_1</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Version 14 (Qt 5.1)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_2</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Version 15 (Qt 5.2)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_3</db:code></db:para>
</db:td>
<db:td><db:code>Qt_5_2</db:code></db:td>
<db:td>
<db:para>Same as Qt_5_2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_4</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Version 16 (Qt 5.4)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_5</db:code></db:para>
</db:td>
<db:td><db:code>Qt_5_4</db:code></db:td>
<db:td>
<db:para>Same as Qt_5_4</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_6</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Version 17 (Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_7</db:code></db:para>
</db:td>
<db:td><db:code>Qt_5_6</db:code></db:td>
<db:td>
<db:para>Same as Qt_5_6</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_8</db:code></db:para>
</db:td>
<db:td><db:code>Qt_5_7</db:code></db:td>
<db:td>
<db:para>Same as Qt_5_6</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_9</db:code></db:para>
</db:td>
<db:td><db:code>Qt_5_8</db:code></db:td>
<db:td>
<db:para>Same as Qt_5_6</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_10</db:code></db:para>
</db:td>
<db:td><db:code>Qt_5_9</db:code></db:td>
<db:td>
<db:para>Same as Qt_5_6</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_11</db:code></db:para>
</db:td>
<db:td><db:code>Qt_5_10</db:code></db:td>
<db:td>
<db:para>Same as Qt_5_6</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_12</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Version 18 (Qt 5.12)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_13</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Version 19 (Qt 5.13)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_14</db:code></db:para>
</db:td>
<db:td><db:code>Qt_5_13</db:code></db:td>
<db:td>
<db:para>Same as Qt_5_13</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_5_15</db:code></db:para>
</db:td>
<db:td><db:code>Qt_5_14</db:code></db:td>
<db:td>
<db:para>Same as Qt_5_13</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_0</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Version 20 (Qt 6.0)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_1</db:code></db:para>
</db:td>
<db:td><db:code>Qt_6_0</db:code></db:td>
<db:td>
<db:para>Same as Qt_6_0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_2</db:code></db:para>
</db:td>
<db:td><db:code>Qt_6_0</db:code></db:td>
<db:td>
<db:para>Same as Qt_6_0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_3</db:code></db:para>
</db:td>
<db:td><db:code>Qt_6_0</db:code></db:td>
<db:td>
<db:para>Same as Qt_6_0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_4</db:code></db:para>
</db:td>
<db:td><db:code>Qt_6_0</db:code></db:td>
<db:td>
<db:para>Same as Qt_6_0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_5</db:code></db:para>
</db:td>
<db:td><db:code>Qt_6_0</db:code></db:td>
<db:td>
<db:para>Same as Qt_6_0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_6</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Version 21 (Qt 6.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_7</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Version 22 (Qt 6.7)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_8</db:code></db:para>
</db:td>
<db:td><db:code>Qt_6_7</db:code></db:td>
<db:td>
<db:para>Same as Qt_6_7</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:emphasis>::Qt_6_9</db:code></db:para>
</db:td>
<db:td><db:code>Qt_6_7</db:code></db:td>
<db:td>
<db:para>Same as Qt_6_7</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setVersion">setVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#version">version</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDataStream">
<db:title>QDataStream::QDataStream()</db:title>
<db:para>Constructs a data stream that has no I/O device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDataStream-1">
<db:title>[explicit] QDataStream::QDataStream(QIODevice *<db:emphasis>d</db:emphasis>)</db:title>
<db:para>Constructs a data stream that uses the I/O device <db:code role="parameter">d</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDataStream-2">
<db:title>QDataStream::QDataStream(const QByteArray &amp;<db:emphasis>a</db:emphasis>)</db:title>
<db:para>Constructs a read-only data stream that operates on byte array <db:code role="parameter">a</db:code>. Use <db:link xlink:href="qdatastream.xml">QDataStream</db:link>(<db:link xlink:href="qbytearray.xml">QByteArray</db:link>*, int) if you want to write to a byte array.</db:para>
<db:para>Since <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is not a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> subclass, internally a <db:link xlink:href="qbuffer.xml">QBuffer</db:link> is created to wrap the byte array.</db:para>
</db:section>
<db:section xml:id="QDataStream-3">
<db:title>QDataStream::QDataStream(QByteArray *<db:emphasis>a</db:emphasis>, QIODeviceBase::OpenMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Constructs a data stream that operates on a byte array, <db:code role="parameter">a</db:code>. The <db:code role="parameter">mode</db:code> describes how the device is to be used.</db:para>
<db:para>Alternatively, you can use <db:link xlink:href="qdatastream.xml">QDataStream</db:link>(const <db:link xlink:href="qbytearray.xml">QByteArray</db:link> &amp;) if you just want to read from a byte array.</db:para>
<db:para>Since <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is not a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> subclass, internally a <db:link xlink:href="qbuffer.xml">QBuffer</db:link> is created to wrap the byte array.</db:para>
</db:section>
<db:section xml:id="dtor.QDataStream">
<db:title>[noexcept] QDataStream::~QDataStream()</db:title>
<db:para>Destroys the data stream.</db:para>
<db:para>The destructor will not affect the current I/O device, unless it is an internal I/O device (e.g. a <db:link xlink:href="qbuffer.xml">QBuffer</db:link>) processing a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> passed in the <db:emphasis>constructor</db:emphasis>, in which case the internal I/O device is destroyed.</db:para>
</db:section>
<db:section xml:id="abortTransaction">
<db:title>void QDataStream::abortTransaction()</db:title>
<db:para>Aborts a read transaction.</db:para>
<db:para>This function is commonly used to discard the transaction after higher-level protocol errors or loss of stream synchronization.</db:para>
<db:para>If called on an inner transaction, aborting is delegated to the outermost transaction, and subsequently started inner transactions are forced to fail.</db:para>
<db:para>For the outermost transaction, discards the restoration point and any internally duplicated data of the stream. Will not affect the current read position of the stream.</db:para>
<db:para>Sets the status of the data stream to</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ReadCorruptData</db:para>
</db:td>
<db:td>
<db:para>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#startTransaction">startTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#commitTransaction">commitTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#rollbackTransaction">rollbackTransaction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atEnd">
<db:title>bool QDataStream::atEnd() const</db:title>
<db:para>Returns true if the I/O device has reached the end position (end of the stream or file) or if there is no I/O device set; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml#atEnd">QIODevice::atEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="byteOrder">
<db:title>QDataStream::ByteOrder QDataStream::byteOrder() const</db:title>
<db:para>Returns the current byte order setting – either <db:link xlink:href="qdatastream.xml#ByteOrder-enum">BigEndian</db:link> or <db:link xlink:href="qdatastream.xml#ByteOrder-enum">LittleEndian</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setByteOrder">setByteOrder</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="commitTransaction">
<db:title>bool QDataStream::commitTransaction()</db:title>
<db:para>Completes a read transaction. Returns true if no read errors have occurred during the transaction; otherwise returns false.</db:para>
<db:para>If called on an inner transaction, committing will be postponed until the outermost commitTransaction(), <db:link xlink:href="qdatastream.xml#rollbackTransaction">rollbackTransaction</db:link>(), or <db:link xlink:href="qdatastream.xml#abortTransaction">abortTransaction</db:link>() call occurs.</db:para>
<db:para>Otherwise, if the stream status indicates reading past the end of the data, this function restores the stream data to the point of the <db:link xlink:href="qdatastream.xml#startTransaction">startTransaction</db:link>() call. When this situation occurs, you need to wait for more data to arrive, after which you start a new transaction. If the data stream has read corrupt data or any of the inner transactions was aborted, this function aborts the transaction.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#startTransaction">startTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#rollbackTransaction">rollbackTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#abortTransaction">abortTransaction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QDataStream::device() const</db:title>
<db:para>Returns the I/O device currently set, or nullptr if no device is currently set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="floatingPointPrecision">
<db:title>QDataStream::FloatingPointPrecision QDataStream::floatingPointPrecision() const</db:title>
<db:para>Returns the floating point precision of the data stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#FloatingPointPrecision-enum">FloatingPointPrecision</db:link></db:member>
<db:member><db:link xlink:href="qdatastream.xml#setFloatingPointPrecision">setFloatingPointPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readBytes">
<db:title>[since 6.7] QDataStream &amp;QDataStream::readBytes(char *&amp;<db:emphasis>s</db:emphasis>, qint64 &amp;<db:emphasis>l</db:emphasis>)</db:title>
<db:para>Reads the buffer <db:code role="parameter">s</db:code> from the stream and returns a reference to the stream.</db:para>
<db:para>The buffer <db:code role="parameter">s</db:code> is allocated using new []. Destroy it with the delete [] operator.</db:para>
<db:para>The <db:code role="parameter">l</db:code> parameter is set to the length of the buffer. If the string read is empty, <db:code role="parameter">l</db:code> is set to 0 and <db:code role="parameter">s</db:code> is set to nullptr.</db:para>
<db:para>The serialization format is a length specifier first, then <db:code role="parameter">l</db:code> bytes of data. The length specifier is one quint32 if the version is less than 6.7 or if the number of elements is less than 0xfffffffe (2^32 -2), otherwise there is an extend value 0xfffffffe followed by one quint64 with the actual value. In addition for containers that support isNull(), it is encoded as a single quint32 with all bits set and no data.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#readRawData">readRawData</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#writeBytes">writeBytes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readBytes-1">
<db:title>[until 6.11] QDataStream &amp;QDataStream::readBytes(char *&amp;<db:emphasis>s</db:emphasis>, uint &amp;<db:emphasis>l</db:emphasis>)</db:title>
<db:para>This function is scheduled for deprecation in version 6.11.</db:para>
<db:para>Use an overload that takes qint64 length instead.</db:para>
</db:section>
<db:section xml:id="readRawData">
<db:title>qint64 QDataStream::readRawData(char *<db:emphasis>s</db:emphasis>, qint64 <db:emphasis>len</db:emphasis>)</db:title>
<db:para>Reads at most <db:code role="parameter">len</db:code> bytes from the stream into <db:code role="parameter">s</db:code> and returns the number of bytes read. If an error occurs, this function returns -1.</db:para>
<db:para>The buffer <db:code role="parameter">s</db:code> must be preallocated. The data is <db:emphasis>not</db:emphasis> decoded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#readBytes">readBytes</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#read">QIODevice::read</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#writeRawData">writeRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetStatus">
<db:title>void QDataStream::resetStatus()</db:title>
<db:para>Resets the status of the data stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#Status-enum">Status</db:link></db:member>
<db:member><db:link xlink:href="qdatastream.xml#status">status</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#setStatus">setStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rollbackTransaction">
<db:title>void QDataStream::rollbackTransaction()</db:title>
<db:para>Reverts a read transaction.</db:para>
<db:para>This function is commonly used to rollback the transaction when an incomplete read was detected prior to committing the transaction.</db:para>
<db:para>If called on an inner transaction, reverting is delegated to the outermost transaction, and subsequently started inner transactions are forced to fail.</db:para>
<db:para>For the outermost transaction, restores the stream data to the point of the <db:link xlink:href="qdatastream.xml#startTransaction">startTransaction</db:link>() call. If the data stream has read corrupt data or any of the inner transactions was aborted, this function aborts the transaction.</db:para>
<db:para>If the preceding stream operations were successful, sets the status of the data stream to</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ReadPastEnd</db:para>
</db:td>
<db:td>
<db:para>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#startTransaction">startTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#commitTransaction">commitTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#abortTransaction">abortTransaction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setByteOrder">
<db:title>void QDataStream::setByteOrder(QDataStream::ByteOrder <db:emphasis>bo</db:emphasis>)</db:title>
<db:para>Sets the serialization byte order to <db:code role="parameter">bo</db:code>.</db:para>
<db:para>The <db:code role="parameter">bo</db:code> parameter can be <db:link xlink:href="qdatastream.xml#ByteOrder-enum">QDataStream::BigEndian</db:link> or <db:link xlink:href="qdatastream.xml#ByteOrder-enum">QDataStream::LittleEndian</db:link>.</db:para>
<db:para>The default setting is big-endian. We recommend leaving this setting unless you have special requirements.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#byteOrder">byteOrder</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QDataStream::setDevice(QIODevice *<db:emphasis>d</db:emphasis>)</db:title>
<db:para>void QDataStream::setDevice(<db:link xlink:href="qiodevice.xml">QIODevice</db:link> *d)</db:para>
<db:para>Sets the I/O device to <db:code role="parameter">d</db:code>, which can be nullptr to unset to current I/O device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFloatingPointPrecision">
<db:title>void QDataStream::setFloatingPointPrecision(QDataStream::FloatingPointPrecision <db:emphasis>precision</db:emphasis>)</db:title>
<db:para>Sets the floating point precision of the data stream to <db:code role="parameter">precision</db:code>. If the floating point precision is <db:link xlink:href="qdatastream.xml#FloatingPointPrecision-enum">DoublePrecision</db:link> and the version of the data stream is <db:link xlink:href="qdatastream.xml#Version-enum">Qt_4_6</db:link> or higher, all floating point numbers will be written and read with 64-bit precision. If the floating point precision is <db:link xlink:href="qdatastream.xml#FloatingPointPrecision-enum">SinglePrecision</db:link> and the version is <db:link xlink:href="qdatastream.xml#Version-enum">Qt_4_6</db:link> or higher, all floating point numbers will be written and read with 32-bit precision.</db:para>
<db:para>For versions prior to <db:link xlink:href="qdatastream.xml#Version-enum">Qt_4_6</db:link>, the precision of floating point numbers in the data stream depends on the stream operator called.</db:para>
<db:para>The default is <db:link xlink:href="qdatastream.xml#FloatingPointPrecision-enum">DoublePrecision</db:link>.</db:para>
<db:para>Note that this property does not affect the serialization or deserialization of qfloat16 instances.</db:para>
<db:warning>
<db:para>This property must be set to the same value on the object that writes and the object that reads the data stream.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#floatingPointPrecision">floatingPointPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatus">
<db:title>void QDataStream::setStatus(QDataStream::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:para>Sets the status of the data stream to the <db:code role="parameter">status</db:code> given.</db:para>
<db:para>Subsequent calls to setStatus() are ignored until <db:link xlink:href="qdatastream.xml#resetStatus">resetStatus</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#Status-enum">Status</db:link></db:member>
<db:member><db:link xlink:href="qdatastream.xml#status">status</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#resetStatus">resetStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVersion">
<db:title>void QDataStream::setVersion(int <db:emphasis>v</db:emphasis>)</db:title>
<db:para>Sets the version number of the data serialization format to <db:code role="parameter">v</db:code>, a value of the <db:link xlink:href="qdatastream.xml#Version-enum">Version</db:link> enum.</db:para>
<db:para>You don't <db:emphasis>have</db:emphasis> to set a version if you are using the current version of Qt, but for your own custom binary formats we recommend that you do; see <db:link xlink:href="qdatastream.xml#versioning">Versioning</db:link> in the Detailed Description.</db:para>
<db:para>To accommodate new functionality, the datastream serialization format of some Qt classes has changed in some versions of Qt. If you want to read data that was created by an earlier version of Qt, or write data that can be read by a program that was compiled with an earlier version of Qt, use this function to modify the serialization format used by <db:link xlink:href="qdatastream.xml">QDataStream</db:link>.</db:para>
<db:para>The <db:link xlink:href="qdatastream.xml#Version-enum">Version</db:link> enum provides symbolic constants for the different versions of Qt. For example:</db:para>
<db:programlisting language="cpp">QDataStream out(file);
out.setVersion(QDataStream::Qt_4_0);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#version">version</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#Version-enum">Version</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skipRawData">
<db:title>qint64 QDataStream::skipRawData(qint64 <db:emphasis>len</db:emphasis>)</db:title>
<db:para>Skips <db:code role="parameter">len</db:code> bytes from the device. Returns the number of bytes actually skipped, or -1 on error.</db:para>
<db:para>This is equivalent to calling <db:link xlink:href="qdatastream.xml#readRawData">readRawData</db:link>() on a buffer of length <db:code role="parameter">len</db:code> and ignoring the buffer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml#seek">QIODevice::seek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startTransaction">
<db:title>void QDataStream::startTransaction()</db:title>
<db:para>Starts a new read transaction on the stream.</db:para>
<db:para>Defines a restorable point within the sequence of read operations. For sequential devices, read data will be duplicated internally to allow recovery in case of incomplete reads. For random-access devices, this function saves the current position of the stream. Call <db:link xlink:href="qdatastream.xml#commitTransaction">commitTransaction</db:link>(), <db:link xlink:href="qdatastream.xml#rollbackTransaction">rollbackTransaction</db:link>(), or <db:link xlink:href="qdatastream.xml#abortTransaction">abortTransaction</db:link>() to finish the current transaction.</db:para>
<db:para>Once a transaction is started, subsequent calls to this function will make the transaction recursive. Inner transactions act as agents of the outermost transaction (i.e., report the status of read operations to the outermost transaction, which can restore the position of the stream).</db:para>
<db:note>
<db:para>Restoring to the point of the nested startTransaction() call is not supported.</db:para>
</db:note>
<db:para>When an error occurs during a transaction (including an inner transaction failing), reading from the data stream is suspended (all subsequent read operations return empty/zero values) and subsequent inner transactions are forced to fail. Starting a new outermost transaction recovers from this state. This behavior makes it unnecessary to error-check every read operation separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#commitTransaction">commitTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#rollbackTransaction">rollbackTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#abortTransaction">abortTransaction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status">
<db:title>QDataStream::Status QDataStream::status() const</db:title>
<db:para>Returns the status of the data stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#Status-enum">Status</db:link></db:member>
<db:member><db:link xlink:href="qdatastream.xml#setStatus">setStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#resetStatus">resetStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="version">
<db:title>int QDataStream::version() const</db:title>
<db:para>Returns the version number of the data serialization format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setVersion">setVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#Version-enum">Version</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeBytes">
<db:title>QDataStream &amp;QDataStream::writeBytes(const char *<db:emphasis>s</db:emphasis>, qint64 <db:emphasis>len</db:emphasis>)</db:title>
<db:para>Writes the length specifier <db:code role="parameter">len</db:code> and the buffer <db:code role="parameter">s</db:code> to the stream and returns a reference to the stream.</db:para>
<db:para>The <db:code role="parameter">len</db:code> is serialized as a quint32 and an optional quint64, followed by <db:code role="parameter">len</db:code> bytes from <db:code role="parameter">s</db:code>. Note that the data is <db:emphasis>not</db:emphasis> encoded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#writeRawData">writeRawData</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#readBytes">readBytes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeRawData">
<db:title>qint64 QDataStream::writeRawData(const char *<db:emphasis>s</db:emphasis>, qint64 <db:emphasis>len</db:emphasis>)</db:title>
<db:para>Writes <db:code role="parameter">len</db:code> bytes from <db:code role="parameter">s</db:code> to the stream. Returns the number of bytes actually written, or -1 on error. The data is <db:emphasis>not</db:emphasis> encoded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#writeBytes">writeBytes</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#write">QIODevice::write</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#readRawData">readRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(qint8 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Writes a signed byte, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(bool <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a boolean value, <db:code role="parameter">i</db:code>, to the stream. Returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-3">
<db:title>[since 6.0] QDataStream &amp;QDataStream::operator&lt;&lt;(char16_t <db:emphasis>c</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a character, <db:code role="parameter">c</db:code>, to the stream. Returns a reference to the stream</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-4">
<db:title>[since 6.0] QDataStream &amp;QDataStream::operator&lt;&lt;(char32_t <db:emphasis>c</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a character, <db:code role="parameter">c</db:code>, to the stream. Returns a reference to the stream</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-5">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(const char *<db:emphasis>s</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the '\0'-terminated string <db:code role="parameter">s</db:code> to the stream and returns a reference to the stream.</db:para>
<db:para>The string is serialized using writeBytes().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#writeBytes">writeBytes</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#writeRawData">writeRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-6">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(double <db:emphasis>f</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a floating point number, <db:code role="parameter">f</db:code>, to the stream using the standard IEEE 754 format. Returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setFloatingPointPrecision">setFloatingPointPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-7">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a floating point number, <db:code role="parameter">f</db:code>, to the stream using the standard IEEE 754 format. Returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setFloatingPointPrecision">setFloatingPointPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-8">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(qint16 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a signed 16-bit integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-9">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(qint32 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a signed 32-bit integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-10">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(qint64 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes a signed 64-bit integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-11">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(quint16 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes an unsigned 16-bit integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-12">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(quint32 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes an unsigned integer, <db:code role="parameter">i</db:code>, to the stream as a 32-bit unsigned integer (quint32). Returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-13">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(quint64 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes an unsigned 64-bit integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-14">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(quint8 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes an unsigned byte, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-15">
<db:title>QDataStream &amp;QDataStream::operator&lt;&lt;(std::nullptr_t <db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates writing a std::nullptr_t, <db:code role="parameter">ptr</db:code>, to the stream and returns a reference to the stream. This function does not actually write anything to the stream, as std::nullptr_t values are stored as 0 bytes.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(bool &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>Reads a boolean value from the stream into <db:code role="parameter">i</db:code>. Returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(qint8 &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>Reads a signed byte from the stream into <db:code role="parameter">i</db:code>, and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-3">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(char *&amp;<db:emphasis>s</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads string <db:code role="parameter">s</db:code> from the stream and returns a reference to the stream.</db:para>
<db:para>The string is deserialized using readBytes() where the serialization format is a quint32 length specifier first, followed by that many bytes of data. The resulting string is always '\0'-terminated.</db:para>
<db:para>Space for the string is allocated using new [] – the caller must destroy it with delete [].</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#readBytes">readBytes</db:link>()</db:member>
<db:member><db:link xlink:href="qdatastream.xml#readRawData">readRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-4">
<db:title>[since 6.0] QDataStream &amp;QDataStream::operator&gt;&gt;(char16_t &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a 16bit wide char from the stream into <db:code role="parameter">c</db:code> and returns a reference to the stream.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-5">
<db:title>[since 6.0] QDataStream &amp;QDataStream::operator&gt;&gt;(char32_t &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a 32bit wide character from the stream into <db:code role="parameter">c</db:code> and returns a reference to the stream.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-6">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(double &amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a floating point number from the stream into <db:code role="parameter">f</db:code>, using the standard IEEE 754 format. Returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setFloatingPointPrecision">setFloatingPointPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-7">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(float &amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a floating point number from the stream into <db:code role="parameter">f</db:code>, using the standard IEEE 754 format. Returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml#setFloatingPointPrecision">setFloatingPointPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-8">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(qint16 &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a signed 16-bit integer from the stream into <db:code role="parameter">i</db:code>, and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-9">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(qint32 &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a signed 32-bit integer from the stream into <db:code role="parameter">i</db:code>, and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-10">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(qint64 &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a signed 64-bit integer from the stream into <db:code role="parameter">i</db:code>, and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-11">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(quint16 &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads an unsigned 16-bit integer from the stream into <db:code role="parameter">i</db:code>, and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-12">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(quint32 &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads an unsigned 32-bit integer from the stream into <db:code role="parameter">i</db:code>, and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-13">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(quint64 &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads an unsigned 64-bit integer from the stream, into <db:code role="parameter">i</db:code>, and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-14">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(quint8 &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads an unsigned byte from the stream into <db:code role="parameter">i</db:code>, and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-15">
<db:title>QDataStream &amp;QDataStream::operator&gt;&gt;(std::nullptr_t &amp;<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates reading a std::nullptr_t from the stream into <db:code role="parameter">ptr</db:code> and returns a reference to the stream. This function does not actually read anything from the stream, as std::nullptr_t values are stored as 0 bytes.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-16">
<db:title>[since 6.0] QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const std::pair&lt;T1, T2&gt; &amp;<db:emphasis>pair</db:emphasis>)</db:title>
<db:para>Writes the pair <db:code role="parameter">pair</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:para>This function requires the T1 and T2 types to implement operator&lt;&lt;().</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-16">
<db:title>[since 6.0] QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, std::pair&lt;T1, T2&gt; &amp;<db:emphasis>pair</db:emphasis>)</db:title>
<db:para>Reads a pair from stream <db:code role="parameter">in</db:code> into <db:code role="parameter">pair</db:code>.</db:para>
<db:para>This function requires the T1 and T2 types to implement operator&gt;&gt;().</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
