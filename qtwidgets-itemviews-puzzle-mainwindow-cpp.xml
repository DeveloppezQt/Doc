<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Item Views Puzzle Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Puzzle example shows how to enable drag and drop with a custom model to allow items to be transferred between a view and another widget.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &quot;piecesmodel.h&quot;
#include &quot;puzzlewidget.h&quot;

#include &lt;QtWidgets&gt;
#include &lt;stdlib.h&gt;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    setupMenus();
    setupWidgets();
    model = new PiecesModel(puzzleWidget-&gt;pieceSize(), this);
    piecesList-&gt;setModel(model);

    setSizePolicy(QSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed));
    setWindowTitle(tr(&quot;Puzzle&quot;));
}

void MainWindow::openImage()
{
    const QString fileName =
        QFileDialog::getOpenFileName(this,
                                     tr(&quot;Open Image&quot;), QString(),
                                     tr(&quot;Image Files (*.png *.jpg *.bmp)&quot;));
    if (!fileName.isEmpty())
        loadImage(fileName);
}

void MainWindow::loadImage(const QString &amp;fileName)
{
    QPixmap newImage;
    if (!newImage.load(fileName)) {
        QMessageBox::warning(this, tr(&quot;Open Image&quot;),
                             tr(&quot;The image file could not be loaded.&quot;),
                             QMessageBox::Cancel);
        return;
    }
    puzzleImage = newImage;
    setupPuzzle();
}

void MainWindow::setCompleted()
{
    QMessageBox::information(this, tr(&quot;Puzzle Completed&quot;),
                             tr(&quot;Congratulations! You have completed the puzzle!\n&quot;
                                &quot;Click OK to start again.&quot;),
                             QMessageBox::Ok);

    setupPuzzle();
}

void MainWindow::setupPuzzle()
{
    int size = qMin(puzzleImage.width(), puzzleImage.height());
    puzzleImage = puzzleImage.copy((puzzleImage.width() - size) / 2,
        (puzzleImage.height() - size) / 2, size, size).scaled(puzzleWidget-&gt;imageSize(),
            puzzleWidget-&gt;imageSize(), Qt::IgnoreAspectRatio, Qt::SmoothTransformation);

    qsrand(QCursor::pos().x() ^ QCursor::pos().y());

    model-&gt;addPieces(puzzleImage);
    puzzleWidget-&gt;clear();
}

void MainWindow::setupMenus()
{
    QMenu *fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));

    QAction *openAction = fileMenu-&gt;addAction(tr(&quot;&amp;Open...&quot;));
    openAction-&gt;setShortcuts(QKeySequence::Open);

    QAction *exitAction = fileMenu-&gt;addAction(tr(&quot;E&amp;xit&quot;));
    exitAction-&gt;setShortcuts(QKeySequence::Quit);

    QMenu *gameMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Game&quot;));

    QAction *restartAction = gameMenu-&gt;addAction(tr(&quot;&amp;Restart&quot;));

    connect(openAction, &amp;QAction::triggered, this, &amp;MainWindow::openImage);
    connect(exitAction, &amp;QAction::triggered, qApp, &amp;QCoreApplication::quit);
    connect(restartAction, &amp;QAction::triggered, this, &amp;MainWindow::setupPuzzle);
}

void MainWindow::setupWidgets()
{
    QFrame *frame = new QFrame;
    QHBoxLayout *frameLayout = new QHBoxLayout(frame);

    puzzleWidget = new PuzzleWidget(400);

    piecesList = new QListView;
    piecesList-&gt;setDragEnabled(true);
    piecesList-&gt;setViewMode(QListView::IconMode);
    piecesList-&gt;setIconSize(QSize(puzzleWidget-&gt;pieceSize() - 20, puzzleWidget-&gt;pieceSize() - 20));
    piecesList-&gt;setGridSize(QSize(puzzleWidget-&gt;pieceSize(), puzzleWidget-&gt;pieceSize()));
    piecesList-&gt;setSpacing(10);
    piecesList-&gt;setMovement(QListView::Snap);
    piecesList-&gt;setAcceptDrops(true);
    piecesList-&gt;setDropIndicatorShown(true);

    PiecesModel *model = new PiecesModel(puzzleWidget-&gt;pieceSize(), this);
    piecesList-&gt;setModel(model);

    connect(puzzleWidget, &amp;PuzzleWidget::puzzleCompleted,
            this, &amp;MainWindow::setCompleted, Qt::QueuedConnection);

    frameLayout-&gt;addWidget(piecesList);
    frameLayout-&gt;addWidget(puzzleWidget);
    setCentralWidget(frame);
}

</db:programlisting>
</db:article>
