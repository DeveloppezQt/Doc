<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>totally_ordered_wrapper Class</db:title>
<db:subtitle>template &lt;typename P&gt; class Qt::totally_ordered_wrapper</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qt-totally-ordered-wrapper.xml">Qt::totally_ordered_wrapper</db:link> is a wrapper type that provides strict total order for the wrapped types.</db:para>
<db:para>This class was introduced in Qt 6.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtCompare</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>One of its primary usecases is to prevent <db:emphasis>Undefined Behavior</db:emphasis> (UB) when comparing pointers.</db:para>
<db:para>Consider the following simple class:</db:para>
<db:programlisting language="cpp">template &lt;typename T&gt;
struct PointerWrapperBad {
    int val;
    T *ptr;
};
</db:programlisting>
<db:para>Lexicographical comparison of the two instances of the <db:code>PointerWrapperBad</db:code> type would result in UB, because it will call <db:code>operator&lt;()</db:code> or <db:code>operator&lt;=&gt;()</db:code> on the <db:code>ptr</db:code> members.</db:para>
<db:para>To fix it, use the new wrapper type:</db:para>
<db:programlisting language="cpp">template &lt;typename T&gt;
struct PointerWrapperGood {
    int val;
    Qt::totally_ordered_wrapper&lt;T *&gt; ptr;

    friend bool
    operator==(PointerWrapperGood lhs, PointerWrapperGood rhs) noexcept = default;
    friend auto
    operator&lt;=&gt;(PointerWrapperGood lhs, PointerWrapperGood rhs) noexecpt = default;
};
</db:programlisting>
<db:para>The <db:code>operator&lt;()</db:code> and (if available) <db:code>operator&lt;=&gt;()</db:code> operators for the <db:code>Qt::totally_ordered_wrapper</db:code> type use the <db:link xlink:href="https://en.cppreference.com/w/cpp/utility/functional/less">std::less</db:link> and <db:link xlink:href="https://en.cppreference.com/w/cpp/utility/compare/compare_three_way">std::compare_three_way</db:link> function objects respectively, providing <db:link xlink:href="https://en.cppreference.com/w/cpp/language/operator_comparison#Pointer_total_order">strict total order over pointers</db:link> when doing the comparison.</db:para>
<db:para>As a result, the relational operators for <db:code>PointerWrapperGood::ptr</db:code> member will be well-defined, and we can even <db:code>=default</db:code> the relational operators for the <db:code>PointerWrapperGood</db:code> class, like it's shown above.</db:para>
</db:section>
</db:article>
