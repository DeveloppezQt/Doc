<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Vertex Skinning</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>Qt Quick 3D supports vertex skinning for skeletal animation of mesh geometries.</db:para>
<db:para>See the <db:link xlink:href="qtquick3d-skinning-example.xml">Simple Skinning Example</db:link> for a practical demonstration of skeletal animation.</db:para>
<db:para>In most cases, application developers will not be using the skinning API manually. The normal workflow is to use an external content creation tool to define the skeleton and the skin (this is sometimes also referred to as <db:emphasis>rigging</db:emphasis>), and then use the <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam Asset Import Tool</db:link> to convert the asset to Qt Quick 3D's native format.</db:para>
</db:section>
<db:section xml:id="defining-a-skeleton">
<db:title>Defining a skeleton</db:title>
<db:para>The basis of skeletal animation is the <db:link xlink:href="qml-qtquick3d-skeleton.xml">Skeleton</db:link>. This is an abstract representation of how the model can move, inspired by how a physical skeleton works for vertebrates. The &quot;bones&quot; of the skeleton is represented by a hierarchy of <db:link xlink:href="qml-qtquick3d-joint.xml">Joint</db:link> nodes. These do not necessarily need to represent actual bones, of course.</db:para>
<db:programlisting language="qml">Skeleton {
    id: qmlskeleton
    Joint {
        id: joint0
        index: 0
        skeletonRoot: qmlskeleton
        Joint {
            id: joint1
            index: 1
            skeletonRoot: qmlskeleton
        }
        Joint {
            id: joint2
            index: 2
            skeletonRoot: qmlskeleton
        }

    }
}
</db:programlisting>
</db:section>
<db:section xml:id="connecting-a-skeleton-to-a-model">
<db:title>Connecting a skeleton to a model</db:title>
<db:para>To apply a skeleton to a model, set the model's <db:link xlink:href="qml-qtquick3d-model.xml#skeleton-prop">skeleton</db:link> property:</db:para>
<db:programlisting language="qml">Model {
    skeleton: qmlskeleton
    ...
</db:programlisting>
<db:para>In order for the skeleton to have an effect, the model's <db:link xlink:href="qml-qtquick3d-model.xml#geometry-prop">geometry</db:link> needs to include skinning information. This is done by including <db:link xlink:href="qquick3dgeometry.xml#addAttribute">vertex attributes</db:link> with <db:code>JointSemantic</db:code> and <db:code>WeightSemantic</db:code> in the vertex buffer.</db:para>
<db:para>The <db:code>JointSemantic</db:code> attribute determines <db:emphasis>which</db:emphasis> of the joints in the skeleton can influence a given vertex. This uses the index values specified by <db:link xlink:href="qml-qtquick3d-joint.xml#index-prop">Joint.index</db:link>. Since this attribute contains 4 indexes, a maximum of 4 joints can influence one vertex.</db:para>
<db:para>The <db:code>WeightSemantic</db:code> attribute describes the <db:emphasis>strength</db:emphasis> of the influence of those joints. It contains four floating point values, each value determining the weight given to the joint with the index at the corresponding position in the <db:code>JointSemantic</db:code> attribute.</db:para>
<db:para>For example, given the skeleton above, if a vertex has these attributes:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:code>JointSemantic</db:code> attribute</db:para>
</db:th>
<db:th>
<db:para><db:code>WeightSemantic</db:code> attribute</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>QVector4D(2, 0, 0, 0)</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>QVector4D(1.0, 0.0, 0.0, 0.0)</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>that vertex will be 100% influenced by <db:emphasis>joint2</db:emphasis>, and it will move exactly as much as that joint. The last three indexes in the <db:code>JointSemantic</db:code> attribute are ignored since the corresponding weights are <db:code>0.0</db:code>.</db:para>
<db:para>As another example, with these attributes:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:code>JointSemantic</db:code> attribute</db:para>
</db:th>
<db:th>
<db:para><db:code>WeightSemantic</db:code> attribute</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>QVector4D(1, 2, 0, 0)</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>QVector4D(0.5, 0.25, 0.0, 0.0)</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>the vertex will be moved by 50% of <db:emphasis>joint1</db:emphasis>'s movement plus 25% of <db:emphasis>joint2</db:emphasis>'s movement.</db:para>
<db:para>In addition, since the skeleton is an abstract representation, the model need to specify geometry information for the joints. For performance reasons, this is not done by specifying the information directly. Instead, <db:link xlink:href="qml-qtquick3d-model.xml#inverseBindPoses-prop">Model.inverseBindPoses</db:link> contains the <db:emphasis>inverse</db:emphasis> of the transformation matrix needed to move each joint to its initial position.</db:para>
</db:section>
<db:section xml:id="animating-the-skeleton">
<db:title>Animating the skeleton</db:title>
<db:para>Transforming a joint in a skeleton will move all vertexes connected to that joint. Since Joint inheriths from <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link>, a skeleton can be animated simply by using standard <db:link xlink:href="qml-qtquick-animation.xml">QML animations</db:link>.</db:para>
<db:programlisting language="qml">NumberAnimation {
    target: joint1
    property: &quot;eulerRotation.z&quot;
    duration: 5000
    from: -90
    to: 90
    running: true
}
</db:programlisting>
<db:para>While it is possible to create complex animations by nesting <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link>, <db:link xlink:href="qml-qtquick-parallelanimation.xml">ParallelAnimation</db:link> and <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link>, it is generally more convenient to use <db:link xlink:href="qtquicktimeline-overview.xml">timeline animations</db:link> for animating skinned models.</db:para>
</db:section>
</db:article>
