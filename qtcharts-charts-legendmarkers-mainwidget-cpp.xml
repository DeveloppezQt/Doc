<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>LegendMarkers Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to make use of legend markers.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwidget.h&quot;
#include &amp;lt;QtCharts/QChart&amp;gt;
#include &amp;lt;QtCharts/QChartView&amp;gt;
#include &amp;lt;QtWidgets/QPushButton&amp;gt;
#include &amp;lt;QtWidgets/QLabel&amp;gt;
#include &amp;lt;QtCore/QDebug&amp;gt;
#include &amp;lt;QtCharts/QLegend&amp;gt;
#include &amp;lt;QtWidgets/QFormLayout&amp;gt;
#include &amp;lt;QtCharts/QLegendMarker&amp;gt;
#include &amp;lt;QtCharts/QLineSeries&amp;gt;
#include &amp;lt;QtCharts/QXYLegendMarker&amp;gt;
#include &amp;lt;QtCore/QtMath&amp;gt;

QT_CHARTS_USE_NAMESPACE

MainWidget::MainWidget(QWidget *parent) :
    QWidget(parent)
{
    // Create chart view with the chart
    m_chart = new QChart();
    m_chartView = new QChartView(m_chart, this);

    // Create layout for grid and detached legend
    m_mainLayout = new QGridLayout();
    m_mainLayout-&amp;gt;addWidget(m_chartView, 0, 1, 3, 1);
    setLayout(m_mainLayout);

    // Add few series
    addSeries();
    addSeries();
    addSeries();
    addSeries();

    connectMarkers();

    // Set the title and show legend
    m_chart-&amp;gt;setTitle(&quot;Legendmarker example (click on legend)&quot;);
    m_chart-&amp;gt;legend()-&amp;gt;setVisible(true);
    m_chart-&amp;gt;legend()-&amp;gt;setAlignment(Qt::AlignBottom);

    m_chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);
}

void MainWidget::addSeries()
{
    QLineSeries *series = new QLineSeries();
    m_series.append(series);

    series-&amp;gt;setName(QString(&quot;line &quot; + QString::number(m_series.count())));

    // Make some sine wave for data
    QList&amp;lt;QPointF&amp;gt; data;
    int offset = m_chart-&amp;gt;series().count();
    for (int i = 0; i &amp;lt; 360; i++) {
        qreal x = offset * 20 + i;
        data.append(QPointF(i, qSin(qDegreesToRadians(x))));
    }

    series-&amp;gt;append(data);
    m_chart-&amp;gt;addSeries(series);

    if (m_series.count() == 1)
        m_chart-&amp;gt;createDefaultAxes();
}

void MainWidget::removeSeries()
{
    // Remove last series from chart
    if (m_series.count() &amp;gt; 0) {
        QLineSeries *series = m_series.last();
        m_chart-&amp;gt;removeSeries(series);
        m_series.removeLast();
        delete series;
    }
}

void MainWidget::connectMarkers()
{
    // Connect all markers to handler
    const auto markers = m_chart-&amp;gt;legend()-&amp;gt;markers();
    for (QLegendMarker *marker : markers) {
        // Disconnect possible existing connection to avoid multiple connections
        QObject::disconnect(marker, &amp;amp;QLegendMarker::clicked,
                            this, &amp;amp;MainWidget::handleMarkerClicked);
        QObject::connect(marker, &amp;amp;QLegendMarker::clicked, this, &amp;amp;MainWidget::handleMarkerClicked);
    }
}

void MainWidget::disconnectMarkers()
{
    const auto markers = m_chart-&amp;gt;legend()-&amp;gt;markers();
    for (QLegendMarker *marker : markers) {
        QObject::disconnect(marker, &amp;amp;QLegendMarker::clicked,
                            this, &amp;amp;MainWidget::handleMarkerClicked);
    }
}

void MainWidget::handleMarkerClicked()
{
    QLegendMarker* marker = qobject_cast&amp;lt;QLegendMarker*&amp;gt; (sender());
    Q_ASSERT(marker);

    switch (marker-&amp;gt;type())
    {
        case QLegendMarker::LegendMarkerTypeXY:
        {
        // Toggle visibility of series
        marker-&amp;gt;series()-&amp;gt;setVisible(!marker-&amp;gt;series()-&amp;gt;isVisible());

        // Turn legend marker back to visible, since hiding series also hides the marker
        // and we don't want it to happen now.
        marker-&amp;gt;setVisible(true);

        // Dim the marker, if series is not visible
        qreal alpha = 1.0;

        if (!marker-&amp;gt;series()-&amp;gt;isVisible())
            alpha = 0.5;

        QColor color;
        QBrush brush = marker-&amp;gt;labelBrush();
        color = brush.color();
        color.setAlphaF(alpha);
        brush.setColor(color);
        marker-&amp;gt;setLabelBrush(brush);

        brush = marker-&amp;gt;brush();
        color = brush.color();
        color.setAlphaF(alpha);
        brush.setColor(color);
        marker-&amp;gt;setBrush(brush);

        QPen pen = marker-&amp;gt;pen();
        color = pen.color();
        color.setAlphaF(alpha);
        pen.setColor(color);
        marker-&amp;gt;setPen(pen);

        break;
        }
    default:
        {
        qDebug() &amp;lt;&amp;lt; &quot;Unknown marker type&quot;;
        break;
        }
    }
}

</db:programlisting>
</db:article>
