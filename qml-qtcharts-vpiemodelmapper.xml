<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>VPieModelMapper QML Type</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Vertical model mapper for pie series.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCharts 2.1</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtcharts-vpiemodelmapper.xml">VPieModelMapper</db:link> allows you to use your own <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> derived model with data in columns as a data source for a pie series. It is possible to use both <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> and <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link> data API to manipulate data. <db:link xlink:href="qml-qtcharts-vpiemodelmapper.xml">VPieModelMapper</db:link> keeps the Pie and the model in sync.</db:para>
<db:para>The following QML example would create a pie series with four slices (assuming the model has at least five rows). Each slice would contain a label from column 1 and a value from column 2.</db:para>
<db:programlisting language="cpp">VPieModelMapper {
    series: pieSeries
    model: customModel
    labelsColumn: 1
    valuesColumn: 2
    firstRow: 1
    rowCount: 4
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="columnCount-prop">
<db:title>columnCount : int</db:title>
<db:para>Defines the number of rows of the model that are mapped as the data for QPieSeries. The default value is -1 (count limited by the number of rows in the model)</db:para>
</db:section>
<db:section xml:id="firstRow-prop">
<db:title>firstRow : int</db:title>
<db:para>Defines which row of the model contains the first slice value. The default value is 0.</db:para>
</db:section>
<db:section xml:id="labelsColumn-prop">
<db:title>labelsColumn : int</db:title>
<db:para>Defines which column of the model is kept in sync with the labels of the pie's slices. Default value is -1 (invalid mapping).</db:para>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : SomeModel</db:title>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> based model that is used by the mapper. You need to implement the model and expose it to QML. Note: the model has to support adding/removing rows/columns and modifying the data of the cells.</db:para>
</db:section>
<db:section xml:id="series-prop">
<db:title>series : PieSeries</db:title>
<db:para>Defines the <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link> object that is used by the mapper. If you define the mapper element as a child for a <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link>, leave this property undefined. All the data in the series is discarded when it is set to the mapper. When new series is specified the old series is disconnected (it preserves its data).</db:para>
</db:section>
<db:section xml:id="valuesColumn-prop">
<db:title>valuesColumn : int</db:title>
<db:para>Defines which column of the model is kept in sync with the values of the pie's slices. Default value is -1 (invalid mapping).</db:para>
</db:section>
</db:section>
</db:article>
