<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Serial Bus C++ Classes</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides classes to read and write serial bus data.</db:para>
<db:para>This module was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Provides classes to read and write serial bus data.</db:para>
<db:para>This module was introduced in Qt 5.8.</db:para>
<db:section xml:id="classes">
<db:title>Classes</db:title>
<db:variablelist role="classes">
<db:varlistentry>
<db:term><db:link xlink:href="qcanbus.xml" xlink:role="class">QCanBus</db:link></db:term>
<db:listitem>
<db:para>The QCanBus class handles registration and creation of bus plugins.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcanbusdevice.xml" xlink:role="class">QCanBusDevice</db:link></db:term>
<db:listitem>
<db:para>The QCanBusDevice class is the interface class for CAN bus.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcanbusdevice-filter.xml" xlink:role="class">QCanBusDevice::Filter</db:link></db:term>
<db:listitem>
<db:para>The QCanBusDevice::Filter struct defines a filter for CAN bus frames.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcanbusdeviceinfo.xml" xlink:role="class">QCanBusDeviceInfo</db:link></db:term>
<db:listitem>
<db:para>The QCanBusDeviceInfo provides information about CAN bus interfaces.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcanbusfactory.xml" xlink:role="class">QCanBusFactory</db:link></db:term>
<db:listitem>
<db:para>The QCanBusFactory class is a factory class used as the plugin interface for CAN bus plugins.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcanbusframe.xml" xlink:role="class">QCanBusFrame</db:link></db:term>
<db:listitem>
<db:para>QCanBusFrame is a container class representing a single CAN frame.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcanbusframe-timestamp.xml" xlink:role="class">QCanBusFrame::TimeStamp</db:link></db:term>
<db:listitem>
<db:para>The TimeStamp class provides timestamp information with microsecond precision.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusclient.xml" xlink:role="class">QModbusClient</db:link></db:term>
<db:listitem>
<db:para>The QModbusClient class is the interface to send Modbus requests.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusdataunit.xml" xlink:role="class">QModbusDataUnit</db:link></db:term>
<db:listitem>
<db:para>QModbusDataUnit is a container class representing single bit and &lt;@number&gt;16&lt;/@number&gt; bit word entries in the Modbus register.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusdevice.xml" xlink:role="class">QModbusDevice</db:link></db:term>
<db:listitem>
<db:para>The QModbusDevice class is the base class for Modbus classes, QModbusServer and QModbusClient.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusdeviceidentification.xml" xlink:role="class">QModbusDeviceIdentification</db:link></db:term>
<db:listitem>
<db:para>The QModbusDeviceIdentification is a container class representing the physical and functional description of a Modbus server.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusexceptionresponse.xml" xlink:role="class">QModbusExceptionResponse</db:link></db:term>
<db:listitem>
<db:para>QModbusExceptionResponse is a container class containing the function and error code inside a Modbus ADU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbuspdu.xml" xlink:role="class">QModbusPdu</db:link></db:term>
<db:listitem>
<db:para>QModbusPdu is a abstract container class containing the function code and payload that is stored inside a Modbus ADU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusreply.xml" xlink:role="class">QModbusReply</db:link></db:term>
<db:listitem>
<db:para>The QModbusReply class contains the data for a request sent with a QModbusClient derived class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusrequest.xml" xlink:role="class">QModbusRequest</db:link></db:term>
<db:listitem>
<db:para>QModbusRequest is a container class containing the function code and payload that is stored inside a Modbus ADU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusresponse.xml" xlink:role="class">QModbusResponse</db:link></db:term>
<db:listitem>
<db:para>QModbusResponse is a container class containing the function code and payload that is stored inside a Modbus ADU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusrtuserialclient.xml" xlink:role="class">QModbusRtuSerialClient</db:link></db:term>
<db:listitem>
<db:para>The QModbusRtuSerialClient class represents a Modbus client that uses a serial bus for its communication with the Modbus server.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusrtuserialserver.xml" xlink:role="class">QModbusRtuSerialServer</db:link></db:term>
<db:listitem>
<db:para>The QModbusRtuSerialServer class represents a Modbus server that uses a serial port for its communication with the Modbus client.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbusserver.xml" xlink:role="class">QModbusServer</db:link></db:term>
<db:listitem>
<db:para>The QModbusServer class is the interface to receive and process Modbus requests.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbustcpclient.xml" xlink:role="class">QModbusTcpClient</db:link></db:term>
<db:listitem>
<db:para>The QModbusTcpClient class is the interface class for Modbus TCP client device.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbustcpconnectionobserver.xml" xlink:role="class">QModbusTcpConnectionObserver</db:link></db:term>
<db:listitem>
<db:para>The QModbusTcpConnectionObserver class represents the interface for objects that can be passed to QModbusTcpServer::installConnectionObserver.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmodbustcpserver.xml" xlink:role="class">QModbusTcpServer</db:link></db:term>
<db:listitem>
<db:para>The QModbusTcpServer class represents a Modbus server that uses a TCP server for its communication with the Modbus client.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Provides classes to access various serial buses.</db:para>
<db:para>For C++ projects include the header appropriate for the current use case, for example applications using the CAN bus device may use</db:para>
<db:programlisting language="cpp">#include &amp;lt;QCanBusDevice&amp;gt;
</db:programlisting>
<db:para>To use the module with CMake, use the <db:code>find_package()</db:code> command to locate the needed module components in the <db:code>Qt6</db:code> package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 COMPONENTS SerialBus REQUIRED)
target_link_libraries(mytarget PRIVATE Qt6::SerialBus)
</db:programlisting>
<db:para>To use the module for building with qmake, add the module as a value of the <db:code>QT</db:code> variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT += serialbus
</db:programlisting>
<db:para>See more in the <db:link xlink:href="qtserialbus-index.xml">Qt Serial Bus Overview</db:link>.</db:para>
</db:section>
</db:article>
