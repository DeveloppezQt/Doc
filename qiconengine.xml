<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QIconEngine Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qiconengine.xml">QIconEngine</db:link> class provides an abstract base class for <db:link xlink:href="qicon.xml">QIcon</db:link> renderers.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QIconEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QIconEngine is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An icon engine provides the rendering functions for a <db:link xlink:href="qicon.xml">QIcon</db:link>. Each icon has a corresponding icon engine that is responsible for drawing the icon with a requested size, mode and state.</db:para>
<db:para>The icon is rendered by the <db:link xlink:href="qiconengine.xml#paint">paint</db:link>() function, and the icon can additionally be obtained as a pixmap with the <db:link xlink:href="qiconengine.xml#pixmap">pixmap</db:link>() function (the default implementation simply uses <db:link xlink:href="qiconengine.xml#paint">paint</db:link>() to achieve this). The <db:link xlink:href="qiconengine.xml#addPixmap">addPixmap</db:link>() function can be used to add new pixmaps to the icon engine, and is used by <db:link xlink:href="qicon.xml">QIcon</db:link> to add specialized custom pixmaps.</db:para>
<db:para>The <db:link xlink:href="qiconengine.xml#paint">paint</db:link>(), <db:link xlink:href="qiconengine.xml#pixmap">pixmap</db:link>(), and <db:link xlink:href="qiconengine.xml#addPixmap">addPixmap</db:link>() functions are all virtual, and can therefore be reimplemented in subclasses of <db:link xlink:href="qiconengine.xml">QIconEngine</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiconengineplugin.xml">QIconEnginePlugin</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="IconEngineHook-enum">
<db:title>[since 4.5] enum QIconEngine::IconEngineHook</db:title>
<db:para>These enum values are used for <db:link xlink:href="qiconengine.xml#virtual_hook">virtual_hook</db:link>() to allow additional queries to icon engine without breaking binary compatibility.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiconengine.xml">QIconEngine</db:link></db:emphasis>::AvailableSizesHook</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Allows to query the sizes of the contained pixmaps for pixmap-based engines. The <db:code role="parameter">data</db:code> argument of the <db:link xlink:href="qiconengine.xml#virtual_hook">virtual_hook</db:link>() function is a <db:link xlink:href="qiconengine-availablesizesargument.xml">AvailableSizesArgument</db:link> pointer that should be filled with icon sizes. Engines that work in terms of a scalable, vectorial format normally return an empty list.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiconengine.xml">QIconEngine</db:link></db:emphasis>::IconNameHook</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Allows to query the name used to create the icon, for example when instantiating an icon using <db:link xlink:href="qicon.xml#fromTheme">QIcon::fromTheme</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiconengine.xml#virtual_hook">virtual_hook</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QIconEngine">
<db:title>[virtual noexcept] QIconEngine::~QIconEngine()</db:title>
<db:para>Destroys the icon engine.</db:para>
</db:section>
<db:section xml:id="actualSize">
<db:title>[virtual] QSize QIconEngine::actualSize(const QSize &amp;<db:emphasis>size</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis>, QIcon::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Returns the actual size of the icon the engine provides for the requested <db:code role="parameter">size</db:code>, <db:code role="parameter">mode</db:code> and <db:code role="parameter">state</db:code>. The default implementation returns the given <db:code role="parameter">size</db:code>.</db:para>
</db:section>
<db:section xml:id="addFile">
<db:title>[virtual] void QIconEngine::addFile(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis>, QIcon::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Called by <db:link xlink:href="qicon.xml#addFile">QIcon::addFile</db:link>(). Adds a specialized pixmap from the file with the given <db:code role="parameter">fileName</db:code>, <db:code role="parameter">size</db:code>, <db:code role="parameter">mode</db:code> and <db:code role="parameter">state</db:code>. The default pixmap-based engine stores any supplied file names, and it loads the pixmaps on demand instead of using scaled pixmaps if the size of a pixmap matches the size of icon requested. Custom icon engines that implement scalable vector formats are free to ignores any extra files.</db:para>
</db:section>
<db:section xml:id="addPixmap">
<db:title>[virtual] void QIconEngine::addPixmap(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis>, QIcon::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Called by <db:link xlink:href="qicon.xml#addPixmap">QIcon::addPixmap</db:link>(). Adds a specialized <db:code role="parameter">pixmap</db:code> for the given <db:code role="parameter">mode</db:code> and <db:code role="parameter">state</db:code>. The default pixmap-based engine stores any supplied pixmaps, and it uses them instead of scaled pixmaps if the size of a pixmap matches the size of icon requested. Custom icon engines that implement scalable vector formats are free to ignores any extra pixmaps.</db:para>
</db:section>
<db:section xml:id="availableSizes">
<db:title>[virtual, since 4.5] QList&lt;QSize&gt; QIconEngine::availableSizes(QIcon::Mode <db:emphasis>mode</db:emphasis> = QIcon::Normal, QIcon::State <db:emphasis>state</db:emphasis> = QIcon::Off) const</db:title>
<db:para>Returns sizes of all images that are contained in the engine for the specific <db:code role="parameter">mode</db:code> and <db:code role="parameter">state</db:code>.</db:para>
<db:note>
<db:para>This is a helper method and the actual work is done by <db:link xlink:href="qiconengine.xml#virtual_hook">virtual_hook</db:link>() method, hence this method depends on icon engine support and may not work with all icon engines.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="clone">
<db:title>[pure virtual] QIconEngine *QIconEngine::clone() const</db:title>
<db:para>Reimplement this method to return a clone of this icon engine.</db:para>
</db:section>
<db:section xml:id="iconName">
<db:title>[virtual, since 4.7] QString QIconEngine::iconName() const</db:title>
<db:para>Returns the name used to create the engine, if available.</db:para>
<db:note>
<db:para>This is a helper method and the actual work is done by <db:link xlink:href="qiconengine.xml#virtual_hook">virtual_hook</db:link>() method, hence this method depends on icon engine support and may not work with all icon engines.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.7.</db:para>
</db:section>
<db:section xml:id="key">
<db:title>[virtual] QString QIconEngine::key() const</db:title>
<db:para>Returns a key that identifies this icon engine.</db:para>
</db:section>
<db:section xml:id="paint">
<db:title>[pure virtual] void QIconEngine::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis>, QIcon::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Uses the given <db:code role="parameter">painter</db:code> to paint the icon with the required <db:code role="parameter">mode</db:code> and <db:code role="parameter">state</db:code> into the rectangle <db:code role="parameter">rect</db:code>.</db:para>
</db:section>
<db:section xml:id="pixmap">
<db:title>[virtual] QPixmap QIconEngine::pixmap(const QSize &amp;<db:emphasis>size</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis>, QIcon::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Returns the icon as a pixmap with the required <db:code role="parameter">size</db:code>, <db:code role="parameter">mode</db:code>, and <db:code role="parameter">state</db:code>. The default implementation creates a new pixmap and calls <db:link xlink:href="qiconengine.xml#paint">paint</db:link>() to fill it.</db:para>
</db:section>
<db:section xml:id="read">
<db:title>[virtual] bool QIconEngine::read(QDataStream &amp;<db:emphasis>in</db:emphasis>)</db:title>
<db:para>Reads icon engine contents from the <db:link xlink:href="qdatastream.xml">QDataStream</db:link> <db:code role="parameter">in</db:code>. Returns true if the contents were read; otherwise returns false.</db:para>
<db:para><db:link xlink:href="qiconengine.xml">QIconEngine</db:link>'s default implementation always return false.</db:para>
</db:section>
<db:section xml:id="virtual_hook">
<db:title>[virtual, since 4.5] void QIconEngine::virtual_hook(int <db:emphasis>id</db:emphasis>, void *<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Additional method to allow extending <db:link xlink:href="qiconengine.xml">QIconEngine</db:link> without adding new virtual methods (and without breaking binary compatibility). The actual action and format of <db:code role="parameter">data</db:code> depends on <db:code role="parameter">id</db:code> argument which is in fact a constant from <db:link xlink:href="qiconengine.xml#IconEngineHook-enum">IconEngineHook</db:link> enum.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiconengine.xml#IconEngineHook-enum">IconEngineHook</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>[virtual] bool QIconEngine::write(QDataStream &amp;<db:emphasis>out</db:emphasis>) const</db:title>
<db:para>Writes the contents of this engine to the <db:link xlink:href="qdatastream.xml">QDataStream</db:link> <db:code role="parameter">out</db:code>. Returns true if the contents were written; otherwise returns false.</db:para>
<db:para><db:link xlink:href="qiconengine.xml">QIconEngine</db:link>'s default implementation always return false.</db:para>
</db:section>
</db:section>
</db:article>
