<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Config Dialog Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Config Dialog examples shows how a configuration dialog can be created by using an icon view with a stacked widget.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;pages.h&quot;

ConfigurationPage::ConfigurationPage(QWidget *parent)
    : QWidget(parent)
{
    QGroupBox *configGroup = new QGroupBox(tr(&quot;Server configuration&quot;));

    QLabel *serverLabel = new QLabel(tr(&quot;Server:&quot;));
    QComboBox *serverCombo = new QComboBox;
    serverCombo-&gt;addItem(tr(&quot;Qt (Australia)&quot;));
    serverCombo-&gt;addItem(tr(&quot;Qt (Germany)&quot;));
    serverCombo-&gt;addItem(tr(&quot;Qt (Norway)&quot;));
    serverCombo-&gt;addItem(tr(&quot;Qt (People's Republic of China)&quot;));
    serverCombo-&gt;addItem(tr(&quot;Qt (USA)&quot;));

    QHBoxLayout *serverLayout = new QHBoxLayout;
    serverLayout-&gt;addWidget(serverLabel);
    serverLayout-&gt;addWidget(serverCombo);

    QVBoxLayout *configLayout = new QVBoxLayout;
    configLayout-&gt;addLayout(serverLayout);
    configGroup-&gt;setLayout(configLayout);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&gt;addWidget(configGroup);
    mainLayout-&gt;addStretch(1);
    setLayout(mainLayout);
}

UpdatePage::UpdatePage(QWidget *parent)
    : QWidget(parent)
{
    QGroupBox *updateGroup = new QGroupBox(tr(&quot;Package selection&quot;));
    QCheckBox *systemCheckBox = new QCheckBox(tr(&quot;Update system&quot;));
    QCheckBox *appsCheckBox = new QCheckBox(tr(&quot;Update applications&quot;));
    QCheckBox *docsCheckBox = new QCheckBox(tr(&quot;Update documentation&quot;));

    QGroupBox *packageGroup = new QGroupBox(tr(&quot;Existing packages&quot;));

    QListWidget *packageList = new QListWidget;
    QListWidgetItem *qtItem = new QListWidgetItem(packageList);
    qtItem-&gt;setText(tr(&quot;Qt&quot;));
    QListWidgetItem *qsaItem = new QListWidgetItem(packageList);
    qsaItem-&gt;setText(tr(&quot;QSA&quot;));
    QListWidgetItem *teamBuilderItem = new QListWidgetItem(packageList);
    teamBuilderItem-&gt;setText(tr(&quot;Teambuilder&quot;));

    QPushButton *startUpdateButton = new QPushButton(tr(&quot;Start update&quot;));

    QVBoxLayout *updateLayout = new QVBoxLayout;
    updateLayout-&gt;addWidget(systemCheckBox);
    updateLayout-&gt;addWidget(appsCheckBox);
    updateLayout-&gt;addWidget(docsCheckBox);
    updateGroup-&gt;setLayout(updateLayout);

    QVBoxLayout *packageLayout = new QVBoxLayout;
    packageLayout-&gt;addWidget(packageList);
    packageGroup-&gt;setLayout(packageLayout);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&gt;addWidget(updateGroup);
    mainLayout-&gt;addWidget(packageGroup);
    mainLayout-&gt;addSpacing(12);
    mainLayout-&gt;addWidget(startUpdateButton);
    mainLayout-&gt;addStretch(1);
    setLayout(mainLayout);
}

QueryPage::QueryPage(QWidget *parent)
    : QWidget(parent)
{
    QGroupBox *packagesGroup = new QGroupBox(tr(&quot;Look for packages&quot;));

    QLabel *nameLabel = new QLabel(tr(&quot;Name:&quot;));
    QLineEdit *nameEdit = new QLineEdit;

    QLabel *dateLabel = new QLabel(tr(&quot;Released after:&quot;));
    QDateTimeEdit *dateEdit = new QDateTimeEdit(QDate::currentDate());

    QCheckBox *releasesCheckBox = new QCheckBox(tr(&quot;Releases&quot;));
    QCheckBox *upgradesCheckBox = new QCheckBox(tr(&quot;Upgrades&quot;));

    QSpinBox *hitsSpinBox = new QSpinBox;
    hitsSpinBox-&gt;setPrefix(tr(&quot;Return up to &quot;));
    hitsSpinBox-&gt;setSuffix(tr(&quot; results&quot;));
    hitsSpinBox-&gt;setSpecialValueText(tr(&quot;Return only the first result&quot;));
    hitsSpinBox-&gt;setMinimum(1);
    hitsSpinBox-&gt;setMaximum(100);
    hitsSpinBox-&gt;setSingleStep(10);

    QPushButton *startQueryButton = new QPushButton(tr(&quot;Start query&quot;));

    QGridLayout *packagesLayout = new QGridLayout;
    packagesLayout-&gt;addWidget(nameLabel, 0, 0);
    packagesLayout-&gt;addWidget(nameEdit, 0, 1);
    packagesLayout-&gt;addWidget(dateLabel, 1, 0);
    packagesLayout-&gt;addWidget(dateEdit, 1, 1);
    packagesLayout-&gt;addWidget(releasesCheckBox, 2, 0);
    packagesLayout-&gt;addWidget(upgradesCheckBox, 3, 0);
    packagesLayout-&gt;addWidget(hitsSpinBox, 4, 0, 1, 2);
    packagesGroup-&gt;setLayout(packagesLayout);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&gt;addWidget(packagesGroup);
    mainLayout-&gt;addSpacing(12);
    mainLayout-&gt;addWidget(startQueryButton);
    mainLayout-&gt;addStretch(1);
    setLayout(mainLayout);
}

</db:programlisting>
</db:article>
