<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Best Practices for QML and Qt Quick</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists best practices for working with QML and Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Despite all of the benefits that QML and Qt Quick offer, they can be challenging in certain situations. The following sections elaborate on some of the best practices that will help you get better results when developing applications.</db:para>
<db:section xml:id="custom-ui-controls">
<db:title>Custom UI Controls</db:title>
<db:para>A fluid and modern UI is key for any application's success in today's world, and that's where QML makes so much sense for a designer or developer. Qt offers the most basic UI controls that are necessary to create a fluid and modern-looking UI. It is recommended to browse this list of UI controls before creating your own custom UI control.</db:para>
<db:para>Besides these basic UI controls offered by Qt Quick itself, a rich set of UI controls are also available with Qt Quick Controls. They cater to the most common use cases without any change, and offer a lot more possibilities with their customization options. In particular, Qt Quick Controls provides styling options that align with the latest UI design trends. If these UI controls do not satisfy your application's needs, only then it is recommended to create a custom control.</db:para>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-index.xml">Qt Quick</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="coding-conventions">
<db:title>Coding Conventions</db:title>
<db:para>See <db:link xlink:href="qml-codingconventions.xml">QML Coding Conventions</db:link>.</db:para>
</db:section>
<db:section xml:id="bundle-application-resources">
<db:title>Bundle Application Resources</db:title>
<db:para>Most applications depend on resources such as images and icons to provide a rich user experience. It can often be a challenge to make these resources available to the application regardless of the target OS. Most popular OS-es employ stricter security policies that restrict access to the file system, making it harder to load these resources. As an alternative, Qt offers its own <db:link xlink:href="resources.xml">resource system</db:link> that is built into the application binary, enabling access to the application's resources regardless of the target OS.</db:para>
<db:para>For example, consider the following project directory structure:</db:para>
<db:programlisting language="cpp" role="bad">project
├── images
│   ├── image1.png
│   └── image2.png
├── project.pro
└── qml
    └── main.qml
</db:programlisting>
<db:para>The following entry in <db:code>project.pro</db:code> ensures that the resources are built into the application binary, making them available when needed:</db:para>
<db:programlisting language="cpp" role="bad">RESOURCES += \
    qml/main.qml \
    images/image1.png \
    images/image2.png
</db:programlisting>
<db:para>A more convenient approach is to use the <db:link xlink:href="qmake-function-reference.xml#files-pattern-recursive-false">wildcard syntax</db:link> to select several files at once:</db:para>
<db:programlisting language="cpp" role="bad">RESOURCES += \
    $$files(qml/*.qml) \
    $$files(images/*.png)
</db:programlisting>
<db:para>This approach is convenient for applications that depend on a limited number of resources. However, whenever a new file is added to <db:code>RESOURCES</db:code> using this approach, it causes <db:emphasis>all</db:emphasis> of the other files in <db:code>RESOURCES</db:code> to be recompiled as well. This can be inefficient, especially for large sets of files. In this case, a better approach is to separate each type of resource into its own <db:link xlink:href="resources.xml#resource-collection-files">.qrc</db:link> file. For example, the snippet above could be changed to the following:</db:para>
<db:programlisting language="cpp" role="bad">qml.files = $$files(*.qml)
qml.prefix = /qml
RESOURCES += qml

images.files = $$files(*.png)
images.prefix = /images
RESOURCES += images
</db:programlisting>
<db:para>Now, whenever a QML file is changed, only the QML files have to be recompiled.</db:para>
<db:para>Sometimes it can be necessary to have more control over the path for a specific file managed by the resource system. For example, if we wanted to give <db:code>image2.png</db:code> an alias, we would need to switch to an explicit <db:code>.qrc</db:code> file. <db:link xlink:href="https://doc.qt.io/qtcreator/creator-project-creating.html#creating-resource-files">Creating Resource Files</db:link> explains how to do this in detail.</db:para>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="resources.xml">The Qt Resource System</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="separate-ui-from-logic">
<db:title>Separate UI from Logic</db:title>
<db:para>One of the key goals that most application developers want to achieve is to create a maintainable application. One of the ways to achieve this goal is to separate the user interface from the business logic. The following are a few reasons why an application's UI should be written in QML:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Declarative languages are strongly suited for defining UIs.</db:para>
</db:listitem>
<db:listitem>
<db:para>QML code is simpler to write, as it is less verbose than C++, and is not strongly typed. This also results in it being an excellent language to prototype in, a quality that is vital when collaborating with designers, for example.</db:para>
</db:listitem>
<db:listitem>
<db:para>JavaScript can easily be used in QML to respond to events.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Being a strongly typed language, C++ is best suited for an application's logic. Typically, such code performs tasks such as complex calculations or data processing, which are faster in C++ than QML.</db:para>
<db:para>Qt offers various approaches to integrate QML and C++ code in an application. A typical use case is displaying a list of data in a user interface. If the data set is static, simple, and/or small, a model written in QML can be sufficient.</db:para>
<db:para>The following snippet demonstrates examples of models written in QML:</db:para>
<db:programlisting language="qml">model: ListModel {
    ListElement { name: &quot;Item 1&quot; }
    ListElement { name: &quot;Item 2&quot; }
    ListElement { name: &quot;Item 3&quot; }
}

model: [ &quot;Item 1&quot;, &quot;Item 2&quot;, &quot;Item 3&quot; ]

model: 10
</db:programlisting>
<db:para>Use <db:link xlink:href="qtquick-modelviewsdata-cppmodels.xml#qabstractitemmodel-subclass">C++</db:link> for dynamic data sets that are large or frequently modified.</db:para>
<db:section xml:id="interacting-with-qml-from-c">
<db:title>Interacting with QML from C++</db:title>
<db:para>Although Qt enables you to manipulate QML from C++, it is not recommended to do so. To explain why, let's take a look at a simplified example.</db:para>
<db:section xml:id="pulling-references-from-qml">
<db:title>Pulling References from QML</db:title>
<db:para>Suppose we were writing the UI for a settings page:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls

Page {
    Button {
        text: qsTr(&quot;Restore default settings&quot;)
    }
}
</db:programlisting>
<db:para>We want the button to do something in C++ when it is clicked. We know objects in QML can emit change signals just like they can in C++, so we give the button an <db:link xlink:href="qml-qtqml-qtobject.xml#objectName-prop">objectName</db:link> so that we can find it from C++:</db:para>
<db:programlisting language="qml">Button {
    objectName: &quot;restoreDefaultsButton&quot;
    text: qsTr(&quot;Restore default settings&quot;)
}
</db:programlisting>
<db:para>Then, in C++, we find that object and connect to its change signal:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;
#include &amp;lt;QSettings&amp;gt;

class Backend : public QObject
{
    Q_OBJECT

public:
    Backend() {}

public slots:
    void restoreDefaults() {
        settings.setValue(&quot;loadLastProject&quot;, QVariant(false));
    }

private:
    QSettings settings;
};

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQmlApplicationEngine engine;
    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));
    if (engine.rootObjects().isEmpty())
        return -1;

    Backend backend;

    QObject *rootObject = engine.rootObjects().first();
    QObject *restoreDefaultsButton = rootObject-&amp;gt;findChild&amp;lt;QObject*&amp;gt;(&quot;restoreDefaultsButton&quot;);
    QObject::connect(restoreDefaultsButton, SIGNAL(clicked()),
        &amp;amp;backend, SLOT(restoreDefaults()));

    return app.exec();
}

#include &quot;main.moc&quot;
</db:programlisting>
<db:para>With this approach, references to objects are &quot;pulled&quot; from QML. The problem with this is that the C++ logic layer depends on the QML presentation layer. If we were to refactor the QML in such a way that the <db:code>objectName</db:code> changes, or some other change breaks the ability for the C++ to find the QML object, our workflow becomes much more complicated and tedious.</db:para>
</db:section>
<db:section xml:id="pushing-references-to-qml">
<db:title>Pushing References to QML</db:title>
<db:para>Refactoring QML is a lot easier than refactoring C++, so in order to make maintenance pain-free, we should strive to keep C++ types unaware of QML as much as possible. This can be achieved by &quot;pushing&quot; references to C++ types into QML:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    Backend backend;

    QQmlApplicationEngine engine;
    engine.rootContext()-&amp;gt;setContextProperty(&quot;backend&quot;, &amp;amp;backend);
    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));
    if (engine.rootObjects().isEmpty())
        return -1;

    return app.exec();
}
</db:programlisting>
<db:para>The QML then calls the C++ slot directly:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls

Page {
    Button {
        text: qsTr(&quot;Restore default settings&quot;)
        onClicked: backend.restoreDefaults()
    }
}
</db:programlisting>
<db:para>With this approach, the C++ remains unchanged in the event that the QML needs to be refactored in the future.</db:para>
<db:para>In the example above, we set a context property on the root context to expose the C++ object to QML. This means that the property is available to every component loaded by the engine. Context properties are useful for objects that must be available as soon as the QML is loaded and cannot be instantiated in QML.</db:para>
<db:para>For a quick guide to choosing the correct approach to expose C++ types to QML, see <db:link xlink:href="qtqml-cppintegration-overview.xml#choosing-the-correct-integration-method-between-c-and-qml">Choosing the Correct Integration Method Between C++ and QML</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-topic.xml">Integrating QML and C++</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-chattutorial-example.xml">Chat application tutorial</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="using-qt-quick-layouts">
<db:title>Using Qt Quick Layouts</db:title>
<db:para>Qt offers Qt Quick Layouts to arrange Qt Quick items visually in a layout. Unlike its alternative, the item positioners, the Qt Quick Layouts can also resize its children on window resize. Although Qt Quick Layouts are often the desired choice for most use cases, the following <db:emphasis>dos</db:emphasis> and <db:emphasis>don'ts</db:emphasis> must be considered while using them:</db:para>
<db:section xml:id="dos">
<db:title>Dos</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Use <db:link xlink:href="qml-qtquick-item.xml#anchors-prop">anchors</db:link> or the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> properties to specify the size of the layout against its non-layout parent item.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the <db:link xlink:href="qml-qtquick-layouts-layout.xml">Layout</db:link> attached property to set the size and alignment attributes of the layout's immediate children.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="don-ts">
<db:title>Don'ts</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Do not define preferred sizes for items that provide implicitWidth and implicitHeight, unless their implicit sizes are not satisfactory.</db:para>
</db:listitem>
<db:listitem>
<db:para>Do not use anchors on an item that is an immediate child of a layout. Instead, use <db:code>Layout.preferredWidth</db:code> and <db:code>Layout.preferredHeight</db:code>:</db:para>
<db:programlisting language="qml">RowLayout {
    id: layout
    anchors.fill: parent
    spacing: 6
    Rectangle {
        color: 'azure'
        Layout.fillWidth: true
        Layout.minimumWidth: 50
        Layout.preferredWidth: 100
        Layout.maximumWidth: 300
        Layout.minimumHeight: 150
        Text {
            anchors.centerIn: parent
            text: parent.width + 'x' + parent.height
        }
    }
    Rectangle {
        color: 'plum'
        Layout.fillWidth: true
        Layout.minimumWidth: 100
        Layout.preferredWidth: 200
        Layout.preferredHeight: 100
        Text {
            anchors.centerIn: parent
            text: parent.width + 'x' + parent.height
        }
    }
}
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Layouts and anchors are both types of objects that take more memory and instantiation time. Avoid using them (especially in list and table delegates, and styles for controls) when simple bindings to x, y, width, and height properties are enough.</db:para>
</db:note>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-positioning-layouts.xml">Item Positioners</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquicklayouts-overview.xml">Qt Quick Layouts Overview</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="type-safety">
<db:title>Type Safety</db:title>
<db:para>When declaring properties in QML, it's easy and convenient to use the &quot;var&quot; type:</db:para>
<db:programlisting language="cpp">property var name
property var size
property var optionsMenu
</db:programlisting>
<db:para>However, this approach has several disadvantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If a value with the wrong type is assigned, the error reported will point to the location of the property declaration, as opposed to the location where the property was assigned to. This slows down the development process by making it more difficult to track down errors.</db:para>
</db:listitem>
<db:listitem>
<db:para>Static anaylsis to catch errors like the ones mentioned above is not possible.</db:para>
</db:listitem>
<db:listitem>
<db:para>The actual underlying type of the property is not always immediately clear to the reader.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Instead, always use the actual type where possible:</db:para>
<db:programlisting language="cpp">property string name
property int size
property MyMenu optionsMenu
</db:programlisting>
</db:section>
<db:section xml:id="performance">
<db:title>Performance</db:title>
<db:para>For information on performance in QML and Qt Quick, see <db:link xlink:href="qtquick-performance.xml">Performance Considerations And Suggestions</db:link>.</db:para>
</db:section>
<db:section xml:id="prefer-declarative-bindings-over-imperative-assignments">
<db:title>Prefer Declarative Bindings Over Imperative Assignments</db:title>
<db:para>In QML, it's possible to use imperative JavaScript code to perform tasks such as responding to input events, send data over a network, and so on. Imperative code has an important place in QML, but it's also important to be aware of when not to use it.</db:para>
<db:para>For example, consider the following imperative assignment:</db:para>
<db:programlisting language="cpp">Rectangle {
    Component.onCompleted: color = &quot;red&quot;
}
</db:programlisting>
<db:para>This has the following disadvantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>It's slow. The color property will first be evaluated with a default-constructed value, and then again with &quot;red&quot; later on.</db:para>
</db:listitem>
<db:listitem>
<db:para>It delays errors that could be found at build time to run time, slowing down the development process.</db:para>
</db:listitem>
<db:listitem>
<db:para>It overwrites any declarative binding that was in place. In most cases this is intended, but sometimes it can be unintentional. See <db:link xlink:href="qtqml-syntax-propertybinding.xml#debugging-overwriting-of-bindings">Debugging overwriting of bindings</db:link> for more information.</db:para>
</db:listitem>
<db:listitem>
<db:para>It interferes with tooling; Qt Quick Designer, for example, doesn't support JavaScript.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The code can be rewritten to be a declarative binding instead:</db:para>
<db:programlisting language="cpp">Rectangle {
    color: &quot;red&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="tools-and-utilities">
<db:title>Tools and Utilities</db:title>
<db:para>For information on useful tools and utilies that make working with QML and Qt Quick easier, see <db:link xlink:href="qtquick-tools-and-utilities.xml">Qt Quick Tools and Utilities</db:link>.</db:para>
</db:section>
<db:section xml:id="scene-graph">
<db:title>Scene Graph</db:title>
<db:para>For information on Qt Quick's scene graph, see <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link>.</db:para>
</db:section>
<db:section xml:id="scalable-user-interfaces">
<db:title>Scalable User Interfaces</db:title>
<db:para>As display resolutions improve, a scalable application UI becomes more and more important. One of the approaches to achieve this is to maintain several copies of the UI for different screen resolutions, and load the appropriate one depending on the available resolution. Although this works pretty well, it adds to the maintenance overhead.</db:para>
<db:para>Qt offers a better solution to this problem and recommends the application developers to follow these tips:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use anchors or the Qt Quick Layouts module to lay out the visual items.</db:para>
</db:listitem>
<db:listitem>
<db:para>Do not specify explicit width and height for a visual item.</db:para>
</db:listitem>
<db:listitem>
<db:para>Provide UI resources such as images and icons for each display resolution that your application supports. The Qt Quick Controls gallery example demonstrates this well by providing the <db:code>qt-logo.png</db:code> for <db:code>@2x</db:code>, <db:code>@3x</db:code>, and <db:code>@4x</db:code> resolutions, enabling the application to cater to high resolution displays. Qt automatically chooses the appropriate image that is suitable for the given display, provided the high DPI scaling feature is explicitly enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use SVG images for small icons. While larger SVGs can be slow to render, small ones work well. Vector images avoid the need to provide several versions of an image, as is necessary with bitmap images.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use font-based icons, such as Font Awesome. These scale to any display resolution, and also allow colorization. The Qt Quick Controls Text Editor example demonstrates this well.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>With this in place, your application's UI should scale depending on the display resolution on offer.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-gallery-welcome.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-gallery-example.xml">Gallery example</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-texteditor-example.xml">Text Editor example</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://fontawesome.com/">Font Awesome</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="scalability.xml">Scalability</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="highdpi.xml">High DPI</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
