<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkConfiguration Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> class provides an abstraction of one or more access point configurations.</db:para>
<db:para>This class was introduced in Qt 4.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkConfiguration</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkConfiguration is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> encapsulates a single access point or service network. In most cases a single access point configuration can be mapped to one network interface. However a single network interface may not always map to only one access point configuration. Multiple configurations for the same network device may enable multiple access points. An example device that could exhibit such a configuration might be a Smartphone which allows the user to manage multiple WLAN configurations while the device itself has only one WLAN network device.</db:para>
<db:para>The <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> also supports the concept of service networks. This concept allows the grouping of multiple access point configurations into one entity. Such a group is called service network and can be beneficial in cases whereby a network session to a particular destination network is required (e.g. a company network). When using a service network the user doesn't usually care which one of the connectivity options is chosen (e.g. corporate WLAN or VPN via GPRS) as long as he can reach the company's target server. Depending on the current position and time some of the access points that make up the service network may not even be available. Furthermore automated access point roaming can be enabled which enables the device to change the network interface configuration dynamically while maintaining the applications connection to the target network. It allows adaption to the changing environment and may enable optimization with regards to cost, speed or other network parameters.</db:para>
<db:para>Special configurations of type <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">UserChoice</db:link> provide a placeholder configuration which is resolved to an actual network configuration by the platform when a <db:link xlink:href="qnetworksession.xml">session</db:link> is <db:link xlink:href="qnetworksession.xml#open">opened</db:link>. Not all platforms support the concept of a user choice configuration.</db:para>
<db:section xml:id="configuration-states">
<db:title>Configuration States</db:title>
<db:para>The list of available configurations can be obtained via <db:link xlink:href="qnetworkconfigurationmanager.xml#allConfigurations">QNetworkConfigurationManager::allConfigurations</db:link>(). A configuration can have multiple states. The <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">Defined</db:link> configuration state indicates that the configuration is stored on the device. However the configuration is not yet ready to be activated as e.g. a WLAN may not be available at the current time.</db:para>
<db:para>The <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">Discovered</db:link> state implies that the configuration is <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">Defined</db:link> and the outside conditions are such that the configuration can be used immediately to open a new network session. An example of such an outside condition may be that the Ethernet cable is actually connected to the device or that the WLAN with the specified SSID is in range.</db:para>
<db:para>The <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">Active</db:link> state implies that the configuration is <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">Discovered</db:link>. A configuration in this state is currently being used by an application. The underlying network interface has a valid IP configuration and can transfer IP packets between the device and the target network.</db:para>
<db:para>The <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">Undefined</db:link> state indicates that the system has knowledge of possible target networks but cannot actually use that knowledge to connect to it. An example for such a state could be an encrypted WLAN that has been discovered but the user hasn't actually saved a configuration including the required password which would allow the device to connect to it.</db:para>
<db:para>Depending on the type of configuration some states are transient in nature. A GPRS/UMTS connection may almost always be <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">Discovered</db:link> if the GSM/UMTS network is available. However if the GSM/UMTS network looses the connection the associated configuration may change its state from <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">Discovered</db:link> to <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">Defined</db:link> as well. A similar use case might be triggered by WLAN availability. <db:link xlink:href="qnetworkconfigurationmanager.xml#updateConfigurations">QNetworkConfigurationManager::updateConfigurations</db:link>() can be used to manually trigger updates of states. Note that some platforms do not require such updates as they implicitly change the state once it has been discovered. If the state of a configuration changes all related <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> instances change their state automatically.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:member>
<db:member><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BearerType-enum">
<db:title>enum QNetworkConfiguration::BearerType</db:title>
<db:para>Specifies the type of bearer used by a configuration.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerUnknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The type of bearer is unknown or unspecified. The <db:link xlink:href="qnetworkconfiguration.xml#bearerTypeName">bearerTypeName</db:link>() function may return additional information.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerEthernet</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The configuration is for an Ethernet interfaces.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerWLAN</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The configuration is for a Wireless LAN interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::Bearer2G</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The configuration is for a CSD, GPRS, HSCSD, EDGE or cdmaOne interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::Bearer3G</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>The configuration is for a 3G interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::Bearer4G</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>The configuration is for a 4G interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerCDMA2000</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The configuration is for CDMA interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerWCDMA</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The configuration is for W-CDMA/UMTS interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerHSPA</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The configuration is for High Speed Packet Access (HSPA) interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerBluetooth</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The configuration is for a Bluetooth interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerWiMAX</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The configuration is for a WiMAX interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerEVDO</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>The configuration is for an EVDO (3G) interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::BearerLTE</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The configuration is for a LTE (4G) interface.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Purpose-enum">
<db:title>enum QNetworkConfiguration::Purpose</db:title>
<db:para>Specifies the purpose of the configuration.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::UnknownPurpose</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The configuration doesn't specify any purpose. This is the default value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::PublicPurpose</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The configuration can be used for general purpose internet access.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::PrivatePurpose</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The configuration is suitable to access a private network such as an office Intranet.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::ServiceSpecificPurpose</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The configuration can be used for operator specific services (e.g. receiving MMS messages or content streaming).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="StateFlag-enum">
<db:title>enum QNetworkConfiguration::StateFlag</db:title>
<db:bridgehead renderas="sect2">flags QNetworkConfiguration::StateFlags</db:bridgehead>
<db:para>Specifies the configuration states.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::Undefined</db:code></db:para>
</db:td>
<db:td><db:code>0x0000001</db:code></db:td>
<db:td>
<db:para>This state is used for transient configurations such as newly discovered WLANs for which the user has not actually created a configuration yet.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::Defined</db:code></db:para>
</db:td>
<db:td><db:code>0x0000002</db:code></db:td>
<db:td>
<db:para>Defined configurations are known to the system but are not immediately usable (e.g. a configured WLAN is not within range or the Ethernet cable is currently not plugged into the machine).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::Discovered</db:code></db:para>
</db:td>
<db:td><db:code>0x0000006</db:code></db:td>
<db:td>
<db:para>A discovered configuration can be immediately used to create a new <db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link>. An example of a discovered configuration could be a WLAN which is within in range. If the device moves out of range the discovered flag is dropped. A second example is a GPRS configuration which generally remains discovered for as long as the device has network coverage. A configuration that has this state is also in state QNetworkConfiguration::Defined. If the configuration is a service network this flag is set if at least one of the underlying access points configurations has the Discovered state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::Active</db:code></db:para>
</db:td>
<db:td><db:code>0x000000e</db:code></db:td>
<db:td>
<db:para>The configuration is currently used by an open network session (see <db:link xlink:href="qnetworksession.xml#isOpen">QNetworkSession::isOpen</db:link>()). However this does not mean that the current process is the entity that created the open session. It merely indicates that if a new <db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link> were to be constructed based on this configuration <db:link xlink:href="qnetworksession.xml#state">QNetworkSession::state</db:link>() would return <db:link xlink:href="qnetworksession.xml#State-enum">QNetworkSession::Connected</db:link>. This state implies the QNetworkConfiguration::Discovered state.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>StateFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;StateFlag&gt;. </db:code>It stores an OR combination of <db:code>StateFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QNetworkConfiguration::Type</db:title>
<db:para>This enum describes the type of configuration.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::InternetAccessPoint</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The configuration specifies the details for a single access point. Note that configurations of type InternetAccessPoint may be part of other QNetworkConfigurations of type ServiceNetwork.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::ServiceNetwork</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The configuration is based on a group of QNetworkConfigurations of type InternetAccessPoint. All group members can reach the same target network. This type of configuration is a mandatory requirement for roaming enabled network sessions. On some platforms this form of configuration may also be called Service Network Access Point (SNAP).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::UserChoice</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The configuration is a placeholder which will be resolved to an actual configuration by the platform when a session is opened. Depending on the platform the selection may generate a popup dialog asking the user for his preferred choice.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:emphasis>::Invalid</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The configuration is invalid.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkConfiguration">
<db:title>QNetworkConfiguration::QNetworkConfiguration()</db:title>
<db:para>Constructs an invalid configuration object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfiguration.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkConfiguration-1">
<db:title>QNetworkConfiguration::QNetworkConfiguration(const QNetworkConfiguration &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of the <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> object contained in <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkConfiguration">
<db:title>[noexcept] QNetworkConfiguration::~QNetworkConfiguration()</db:title>
<db:para>Frees the resources associated with the <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> object.</db:para>
</db:section>
<db:section xml:id="bearerType">
<db:title>QNetworkConfiguration::BearerType QNetworkConfiguration::bearerType() const</db:title>
<db:para>Returns the type of bearer used by this network configuration.</db:para>
<db:para>If the bearer type is <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">unknown</db:link> the <db:link xlink:href="qnetworkconfiguration.xml#bearerTypeName">bearerTypeName</db:link>() function can be used to retrieve a textural type name for the bearer.</db:para>
<db:para>An invalid network configuration always returns the <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerUnknown</db:link> value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfiguration.xml#bearerTypeName">bearerTypeName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkconfiguration.xml#bearerTypeFamily">bearerTypeFamily</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bearerTypeFamily">
<db:title>[since 5.2] QNetworkConfiguration::BearerType QNetworkConfiguration::bearerTypeFamily() const</db:title>
<db:para>Returns the bearer type family used by this network configuration. The following table lists how <db:link xlink:href="qnetworkconfiguration.xml#bearerType">bearerType</db:link>() values map to bearerTypeFamily() values:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>bearer type</db:para>
</db:th>
<db:th>
<db:para>bearer type family</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerUnknown</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">Bearer2G</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerEthernet</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerWLAN</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerBluetooth</db:link></db:para>
</db:td>
<db:td>
<db:para>(same type)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerCDMA2000</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerEVDO</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerWCDMA</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerHSPA</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">Bearer3G</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">Bearer3G</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerWiMAX</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerLTE</db:link>, <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">Bearer4G</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">Bearer4G</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>An invalid network configuration always returns the <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerUnknown</db:link> value.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfiguration.xml#bearerType">bearerType</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkconfiguration.xml#bearerTypeName">bearerTypeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bearerTypeName">
<db:title>QString QNetworkConfiguration::bearerTypeName() const</db:title>
<db:para>Returns the type of bearer used by this network configuration as a string.</db:para>
<db:para>The string is not translated and therefore can not be shown to the user. The subsequent table shows the fixed mappings between <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerType</db:link> and the bearer type name for known types. If the <db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerType</db:link> is unknown this function may return additional information if it is available; otherwise an empty string will be returned.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerType</db:link></db:para>
</db:th>
<db:th>
<db:para>Value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerUnknown</db:link></db:para>
</db:td>
<db:td>
<db:para>The session is based on an unknown or unspecified bearer type. The value of the string returned describes the bearer type.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerEthernet</db:link></db:para>
</db:td>
<db:td>
<db:para>Ethernet</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerWLAN</db:link></db:para>
</db:td>
<db:td>
<db:para>WLAN</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">Bearer2G</db:link></db:para>
</db:td>
<db:td>
<db:para>2G</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">Bearer3G</db:link></db:para>
</db:td>
<db:td>
<db:para>3G</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">Bearer4G</db:link></db:para>
</db:td>
<db:td>
<db:para>4G</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerCDMA2000</db:link></db:para>
</db:td>
<db:td>
<db:para>CDMA2000</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerWCDMA</db:link></db:para>
</db:td>
<db:td>
<db:para>WCDMA</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerHSPA</db:link></db:para>
</db:td>
<db:td>
<db:para>HSPA</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerBluetooth</db:link></db:para>
</db:td>
<db:td>
<db:para>Bluetooth</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerWiMAX</db:link></db:para>
</db:td>
<db:td>
<db:para>WiMAX</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerEVDO</db:link></db:para>
</db:td>
<db:td>
<db:para>EVDO</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkconfiguration.xml#BearerType-enum">BearerLTE</db:link></db:para>
</db:td>
<db:td>
<db:para>LTE</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function returns an empty string if this is an invalid configuration, a network configuration of type <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">QNetworkConfiguration::ServiceNetwork</db:link> or <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">QNetworkConfiguration::UserChoice</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfiguration.xml#bearerType">bearerType</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkconfiguration.xml#bearerTypeFamily">bearerTypeFamily</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="children">
<db:title>QList&lt;QNetworkConfiguration&gt; QNetworkConfiguration::children() const</db:title>
<db:para>Returns all sub configurations of this network configuration in priority order. The first sub configuration in the list has the highest priority.</db:para>
<db:para>Only network configurations of type <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">ServiceNetwork</db:link> can have children. Otherwise this function returns an empty list.</db:para>
</db:section>
<db:section xml:id="identifier">
<db:title>QString QNetworkConfiguration::identifier() const</db:title>
<db:para>Returns the unique and platform specific identifier for this network configuration; otherwise an empty string.</db:para>
</db:section>
<db:section xml:id="isRoamingAvailable">
<db:title>bool QNetworkConfiguration::isRoamingAvailable() const</db:title>
<db:para>Returns true if this configuration supports roaming; otherwise false.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QNetworkConfiguration::isValid() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> object is valid. A configuration may become invalid if the user deletes the configuration or the configuration was default-constructed.</db:para>
<db:para>The addition and removal of configurations can be monitored via the <db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QNetworkConfiguration::name() const</db:title>
<db:para>Returns the user visible name of this configuration.</db:para>
<db:para>The name may either be the name of the underlying access point or the name for service network that this configuration represents.</db:para>
</db:section>
<db:section xml:id="purpose">
<db:title>QNetworkConfiguration::Purpose QNetworkConfiguration::purpose() const</db:title>
<db:para>Returns the purpose of this configuration.</db:para>
<db:para>The purpose field may be used to programmatically determine the purpose of a configuration. Such information is usually part of the access point or service network meta data.</db:para>
</db:section>
<db:section xml:id="state">
<db:title>QNetworkConfiguration::StateFlags QNetworkConfiguration::state() const</db:title>
<db:para>Returns the current state of the configuration.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QNetworkConfiguration::swap(QNetworkConfiguration &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this network configuration with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QNetworkConfiguration::Type QNetworkConfiguration::type() const</db:title>
<db:para>Returns the type of the configuration.</db:para>
<db:para>A configuration can represent a single access point configuration or a set of access point configurations. Such a set is called service network. A configuration that is based on a service network can potentially support roaming of network sessions.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QNetworkConfiguration::operator!=(const QNetworkConfiguration &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this configuration is not the same as the <db:code role="parameter">other</db:code> configuration given; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QNetworkConfiguration &amp;QNetworkConfiguration::operator=(const QNetworkConfiguration &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies the content of the <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> object contained in <db:code role="parameter">other</db:code> into this one.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QNetworkConfiguration::operator==(const QNetworkConfiguration &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true, if this configuration is the same as the <db:code role="parameter">other</db:code> configuration given; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
