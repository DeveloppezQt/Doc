<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModbusRtuSerialServer Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmodbusrtuserialserver.xml">QModbusRtuSerialServer</db:link> class represents a Modbus server that uses a serial port for its communication with the Modbus client.</db:para>
<db:para>This class was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModbusRtuSerialServer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmodbusserver.xml" xlink:role="class">QModbusServer</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Communication via Modbus requires the interaction between a single Modbus client instance and multiple Modbus server. This class provides the Modbus server implementation via a serial port.</db:para>
<db:para>Since multiple Modbus server instances can interact with a Modbus client at the same time (using a serial bus), servers are identified by their <db:link xlink:href="qmodbusserver.xml#serverAddress">serverAddress</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModbusRtuSerialServer">
<db:title>[explicit] QModbusRtuSerialServer::QModbusRtuSerialServer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QModbusRtuSerialServer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusRtuSerialServer(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qmodbusrtuserialserver.xml">QModbusRtuSerialServer</db:link> with the specified <db:code role="parameter">parent</db:code>. The <db:link xlink:href="qmodbusserver.xml#serverAddress">serverAddress</db:link> preset is <db:code>1</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QModbusRtuSerialServer">
<db:title>[virtual] QModbusRtuSerialServer::~QModbusRtuSerialServer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QModbusRtuSerialServer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QModbusRtuSerialServer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qmodbusrtuserialserver.xml">QModbusRtuSerialServer</db:link> instance.</db:para>
</db:section>
<db:section xml:id="close">
<db:title>[override virtual protected] void QModbusRtuSerialServer::close()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmodbusdevice.xml#close" role="function">QModbusDevice::close()</db:link>.</db:para>
</db:section>
<db:section xml:id="interFrameDelay">
<db:title>[since 6.2] int QModbusRtuSerialServer::interFrameDelay() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>interFrameDelay</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int interFrameDelay() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the amount of microseconds for the silent interval between two consecutive Modbus messages.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusrtuserialserver.xml#setInterFrameDelay">setInterFrameDelay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[override virtual protected] bool QModbusRtuSerialServer::open()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmodbusdevice.xml#open" role="function">QModbusDevice::open()</db:link>.</db:para>
<db:note>
<db:para>When calling this function, existing buffered data is removed from the serial port.</db:para>
</db:note>
</db:section>
<db:section xml:id="processRequest">
<db:title>[override virtual protected] QModbusResponse QModbusRtuSerialServer::processRequest(const QModbusPdu &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QModbusResponse</db:type>
<db:methodname>processRequest</db:methodname>
<db:methodparam>
<db:type>const QModbusPdu &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusResponse processRequest(const QModbusPdu &amp;request) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmodbusserver.xml#processRequest" role="function">QModbusServer::processRequest(const QModbusPdu &amp;request)</db:link>.</db:para>
<db:para>Processes the Modbus client request specified by <db:code role="parameter">request</db:code> and returns a Modbus response.</db:para>
<db:para>The Modbus function <db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">QModbusRequest::EncapsulatedInterfaceTransport</db:link> with MEI Type 13 (0x0D) CANopen General Reference is filtered out because it is usually Modbus TCP or Modbus serial ASCII only.</db:para>
<db:para>A request to the RTU serial server will be answered with a Modbus exception response with the exception code QModbusExceptionResponse::IllegalFunction.</db:para>
</db:section>
<db:section xml:id="processesBroadcast">
<db:title>[override virtual] bool QModbusRtuSerialServer::processesBroadcast() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>processesBroadcast</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool processesBroadcast() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmodbusserver.xml#processesBroadcast" role="function">QModbusServer::processesBroadcast() const</db:link>.</db:para>
</db:section>
<db:section xml:id="setInterFrameDelay">
<db:title>[since 6.2] void QModbusRtuSerialServer::setInterFrameDelay(int <db:emphasis>microseconds</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInterFrameDelay</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>microseconds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInterFrameDelay(int microseconds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the amount of <db:code role="parameter">microseconds</db:code> for the silent interval between two consecutive Modbus messages. By default, the class implementation will use a pre-calculated value according to the Modbus specification. A active or running connection is not affected by such delay changes.</db:para>
<db:note>
<db:para>If <db:code role="parameter">microseconds</db:code> is set to -1 or <db:code role="parameter">microseconds</db:code> is less than the pre-calculated delay then this pre-calculated value is used as frame delay.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusrtuserialserver.xml#interFrameDelay">interFrameDelay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
