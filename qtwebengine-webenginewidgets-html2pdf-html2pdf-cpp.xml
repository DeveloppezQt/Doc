<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Widgets Html2Pdf Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Converts web pages to PDF documents using Qt WebEngine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QCommandLineParser&amp;gt;
#include &amp;lt;QFile&amp;gt;
#include &amp;lt;QTextStream&amp;gt;
#include &amp;lt;QWebEnginePage&amp;gt;

#include &amp;lt;functional&amp;gt;

using namespace std;
using namespace std::placeholders;

class Html2PdfConverter : public QObject
{
    Q_OBJECT
public:
    explicit Html2PdfConverter(QString inputPath, QString outputPath);
    int run();

private slots:
    void loadFinished(bool ok);
    void pdfPrintingFinished(const QString &amp;amp;filePath, bool success);

private:
    QString m_inputPath;
    QString m_outputPath;
    QScopedPointer&amp;lt;QWebEnginePage&amp;gt; m_page;
};

Html2PdfConverter::Html2PdfConverter(QString inputPath, QString outputPath)
    : m_inputPath(move(inputPath))
    , m_outputPath(move(outputPath))
    , m_page(new QWebEnginePage)
{
    connect(m_page.data(), &amp;amp;QWebEnginePage::loadFinished,
            this, &amp;amp;Html2PdfConverter::loadFinished);
    connect(m_page.data(), &amp;amp;QWebEnginePage::pdfPrintingFinished,
            this, &amp;amp;Html2PdfConverter::pdfPrintingFinished);
}

int Html2PdfConverter::run()
{
    m_page-&amp;gt;load(QUrl::fromUserInput(m_inputPath));
    return QApplication::exec();
}

void Html2PdfConverter::loadFinished(bool ok)
{
    if (!ok) {
        QTextStream(stderr)
            &amp;lt;&amp;lt; tr(&quot;failed to load URL '%1'&quot;).arg(m_inputPath) &amp;lt;&amp;lt; &quot;\n&quot;;
        QCoreApplication::exit(1);
        return;
    }

    m_page-&amp;gt;printToPdf(m_outputPath);
}

void Html2PdfConverter::pdfPrintingFinished(const QString &amp;amp;filePath, bool success)
{
    if (!success) {
        QTextStream(stderr)
            &amp;lt;&amp;lt; tr(&quot;failed to print to output file '%1'&quot;).arg(filePath) &amp;lt;&amp;lt; &quot;\n&quot;;
        QCoreApplication::exit(1);
    } else {
        QCoreApplication::quit();
    }
}

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QCoreApplication::setOrganizationName(&quot;QtExamples&quot;);
    QCoreApplication::setApplicationName(&quot;html2pdf&quot;);
    QCoreApplication::setApplicationVersion(QT_VERSION_STR);

    QCommandLineParser parser;
    parser.setApplicationDescription(
        QCoreApplication::translate(&quot;main&quot;, &quot;Converts the web page INPUT into the PDF file OUTPUT.&quot;));
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addPositionalArgument(
        QCoreApplication::translate(&quot;main&quot;, &quot;INPUT&quot;),
        QCoreApplication::translate(&quot;main&quot;, &quot;Input URL for PDF conversion.&quot;));
    parser.addPositionalArgument(
        QCoreApplication::translate(&quot;main&quot;, &quot;OUTPUT&quot;),
        QCoreApplication::translate(&quot;main&quot;, &quot;Output file name for PDF conversion.&quot;));

    parser.process(QCoreApplication::arguments());

    const QStringList requiredArguments = parser.positionalArguments();
    if (requiredArguments.size() != 2)
        parser.showHelp(1);

    Html2PdfConverter converter(requiredArguments.at(0), requiredArguments.at(1));
    return converter.run();
}

#include &quot;html2pdf.moc&quot;

</db:programlisting>
</db:article>
