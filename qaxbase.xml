<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAxBase Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxbase.xml">QAxBase</db:link> class is an abstract class that provides an API to initialize and access a COM object.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxBase</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += axcontainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaxobject.xml" xlink:role="class">QAxObject</db:link> and <db:link xlink:href="qaxwidget.xml" xlink:role="class">QAxWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qaxbase.xml">QAxBase</db:link> is an abstract class that cannot be used directly, and is instantiated through the subclasses <db:link xlink:href="qaxobject.xml">QAxObject</db:link> and <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link>. This class provides the API to access the COM object directly through its IUnknown implementation. If the COM object implements the IDispatch interface, the properties and methods of that object become available as Qt properties and slots.</db:para>
<db:programlisting language="cpp">connect(buttonBack, SIGNAL(clicked()), webBrowser, SLOT(GoBack()));
</db:programlisting>
<db:para>Properties exposed by the object's IDispatch implementation can be read and written through the property system provided by the Qt Object Model (both subclasses are <db:link xlink:href="qobject.xml">QObject</db:link>s, so you can use <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>() and <db:link xlink:href="qobject.xml#property">QObject::property</db:link>()). Properties with multiple parameters are not supported.</db:para>
<db:programlisting language="cpp">activeX-&gt;setProperty(&quot;text&quot;, &quot;some text&quot;);
int value = activeX-&gt;property(&quot;value&quot;);
</db:programlisting>
<db:para>Write-functions for properties and other methods exposed by the object's IDispatch implementation can be called directly using <db:link xlink:href="qaxbase.xml#dynamicCall">dynamicCall</db:link>(), or indirectly as slots connected to a signal.</db:para>
<db:programlisting language="cpp">webBrowser-&gt;dynamicCall(&quot;GoHome()&quot;);
</db:programlisting>
<db:para>Outgoing events supported by the COM object are emitted as standard Qt signals.</db:para>
<db:programlisting language="cpp">connect(webBrowser, SIGNAL(TitleChanged(QString)),
        this, SLOT(setCaption(QString)));
</db:programlisting>
<db:para><db:link xlink:href="qaxbase.xml">QAxBase</db:link> transparently converts between COM data types and the equivalent Qt data types. Some COM types have no equivalent Qt data structure.</db:para>
<db:para>Supported COM datatypes are listed in the first column of following table. The second column is the Qt type that can be used with the <db:link xlink:href="qobject.xml">QObject</db:link> property functions. The third column is the Qt type that is used in the prototype of generated signals and slots for in-parameters, and the last column is the Qt type that is used in the prototype of signals and slots for out-parameters.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>COM type</db:para>
</db:th>
<db:th>
<db:para>Qt property</db:para>
</db:th>
<db:th>
<db:para>in-parameter</db:para>
</db:th>
<db:th>
<db:para>out-parameter</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>VARIANT_BOOL</db:para>
</db:td>
<db:td>
<db:para>bool</db:para>
</db:td>
<db:td>
<db:para>bool</db:para>
</db:td>
<db:td>
<db:para>bool&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BSTR</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qstring.xml">QString</db:link>&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link>&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>char, short, int, long</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
<db:td>
<db:para>int&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uchar, ushort, uint, ulong</db:para>
</db:td>
<db:td>
<db:para>uint</db:para>
</db:td>
<db:td>
<db:para>uint</db:para>
</db:td>
<db:td>
<db:para>uint&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>float, double</db:para>
</db:td>
<db:td>
<db:para>double</db:para>
</db:td>
<db:td>
<db:para>double</db:para>
</db:td>
<db:td>
<db:para>double&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DATE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qdatetime.xml">QDateTime</db:link>&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link>&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CY</db:para>
</db:td>
<db:td>
<db:para>qlonglong</db:para>
</db:td>
<db:td>
<db:para>qlonglong</db:para>
</db:td>
<db:td>
<db:para>qlonglong&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>OLE_COLOR</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link></db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qcolor.xml">QColor</db:link>&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link>&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SAFEARRAY(VARIANT)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;</db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SAFEARRAY(int), SAFEARRAY(double), SAFEARRAY(Date)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;</db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SAFEARRAY(BYTE)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qbytearray.xml">QByteArray</db:link>&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qbytearray.xml">QByteArray</db:link>&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SAFEARRAY(BSTR)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qstringlist.xml">QStringList</db:link>&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link>&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARIANT</db:para>
</db:td>
<db:td>
<db:para>type-dependent</db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qvariant.xml">QVariant</db:link>&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qvariant.xml">QVariant</db:link>&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>IFontDisp*</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qfont.xml">QFont</db:link></db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qfont.xml">QFont</db:link>&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qfont.xml">QFont</db:link>&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>IPictureDisp*</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpixmap.xml">QPixmap</db:link></db:para>
</db:td>
<db:td>
<db:para>const <db:link xlink:href="qpixmap.xml">QPixmap</db:link>&amp;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpixmap.xml">QPixmap</db:link>&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>IDispatch*</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qaxobject.xml">QAxObject</db:link>*</db:para>
</db:td>
<db:td>
<db:para><db:code>QAxBase::asVariant()</db:code></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qaxobject.xml">QAxObject</db:link>* (return value)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>IUnknown*</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qaxobject.xml">QAxObject</db:link>*</db:para>
</db:td>
<db:td>
<db:para><db:code>QAxBase::asVariant()</db:code></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qaxobject.xml">QAxObject</db:link>* (return value)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SCODE, DECIMAL</db:para>
</db:td>
<db:td>
<db:para><db:emphasis>unsupported</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>unsupported</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>unsupported</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARIANT* (Since Qt 4.5)</db:para>
</db:td>
<db:td>
<db:para><db:emphasis>unsupported</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>QVariant&amp;</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>QVariant&amp;</db:emphasis></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Supported are also enumerations, and typedefs to supported types.</db:para>
<db:para>To call the methods of a COM interface described by the following IDL</db:para>
<db:programlisting language="cpp">dispinterface IControl
{
properties:
    [id(1)] BSTR text;
    [id(2)] IFontDisp *font;

methods:
    [id(6)] void showColumn([in] int i);
    [id(3)] bool addColumn([in] BSTR t);
    [id(4)] int fillList([in, out] SAFEARRAY(VARIANT) *list);
    [id(5)] IDispatch *item([in] int i);
};
</db:programlisting>
<db:para>use the <db:link xlink:href="qaxbase.xml">QAxBase</db:link> API like this:</db:para>
<db:programlisting language="cpp">QAxObject object(&quot;&lt;CLSID&gt;&quot;);

QString text = object.property(&quot;text&quot;).toString();
object.setProperty(&quot;font&quot;, QFont(&quot;Times New Roman&quot;, 12));

connect(this, SIGNAL(clicked(int)), &amp;object, SLOT(showColumn(int)));
bool ok = object.dynamicCall(&quot;addColumn(const QString&amp;)&quot;, &quot;Column 1&quot;).toBool();

QList&lt;QVariant&gt; varlist;
QList&lt;QVariant&gt; parameters;
parameters &lt;&lt; QVariant(varlist);
int n = object.dynamicCall(&quot;fillList(QList&lt;QVariant&gt;&amp;)&quot;, parameters).toInt();

QAxObject *item = object.querySubItem(&quot;item(int)&quot;, 5);
</db:programlisting>
<db:para>Note that the <db:link xlink:href="qlist.xml">QList</db:link> the object should fill has to be provided as an element in the parameter list of <db:link xlink:href="qvariant.xml">QVariant</db:link>s.</db:para>
<db:para>If you need to access properties or pass parameters of unsupported datatypes you must access the COM object directly through its <db:code>IDispatch</db:code> implementation or other interfaces. Those interfaces can be retrieved through <db:link xlink:href="qaxbase.xml#queryInterface">queryInterface</db:link>().</db:para>
<db:programlisting language="cpp">IUnknown *iface = 0;
activeX-&gt;queryInterface(IID_IUnknown, (void**)&amp;iface);
if (iface) {
    // use the interface
    iface-&gt;Release();
}
</db:programlisting>
<db:para>To get the definition of the COM interfaces you will have to use the header files provided with the component you want to use. Some compilers can also import type libraries using the #import compiler directive. See the component documentation to find out which type libraries you have to import, and how to use them.</db:para>
<db:para>If you need to react to events that pass parameters of unsupported datatypes you can use the generic signal that delivers the event data as provided by the COM event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxobject.xml">QAxObject</db:link></db:member>
<db:member><db:link xlink:href="qaxwidget.xml">QAxWidget</db:link></db:member>
<db:member><db:link xlink:href="qaxscript.xml">QAxScript</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PropertyBag-typedef">
<db:title>QAxBase::PropertyBag</db:title>
<db:para>A <db:link xlink:href="qmap.xml">QMap</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>,<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt; that can store properties as name:value pairs.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="control-prop">
<db:title>control : QString</db:title>
<db:para>This property holds the name of the COM object wrapped by this <db:link xlink:href="qaxbase.xml">QAxBase</db:link> object.</db:para>
<db:para>Setting this property initializes the COM object. Any COM object previously set is shut down.</db:para>
<db:para>The most efficient way to set this property is by using the registered component's UUID, e.g.</db:para>
<db:programlisting language="cpp">ctrl-&gt;setControl(&quot;{8E27C92B-1264-101C-8A2F-040224009C02}&quot;);
</db:programlisting>
<db:para>The second fastest way is to use the registered control's class name (with or without version number), e.g.</db:para>
<db:programlisting language="cpp">ctrl-&gt;setControl(&quot;MSCal.Calendar&quot;);
</db:programlisting>
<db:para>The slowest, but easiest way to use is to use the control's full name, e.g.</db:para>
<db:programlisting language="cpp">ctrl-&gt;setControl(&quot;Calendar Control 9.0&quot;);
</db:programlisting>
<db:para>It is also possible to initialize the object from a file, e.g.</db:para>
<db:programlisting language="cpp">ctrl-&gt;setControl(&quot;c:/files/file.doc&quot;);
</db:programlisting>
<db:para>If the component's UUID is used the following patterns can be used to initialize the control on a remote machine, to initialize a licensed control or to connect to a running object:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>To initialize the control on a different machine use the following pattern:</db:para>
<db:programlisting language="cpp">&lt;domain/username&gt;:&lt;password&gt;@server/{8E27C92B-1264-101C-8A2F-040224009C02}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>To initialize a licensed control use the following pattern:</db:para>
<db:programlisting language="cpp">{8E27C92B-1264-101C-8A2F-040224009C02}:&lt;LicenseKey&gt;
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>To connect to an already running object use the following pattern:</db:para>
<db:programlisting language="cpp">{8E27C92B-1264-101C-8A2F-040224009C02}&amp;
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>The first two patterns can be combined, e.g. to initialize a licensed control on a remote machine:</db:para>
<db:programlisting language="cpp">ctrl-&gt;setControl(&quot;DOMAIN/user:password@server/{8E27C92B-1264-101C-8A2F-040224009C02}:LicenseKey&quot;);
</db:programlisting>
<db:para>The control's read function always returns the control's UUID, if provided including the license key, and the name of the server, but not including the username, the domain or the password.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">control</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setControl</db:emphasis>(<db:emphasis>const QString &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAxBase">
<db:title>[explicit] QAxBase::QAxBase(IUnknown *<db:emphasis>iface</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a <db:link xlink:href="qaxbase.xml">QAxBase</db:link> object that wraps the COM object <db:code role="parameter">iface</db:code>. If <db:code role="parameter">iface</db:code> is 0 (the default), use <db:link xlink:href="qaxbase.xml#control-prop">setControl</db:link>() to instantiate a COM object.</db:para>
</db:section>
<db:section xml:id="dtor.QAxBase">
<db:title>[virtual noexcept] QAxBase::~QAxBase()</db:title>
<db:para>Shuts down the COM object and destroys the <db:link xlink:href="qaxbase.xml">QAxBase</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="asVariant">
<db:title>QVariant QAxBase::asVariant() const</db:title>
<db:para>Returns a <db:link xlink:href="qvariant.xml">QVariant</db:link> that wraps the COM object. The variant can then be used as a parameter in e.g. <db:link xlink:href="qaxbase.xml#dynamicCall">dynamicCall</db:link>().</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>[virtual] void QAxBase::clear()</db:title>
<db:para>Disconnects and destroys the COM object.</db:para>
<db:para>If you reimplement this function you must also reimplement the destructor to call clear(), and call this implementation at the end of your clear() function.</db:para>
</db:section>
<db:section xml:id="disableClassInfo">
<db:title>void QAxBase::disableClassInfo()</db:title>
<db:para>Disables the class info generation for this ActiveX container. If you don't require any class information about the ActiveX control use this function to speed up the meta object generation.</db:para>
<db:para>Note that this function must be called immediately after construction of the object</db:para>
</db:section>
<db:section xml:id="disableEventSink">
<db:title>void QAxBase::disableEventSink()</db:title>
<db:para>Disables the event sink implementation for this ActiveX container. If you don't intend to listen to the ActiveX control's events use this function to speed up the meta object generation.</db:para>
<db:para>Some ActiveX controls might be unstable when connected to an event sink. To get OLE events you must use standard COM methods to register your own event sink. Use <db:link xlink:href="qaxbase.xml#queryInterface">queryInterface</db:link>() to get access to the raw COM object.</db:para>
<db:para>Note that this function should be called immediately after construction of the object.</db:para>
</db:section>
<db:section xml:id="disableMetaObject">
<db:title>void QAxBase::disableMetaObject()</db:title>
<db:para>Disables the meta object generation for this ActiveX container. This also disables the event sink and class info generation. If you don't intend to use the Qt meta object implementation call this function to speed up instantiation of the control. You will still be able to call the object through <db:link xlink:href="qaxbase.xml#dynamicCall">dynamicCall</db:link>(), but signals, slots and properties will not be available with <db:link xlink:href="qobject.xml">QObject</db:link> APIs.</db:para>
<db:para>Some ActiveX controls might be unstable when used with OLE automation. Use standard COM methods to use those controls through the COM interfaces provided by <db:link xlink:href="qaxbase.xml#queryInterface">queryInterface</db:link>().</db:para>
<db:para>Note that this function must be called immediately after construction of the object.</db:para>
</db:section>
<db:section xml:id="dynamicCall">
<db:title>QVariant QAxBase::dynamicCall(const char *<db:emphasis>function</db:emphasis>, const QVariant &amp;<db:emphasis>var1</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var2</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var3</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var4</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var5</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var6</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var7</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var8</db:emphasis> = QVariant())</db:title>
<db:para>Calls the COM object's method <db:code role="parameter">function</db:code>, passing the parameters <db:code role="parameter">var1</db:code>, <db:code role="parameter">var1</db:code>, <db:code role="parameter">var2</db:code>, <db:code role="parameter">var3</db:code>, <db:code role="parameter">var4</db:code>, <db:code role="parameter">var5</db:code>, <db:code role="parameter">var6</db:code>, <db:code role="parameter">var7</db:code> and <db:code role="parameter">var8</db:code>, and returns the value returned by the method, or an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> if the method does not return a value or when the function call failed.</db:para>
<db:para>If <db:code role="parameter">function</db:code> is a method of the object the string must be provided as the full prototype, for example as it would be written in a <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>() call.</db:para>
<db:programlisting language="cpp">activeX-&gt;dynamicCall(&quot;Navigate(const QString&amp;)&quot;, &quot;www.qt-project.org&quot;);
</db:programlisting>
<db:para>Alternatively a function can be called passing the parameters embedded in the string, e.g. above function can also be invoked using</db:para>
<db:programlisting language="cpp">activeX-&gt;dynamicCall(&quot;Navigate(\&quot;www.qt-project.org\&quot;)&quot;);
</db:programlisting>
<db:para>All parameters are passed as strings; it depends on the control whether they are interpreted correctly, and is slower than using the prototype with correctly typed parameters.</db:para>
<db:para>If <db:code role="parameter">function</db:code> is a property the string has to be the name of the property. The property setter is called when <db:code role="parameter">var1</db:code> is a valid <db:link xlink:href="qvariant.xml">QVariant</db:link>, otherwise the getter is called.</db:para>
<db:programlisting language="cpp">activeX-&gt;dynamicCall(&quot;Value&quot;, 5);
QString text = activeX-&gt;dynamicCall(&quot;Text&quot;).toString();
</db:programlisting>
<db:para>Note that it is faster to get and set properties using <db:link xlink:href="qobject.xml#property">QObject::property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>().</db:para>
<db:para>dynamicCall() can also be used to call objects with a <db:link xlink:href="qaxbase.xml#disableMetaObject">disabled metaobject</db:link> wrapper, which can improve performance significantely, esp. when calling many different objects of different types during an automation process. ActiveQt will then however not validate parameters.</db:para>
<db:para>It is only possible to call functions through dynamicCall() that have parameters or return values of datatypes supported by <db:link xlink:href="qvariant.xml">QVariant</db:link>. See the <db:link xlink:href="qaxbase.xml">QAxBase</db:link> class documentation for a list of supported and unsupported datatypes. If you want to call functions that have unsupported datatypes in the parameter list, use <db:link xlink:href="qaxbase.xml#queryInterface">queryInterface</db:link>() to retrieve the appropriate COM interface, and use the function directly.</db:para>
<db:programlisting language="cpp">IWebBrowser2 *webBrowser = 0;
activeX-&gt;queryInterface(IID_IWebBrowser2, (void **)&amp;webBrowser);
if (webBrowser) {
    webBrowser-&gt;Navigate2(pvarURL);
    webBrowser-&gt;Release();
}
</db:programlisting>
<db:para>This is also more efficient.</db:para>
</db:section>
<db:section xml:id="dynamicCall-1">
<db:title>QVariant QAxBase::dynamicCall(const char *<db:emphasis>function</db:emphasis>, QList&lt;QVariant&gt; &amp;<db:emphasis>vars</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Calls the COM object's method <db:code role="parameter">function</db:code>, passing the parameters in <db:code role="parameter">vars</db:code>, and returns the value returned by the method. If the method does not return a value or when the function call failed this function returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> object.</db:para>
<db:para>The <db:link xlink:href="qvariant.xml">QVariant</db:link> objects in <db:code role="parameter">vars</db:code> are updated when the method has out-parameters.</db:para>
</db:section>
<db:section xml:id="generateDocumentation">
<db:title>QString QAxBase::generateDocumentation()</db:title>
<db:para>Returns a rich text string with documentation for the wrapped COM object. Dump the string to an HTML-file, or use it in e.g. a <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> widget.</db:para>
</db:section>
<db:section xml:id="initialize">
<db:title>[virtual protected] bool QAxBase::initialize(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>This virtual function is called by <db:link xlink:href="qaxbase.xml#control-prop">setControl</db:link>() and creates the requested COM object. <db:code role="parameter">ptr</db:code> is set to the object's IUnknown implementation. The function returns true if the object initialization succeeded; otherwise the function returns false.</db:para>
<db:para>The default implementation interprets the string returned by <db:link xlink:href="qaxbase.xml#control-prop">control</db:link>(), and calls <db:link xlink:href="qaxbase.xml#initializeRemote">initializeRemote</db:link>(), <db:link xlink:href="qaxbase.xml#initializeLicensed">initializeLicensed</db:link>() or <db:link xlink:href="qaxbase.xml#initializeActive">initializeActive</db:link>() if the string matches the respective patterns. If <db:link xlink:href="qaxbase.xml#control-prop">control</db:link>() is the name of an existing file, <db:link xlink:href="qaxbase.xml#initializeFromFile">initializeFromFile</db:link>() is called. If no pattern is matched, or if remote or licensed initialization fails, CoCreateInstance is used directly to create the object.</db:para>
<db:para>See the <db:link xlink:href="qaxbase.xml#control-prop">control</db:link> property documentation for details about supported patterns.</db:para>
<db:para>The interface returned in <db:code role="parameter">ptr</db:code> must be referenced exactly once when this function returns. The interface provided by e.g. CoCreateInstance is already referenced, and there is no need to reference it again.</db:para>
</db:section>
<db:section xml:id="initializeActive">
<db:title>[protected] bool QAxBase::initializeActive(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Connects to an active instance running on the current machine, and returns the IUnknown interface to the running object in <db:code role="parameter">ptr</db:code>. This function returns true if successful, otherwise returns false.</db:para>
<db:para>This function is called by <db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>() if the control string contains the substring &quot;}&amp;&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializeFromFile">
<db:title>[protected] bool QAxBase::initializeFromFile(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Creates the COM object handling the filename in the control property, and returns the IUnknown interface to the object in <db:code role="parameter">ptr</db:code>. This function returns true if successful, otherwise returns false.</db:para>
<db:para>This function is called by <db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>() if the control string is the name of an existing file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializeLicensed">
<db:title>[protected] bool QAxBase::initializeLicensed(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Creates an instance of a licensed control, and returns the IUnknown interface to the object in <db:code role="parameter">ptr</db:code>. This functions returns true if successful, otherwise returns false.</db:para>
<db:para>This function is called by <db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>() if the control string contains the substring &quot;}:&quot;. The license key needs to follow this substring.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializeRemote">
<db:title>[protected] bool QAxBase::initializeRemote(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Creates the instance on a remote server, and returns the IUnknown interface to the object in <db:code role="parameter">ptr</db:code>. This function returns true if successful, otherwise returns false.</db:para>
<db:para>This function is called by <db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>() if the control string contains the substring &quot;/{&quot;. The information about the remote machine needs to be provided in front of the substring.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QAxBase::isNull() const</db:title>
<db:para>Returns true if there is no COM object loaded by this wrapper; otherwise return false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#control-prop">control</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyBag">
<db:title>QAxBase::PropertyBag QAxBase::propertyBag() const</db:title>
<db:para>Returns a name:value map of all the properties exposed by the COM object.</db:para>
<db:para>This is more efficient than getting multiple properties individually if the COM object supports property bags.</db:para>
<db:warning>
<db:para>It is not guaranteed that the property bag implementation of the COM object returns all properties, or that the properties returned are the same as those available through the IDispatch interface.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#setPropertyBag">setPropertyBag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyWritable">
<db:title>[virtual] bool QAxBase::propertyWritable(const char *<db:emphasis>prop</db:emphasis>) const</db:title>
<db:para>Returns true if the property <db:code role="parameter">prop</db:code> is writable; otherwise returns false. By default, all properties are writable.</db:para>
<db:warning>
<db:para>Depending on the control implementation this setting might be ignored for some properties.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#setPropertyWritable">setPropertyWritable</db:link>()</db:member>
<db:member><db:link xlink:href="">propertyChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="queryInterface">
<db:title>long QAxBase::queryInterface(const QUuid &amp;<db:emphasis>uuid</db:emphasis>, void **<db:emphasis>iface</db:emphasis>) const</db:title>
<db:para>Requests the interface <db:code role="parameter">uuid</db:code> from the COM object and sets the value of <db:code role="parameter">iface</db:code> to the provided interface, or to 0 if the requested interface could not be provided.</db:para>
<db:para>Returns the result of the QueryInterface implementation of the COM object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#control-prop">control</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="querySubObject">
<db:title>QAxObject *QAxBase::querySubObject(const char *<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>var1</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var2</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var3</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var4</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var5</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var6</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var7</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var8</db:emphasis> = QVariant())</db:title>
<db:para>Returns a pointer to a <db:link xlink:href="qaxobject.xml">QAxObject</db:link> wrapping the COM object provided by the method or property <db:code role="parameter">name</db:code>, passing passing the parameters <db:code role="parameter">var1</db:code>, <db:code role="parameter">var1</db:code>, <db:code role="parameter">var2</db:code>, <db:code role="parameter">var3</db:code>, <db:code role="parameter">var4</db:code>, <db:code role="parameter">var5</db:code>, <db:code role="parameter">var6</db:code>, <db:code role="parameter">var7</db:code> and <db:code role="parameter">var8</db:code>.</db:para>
<db:para>If <db:code role="parameter">name</db:code> is provided by a method the string must include the full function prototype.</db:para>
<db:para>If <db:code role="parameter">name</db:code> is a property the string must be the name of the property, and <db:code role="parameter">var1</db:code>, ... <db:code role="parameter">var8</db:code> are ignored.</db:para>
<db:para>The returned <db:link xlink:href="qaxobject.xml">QAxObject</db:link> is a child of this object (which is either of type <db:link xlink:href="qaxobject.xml">QAxObject</db:link> or <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link>), and is deleted when this object is deleted. It is however safe to delete the returned object yourself, and you should do so when you iterate over lists of subobjects.</db:para>
<db:para>COM enabled applications usually have an object model publishing certain elements of the application as dispatch interfaces. Use this method to navigate the hierarchy of the object model, e.g.</db:para>
<db:programlisting language="cpp">QAxWidget outlook(&quot;Outlook.Application&quot;);
QAxObject *session = outlook.querySubObject(&quot;Session&quot;);
if (session) {
    QAxObject *defFolder = session-&gt;querySubObject(
                            &quot;GetDefaultFolder(OlDefaultFolders)&quot;,
                            &quot;olFolderContacts&quot;);
    //...
}
</db:programlisting>
</db:section>
<db:section xml:id="querySubObject-1">
<db:title>QAxObject *QAxBase::querySubObject(const char *<db:emphasis>name</db:emphasis>, QList&lt;QVariant&gt; &amp;<db:emphasis>vars</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The <db:link xlink:href="qvariant.xml">QVariant</db:link> objects in <db:code role="parameter">vars</db:code> are updated when the method has out-parameters.</db:para>
</db:section>
<db:section xml:id="setPropertyBag">
<db:title>void QAxBase::setPropertyBag(const QAxBase::PropertyBag &amp;<db:emphasis>bag</db:emphasis>)</db:title>
<db:para>Sets the properties of the COM object to the corresponding values in <db:code role="parameter">bag</db:code>.</db:para>
<db:warning>
<db:para>You should only set property bags that have been returned by the <db:link xlink:href="qaxbase.xml#propertyBag">propertyBag</db:link> function, as it cannot be guaranteed that the property bag implementation of the COM object supports the same properties that are available through the IDispatch interface.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#propertyBag">propertyBag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPropertyWritable">
<db:title>[virtual] void QAxBase::setPropertyWritable(const char *<db:emphasis>prop</db:emphasis>, bool <db:emphasis>ok</db:emphasis>)</db:title>
<db:para>Sets the property <db:code role="parameter">prop</db:code> to writable if <db:code role="parameter">ok</db:code> is true, otherwise sets <db:code role="parameter">prop</db:code> to be read-only. By default, all properties are writable.</db:para>
<db:warning>
<db:para>Depending on the control implementation this setting might be ignored for some properties.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#propertyWritable">propertyWritable</db:link>()</db:member>
<db:member><db:link xlink:href="">propertyChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verbs">
<db:title>[since 4.1] QStringList QAxBase::verbs() const</db:title>
<db:para>Returns the list of verbs that the COM object can execute. If the object does not implement IOleObject, or does not support any verbs, then this function returns an empty stringlist.</db:para>
<db:para>Note that the OLE default verbs (OLEIVERB_SHOW etc) are not included in the list.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
</db:section>
</db:article>
