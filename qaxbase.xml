<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAxBase Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxbase.xml">QAxBase</db:link> class is an abstract class that provides an API to initialize and access a COM object.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxBase</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += axcontainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaxwidget.xml" xlink:role="class">QAxWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qaxbase.xml">QAxBase</db:link> is an abstract class that cannot be used directly, and is instantiated through the subclasses QAxObject and <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link>. This class provides the API to access the COM object directly through its IUnknown implementation. If the COM object implements the IDispatch interface, the properties and methods of that object become available as Qt properties and slots.</db:para>
<db:programlisting language="cpp">connect(buttonBack, SIGNAL(clicked()), webBrowser, SLOT(GoBack()));
</db:programlisting>
<db:para>Properties exposed by the object's IDispatch implementation can be read and written through the property system provided by the Qt Object Model (both subclasses are QObjects, so you can use QObject::setProperty() and QObject::property()). Properties with multiple parameters are not supported.</db:para>
<db:programlisting language="cpp">activeX-&gt;setProperty(&quot;text&quot;, &quot;some text&quot;);
int value = activeX-&gt;property(&quot;value&quot;);
</db:programlisting>
<db:para>Write-functions for properties and other methods exposed by the object's IDispatch implementation can be called directly using dynamicCall(), or indirectly as slots connected to a signal.</db:para>
<db:programlisting language="cpp">webBrowser-&gt;dynamicCall(&quot;GoHome()&quot;);
</db:programlisting>
<db:para>Outgoing events supported by the COM object are emitted as standard Qt signals.</db:para>
<db:programlisting language="cpp">connect(webBrowser, SIGNAL(TitleChanged(QString)),
        this, SLOT(setCaption(QString)));
</db:programlisting>
<db:para><db:link xlink:href="qaxbase.xml">QAxBase</db:link> transparently converts between COM data types and the equivalent Qt data types. Some COM types have no equivalent Qt data structure.</db:para>
<db:para>Supported COM datatypes are listed in the first column of following table. The second column is the Qt type that can be used with the QObject property functions. The third column is the Qt type that is used in the prototype of generated signals and slots for in-parameters, and the last column is the Qt type that is used in the prototype of signals and slots for out-parameters.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>COM type</db:para>
</db:th>
<db:th>
<db:para>Qt property</db:para>
</db:th>
<db:th>
<db:para>in-parameter</db:para>
</db:th>
<db:th>
<db:para>out-parameter</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>VARIANT_BOOL</db:para>
</db:td>
<db:td>
<db:para>bool</db:para>
</db:td>
<db:td>
<db:para>bool</db:para>
</db:td>
<db:td>
<db:para>bool&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BSTR</db:para>
</db:td>
<db:td>
<db:para>QString</db:para>
</db:td>
<db:td>
<db:para>const QString&amp;</db:para>
</db:td>
<db:td>
<db:para>QString&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>char, short, int, long</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
<db:td>
<db:para>int&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uchar, ushort, uint, ulong</db:para>
</db:td>
<db:td>
<db:para>uint</db:para>
</db:td>
<db:td>
<db:para>uint</db:para>
</db:td>
<db:td>
<db:para>uint&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>float, double</db:para>
</db:td>
<db:td>
<db:para>double</db:para>
</db:td>
<db:td>
<db:para>double</db:para>
</db:td>
<db:td>
<db:para>double&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DATE</db:para>
</db:td>
<db:td>
<db:para>QDateTime</db:para>
</db:td>
<db:td>
<db:para>const QDateTime&amp;</db:para>
</db:td>
<db:td>
<db:para>QDateTime&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CY</db:para>
</db:td>
<db:td>
<db:para>qlonglong</db:para>
</db:td>
<db:td>
<db:para>qlonglong</db:para>
</db:td>
<db:td>
<db:para>qlonglong&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>OLE_COLOR</db:para>
</db:td>
<db:td>
<db:para>QColor</db:para>
</db:td>
<db:td>
<db:para>const QColor&amp;</db:para>
</db:td>
<db:td>
<db:para>QColor&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SAFEARRAY(VARIANT)</db:para>
</db:td>
<db:td>
<db:para>QList&lt;QVariant&gt;</db:para>
</db:td>
<db:td>
<db:para>const QList&lt;QVariant&gt;&amp;</db:para>
</db:td>
<db:td>
<db:para>QList&lt;QVariant&gt;&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SAFEARRAY(int), SAFEARRAY(double), SAFEARRAY(Date)</db:para>
</db:td>
<db:td>
<db:para>QList&lt;QVariant&gt;</db:para>
</db:td>
<db:td>
<db:para>const QList&lt;QVariant&gt;&amp;</db:para>
</db:td>
<db:td>
<db:para>QList&lt;QVariant&gt;&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SAFEARRAY(BYTE)</db:para>
</db:td>
<db:td>
<db:para>QByteArray</db:para>
</db:td>
<db:td>
<db:para>const QByteArray&amp;</db:para>
</db:td>
<db:td>
<db:para>QByteArray&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SAFEARRAY(BSTR)</db:para>
</db:td>
<db:td>
<db:para>QStringList</db:para>
</db:td>
<db:td>
<db:para>const QStringList&amp;</db:para>
</db:td>
<db:td>
<db:para>QStringList&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARIANT</db:para>
</db:td>
<db:td>
<db:para>type-dependent</db:para>
</db:td>
<db:td>
<db:para>const QVariant&amp;</db:para>
</db:td>
<db:td>
<db:para>QVariant&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>IFontDisp*</db:para>
</db:td>
<db:td>
<db:para>QFont</db:para>
</db:td>
<db:td>
<db:para>const QFont&amp;</db:para>
</db:td>
<db:td>
<db:para>QFont&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>IPictureDisp*</db:para>
</db:td>
<db:td>
<db:para>QPixmap</db:para>
</db:td>
<db:td>
<db:para>const QPixmap&amp;</db:para>
</db:td>
<db:td>
<db:para>QPixmap&amp;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>IDispatch*</db:para>
</db:td>
<db:td>
<db:para>QAxObject*</db:para>
</db:td>
<db:td>
<db:para><db:code>QAxBase::asVariant()</db:code></db:para>
</db:td>
<db:td>
<db:para>QAxObject* (return value)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>IUnknown*</db:para>
</db:td>
<db:td>
<db:para>QAxObject*</db:para>
</db:td>
<db:td>
<db:para><db:code>QAxBase::asVariant()</db:code></db:para>
</db:td>
<db:td>
<db:para>QAxObject* (return value)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SCODE, DECIMAL</db:para>
</db:td>
<db:td>
<db:para><db:emphasis>unsupported</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>unsupported</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>unsupported</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARIANT* (Since Qt 4.5)</db:para>
</db:td>
<db:td>
<db:para><db:emphasis>unsupported</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>QVariant&amp;</db:emphasis></db:para>
</db:td>
<db:td>
<db:para><db:emphasis>QVariant&amp;</db:emphasis></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Supported are also enumerations, and typedefs to supported types.</db:para>
<db:para>To call the methods of a COM interface described by the following IDL</db:para>
<db:programlisting language="cpp">dispinterface IControl
{
properties:
    [id(1)] BSTR text;
    [id(2)] IFontDisp *font;

methods:
    [id(6)] void showColumn([in] int i);
    [id(3)] bool addColumn([in] BSTR t);
    [id(4)] int fillList([in, out] SAFEARRAY(VARIANT) *list);
    [id(5)] IDispatch *item([in] int i);
};
</db:programlisting>
<db:para>use the <db:link xlink:href="qaxbase.xml">QAxBase</db:link> API like this:</db:para>
<db:programlisting language="cpp">QAxObject object(&quot;&lt;CLSID&gt;&quot;);

QString text = object.property(&quot;text&quot;).toString();
object.setProperty(&quot;font&quot;, QFont(&quot;Times New Roman&quot;, 12));

connect(this, SIGNAL(clicked(int)), &amp;object, SLOT(showColumn(int)));
bool ok = object.dynamicCall(&quot;addColumn(const QString&amp;)&quot;, &quot;Column 1&quot;).toBool();

QList&lt;QVariant&gt; varlist;
QList&lt;QVariant&gt; parameters;
parameters &lt;&lt; QVariant(varlist);
int n = object.dynamicCall(&quot;fillList(QList&lt;QVariant&gt;&amp;)&quot;, parameters).toInt();

QAxObject *item = object.querySubItem(&quot;item(int)&quot;, 5);
</db:programlisting>
<db:para>Note that the QList the object should fill has to be provided as an element in the parameter list of QVariants.</db:para>
<db:para>If you need to access properties or pass parameters of unsupported datatypes you must access the COM object directly through its <db:code>IDispatch</db:code> implementation or other interfaces. Those interfaces can be retrieved through queryInterface().</db:para>
<db:programlisting language="cpp">IUnknown *iface = 0;
activeX-&gt;queryInterface(IID_IUnknown, (void**)&amp;iface);
if (iface) {
    // use the interface
    iface-&gt;Release();
}
</db:programlisting>
<db:para>To get the definition of the COM interfaces you will have to use the header files provided with the component you want to use. Some compilers can also import type libraries using the #import compiler directive. See the component documentation to find out which type libraries you have to import, and how to use them.</db:para>
<db:para>If you need to react to events that pass parameters of unsupported datatypes you can use the generic signal that delivers the event data as provided by the COM event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QAxObject</db:member>
<db:member><db:link xlink:href="qaxwidget.xml">QAxWidget</db:link></db:member>
<db:member><db:link xlink:href="qaxscript.xml">QAxScript</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml#activeqt-framework">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="clear">
<db:title>[virtual] void QAxBase::clear()</db:title>
<db:para>Disconnects and destroys the COM object.</db:para>
<db:para>If you reimplement this function you must also reimplement the destructor to call clear(), and call this implementation at the end of your clear() function.</db:para>
</db:section>
<db:section xml:id="disableClassInfo">
<db:title>void QAxBase::disableClassInfo()</db:title>
<db:para>Disables the class info generation for this ActiveX container. If you don't require any class information about the ActiveX control use this function to speed up the meta object generation.</db:para>
<db:para>Note that this function must be called immediately after construction of the object</db:para>
</db:section>
<db:section xml:id="disableEventSink">
<db:title>void QAxBase::disableEventSink()</db:title>
<db:para>Disables the event sink implementation for this ActiveX container. If you don't intend to listen to the ActiveX control's events use this function to speed up the meta object generation.</db:para>
<db:para>Some ActiveX controls might be unstable when connected to an event sink. To get OLE events you must use standard COM methods to register your own event sink. Use queryInterface() to get access to the raw COM object.</db:para>
<db:para>Note that this function should be called immediately after construction of the object.</db:para>
</db:section>
<db:section xml:id="disableMetaObject">
<db:title>void QAxBase::disableMetaObject()</db:title>
<db:para>Disables the meta object generation for this ActiveX container. This also disables the event sink and class info generation. If you don't intend to use the Qt meta object implementation call this function to speed up instantiation of the control. You will still be able to call the object through dynamicCall(), but signals, slots and properties will not be available with QObject APIs.</db:para>
<db:para>Some ActiveX controls might be unstable when used with OLE automation. Use standard COM methods to use those controls through the COM interfaces provided by queryInterface().</db:para>
<db:para>Note that this function must be called immediately after construction of the object.</db:para>
</db:section>
<db:section xml:id="initialize">
<db:title>[virtual protected] bool QAxBase::initialize(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>This virtual function is called by setControl() and creates the requested COM object. <db:code role="parameter">ptr</db:code> is set to the object's IUnknown implementation. The function returns true if the object initialization succeeded; otherwise the function returns false.</db:para>
<db:para>The default implementation interprets the string returned by control(), and calls <db:link xlink:href="qaxbase.xml#initializeRemote">initializeRemote</db:link>(), <db:link xlink:href="qaxbase.xml#initializeLicensed">initializeLicensed</db:link>() or <db:link xlink:href="qaxbase.xml#initializeActive">initializeActive</db:link>() if the string matches the respective patterns. If control() is the name of an existing file, <db:link xlink:href="qaxbase.xml#initializeFromFile">initializeFromFile</db:link>() is called. If no pattern is matched, or if remote or licensed initialization fails, CoCreateInstance is used directly to create the object.</db:para>
<db:para>See the control property documentation for details about supported patterns.</db:para>
<db:para>The interface returned in <db:code role="parameter">ptr</db:code> must be referenced exactly once when this function returns. The interface provided by e.g. CoCreateInstance is already referenced, and there is no need to reference it again.</db:para>
</db:section>
<db:section xml:id="initializeActive">
<db:title>[protected] bool QAxBase::initializeActive(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Connects to an active instance running on the current machine, and returns the IUnknown interface to the running object in <db:code role="parameter">ptr</db:code>. This function returns true if successful, otherwise returns false.</db:para>
<db:para>This function is called by <db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>() if the control string contains the substring &quot;}&amp;&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializeFromFile">
<db:title>[protected] bool QAxBase::initializeFromFile(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Creates the COM object handling the filename in the control property, and returns the IUnknown interface to the object in <db:code role="parameter">ptr</db:code>. This function returns true if successful, otherwise returns false.</db:para>
<db:para>This function is called by <db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>() if the control string is the name of an existing file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializeLicensed">
<db:title>[protected] bool QAxBase::initializeLicensed(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Creates an instance of a licensed control, and returns the IUnknown interface to the object in <db:code role="parameter">ptr</db:code>. This functions returns true if successful, otherwise returns false.</db:para>
<db:para>This function is called by <db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>() if the control string contains the substring &quot;}:&quot;. The license key needs to follow this substring.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializeRemote">
<db:title>[protected] bool QAxBase::initializeRemote(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Creates the instance on a remote server, and returns the IUnknown interface to the object in <db:code role="parameter">ptr</db:code>. This function returns true if successful, otherwise returns false.</db:para>
<db:para>This function is called by <db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>() if the control string contains the substring &quot;/{&quot;. The information about the remote machine needs to be provided in front of the substring.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
