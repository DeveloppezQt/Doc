<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Class Wizard Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The License Wizard example shows how to implement linear wizards using <db:link xlink:href="qwizard.xml">QWizard</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:alt>Screenshot of the Class Wizard example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/classwizard.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Most wizards have a linear structure, with page 1 followed by page 2 and so on until the last page. Some wizards are more complex in that they allow different traversal paths based on the information provided by the user. The <db:link xlink:href="qtwidgets-dialogs-licensewizard-example.xml">License Wizard</db:link> example shows how to create such wizards.</db:para>
<db:para>The Class Wizard example consists of the following classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>ClassWizard inherits <db:link xlink:href="qwizard.xml">QWizard</db:link> and provides a three-step wizard that generates the skeleton of a C++ class based on the user's input.</db:para>
</db:listitem>
<db:listitem>
<db:para>IntroPage, ClassInfoPage, CodeStylePage, OutputFilesPage, and ConclusionPage are <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> subclasses that implement the wizard pages.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="classwizard-class-definition">
<db:title>ClassWizard Class Definition</db:title>
<db:mediaobject>
<db:alt>The Class Wizard pages</db:alt>
<db:imageobject>
<db:imagedata fileref="images/classwizard-flow.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We will see how to subclass <db:link xlink:href="qwizard.xml">QWizard</db:link> to implement our own wizard. The concrete wizard class is called ClassWizard and provides five pages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The first page is an introduction page, telling the user what the wizard is going to do.</db:para>
</db:listitem>
<db:listitem>
<db:para>The second page asks for a class name and a base class, and allows the user to specify whether the class should have a Q_OBJECT macro and what constructors it should provide.</db:para>
</db:listitem>
<db:listitem>
<db:para>The third page allows the user to set some options related to the code style, such as the macro used to protect the header file from multiple inclusion (e.g., MYDIALOG_H).</db:para>
</db:listitem>
<db:listitem>
<db:para>The fourth page allows the user to specify the names of the output files.</db:para>
</db:listitem>
<db:listitem>
<db:para>The fifth page is a conclusion page.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Although the program is just an example, if you press <db:guilabel>Finish</db:guilabel> (<db:guilabel>Done</db:guilabel> on macOS), actual C++ source files will actually be generated.</db:para>
</db:section>
<db:section xml:id="the-classwizard-class">
<db:title>The ClassWizard Class</db:title>
<db:para>Here's the ClassWizard definition:</db:para>
<db:programlisting language="cpp">class ClassWizard : public QWizard
{
    Q_OBJECT

public:
    ClassWizard(QWidget *parent = 0);

    void accept() override;
};
</db:programlisting>
<db:para>The class reimplements <db:link xlink:href="qdialog.xml">QDialog</db:link>'s <db:link xlink:href="qdialog.xml#accept">accept</db:link>() slot. This slot is called when the user clicks <db:guilabel>Finish</db:guilabel>.</db:para>
<db:para>Here's the constructor:</db:para>
<db:programlisting language="cpp">ClassWizard::ClassWizard(QWidget *parent)
    : QWizard(parent)
{
    addPage(new IntroPage);
    addPage(new ClassInfoPage);
    addPage(new CodeStylePage);
    addPage(new OutputFilesPage);
    addPage(new ConclusionPage);

    setPixmap(QWizard::BannerPixmap, QPixmap(&quot;:/images/banner.png&quot;));
    setPixmap(QWizard::BackgroundPixmap, QPixmap(&quot;:/images/background.png&quot;));

    setWindowTitle(tr(&quot;Class Wizard&quot;));
}
</db:programlisting>
<db:para>We instantiate the five pages and insert them into the wizard using <db:link xlink:href="qwizard.xml#addPage">QWizard::addPage</db:link>(). The order in which they are inserted is also the order in which they will be shown later on.</db:para>
<db:para>We call <db:link xlink:href="qwizard.xml#setPixmap">QWizard::setPixmap</db:link>() to set the banner and the background pixmaps for all pages. The banner is used as a background for the page header when the wizard's style is <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link>; the background is used as the dialog's background in <db:link xlink:href="qwizard.xml#WizardStyle-enum">MacStyle</db:link>. (See <db:link xlink:href="qwizard.xml#elements-of-a-wizard-page">Elements of a Wizard Page</db:link> for more information.)</db:para>
<db:programlisting language="cpp">void ClassWizard::accept()
{
    QByteArray className = field(&quot;className&quot;).toByteArray();
    QByteArray baseClass = field(&quot;baseClass&quot;).toByteArray();
    QByteArray macroName = field(&quot;macroName&quot;).toByteArray();
    QByteArray baseInclude = field(&quot;baseInclude&quot;).toByteArray();

    QString outputDir = field(&quot;outputDir&quot;).toString();
    QString header = field(&quot;header&quot;).toString();
    QString implementation = field(&quot;implementation&quot;).toString();
    ...
    QDialog::accept();
}
</db:programlisting>
<db:para>If the user clicks <db:guilabel>Finish</db:guilabel>, we extract the information from the various pages using <db:link xlink:href="qwizard.xml#field">QWizard::field</db:link>() and generate the files. The code is long and tedious (and has barely anything to do with noble art of designing wizards), so most of it is skipped here. See the actual example in the Qt distribution for the details if you're curious.</db:para>
</db:section>
<db:section xml:id="the-intropage-class">
<db:title>The IntroPage Class</db:title>
<db:para>The pages are defined in classwizard.h and implemented in classwizard.cpp, together with ClassWizard. We will start with the easiest page:</db:para>
<db:programlisting language="cpp">class IntroPage : public QWizardPage
{
    Q_OBJECT

public:
    IntroPage(QWidget *parent = 0);

private:
    QLabel *label;
};

IntroPage::IntroPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Introduction&quot;));
    setPixmap(QWizard::WatermarkPixmap, QPixmap(&quot;:/images/watermark1.png&quot;));

    label = new QLabel(tr(&quot;This wizard will generate a skeleton C++ class &quot;
                          &quot;definition, including a few functions. You simply &quot;
                          &quot;need to specify the class name and set a few &quot;
                          &quot;options to produce a header file and an &quot;
                          &quot;implementation file for your new C++ class.&quot;));
    label-&gt;setWordWrap(true);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(label);
    setLayout(layout);
}
</db:programlisting>
<db:para>A page inherits from <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link>. We set a <db:link xlink:href="qwizardpage.xml#title-prop">title</db:link> and a <db:link xlink:href="qwizard.xml#WizardPixmap-enum">watermark pixmap</db:link>. By not setting any <db:link xlink:href="qwizardpage.xml#subTitle-prop">subTitle</db:link>, we ensure that no header is displayed for this page. (On Windows, it is customary for wizards to display a watermark pixmap on the first and last pages, and to have a header on the other pages.)</db:para>
<db:para>Then we create a <db:link xlink:href="qlabel.xml">QLabel</db:link> and add it to a layout.</db:para>
</db:section>
<db:section xml:id="the-classinfopage-class">
<db:title>The ClassInfoPage Class</db:title>
<db:para>The second page is defined and implemented as follows:</db:para>
<db:programlisting language="cpp">class ClassInfoPage : public QWizardPage
{
    Q_OBJECT

public:
    ClassInfoPage(QWidget *parent = 0);

private:
    QLabel *classNameLabel;
    QLabel *baseClassLabel;
    QLineEdit *classNameLineEdit;
    QLineEdit *baseClassLineEdit;
    QCheckBox *qobjectMacroCheckBox;
    QGroupBox *groupBox;
    QRadioButton *qobjectCtorRadioButton;
    QRadioButton *qwidgetCtorRadioButton;
    QRadioButton *defaultCtorRadioButton;
    QCheckBox *copyCtorCheckBox;
};

ClassInfoPage::ClassInfoPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Class Information&quot;));
    setSubTitle(tr(&quot;Specify basic information about the class for which you &quot;
                   &quot;want to generate skeleton source code files.&quot;));
    setPixmap(QWizard::LogoPixmap, QPixmap(&quot;:/images/logo1.png&quot;));

    classNameLabel = new QLabel(tr(&quot;&amp;Class name:&quot;));
    classNameLineEdit = new QLineEdit;
    classNameLabel-&gt;setBuddy(classNameLineEdit);

    baseClassLabel = new QLabel(tr(&quot;B&amp;ase class:&quot;));
    baseClassLineEdit = new QLineEdit;
    baseClassLabel-&gt;setBuddy(baseClassLineEdit);

    qobjectMacroCheckBox = new QCheckBox(tr(&quot;Generate Q_OBJECT &amp;macro&quot;));

    groupBox = new QGroupBox(tr(&quot;C&amp;onstructor&quot;));
    ...
    registerField(&quot;className*&quot;, classNameLineEdit);
    registerField(&quot;baseClass&quot;, baseClassLineEdit);
    registerField(&quot;qobjectMacro&quot;, qobjectMacroCheckBox);
    registerField(&quot;qobjectCtor&quot;, qobjectCtorRadioButton);
    registerField(&quot;qwidgetCtor&quot;, qwidgetCtorRadioButton);
    registerField(&quot;defaultCtor&quot;, defaultCtorRadioButton);
    registerField(&quot;copyCtor&quot;, copyCtorCheckBox);

    QVBoxLayout *groupBoxLayout = new QVBoxLayout;
    ...
}
</db:programlisting>
<db:para>First, we set the page's <db:link xlink:href="qwizardpage.xml#title-prop">title</db:link>, <db:link xlink:href="qwizardpage.xml#subTitle-prop">subTitle</db:link>, and <db:link xlink:href="qwizard.xml#WizardPixmap-enum">logo pixmap</db:link>. The logo pixmap is displayed in the page's header in <db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link> and <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link>.</db:para>
<db:para>Then we create the child widgets, create <db:link xlink:href="qwizard.xml#registering-and-using-fields">wizard fields</db:link> associated with them, and put them into layouts. The className field is created with an asterisk (*) next to its name. This makes it a <db:link xlink:href="qwizard.xml#mandatory-fields">mandatory field</db:link>, that is, a field that must be filled before the user can press the <db:guilabel>Next</db:guilabel> button (<db:guilabel>Continue</db:guilabel> on macOS). The fields' values can be accessed from any other page using <db:link xlink:href="qwizardpage.xml#field">QWizardPage::field</db:link>(), or from the wizard code using <db:link xlink:href="qwizard.xml#field">QWizard::field</db:link>().</db:para>
</db:section>
<db:section xml:id="the-codestylepage-class">
<db:title>The CodeStylePage Class</db:title>
<db:para>The third page is defined and implemented as follows:</db:para>
<db:programlisting language="cpp">class CodeStylePage : public QWizardPage
{
    Q_OBJECT

public:
    CodeStylePage(QWidget *parent = 0);

protected:
    void initializePage() override;

private:
    QCheckBox *commentCheckBox;
    QCheckBox *protectCheckBox;
    QCheckBox *includeBaseCheckBox;
    QLabel *macroNameLabel;
    QLabel *baseIncludeLabel;
    QLineEdit *macroNameLineEdit;
    QLineEdit *baseIncludeLineEdit;
};

CodeStylePage::CodeStylePage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Code Style Options&quot;));
    setSubTitle(tr(&quot;Choose the formatting of the generated code.&quot;));
    setPixmap(QWizard::LogoPixmap, QPixmap(&quot;:/images/logo2.png&quot;));

    commentCheckBox = new QCheckBox(tr(&quot;&amp;Start generated files with a &quot;
    ...
    setLayout(layout);
}

void CodeStylePage::initializePage()
{
    QString className = field(&quot;className&quot;).toString();
    macroNameLineEdit-&gt;setText(className.toUpper() + &quot;_H&quot;);

    QString baseClass = field(&quot;baseClass&quot;).toString();

    includeBaseCheckBox-&gt;setChecked(!baseClass.isEmpty());
    includeBaseCheckBox-&gt;setEnabled(!baseClass.isEmpty());
    baseIncludeLabel-&gt;setEnabled(!baseClass.isEmpty());
    baseIncludeLineEdit-&gt;setEnabled(!baseClass.isEmpty());

    if (baseClass.isEmpty()) {
        baseIncludeLineEdit-&gt;clear();
    } else if (QRegExp(&quot;Q[A-Z].*&quot;).exactMatch(baseClass)) {
        baseIncludeLineEdit-&gt;setText('&lt;' + baseClass + '&gt;');
    } else {
        baseIncludeLineEdit-&gt;setText('&quot;' + baseClass.toLower() + &quot;.h\&quot;&quot;);
    }
}
</db:programlisting>
<db:para>The code in the constructor is very similar to what we did for ClassInfoPage, so we skipped most of it.</db:para>
<db:para>The initializePage() function is what makes this class interesting. It is reimplemented from <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> and is used to initialize some of the page's fields with values from the previous page (namely, className and baseClass). For example, if the class name on page 2 is SuperDuperWidget, the default macro name on page 3 is SUPERDUPERWIDGET_H.</db:para>
<db:para>The OutputFilesPage and ConclusionPage classes are very similar to CodeStylePage, so we won't review them here.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/classwizard.cpp">dialogs/classwizard/classwizard.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/classwizard.h">dialogs/classwizard/classwizard.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/classwizard.pro">dialogs/classwizard/classwizard.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/classwizard.qrc">dialogs/classwizard/classwizard.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/main.cpp">dialogs/classwizard/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/images/background.png">dialogs/classwizard/images/background.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/images/banner.png">dialogs/classwizard/images/banner.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/images/logo1.png">dialogs/classwizard/images/logo1.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/images/logo2.png">dialogs/classwizard/images/logo2.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/images/logo3.png">dialogs/classwizard/images/logo3.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/images/watermark1.png">dialogs/classwizard/images/watermark1.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/classwizard/images/watermark2.png">dialogs/classwizard/images/watermark2.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml">QWizard</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-licensewizard-example.xml">License Wizard Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-trivialwizard-example.xml">Trivial Wizard Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:section></db:article>
