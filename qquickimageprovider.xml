<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickImageProvider Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickimageprovider.xml">QQuickImageProvider</db:link> class provides an interface for supporting pixmaps and threaded image requests in QML.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickImageProvider</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qqmlimageproviderbase.xml" xlink:role="class">QQmlImageProviderBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickasyncimageprovider.xml" xlink:role="class">QQuickAsyncImageProvider</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qquickimageprovider.xml">QQuickImageProvider</db:link> is used to provide advanced image loading features in QML applications. It allows images in QML to be:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Loaded using QPixmaps rather than actual image files</db:para>
</db:listitem>
<db:listitem>
<db:para>Loaded asynchronously in a separate thread</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To specify that an image should be loaded by an image provider, use the <db:emphasis role="bold">&quot;image:&quot;</db:emphasis> scheme for the URL source of the image, followed by the identifiers of the image provider and the requested image. For example:</db:para>
<db:programlisting language="qml">Image { source: &quot;image://myimageprovider/image.png&quot; }
</db:programlisting>
<db:para>This specifies that the image should be loaded by the image provider named &quot;myimageprovider&quot;, and the image to be loaded is named &quot;image.png&quot;. The QML engine invokes the appropriate image provider according to the providers that have been registered through <db:link xlink:href="qqmlengine.xml#addImageProvider">QQmlEngine::addImageProvider</db:link>().</db:para>
<db:para>Note that the identifiers are case-insensitive, but the rest of the URL will be passed on with preserved case. For example, the below snippet would still specify that the image is loaded by the image provider named &quot;myimageprovider&quot;, but it would request a different image than the above snippet (&quot;Image.png&quot; instead of &quot;image.png&quot;).</db:para>
<db:programlisting language="qml">Image { source: &quot;image://MyImageProvider/Image.png&quot; }
</db:programlisting>
<db:para>If you want the rest of the URL to be case insensitive, you will have to take care of that yourself inside your image provider.</db:para>
<db:section xml:id="an-example">
<db:title>An Example</db:title>
<db:para>Here are two images. Their <db:code>source</db:code> values indicate they should be loaded by an image provider named &quot;colors&quot;, and the images to be loaded are &quot;yellow&quot; and &quot;red&quot;, respectively:</db:para>
<db:programlisting language="qml">Column {
    Image { source: &quot;image://colors/yellow&quot; }
    Image { source: &quot;image://colors/red&quot; }
}
</db:programlisting>
<db:para>When these images are loaded by QML, it looks for a matching image provider and calls its <db:link xlink:href="qquickimageprovider.xml#requestImage">requestImage</db:link>() or <db:link xlink:href="qquickimageprovider.xml#requestPixmap">requestPixmap</db:link>() method (depending on its <db:link xlink:href="qquickimageprovider.xml#imageType">imageType</db:link>()) to load the image. The method is called with the <db:code>id</db:code> parameter set to &quot;yellow&quot; for the first image, and &quot;red&quot; for the second.</db:para>
<db:para>Here is an image provider implementation that can load the images requested by the above QML. This implementation dynamically generates <db:link xlink:href="qpixmap.xml">QPixmap</db:link> images that are filled with the requested color:</db:para>
<db:programlisting language="cpp">class ColorImageProvider : public QQuickImageProvider
{
public:
    ColorImageProvider()
               : QQuickImageProvider(QQuickImageProvider::Pixmap)
    {
    }

    QPixmap requestPixmap(const QString &amp;amp;id, QSize *size, const QSize &amp;amp;requestedSize) override
    {
       int width = 100;
       int height = 50;

       if (size)
          *size = QSize(width, height);
       QPixmap pixmap(requestedSize.width() &amp;gt; 0 ? requestedSize.width() : width,
                      requestedSize.height() &amp;gt; 0 ? requestedSize.height() : height);
       pixmap.fill(QColor(id).rgba());
       return pixmap;
    }
};
</db:programlisting>
<db:para>To make this provider accessible to QML, it is registered with the QML engine with a &quot;colors&quot; identifier:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{

    QQuickView view;
    QQmlEngine *engine = view.engine();
    engine-&amp;gt;addImageProvider(QLatin1String(&quot;colors&quot;), new ColorImageProvider);
    view.setSource(QUrl::fromLocalFile(QStringLiteral(&quot;imageprovider-example.qml&quot;)));
    view.show();
    return app.exec();
}
</db:programlisting>
<db:para>Now the images can be successfully loaded in QML:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/imageprovider.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>See the <db:link xlink:href="qtquick-imageprovider-example.xml">Image Provider Example</db:link> for the complete implementation. Note that the example registers the provider via a <db:link xlink:href="qqmlengineextensionplugin.xml">plugin</db:link> instead of registering it in the application <db:code>main()</db:code> function as shown above.</db:para>
</db:section>
<db:section xml:id="asynchronous-image-loading">
<db:title>Asynchronous Image Loading</db:title>
<db:para>Image providers that support <db:link xlink:href="qimage.xml">QImage</db:link> or Texture loading automatically include support for asychronous loading of images. To enable asynchronous loading for an image source, set the <db:code>asynchronous</db:code> property to <db:code>true</db:code> for the relevant <db:link xlink:href="qqmlimageproviderbase.xml#ImageType-enum">Image</db:link> or <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> object. When this is enabled, the image request to the provider is run in a low priority thread, allowing image loading to be executed in the background, and reducing the performance impact on the user interface.</db:para>
<db:para>To force asynchronous image loading, even for image sources that do not have the <db:code>asynchronous</db:code> property set to <db:code>true</db:code>, you may pass the <db:code>QQmlImageProviderBase::ForceAsynchronousImageLoading</db:code> flag to the image provider constructor. This ensures that all image requests for the provider are handled in a separate thread.</db:para>
<db:para>Asynchronous loading for image providers that provide <db:link xlink:href="qpixmap.xml">QPixmap</db:link> is only supported in platforms that have the ThreadedPixmaps feature, in platforms where pixmaps can only be created in the main thread (i.e. ThreadedPixmaps is not supported) if <db:link xlink:href="qml-qtquick-image.xml#asynchronous-prop">asynchronous</db:link> is set to <db:code>true</db:code>, the value is ignored and the image is loaded synchronously.</db:para>
<db:para>Asynchronous image loading for providers of type other than ImageResponse are executed on a single thread per engine basis. That means that a slow image provider will block the loading of any other request. To avoid that we suggest using <db:link xlink:href="qquickasyncimageprovider.xml">QQuickAsyncImageProvider</db:link> and implement threading on the provider side via a <db:code>QThreadPool</db:code> or similar. See the <db:link xlink:href="qtquick-imageresponseprovider-example.xml">Image Response Provider Example</db:link> for a complete implementation.</db:para>
</db:section>
<db:section xml:id="image-caching">
<db:title>Image Caching</db:title>
<db:para>Images returned by a <db:link xlink:href="qquickimageprovider.xml">QQuickImageProvider</db:link> are automatically cached, similar to any image loaded by the QML engine. When an image with a &quot;image://&quot; prefix is loaded from cache, <db:link xlink:href="qquickimageprovider.xml#requestImage">requestImage</db:link>() and <db:link xlink:href="qquickimageprovider.xml#requestPixmap">requestPixmap</db:link>() will not be called for the relevant image provider. If an image should always be fetched from the image provider, and should not be cached at all, set the <db:code>cache</db:code> property to <db:code>false</db:code> for the relevant <db:link xlink:href="qqmlimageproviderbase.xml#ImageType-enum">Image</db:link> or <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> object.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlengine.xml#addImageProvider">QQmlEngine::addImageProvider</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickImageProvider">
<db:title>QQuickImageProvider::QQuickImageProvider(QQmlImageProviderBase::ImageType <db:emphasis>type</db:emphasis>, QQmlImageProviderBase::Flags <db:emphasis>flags</db:emphasis> = Flags())</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickImageProvider</db:methodname>
<db:methodparam>
<db:type>QQmlImageProviderBase::ImageType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlImageProviderBase::Flags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Flags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickImageProvider(QQmlImageProviderBase::ImageType type, QQmlImageProviderBase::Flags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an image provider that will provide images of the given <db:code role="parameter">type</db:code> and behave according to the given <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickImageProvider">
<db:title>[override virtual] QQuickImageProvider::~QQuickImageProvider()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQuickImageProvider</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickImageProvider() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qquickimageprovider.xml">QQuickImageProvider</db:link></db:para>
<db:note>
<db:para>The destructor of your derived class need to be thread safe.</db:para>
</db:note>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] QQmlImageProviderBase::Flags QQuickImageProvider::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QQmlImageProviderBase::Flags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlImageProviderBase::Flags flags() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qqmlimageproviderbase.xml#flags" role="function">QQmlImageProviderBase::flags() const</db:link>.</db:para>
<db:para>Returns the flags set for this provider.</db:para>
</db:section>
<db:section xml:id="imageType">
<db:title>[override virtual] QQmlImageProviderBase::ImageType QQuickImageProvider::imageType() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QQmlImageProviderBase::ImageType</db:type>
<db:methodname>imageType</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlImageProviderBase::ImageType imageType() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qqmlimageproviderbase.xml#imageType" role="function">QQmlImageProviderBase::imageType() const</db:link>.</db:para>
<db:para>Returns the image type supported by this provider.</db:para>
</db:section>
<db:section xml:id="requestImage">
<db:title>[virtual] QImage QQuickImageProvider::requestImage(const QString &amp;<db:emphasis>id</db:emphasis>, QSize *<db:emphasis>size</db:emphasis>, const QSize &amp;<db:emphasis>requestedSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QImage</db:type>
<db:methodname>requestImage</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSize *</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>requestedSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage requestImage(const QString &amp;id, QSize *size, const QSize &amp;requestedSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implement this method to return the image with <db:code role="parameter">id</db:code>. The default implementation returns an empty image.</db:para>
<db:para>The <db:code role="parameter">id</db:code> is the requested image source, with the &quot;image:&quot; scheme and provider identifier removed. For example, if the image <db:link xlink:href="qml-qtquick-image.xml#source-prop">source</db:link> was &quot;image://myprovider/icons/home&quot;, the given <db:code role="parameter">id</db:code> would be &quot;icons/home&quot;.</db:para>
<db:para>The <db:code role="parameter">requestedSize</db:code> corresponds to the <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link> requested by an Image item. If <db:code role="parameter">requestedSize</db:code> is a valid size, the image returned should be of that size.</db:para>
<db:para>In all cases, <db:code role="parameter">size</db:code> must be set to the original size of the image. This is used to set the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> of the relevant <db:link xlink:href="qqmlimageproviderbase.xml#ImageType-enum">Image</db:link> if these values have not been set explicitly.</db:para>
<db:note>
<db:para>this method may be called by multiple threads, so ensure the implementation of this method is reentrant.</db:para>
</db:note>
</db:section>
<db:section xml:id="requestPixmap">
<db:title>[virtual] QPixmap QQuickImageProvider::requestPixmap(const QString &amp;<db:emphasis>id</db:emphasis>, QSize *<db:emphasis>size</db:emphasis>, const QSize &amp;<db:emphasis>requestedSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>requestPixmap</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSize *</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>requestedSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap requestPixmap(const QString &amp;id, QSize *size, const QSize &amp;requestedSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implement this method to return the pixmap with <db:code role="parameter">id</db:code>. The default implementation returns an empty pixmap.</db:para>
<db:para>The <db:code role="parameter">id</db:code> is the requested image source, with the &quot;image:&quot; scheme and provider identifier removed. For example, if the image <db:link xlink:href="qml-qtquick-image.xml#source-prop">source</db:link> was &quot;image://myprovider/icons/home&quot;, the given <db:code role="parameter">id</db:code> would be &quot;icons/home&quot;.</db:para>
<db:para>The <db:code role="parameter">requestedSize</db:code> corresponds to the <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link> requested by an Image item. If <db:code role="parameter">requestedSize</db:code> is a valid size, the image returned should be of that size.</db:para>
<db:para>In all cases, <db:code role="parameter">size</db:code> must be set to the original size of the image. This is used to set the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> of the relevant <db:link xlink:href="qqmlimageproviderbase.xml#ImageType-enum">Image</db:link> if these values have not been set explicitly.</db:para>
<db:note>
<db:para>this method may be called by multiple threads, so ensure the implementation of this method is reentrant.</db:para>
</db:note>
</db:section>
<db:section xml:id="requestTexture">
<db:title>[virtual] QQuickTextureFactory *QQuickImageProvider::requestTexture(const QString &amp;<db:emphasis>id</db:emphasis>, QSize *<db:emphasis>size</db:emphasis>, const QSize &amp;<db:emphasis>requestedSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QQuickTextureFactory *</db:type>
<db:methodname>requestTexture</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSize *</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>requestedSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickTextureFactory * requestTexture(const QString &amp;id, QSize *size, const QSize &amp;requestedSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implement this method to return the texture with <db:code role="parameter">id</db:code>. The default implementation returns <db:code>nullptr</db:code>.</db:para>
<db:para>The <db:code role="parameter">id</db:code> is the requested image source, with the &quot;image:&quot; scheme and provider identifier removed. For example, if the image <db:link xlink:href="qml-qtquick-image.xml#source-prop">source</db:link> was &quot;image://myprovider/icons/home&quot;, the given <db:code role="parameter">id</db:code> would be &quot;icons/home&quot;.</db:para>
<db:para>The <db:code role="parameter">requestedSize</db:code> corresponds to the <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link> requested by an Image item. If <db:code role="parameter">requestedSize</db:code> is a valid size, the image returned should be of that size.</db:para>
<db:para>In all cases, <db:code role="parameter">size</db:code> must be set to the original size of the image. This is used to set the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> of the relevant <db:link xlink:href="qqmlimageproviderbase.xml#ImageType-enum">Image</db:link> if these values have not been set explicitly.</db:para>
<db:note>
<db:para>this method may be called by multiple threads, so ensure the implementation of this method is reentrant.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
