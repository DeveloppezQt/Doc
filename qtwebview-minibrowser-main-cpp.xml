<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt WebView Examples - Minibrowser</db:title>
<db:productname>QtWebView</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebView Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Minibrowser example demonstrates how to use the Qt <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> module with Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtCore/QUrl&gt;
#include &lt;QtCore/QCommandLineOption&gt;
#include &lt;QtCore/QCommandLineParser&gt;
#include &lt;QGuiApplication&gt;
#include &lt;QStyleHints&gt;
#include &lt;QScreen&gt;
#include &lt;QQmlApplicationEngine&gt;
#include &lt;QtQml/QQmlContext&gt;
#include &lt;QtWebView/QtWebView&gt;

// Workaround: As of Qt 5.4 QtQuick does not expose QUrl::fromUserInput.
class Utils : public QObject {
    Q_OBJECT
public:
    Utils(QObject* parent = 0) : QObject(parent) { }
    Q_INVOKABLE static QUrl fromUserInput(const QString&amp; userInput);
};

QUrl Utils::fromUserInput(const QString&amp; userInput)
{
    if (userInput.isEmpty())
        return QUrl::fromUserInput(&quot;about:blank&quot;);
    const QUrl result = QUrl::fromUserInput(userInput);
    return result.isValid() ? result : QUrl::fromUserInput(&quot;about:blank&quot;);
}

#include &quot;main.moc&quot;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);
    QtWebView::initialize();
    QGuiApplication::setApplicationDisplayName(QCoreApplication::translate(&quot;main&quot;,
                                                                           &quot;QtWebView Example&quot;));
    QCommandLineParser parser;
    QCoreApplication::setApplicationVersion(QT_VERSION_STR);
    parser.setApplicationDescription(QGuiApplication::applicationDisplayName());
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addPositionalArgument(&quot;url&quot;, &quot;The initial URL to open.&quot;);
    QStringList arguments = app.arguments();
#ifdef Q_OS_WINRT
    arguments.removeAt(1); // The launcher always passes in the -ServerName parameter, breaking the command line parser
#endif
    parser.process(arguments);
    const QString initialUrl = parser.positionalArguments().isEmpty() ?
        QStringLiteral(&quot;qt.io&quot;) : parser.positionalArguments().first();

    QQmlApplicationEngine engine;
    QQmlContext *context = engine.rootContext();
    context-&gt;setContextProperty(QStringLiteral(&quot;utils&quot;), new Utils(&amp;engine));
    context-&gt;setContextProperty(QStringLiteral(&quot;initialUrl&quot;),
                                Utils::fromUserInput(initialUrl));
    QRect geometry = QGuiApplication::primaryScreen()-&gt;availableGeometry();
    if (!QGuiApplication::styleHints()-&gt;showIsFullScreen()) {
        const QSize size = geometry.size() * 4 / 5;
        const QSize offset = (geometry.size() - size) / 2;
        const QPoint pos = geometry.topLeft() + QPoint(offset.width(), offset.height());
        geometry = QRect(pos, size);
    }
    context-&gt;setContextProperty(QStringLiteral(&quot;initialX&quot;), geometry.x());
    context-&gt;setContextProperty(QStringLiteral(&quot;initialY&quot;), geometry.y());
    context-&gt;setContextProperty(QStringLiteral(&quot;initialWidth&quot;), geometry.width());
    context-&gt;setContextProperty(QStringLiteral(&quot;initialHeight&quot;), geometry.height());

    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));
    if (engine.rootObjects().isEmpty())
        return -1;

    return app.exec();
}

</db:programlisting>
</db:article>
