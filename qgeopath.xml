<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoPath Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeopath.xml">QGeoPath</db:link> class defines a geographic path.</db:para>
<db:para>This class was introduced in Qt 5.9.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoPath</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Positioning)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Positioning)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgeoshape.xml" xlink:role="class">QGeoShape</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoPath is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The path is defined by an ordered list of <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> objects.</db:para>
<db:para>Each two adjacent elements in the path are intended to be connected together by the shortest line segment of constant bearing passing through both elements. This type of connection can cross the dateline in the longitudinal direction, but never crosses the poles.</db:para>
<db:para>This is relevant for the calculation of the bounding box returned by <db:link xlink:href="qgeoshape.xml#boundingGeoRectangle">QGeoShape::boundingGeoRectangle</db:link>() for this shape, which will have the latitude of the top left corner set to the maximum latitude in the path point set. Similarly, the latitude of the bottom right corner will be the minimum latitude in the path point set.</db:para>
<db:para>This class is a <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link>. It can be <db:link xlink:href="positioning-cpp-qml.xml#cpp-value-integration-positioning">directly used from C++ and QML</db:link>.</db:para>
<db:para>A <db:link xlink:href="qgeopath.xml">QGeoPath</db:link> is both invalid and empty if it contains no coordinate.</db:para>
<db:note>
<db:para>A default constructed <db:link xlink:href="qgeopath.xml">QGeoPath</db:link> is both invalid and empty as it does not contain any coordinates.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="path-prop">
<db:title>path : const QVariantList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVariantList</db:type>
<db:varname>path</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of coordinates for the geo path.</db:para>
<db:note>
<db:para>The coordinates cannot be processed in place. To change the value of this property, retrieve the complete list of coordinates, process them, and assign the new value to the property.</db:para>
</db:note>
</db:section>
<db:section xml:id="width-prop">
<db:title>width : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>width</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">width</db:synopsisinfo>
<db:synopsisinfo role="setter">setWidth</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the width of the path in meters.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>qreal</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeopath.xml#width">width</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWidth</db:emphasis>(const <db:type>qreal</db:type> &amp;<db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoPath">
<db:title>QGeoPath::QGeoPath()</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPath()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new, empty geo path.</db:para>
</db:section>
<db:section xml:id="QGeoPath-1">
<db:title>QGeoPath::QGeoPath(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>path</db:emphasis>, const qreal &amp;<db:emphasis>width</db:emphasis> = 0.0)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoPath</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoCoordinate&gt; &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const qreal &amp;</db:type>
<db:parameter>width</db:parameter>
<db:initializer>0.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPath(const QList&lt;QGeoCoordinate&gt; &amp;path, const qreal &amp;width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new geo path from a list of coordinates (<db:code role="parameter">path</db:code> and <db:code role="parameter">width</db:code>).</db:para>
</db:section>
<db:section xml:id="QGeoPath-3">
<db:title>QGeoPath::QGeoPath(const QGeoShape &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoPath</db:methodname>
<db:methodparam>
<db:type>const QGeoShape &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPath(const QGeoShape &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new geo path from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QGeoPath-2">
<db:title>QGeoPath::QGeoPath(const QGeoPath &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoPath</db:methodname>
<db:methodparam>
<db:type>const QGeoPath &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPath(const QGeoPath &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new geo path from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoPath">
<db:title>QGeoPath::~QGeoPath()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGeoPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoPath()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this path.</db:para>
</db:section>
<db:section xml:id="addCoordinate">
<db:title>void QGeoPath::addCoordinate(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addCoordinate</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addCoordinate(const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">coordinate</db:code> to the path.</db:para>
</db:section>
<db:section xml:id="clearPath">
<db:title>[since 5.12] void QGeoPath::clearPath()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearPath()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the path.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="containsCoordinate">
<db:title>bool QGeoPath::containsCoordinate(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>containsCoordinate</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool containsCoordinate(const QGeoCoordinate &amp;coordinate) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the path contains <db:code role="parameter">coordinate</db:code> as one of the elements.</db:para>
</db:section>
<db:section xml:id="coordinateAt">
<db:title>QGeoCoordinate QGeoPath::coordinateAt(qsizetype <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoCoordinate</db:type>
<db:methodname>coordinateAt</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate coordinateAt(qsizetype index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the coordinate at <db:code role="parameter">index</db:code> .</db:para>
</db:section>
<db:section xml:id="insertCoordinate">
<db:title>void QGeoPath::insertCoordinate(qsizetype <db:emphasis>index</db:emphasis>, const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertCoordinate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertCoordinate(qsizetype index, const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">coordinate</db:code> at the specified <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>double QGeoPath::length(qsizetype <db:emphasis>indexFrom</db:emphasis> = 0, qsizetype <db:emphasis>indexTo</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>length</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>indexFrom</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>indexTo</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double length(qsizetype indexFrom, qsizetype indexTo) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length of the path, in meters, from the element <db:code role="parameter">indexFrom</db:code> to the element <db:code role="parameter">indexTo</db:code>. The length is intended to be the sum of the shortest distances for each pair of adjacent points.</db:para>
<db:para>If <db:code role="parameter">indexTo</db:code> is -1 (the default value), the length will be including the distance between last coordinate and the first (closed loop). To retrieve the length for the path, use 0 for <db:code role="parameter">indexFrom</db:code> and <db:link xlink:href="qgeopath.xml#size">QGeoPath::size</db:link>() - 1 for <db:code role="parameter">indexTo</db:code>.</db:para>
</db:section>
<db:section xml:id="path">
<db:title>const QList&lt;QGeoCoordinate&gt; &amp;QGeoPath::path() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QList&lt;QGeoCoordinate&gt; &amp;</db:type>
<db:methodname>path</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QList&lt;QGeoCoordinate&gt; &amp; path() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all the elements of the path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopath.xml#setPath">setPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeCoordinate">
<db:title>void QGeoPath::removeCoordinate(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeCoordinate</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeCoordinate(const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the last occurrence of <db:code role="parameter">coordinate</db:code> from the path.</db:para>
</db:section>
<db:section xml:id="removeCoordinate-1">
<db:title>void QGeoPath::removeCoordinate(qsizetype <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeCoordinate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeCoordinate(qsizetype index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes element at position <db:code role="parameter">index</db:code> from the path.</db:para>
</db:section>
<db:section xml:id="replaceCoordinate">
<db:title>void QGeoPath::replaceCoordinate(qsizetype <db:emphasis>index</db:emphasis>, const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replaceCoordinate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void replaceCoordinate(qsizetype index, const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the path element at the specified <db:code role="parameter">index</db:code> with <db:code role="parameter">coordinate</db:code>.</db:para>
</db:section>
<db:section xml:id="setPath">
<db:title>void QGeoPath::setPath(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPath</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoCoordinate&gt; &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPath(const QList&lt;QGeoCoordinate&gt; &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets all the elements of the <db:code role="parameter">path</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopath.xml#path">path</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[since 5.10] qsizetype QGeoPath::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of elements in the path.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QGeoPath::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the geo path properties as a string.</db:para>
</db:section>
<db:section xml:id="translate">
<db:title>void QGeoPath::translate(double <db:emphasis>degreesLatitude</db:emphasis>, double <db:emphasis>degreesLongitude</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLatitude</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLongitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(double degreesLatitude, double degreesLongitude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Translates this geo path by <db:code role="parameter">degreesLatitude</db:code> northwards and <db:code role="parameter">degreesLongitude</db:code> eastwards.</db:para>
<db:para>Negative values of <db:code role="parameter">degreesLatitude</db:code> and <db:code role="parameter">degreesLongitude</db:code> correspond to southward and westward translation respectively.</db:para>
</db:section>
<db:section xml:id="translated">
<db:title>QGeoPath QGeoPath::translated(double <db:emphasis>degreesLatitude</db:emphasis>, double <db:emphasis>degreesLongitude</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoPath</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLatitude</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLongitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPath translated(double degreesLatitude, double degreesLongitude) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this geo path translated by <db:code role="parameter">degreesLatitude</db:code> northwards and <db:code role="parameter">degreesLongitude</db:code> eastwards.</db:para>
<db:para>Negative values of <db:code role="parameter">degreesLatitude</db:code> and <db:code role="parameter">degreesLongitude</db:code> correspond to southward and westward translation respectively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopath.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>qreal QGeoPath::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">width</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the path, in meters. This information is used in the <db:link xlink:href="qgeoshape.xml#contains">contains</db:link> method. The default value is 0.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeopath.xml#width-prop">width</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopath.xml#width-prop">setWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoPath &amp;QGeoPath::operator=(const QGeoPath &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGeoPath &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGeoPath &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPath &amp; operator=(const QGeoPath &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this geo path and returns a reference to this geo path.</db:para>
</db:section>
</db:section>
</db:article>
