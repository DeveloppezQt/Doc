<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCanBusDevice Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> class is the interface class for CAN bus.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCanBusDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> communicates with a CAN plugin providing users with a convenient API. The CAN plugin must be specified during the object creation.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CanBusDeviceState-enum">
<db:title>enum QCanBusDevice::CanBusDeviceState</db:title>
<db:enumsynopsis>
<db:enumname>CanBusDeviceState</db:enumname>
<db:enumitem>
<db:enumidentifier>UnconnectedState</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectingState</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectedState</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClosingState</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes all possible device states.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::UnconnectedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The device is disconnected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ConnectingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The device is being connected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ConnectedState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The device is connected to the CAN bus.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ClosingState</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The device is being closed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="CanBusError-enum">
<db:title>enum QCanBusDevice::CanBusError</db:title>
<db:enumsynopsis>
<db:enumname>CanBusError</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectionError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConfigurationError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OperationError</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TimeoutError</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes all the possible error conditions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No errors have occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ReadError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An error occurred during a read operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::WriteError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An error occurred during a write operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ConnectionError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error occurred when attempting to open the plugin.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ConfigurationError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An error occurred when attempting to set a configuration parameter.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>An unknown error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::OperationError</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>An operation was attempted while the device was in a state that did not permit it. This enum was introduced in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::TimeoutError</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>An timeout occurred while waiting for frames written or received. This enum was introduced in Qt 5.14.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="CanBusStatus-enum">
<db:title>enum QCanBusDevice::CanBusStatus</db:title>
<db:enumsynopsis>
<db:enumname>CanBusStatus</db:enumname>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Good</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Warning</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BusOff</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes possible CAN bus status values.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::<db:emphasis role="bold">CanBusStatus</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The CAN bus status is unknown (e.g. not supported by the CAN plugin).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::<db:emphasis role="bold">CanBusStatus</db:emphasis>::Good</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The CAN controller is fully operational</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::<db:emphasis role="bold">CanBusStatus</db:emphasis>::Warning</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The CAN controller is in warning status</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::<db:emphasis role="bold">CanBusStatus</db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The CAN controller is in error status (no longer sending CAN frames)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::<db:emphasis role="bold">CanBusStatus</db:emphasis>::BusOff</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The CAN controller is in bus off status (disconnected from the CAN bus)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ConfigurationKey-enum">
<db:title>enum QCanBusDevice::ConfigurationKey</db:title>
<db:enumsynopsis>
<db:enumname>ConfigurationKey</db:enumname>
<db:enumitem>
<db:enumidentifier>RawFilterKey</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ErrorFilterKey</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoopbackKey</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReceiveOwnKey</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BitRateKey</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanFdKey</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DataBitRateKey</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProtocolKey</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserKey</db:enumidentifier>
<db:enumvalue>30</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the possible configuration options for the CAN bus connection.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::RawFilterKey</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This configuration determines the type of CAN bus frames that the current device accepts. The expected value is <db:code>QList&lt;QCanBusDevice::Filter&gt;</db:code>. Passing an empty list clears all previously set filters including default filters. For more details see <db:link xlink:href="qcanbusdevice-filter.xml">QCanBusDevice::Filter</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ErrorFilterKey</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This key defines the type of error that should be forwarded via the current connection. The associated value should be of type <db:link xlink:href="qcanbusframe.xml#FrameError-enum">QCanBusFrame::FrameErrors</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::LoopbackKey</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This key defines whether the CAN bus device should operate in loopback mode. Loopback means, whenever a CAN frame is transmitted on the CAN bus, a local echo of this frame is sent to all applications connected to this CAN device. The expected value for this key is <db:code>bool</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ReceiveOwnKey</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This key defines whether this CAN device receives its own send frames. This can be used to check if the transmission was successful. The expected value for this key is <db:code>bool</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::BitRateKey</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>This key defines the CAN bitrate in bits per second. With CAN FD, the payload can be transmitted at a higher data bitrate, if <db:link xlink:href="qcanbusframe.xml#hasBitrateSwitch">QCanBusFrame::hasBitrateSwitch</db:link>() is set. In this case, <db:code>QCanBusDevice::BitRateKey</db:code> is only used for the CAN ID arbitration phase. See also <db:code>QCanBusDevice::DataBitRateKey</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::CanFdKey</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>This key defines whether sending and receiving of CAN FD frames should be enabled. The expected value for this key is <db:code>bool</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::DataBitRateKey</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>This key defines the CAN FD payload bitrate in bits per second. CAN FD allows to transmit the payload of frames with <db:link xlink:href="qcanbusframe.xml#hasBitrateSwitch">QCanBusFrame::hasBitrateSwitch</db:link>() flag at a higher data bitrate, after the arbitration phase at the nominal bitrate is finished. This enum value was introduced in Qt 5.9. See also <db:code>QCanBusDevice::BitRateKey</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ProtocolKey</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>This key allows to specify another protocol. For now, this parameter can only be set and used in the SocketCAN plugin. This enum value was introduced in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::UserKey</db:code></db:para>
</db:td>
<db:td><db:code>30</db:code></db:td>
<db:td>
<db:para>This key defines the range where custom keys start. Its most common purpose is to permit platform-specific configuration options.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#configurationParameter">configurationParameter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Direction-enum">
<db:title>enum QCanBusDevice::Direction</db:title>
<db:bridgehead renderas="sect2">flags QCanBusDevice::Directions</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Direction</db:enumname>
<db:enumitem>
<db:enumidentifier>Input</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Output</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllDirections</db:enumidentifier>
<db:enumvalue>Input | Output</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QCanBusDevice::Directions</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes possible data transmission directions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::Input</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Input direction.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::Output</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Output direction.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::AllDirections</db:code></db:para>
</db:td>
<db:td><db:code>Input | Output</db:code></db:td>
<db:td>
<db:para>Both directions, input and output.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Directions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Direction&gt;. </db:code>It stores an OR combination of <db:code>Direction</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCanBusDevice-1">
<db:title>[explicit] QCanBusDevice::QCanBusDevice(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCanBusDevice</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBusDevice(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a serial bus device with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="busStatus">
<db:title>[virtual] QCanBusDevice::CanBusStatus QCanBusDevice::busStatus()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QCanBusDevice::CanBusStatus</db:type>
<db:methodname>busStatus</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBusDevice::CanBusStatus busStatus()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current CAN bus status. If the status cannot be requested, QCanBusDevice::UnknownStatus is returned.</db:para>
<db:note>
<db:para>This function may not be implemented in all CAN plugins. Please refer to the plugins help pages for more information. The function <db:link xlink:href="qcanbusdevice.xml#hasBusStatus">hasBusStatus</db:link>() can be used at runtime to check if the used CAN plugin has support for requesting the CAN bus status.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#hasBusStatus">hasBusStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#resetController">resetController</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QCanBusDevice::clear(QCanBusDevice::Directions <db:emphasis>direction</db:emphasis> = Direction::AllDirections)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:methodparam>
<db:type>QCanBusDevice::Directions</db:type>
<db:parameter>direction</db:parameter>
<db:initializer>Direction::AllDirections</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear(QCanBusDevice::Directions direction)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the devices input or output buffers, depending on <db:code role="parameter">direction</db:code>.</db:para>
<db:para>This function only operates on <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> buffers. Frames that are already written to the CAN driver or CAN hardware layer, or that are not yet read from these layers, are not cleared by this function.</db:para>
<db:note>
<db:para>Clearing the output buffers is only possible for buffered devices.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#framesAvailable">framesAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#framesToWrite">framesToWrite</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#writeFrame">writeFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearError">
<db:title>[protected] void QCanBusDevice::clearError()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearError()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the error id and the human readable description of the last device error.</db:para>
<db:para>CAN bus implementations must use this function to update the device's error state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#errorOccurred">errorOccurred</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#setError">setError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="close">
<db:title>[pure virtual protected] void QCanBusDevice::close()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is responsible for closing the CAN bus connection. The implementation must ensure that the instance's <db:link xlink:href="qcanbusdevice.xml#state">state</db:link>() is set to <db:link xlink:href="qcanbusdevice.xml#CanBusDeviceState-enum">QCanBusDevice::UnconnectedState</db:link>.</db:para>
<db:para>This function's most important task is to close the socket to the CAN device and to call <db:link xlink:href="qcanbusdevice.xml#setState">QCanBusDevice::setState</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#disconnectDevice">disconnectDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="configurationKeys">
<db:title>QList&lt;QCanBusDevice::ConfigurationKey&gt; QCanBusDevice::configurationKeys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QCanBusDevice::ConfigurationKey&gt;</db:type>
<db:methodname>configurationKeys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QCanBusDevice::ConfigurationKey&gt; configurationKeys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of keys used by the CAN bus connection.</db:para>
<db:para>The meaning of the keys is equivalent to <db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">ConfigurationKey</db:link>. If a key is not explicitly mentioned, the platform's default setting for the relevant key is used.</db:para>
</db:section>
<db:section xml:id="configurationParameter">
<db:title>QVariant QCanBusDevice::configurationParameter(QCanBusDevice::ConfigurationKey <db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>configurationParameter</db:methodname>
<db:methodparam>
<db:type>QCanBusDevice::ConfigurationKey</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant configurationParameter(QCanBusDevice::ConfigurationKey key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current value assigned to the <db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">ConfigurationKey</db:link> <db:code role="parameter">key</db:code>; otherwise an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#setConfigurationParameter">setConfigurationParameter</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#configurationKeys">configurationKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectDevice">
<db:title>bool QCanBusDevice::connectDevice()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>connectDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool connectDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Connects the device to the CAN bus. Returns <db:code>true</db:code> on success; otherwise <db:code>false</db:code>.</db:para>
<db:para>This function calls <db:link xlink:href="qcanbusdevice.xml#open">open</db:link>() as part of its implementation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#disconnectDevice">disconnectDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dequeueOutgoingFrame">
<db:title>[protected] QCanBusFrame QCanBusDevice::dequeueOutgoingFrame()</db:title>
<db:methodsynopsis>
<db:type>QCanBusFrame</db:type>
<db:methodname>dequeueOutgoingFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBusFrame dequeueOutgoingFrame()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the next <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> from the internal list of outgoing frames; otherwise returns an invalid <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>. The returned frame is removed from the internal list.</db:para>
</db:section>
<db:section xml:id="deviceInfo">
<db:title>[virtual, since 6.2] QCanBusDeviceInfo QCanBusDevice::deviceInfo() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QCanBusDeviceInfo</db:type>
<db:methodname>deviceInfo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBusDeviceInfo deviceInfo() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qcanbusdeviceinfo.xml">QCanBusDeviceInfo</db:link> for the current <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link>. If the function is not implemented by a sub-class of <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link>, a default constructed object is returned.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="disconnectDevice">
<db:title>void QCanBusDevice::disconnectDevice()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disconnectDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnectDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disconnects the device from the CAN bus.</db:para>
<db:para>This function calls <db:link xlink:href="qcanbusdevice.xml#close">close</db:link>() as part of its implementation.</db:para>
<db:note>
<db:para>This function should only be called, if <db:link xlink:href="qcanbusdevice.xml#connectDevice">connectDevice</db:link>() returned <db:code>true</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#connectDevice">connectDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enqueueOutgoingFrame">
<db:title>[protected] void QCanBusDevice::enqueueOutgoingFrame(const QCanBusFrame &amp;<db:emphasis>newFrame</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enqueueOutgoingFrame</db:methodname>
<db:methodparam>
<db:type>const QCanBusFrame &amp;</db:type>
<db:parameter>newFrame</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void enqueueOutgoingFrame(const QCanBusFrame &amp;newFrame)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">newFrame</db:code> to the internal list of outgoing frames which can be accessed by <db:link xlink:href="qcanbusdevice.xml#writeFrame">writeFrame</db:link>().</db:para>
<db:para>Subclasses must call this function when they write a new frame.</db:para>
</db:section>
<db:section xml:id="enqueueReceivedFrames">
<db:title>[protected] void QCanBusDevice::enqueueReceivedFrames(const QList&lt;QCanBusFrame&gt; &amp;<db:emphasis>newFrames</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enqueueReceivedFrames</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QCanBusFrame&gt; &amp;</db:type>
<db:parameter>newFrames</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void enqueueReceivedFrames(const QList&lt;QCanBusFrame&gt; &amp;newFrames)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">newFrames</db:code> to the internal list of frames which can be accessed using <db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>() and emits the <db:link xlink:href="qcanbusdevice.xml#framesReceived">framesReceived</db:link>() signal.</db:para>
<db:para>Subclasses must call this function when they receive frames.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QCanBusDevice::CanBusError QCanBusDevice::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCanBusDevice::CanBusError</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBusDevice::CanBusError error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last error that has occurred. The error value is always set to last error that occurred and it is never reset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#setError">setError</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QCanBusDevice::errorOccurred(<db:emphasis>QCanBusDevice::CanBusError</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QCanBusDevice::CanBusError</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QCanBusDevice::CanBusError)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error occurs.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QCanBusDevice::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a human-readable description of the last device error that occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framesAvailable">
<db:title>qint64 QCanBusDevice::framesAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>framesAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 framesAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of available frames. If no frames are available, this function returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#readAllFrames">readAllFrames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framesReceived">
<db:title>void QCanBusDevice::framesReceived()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>framesReceived</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void framesReceived()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when one or more frames have been received. The frames should be read using <db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>() and <db:link xlink:href="qcanbusdevice.xml#framesAvailable">framesAvailable</db:link>().</db:para>
</db:section>
<db:section xml:id="framesToWrite">
<db:title>qint64 QCanBusDevice::framesToWrite() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>framesToWrite</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 framesToWrite() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>For buffered devices, this function returns the number of frames waiting to be written. For unbuffered devices, this function always returns zero.</db:para>
<db:note>
<db:para>There may be additional buffering in the CAN driver and CAN hardware layer. Therefore, if this function returns zero, that does not mean all CAN frames are already written to the CAN bus.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#writeFrame">writeFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framesWritten">
<db:title>void QCanBusDevice::framesWritten(qint64 <db:emphasis>framesCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>framesWritten</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>framesCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void framesWritten(qint64 framesCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted every time a payload of frames has been written to the CAN bus. The <db:code role="parameter">framesCount</db:code> argument is set to the number of frames that were written in this payload.</db:para>
</db:section>
<db:section xml:id="hasBusStatus">
<db:title>[virtual] bool QCanBusDevice::hasBusStatus() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasBusStatus</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasBusStatus() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return true, if the CAN plugin supports requesting the CAN bus status.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#busStatus">busStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasOutgoingFrames">
<db:title>[protected] bool QCanBusDevice::hasOutgoingFrames() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasOutgoingFrames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasOutgoingFrames() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the internal list of outgoing frames is not empty; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="interpretErrorFrame">
<db:title>[pure virtual] QString QCanBusDevice::interpretErrorFrame(const QCanBusFrame &amp;<db:emphasis>frame</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QString</db:type>
<db:methodname>interpretErrorFrame</db:methodname>
<db:methodparam>
<db:type>const QCanBusFrame &amp;</db:type>
<db:parameter>frame</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString interpretErrorFrame(const QCanBusFrame &amp;frame) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Interprets <db:code role="parameter">frame</db:code> as error frame and returns a human readable description of the error.</db:para>
<db:para>If <db:code role="parameter">frame</db:code> is not an error frame, the returned string is empty.</db:para>
</db:section>
<db:section xml:id="open">
<db:title>[pure virtual protected] bool QCanBusDevice::open()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called by <db:link xlink:href="qcanbusdevice.xml#connectDevice">connectDevice</db:link>(). Subclasses must provide an implementation which returns <db:code>true</db:code> if the CAN bus connection could be established; otherwise <db:code>false</db:code>. The <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> implementation ensures upon entry of this function that the device's <db:link xlink:href="qcanbusdevice.xml#state">state</db:link>() is set to <db:link xlink:href="qcanbusdevice.xml#CanBusDeviceState-enum">QCanBusDevice::ConnectingState</db:link> already.</db:para>
<db:para>The implementation must ensure that upon success the instance's <db:link xlink:href="qcanbusdevice.xml#state">state</db:link>() is set to <db:link xlink:href="qcanbusdevice.xml#CanBusDeviceState-enum">QCanBusDevice::ConnectedState</db:link>; otherwise <db:link xlink:href="qcanbusdevice.xml#CanBusDeviceState-enum">QCanBusDevice::UnconnectedState</db:link>. <db:link xlink:href="qcanbusdevice.xml#setState">setState</db:link>() must be used to set the new device state.</db:para>
<db:para>The custom implementation is responsible for opening the socket, instanciation of a potentially required <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link> and the application of custom and default <db:link xlink:href="qcanbusdevice.xml#configurationParameter">QCanBusDevice::configurationParameter</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#connectDevice">connectDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readAllFrames">
<db:title>QList&lt;QCanBusFrame&gt; QCanBusDevice::readAllFrames()</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QCanBusFrame&gt;</db:type>
<db:methodname>readAllFrames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QCanBusFrame&gt; readAllFrames()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>s from the queue; otherwise returns an empty <db:link xlink:href="qlist.xml">QList</db:link>. The returned frames are removed from the queue.</db:para>
<db:para>The queue operates according to the FIFO principle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#framesAvailable">framesAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readFrame">
<db:title>QCanBusFrame QCanBusDevice::readFrame()</db:title>
<db:methodsynopsis>
<db:type>QCanBusFrame</db:type>
<db:methodname>readFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBusFrame readFrame()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the next <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> from the queue; otherwise returns an empty <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>. The returned frame is removed from the queue.</db:para>
<db:para>The queue operates according to the FIFO principle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#framesAvailable">framesAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#readAllFrames">readAllFrames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetController">
<db:title>[virtual] void QCanBusDevice::resetController()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resetController</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetController()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs a CAN controller reset to release the CAN controller from bus off state, if possible.</db:para>
<db:note>
<db:para>CAN controller resets disturb the running communication and may take up to one second to complete. Only call this function to recover from bus errors.</db:para>
</db:note>
<db:note>
<db:para>This function may not be implemented in all CAN plugins. Please refer to the plugins help pages for more information.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#busStatus">busStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setConfigurationParameter">
<db:title>[virtual] void QCanBusDevice::setConfigurationParameter(QCanBusDevice::ConfigurationKey <db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setConfigurationParameter</db:methodname>
<db:methodparam>
<db:type>QCanBusDevice::ConfigurationKey</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setConfigurationParameter(QCanBusDevice::ConfigurationKey key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the configuration parameter <db:code role="parameter">key</db:code> for the CAN bus connection to <db:code role="parameter">value</db:code>. The potential keys are represented by <db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">ConfigurationKey</db:link>.</db:para>
<db:para>A parameter can be unset by setting an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>. Unsetting a parameter implies that the configuration is reset to its default setting.</db:para>
<db:note>
<db:para>In most cases, configuration changes only take effect after a reconnect.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#configurationParameter">configurationParameter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setError">
<db:title>[protected] void QCanBusDevice::setError(const QString &amp;<db:emphasis>errorText</db:emphasis>, QCanBusDevice::CanBusError <db:emphasis>errorId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setError</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorText</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCanBusDevice::CanBusError</db:type>
<db:parameter>errorId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setError(const QString &amp;errorText, QCanBusDevice::CanBusError errorId)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the human readable description of the last device error to <db:code role="parameter">errorText</db:code>. <db:code role="parameter">errorId</db:code> categorizes the type of error.</db:para>
<db:para>CAN bus implementations must use this function to update the device's error state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#errorOccurred">errorOccurred</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#clearError">clearError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setState">
<db:title>[protected] void QCanBusDevice::setState(QCanBusDevice::CanBusDeviceState <db:emphasis>newState</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setState</db:methodname>
<db:methodparam>
<db:type>QCanBusDevice::CanBusDeviceState</db:type>
<db:parameter>newState</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setState(QCanBusDevice::CanBusDeviceState newState)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the state of the device to <db:code role="parameter">newState</db:code>. CAN bus implementations must use this function to update the device state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QCanBusDevice::CanBusDeviceState QCanBusDevice::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCanBusDevice::CanBusDeviceState</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBusDevice::CanBusDeviceState state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current state of the device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#setState">setState</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QCanBusDevice::stateChanged(QCanBusDevice::CanBusDeviceState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QCanBusDevice::CanBusDeviceState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QCanBusDevice::CanBusDeviceState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted every time the state of the device changes. The new state is represented by <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#setState">setState</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForFramesReceived">
<db:title>[virtual] bool QCanBusDevice::waitForFramesReceived(int <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>waitForFramesReceived</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForFramesReceived(int msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Blocks until new frames are available for reading and the <db:link xlink:href="qcanbusdevice.xml#framesReceived">framesReceived</db:link>() signal has been emitted, or until <db:code role="parameter">msecs</db:code> milliseconds have passed. If <db:code role="parameter">msecs</db:code> is <db:code>-1</db:code>, this function will not time out.</db:para>
<db:para>Returns <db:code>true</db:code> if new frames are available for reading and the <db:link xlink:href="qcanbusdevice.xml#framesReceived">framesReceived</db:link>() signal is emitted; otherwise returns <db:code>false</db:code> (if the operation timed out or if an error occurred).</db:para>
<db:note>
<db:para>This function will start a local event loop. This may lead to scenarios whereby other application slots may be called while the execution of this function scope is blocking. To avoid problems, the signals for this class should not be connected to slots. Similarly this function must never be called in response to the <db:link xlink:href="qcanbusdevice.xml#framesReceived">framesReceived</db:link>() or <db:link xlink:href="qcanbusdevice.xml#errorOccurred">errorOccurred</db:link>() signals.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#waitForFramesWritten">waitForFramesWritten</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForFramesWritten">
<db:title>[virtual] bool QCanBusDevice::waitForFramesWritten(int <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>waitForFramesWritten</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForFramesWritten(int msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>For buffered devices, this function waits until all buffered frames have been written to the device and the <db:link xlink:href="qcanbusdevice.xml#framesWritten">framesWritten</db:link>() signal has been emitted, or until <db:code role="parameter">msecs</db:code> milliseconds have passed. If <db:code role="parameter">msecs</db:code> is -1, this function will not time out. For unbuffered devices, it returns immediately with <db:code>false</db:code> as <db:link xlink:href="qcanbusdevice.xml#writeFrame">writeFrame</db:link>() does not require a write buffer.</db:para>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qcanbusdevice.xml#framesWritten">framesWritten</db:link>() signal is emitted; otherwise returns <db:code>false</db:code> (i.e. if the operation timed out, or if an error occurred).</db:para>
<db:note>
<db:para>This function will start a local event loop. This may lead to scenarios whereby other application slots may be called while the execution of this function scope is blocking. To avoid problems, the signals for this class should not be connected to slots. Similarly this function must never be called in response to the <db:link xlink:href="qcanbusdevice.xml#framesWritten">framesWritten</db:link>() or <db:link xlink:href="qcanbusdevice.xml#errorOccurred">errorOccurred</db:link>() signals.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#waitForFramesReceived">waitForFramesReceived</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeFrame">
<db:title>[pure virtual] bool QCanBusDevice::writeFrame(const QCanBusFrame &amp;<db:emphasis>frame</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>writeFrame</db:methodname>
<db:methodparam>
<db:type>const QCanBusFrame &amp;</db:type>
<db:parameter>frame</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool writeFrame(const QCanBusFrame &amp;frame) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">frame</db:code> to the CAN bus and returns <db:code>true</db:code> on success; otherwise <db:code>false</db:code>.</db:para>
<db:para>On some platforms, the frame may be put into a queue and the return value may only indicate a successful insertion into the queue. The actual frame will be send later on. Therefore the <db:link xlink:href="qcanbusdevice.xml#framesWritten">framesWritten</db:link>() signal is the final confirmation that the frame has been handed off to the transport layer. If an error occurs the <db:link xlink:href="qcanbusdevice.xml#errorOccurred">errorOccurred</db:link>() is emitted.</db:para>
<db:para>As per CAN bus specification, frames of type <db:link xlink:href="qcanbusframe.xml#FrameType-enum">remote transfer request (RTR)</db:link> do not have a payload, but a length from 0 to 8 (including). This length indicates the expected response payload length from the remote party. Therefore when sending a RTR frame using this function it may still be required to set an arbitrary payload on <db:code role="parameter">frame</db:code>. The length of the arbitrary payload is what is set as size expectation for the RTR frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#setPayload">QCanBusFrame::setPayload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
