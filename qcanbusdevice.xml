<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCanBusDevice Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> class is the interface class for CAN bus.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCanBusDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> communicates with a CAN backend providing users with a convenient API. The CAN backend must be specified during the object creation.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CanBusDeviceState-enum">
<db:title>enum QCanBusDevice::CanBusDeviceState</db:title>
<db:para>This enum describes all possible device states.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::UnconnectedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The device is disconnected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ConnectingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The device is being connected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ConnectedState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The device is connected to the CAN bus.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ClosingState</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The device is being closed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="CanBusError-enum">
<db:title>enum QCanBusDevice::CanBusError</db:title>
<db:para>This enum describes all the possible error conditions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No errors have occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ReadError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An error occurred during a read operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::WriteError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An error occurred during a write operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ConnectionError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error occurred when attempting to open the backend.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ConfigurationError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An error occurred when attempting to set a configuration parameter.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>An unknown error occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ConfigurationKey-enum">
<db:title>enum QCanBusDevice::ConfigurationKey</db:title>
<db:para>This enum describes the possible configuration options for the CAN bus connection.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::RawFilterKey</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This configuration determines the type of CAN bus frames that the current device accepts. The expected value is <db:code>QList&lt;QCanBusDevice::Filter&gt;</db:code>. Passing an empty list clears all previously set filters including default filters. For more details see <db:link xlink:href="qcanbusdevice-filter.xml">QCanBusDevice::Filter</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ErrorFilterKey</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This key defines the type of error that should be forwarded via the current connection. The associated value should be of type <db:link xlink:href="qcanbusframe.xml#FrameError-enum">QCanBusFrame::FrameErrors</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::LoopbackKey</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This key defines whether the CAN bus device should operate in loopback mode. The expected value for this key is <db:code>bool</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::ReceiveOwnKey</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This key defines whether this CAN device can send messages. The expected value for this key is <db:code>bool</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::BitRateKey</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>This key defines the bitrate in bits per second.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::CanFdKey</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>This key defines whether sending and receiving of CAN FD frames should be enabled. The expected value for this key is <db:code>bool</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::UserKey</db:code></db:para>
</db:td>
<db:td><db:code>30</db:code></db:td>
<db:td>
<db:para>This key defines the range where custom keys start. It's most common purpose is to permit platform-specific configuration options.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#configurationParameter">configurationParameter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCanBusDevice">
<db:title>[explicit] QCanBusDevice::QCanBusDevice(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a serial bus device with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="close">
<db:title>[pure virtual protected] void QCanBusDevice::close()</db:title>
<db:para>This function is responsible for closing the CAN bus connection. The implementation must ensure that the instance's <db:link xlink:href="qcanbusdevice.xml#state">state</db:link>() is set to <db:link xlink:href="qcanbusdevice.xml#CanBusDeviceState-enum">QCanBusDevice::UnconnectedState</db:link>.</db:para>
<db:para>This function's most important task is to close the socket to the CAN device and to call <db:link xlink:href="qcanbusdevice.xml#setState">QCanBusDevice::setState</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#disconnectDevice">disconnectDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="configurationKeys">
<db:title>QVector&lt;int&gt; QCanBusDevice::configurationKeys() const</db:title>
<db:para>Returns the list of keys used by the CAN bus connection.</db:para>
<db:para>The the meaning of the keys is equivalent to <db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">ConfigurationKey</db:link>. If a key is not explicitly mentioned the platform's default setting for the relevant key is used.</db:para>
</db:section>
<db:section xml:id="configurationParameter">
<db:title>QVariant QCanBusDevice::configurationParameter(int <db:emphasis>key</db:emphasis>) const</db:title>
<db:para>Returns the current value assigned to the <db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">ConfigurationKey</db:link> <db:code role="parameter">key</db:code>; otherwise an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#setConfigurationParameter">setConfigurationParameter</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#configurationKeys">configurationKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectDevice">
<db:title>bool QCanBusDevice::connectDevice()</db:title>
<db:para>Connects the device to the CAN bus. Returns <db:code>true</db:code> on success; otherwise <db:code>false</db:code>.</db:para>
<db:para>This function calls <db:link xlink:href="qcanbusdevice.xml#open">open</db:link>() as part of its implementation.</db:para>
</db:section>
<db:section xml:id="dequeueOutgoingFrame">
<db:title>[protected] QCanBusFrame QCanBusDevice::dequeueOutgoingFrame()</db:title>
<db:para>Returns the next <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> from the internal list of outgoing frames; otherwise returns an invalid <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>. The returned frame is removed from the internal list.</db:para>
</db:section>
<db:section xml:id="disconnectDevice">
<db:title>void QCanBusDevice::disconnectDevice()</db:title>
<db:para>Disconnects the device from the CAN bus.</db:para>
<db:para>This function calls <db:link xlink:href="qcanbusdevice.xml#close">close</db:link>() as part of its implementation.</db:para>
</db:section>
<db:section xml:id="enqueueOutgoingFrame">
<db:title>[protected] void QCanBusDevice::enqueueOutgoingFrame(const QCanBusFrame &amp;<db:emphasis>newFrame</db:emphasis>)</db:title>
<db:para>Appends <db:code role="parameter">newFrame</db:code> to the internal list of outgoing frames which can be accessed by <db:link xlink:href="qcanbusdevice.xml#writeFrame">writeFrame</db:link>().</db:para>
<db:para>Subclasses must call this function when they write a new frame.</db:para>
</db:section>
<db:section xml:id="enqueueReceivedFrames">
<db:title>[protected] void QCanBusDevice::enqueueReceivedFrames(const QVector&lt;QCanBusFrame&gt; &amp;<db:emphasis>newFrames</db:emphasis>)</db:title>
<db:para>Appends <db:code role="parameter">newFrames</db:code> to the internal list of frames which can be accessed using <db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>() and emits the <db:link xlink:href="qcanbusdevice.xml#framesReceived">framesReceived</db:link>() signal.</db:para>
<db:para>Subclasses must call this function when they receive frames.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QCanBusDevice::CanBusError QCanBusDevice::error() const</db:title>
<db:para>Returns the last error that has occurred. The error value is always set to last error that occurred and it is never reset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#setError">setError</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QCanBusDevice::errorOccurred(QCanBusDevice::CanBusError <db:emphasis>error</db:emphasis>)</db:title>
<db:para>This signal is emitted when an error of the type <db:code role="parameter">error</db:code> occurs.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QCanBusDevice::errorString() const</db:title>
<db:para>Returns a human-readable description of the last device error that occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framesAvailable">
<db:title>qint64 QCanBusDevice::framesAvailable() const</db:title>
<db:para>Returns the number of available frames. If no frames are available, this function returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framesReceived">
<db:title>void QCanBusDevice::framesReceived()</db:title>
<db:para>This signal is emitted when one or more frames have been received. The frames should be read using <db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>() and <db:link xlink:href="qcanbusdevice.xml#framesAvailable">framesAvailable</db:link>().</db:para>
</db:section>
<db:section xml:id="framesToWrite">
<db:title>qint64 QCanBusDevice::framesToWrite() const</db:title>
<db:para>Returns the number of frames waiting to be written.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#writeFrame">writeFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framesWritten">
<db:title>void QCanBusDevice::framesWritten(qint64 <db:emphasis>framesCount</db:emphasis>)</db:title>
<db:para>This signal is emitted every time a payload of frames has been written to the CAN bus. The <db:code role="parameter">framesCount</db:code> argument is set to the number of frames that were written in this payload.</db:para>
</db:section>
<db:section xml:id="hasOutgoingFrames">
<db:title>[protected] bool QCanBusDevice::hasOutgoingFrames() const</db:title>
<db:para>Returns <db:code>true</db:code> if the internal list of outgoing frames is not empty; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="open">
<db:title>[pure virtual protected] bool QCanBusDevice::open()</db:title>
<db:para>This function is called by <db:link xlink:href="qcanbusdevice.xml#connectDevice">connectDevice</db:link>(). Subclasses must provide an implementation which returns <db:code>true</db:code> if the CAN bus connection could be established; otherwise <db:code>false</db:code>. The <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> implementation ensures upon entry of this function that the device's <db:link xlink:href="qcanbusdevice.xml#state">state</db:link>() is set to <db:link xlink:href="qcanbusdevice.xml#CanBusDeviceState-enum">QCanBusDevice::ConnectingState</db:link> already.</db:para>
<db:para>The implementation must ensure that upon success the instance's <db:link xlink:href="qcanbusdevice.xml#state">state</db:link>() is set to <db:link xlink:href="qcanbusdevice.xml#CanBusDeviceState-enum">QCanBusDevice::ConnectedState</db:link>; otherwise <db:link xlink:href="qcanbusdevice.xml#CanBusDeviceState-enum">QCanBusDevice::UnconnectedState</db:link>. <db:link xlink:href="qcanbusdevice.xml#setState">setState</db:link>() must be used to set the new device state.</db:para>
<db:para>The custom implementation is responsible for opening the socket, instanciation of a potentially required <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link> and the application of custom and default <db:link xlink:href="qcanbusdevice.xml#configurationParameter">QCanBusDevice::configurationParameter</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#connectDevice">connectDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readFrame">
<db:title>QCanBusFrame QCanBusDevice::readFrame()</db:title>
<db:para>Returns the next <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> from the queue; otherwise returns an empty <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>. The returned frame is removed from the queue.</db:para>
<db:para>The queue operates according to the FIFO principle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#framesAvailable">framesAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setConfigurationParameter">
<db:title>[virtual] void QCanBusDevice::setConfigurationParameter(int <db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the configuration parameter <db:code role="parameter">key</db:code> for the CAN bus connection to <db:code role="parameter">value</db:code>. The potential keys are represented by <db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">ConfigurationKey</db:link>.</db:para>
<db:para>A parameter can be unset by setting an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>. Unsetting a parameter implies that the configuration is reset to its default setting.</db:para>
<db:note>
<db:para>In most cases, configuration changes only take effect after a reconnect.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#configurationParameter">configurationParameter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setError">
<db:title>[protected] void QCanBusDevice::setError(const QString &amp;<db:emphasis>errorText</db:emphasis>, QCanBusDevice::CanBusError <db:emphasis>errorId</db:emphasis>)</db:title>
<db:para>Sets the human readable description of the last device error to <db:code role="parameter">errorText</db:code>. <db:code role="parameter">errorId</db:code> categorizes the type of error.</db:para>
<db:para>CAN bus implementations must use this function to update the device's error state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#errorOccurred">errorOccurred</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setState">
<db:title>[protected] void QCanBusDevice::setState(QCanBusDevice::CanBusDeviceState <db:emphasis>newState</db:emphasis>)</db:title>
<db:para>Sets the state of the device to <db:code role="parameter">newState</db:code>. CAN bus implementations must use this function to update the device state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QCanBusDevice::CanBusDeviceState QCanBusDevice::state() const</db:title>
<db:para>Returns the current state of the device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#setState">setState</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QCanBusDevice::stateChanged(QCanBusDevice::CanBusDeviceState <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted every time the state of the device changes. The new state is represented by <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice.xml#setState">setState</db:link>()</db:member>
<db:member><db:link xlink:href="qcanbusdevice.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeFrame">
<db:title>[pure virtual] bool QCanBusDevice::writeFrame(const QCanBusFrame &amp;<db:emphasis>frame</db:emphasis>)</db:title>
<db:para>Writes <db:code role="parameter">frame</db:code> to the CAN bus and returns <db:code>true</db:code> on success; otherwise <db:code>false</db:code>.</db:para>
<db:para>On some platforms, the frame may be put into a queue and the return value may only indicate a successful insertion into the queue. The actual frame will be send later on. Therefore the <db:link xlink:href="qcanbusdevice.xml#framesWritten">framesWritten</db:link>() signal is the final confirmation that the frame has been handed off to the transport layer. If an error occurs the <db:link xlink:href="qcanbusdevice.xml#errorOccurred">errorOccurred</db:link>() is emitted.</db:para>
<db:para>As per CAN bus specification, frames of type <db:link xlink:href="qcanbusframe.xml#FrameType-enum">remote transfer request (RTR)</db:link> do not have a payload but require a size larger than zero. This size indicates the expected response payload length from the remote party. Therefore when sending a RTR frame using this function it may still be required to set an arbitrary payload on <db:code role="parameter">frame</db:code>. The length of the arbitrary payload is what is set as size expectation for the RTR frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#setPayload">QCanBusFrame::setPayload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
