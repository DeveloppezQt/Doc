<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Settings Editor Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Settings Editor example shows how Qt's standard settings support is used in an application by providing an editor that enables the user to view the settings for installed applications, and modify those that can be edited.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;locationdialog.h&quot;
#include &quot;mainwindow.h&quot;
#include &quot;settingstree.h&quot;

MainWindow::MainWindow()
    : settingsTree(new SettingsTree)
    , locationDialog(nullptr)
{
    setCentralWidget(settingsTree);

    createActions();

    autoRefreshAct-&amp;gt;setChecked(true);
    fallbacksAct-&amp;gt;setChecked(true);

    setWindowTitle(QCoreApplication::applicationName());
    const QRect availableGeometry = QApplication::desktop()-&amp;gt;availableGeometry(this);
    adjustSize();
    move((availableGeometry.width() - width()) / 2, (availableGeometry.height() - height()) / 2);
}

void MainWindow::openSettings()
{
    if (!locationDialog)
        locationDialog = new LocationDialog(this);

    if (locationDialog-&amp;gt;exec() != QDialog::Accepted)
        return;

    SettingsPtr settings(new QSettings(locationDialog-&amp;gt;format(),
                                       locationDialog-&amp;gt;scope(),
                                       locationDialog-&amp;gt;organization(),
                                       locationDialog-&amp;gt;application()));

    setSettingsObject(settings);
    fallbacksAct-&amp;gt;setEnabled(true);
}

void MainWindow::openIniFile()
{
    const QString directory = QStandardPaths::writableLocation(QStandardPaths::ConfigLocation);
    const QString fileName =
        QFileDialog::getOpenFileName(this, tr(&quot;Open INI File&quot;),
                                     directory, tr(&quot;INI Files (*.ini *.conf)&quot;));
    if (fileName.isEmpty())
        return;

    SettingsPtr settings(new QSettings(fileName, QSettings::IniFormat));

    setSettingsObject(settings);
    fallbacksAct-&amp;gt;setEnabled(false);
}

void MainWindow::openPropertyList()
{
    const QString directory = QStandardPaths::writableLocation(QStandardPaths::ConfigLocation);
    const QString fileName =
        QFileDialog::getOpenFileName(this, tr(&quot;Open Property List&quot;),
                                     directory, tr(&quot;Property List Files (*.plist)&quot;));
    if (fileName.isEmpty())
        return;

    SettingsPtr settings(new QSettings(fileName, QSettings::NativeFormat));
    setSettingsObject(settings);
    fallbacksAct-&amp;gt;setEnabled(false);
}

void MainWindow::openRegistryPath()
{
    const QString path =
        QInputDialog::getText(this, tr(&quot;Open Registry Path&quot;),
                              tr(&quot;Enter the path in the Windows registry:&quot;),
                              QLineEdit::Normal, &quot;HKEY_CURRENT_USER\\&quot;);
    if (path.isEmpty())
        return;

    SettingsPtr settings(new QSettings(path, QSettings::NativeFormat));

    setSettingsObject(settings);
    fallbacksAct-&amp;gt;setEnabled(false);
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Settings Editor&quot;),
            tr(&quot;The &amp;lt;b&amp;gt;Settings Editor&amp;lt;/b&amp;gt; example shows how to access &quot;
               &quot;application settings using Qt.&quot;));
}

void MainWindow::createActions()
{
    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));

    QAction *openSettingsAct = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Open Application Settings...&quot;), this, &amp;amp;MainWindow::openSettings);
    openSettingsAct-&amp;gt;setShortcuts(QKeySequence::Open);

    QAction *openIniFileAct = fileMenu-&amp;gt;addAction(tr(&quot;Open I&amp;amp;NI File...&quot;), this, &amp;amp;MainWindow::openIniFile);
    openIniFileAct-&amp;gt;setShortcut(tr(&quot;Ctrl+N&quot;));

#ifdef Q_OS_OSX
    QAction *openPropertyListAct = fileMenu-&amp;gt;addAction(tr(&quot;Open Apple &amp;amp;Property List...&quot;), this, &amp;amp;MainWindow::openPropertyList);
    openPropertyListAct-&amp;gt;setShortcut(tr(&quot;Ctrl+P&quot;));
#endif // Q_OS_OSX

#ifdef Q_OS_WIN
    QAction *openRegistryPathAct = fileMenu-&amp;gt;addAction(tr(&quot;Open Windows &amp;amp;Registry Path...&quot;), this, &amp;amp;MainWindow::openRegistryPath);
    openRegistryPathAct-&amp;gt;setShortcut(tr(&quot;Ctrl+G&quot;));
#endif // Q_OS_WIN

    fileMenu-&amp;gt;addSeparator();

    refreshAct = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Refresh&quot;), settingsTree, &amp;amp;SettingsTree::refresh);
    refreshAct-&amp;gt;setShortcut(tr(&quot;Ctrl+R&quot;));
    refreshAct-&amp;gt;setEnabled(false);

    fileMenu-&amp;gt;addSeparator();

    QAction *exitAct = fileMenu-&amp;gt;addAction(tr(&quot;E&amp;amp;xit&quot;), this, &amp;amp;QWidget::close);
    exitAct-&amp;gt;setShortcuts(QKeySequence::Quit);

    QMenu *optionsMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Options&quot;));

    autoRefreshAct = optionsMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Auto-Refresh&quot;));
    autoRefreshAct-&amp;gt;setShortcut(tr(&quot;Ctrl+A&quot;));
    autoRefreshAct-&amp;gt;setCheckable(true);
    autoRefreshAct-&amp;gt;setEnabled(false);
    connect(autoRefreshAct, &amp;amp;QAction::triggered,
            settingsTree, &amp;amp;SettingsTree::setAutoRefresh);
    connect(autoRefreshAct, &amp;amp;QAction::triggered,
            refreshAct, &amp;amp;QAction::setDisabled);

    fallbacksAct = optionsMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Fallbacks&quot;));
    fallbacksAct-&amp;gt;setShortcut(tr(&quot;Ctrl+F&quot;));
    fallbacksAct-&amp;gt;setCheckable(true);
    fallbacksAct-&amp;gt;setEnabled(false);
    connect(fallbacksAct, &amp;amp;QAction::triggered,
            settingsTree, &amp;amp;SettingsTree::setFallbacksEnabled);

    QMenu *helpMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Help&quot;));
    helpMenu-&amp;gt;addAction(tr(&quot;&amp;amp;About&quot;), this, &amp;amp;MainWindow::about);
    helpMenu-&amp;gt;addAction(tr(&quot;About &amp;amp;Qt&quot;), qApp, &amp;amp;QCoreApplication::quit);
}

void MainWindow::setSettingsObject(const SettingsPtr &amp;amp;settings)
{
    settings-&amp;gt;setFallbacksEnabled(fallbacksAct-&amp;gt;isChecked());
    settingsTree-&amp;gt;setSettingsObject(settings);

    refreshAct-&amp;gt;setEnabled(true);
    autoRefreshAct-&amp;gt;setEnabled(true);

    QString niceName = QDir::cleanPath(settings-&amp;gt;fileName());
    int pos = niceName.lastIndexOf(QLatin1Char('/'));
    if (pos != -1)
        niceName.remove(0, pos + 1);

    if (!settings-&amp;gt;isWritable())
        niceName = tr(&quot;%1 (read only)&quot;).arg(niceName);

    setWindowTitle(tr(&quot;%1 - %2&quot;).arg(niceName, QCoreApplication::applicationName()));
    statusBar()-&amp;gt;showMessage(tr(&quot;Opened \&quot;%1\&quot;&quot;).arg(QDir::toNativeSeparators(settings-&amp;gt;fileName())));
}

</db:programlisting>
</db:article>
