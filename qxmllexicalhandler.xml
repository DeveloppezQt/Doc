<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QXmlLexicalHandler Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmllexicalhandler.xml">QXmlLexicalHandler</db:link> class provides an interface to report the lexical content of XML data.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlLexicalHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qxmldefaulthandler.xml" xlink:role="class">QXmlDefaultHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlLexicalHandler is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The events in the lexical handler apply to the entire document, not just to the document element, and all lexical handler events appear between the content handler's startDocument and endDocument events.</db:para>
<db:para>You can set the lexical handler with <db:link xlink:href="qxmlreader.xml#setLexicalHandler">QXmlReader::setLexicalHandler</db:link>().</db:para>
<db:para>This interface's design is based on the SAX2 extension LexicalHandler.</db:para>
<db:para>The interface provides the <db:link xlink:href="qxmllexicalhandler.xml#startDTD">startDTD</db:link>(), <db:link xlink:href="qxmllexicalhandler.xml#endDTD">endDTD</db:link>(), <db:link xlink:href="qxmllexicalhandler.xml#startEntity">startEntity</db:link>(), <db:link xlink:href="qxmllexicalhandler.xml#endEntity">endEntity</db:link>(), <db:link xlink:href="qxmllexicalhandler.xml#startCDATA">startCDATA</db:link>(), <db:link xlink:href="qxmllexicalhandler.xml#endCDATA">endCDATA</db:link>() and <db:link xlink:href="qxmllexicalhandler.xml#comment">comment</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmldtdhandler.xml">QXmlDTDHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmldeclhandler.xml">QXmlDeclHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmlcontenthandler.xml">QXmlContentHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmlentityresolver.xml">QXmlEntityResolver</db:link></db:member>
<db:member><db:link xlink:href="qxmlerrorhandler.xml">QXmlErrorHandler</db:link></db:member>
<db:member><db:link xlink:href="xml-sax.xml#introduction-to-sax2">Introduction to SAX2</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QXmlLexicalHandler">
<db:title>[virtual noexcept] QXmlLexicalHandler::~QXmlLexicalHandler()</db:title>
<db:para>Destroys the lexical handler.</db:para>
</db:section>
<db:section xml:id="comment">
<db:title>[pure virtual] bool QXmlLexicalHandler::comment(const QString &amp;<db:emphasis>ch</db:emphasis>)</db:title>
<db:para>The reader calls this function to report an XML comment anywhere in the document. It reports the text of the comment in <db:code role="parameter">ch</db:code>.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmllexicalhandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
</db:section>
<db:section xml:id="endCDATA">
<db:title>[pure virtual] bool QXmlLexicalHandler::endCDATA()</db:title>
<db:para>The reader calls this function to report the end of a CDATA section.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmllexicalhandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmllexicalhandler.xml#startCDATA">startCDATA</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlcontenthandler.xml#characters">QXmlContentHandler::characters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endDTD">
<db:title>[pure virtual] bool QXmlLexicalHandler::endDTD()</db:title>
<db:para>The reader calls this function to report the end of a DTD declaration, if any.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmllexicalhandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmllexicalhandler.xml#startDTD">startDTD</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endEntity">
<db:title>[pure virtual] bool QXmlLexicalHandler::endEntity(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>The reader calls this function to report the end of an entity called <db:code role="parameter">name</db:code>.</db:para>
<db:para>For every <db:link xlink:href="qxmllexicalhandler.xml#startEntity">startEntity</db:link>() call, there is a corresponding endEntity() call. The calls to <db:link xlink:href="qxmllexicalhandler.xml#startEntity">startEntity</db:link>() and endEntity() are properly nested.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmllexicalhandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmllexicalhandler.xml#startEntity">startEntity</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlcontenthandler.xml#skippedEntity">QXmlContentHandler::skippedEntity</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlsimplereader.xml#setFeature">QXmlSimpleReader::setFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>[pure virtual] QString QXmlLexicalHandler::errorString() const</db:title>
<db:para>The reader calls this function to get an error string if any of the handler functions returns false.</db:para>
</db:section>
<db:section xml:id="startCDATA">
<db:title>[pure virtual] bool QXmlLexicalHandler::startCDATA()</db:title>
<db:para>The reader calls this function to report the start of a CDATA section. The content of the CDATA section is reported through the <db:link xlink:href="qxmlcontenthandler.xml#characters">QXmlContentHandler::characters</db:link>() function. This function is intended only to report the boundary.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmllexicalhandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmllexicalhandler.xml#endCDATA">endCDATA</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDTD">
<db:title>[pure virtual] bool QXmlLexicalHandler::startDTD(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>publicId</db:emphasis>, const QString &amp;<db:emphasis>systemId</db:emphasis>)</db:title>
<db:para>The reader calls this function to report the start of a DTD declaration, if any. It reports the name of the document type in <db:code role="parameter">name</db:code>, the public identifier in <db:code role="parameter">publicId</db:code> and the system identifier in <db:code role="parameter">systemId</db:code>.</db:para>
<db:para>If the public identifier is missing, <db:code role="parameter">publicId</db:code> is set to an empty string. If the system identifier is missing, <db:code role="parameter">systemId</db:code> is set to an empty string. Note that it is not valid XML to have a public identifier but no system identifier; in such cases a parse error will occur.</db:para>
<db:para>All declarations reported through <db:link xlink:href="qxmldtdhandler.xml">QXmlDTDHandler</db:link> or <db:link xlink:href="qxmldeclhandler.xml">QXmlDeclHandler</db:link> appear between the startDTD() and <db:link xlink:href="qxmllexicalhandler.xml#endDTD">endDTD</db:link>() calls.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmllexicalhandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmllexicalhandler.xml#endDTD">endDTD</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startEntity">
<db:title>[pure virtual] bool QXmlLexicalHandler::startEntity(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>The reader calls this function to report the start of an entity called <db:code role="parameter">name</db:code>.</db:para>
<db:para>Note that if the entity is unknown, the reader reports it through <db:link xlink:href="qxmlcontenthandler.xml#skippedEntity">QXmlContentHandler::skippedEntity</db:link>() and not through this function.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmllexicalhandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmllexicalhandler.xml#endEntity">endEntity</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlsimplereader.xml#setFeature">QXmlSimpleReader::setFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
