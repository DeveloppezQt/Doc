<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Places Map (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Places Map example demonstrates how to search for and display a list of places on a map using a <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/places_map.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example displays a map of the current location or, if no position is available, it uses Oslo/Norway. Subsequently a search for places matching the term &quot;food&quot; is performed and each result shown on the map.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="local-search">
<db:title>Local Search</db:title>
<db:para>To write the QML application that will show places on a map, we start by making the following import declarations.</db:para>
<db:programlisting language="qml">import QtQuick
import QtPositioning
import QtLocation
</db:programlisting>
<db:para>Instantiate a <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> instance. The <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> is effectively the backend from where places are sourced from. Depending on the chosen plugin some manadatory parameters may be needed. In this case the <db:link xlink:href="location-plugin-osm.xml">OSM plugin</db:link> is selected which does not have any mandatory parameters.</db:para>
<db:programlisting language="qml">Plugin {
    id: myPlugin
    name: &quot;osm&quot;
    //specify plugin parameters if necessary
    //PluginParameter {...}
    //PluginParameter {...}
    //...
}
</db:programlisting>
<db:para>Next we instantiate a <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> which we can use to specify search parameters and perform a places search operation. For illustrative purposes, <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() is invoked once construction of the model is complete. Typically <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() would be invoked in response to a user action such as a button click.</db:para>
<db:programlisting language="qml">PlaceSearchModel {
    id: searchModel

    plugin: myPlugin

    searchTerm: &quot;food&quot;
    searchArea:  QtPositioning.circle(positionSource.lastSearchPosition, 1000 /* 1 km radius */)
    Component.onCompleted: update()
}
</db:programlisting>
<db:para>The map is displayed by using the <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> type and inside we declare the <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link> and supply the search model and a delegate. An inline delegate has been used and we have assumed that every search result is of <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#search-result-types">type</db:link> <db:code>PlaceSerachesult</db:code>. Consequently it is assumed that we always have access to the <db:emphasis>place</db:emphasis> <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#placesearchmodel-roles">role</db:link>, other search result types may not have a <db:emphasis>place</db:emphasis> <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#placesearchmodel-roles">role</db:link>.</db:para>
<db:programlisting language="qml">MapView {
    id: view
    anchors.fill: parent
    map.plugin: myPlugin;
    map.center: positionSource.lastSearchPosition
    map.zoomLevel: 13

    MapItemView {
        model: searchModel
        parent: view.map
        delegate: MapQuickItem {
            coordinate: place.location.coordinate

            anchorPoint.x: image.width * 0.5
            anchorPoint.y: image.height

            sourceItem: Column {
                Image { id: image; source: &quot;marker.png&quot; }
                Text { text: title; font.bold: true }
            }
        }
    }
}
</db:programlisting>
<db:para>Finally, a <db:code>PositionSource</db:code> is used to reset the map to the curent location and find &quot;food&quot; places in the new area. The position information is updated every 2 minutes and if the new position is more than 500 meters away from the last food search area the place search is retriggered.</db:para>
<db:programlisting language="qml">PositionSource {
    id: positionSource
    property variant lastSearchPosition: QtPositioning.coordinate(59.93, 10.76) //Initialized/Fallback to Oslo
    active: true
    updateInterval: 120000 // 2 mins
    onPositionChanged:  {
        var distance = lastSearchPosition.distanceTo(position.coordinate)
        if (distance &amp;gt; 500) {
            // 500m from last performed food search
            lastSearchPosition = positionSource.position.coordinate
        }
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtlocation.git/tree/examples/location/places_map?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
