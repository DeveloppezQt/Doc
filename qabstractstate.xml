<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractState Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractstate.xml">QAbstractState</db:link> class is the base class of states of a <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qfinalstate.xml" xlink:role="class">QFinalState</db:link>, <db:link xlink:href="qhistorystate.xml" xlink:role="class">QHistoryState</db:link>, and <db:link xlink:href="qstate.xml" xlink:role="class">QState</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractState is part of <db:simplelist><db:member><db:link xlink:href="statemachine.xml">State Machine Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstractstate.xml">QAbstractState</db:link> class is the abstract base class of states that are part of a <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link>. It defines the interface that all state objects have in common. <db:link xlink:href="qabstractstate.xml">QAbstractState</db:link> is part of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
<db:para>The <db:link xlink:href="qabstractstate.xml#entered">entered</db:link>() signal is emitted when the state has been entered. The <db:link xlink:href="qabstractstate.xml#exited">exited</db:link>() signal is emitted when the state has been exited.</db:para>
<db:para>The <db:link xlink:href="qabstractstate.xml#parentState">parentState</db:link>() function returns the state's parent state. The <db:link xlink:href="qabstractstate.xml#machine">machine</db:link>() function returns the state machine that the state is part of.</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>The <db:link xlink:href="qabstractstate.xml#onEntry">onEntry</db:link>() function is called when the state is entered; reimplement this function to perform custom processing when the state is entered.</db:para>
<db:para>The <db:link xlink:href="qabstractstate.xml#onExit">onExit</db:link>() function is called when the state is exited; reimplement this function to perform custom processing when the state is exited.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>[read-only, since 5.4] active : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">active</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the active property of this state. A state is active between <db:link xlink:href="qabstractstate.xml#entered">entered</db:link>() and <db:link xlink:href="qabstractstate.xml#exited">exited</db:link>() signals.</db:para>
<db:para>This property was introduced in Qt 5.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractstate.xml#active">active</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractstate.xml#activeChanged">activeChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>active</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractState">
<db:title>[protected] QAbstractState::QAbstractState(QState *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractState</db:methodname>
<db:methodparam>
<db:type>QState *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractState(QState *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new state with the given <db:code role="parameter">parent</db:code> state.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractState">
<db:title>[virtual] QAbstractState::~QAbstractState()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractState()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this state.</db:para>
</db:section>
<db:section xml:id="active">
<db:title>bool QAbstractState::active() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>active</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">active</db:synopsisinfo>
<db:synopsisinfo role="signature">bool active() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this state is active.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractstate.xml#active-prop">active</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractstate.xml#activeChanged">activeChanged</db:link>(bool)</db:member>
<db:member><db:link xlink:href="qabstractstate.xml#entered">entered</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractstate.xml#exited">exited</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeChanged">
<db:title>[since 5.4] void QAbstractState::activeChanged(bool <db:emphasis>active</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activeChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>active</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">active</db:synopsisinfo>
<db:synopsisinfo role="signature">void activeChanged(bool active)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the active property is changed with <db:code role="parameter">active</db:code> as argument.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractstate.xml#active-prop">active</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractstate.xml#active">QAbstractState::active</db:link></db:member>
<db:member><db:link xlink:href="qabstractstate.xml#entered">entered</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractstate.xml#exited">exited</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="entered">
<db:title>void QAbstractState::entered()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>entered</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void entered()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the state has been entered (after <db:link xlink:href="qabstractstate.xml#onEntry">onEntry</db:link>() has been called).</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractState::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="exited">
<db:title>void QAbstractState::exited()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>exited</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void exited()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the state has been exited (after <db:link xlink:href="qabstractstate.xml#onExit">onExit</db:link>() has been called).</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="machine">
<db:title>QStateMachine *QAbstractState::machine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStateMachine *</db:type>
<db:methodname>machine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStateMachine * machine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the state machine that this state is part of, or 0 if the state is not part of a state machine.</db:para>
</db:section>
<db:section xml:id="onEntry">
<db:title>[pure virtual protected] void QAbstractState::onEntry(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>onEntry</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void onEntry(QEvent *event) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called when the state is entered. The given <db:code role="parameter">event</db:code> is what caused the state to be entered. Reimplement this function to perform custom processing when the state is entered.</db:para>
</db:section>
<db:section xml:id="onExit">
<db:title>[pure virtual protected] void QAbstractState::onExit(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>onExit</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void onExit(QEvent *event) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called when the state is exited. The given <db:code role="parameter">event</db:code> is what caused the state to be exited. Reimplement this function to perform custom processing when the state is exited.</db:para>
</db:section>
<db:section xml:id="parentState">
<db:title>QState *QAbstractState::parentState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QState *</db:type>
<db:methodname>parentState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QState * parentState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this state's parent state, or 0 if the state has no parent state.</db:para>
</db:section>
</db:section>
</db:article>
