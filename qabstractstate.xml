<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAbstractState Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractstate.xml">QAbstractState</db:link> class is the base class of states of a <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qfinalstate.xml" xlink:role="class">QFinalState</db:link>, <db:link xlink:href="qhistorystate.xml" xlink:role="class">QHistoryState</db:link>, and <db:link xlink:href="qstate.xml" xlink:role="class">QState</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractState is part of <db:simplelist><db:member><db:link xlink:href="statemachine.xml">State Machine Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstractstate.xml">QAbstractState</db:link> class is the abstract base class of states that are part of a <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link>. It defines the interface that all state objects have in common. <db:link xlink:href="qabstractstate.xml">QAbstractState</db:link> is part of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
<db:para>The <db:link xlink:href="qabstractstate.xml#entered">entered</db:link>() signal is emitted when the state has been entered. The <db:link xlink:href="qabstractstate.xml#exited">exited</db:link>() signal is emitted when the state has been exited.</db:para>
<db:para>The <db:link xlink:href="qabstractstate.xml#parentState">parentState</db:link>() function returns the state's parent state. The <db:link xlink:href="qabstractstate.xml#machine">machine</db:link>() function returns the state machine that the state is part of.</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>The <db:link xlink:href="qabstractstate.xml#onEntry">onEntry</db:link>() function is called when the state is entered; reimplement this function to perform custom processing when the state is entered.</db:para>
<db:para>The <db:link xlink:href="qabstractstate.xml#onExit">onExit</db:link>() function is called when the state is exited; reimplement this function to perform custom processing when the state is exited.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractState">
<db:title>[protected] QAbstractState::QAbstractState(QState *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a new state with the given <db:code role="parameter">parent</db:code> state.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractState">
<db:title>[virtual noexcept] QAbstractState::~QAbstractState()</db:title>
<db:para>Destroys this state.</db:para>
</db:section>
<db:section xml:id="entered">
<db:title>void QAbstractState::entered()</db:title>
<db:para>This signal is emitted when the state has been entered (after <db:link xlink:href="qabstractstate.xml#onEntry">onEntry</db:link>() has been called).</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractState::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="exited">
<db:title>void QAbstractState::exited()</db:title>
<db:para>This signal is emitted when the state has been exited (after <db:link xlink:href="qabstractstate.xml#onExit">onExit</db:link>() has been called).</db:para>
</db:section>
<db:section xml:id="machine">
<db:title>QStateMachine *QAbstractState::machine() const</db:title>
<db:para>Returns the state machine that this state is part of, or 0 if the state is not part of a state machine.</db:para>
</db:section>
<db:section xml:id="onEntry">
<db:title>[pure virtual protected] void QAbstractState::onEntry(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This function is called when the state is entered. The given <db:code role="parameter">event</db:code> is what caused the state to be entered. Reimplement this function to perform custom processing when the state is entered.</db:para>
</db:section>
<db:section xml:id="onExit">
<db:title>[pure virtual protected] void QAbstractState::onExit(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This function is called when the state is exited. The given <db:code role="parameter">event</db:code> is what caused the state to be exited. Reimplement this function to perform custom processing when the state is exited.</db:para>
</db:section>
<db:section xml:id="parentState">
<db:title>QState *QAbstractState::parentState() const</db:title>
<db:para>Returns this state's parent state, or 0 if the state has no parent state.</db:para>
</db:section>
</db:section>
</db:article>
