<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Polar Chart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple polar chart with multiple different series.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;chartview.h&quot;
#include &lt;QtGui/QMouseEvent&gt;
#include &lt;QtCore/QDebug&gt;
#include &lt;QtCharts/QAbstractAxis&gt;
#include &lt;QtCharts/QValueAxis&gt;

QT_CHARTS_USE_NAMESPACE

ChartView::ChartView(QWidget *parent)
    : QChartView(parent)
{
}

void ChartView::keyPressEvent(QKeyEvent *event)
{
    switch (event-&gt;key()) {
    case Qt::Key_Plus:
        chart()-&gt;zoomIn();
        break;
    case Qt::Key_Minus:
        chart()-&gt;zoomOut();
        break;
    case Qt::Key_Left:
        chart()-&gt;scroll(-1.0, 0);
        break;
    case Qt::Key_Right:
        chart()-&gt;scroll(1.0, 0);
        break;
    case Qt::Key_Up:
        chart()-&gt;scroll(0, 1.0);
        break;
    case Qt::Key_Down:
        chart()-&gt;scroll(0, -1.0);
        break;
    case Qt::Key_Space:
        switchChartType();
        break;
    default:
        QGraphicsView::keyPressEvent(event);
        break;
    }
}

void ChartView::switchChartType()
{
    QChart *newChart;
    QChart *oldChart = chart();

    if (oldChart-&gt;chartType() == QChart::ChartTypeCartesian)
        newChart = new QPolarChart();
    else
        newChart = new QChart();

    // Move series and axes from old chart to new one
    QList&lt;QAbstractSeries *&gt; seriesList = oldChart-&gt;series();
    QList&lt;QAbstractAxis *&gt; axisList = oldChart-&gt;axes();
    QList&lt;QPair&lt;qreal, qreal&gt; &gt; axisRanges;

    foreach (QAbstractAxis *axis, axisList) {
        QValueAxis *valueAxis = static_cast&lt;QValueAxis *&gt;(axis);
        axisRanges.append(QPair&lt;qreal, qreal&gt;(valueAxis-&gt;min(), valueAxis-&gt;max()));
    }

    foreach (QAbstractSeries *series, seriesList)
        oldChart-&gt;removeSeries(series);

    foreach (QAbstractAxis *axis, axisList) {
        oldChart-&gt;removeAxis(axis);
        newChart-&gt;addAxis(axis, axis-&gt;alignment());
    }

    foreach (QAbstractSeries *series, seriesList) {
        newChart-&gt;addSeries(series);
        foreach (QAbstractAxis *axis, axisList)
            series-&gt;attachAxis(axis);
    }

    int count = 0;
    foreach (QAbstractAxis *axis, axisList) {
        axis-&gt;setRange(axisRanges[count].first, axisRanges[count].second);
        count++;
    }

    newChart-&gt;setTitle(oldChart-&gt;title());
    setChart(newChart);
    delete oldChart;
}

</db:programlisting>
</db:article>
