<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickRenderControl OpenGL Example</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to render a Qt Quick scene into a texture that is then used by a non-Quick based OpenGL renderer.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/rendercontrol-opengl-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Qt Quick scene is managed by a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> that is not visible on-screen. Rather, rendering targets an OpenGL texture and is controlled through <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>.</db:para>
<db:para>The cube is rendered directly with OpenGL, using Qt Gui enablers such as <db:link xlink:href="qwindow.xml">QWindow</db:link>, <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>, <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link>, and <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link>. The cube is textured with the texture that the Qt Quick render pass outputs to.</db:para>
<db:para>In addition, basic input event forwarding is also demonstrated. When holding down the left mouse button, the background <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> color is altered via QML bindings. Similarly, holding down a key on the keyboard changes the color as well. This proves that the &quot;fake&quot; events sent from the application (generated based on events from the on-screen <db:link xlink:href="qwindow.xml">QWindow</db:link>) are forwarded and processed within the Qt Quick scene.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/rendercontrol/rendercontrol_opengl?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
