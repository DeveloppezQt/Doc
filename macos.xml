<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for macOS</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Platform support for macOS. .</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>macOS (previously known as OS X or Mac OS X) is Apple's operating system for the Mac line of computers. It's a UNIX platform, based on the Darwin kernel, and behaves largely similar to other UNIX-like platforms. The main difference is that X11 is not used as the windowing system. Instead, macOS uses its own native windowing system that is accessible through the Cocoa API.</db:para>
<db:para>To download and install Qt for macOS, follow the instructions on the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page. To build Qt from source, see <db:link xlink:href="macos-building.xml">Qt for macOS - Building from Source</db:link>.</db:para>
<db:anchor xml:id="macos-supported-versions"/>
<db:section xml:id="supported-versions">
<db:title>Supported Versions</db:title>
<db:para>When talking about version support on macOS, it's important to distinguish between the <db:link xlink:href="macos.xml#build-environment">build environment</db:link>; the platform you're building on or with, and the <db:link xlink:href="macos.xml#target-platforms">target platforms</db:link>; the platforms you are building for. The following macOS versions are supported.</db:para>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Target Platform</db:para>
</db:th>
<db:th>
<db:para>Architecture</db:para>
</db:th>
<db:th>
<db:para>Build Environment</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>macOS 11, 12, 13, 14</db:para>
</db:td>
<db:td>
<db:para>x86_64, x86_64h, and arm64</db:para>
</db:td>
<db:td>
<db:para>Xcode 14 (macOS 13 SDK), Xcode 15 (macOS 14 SDK)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="build-environment">
<db:title>Build Environment</db:title>
<db:para>The build environment on macOS is defined <db:emphasis>entirely</db:emphasis> by the Xcode version used to build your application. Xcode contains both a toolchain (compiler, linker, and other tools), and a macOS platform-SDK (headers and libraries). Together these define how your application is built.</db:para>
<db:note>
<db:para>The version of macOS that you are <db:emphasis>running</db:emphasis> Xcode on does not matter. As long as Apple ships a given Xcode version that runs on your operating system, the build environment will be defined by that Xcode version.</db:para>
</db:note>
<db:para>Xcode can be downloaded from Apple's <db:link xlink:href="https://developer.apple.com/download/">developer website</db:link> (including older versions of Xcode).</db:para>
<db:para>You should always be using the latest Xcode available from Apple that has been tested with the Qt version you are using. By always building against the latest available platform SDK, you ensure that Qt can take advantage of new features introduced in recent versions of macOS.</db:para>
<db:para>Once installed, choosing an Xcode installation is done using the xcode-select tool.</db:para>
<db:programlisting language="cpp">$ sudo xcode-select --switch /Applications/Xcode.app
</db:programlisting>
<db:para>You can inspect the globally selected Xcode installation using the same tool.</db:para>
<db:programlisting language="cpp">$ xcode-select -print-path
/Applications/Xcode.app/Contents/Developer
</db:programlisting>
<db:para>The xcrun command can then be used to find a particular tool in the toolchain.</db:para>
<db:programlisting language="cpp">$ xcrun -sdk macosx -find clang
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang
</db:programlisting>
<db:para>or show the platform SDK path used when building.</db:para>
<db:programlisting language="cpp">$ xcrun -sdk macosx --show-sdk-path
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk
</db:programlisting>
</db:section>
<db:section xml:id="target-platforms">
<db:title>Target Platforms</db:title>
<db:para>Building for macOS utilizes a technique called <db:emphasis>weak linking</db:emphasis> that allows you to build your application against the headers and libraries of the latest platform SDK, while still allowing your application to be deployed to macOS versions lower than the SDK version. When the binary is run on a macOS version lower than the SDK it was built with, Qt will check at runtime whether or not a platform feature is available before utilizing it.</db:para>
<db:para>In theory this would allow running your application on every single macOS version released, but for practical (and technical) reasons there is a lower limit to this range, known as the <db:emphasis>deployment target</db:emphasis> of your application. If the binary is launched on a macOS version below the deployment target macOS or Qt will give an error message and the application will not run.</db:para>
<db:para>Qt expresses the deployment target via the <db:link xlink:href="https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_DEPLOYMENT_TARGET.html">CMAKE_OSX_DEPLOYMENT_TARGET</db:link> or QMAKE_MACOSX_DEPLOYMENT_TARGET variables, which by default is set to the minimum supported deployment target for Qt.</db:para>
<db:para>You only need to raise the deployment target if your own code uses APIs that were added in a macOS version higher than what Qt defaults to, and you are not using @available checks to guard their use at runtime.</db:para>
<db:para>To raise the deployment target with CMake:</db:para>
<db:programlisting language="cpp">set(CMAKE_OSX_DEPLOYMENT_TARGET &quot;13.0&quot;)
</db:programlisting>
<db:para>or with qmake:</db:para>
<db:programlisting language="cpp">QMAKE_MACOSX_DEPLOYMENT_TARGET = 13.0
</db:programlisting>
<db:note>
<db:para>You should not lower the deployment target beyond the default value set by Qt. Doing so will likely lead to crashes at runtime if the binary is then deployed to a macOS version lower than what Qt expected to run on.</db:para>
</db:note>
<db:para>For more information about SDK-based development on macOS, see Apple's <db:link xlink:href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/cross_development/Introduction/Introduction.html">developer documentation</db:link>.</db:para>
<db:section xml:id="opting-out-of-macos-behavior-changes">
<db:title>Opting out of macOS behavior changes</db:title>
<db:para>One caveat to using the latest Xcode version and SDK to build your application is that macOS's system frameworks will sometimes decide whether or not to enable behavior changes based on the SDK you built your application with.</db:para>
<db:para>For example, when dark-mode was introduced in macOS 10.14 Mojave, macOS would only treat applications built against the 10.14 SDK as supporting dark-mode, and would leave applications built against earlier SDKs with the default light mode look. This technique allows Apple to ensure that binaries built long before the new SDK and operating system was released will still continue to run without regressions on new macOS releases.</db:para>
<db:para>Building against an older SDK is a last-resort solution, and should only be applied if your application has no other ways of working around the problem.</db:para>
</db:section>
</db:section>
<db:section xml:id="architectures">
<db:title>Architectures</db:title>
<db:para>By default, Qt will build for the architecture of your development machine - either x86_64 if you're on an Intel Mac, or arm64 if you are on an Apple Silicon Mac.</db:para>
<db:para>To build for other architectures you can use the <db:link xlink:href="https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_ARCHITECTURES.html">CMAKE_OSX_ARCHITECTURES</db:link> and QMAKE_APPLE_DEVICE_ARCHS variables in your project files or on the command line. This allows you to both cross-compile to a different architecture, and to build universal (multi-architecture) binaries. For example, to build your application for both x86_64 and arm64 with CMake:</db:para>
<db:programlisting language="cpp">cmake ~/src/myapp -DCMAKE_OSX_ARCHITECTURES=&quot;x86_64;arm64&quot;
</db:programlisting>
<db:para>or with qmake:</db:para>
<db:programlisting language="cpp">qmake ~/src/myapp QMAKE_APPLE_DEVICE_ARCHS=&quot;x86_64 arm64&quot;
</db:programlisting>
<db:para>When specifying the architectures in a project file they should not be quoted, e.g.:</db:para>
<db:programlisting language="cpp">TEMPLATE = app
SOURCES = main.cpp
QMAKE_APPLE_DEVICE_ARCHS = x86_64 arm64
</db:programlisting>
<db:section xml:id="sub-architecture-support-on-intel-macs">
<db:title>Sub-architecture support on Intel Macs</db:title>
<db:para>In addition to the baseline x86_64 architecture, Qt also supports the x86_64h (&quot;Haswell&quot;) sub-architecture, which improves performance on Intel Macs.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="generating-xcode-project-files">
<db:title>Generating Xcode Project Files</db:title>
<db:para>By default, CMake and qmake generates project files in Makefile format. If you prefer to build and debug your application from within Xcode, you can request that an Xcode project is generated instead:</db:para>
<db:programlisting language="cpp">cmake ~/src/myapp -GXcode
</db:programlisting>
<db:para>or with qmake:</db:para>
<db:programlisting language="cpp">qmake ~/src/myapp -spec macx-xcode
</db:programlisting>
</db:section>
<db:section xml:id="deploying-applications-on-macos">
<db:title>Deploying Applications on macOS</db:title>
<db:para>macOS applications are typically deployed as self-contained application bundles. The application bundle contains the application executable as well as dependencies such as the Qt libraries, plugins, translations and other resources you may need. Third party libraries like Qt are normally not installed system-wide; each application provides its own copy.</db:para>
<db:para>To build your application as an application bundle with CMake, set the <db:link xlink:href="https://cmake.org/cmake/help/latest/prop_tgt/MACOSX_BUNDLE.html">MACOSX_BUNDLE</db:link> property on your executable target, as follows:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_executable(app)
if(APPLE)
    set_target_properties(tst_manual_ios_assets PROPERTIES MACOSX_BUNDLE TRUE)
endif()
</db:programlisting>
<db:para>With qmake, bundles are the default. Set CONFIG -= app_bundle in your project file (.pro) to disable it.</db:para>
<db:para>A common way to distribute applications is to provide a compressed disk image (.dmg file) that the user can mount in Finder. The deployment tool, macdeployqt (available from the macOS installers), can be used to create the self-contained bundles, and optionally also create a .dmg archive.</db:para>
<db:para>Applications can also be distributed through the Mac App Store. macdeployqt (bin/macdeployqt) can be used as a starting point for app store deployment. To ensure that Qt complies with the app store sandbox rules, Qt must be configured with the -feature-appstore-compliant argument.</db:para>
<db:para>For details about deployment on macOS, see <db:link xlink:href="macos-deployment.xml">Qt for macOS - Deployment</db:link>.</db:para>
<db:note>
<db:para>For selling applications in the macOS App Store, special rules apply. In order to pass validation, the application must verify the existence of a valid receipt before executing any code. Since this is a copy protection mechanism, steps should be taken to avoid common patterns and obfuscate the code that validates the receipt as much as possible. Thus, this cannot be automated by Qt, but requires some platform-specific code written specifically for the application itself. More information can be found in <db:link xlink:href="https://developer.apple.com/library/archive/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateLocally.html">Apple's documentation</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="using-objective-c-code-in-qt-applications">
<db:title>Using Objective-C Code in Qt Applications</db:title>
<db:para>Clang, the compiler used for applications on Apple Platforms, allows mixing C++ and Objective-C code. To enable this mode use the .mm extension for the relevant source files and add them to your project as usual.</db:para>
<db:para>With CMake:</db:para>
<db:programlisting language="cpp" role="bad">target_sources(myapp PRIVATE objc_code.mm)
</db:programlisting>
<db:para>With qmake:</db:para>
<db:programlisting language="cpp" role="bad">SOURCES += objc_code.mm
</db:programlisting>
<db:para>You can then use Objective-C frameworks from Apple's Developer Library in your Qt applications.</db:para>
<db:para>To expose functionality to the rest of your application, without having to rename all your source files, declare helper functions in a header, and implement the functionality in an Objective-C++ source file:</db:para>
<db:programlisting language="cpp">// objc_code.h
QString localizedHostName();

// objc_code.mm
#include &amp;lt;Foundation/NSHost.h&amp;gt;
QString localizedHostName()
{
    return QString::fromNSString(NSHost.currentHost.localizedName);
}
</db:programlisting>
</db:section>
<db:section xml:id="macos-issues">
<db:title>macOS Issues</db:title>
<db:para>The page below covers specific issues and recommendations for creating macOS applications.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="macos-issues.xml">Qt for macOS - Specific Issues</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="where-to-go-from-here">
<db:title>Where to Go from Here</db:title>
<db:para>We invite you to explore the rest of Qt. We prepared overviews to help you decide which APIs to use and our examples demonstrate how to use our API.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="overviews-main.xml">Qt Overviews</db:link> - list of topics about application development</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtexamplesandtutorials.xml">Examples and Tutorials</db:link> - code samples and tutorials</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="reference-overview.xml">Qt Reference Pages</db:link> - a listing of C++ and QML APIs</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt's vibrant and active community site, <db:link xlink:href="http://qt.io">http://qt.io</db:link> houses a wiki, a forum, and additional learning guides and presentations.</db:para>
</db:section>
</db:article>
