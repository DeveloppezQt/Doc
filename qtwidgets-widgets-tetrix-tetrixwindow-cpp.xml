<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tetrix Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Tetrix example is a Qt version of the classic Tetrix game.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;tetrixboard.h&quot;
#include &quot;tetrixwindow.h&quot;

TetrixWindow::TetrixWindow()
{
    board = new TetrixBoard;

    nextPieceLabel = new QLabel;
    nextPieceLabel-&gt;setFrameStyle(QFrame::Box | QFrame::Raised);
    nextPieceLabel-&gt;setAlignment(Qt::AlignCenter);
    board-&gt;setNextPieceLabel(nextPieceLabel);

    scoreLcd = new QLCDNumber(5);
    scoreLcd-&gt;setSegmentStyle(QLCDNumber::Filled);
    levelLcd = new QLCDNumber(2);
    levelLcd-&gt;setSegmentStyle(QLCDNumber::Filled);
    linesLcd = new QLCDNumber(5);
    linesLcd-&gt;setSegmentStyle(QLCDNumber::Filled);

    startButton = new QPushButton(tr(&quot;&amp;Start&quot;));
    startButton-&gt;setFocusPolicy(Qt::NoFocus);
    quitButton = new QPushButton(tr(&quot;&amp;Quit&quot;));
    quitButton-&gt;setFocusPolicy(Qt::NoFocus);
    pauseButton = new QPushButton(tr(&quot;&amp;Pause&quot;));
    pauseButton-&gt;setFocusPolicy(Qt::NoFocus);

    connect(startButton, SIGNAL(clicked()), board, SLOT(start()));
    connect(quitButton , SIGNAL(clicked()), qApp, SLOT(quit()));
    connect(pauseButton, SIGNAL(clicked()), board, SLOT(pause()));
    connect(board, SIGNAL(scoreChanged(int)), scoreLcd, SLOT(display(int)));
    connect(board, SIGNAL(levelChanged(int)), levelLcd, SLOT(display(int)));
    connect(board, SIGNAL(linesRemovedChanged(int)),
            linesLcd, SLOT(display(int)));

    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(createLabel(tr(&quot;NEXT&quot;)), 0, 0);
    layout-&gt;addWidget(nextPieceLabel, 1, 0);
    layout-&gt;addWidget(createLabel(tr(&quot;LEVEL&quot;)), 2, 0);
    layout-&gt;addWidget(levelLcd, 3, 0);
    layout-&gt;addWidget(startButton, 4, 0);
    layout-&gt;addWidget(board, 0, 1, 6, 1);
    layout-&gt;addWidget(createLabel(tr(&quot;SCORE&quot;)), 0, 2);
    layout-&gt;addWidget(scoreLcd, 1, 2);
    layout-&gt;addWidget(createLabel(tr(&quot;LINES REMOVED&quot;)), 2, 2);
    layout-&gt;addWidget(linesLcd, 3, 2);
    layout-&gt;addWidget(quitButton, 4, 2);
    layout-&gt;addWidget(pauseButton, 5, 2);
    setLayout(layout);

    setWindowTitle(tr(&quot;Tetrix&quot;));
    resize(550, 370);
}

QLabel *TetrixWindow::createLabel(const QString &amp;text)
{
    QLabel *lbl = new QLabel(text);
    lbl-&gt;setAlignment(Qt::AlignHCenter | Qt::AlignBottom);
    return lbl;
}

</db:programlisting>
</db:article>
