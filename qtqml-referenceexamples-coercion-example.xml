<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Extending QML - Inheritance and Coercion Example</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>C++ Inheritance and Coercion.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example builds on:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-referenceexamples-properties-example.xml">Extending QML - Object and List Property Types Example</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-referenceexamples-adding-example.xml">Extending QML - Adding Types Example</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The Inheritance and Coercion Example shows how to use base classes to assign types of more than one type to a property. It specializes the Person type developed in the previous examples into two types - a <db:code>Boy</db:code> and a <db:code>Girl</db:code>.</db:para>
<db:programlisting language="qml">BirthdayParty {
    host: Boy {
        name: &quot;Bob Jones&quot;
        shoeSize: 12
    }
    guests: [
        Boy { name: &quot;Leo Hodges&quot; },
        Boy { name: &quot;Jack Smith&quot; },
        Girl { name: &quot;Anne Brown&quot; }
    ]
}
</db:programlisting>
<db:section xml:id="declare-boy-and-girl">
<db:title>Declare Boy and Girl</db:title>
<db:programlisting language="cpp">class Boy : public Person
{
    Q_OBJECT
public:
    Boy(QObject * parent = 0);
};

class Girl : public Person
{
    Q_OBJECT
public:
    Girl(QObject * parent = 0);
};

</db:programlisting>
<db:para>The Person class remains unaltered in this example and the Boy and Girl C++ classes are trivial extensions of it. As an example, the inheritance used here is a little contrived, but in real applications it is likely that the two extensions would add additional properties or modify the Person classes behavior.</db:para>
<db:section xml:id="define-people-as-a-base-class">
<db:title>Define People as a base class</db:title>
<db:para>The implementation of the People class itself has not changed since the previous example. However, as we have repurposed the People class as a common base for Boy and Girl, we want to prevent it from being instantiated from QML directly - an explicit Boy or Girl should be instantiated instead.</db:para>
<db:programlisting language="cpp">qmlRegisterType&lt;Person&gt;();
</db:programlisting>
<db:para>While we want to disallow instantiating Person from within QML, it still needs to be registered with the QML engine, so that it can be used as a property type and other types can be coerced to it.</db:para>
</db:section>
<db:section xml:id="define-boy-and-girl">
<db:title>Define Boy and Girl</db:title>
<db:para>The implementation of Boy and Girl are trivial.</db:para>
<db:programlisting language="cpp">Boy::Boy(QObject * parent)
: Person(parent)
{
}

Girl::Girl(QObject * parent)
: Person(parent)
{
}

</db:programlisting>
<db:para>All that is necessary is to implement the constructor, and to register the types and their QML name with the QML engine.</db:para>
</db:section>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>The BirthdayParty type has not changed since the previous example. The celebrant and guests property still use the People type.</db:para>
<db:programlisting language="cpp">    Q_PROPERTY(Person *host READ host WRITE setHost)
    Q_PROPERTY(QQmlListProperty&lt;Person&gt; guests READ guests)
</db:programlisting>
<db:para>However, as all three types, Person, Boy and Girl, have been registered with the QML system, on assignment QML automatically (and type-safely) converts the Boy and Girl objects into a Person.</db:para>
<db:para>The main.cpp file in the example includes a simple shell application that loads and runs the QML snippet shown at the beginning of this page.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="referenceexamples/coercion/birthdayparty.cpp">referenceexamples/coercion/birthdayparty.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="referenceexamples/coercion/birthdayparty.h">referenceexamples/coercion/birthdayparty.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="referenceexamples/coercion/coercion.pro">referenceexamples/coercion/coercion.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="referenceexamples/coercion/coercion.qrc">referenceexamples/coercion/coercion.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="referenceexamples/coercion/example.qml">referenceexamples/coercion/example.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="referenceexamples/coercion/main.cpp">referenceexamples/coercion/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="referenceexamples/coercion/person.cpp">referenceexamples/coercion/person.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="referenceexamples/coercion/person.h">referenceexamples/coercion/person.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
