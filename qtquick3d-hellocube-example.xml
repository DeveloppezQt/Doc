<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - HelloCube Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to render 2D and 3D objects together in Qt Quick 3D.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/hellocube.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>HelloCube</db:emphasis> demonstrates how to render a 3D cube with 2D items in Qt Quick 3D.</db:para>
<db:section xml:id="draw-2d-items">
<db:title>Draw 2D Items</db:title>
<db:para>We set up the entire scene in the <db:emphasis>main.qml</db:emphasis> file.</db:para>
<db:para>To be able to use the types in the <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link> module, we must import it:</db:para>
<db:programlisting language="cpp">import QtQuick3D
</db:programlisting>
<db:para>We define simple <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> Items with an Image and a Text on a Rectangle.</db:para>
<db:programlisting language="qml">Image {
    anchors.fill: parent
    source: &quot;qt_logo.png&quot;
}
Text {
    anchors.bottom: parent.bottom
    anchors.left: parent.left
    color: &quot;white&quot;
    font.pixelSize: 17
    text: qsTr(&quot;The Future is Written with Qt&quot;)
}
</db:programlisting>
<db:para>This simple rectangle has two animations for flipping vertically.</db:para>
<db:programlisting language="qml">transform: Rotation {
    id: rotation
    origin.x: qt_logo.width / 2
    origin.y: qt_logo.height / 2
    axis { x: 1; y: 0; z: 0 }
}

PropertyAnimation {
    id: flip1
    target: rotation
    property: &quot;angle&quot;
    duration: 600
    to: 180
    from: 0
}
PropertyAnimation {
    id: flip2
    target: rotation
    property: &quot;angle&quot;
    duration: 600
    to: 360
    from: 180
}
</db:programlisting>
</db:section>
<db:section xml:id="draw-a-3d-cube">
<db:title>Draw a 3D Cube</db:title>
<db:para>Drawing a cube is very simple. After defining a <db:link xlink:href="qml-qtquick3d-camera.xml">Camera</db:link>, and a <db:link xlink:href="qml-qtquick3d-light.xml">Light</db:link>, we make a cube with a built-in <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link>. In this example, we render the previous 2D Rectangle on this cube surface as a diffuse <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link>. In our Rectangle, we set <db:code>layer.enabled</db:code> to <db:code>true</db:code>.</db:para>
<db:programlisting language="qml">layer.enabled: true
</db:programlisting>
<db:para>When enabled, this property makes the 2D item render into a offscreen surface, which we then use as a texture for our cube.</db:para>
<db:programlisting language="qml">id: cube
source: &quot;#Cube&quot;
materials: DefaultMaterial {
    diffuseMap: Texture {
        sourceItem: qt_logo
    }
}
eulerRotation.y: 90
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="hellocube/CMakeLists.txt">hellocube/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="hellocube/hellocube.pro">hellocube/hellocube.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="hellocube/main.cpp">hellocube/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="hellocube/main.qml">hellocube/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="hellocube/qml.qrc">hellocube/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="hellocube/qt_logo.png">hellocube/qt_logo.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
