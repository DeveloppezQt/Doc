<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHostAddress Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link> class provides an IP address.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHostAddress</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QHostAddress is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class holds an IPv4 or IPv6 address in a platform- and protocol-independent manner.</db:para>
<db:para><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link> is normally used with the <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>, <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link>, and <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> to connect to a host or to set up a server.</db:para>
<db:para>A host address is set with <db:link xlink:href="qhostaddress.xml#setAddress">setAddress</db:link>(), and retrieved with <db:link xlink:href="qhostaddress.xml#toIPv4Address">toIPv4Address</db:link>(), <db:link xlink:href="qhostaddress.xml#toIPv6Address">toIPv6Address</db:link>(), or <db:link xlink:href="qhostaddress.xml#toString">toString</db:link>(). You can check the type with <db:link xlink:href="qhostaddress.xml#protocol">protocol</db:link>().</db:para>
<db:note>
<db:para>Please note that <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link> does not do DNS lookups. <db:link xlink:href="qhostinfo.xml">QHostInfo</db:link> is needed for that.</db:para>
</db:note>
<db:para>The class also supports common predefined addresses: <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">Null</db:link>, <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">LocalHost</db:link>, <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">LocalHostIPv6</db:link>, <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">Broadcast</db:link>, and <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">Any</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostinfo.xml">QHostInfo</db:link></db:member>
<db:member><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link></db:member>
<db:member><db:link xlink:href="qtcpserver.xml">QTcpServer</db:link></db:member>
<db:member><db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ConversionModeFlag-enum">
<db:title>[since 5.8] enum QHostAddress::ConversionModeFlag</db:title>
<db:bridgehead renderas="sect2">flags QHostAddress::ConversionMode</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::StrictConversion</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Don't convert IPv6 addresses to IPv4 when comparing two <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link> objects of different protocols, so they will always be considered different.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::ConvertV4MappedToIPv4</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Convert IPv4-mapped IPv6 addresses (RFC 4291 sect. 2.5.5.2) when comparing. Therefore <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;::ffff:192.168.1.1&quot;) will compare equal to <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;192.168.1.1&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::ConvertV4CompatToIPv4</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Convert IPv4-compatible IPv6 addresses (RFC 4291 sect. 2.5.5.1) when comparing. Therefore <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;::192.168.1.1&quot;) will compare equal to <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;192.168.1.1&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::ConvertLocalHost</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Convert the IPv6 loopback addresses to its IPv4 equivalent when comparing. Therefore e.g. <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;::1&quot;) will compare equal to <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;127.0.0.1&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::ConvertUnspecifiedAddress</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>All unspecified addresses will compare equal, namely <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">AnyIPv4</db:link>, <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">AnyIPv6</db:link> and Any.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::TolerantConversion</db:code></db:para>
</db:td>
<db:td><db:code>0xff</db:code></db:td>
<db:td>
<db:para>Sets all three preceding flags.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 5.8.</db:para>
<db:para>The <db:code>ConversionMode</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ConversionModeFlag&gt;. </db:code>It stores an OR combination of <db:code>ConversionModeFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#isEqual">isEqual</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SpecialAddress-enum">
<db:title>enum QHostAddress::SpecialAddress</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The null address object. Equivalent to <db:link xlink:href="qhostaddress.xml#QHostAddress">QHostAddress</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::LocalHost</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The IPv4 localhost address. Equivalent to <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;127.0.0.1&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::LocalHostIPv6</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The IPv6 localhost address. Equivalent to <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;::1&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::Broadcast</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The IPv4 broadcast address. Equivalent to <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;255.255.255.255&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::AnyIPv4</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The IPv4 any-address. Equivalent to <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;0.0.0.0&quot;). A socket bound with this address will listen only on IPv4 interaces.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::AnyIPv6</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The IPv6 any-address. Equivalent to <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link>(&quot;::&quot;). A socket bound with this address will listen only on IPv6 interaces.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhostaddress.xml">QHostAddress</db:link></db:emphasis>::Any</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The dual stack any-address. A socket bound with this address will listen on both IPv4 and IPv6 interfaces.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHostAddress">
<db:title>QHostAddress::QHostAddress()</db:title>
<db:para>Constructs a null host address object, i.e. an address which is not valid for any host or interface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QHostAddress-1">
<db:title>QHostAddress::QHostAddress(QHostAddress::SpecialAddress <db:emphasis>address</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link> object for <db:code role="parameter">address</db:code>.</db:para>
</db:section>
<db:section xml:id="QHostAddress-3">
<db:title>[explicit] QHostAddress::QHostAddress(const QString &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>Constructs an IPv4 or IPv6 address based on the string <db:code role="parameter">address</db:code> (e.g., &quot;127.0.0.1&quot;).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#setAddress">setAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QHostAddress-4">
<db:title>[explicit] QHostAddress::QHostAddress(const Q_IPV6ADDR &amp;<db:emphasis>ip6Addr</db:emphasis>)</db:title>
<db:para>Constructs a host address object with the IPv6 address <db:code role="parameter">ip6Addr</db:code>.</db:para>
</db:section>
<db:section xml:id="QHostAddress-5">
<db:title>[explicit, since 5.5] QHostAddress::QHostAddress(const quint8 *<db:emphasis>ip6Addr</db:emphasis>)</db:title>
<db:para>Constructs a host address object with the IPv6 address <db:code role="parameter">ip6Addr</db:code>.</db:para>
<db:para><db:code role="parameter">ip6Addr</db:code> must be a 16-byte array in network byte order (big endian).</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="QHostAddress-6">
<db:title>[explicit] QHostAddress::QHostAddress(const sockaddr *<db:emphasis>sockaddr</db:emphasis>)</db:title>
<db:para>Constructs an IPv4 or IPv6 address using the address specified by the native structure <db:code role="parameter">sockaddr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#setAddress">setAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QHostAddress-7">
<db:title>[explicit] QHostAddress::QHostAddress(quint32 <db:emphasis>ip4Addr</db:emphasis>)</db:title>
<db:para>Constructs a host address object with the IPv4 address <db:code role="parameter">ip4Addr</db:code>.</db:para>
</db:section>
<db:section xml:id="QHostAddress-8">
<db:title>[explicit] QHostAddress::QHostAddress(quint8 *<db:emphasis>ip6Addr</db:emphasis>)</db:title>
<db:para>Constructs a host address object with the IPv6 address <db:code role="parameter">ip6Addr</db:code>.</db:para>
<db:para><db:code role="parameter">ip6Addr</db:code> must be a 16-byte array in network byte order (big endian).</db:para>
</db:section>
<db:section xml:id="QHostAddress-2">
<db:title>QHostAddress::QHostAddress(const QHostAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>Constructs a copy of the given <db:code role="parameter">address</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QHostAddress">
<db:title>[noexcept] QHostAddress::~QHostAddress()</db:title>
<db:para>Destroys the host address object.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QHostAddress::clear()</db:title>
<db:para>Sets the host address to 0.0.0.0.</db:para>
</db:section>
<db:section xml:id="isEqual">
<db:title>[since 5.8] bool QHostAddress::isEqual(const QHostAddress &amp;<db:emphasis>other</db:emphasis>, QHostAddress::ConversionMode <db:emphasis>mode</db:emphasis> = TolerantConversion) const</db:title>
<db:para>Returns true if this host address is the same as the <db:code role="parameter">other</db:code> address given; otherwise returns false.</db:para>
<db:para>The parameter <db:code role="parameter">mode</db:code> controls which conversions are preformed between addresses of differing protocols. If no <db:code role="parameter">mode</db:code> is given, TolerantConversion is performed by default.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#ConversionModeFlag-enum">ConversionMode</db:link></db:member>
<db:member><db:link xlink:href="qhostaddress.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isInSubnet">
<db:title>[since 4.5] bool QHostAddress::isInSubnet(const QHostAddress &amp;<db:emphasis>subnet</db:emphasis>, int <db:emphasis>netmask</db:emphasis>) const</db:title>
<db:para>Returns true if this IP is in the subnet described by the network prefix <db:code role="parameter">subnet</db:code> and netmask <db:code role="parameter">netmask</db:code>.</db:para>
<db:para>An IP is considered to belong to a subnet if it is contained between the lowest and the highest address in that subnet. In the case of IP version 4, the lowest address is the network address, while the highest address is the broadcast address.</db:para>
<db:para>The <db:code role="parameter">subnet</db:code> argument does not have to be the actual network address (the lowest address in the subnet). It can be any valid IP belonging to that subnet. In particular, if it is equal to the IP address held by this object, this function will always return true (provided the netmask is a valid value).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#parseSubnet">parseSubnet</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isInSubnet-1">
<db:title>[since 4.5] bool QHostAddress::isInSubnet(const QPair&lt;QHostAddress, int&gt; &amp;<db:emphasis>subnet</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if this IP is in the subnet described by <db:code role="parameter">subnet</db:code>. The <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link> member of <db:code role="parameter">subnet</db:code> contains the network prefix and the int (second) member contains the netmask (prefix length).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="isLoopback">
<db:title>[since 5.0] bool QHostAddress::isLoopback() const</db:title>
<db:para>returns true if the address is the IPv6 loopback address, or any of the IPv4 loopback addresses.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="isMulticast">
<db:title>[since 5.6] bool QHostAddress::isMulticast() const</db:title>
<db:para>Returns true if the address is an IPv4 or IPv6 multicast address, false otherwise.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QHostAddress::isNull() const</db:title>
<db:para>Returns true if this host address is null (INADDR_ANY or in6addr_any). The default constructor creates a null address, and that address is not valid for any host or interface.</db:para>
</db:section>
<db:section xml:id="parseSubnet">
<db:title>[static, since 4.5] QPair&lt;QHostAddress, int&gt; QHostAddress::parseSubnet(const QString &amp;<db:emphasis>subnet</db:emphasis>)</db:title>
<db:para>Parses the IP and subnet information contained in <db:code role="parameter">subnet</db:code> and returns the network prefix for that network and its prefix length.</db:para>
<db:para>The IP address and the netmask must be separated by a slash (/).</db:para>
<db:para>This function supports arguments in the form:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>123.123.123.123/n where n is any value between 0 and 32</db:para>
</db:listitem>
<db:listitem>
<db:para>123.123.123.123/255.255.255.255</db:para>
</db:listitem>
<db:listitem>
<db:para>&lt;ipv6-address&gt;/n where n is any value between 0 and 128</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For IP version 4, this function accepts as well missing trailing components (i.e., less than 4 octets, like &quot;192.168.1&quot;), followed or not by a dot. If the netmask is also missing in that case, it is set to the number of octets actually passed (in the example above, it would be 24, for 3 octets).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#isInSubnet">isInSubnet</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="protocol">
<db:title>QAbstractSocket::NetworkLayerProtocol QHostAddress::protocol() const</db:title>
<db:para>Returns the network layer protocol of the host address.</db:para>
</db:section>
<db:section xml:id="scopeId">
<db:title>[since 4.1] QString QHostAddress::scopeId() const</db:title>
<db:para>Returns the scope ID of an IPv6 address. For IPv4 addresses, or if the address does not contain a scope ID, an empty <db:link xlink:href="qstring.xml">QString</db:link> is returned.</db:para>
<db:para>The IPv6 scope ID specifies the scope of <db:emphasis>reachability</db:emphasis> for non-global IPv6 addresses, limiting the area in which the address can be used. All IPv6 addresses are associated with such a reachability scope. The scope ID is used to disambiguate addresses that are not guaranteed to be globally unique.</db:para>
<db:para>IPv6 specifies the following four levels of reachability:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Node-local: Addresses that are only used for communicating with services on the same interface (e.g., the loopback interface &quot;::1&quot;).</db:para>
</db:listitem>
<db:listitem>
<db:para>Link-local: Addresses that are local to the network interface (<db:emphasis>link</db:emphasis>). There is always one link-local address for each IPv6 interface on your host. Link-local addresses (&quot;fe80...&quot;) are generated from the MAC address of the local network adaptor, and are not guaranteed to be unique.</db:para>
</db:listitem>
<db:listitem>
<db:para>Global: For globally routable addresses, such as public servers on the Internet.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When using a link-local or site-local address for IPv6 connections, you must specify the scope ID. The scope ID for a link-local address is usually the same as the interface name (e.g., &quot;eth0&quot;, &quot;en1&quot;) or number (e.g., &quot;1&quot;, &quot;2&quot;).</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#setScopeId">setScopeId</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:member>
<db:member><db:link xlink:href="qnetworkinterface.xml#interfaceFromName">QNetworkInterface::interfaceFromName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAddress">
<db:title>void QHostAddress::setAddress(quint32 <db:emphasis>ip4Addr</db:emphasis>)</db:title>
<db:para>Set the IPv4 address specified by <db:code role="parameter">ip4Addr</db:code>.</db:para>
</db:section>
<db:section xml:id="setAddress-1">
<db:title>[since 5.8] void QHostAddress::setAddress(QHostAddress::SpecialAddress <db:emphasis>address</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the special address specified by <db:code role="parameter">address</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="setAddress-2">
<db:title>bool QHostAddress::setAddress(const QString &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the IPv4 or IPv6 address specified by the string representation specified by <db:code role="parameter">address</db:code> (e.g. &quot;127.0.0.1&quot;). Returns true and sets the address if the address was successfully parsed; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="setAddress-3">
<db:title>void QHostAddress::setAddress(const Q_IPV6ADDR &amp;<db:emphasis>ip6Addr</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Set the IPv6 address specified by <db:code role="parameter">ip6Addr</db:code>.</db:para>
</db:section>
<db:section xml:id="setAddress-4">
<db:title>[since 5.5] void QHostAddress::setAddress(const quint8 *<db:emphasis>ip6Addr</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Set the IPv6 address specified by <db:code role="parameter">ip6Addr</db:code>.</db:para>
<db:para><db:code role="parameter">ip6Addr</db:code> must be an array of 16 bytes in network byte order (high-order byte first).</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="setAddress-5">
<db:title>void QHostAddress::setAddress(const sockaddr *<db:emphasis>sockaddr</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the IPv4 or IPv6 address specified by the native structure <db:code role="parameter">sockaddr</db:code>. Returns true and sets the address if the address was successfully parsed; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="setAddress-6">
<db:title>void QHostAddress::setAddress(quint8 *<db:emphasis>ip6Addr</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Set the IPv6 address specified by <db:code role="parameter">ip6Addr</db:code>.</db:para>
<db:para><db:code role="parameter">ip6Addr</db:code> must be an array of 16 bytes in network byte order (high-order byte first).</db:para>
</db:section>
<db:section xml:id="setScopeId">
<db:title>[since 4.1] void QHostAddress::setScopeId(const QString &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Sets the IPv6 scope ID of the address to <db:code role="parameter">id</db:code>. If the address protocol is not IPv6, this function does nothing. The scope ID may be set as an interface name (such as &quot;eth0&quot; or &quot;en1&quot;) or as an integer representing the interface index. If <db:code role="parameter">id</db:code> is an interface name, <db:link xlink:href="qtnetwork-module.xml">QtNetwork</db:link> will convert to an interface index using <db:link xlink:href="qnetworkinterface.xml#interfaceIndexFromName">QNetworkInterface::interfaceIndexFromName</db:link>() before calling the operating system networking functions.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#scopeId">scopeId</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:member>
<db:member><db:link xlink:href="qnetworkinterface.xml#interfaceFromName">QNetworkInterface::interfaceFromName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toIPv4Address">
<db:title>quint32 QHostAddress::toIPv4Address() const</db:title>
<db:para>Returns the IPv4 address as a number.</db:para>
<db:para>For example, if the address is 127.0.0.1, the returned value is 2130706433 (i.e. 0x7f000001).</db:para>
<db:para>This value is valid if the <db:link xlink:href="qhostaddress.xml#protocol">protocol</db:link>() is <db:link xlink:href="qabstractsocket.xml#NetworkLayerProtocol-enum">IPv4Protocol</db:link>, or if the protocol is <db:link xlink:href="qabstractsocket.xml#NetworkLayerProtocol-enum">IPv6Protocol</db:link>, and the IPv6 address is an IPv4 mapped address. (RFC4291)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toIPv4Address-1">
<db:title>quint32 QHostAddress::toIPv4Address(bool *<db:emphasis>ok</db:emphasis>) const</db:title>
<db:para>Returns the IPv4 address as a number.</db:para>
<db:para>For example, if the address is 127.0.0.1, the returned value is 2130706433 (i.e. 0x7f000001).</db:para>
<db:para>This value is valid if the <db:link xlink:href="qhostaddress.xml#protocol">protocol</db:link>() is <db:link xlink:href="qabstractsocket.xml#NetworkLayerProtocol-enum">IPv4Protocol</db:link>, or if the protocol is <db:link xlink:href="qabstractsocket.xml#NetworkLayerProtocol-enum">IPv6Protocol</db:link>, and the IPv6 address is an IPv4 mapped address. (RFC4291). In those cases, <db:code role="parameter">ok</db:code> will be set to true. Otherwise, it will be set to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toIPv6Address">
<db:title>Q_IPV6ADDR QHostAddress::toIPv6Address() const</db:title>
<db:para>Returns the IPv6 address as a Q_IPV6ADDR structure. The structure consists of 16 unsigned characters.</db:para>
<db:programlisting language="cpp">Q_IPV6ADDR addr = hostAddr.toIPv6Address();
// addr contains 16 unsigned characters

for (int i = 0; i &lt; 16; ++i) {
    // process addr[i]
}
</db:programlisting>
<db:para>This value is valid if the <db:link xlink:href="qhostaddress.xml#protocol">protocol</db:link>() is <db:link xlink:href="qabstractsocket.xml#NetworkLayerProtocol-enum">IPv6Protocol</db:link>. If the protocol is <db:link xlink:href="qabstractsocket.xml#NetworkLayerProtocol-enum">IPv4Protocol</db:link>, then the address is returned an an IPv4 mapped IPv6 address. (RFC4291)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QHostAddress::toString() const</db:title>
<db:para>Returns the address as a string.</db:para>
<db:para>For example, if the address is the IPv4 address 127.0.0.1, the returned string is &quot;127.0.0.1&quot;. For IPv6 the string format will follow the RFC5952 recommendation. For <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">QHostAddress::Any</db:link>, its IPv4 address will be returned (&quot;0.0.0.0&quot;)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#toIPv4Address">toIPv4Address</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QHostAddress::operator!=(QHostAddress::SpecialAddress <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this host address is not the same as the <db:code role="parameter">other</db:code> address given; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>[since 4.2] bool QHostAddress::operator!=(const QHostAddress &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this host address is not the same as the <db:code role="parameter">other</db:code> address given; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[since 5.8] QHostAddress &amp;QHostAddress::operator=(QHostAddress::SpecialAddress <db:emphasis>address</db:emphasis>)</db:title>
<db:para>Assigns the special address <db:code role="parameter">address</db:code> to this object, and returns a reference to this object.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#setAddress">setAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QHostAddress &amp;QHostAddress::operator=(const QHostAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>Assigns another host <db:code role="parameter">address</db:code> to this object, and returns a reference to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>QHostAddress &amp;QHostAddress::operator=(const QString &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>Assigns the host address <db:code role="parameter">address</db:code> to this object, and returns a reference to this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#setAddress">setAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QHostAddress::operator==(QHostAddress::SpecialAddress <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this host address is the same as the <db:code role="parameter">other</db:code> address given; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool QHostAddress::operator==(const QHostAddress &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this host address is the same as the <db:code role="parameter">other</db:code> address given; otherwise returns false. This operator just calls <db:link xlink:href="qhostaddress.xml#isEqual">isEqual</db:link>(other, <db:link xlink:href="qhostaddress.xml#ConversionModeFlag-enum">StrictConversion</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhostaddress.xml#isEqual">isEqual</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QHostAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>Writes host address <db:code role="parameter">address</db:code> to the stream <db:code role="parameter">out</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QHostAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>Reads a host address into <db:code role="parameter">address</db:code> from the stream <db:code role="parameter">in</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
