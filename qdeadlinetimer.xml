<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDeadlineTimer Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> class marks a deadline in the future.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDeadlineTimer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDeadlineTimer is part of <db:simplelist><db:member>tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> class is usually used to calculate future deadlines and verify whether the deadline has expired. <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> can also be used for deadlines without expiration (&quot;forever&quot;). It forms a counterpart to <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link>, which calculates how much time has elapsed since <db:link xlink:href="qelapsedtimer.xml#start">QElapsedTimer::start</db:link>() was called.</db:para>
<db:para><db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> provides a more convenient API compared to <db:link xlink:href="qelapsedtimer.xml#hasExpired">QElapsedTimer::hasExpired</db:link>().</db:para>
<db:para>The typical use-case for the class is to create a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> before the operation in question is started, and then use <db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>() or <db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>() to determine whether to continue trying the operation. <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> objects can be passed to functions being called to execute this operation so they know how long to still operate.</db:para>
<db:programlisting language="cpp">    void executeOperation(int msecs)
    {
        QDeadlineTimer deadline(msecs);
        do {
            if (readFromDevice(deadline.remainingTime()))
                break;
            waitForReadyRead(deadline);
        } while (!deadline.hasExpired());
    }
</db:programlisting>
<db:para>Many <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> functions deal with time out values, which all are measured in milliseconds. There are two special values, the same as many other Qt functions named waitFor or similar:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0: no time left, expired</db:para>
</db:listitem>
<db:listitem>
<db:para>-1: infinite time left, timer never expires</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="reference-clocks">
<db:title>Reference Clocks</db:title>
<db:para><db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will use the same clock as <db:link xlink:href="qelapsedtimer.xml">QElapsedTimer</db:link> (see <db:link xlink:href="qelapsedtimer.xml#clockType">QElapsedTimer::clockType</db:link>() and <db:link xlink:href="qelapsedtimer.xml#isMonotonic">QElapsedTimer::isMonotonic</db:link>()).</db:para>
</db:section>
<db:section xml:id="timer-types">
<db:title>Timer types</db:title>
<db:para>Like <db:link xlink:href="qtimer.xml">QTimer</db:link>, <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> can select among different levels of coarseness on the timers. You can select precise timing by passing <db:link xlink:href="qt.xml#TimerType-enum">Qt::PreciseTimer</db:link> to the functions that set of change the timer, or you can select coarse timing by passing <db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link>. <db:link xlink:href="qt.xml#TimerType-enum">Qt::VeryCoarseTimer</db:link> is currently interpreted the same way as <db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link>.</db:para>
<db:para>This feature is dependent on support from the operating system: if the OS does not support a coarse timer functionality, then <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will behave like <db:link xlink:href="qt.xml#TimerType-enum">Qt::PreciseTimer</db:link> was passed.</db:para>
<db:para><db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> defaults to <db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link> because on operating systems that do support coarse timing, making timing calls to that clock source is often much more efficient. The level of coarseness depends on the operating system, but should be in the order of a couple of milliseconds.</db:para>
</db:section>
<db:section xml:id="std-op-op-chrono-compatibility">
<db:title>std::chrono Compatibility</db:title>
<db:para><db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> is compatible with the std::chrono API from C++11 and can be constructed from or compared to both std::chrono::duration and std::chrono::time_point objects. In addition, it is fully compatible with the time literals from C++14, which allow one to write code as:</db:para>
<db:programlisting language="cpp">    using namespace std::chrono;
    using namespace std::chrono_literals;

    QDeadlineTimer deadline(30s);
    device-&amp;gt;waitForReadyRead(deadline);
    if (deadline.remainingTime&amp;lt;nanoseconds&amp;gt;() &amp;gt; 300ms)
        cleanup();
</db:programlisting>
<db:para>As can be seen in the example above, <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> offers a templated version of <db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>() and <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() that can be used to return std::chrono objects.</db:para>
<db:para>Note that comparing to time_point is not as efficient as comparing to duration, since <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> may need to convert from its own internal clock source to the clock source used by the time_point object. Also note that, due to this conversion, the deadlines will not be precise, so the following code is not expected to compare equally:</db:para>
<db:programlisting language="cpp">    using namespace std::chrono;
    using namespace std::chrono_literals;
    auto now = steady_clock::now();
    QDeadlineTimer deadline(now + 1s);
    Q_ASSERT(deadline == now + 1s);
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
<db:member><db:link xlink:href="qtimer.xml">QTimer</db:link></db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ForeverConstant-enum">
<db:title>enum QDeadlineTimer::ForeverConstant</db:title>
<db:enumsynopsis>
<db:enumname>ForeverConstant</db:enumname>
<db:enumitem>
<db:enumidentifier>Forever</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link></db:emphasis>::Forever</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Used when creating a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> to indicate the deadline should not expire</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDeadlineTimer">
<db:title>[constexpr] QDeadlineTimer::QDeadlineTimer(Qt::TimerType <db:emphasis>timerType</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:constructorsynopsis>
<db:methodname>QDeadlineTimer</db:methodname>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer(Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an expired <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object. For this object, <db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>() will return 0.</db:para>
<db:para>The timer type <db:code role="parameter">timerType</db:code> may be ignored, since the timer is already expired. Similarly, for optimization purposes, this function will not attempt to obtain the current time and will use a value known to be in the past. Therefore, <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() may return an unexpected value and this object cannot be used in calculation of how long it is overdue. If that functionality is required, use <db:link xlink:href="qdeadlinetimer.xml#current">QDeadlineTimer::current</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#current">current</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDeadlineTimer-1">
<db:title>[constexpr] QDeadlineTimer::QDeadlineTimer(<db:emphasis>QDeadlineTimer::ForeverConstant</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:constructorsynopsis>
<db:methodname>QDeadlineTimer</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer::ForeverConstant</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer(QDeadlineTimer::ForeverConstant, Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para><db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> objects created with <db:link xlink:href="qdeadlinetimer.xml#ForeverConstant-enum">ForeverConstant</db:link> never expire. For such objects, <db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>() will return -1, <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() will return the maximum value, and <db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>() will return true.</db:para>
<db:para>The timer type <db:code role="parameter">timerType</db:code> may be ignored, since the timer will never expire.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#ForeverConstant-enum">ForeverConstant</db:link></db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#timerType">timerType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDeadlineTimer-2">
<db:title>[explicit] QDeadlineTimer::QDeadlineTimer(qint64 <db:emphasis>msecs</db:emphasis>, Qt::TimerType <db:emphasis>type</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:constructorsynopsis>
<db:methodname>QDeadlineTimer</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer(qint64 msecs, Qt::TimerType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object with an expiry time of <db:code role="parameter">msecs</db:code> msecs from the moment of the creation of this object, if msecs is positive. If <db:code role="parameter">msecs</db:code> is zero, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will be marked as expired, causing <db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>() to return zero and <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() to return an indeterminate time point in the past. If <db:code role="parameter">msecs</db:code> is -1, the timer will be set to never expire, causing <db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>() to return -1 and <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() to return the maximum value.</db:para>
<db:para>The <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be constructed with the specified timer <db:code role="parameter">type</db:code>.</db:para>
<db:para>For optimization purposes, if <db:code role="parameter">msecs</db:code> is zero, this function may skip obtaining the current time and may instead use a value known to be in the past. If that happens, <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() may return an unexpected value and this object cannot be used in calculation of how long it is overdue. If that functionality is required, use <db:link xlink:href="qdeadlinetimer.xml#current">QDeadlineTimer::current</db:link>() and add time to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#setRemainingTime">setRemainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDeadlineTimer-3">
<db:title>QDeadlineTimer::QDeadlineTimer(std::chrono::time_point&lt;Clock, Duration&gt; <db:emphasis>deadline</db:emphasis>, Qt::TimerType <db:emphasis>type</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:constructorsynopsis>
<db:methodname>QDeadlineTimer</db:methodname>
<db:methodparam>
<db:type>std::chrono::time_point&lt;Clock, Duration&gt;</db:type>
<db:parameter>deadline</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer(std::chrono::time_point&lt;Clock, Duration&gt; deadline, Qt::TimerType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object with a deadline at <db:code role="parameter">deadline</db:code> time point, converting from the clock source Clock to Qt's internal clock source (see <db:link xlink:href="qelapsedtimer.xml#clockType">QElapsedTimer::clockType</db:link>()).</db:para>
<db:para>If <db:code role="parameter">deadline</db:code> is in the past, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object is set to expired, whereas if <db:code role="parameter">deadline</db:code> is equal to Duration::max(), then this object is set to never expire.</db:para>
<db:para>The <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be constructed with the specified timer <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#setDeadline">setDeadline</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDeadlineTimer-4">
<db:title>QDeadlineTimer::QDeadlineTimer(std::chrono::duration&lt;Rep, Period&gt; <db:emphasis>remaining</db:emphasis>, Qt::TimerType <db:emphasis>type</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:constructorsynopsis>
<db:methodname>QDeadlineTimer</db:methodname>
<db:methodparam>
<db:type>std::chrono::duration&lt;Rep, Period&gt;</db:type>
<db:parameter>remaining</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer(std::chrono::duration&lt;Rep, Period&gt; remaining, Qt::TimerType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object with a remaining time of <db:code role="parameter">remaining</db:code>. If <db:code role="parameter">remaining</db:code> is zero or negative, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be mark as expired, whereas if <db:code role="parameter">remaining</db:code> is equal to duration::max(), the object will be set to never expire.</db:para>
<db:para>The <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be constructed with the specified timer <db:code role="parameter">type</db:code>.</db:para>
<db:para>This constructor can be used with C++14's user-defined literals for time, such as in:</db:para>
<db:programlisting language="cpp">    using namespace std::chrono_literals;
    QDeadlineTimer deadline(250ms);
</db:programlisting>
<db:para>For optimization purposes, if <db:code role="parameter">remaining</db:code> is zero or negative, this function may skip obtaining the current time and may instead use a value known to be in the past. If that happens, <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() may return an unexpected value and this object cannot be used in calculation of how long it is overdue. If that functionality is required, use <db:link xlink:href="qdeadlinetimer.xml#current">QDeadlineTimer::current</db:link>() and add time to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#setRemainingTime">setRemainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addNSecs">
<db:title>[static] QDeadlineTimer QDeadlineTimer::addNSecs(QDeadlineTimer <db:emphasis>dt</db:emphasis>, qint64 <db:emphasis>nsecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDeadlineTimer</db:type>
<db:methodname>addNSecs</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>dt</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>nsecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer addNSecs(QDeadlineTimer dt, qint64 nsecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object whose deadline is extended from <db:code role="parameter">dt</db:code>'s deadline by <db:code role="parameter">nsecs</db:code> nanoseconds. If <db:code role="parameter">dt</db:code> was set to never expire, this function returns a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> that will not expire either.</db:para>
<db:note>
<db:para>if <db:code role="parameter">dt</db:code> was created as expired, its deadline is indeterminate and adding an amount of time may or may not cause it to become unexpired.</db:para>
</db:note>
</db:section>
<db:section xml:id="current">
<db:title>[static] QDeadlineTimer QDeadlineTimer::current(Qt::TimerType <db:emphasis>timerType</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDeadlineTimer</db:type>
<db:methodname>current</db:methodname>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer current(Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> that is expired but is guaranteed to contain the current time. Objects created by this function can participate in the calculation of how long a timer is overdue, using the <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be constructed with the specified <db:code role="parameter">timerType</db:code>.</db:para>
</db:section>
<db:section xml:id="deadline">
<db:title>qint64 QDeadlineTimer::deadline() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>deadline</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 deadline() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the absolute time point for the deadline stored in <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object, calculated in milliseconds relative to the reference clock, the same as <db:link xlink:href="qelapsedtimer.xml#msecsSinceReference">QElapsedTimer::msecsSinceReference</db:link>(). The value will be in the past if this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> has expired.</db:para>
<db:para>If this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> never expires, this function returns std::numeric_limits&lt;qint64&gt;::max().</db:para>
<db:para>This function can be used to calculate the amount of time a timer is overdue, by subtracting <db:link xlink:href="qdeadlinetimer.xml#current">QDeadlineTimer::current</db:link>() or <db:link xlink:href="qelapsedtimer.xml#msecsSinceReference">QElapsedTimer::msecsSinceReference</db:link>(), as in the following example:</db:para>
<db:programlisting language="cpp">    qint64 realTimeLeft = deadline.deadline();
    if (realTimeLeft != (std::numeric_limits&amp;lt;qint64&amp;gt;::max)()) {
        realTimeLeft -= QDeadlineTimer::current().deadline();
        // or:
        //QElapsedTimer timer;
        //timer.start();
        //realTimeLeft -= timer.msecsSinceReference();
    }
</db:programlisting>
<db:note>
<db:para>Timers that were created as expired have an indetermine time point in the past as their deadline, so the above calculation may not work.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#deadlineNSecs">deadlineNSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#setDeadline">setDeadline</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deadlineNSecs">
<db:title>qint64 QDeadlineTimer::deadlineNSecs() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>deadlineNSecs</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 deadlineNSecs() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the absolute time point for the deadline stored in <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object, calculated in nanoseconds relative to the reference clock, the same as <db:link xlink:href="qelapsedtimer.xml#msecsSinceReference">QElapsedTimer::msecsSinceReference</db:link>(). The value will be in the past if this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> has expired.</db:para>
<db:para>If this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> never expires or the number of nanoseconds until the deadline can't be accommodated in the return type, this function returns std::numeric_limits&lt;qint64&gt;::max().</db:para>
<db:para>This function can be used to calculate the amount of time a timer is overdue, by subtracting <db:link xlink:href="qdeadlinetimer.xml#current">QDeadlineTimer::current</db:link>(), as in the following example:</db:para>
<db:programlisting language="cpp">    qint64 realTimeLeft = deadline.deadlineNSecs();
    if (realTimeLeft != std::numeric_limits&amp;lt;qint64&amp;gt;::max())
        realTimeLeft -= QDeadlineTimer::current().deadlineNSecs();
</db:programlisting>
<db:note>
<db:para>Timers that were created as expired have an indetermine time point in the past as their deadline, so the above calculation may not work.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
<db:member>deadlineNSecs()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasExpired">
<db:title>bool QDeadlineTimer::hasExpired() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasExpired</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasExpired() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object has expired, false if there remains time left. For objects that have expired, <db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>() will return zero and <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() will return a time point in the past.</db:para>
<db:para><db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> objects created with the <db:link xlink:href="qdeadlinetimer.xml#ForeverConstant-enum">ForeverConstant</db:link> never expire and this function always returns false for them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isForever">
<db:title>[constexpr] bool QDeadlineTimer::isForever() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isForever</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isForever() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object never expires, false otherwise. For timers that never expire, <db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>() always returns -1 and <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>() returns the maximum value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#ForeverConstant-enum">ForeverConstant</db:link></db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remainingTime">
<db:title>qint64 QDeadlineTimer::remainingTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>remainingTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 remainingTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the remaining time in this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object in milliseconds. If the timer has already expired, this function will return zero and it is not possible to obtain the amount of time overdue with this function (to do that, see <db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>()). If the timer was set to never expire, this function returns -1.</db:para>
<db:para>This function is suitable for use in Qt APIs that take a millisecond timeout, such as the many <db:link xlink:href="qiodevice.xml">QIODevice</db:link> waitFor functions or the timed lock functions in <db:link xlink:href="qmutex.xml">QMutex</db:link>, <db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link>, <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link>, or <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link>. For example:</db:para>
<db:programlisting language="cpp">    mutex.tryLock(deadline.remainingTime());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#setRemainingTime">setRemainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTimeNSecs">remainingTimeNSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remainingTimeAsDuration">
<db:title>std::chrono::nanoseconds QDeadlineTimer::remainingTimeAsDuration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::chrono::nanoseconds</db:type>
<db:methodname>remainingTimeAsDuration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::chrono::nanoseconds remainingTimeAsDuration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the time remaining before the deadline.</db:para>
</db:section>
<db:section xml:id="remainingTimeNSecs">
<db:title>qint64 QDeadlineTimer::remainingTimeNSecs() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>remainingTimeNSecs</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 remainingTimeNSecs() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the remaining time in this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object in nanoseconds. If the timer has already expired, this function will return zero and it is not possible to obtain the amount of time overdue with this function. If the timer was set to never expire, this function returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDeadline">
<db:title>void QDeadlineTimer::setDeadline(qint64 <db:emphasis>msecs</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDeadline</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDeadline(qint64 msecs, Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the deadline for this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object to be the <db:code role="parameter">msecs</db:code> absolute time point, counted in milliseconds since the reference clock (the same as <db:link xlink:href="qelapsedtimer.xml#msecsSinceReference">QElapsedTimer::msecsSinceReference</db:link>()), and the timer type to <db:code role="parameter">timerType</db:code>. If the value is in the past, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will be marked as expired.</db:para>
<db:para>If <db:code role="parameter">msecs</db:code> is std::numeric_limits&lt;qint64&gt;::max() or the deadline is beyond a representable point in the future, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will be set to never expire.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#setPreciseDeadline">setPreciseDeadline</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#deadlineNSecs">deadlineNSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#setRemainingTime">setRemainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDeadline-1">
<db:title>void QDeadlineTimer::setDeadline(std::chrono::time_point&lt;Clock, Duration&gt; <db:emphasis>deadline</db:emphasis>, Qt::TimerType <db:emphasis>type</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDeadline</db:methodname>
<db:methodparam>
<db:type>std::chrono::time_point&lt;Clock, Duration&gt;</db:type>
<db:parameter>deadline</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDeadline(std::chrono::time_point&lt;Clock, Duration&gt; deadline, Qt::TimerType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> to the deadline marked by <db:code role="parameter">deadline</db:code> time point, converting from the clock source Clock to Qt's internal clock source (see <db:link xlink:href="qelapsedtimer.xml#clockType">QElapsedTimer::clockType</db:link>()).</db:para>
<db:para>If <db:code role="parameter">deadline</db:code> is in the past, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object is set to expired, whereas if <db:code role="parameter">deadline</db:code> is equal to Duration::max(), then this object is set to never expire.</db:para>
<db:para>The timer type for this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be set to the specified <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreciseDeadline">
<db:title>void QDeadlineTimer::setPreciseDeadline(qint64 <db:emphasis>secs</db:emphasis>, qint64 <db:emphasis>nsecs</db:emphasis> = 0, Qt::TimerType <db:emphasis>timerType</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreciseDeadline</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>secs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>nsecs</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreciseDeadline(qint64 secs, qint64 nsecs, Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the deadline for this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object to be <db:code role="parameter">secs</db:code> seconds and <db:code role="parameter">nsecs</db:code> nanoseconds since the reference clock epoch (the same as <db:link xlink:href="qelapsedtimer.xml#msecsSinceReference">QElapsedTimer::msecsSinceReference</db:link>()), and the timer type to <db:code role="parameter">timerType</db:code>. If the value is in the past, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will be marked as expired.</db:para>
<db:para>If <db:code role="parameter">secs</db:code> or <db:code role="parameter">nsecs</db:code> is std::numeric_limits&lt;qint64&gt;::max(), this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will be set to never expire. If <db:code role="parameter">nsecs</db:code> is more than 1 billion nanoseconds (1 second), then <db:code role="parameter">secs</db:code> will be adjusted accordingly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#setDeadline">setDeadline</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#deadline">deadline</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#deadlineNSecs">deadlineNSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#setRemainingTime">setRemainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreciseRemainingTime">
<db:title>void QDeadlineTimer::setPreciseRemainingTime(qint64 <db:emphasis>secs</db:emphasis>, qint64 <db:emphasis>nsecs</db:emphasis> = 0, Qt::TimerType <db:emphasis>timerType</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreciseRemainingTime</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>secs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>nsecs</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreciseRemainingTime(qint64 secs, qint64 nsecs, Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the remaining time for this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object to <db:code role="parameter">secs</db:code> seconds plus <db:code role="parameter">nsecs</db:code> nanoseconds from now, if <db:code role="parameter">secs</db:code> has a positive value. If <db:code role="parameter">secs</db:code> is -1, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will be set it to never expire. If both parameters are zero, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will be marked as expired.</db:para>
<db:para>The timer type for this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be set to the specified <db:code role="parameter">timerType</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#setRemainingTime">setRemainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRemainingTime">
<db:title>void QDeadlineTimer::setRemainingTime(qint64 <db:emphasis>msecs</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRemainingTime</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRemainingTime(qint64 msecs, Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the remaining time for this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object to <db:code role="parameter">msecs</db:code> milliseconds from now, if <db:code role="parameter">msecs</db:code> has a positive value. If <db:code role="parameter">msecs</db:code> is zero, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be marked as expired, whereas a value of -1 will set it to never expire.</db:para>
<db:para>The timer type for this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be set to the specified <db:code role="parameter">timerType</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#setPreciseRemainingTime">setPreciseRemainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRemainingTime-1">
<db:title>void QDeadlineTimer::setRemainingTime(std::chrono::duration&lt;Rep, Period&gt; <db:emphasis>remaining</db:emphasis>, Qt::TimerType <db:emphasis>type</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRemainingTime</db:methodname>
<db:methodparam>
<db:type>std::chrono::duration&lt;Rep, Period&gt;</db:type>
<db:parameter>remaining</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRemainingTime(std::chrono::duration&lt;Rep, Period&gt; remaining, Qt::TimerType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the remaining time for this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object to <db:code role="parameter">remaining</db:code>. If <db:code role="parameter">remaining</db:code> is zero or negative, this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be mark as expired, whereas if <db:code role="parameter">remaining</db:code> is equal to duration::max(), the object will be set to never expire.</db:para>
<db:para>The timer type for this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object will be set to the specified <db:code role="parameter">type</db:code>.</db:para>
<db:para>This function can be used with C++14's user-defined literals for time, such as in:</db:para>
<db:programlisting language="cpp">    using namespace std::chrono_literals;
    deadline.setRemainingTime(250ms);
</db:programlisting>
<db:note>
<db:para>Qt detects the necessary C++14 compiler support by way of the feature test recommendations from <db:link xlink:href="https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations">C++ Committee's Standing Document 6</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#setDeadline">setDeadline</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#remainingTime">remainingTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#hasExpired">hasExpired</db:link>()</db:member>
<db:member><db:link xlink:href="qdeadlinetimer.xml#isForever">isForever</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimerType">
<db:title>void QDeadlineTimer::setTimerType(Qt::TimerType <db:emphasis>timerType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTimerType</db:methodname>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTimerType(Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the timer type for this object to <db:code role="parameter">timerType</db:code>.</db:para>
<db:para>The behavior for each possible value of <db:code role="parameter">timerType</db:code> is operating-system dependent. <db:link xlink:href="qt.xml#TimerType-enum">Qt::PreciseTimer</db:link> will use the most precise timer that Qt can find, with resolution of 1 millisecond or better, whereas <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> will try to use a more coarse timer for <db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link> and <db:link xlink:href="qt.xml#TimerType-enum">Qt::VeryCoarseTimer</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#timerType">timerType</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QDeadlineTimer::swap(QDeadlineTimer &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QDeadlineTimer &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this deadline timer with the <db:code role="parameter">other</db:code> deadline timer.</db:para>
</db:section>
<db:section xml:id="timerType">
<db:title>Qt::TimerType QDeadlineTimer::timerType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::TimerType</db:type>
<db:methodname>timerType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::TimerType timerType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the timer type is active for this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdeadlinetimer.xml#setTimerType">setTimerType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QDeadlineTimer &amp;QDeadlineTimer::operator+=(qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDeadlineTimer &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer &amp; operator+=(qint64 msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Extends this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object by <db:code role="parameter">msecs</db:code> milliseconds and returns itself. If this object is set to never expire, this function does nothing.</db:para>
<db:para>To add times of precision greater than 1 millisecond, use <db:link xlink:href="qdeadlinetimer.xml#addNSecs">addNSecs</db:link>().</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QDeadlineTimer &amp;QDeadlineTimer::operator-=(qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDeadlineTimer &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer &amp; operator-=(qint64 msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shortens this <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object by <db:code role="parameter">msecs</db:code> milliseconds and returns itself. If this object is set to never expire, this function does nothing.</db:para>
<db:para>To subtract times of precision greater than 1 millisecond, use <db:link xlink:href="qdeadlinetimer.xml#addNSecs">addNSecs</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDeadlineTimer &amp;QDeadlineTimer::operator=(std::chrono::time_point&lt;Clock, Duration&gt; <db:emphasis>deadline_</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDeadlineTimer &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>std::chrono::time_point&lt;Clock, Duration&gt;</db:type>
<db:parameter>deadline_</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer &amp; operator=(std::chrono::time_point&lt;Clock, Duration&gt; deadline_)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">deadline_</db:code> to this deadline timer.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QDeadlineTimer &amp;QDeadlineTimer::operator=(std::chrono::duration&lt;Rep, Period&gt; <db:emphasis>remaining</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDeadlineTimer &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>std::chrono::duration&lt;Rep, Period&gt;</db:type>
<db:parameter>remaining</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer &amp; operator=(std::chrono::duration&lt;Rep, Period&gt; remaining)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this deadline timer to the <db:code role="parameter">remaining</db:code> time.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(QDeadlineTimer <db:emphasis>d1</db:emphasis>, QDeadlineTimer <db:emphasis>d2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QDeadlineTimer d1, QDeadlineTimer d2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the deadline on <db:code role="parameter">d1</db:code> and the deadline in <db:code role="parameter">d2</db:code> are different, false otherwise. The timer type used to create the two deadlines is ignored. This function is equivalent to:</db:para>
<db:programlisting language="cpp">    return d1.deadlineNSecs() != d2.deadlineNSecs();
</db:programlisting>
<db:note>
<db:para>comparing <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> objects with different timer types is not supported and may result in unpredictable behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QDeadlineTimer operator+(QDeadlineTimer <db:emphasis>dt</db:emphasis>, qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDeadlineTimer</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>dt</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer operator+(QDeadlineTimer dt, qint64 msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object whose deadline is <db:code role="parameter">msecs</db:code> later than the deadline stored in <db:code role="parameter">dt</db:code>. If <db:code role="parameter">dt</db:code> is set to never expire, this function returns a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> that does not expire either.</db:para>
<db:para>To add times of precision greater than 1 millisecond, use <db:link xlink:href="qdeadlinetimer.xml#addNSecs">addNSecs</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>QDeadlineTimer operator+(qint64 <db:emphasis>msecs</db:emphasis>, QDeadlineTimer <db:emphasis>dt</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDeadlineTimer</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>dt</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer operator+(qint64 msecs, QDeadlineTimer dt)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object whose deadline is <db:code role="parameter">msecs</db:code> later than the deadline stored in <db:code role="parameter">dt</db:code>. If <db:code role="parameter">dt</db:code> is set to never expire, this function returns a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> that does not expire either.</db:para>
<db:para>To add times of precision greater than 1 millisecond, use <db:link xlink:href="qdeadlinetimer.xml#addNSecs">addNSecs</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-">
<db:title>QDeadlineTimer operator-(QDeadlineTimer <db:emphasis>dt</db:emphasis>, qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDeadlineTimer</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>dt</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer operator-(QDeadlineTimer dt, qint64 msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> object whose deadline is <db:code role="parameter">msecs</db:code> before the deadline stored in <db:code role="parameter">dt</db:code>. If <db:code role="parameter">dt</db:code> is set to never expire, this function returns a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> that does not expire either.</db:para>
<db:para>To subtract times of precision greater than 1 millisecond, use <db:link xlink:href="qdeadlinetimer.xml#addNSecs">addNSecs</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool operator&lt;(QDeadlineTimer <db:emphasis>d1</db:emphasis>, QDeadlineTimer <db:emphasis>d2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(QDeadlineTimer d1, QDeadlineTimer d2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the deadline on <db:code role="parameter">d1</db:code> is earlier than the deadline in <db:code role="parameter">d2</db:code>, false otherwise. The timer type used to create the two deadlines is ignored. This function is equivalent to:</db:para>
<db:programlisting language="cpp">    return d1.deadlineNSecs() &amp;lt; d2.deadlineNSecs();
</db:programlisting>
<db:note>
<db:para>comparing <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> objects with different timer types is not supported and may result in unpredictable behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>bool operator&lt;=(QDeadlineTimer <db:emphasis>d1</db:emphasis>, QDeadlineTimer <db:emphasis>d2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(QDeadlineTimer d1, QDeadlineTimer d2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the deadline on <db:code role="parameter">d1</db:code> is earlier than or the same as the deadline in <db:code role="parameter">d2</db:code>, false otherwise. The timer type used to create the two deadlines is ignored. This function is equivalent to:</db:para>
<db:programlisting language="cpp">    return d1.deadlineNSecs() &amp;lt;= d2.deadlineNSecs();
</db:programlisting>
<db:note>
<db:para>comparing <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> objects with different timer types is not supported and may result in unpredictable behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(QDeadlineTimer <db:emphasis>d1</db:emphasis>, QDeadlineTimer <db:emphasis>d2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QDeadlineTimer d1, QDeadlineTimer d2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the deadline on <db:code role="parameter">d1</db:code> and the deadline in <db:code role="parameter">d2</db:code> are the same, false otherwise. The timer type used to create the two deadlines is ignored. This function is equivalent to:</db:para>
<db:programlisting language="cpp">    return d1.deadlineNSecs() == d2.deadlineNSecs();
</db:programlisting>
<db:note>
<db:para>comparing <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> objects with different timer types is not supported and may result in unpredictable behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool operator&gt;(QDeadlineTimer <db:emphasis>d1</db:emphasis>, QDeadlineTimer <db:emphasis>d2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(QDeadlineTimer d1, QDeadlineTimer d2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the deadline on <db:code role="parameter">d1</db:code> is later than the deadline in <db:code role="parameter">d2</db:code>, false otherwise. The timer type used to create the two deadlines is ignored. This function is equivalent to:</db:para>
<db:programlisting language="cpp">    return d1.deadlineNSecs() &amp;gt; d2.deadlineNSecs();
</db:programlisting>
<db:note>
<db:para>comparing <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> objects with different timer types is not supported and may result in unpredictable behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>bool operator&gt;=(QDeadlineTimer <db:emphasis>d1</db:emphasis>, QDeadlineTimer <db:emphasis>d2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>d2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(QDeadlineTimer d1, QDeadlineTimer d2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the deadline on <db:code role="parameter">d1</db:code> is later than or the same as the deadline in <db:code role="parameter">d2</db:code>, false otherwise. The timer type used to create the two deadlines is ignored. This function is equivalent to:</db:para>
<db:programlisting language="cpp">    return d1.deadlineNSecs() &amp;gt;= d2.deadlineNSecs();
</db:programlisting>
<db:note>
<db:para>comparing <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> objects with different timer types is not supported and may result in unpredictable behavior.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
