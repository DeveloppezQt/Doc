<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt OPC UA X509 Support</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Shows how to generate keys and certificate signing requests.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example shows how client applications can generate their own self-signed certificate or generate a certificate signing request.</db:para>
<db:section xml:id="generating-rsa-key">
<db:title>Generating RSA key</db:title>
<db:para>At first, an RSA key is generated:</db:para>
<db:programlisting language="cpp">QOpcUaKeyPair key;
key.generateRsaKey(QOpcUaKeyPair::RsaKeyStrength::Bits2048);
</db:programlisting>
<db:para>The private key can be saved to a file for further usage:</db:para>
<db:programlisting language="cpp">QByteArray keyData = key.privateKeyToByteArray(QOpcUaKeyPair::Cipher::Unencrypted, QString());

QFile keyFile(u&quot;privateKey.pem&quot;_s);
keyFile.open(QFile::WriteOnly);
keyFile.write(keyData);
keyFile.close();
</db:programlisting>
</db:section>
<db:section xml:id="generating-certificate-signing-requests">
<db:title>Generating certificate signing requests</db:title>
<db:para>Next, a certificate signing request is created. It is also necessary to set the subject of the certificate and add all the extensions needed for OPC UA.</db:para>
<db:programlisting language="cpp">QOpcUaX509CertificateSigningRequest csr;

// Set the subject of the certificate
QOpcUaX509DistinguishedName dn;
dn.setEntry(QOpcUaX509DistinguishedName::Type::CommonName, u&quot;QtOpcUaViewer&quot;_s);
dn.setEntry(QOpcUaX509DistinguishedName::Type::CountryName, u&quot;DE&quot;_s);
dn.setEntry(QOpcUaX509DistinguishedName::Type::LocalityName, u&quot;Berlin&quot;_s);
dn.setEntry(QOpcUaX509DistinguishedName::Type::StateOrProvinceName, u&quot;Berlin&quot;_s);
dn.setEntry(QOpcUaX509DistinguishedName::Type::OrganizationName, u&quot;The Qt Company&quot;_s);
csr.setSubject(dn);
</db:programlisting>
<db:para>Now there are two options: </db:para>
<db:para>1. When you need to get your certificate signing request signed by a certificate authority, you have to use the request data.</db:para>
<db:programlisting language="cpp">QByteArray certificateSigningRequestData = csr.createRequest(key);
</db:programlisting>
<db:para>2. When there is no certificate authority, you have to self-sign the request.</db:para>
<db:programlisting language="cpp">QByteArray selfSignedCertificateData = csr.createSelfSignedCertificate(key);
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="x509/CMakeLists.txt">x509/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="x509/main.cpp">x509/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="x509/x509.pro">x509/x509.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
